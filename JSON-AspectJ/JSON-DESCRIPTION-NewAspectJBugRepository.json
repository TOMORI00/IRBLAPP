{"155972":"AspectJ version: 1.5.3.200608290814 When advising a constructor, we can do the following to\n                obtain the constructor as a java.lang.reflect.Member: Member cons = ((ConstructorSignature)\n                thisJoinPointStaticPart .getSignature()).getConstructor(); however that sometimes fails, and returns\n                null.\n            ","159896":"Advice of the same kind contained in the same aspect currently do not have unique handles if\n                the aspect is on the aspectpath.\n            ","39993":"From an email sent to the user's list 6/26/2003: ------------------------------------------ ajc\n                1.1 NPE when an aspect declares hashcode() as follows: interface Identifiable { void setId(Id id); Id\n                getId(); } aspect IdentifiableAspect { private Id Identifiable.id = null; public Id Identifiable.getId()\n                { return this.id; } public void Identifiable.setId(Id id) { this.id = id; } public int\n                Identifiable.hashCode() { return (this.getId() == null) ? super.hashCode() : this.getId().hashCode(); }\n                } A workaround for callers the compiler controls is to replace the declaration with around advice: int\n                around(Identifiable i): target(i) && call(public int hashCode()) { return (i.getId() == null) ?\n                proceed(i) : i.getId().hashCode(); }\n            ","72699":"When attempting to compile the following aspect the resulting error message should say\n                something like \"The abstract method pointcut tracingScope in type Tracing can only be defined by an\n                abstract aspect\" public aspect Tracing { public abstract pointcut tracingScope(); }\n            ","129566":"After \"upgrading\" to eclipse 3.2M5a and AJDT 20060224163227 I repeatedly get the\n                following stack trace on a regular Java class: java.lang.ArrayIndexOutOfBoundsException at\n                org.aspectj.weaver.ReferenceType.determineThoseTypesToUse(ReferenceType.java:465) at\n                org.aspectj.weaver.ReferenceType.getDeclaredInterfaces(ReferenceType.java:411) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveParentsFor(BcelWeaver.java:1199) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1047) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:300) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178) at\n                org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:824) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:234) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:157) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n                ArrayIndexOutOfBoundsException thrown: -1 This happens even when the class is the only file in a fresh\n                project (without any aspects!); existing AJ projects work fine as soon as this class is excluded from\n                the build path. When the class is moved into a different project and referenced as dependency everything\n                works as expected. This used to work fine with previous versions of AJDT up to the last release for\n                eclipse 3.1.\n            ","128237":"I got NullPointerException during compilation of any @AspectJ code with pointcut which contains\n                logical OR operation. -----Here is my test case for this bug---------------- import java.io.IOException;\n                import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.Around; import\n                org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Pointcut; @Aspect class\n                AbstractTracer { @Pointcut(\"(execution(public * Foo+.* (..)) || execution(public * Foo+.blablabla\n                (..)))&& !execution(public Foo+.new (..))\") // @Pointcut(\"(execution(public * Foo+.*\n                (..)))&& !execution(public Foo+.new (..))\") protected void methodCall(){}; @Pointcut(\"methodCall()&&\n                this(obj)\") private void objectCall(Object obj) { }; @Around(\"objectCall(obj)\") public\n                Object aroundMethodCall(ProceedingJoinPoint thisJoinPoint, Object obj) throws Throwable {\n                System.out.println(\"Before \"+thisJoinPoint.getSignature().toString()); if (\n                thisJoinPoint.getSignature().toString().indexOf(\"A\")!= -1) { throw new IOException(\"Hello\n                from Aspect!\"); // throw new Exception(\"Hello from Aspect!\"); } Object result =\n                thisJoinPoint.proceed(); System.out.println(\"After \"+thisJoinPoint.getSignature().toString());\n                return result; } } public class Foo { public void methodA() throws IOException { throw new IOException(\"Foo.methodA\");\n                } public void methodB(boolean b) throws Exception { if ( b ) { throw new Exception(\"Foo.methodB\");\n                } } /** * @param args */ public static void main(String[] args) { Foo obj = new Foo(); try {\n                obj.methodA(); System.out.println(\"Something going wrong!\"); } catch ( IOException e) {\n                System.out.println(\"All right! We got exception\"); e.printStackTrace(System.out); } try {\n                obj.methodB(false); System.out.println(\"All right!\"); } catch ( Exception e) {\n                System.out.println(\"Something going wrong! We got exception\"); e.printStackTrace(System.out);\n                } } } ------------------------------------------------------ and here is acj error log\n                ------------------------------------------------------ ---- AspectJ Properties --- AspectJ Compiler\n                1.5.0 built on Tuesday Dec 20, 2005 at 12:05:54 GMT ---- Dump Properties --- Dump file:\n                ajcore.20060216.175147.608.txt Dump reason: java.lang.NullPointerException Dump on exception: true Dump\n                at exit condition: abort ---- Exception Information --- java.lang.NullPointerException at\n                org.aspectj.weaver.bcel.BcelWeaver.validateOrBranch(BcelWeaver.java:611) at\n                org.aspectj.weaver.bcel.BcelWeaver.validateBindings(BcelWeaver.java:579) at\n                org.aspectj.weaver.bcel.BcelWeaver.rewritePointcuts(BcelWeaver.java:511) at\n                org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave(BcelWeaver.java:449) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:283) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178) at\n                org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:230) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:156) at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60) at\n                org.aspectj.tools.ajc.Main.run(Main.java:326) at org.aspectj.tools.ajc.Main.runMain(Main.java:240) at\n                org.aspectj.tools.ajc.Main.main(Main.java:83) ---- System Properties --- java.runtime.name=Java(TM) 2\n                Runtime Environment, Standard Edition sun.boot.library.path=/opt/Java/jdk1.5.0_04/jre/lib/i386\n                java.vm.version=1.5.0_04-b05 java.vm.vendor=Sun Microsystems Inc. java.vendor.url=http://java.sun.com/\n                path.separator=: java.vm.name=Java HotSpot(TM) Client VM file.encoding.pkg=sun.io user.country=RU\n                sun.os.patch.level=unknown java.vm.specification.name=Java Virtual Machine Specification\n                user.dir=/home/kei/ajdt-workspace/AspectJTests java.runtime.version=1.5.0_04-b05\n                java.awt.graphicsenv=sun.awt.X11GraphicsEnvironment\n                java.endorsed.dirs=/opt/Java/jdk1.5.0_04/jre/lib/endorsed os.arch=i386 java.io.tmpdir=/tmp\n                line.separator= java.vm.specification.vendor=Sun Microsystems Inc. os.name=Linux sun.jnu.encoding=UTF-8\n                java.library.path=/opt/Java/jdk1.5.0_04/jre/lib/i386/client:/opt/Java/jdk1.5.0_04/jre/lib/i386:/opt/Java/jdk1.5.0_04/jre/../lib/i386:.:\n                java.specification.name=Java Platform API Specification java.class.version=49.0\n                sun.management.compiler=HotSpot Client Compiler os.version=2.6.15-1.1831_FC4 user.home=/home/kei\n                user.timezone=Europe/Kiev java.awt.printerjob=sun.print.PSPrinterJob file.encoding=UTF-8\n                java.specification.version=1.5\n                java.class.path=components/aspectjweaver.jar:components/aspectjtools.jar:components/aspectjrt.jar:components/aspectjlib.jar:/build/auroratest.jar:/opt/Java/aspectj1.5/lib/aspectjtools.jar:/opt/Java/jdk1.5.0_04/lib/tools.jar\n                user.name=kei java.vm.specification.version=1.0 java.home=/opt/Java/jdk1.5.0_04/jre\n                sun.arch.data.model=32 user.language=ru java.specification.vendor=Sun Microsystems Inc.\n                java.vm.info=mixed mode, sharing java.version=1.5.0_04 java.ext.dirs=/opt/Java/jdk1.5.0_04/jre/lib/ext\n                sun.boot.class.path=/opt/Java/jdk1.5.0_04/jre/lib/rt.jar:/opt/Java/jdk1.5.0_04/jre/lib/i18n.jar:/opt/Java/jdk1.5.0_04/jre/lib/sunrsasign.jar:/opt/Java/jdk1.5.0_04/jre/lib/jsse.jar:/opt/Java/jdk1.5.0_04/jre/lib/jce.jar:/opt/Java/jdk1.5.0_04/jre/lib/charsets.jar:/opt/Java/jdk1.5.0_04/jre/classes\n                java.vendor=Sun Microsystems Inc. file.separator=/\n                java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi sun.io.unicode.encoding=UnicodeLittle\n                sun.cpu.endian=little sun.cpu.isalist= ---- Command Line --- -1.5 Foo.java ---- Full Classpath ---\n                /opt/Java/jdk1.5.0_04/jre/lib/rt.jar(39713589 bytes) /opt/Java/jdk1.5.0_04/jre/lib/i18n.jar(missing)\n                /opt/Java/jdk1.5.0_04/jre/lib/sunrsasign.jar(missing) /opt/Java/jdk1.5.0_04/jre/lib/jsse.jar(549315\n                bytes) /opt/Java/jdk1.5.0_04/jre/lib/jce.jar(81799 bytes)\n                /opt/Java/jdk1.5.0_04/jre/lib/charsets.jar(8627836 bytes) /opt/Java/jdk1.5.0_04/jre/classes(missing)\n                /opt/Java/jdk1.5.0_04/jre/lib/ext/localedata.jar(802502 bytes)\n                /opt/Java/jdk1.5.0_04/jre/lib/ext/sunpkcs11.jar(175414 bytes)\n                /opt/Java/jdk1.5.0_04/jre/lib/ext/dnsns.jar(8176 bytes)\n                /opt/Java/jdk1.5.0_04/jre/lib/ext/sunjce_provider.jar(153235 bytes)\n                /opt/Java/jdk1.5.0_04/jre/lib/ext/bctsp-jdk15-129.jar(38357 bytes)\n                /opt/Java/jdk1.5.0_04/jre/lib/ext/bcprov-jdk15-129.jar(1168795 bytes)\n                /opt/Java/jdk1.5.0_04/jre/lib/ext/j3daudio.jar(1386793 bytes)\n                /opt/Java/jdk1.5.0_04/jre/lib/ext/bcmail-jdk15-129.jar(124831 bytes)\n                /opt/Java/jdk1.5.0_04/jre/lib/ext/j3dcore.jar(2514820 bytes)\n                /opt/Java/jdk1.5.0_04/jre/lib/ext/j3dutils.jar(1401997 bytes)\n                /opt/Java/jdk1.5.0_04/jre/lib/ext/vecmath.jar(290018 bytes)\n                /opt/Java/jdk1.5.0_04/jre/lib/ext/bcprov-jdk14-129.jar(1157625 bytes)\n                /opt/Java/jdk1.5.0_04/jre/lib/ext/bcmail-jdk14-129.jar(126679 bytes)\n                /home/kei/ajdt-workspace/AspectJTests/components/aspectjweaver.jar(1746917 bytes)\n                /home/kei/ajdt-workspace/AspectJTests/components/aspectjrt.jar(108647 bytes)\n                /home/kei/ajdt-workspace/AspectJTests/components/aspectjlib.jar(7845 bytes)\n                /build/auroratest.jar(missing) /opt/Java/jdk1.5.0_04/lib/tools.jar(7015499 bytes)\n                /opt/Java/jdk1.5.0_04/jre/lib/ext/localedata.jar(802502 bytes)\n                /opt/Java/jdk1.5.0_04/jre/lib/ext/sunpkcs11.jar(175414 bytes)\n                /opt/Java/jdk1.5.0_04/jre/lib/ext/dnsns.jar(8176 bytes)\n                /opt/Java/jdk1.5.0_04/jre/lib/ext/sunjce_provider.jar(153235 bytes)\n                /opt/Java/jdk1.5.0_04/jre/lib/ext/bctsp-jdk15-129.jar(38357 bytes)\n                /opt/Java/jdk1.5.0_04/jre/lib/ext/bcprov-jdk15-129.jar(1168795 bytes)\n                /opt/Java/jdk1.5.0_04/jre/lib/ext/j3daudio.jar(1386793 bytes)\n                /opt/Java/jdk1.5.0_04/jre/lib/ext/bcmail-jdk15-129.jar(124831 bytes)\n                /opt/Java/jdk1.5.0_04/jre/lib/ext/j3dcore.jar(2514820 bytes)\n                /opt/Java/jdk1.5.0_04/jre/lib/ext/j3dutils.jar(1401997 bytes)\n                /opt/Java/jdk1.5.0_04/jre/lib/ext/vecmath.jar(290018 bytes)\n                /opt/Java/jdk1.5.0_04/jre/lib/ext/bcprov-jdk14-129.jar(1157625 bytes)\n                /opt/Java/jdk1.5.0_04/jre/lib/ext/bcmail-jdk14-129.jar(126679 bytes)\n                /home/kei/ajdt-workspace/AspectJTests/components/aspectjweaver.jar(1746917 bytes)\n                /home/kei/ajdt-workspace/AspectJTests/components/aspectjrt.jar(108647 bytes)\n                /home/kei/ajdt-workspace/AspectJTests/components/aspectjlib.jar(7845 bytes)\n                /build/auroratest.jar(missing) /opt/Java/jdk1.5.0_04/lib/tools.jar(7015499 bytes) ---- Compiler Messages\n                --- abort ABORT -- (NullPointerException) null null java.lang.NullPointerException at\n                org.aspectj.weaver.bcel.BcelWeaver.validateOrBranch(BcelWeaver.java:611) at\n                org.aspectj.weaver.bcel.BcelWeaver.validateBindings(BcelWeaver.java:579) at\n                org.aspectj.weaver.bcel.BcelWeaver.rewritePointcuts(BcelWeaver.java:511) at\n                org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave(BcelWeaver.java:449) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:283) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178) at\n                org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:230) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:156) at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60) at\n                org.aspectj.tools.ajc.Main.run(Main.java:326) at org.aspectj.tools.ajc.Main.runMain(Main.java:240) at\n                org.aspectj.tools.ajc.Main.main(Main.java:83) ---- org.aspectj.weaver.bcel.BcelWorld ---- Shadow\n                mungers: (around(extraFlags: 2): (persingleton(AbstractTracer) && (((execution(public *\n                Foo+.*(..)) || execution(public * Foo+.blablabla(..))) && !execution(public Foo+.new(..))) &&\n                this(BindingTypePattern(java.lang.Object, 1))))->java.lang.Object\n                AbstractTracer.aroundMethodCall(org.aspectj.lang.ProceedingJoinPoint, java.lang.Object)) Type mungers:\n                (BcelTypeMunger null) (BcelTypeMunger ResolvedTypeMunger(PrivilegedAccess, void java.lang.Object.()))\n                Late Type mungers: (BcelTypeMunger null)\n                ------------------------------------------------------------------ I got same error with latest\n                (aspectj-DEVELOPMENT-20060216105006) night build.\n            ","28974":"The aspect below fails to compile with 1.1b2, producing the compilation error:\n                -------------------- $ ajc com/ibm/amc/*.java com/ibm/amc/ejb/*.java\n                d:/eclipse/runtime-workspace-ajsamples/Mock EJBs/com/ibm/amc/DemoBeanEJB.java:1: Cannot assign a value\n                to the final field com.ibm.amc.DemoBean.ajc$interField$co m_ibm_amc$verbose !! no source information\n                available !! 1 error --------------------------- package com.ibm.amc; import\n                com.ibm.amc.ejb.SessionBean; /** * @author colyer * * To change this generated comment edit the template\n                variable \"typecomment\": * Window>Preferences>Java>Templates. * To enable and disable\n                the creation of type comments go to * Window>Preferences>Java>Code Generation. */ public aspect\n                DemoBeanEJB { declare parents: DemoBean implements SessionBean; // THIS NEXT LINE IS THE CULPRIT static\n                final boolean DemoBean.verbose = true; private transient String DemoBean.ctx; public void\n                DemoBean.ejbActivate( ) { if ( verbose ) { System.out.println( \"ejbActivate Called\" ); } } }\n                ------------------- Making the inter-type declaration non-final solves the problem...\n            ","41952":"Some would like an XLint compiler warning when the user in a call PCD specifies a declaring\n                type that is not the defining type, because that constrains the join points to those whose bytecode\n                signature contain the specified type as the declaring type. e.g., ---- class A { void run() {} } class B\n                extends A {} aspect C { before() : call(void B.run()) { } // warn here } public class Main { public\n                static void main(String[] args) { // ok with -1.4; otherwise, becomes A.run in bytecode new B().run();\n                // never works - compile-time type of reference is A, not B ((A) new B()).run(); } ---- This warning is\n                useful for two reasons. First, the user probably intended that any call to an instance of that object be\n                picked out (regardless of the compile-time type of the reference used to make the call), and thus should\n                use target(B) && call(void run()) (This suggestion could be in the XLint message.) Second, older\n                compilers (i.e., compilers not using -1.4) would incorrectly specify the declaring type of the method\n                call as the first type in the hierarchy which defined the method, so even if the user meant to constrain\n                the join point by the compile-time reference type, the bytecode signature could be incorrect and the\n                pointcut fail to pick out the join point. One problem with this XLint warning is that is also picks out\n                valid declare warning/error statements enforcing requirements at compile-time about the type of the\n                reference used to invoke a method (e.g., when using a static reference of the wrong type). So perhaps\n                the default level should be ignore. See also bug 41888.\n            ","81846":"java.lang.ArrayIndexOutOfBoundsException: 3 Unfortunately I can't provide much more\n                information, please see the attached compiler dump.\n            ","122370":"Adding a setter to the Moody example makes it clear that the annotation style (@DeclareParents)\n                results in different behavior than the classic (declare parents) style. Calling the setter in a \"declare\n                parents\"-advised object behaves as one would expect. However, calling the setter with a \"@DeclareParents\"-advised\n                object has no effect -- that is, you can call the setter (and see that it's been called) and immediately\n                call the getter, only to find that the value didn't change. The following examples (all in \"package\n                moody;\") illustrate: public enum Mood { HAPPY, JOLLY } Classic style: ------------- public aspect\n                ClassicMoodIndicator { public interface Moody { Mood getMood(); void setMood(Mood mood); } private Mood\n                Moody.mood = Mood.HAPPY; public Mood Moody.getMood() { return mood; } public void Moody.setMood(Mood\n                mood) { this.mood = mood; } declare parents : moody.ClassicMoodImplementor implements Moody; } public\n                class ClassicMoodImplementor { } Annotation style: ---------------- import\n                org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.DeclareParents; @Aspect public\n                class AnnotationMoodIndicator { public interface Moody { Mood getMood(); void setMood(Mood mood); }\n                public static class MoodyImpl implements Moody { private Mood mood = Mood.HAPPY; public Mood getMood() {\n                return mood; } public void setMood(Mood mood) { this.mood = mood; } } @DeclareParents(value=\"moody.AnnotationMoodImplementor\",defaultImpl=MoodyImpl.class)\n                private Moody implementedInterface; } public class AnnotationMoodImplementor { } JUnit TestCase:\n                -------------- import junit.framework.TestCase; public class MoodTester extends TestCase { public\n                MoodTester(String name) { super(name); } public void testClassic() { ClassicMoodImplementor cmi0 = new\n                ClassicMoodImplementor(); ClassicMoodImplementor cmi1 = new ClassicMoodImplementor(); assertEquals(\"cmi0\n                should be HAPPY\", Mood.HAPPY, cmi0.getMood()); cmi1.setMood(Mood.JOLLY); assertEquals(\"cmi1\n                should be JOLLY\", Mood.JOLLY, cmi1.getMood()); assertEquals(\"cmi0 should be *still* be HAPPY\",\n                Mood.HAPPY, cmi0.getMood()); } public void testAnnotation() { AnnotationMoodImplementor ami0 = new\n                AnnotationMoodImplementor(); AnnotationMoodImplementor ami1 = new AnnotationMoodImplementor();\n                assertEquals(\"ami0 should be HAPPY\", Mood.HAPPY, ((AnnotationMoodIndicator.Moody)\n                ami0).getMood()); ((AnnotationMoodIndicator.Moody) ami1).setMood(Mood.JOLLY); assertEquals(\"ami1\n                should be JOLLY\", Mood.JOLLY, ((AnnotationMoodIndicator.Moody) ami1).getMood()); assertEquals(\"ami0\n                should be *still* be HAPPY\", Mood.HAPPY, ((AnnotationMoodIndicator.Moody) ami0).getMood()); } }\n                Result: ------ The test run is as follows: ..F Time: 0.021 There was 1 failure: 1)\n                testAnnotation(moody.MoodTester)junit.framework.AssertionFailedError: ami1 should be JOLLY expected:<JOLLY>\n                but was:<HAPPY> at moody.MoodTester.testAnnotation(MoodTester.java:27) at\n                sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at\n                sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at\n                sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at\n                moody.MoodTester.main(MoodTester.java:7) FAILURES!!! Tests run: 2, Failures: 1, Errors: 0 For classic,\n                you can see that cmi1.setMood was successful and cmi0/cmi1 are decoupled (that is, calling setMood on\n                cmi1 has no impact on cmi0). The annotation style, however, fails because ami1.setMood appears to have\n                done nothing. The result should have been that ami1 is JOLLY and ami0 HAPPY (I include the second assert\n                because both ami0 & ami1 ended up JOLLY in RC1). The current behavior makes @DeclareParents unusable\n                for retaining field state (near as I can tell, it retains state throughout the method invocation, but\n                not beyond it, like it is creating and discarding a backing object with each method invocation).\n            ","36803":"[iajc] expected state: resolved got: concrete [iajc] expected state: resolved got: concrete\n                [iajc] org.aspectj.weaver.BCException: expected state: resolved got: concrete [iajc] at\n                org.aspectj.weaver.patterns.Pointcut.assertState (Pointcut.java:236) [iajc] at\n                org.aspectj.weaver.patterns.Pointcut.concretize (Pointcut.java:126) [iajc] at\n                org.aspectj.weaver.patterns.CflowPointcut.concretize1 (CflowPointcut.java:143) [iajc] at\n                org.aspectj.weaver.patterns.NotPointcut.concretize1 (NotPointcut.java:94) [iajc] at\n                org.aspectj.weaver.patterns.AndPointcut.concretize1 (AndPointcut.java:88) [iajc] at\n                org.aspectj.weaver.patterns.ReferencePointcut.concretize1 (ReferencePointcut.java:270) [iajc] at\n                org.aspectj.weaver.patterns.AndPointcut.concretize1 (AndPointcut.java:88) [iajc] at\n                org.aspectj.weaver.patterns.ReferencePointcut.concretize1 (ReferencePointcut.java:270) [iajc] at\n                org.aspectj.weaver.patterns.Pointcut.concretize (Pointcut.java:127) [iajc] at\n                org.aspectj.weaver.patterns.Pointcut.concretize (Pointcut.java:120) [iajc] at\n                org.aspectj.weaver.Advice.concretize(Advice.java:207) [iajc] at\n                org.aspectj.weaver.CrosscuttingMembers.addShadowMunger (CrosscuttingMembers.java:78) [iajc] at\n                org.aspectj.weaver.CrosscuttingMembers.addShadowMungers (CrosscuttingMembers.java:72) [iajc] at\n                org.aspectj.weaver.ResolvedTypeX.collectCrosscuttingMembers (ResolvedTypeX.java:328) [iajc] at\n                org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect (CrosscuttingMembersSet.java:54) [iajc] at\n                org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave (BcelWeaver.java:164) [iajc] at\n                org.aspectj.weaver.bcel.BcelWeaver.weave (BcelWeaver.java:214) [iajc] at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerateClassFile\n                s(AjBuildManager.java:394) [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild\n                (AjBuildManager.java:149) [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.runCommand (AjdtCommand.java:55)\n                [iajc] at org.aspectj.tools.ajc.Main.run(Main.java:216) [iajc] at\n                org.aspectj.tools.ajc.Main.runMain(Main.java:155) [iajc] at\n                org.aspectj.tools.ant.taskdefs.AjcTask.execute (AjcTask.java:646) [iajc] at\n                org.apache.tools.ant.UnknownElement.execute (UnknownElement.java:193) [iajc] at\n                org.apache.tools.ant.Task.perform(Task.java:341) [iajc] at\n                org.apache.tools.ant.Target.execute(Target.java:309) [iajc] at\n                org.apache.tools.ant.Target.performTasks(Target.java:336) [iajc] at\n                org.apache.tools.ant.Project.executeTarget (Project.java:1339) [iajc] at\n                org.apache.tools.ant.Project.executeTargets (Project.java:1255) [iajc] at\n                org.apache.tools.ant.Main.runBuild(Main.java:609) [iajc] at\n                org.apache.tools.ant.Main.start(Main.java:196) [iajc] at org.apache.tools.ant.Main.main(Main.java:235)\n            ","123212":"Exception when compile a project under svn. java.io.FileNotFoundException at\n                java.io.FileOutputStream.open(Native Method) at java.io.FileOutputStream.<init>(FileOutputStream.java:179)\n                at java.io.FileOutputStream.<init>(FileOutputStream.java:131) at\n                org.aspectj.util.FileUtil.makeOutputStream(FileUtil.java:1258) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.writeResource(AjBuildManager.java:466) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesFromFile(AjBuildManager.java:444) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesToDestination(AjBuildManager.java:386)\n                at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:298) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:185) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:163) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n                FileNotFoundException thrown:\n                /home/chomats/Fede/svn/fede-repos/Tool.Product.ProductServer/classes/.svn/format (Permission non\n                accord¨¦e)\n            ","123695":"I have an aspect that declares an annotation on a method based on a complex condition : declare\n                @method : !@(Write || Read) public !static * (@MarkMyMethods *).*(..) : @Write; Basically that means\n                that every type that is annotated with @MarkMyMethods should have all of its public non static methods\n                be annotated with either @Read or @Write. If neither of @Read nor @Write is present on such a method,\n                @Write is added by default. I have another aspect that makes every type annotated with @InjectName\n                implement the Named interface : public Interface Named { public String getName(); } public aspect\n                NameAspect { declare parents: @InjectName * implements Named; private String Named.name; public String\n                Named.getName() { return name; } } As soon as I annotate a class with both @MarkMyMethods and\n                @InjectName, I get an internal null pointer exception at weave time. However if I change the first\n                aspect to say : declare @method : !@(Read) public !static * (@MarkMyMethods *).*(..) : @Write; or\n                declare @method : !@(Write) public !static * (@MarkMyMethods *).*(..) : @Write; instead of the !@(Read\n                || Write) one, everything compiles fine. Here is a link to a small application that exhibits the bug. :\n                http://www.cs.mcgill.ca/~jlegar/src_jslegare.zip ========== Here is the error output :\n                java.lang.NullPointerException at\n                org.aspectj.weaver.patterns.WildAnnotationTypePattern.matches(WildAnnotationTypePattern.java:61) at\n                org.aspectj.weaver.patterns.NotAnnotationTypePattern.matches(NotAnnotationTypePattern.java:35) at\n                org.aspectj.weaver.patterns.SignaturePattern.matchesAnnotations(SignaturePattern.java:488) at\n                org.aspectj.weaver.patterns.SignaturePattern.matchesExactly(SignaturePattern.java:331) at\n                org.aspectj.weaver.patterns.SignaturePattern.matches(SignaturePattern.java:288) at\n                org.aspectj.weaver.patterns.DeclareAnnotation.matches(DeclareAnnotation.java:247) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weaveAtMethodOnITDSRepeatedly(BcelClassWeaver.java:995) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weaveDeclareAtMethodCtor(BcelClassWeaver.java:730) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:430) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:102) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1543) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1494) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1275) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1078) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:300) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178) at\n                org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:230) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:156) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191) trouble\n                in: public class NameAspect extends java.lang.Object: TypeMungers: [(BcelTypeMunger\n                ResolvedTypeMunger(Method, java.lang.String Named.getName())), (BcelTypeMunger ResolvedTypeMunger(Field,\n                java.lang.String Named.name))] declares: [declare parents: @InjectName * extends (Named);] private\n                static Throwable ajc$initFailureCause public static final NameAspect ajc$perSingletonInstance static\n                void <clinit>(): catch java.lang.Throwable -> E0 | INVOKESTATIC NameAspect.ajc$postClinit ()V\n                (line 2) catch java.lang.Throwable -> E0 GOTO L0 E0: ASTORE_0 ALOAD_0 PUTSTATIC\n                NameAspect.ajc$initFailureCause Ljava/lang/Throwable; L0: RETURN end static void <clinit>() public\n                void <init>(): ALOAD_0 // NameAspect this (line 2) INVOKESPECIAL java.lang.Object.<init> ()V\n                RETURN end public void <init>() void ajc$declare_parents_1()\n                org.aspectj.weaver.MethodDeclarationLineNumber: 5:40 : RETURN (line 5) end void ajc$declare_parents_1()\n                public static String ajc$interMethod$NameAspect$Named$getName(Named)\n                EffectiveSignatureAttribute(java.lang.String Named.getName(), method-execution) : ALOAD_0 // Named\n                ajc$this_ (line 11) INVOKESTATIC NameAspect.ajc$interFieldGetDispatch$NameAspect$Named$name\n                (LNamed;)Ljava/lang/String; ARETURN end public static String\n                ajc$interMethod$NameAspect$Named$getName(Named) public static String\n                ajc$interMethodDispatch1$NameAspect$Named$getName(Named) EffectiveSignatureAttribute(java.lang.String\n                Named.getName(), method-call) : ALOAD_0 INVOKEINTERFACE Named.getName ()Ljava/lang/String; ARETURN end\n                public static String ajc$interMethodDispatch1$NameAspect$Named$getName(Named) public static void\n                ajc$interFieldInit$NameAspect$Named$name(Named) org.aspectj.weaver.MethodDeclarationLineNumber: 12:279 :\n                RETURN (line 12) end public static void ajc$interFieldInit$NameAspect$Named$name(Named) public static\n                String ajc$interFieldGetDispatch$NameAspect$Named$name(Named)\n                EffectiveSignatureAttribute(java.lang.String Named.name, field-get) : ALOAD_0 INVOKEINTERFACE\n                Named.ajc$interFieldGet$NameAspect$Named$name ()Ljava/lang/String; ARETURN end public static String\n                ajc$interFieldGetDispatch$NameAspect$Named$name(Named) public static void\n                ajc$interFieldSetDispatch$NameAspect$Named$name(Named, String)\n                EffectiveSignatureAttribute(java.lang.String Named.name, field-set) : ALOAD_0 ALOAD_1 INVOKEINTERFACE\n                Named.ajc$interFieldSet$NameAspect$Named$name (Ljava/lang/String;)V RETURN end public static void\n                ajc$interFieldSetDispatch$NameAspect$Named$name(Named, String) public void\n                ajc$after$NameAspect$1$dd96786a(Named) AdviceAttribute(after, (execution(Named+.new(..)) &&\n                target(BindingTypePattern(Named, 0))), 0, 296) : GETSTATIC java.lang.System.out Ljava/io/PrintStream;\n                (line 15) LDC \"A new name was created\" INVOKEVIRTUAL java.io.PrintStream.println\n                (Ljava/lang/String;)V ALOAD_1 // Named newinstance (line 16) LDC \"TikaTikaSlimShady\"\n                INVOKESTATIC NameAspect.ajc$interFieldSetDispatch$NameAspect$Named$name (LNamed;Ljava/lang/String;)V\n                RETURN (line 17) end public void ajc$after$NameAspect$1$dd96786a(Named) public static NameAspect\n                aspectOf() org.aspectj.weaver.AjAttribute$AjSynthetic@14d92f0 : GETSTATIC\n                NameAspect.ajc$perSingletonInstance LNameAspect; IFNONNULL L0 NEW\n                org.aspectj.lang.NoAspectBoundException DUP LDC \"NameAspect\" GETSTATIC\n                NameAspect.ajc$initFailureCause Ljava/lang/Throwable; INVOKESPECIAL\n                org.aspectj.lang.NoAspectBoundException.<init> (Ljava/lang/String;Ljava/lang/Throwable;)V ATHROW\n                L0: GETSTATIC NameAspect.ajc$perSingletonInstance LNameAspect; ARETURN end public static NameAspect\n                aspectOf() public static boolean hasAspect() org.aspectj.weaver.AjAttribute$AjSynthetic@12e2f2e :\n                GETSTATIC NameAspect.ajc$perSingletonInstance LNameAspect; IFNULL L0 ICONST_1 IRETURN L0: ICONST_0\n                IRETURN end public static boolean hasAspect() private static void ajc$postClinit()\n                org.aspectj.weaver.AjAttribute$AjSynthetic@1f0523b : NEW NameAspect DUP INVOKESPECIAL NameAspect.<init>\n                ()V PUTSTATIC NameAspect.ajc$perSingletonInstance LNameAspect; RETURN end private static void\n                ajc$postClinit() end public class NameAspect when weaving type NameAspect when weaving aspects when\n                weaving when batch building\n                BuildConfig[D:\\workspace\\.metadata\\.plugins\\org.eclipse.ajdt.core\\AspectSandBox.generated.lst] #Files=8\n            ","37576":"The AjcTask (iajc) task takes nested bootclasspath entities as classpath and vice-versa.\n            ","68991":"/* initialisers of intertype fields should match field set pointcuts. In the example below, the\n                output should be set field set(int C.n) set field set(int C.m) get field get(int C.n) set field set(int\n                C.n) but the first field set (of C.n) is not picked up. */ aspect Aspect { private int C.n = 13;\n                before() : get(* C.*) { System.out.println(\"get field \"+thisJoinPointStaticPart); } before() :\n                set(* C.*) { System.out.println(\"set field \"+thisJoinPointStaticPart); } public void C.foo() {\n                n++; } } class C { int m = 20; } public class ITFieldsAdvice { public static void main(String[] args) {\n                C c = new C(); c.foo(); } }\n            ","138286":"When using perthis() with an aspect, I see the following Internal Compiler AJDT 1.3.1 / AspectJ\n                1.5.1a Build 20060406092046 Eclipse 3.1.2, Windows XP, JDK 1.5 Error: java.lang.ClassCastException at\n                org.aspectj.weaver.patterns.PerThisOrTargetPointcutVisitor.getPerTypePointcut(PerThisOrTargetPointcutVisitor.java:41)\n                at\n                org.aspectj.weaver.patterns.PerThisOrTargetPointcutVisitor.visit(PerThisOrTargetPointcutVisitor.java:108)\n                at org.aspectj.weaver.patterns.AndPointcut.accept(AndPointcut.java:119) at\n                org.aspectj.weaver.patterns.PerThisOrTargetPointcutVisitor.getPerTypePointcut(PerThisOrTargetPointcutVisitor.java:41)\n                at\n                org.aspectj.weaver.PerObjectInterfaceTypeMunger.getTestTypePattern(PerObjectInterfaceTypeMunger.java:64)\n                at org.aspectj.weaver.PerObjectInterfaceTypeMunger.matches(PerObjectInterfaceTypeMunger.java:85) at\n                org.aspectj.weaver.ConcreteTypeMunger.matches(ConcreteTypeMunger.java:65) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:508) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:109) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1560) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1511) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1291) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1089) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:311) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:183) at\n                org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:862) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:242) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:161) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:278) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:168) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191) trouble\n                in: public abstract class org.apache.tapestry.internal.aspects.AbstractClassTargetting extends\n                java.lang.Object: public void <init>(): ALOAD_0 //\n                Lorg/apache/tapestry/internal/aspects/AbstractClassTargetting; this (line 10) INVOKESPECIAL\n                java.lang.Object.<init> ()V initialization(void\n                org.apache.tapestry.internal.aspects.AbstractClassTargetting.<init>()) | ALOAD_0 | INVOKEVIRTUAL\n                java.lang.Object.getClass ()Ljava/lang/Class; | LDC\n                org.apache.tapestry.internal.annotations.Synchronized | INVOKEVIRTUAL\n                java.lang.Class.isAnnotationPresent (Ljava/lang/Class;)Z | IFEQ L0 | ALOAD_0 | INVOKESTATIC\n                org.apache.tapestry.internal.aspects.InternalSynchronization.ajc$perObjectBind (Ljava/lang/Object;)V |\n                constructor-execution(void org.apache.tapestry.internal.aspects.AbstractClassTargetting.<init>())\n                | | L0: ALOAD_0 | | INVOKEVIRTUAL java.lang.Object.getClass ()Ljava/lang/Class; | | LDC\n                org.apache.tapestry.internal.annotations.Synchronized | | INVOKEVIRTUAL\n                java.lang.Class.isAnnotationPresent (Ljava/lang/Class;)Z | | IFEQ L1 | | ALOAD_0 | | INVOKESTATIC\n                org.apache.tapestry.internal.aspects.InternalSynchronization.ajc$perObjectBind (Ljava/lang/Object;)V | |\n                L1: RETURN | constructor-execution(void org.apache.tapestry.internal.aspects.AbstractClassTargetting.<init>())\n                initialization(void org.apache.tapestry.internal.aspects.AbstractClassTargetting.<init>()) end\n                public void <init>() abstract void ajc$pointcut$$targetClasses$274()\n                org.aspectj.weaver.MethodDeclarationLineNumber: 16:628 ; end public abstract class\n                org.apache.tapestry.internal.aspects.AbstractClassTargetting when weaving type\n                org.apache.tapestry.internal.aspects.AbstractClassTargetting when weaving aspects when weaving when\n                batch building\n                BuildConfig[C:\\workspace\\.metadata\\.plugins\\org.eclipse.ajdt.core\\tapestry5.generated.lst] #Files=70\n                I'll attach the corresponding files.\n            ","46280":"The compiler complains that \"inner aspects must be static\" whenever I try to qualify\n                an inner (and static) aspect as privileged, no matter what the enclosing type is (aspect, interface or\n                class). I was using j2sdk1.4.0_02, AspectJ 1.1, eclipse 2.1 (with AJDT 1.1.3). Test case:\n                ------------------ BASE CLASS: public class Capsule { private int hidden; public int visible; public\n                Capsule(int priv, int pub) { hidden = priv; visible = pub; } public void doSomething() {\n                System.out.println(\"\"\" + hidden + \", \" + visible + \"\"\"); }\n                public static void main(String[] args) { Capsule capsule = new Capsule(1, 1); capsule.doSomething(); } }\n                ------------------ ASPECT: public aspect Outer { static //privileged <== JUST TRY TO UNCOMMENT THIS!\n                aspect Inner { pointcut call2doSomething(Capsule capsule): call(void Capsule.doSomething()) &&\n                target(capsule); before(Capsule capsule): call2doSomething(capsule) { capsule.visible++;\n                //capsule.hidden++; } } } ------------------ INTERFACE: public interface Marker { static //privileged\n                <== JUST TRY TO UNCOMMENT THIS! aspect Inner { pointcut call2doSomething(Capsule capsule): call(void\n                Capsule.doSomething()) && target(capsule); before(Capsule capsule): call2doSomething(capsule) {\n                capsule.visible++; //capsule.hidden++; } } }\n            ","150271":"It would be nice if basic information about load-time weaving (what version of AspectJ is being\n                used, what loaders are doing weaving and what configuration is being used) was available without all of\n                the -verbose information listing of all classes woven or not woven. It's also unfortunate that the flags\n                for weaving level are 2 quite different ones: -Daj.weaving.verbose -Dorg.aspectj.weaver.showWeaveInfo\n                Why not something like -Dorg.aspectj.weaver.level=[none|summary|info|verbose] summary: just what\n                configuration is used info: list affected join points etc. (like showWeaveInfo) verbose: all (like\n                verbose now)\n            ","158573":"Given the following: public aspect A { public static int i = 0; before() : execution(* *.*(..))\n                {} } public class C { public void m() {} } Changing the value of i to be something else and then saving\n                results in an incremental build and an \"adviceDidNotMatch\" warning. A full build clears the\n                warning. This is since the JDTLikeHandleProvider (bug 141730) was made the default in AJDT and is down\n                to the call on line 90 of CrosscuttingMembersSet which is the fix for bug 134541). The reason we now hit\n                this is that the JDTLikeHandleProvider doesn't depend on location.\n            ","71811":"ajdoc doesn't support the -encoding -docencoding and -charset options of javadoc. Especially,\n                it doesn't pass on the -encoding to ajc. If your project uses a source file encoding (e.g. UTF-8)\n                differing form the platform standard, and some java identifiers use characters byond the standard ASCII\n                range, you won't be able to use ajdoc at all.\n            ","136665":"[iajc] error at (no source information available) [iajc] File.aj:0::0 Internal compiler error\n                [iajc] org.aspectj.weaver.BCException: Can't open archive: missingjar [iajc] when resolving types\n                defined in compilation unit File.aj [iajc] when processing compilation unit File.aj [iajc] when batch\n                building BuildConfig[null] #Files=14 [iajc] [iajc] at\n                org.aspectj.weaver.bcel.ClassPathManager$ZipFileEntry.ensureO pen(ClassPathManager.java:258) [iajc] at\n                org.aspectj.weaver.bcel.ClassPathManager$ZipFileEntry.find(Cl assPathManager.java:225) [iajc] at\n                org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManage r.java:92) [iajc] at\n                org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.j ava:287) [iajc] at\n                org.aspectj.weaver.World.resolveToReferenceType(World.java:33 5) [iajc] at\n                org.aspectj.weaver.World.resolve(World.java:251) [iajc] at\n                org.aspectj.weaver.patterns.WildTypePattern.lookupTypeInWorld (WildTypePattern.java:716) [iajc] at\n                org.aspectj.weaver.patterns.WildTypePattern.resolveBindingsFr\n                omFullyQualifiedTypeName(WildTypePattern.java:690) [iajc] at\n                org.aspectj.weaver.patterns.WildTypePattern.resolveBindings(W ildTypePattern.java:623) [iajc] at\n                org.aspectj.weaver.patterns.SignaturePattern.resolveBindings( SignaturePattern.java:82) [iajc] at\n                org.aspectj.weaver.patterns.KindedPointcut.resolveBindings(Ki ndedPointcut.java:259) [iajc] at\n                org.aspectj.weaver.patterns.AndPointcut.resolveBindings(AndPo intcut.java:74) [iajc] at\n                org.aspectj.weaver.patterns.Pointcut.resolve(Pointcut.java:19 4) [iajc] at\n                org.aspectj.ajdt.internal.compiler.ast.PointcutDesignator.fin\n                ishResolveTypes(PointcutDesignator.java:84) [iajc] at\n                org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration.reso lveStatements(AdviceDeclaration.java:118)\n                [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMet\n                hodDeclaration.resolve(AbstractMethodDeclaration.java:400) [iajc] at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclara tion.resolve(TypeDeclaration.java:1088)\n                [iajc] at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.reso lve(AspectDeclaration.java:116)\n                [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclara\n                tion.resolve(TypeDeclaration.java:1137) [iajc] at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.Compilation\n                UnitDeclaration.resolve(CompilationUnitDeclaration.java:305) [iajc] at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.proces s(Compiler.java:514) [iajc] at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compil e(Compiler.java:329) [iajc] at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.perform Compilation(AjBuildManager.java:845)\n                [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild (AjBuildManager.java:241) [iajc]\n                at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBu ild(AjBuildManager.java:161) [iajc] at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:1 12) [iajc] at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java: 60) [iajc] at\n                org.aspectj.tools.ajc.Main.run(Main.java:356) [iajc] at\n                org.aspectj.tools.ajc.Main.runMain(Main.java:246) [iajc] at\n                org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM(AjcTas k.java:1262) [iajc] at\n                org.aspectj.tools.ant.taskdefs.AjcTask.execute(AjcTask.java:1 056) [iajc] at\n                org.apache.tools.ant.UnknownElement.execute(UnknownElement.ja va:275) [iajc] at\n                org.apache.tools.ant.Task.perform(Task.java:364) [iajc] at\n                org.apache.tools.ant.Target.execute(Target.java:341) [iajc] at\n                org.apache.tools.ant.Target.performTasks(Target.java:369) [iajc] at\n                org.apache.tools.ant.Project.executeTarget(Project.java:1214) [iajc] at\n                org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:386) [iajc] at\n                org.apache.tools.ant.taskdefs.CallTarget.execute(CallTarget.j ava:106) [iajc] at\n                org.apache.tools.ant.UnknownElement.execute(UnknownElement.ja va:275) [iajc] at\n                org.apache.tools.ant.Task.perform(Task.java:364) [iajc] at\n                org.apache.tools.ant.Target.execute(Target.java:341) [iajc] at\n                org.apache.tools.ant.Target.performTasks(Target.java:369) [iajc] at\n                org.apache.tools.ant.Project.executeTarget(Project.java:1214) [iajc] at\n                org.apache.tools.ant.Project.executeTargets(Project.java:1062 ) [iajc] at\n                org.apache.tools.ant.Main.runBuild(Main.java:673) [iajc] at\n                org.apache.tools.ant.Main.startAnt(Main.java:188) [iajc] at\n                org.apache.tools.ant.launch.Launcher.run(Launcher.java:196) [iajc] at\n                org.apache.tools.ant.launch.Launcher.main(Launcher.java:55) [iajc] Caused by:\n                java.util.zip.ZipException: error in opening zip file [iajc] java.util.zip.ZipException: error in\n                opening zip file [iajc] at java.util.zip.ZipFile.open(Native Method) [iajc] at java.util.zip.ZipFile.<init>(ZipFile.java:111)\n                [iajc] at java.util.zip.ZipFile.<init>(ZipFile.java:127) [iajc] at\n                org.aspectj.weaver.bcel.ClassPathManager$ZipFileEntry.ensureO pen(ClassPathManager.java:252) [iajc] at\n                org.aspectj.weaver.bcel.ClassPathManager$ZipFileEntry.find(Cl assPathManager.java:225) [iajc] at\n                org.aspectj.weaver.bcel.ClassPathManager.find(ClassPathManage r.java:92) [iajc] at\n                org.aspectj.weaver.bcel.BcelWorld.resolveDelegate(BcelWorld.j ava:287) [iajc] at\n                org.aspectj.weaver.World.resolveToReferenceType(World.java:33 5) [iajc] at\n                org.aspectj.weaver.World.resolve(World.java:251) [iajc] at\n                org.aspectj.weaver.patterns.WildTypePattern.lookupTypeInWorld (WildTypePattern.java:716) [iajc] at\n                org.aspectj.weaver.patterns.WildTypePattern.resolveBindingsFr\n                omFullyQualifiedTypeName(WildTypePattern.java:690) [iajc] at\n                org.aspectj.weaver.patterns.WildTypePattern.resolveBindings(W ildTypePattern.java:623) [iajc] at\n                org.aspectj.weaver.patterns.SignaturePattern.resolveBindings( SignaturePattern.java:82) [iajc] at\n                org.aspectj.weaver.patterns.KindedPointcut.resolveBindings(Ki ndedPointcut.java:259) [iajc] at\n                org.aspectj.weaver.patterns.AndPointcut.resolveBindings(AndPo intcut.java:74) [iajc] at\n                org.aspectj.weaver.patterns.Pointcut.resolve(Pointcut.java:19 4) [iajc] at\n                org.aspectj.ajdt.internal.compiler.ast.PointcutDesignator.fin\n                ishResolveTypes(PointcutDesignator.java:84) [iajc] at\n                org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration.reso lveStatements(AdviceDeclaration.java:118)\n                [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMet\n                hodDeclaration.resolve(AbstractMethodDeclaration.java:400) [iajc] at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclara tion.resolve(TypeDeclaration.java:1088)\n                [iajc] at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.reso lve(AspectDeclaration.java:116)\n                [iajc] at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclara\n                tion.resolve(TypeDeclaration.java:1137) [iajc] at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.Compilation\n                UnitDeclaration.resolve(CompilationUnitDeclaration.java:305) [iajc] at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.proces s(Compiler.java:514) [iajc] at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compil e(Compiler.java:329) [iajc] at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.perform Compilation(AjBuildManager.java:845)\n                [iajc] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild (AjBuildManager.java:241) [iajc]\n                at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBu ild(AjBuildManager.java:161) [iajc] at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:1 12) [iajc] at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java: 60) [iajc] at\n                org.aspectj.tools.ajc.Main.run(Main.java:356) [iajc] at\n                org.aspectj.tools.ajc.Main.runMain(Main.java:246) [iajc] at\n                org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM(AjcTas k.java:1262) [iajc] at\n                org.aspectj.tools.ant.taskdefs.AjcTask.execute(AjcTask.java:1 056) [iajc] at\n                org.apache.tools.ant.UnknownElement.execute(UnknownElement.ja va:275) [iajc] at\n                org.apache.tools.ant.Task.perform(Task.java:364) [iajc] at\n                org.apache.tools.ant.Target.execute(Target.java:341) [iajc] at\n                org.apache.tools.ant.Target.performTasks(Target.java:369) [iajc] at\n                org.apache.tools.ant.Project.executeTarget(Project.java:1214) [iajc] at\n                org.apache.tools.ant.taskdefs.Ant.execute(Ant.java:386) [iajc] at\n                org.apache.tools.ant.taskdefs.CallTarget.execute(CallTarget.j ava:106) [iajc] at\n                org.apache.tools.ant.UnknownElement.execute(UnknownElement.ja va:275) [iajc] at\n                org.apache.tools.ant.Task.perform(Task.java:364) [iajc] at\n                org.apache.tools.ant.Target.execute(Target.java:341) [iajc] at\n                org.apache.tools.ant.Target.performTasks(Target.java:369) [iajc] at\n                org.apache.tools.ant.Project.executeTarget(Project.java:1214) [iajc] at\n                org.apache.tools.ant.Project.executeTargets(Project.java:1062 ) [iajc] at\n                org.apache.tools.ant.Main.runBuild(Main.java:673) [iajc] at\n                org.apache.tools.ant.Main.startAnt(Main.java:188) [iajc] at\n                org.apache.tools.ant.launch.Launcher.run(Launcher.java:196) [iajc] at\n                org.apache.tools.ant.launch.Launcher.main(Launcher.java:55) [iajc] abort ABORT -- (BCException) Can't\n                open archive: wissing.jar [iajc] when resolving types defined in compilation unit File.aj [iajc] when\n                processing compilation unit File.aj [iajc] when batch building BuildConfig[null] #Files=14\n            ","73433":"Discovered by Andy Brodie. -cp is a shorthand for -classpath supported by the JDT compiler.\n                AspectJ does not correctly support -cp option. Look at this example: C:\\aspectj1.2>ajc -inpath\n                injar.jar -outjar outjar.jar -cp lib\\aspectjrt.jar [error] can't find type org.aspectj.lang.JoinPoint 1\n                error C:\\aspectj1.2>ajc -inpath injar.jar -outjar outjar.jar -classpath lib\\aspectjrt.jar This is due\n                to the arg parser in AspectJ only recognizing -classpath. It doesn't fail when it encounters -cp, it\n                just ignores it and passes it down to JDT for processing. The fix is to recognize -cp too.\n            ","71377":"Pointcuts should match call joint points in advice. However AspectJ does not match calls to\n                _private_ methods in around advice. The same applies to get/set pointcuts for _private fields. This is\n                probably because in the testcase below a call to \"privateMethod()\" in the body of the around\n                advice is a call to an accessor method:\n                ajc$inlineAccessMethod$bug_nnnn_JoinPointInAroundAdvice$bug_nnnn_JoinPointInAro undAdvice$privateMethod(\"around\");\n                public aspect JoinPointInAroundAdvice { private static Set privateCalls = new HashSet(); private static\n                Set publicCalls = new HashSet(); pointcut internalCall () : call(*\n                JoinPointInAroundAdvice.privateMethod(..)); before () : internalCall () {\n                privateCalls.add(thisJoinPoint); } pointcut externalCall () : call(*\n                JoinPointInAroundAdvice.publicMethod(..)); before () : externalCall () { publicCalls.add(thisJoinPoint);\n                } pointcut execTest () : execution(* JoinPointInAroundAdvice.test()); before () : execTest () {\n                privateMethod(\"before\"); publicMethod(\"before\"); } void around () : execTest () {\n                privateMethod(\"around\"); publicMethod(\"around\"); proceed(); } // void around () :\n                execTest () { // Runnable runnable = new Runnable () { // public void run () { // privateMethod(\"around\n                closure\"); // publicMethod; // proceed(); // } // }; // runnable.run(); // } after () : execTest ()\n                { privateMethod(\"after\"); publicMethod(\"after\"); } private static void privateMethod\n                (String from) { System.out.println(\"? privateMethod() \" + from); } public static void\n                publicMethod (String from) { System.out.println(\"? publicMethod() \" + from); } public static\n                void test () { System.out.println(\"? test()\"); privateMethod(\"test\"); publicMethod(\"test\");\n                } public static void main (String[] args) { test(); if (privateCalls.size() != publicCalls.size()) {\n                throw new RuntimeException(\"Missing join point\"); } else { System.out.println(\"Success.\");\n                } } }\n            ","119749":"Per user email \"after() throwing matching on interface\" and the code below, the\n                execution PCD is matching based on a throws clause declared in the overridden method of a supertype.\n                While this tracks the multiple-signature model for the execution join point, it's not correct to say\n                that the method will throw the exceptions declared by the method it overrides, unless it explicitly\n                declares them, so it seems like a bug. (We should also document the difference between call and\n                execution in this respect.) In the code below, all warnings are matched by all method implementations\n                because they implement MyInterface. -------------------- bugs/InheritedThrows.java package bugs; public\n                class InheritedThrows { static aspect A { declare warning : execution (* *.*(..) throws Ex1) : \"one\";\n                declare warning : execution (* *.*(..) throws Ex2) : \"two\"; declare warning : execution (*\n                *.*(..) throws !(Ex1||Ex2)) : \"neither\"; declare warning : execution (* *.*(..) throws Ex1,\n                Ex2) : \"both\"; } public static class Ex1 extends Exception {} public static class Ex2 extends\n                Exception {} public interface MyInterface { public void m() throws Ex1, Ex2; } private static class\n                NestedClass1 implements MyInterface { public void m() throws Ex1 {} } private static class NestedClass2\n                implements MyInterface { public void m() throws Ex2 {} } private static class NestedClassBoth implements\n                MyInterface { public void m() throws Ex1, Ex2 {} } private static class NestedClassNeither implements\n                MyInterface { public void m() {} } }\n            ","121395":"An invalid aspectj path (missing jar file) throws an filenotfoundexception:\n                java.io.FileNotFoundException at java.io.FileInputStream.open(Native Method) at java.io.FileInputStream.<init>(FileInputStream.java:106)\n                at org.aspectj.weaver.bcel.BcelWeaver.addAspectsFromJarFile(BcelWeaver.java:202) at\n                org.aspectj.weaver.bcel.BcelWeaver.addLibraryJarFile(BcelWeaver.java:192) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.initBcelWorld(AjBuildManager.java:623) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:209) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:185) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:163) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n                FileNotFoundException thrown: /Users/frankstolle/Documents/workspace/lib_aspects/deploy/lib_aspects.jar\n                (No such file or directory) should generate an problem entry in the problems-list.\n            ","29959":"AspectJ Compiler 1.1beta4 This program: aspect Foo { void A.foo() { } void B.foo() {\n                super.foo(); } } class A { } class B extends A { } class Main { public static void main(String[] args) {\n                new B(); } } causes this error at runtime: Exception in thread \"main\" java.lang.VerifyError:\n                (class: B, method: ajc$superDispatch$B$foo signature: ()V) Illegal use of nonvirtual function call at\n                Main.main(Foo.java:11) Note that foo is never even called; the error happens at load time when the new\n                B() expression causes class B to be loaded. There's no error if either one of the foo methods is\n                declared in its class directly. This is kind of a showstopper... --Doug\n            ","117209":"AspectJ compiler version: 1.5M5 AJDT plugin version: 1.3.0 This is the same error as reported\n                by Bug#69706, even the bug is resolved I'm still experiencing problem by using the classes attached at\n                the bottom. // RUNTIME ERROR MESSAGE ======================== Exception in thread \"main\"\n                java.lang.VerifyError: (class: DefaultInterfaceImplementationRecipe, method: <clinit> signature:\n                ()V) Stack size too large at MyClass_ch16.main(MyClass_ch16.java:15) // MyClass_ch16.java\n                ==================== public class MyClass_ch16 { public void foo(int number, String name) {\n                System.out.println(\"Inside foo (int, String) with args: \" + number + \":\" + name); }\n                public static void main(String[] args) { // Create an instance of MyClass MyInterface_ch16 myObject =\n                (MyInterface_ch16)new MyClass_ch16 (); // Make the call to foo myObject.bar(\"Russ\"); } }\n                //MyInterface_ch16.java ======================= public interface MyInterface_ch16 { public void\n                bar(String name); } // DefaultInterfaceImplementationRecipe.aj\n                ========================================== public aspect DefaultInterfaceImplementationRecipe { declare\n                parents : MyClass_ch16 implements MyInterface_ch16; // Declare the default implementation of the bar\n                method public void MyInterface_ch16.bar(String name) { System.out.println(\"bar(String) called on\n                \" + this); } }\n            ","151938":"If you start a java 5 VM with AspectJ's load-time weaver specified more than once using the\n                -javaagent flag, if there is an aop.xml file defined, it chokes badly: it tries to reweave the woven\n                AspectJ code and emits massive amounts of bytecode. It would be better if AspectJ detected that it was\n                specified more than once and gave a warning then disabled all but one of the agents. Failing that, it\n                would be better to fail and give an error message than emit the bytecode. This issue came up for our\n                automated installer, which adds a -javaagent flag to VM startup commands. If the script is wrapped\n                twice, it can generate a duplicate. We are making our scripts more intelligent to avoid this issue, but\n                we are probably not the only people who will hit this issue (e.g., if someone manually edits both\n                setclasspath.bat and catalina.bat to add the flag for a Tomcat instance...)\n            ","118781":"I'm fairly new to AspectJ, so this is probably not going to be well explained. I've started\n                working on a project that was working fine. Then I added methods to classes that take a 2-dimensional\n                string array parameter and suddenly I'm getting a VerifyError exception. java.lang.VerifyError: (class:\n                com/drkw/cpds/obligor/facades/version_1_00/ObligorDetailFacade_1_00, method:\n                searchForObligorSummariesByGroup_aroundBody24 signature:\n                (Lcom/drkw/cpds/obligor/facades/version_1_00/ObligorDetailFacade_1_00;[[[Ljava/lang/String;Ljava/lang/String;Ljava?(&#130;\n                at com.drkw.cpds.obligor.facades.version_1_00.obligor.ObligorManager.<clinit>(ObligorManager.java:48)\n                at\n                com.drkw.cpds.obligor.integration.version_1_00.obligor.GetObligorDetailsGroupingTest.testGetObligorDetailsUsingGroups(GetObligorDetailsGroupingTest.java:45)\n                at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at\n                sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at\n                sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n            ","115275":"I have a question about load-time weaving in AspectJ. According to the AspectJ 5 Development\n                Kit Developer's Notebook, the <aspects> element can have an <include within=\"[pattern]\">\n                child element (http://eclipse.org/aspectj/doc/next/adk15notebook/ltw-configuration.html). However, when\n                I include that element as a child to the <aspects> element in my aop.xml file, I get a SAX\n                exception: org.xml.sax.SAXException: Unknown element while parsing <aspectj> element: include Is\n                the <include> element currently supported within the <aspects> element? Or do I have to\n                explicitly list every aspect I want woven at load time using an <aspect name=\"...\"> for\n                each aspect? Basically I do not wish to explicitly ennumerate every aspect in the aop.xml file for the\n                load-time weaver. Rather, I want to use a wildcard pattern to capture them all.\n            ","138171":"This is with 1.5.1a. I am developing a web application and I ran into this compiler crash. The\n                resource to be copied (Thumbs.db) was in use and therefore could not be copied. However, AJC ended up\n                producing an internal error instead of a warning or a normal error. java.io.FileNotFoundException at\n                java.io.FileOutputStream.open(Native Method) at java.io.FileOutputStream.<init>(FileOutputStream.java:179)\n                at java.io.FileOutputStream.<init>(FileOutputStream.java:131) at\n                org.aspectj.util.FileUtil.makeOutputStream(FileUtil.java:1258) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.writeResource(AjBuildManager.java:504) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesFromFile(AjBuildManager.java:482) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesToDestination(AjBuildManager.java:424)\n                at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:320) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:161) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n                FileNotFoundException thrown: C:\\work\\workspace\\MyCompany\\class\\images\\Thumbs.db (Access is denied)\n            ","82134":"Hi Adrian, thanks for the detailed explanation of the compatibility questions. That explains\n                the problem I observed. > * An AspectJ program should always be run with the aspectjrt.jar runtime\n                > library that accompanies the distribution containing the compiler/weaver > used to build it.\n                Interesting point. Which one? The one that is used to compile it or the one that is used to weave it?\n                > However, instead of some IOException, what you should see is a nice > message saying that the\n                aspect was produced by a more recent version of > AspectJ and cannot be read. Likewise, if you load a\n                pre-aspectj 5 aspect > into the AspectJ 5 weaver right now, you'll also see an IOException >\n                (odds-on). In M2 we'll detect that and use the back-level loaders to read > it in. Okay. Is there a\n                bug to track this? I really would like to update the weaver of my weaving runtime but only if it allows\n                to load/weave asepects that are compiled with any of the AJDT versions that are out right now (AJDT\n                1.1.x and AJDT 1.2.0Mx).\n            ","124654":"The following aspect won't compile with aspect 1.5: package aj; import\n                java.lang.annotation.Annotation; public abstract aspect GenericAnnotation<A extends Annotation> {\n                pointcut annotatedCall(A a) : call(@A * *.*(..)) && @annotation(a); /* does not compile */\n                before(A a) : annotatedCall(a) { System.out.println(a.annotationType()); } /* */ /* OK */ before(A a) :\n                call(@A * *.*(..)) && @annotation(a) { System.out.println(a.annotationType()); } }\n                ---------------------- >ajc -1.5 -d aj src\\aj\\* ...\\src\\aj\\GenericAnnotation.aj:10 [error]\n                incompatible type, expected java.lang.annotation.Annotation found BindingTypePattern(TA;, 0). Check the\n                type specified in your pointcut before(A a) : annotatedCall(a) { 1 error ---------------- Commenting out\n                the first advice lets this program run as expected: package aj; import java.lang.annotation.Retention;\n                import java.lang.annotation.RetentionPolicy; public class Main { @Retention(RetentionPolicy.RUNTIME)\n                @interface MyAnnotation { } static aspect ConcreteAnnotation extends GenericAnnotation<MyAnnotation>\n                { } public static void main(String[] args) { someMethod(); } @MyAnnotation private static void\n                someMethod() { } }\n            ","31460":"Hi! As discussed on the mailing list a few days ago I implemented a weaving class loader to\n                enable bytecode based weaving at class loading time. The class loader is based on the URLClassLoader and\n                can be used like any other URLClassLoader. In addition to that you can add aspects to the weaving\n                loader. These aspects got woven into each class that is loaded. The test cases for the class loader\n                aren't implemented yet, I am still thinking about how to implement them. I will contribute them later,\n                okay? -Martin\n            ","50200":"The name of the aspectjrt.jar's manifest file should be changed from META-INF/manifest.mf to\n                META-INF/MANIFEST.MF According to the Jar file specification (see http://java.sun.com/products/jdk/1.\n                2/docs/guide/jar/manifest.html) the name of the manifest file needs to be all upper case. It's beyond\n                trivial, I know, but it does cause an unnecessary warning in at least one popular IDE for J2EE\n                development (IBM WebSphere Studio) when the aspectjrt.jar is packaged in an EAR file. If there was an\n                option to assign this a \"very, very trivial\" severity level I would.\n            ","36234":"Getting an out of memory error when compiling with Ajc 1.1 RC1. I know this is not very\n                descriptive, but maybe you can point me into a direction of getting more output. here some additional\n                information though: Code base is medium size (about 1500 classfiles) I removed all my aspects and still\n                receive the error. Running it from the command line: ajc -classpath whateveritis -sourceroots\n                whateveritis -d whateveritis\n            ","152589":"Given the following ------------------------------------------------------------ public aspect\n                A { after () throwing (Throwable th) : execution(* *(..)) {\n                System.err.println(thisEnclosingJoinPointStaticPart); } } class C1 { public void anotherMethod() { } }\n                -------------------------------------------------- adding a whitespace before the aspect declaration\n                results in an adviceDidNotMatch warning even though weaving took place and the advice clearly matches.\n                Output from the AJDT event trace shows: 14:38:23\n                =========================================================================================== 14:38:23\n                Build kind = AUTOBUILD 14:38:23 Project=bug92895, kind of build requested=Incremental AspectJ\n                compilation 14:38:23 build: Examined delta - source file changes in required project bug92895 14:38:23\n                Classpath=/home/hawkinsh/eclipse/workspace32/runtime-New_configuration/bug92895/bin:/home/hawkinsh/javas/jdk1.5.0_05/jre/lib/rt.jar:/home/hawkinsh/javas/jdk1.5.0_05/jre/lib/jsse.jar:/home/hawkinsh/javas/jdk1.5.0_05/jre/lib/jce.jar:/home/hawkinsh/javas/jdk1.5.0_05/jre/lib/charsets.jar:/home/hawkinsh/javas/jdk1.5.0_05/jre/lib/ext/sunjce_provider.jar:/home/hawkinsh/javas/jdk1.5.0_05/jre/lib/ext/sunpkcs11.jar:/home/hawkinsh/javas/jdk1.5.0_05/jre/lib/ext/dnsns.jar:/home/hawkinsh/javas/jdk1.5.0_05/jre/lib/ext/localedata.jar:/home/hawkinsh/eclipse/eclipse32/plugins/org.aspectj.runtime_1.5.3.20060801095103/aspectjrt.jar:\n                14:38:23 Preparing for build: planning to be an incremental build 14:38:23 Starting incremental\n                compilation loop 1 of possibly 5 14:38:23 AJC: compiling source files 14:38:23 Timer event: 215ms: Time\n                to first compiled message 14:38:23 AJC: compiled:\n                /home/hawkinsh/eclipse/workspace32/runtime-New_configuration/bug92895/src/pack/A.aj 14:38:23\n                addSourcelineTask message=advice defined in pack.A has not been applied [Xlint:adviceDidNotMatch]\n                file=/home/hawkinsh/eclipse/workspace32/runtime-New_configuration/bug92895/src/pack/A.aj line=4 14:38:23\n                Dropping back to full build 14:38:23 Preparing for build: not going to be incremental because no\n                successful previous full build 14:38:23 AJC: compiling source files 14:38:23 AJC: compiled:\n                /home/hawkinsh/eclipse/workspace32/runtime-New_configuration/bug92895/src/pack/A.aj 14:38:23 AJC:\n                processing reweavable state 14:38:23 AJC: adding type mungers 14:38:23 Timer event: 452ms: Time to first\n                woven message 14:38:23 AJC: woven aspect pack.A (from\n                /home/hawkinsh/eclipse/workspace32/runtime-New_configuration/bug92895/src/pack/A.aj) 14:38:23 AJC: woven\n                class pack.C1 (from /home/hawkinsh/eclipse/workspace32/runtime-New_configuration/bug92895/src/pack/A.aj)\n                14:38:23 AspectJ reports build successful, build was: FULL 14:38:23 AJDE Callback: finish. Was full\n                build: true 14:38:23 Timer event: 517ms: Total time spent in AJDE 14:38:23 Timer event: 6ms: Create\n                element map (2 rels in project: bug92895) 14:38:23 Types affected during build = 1 14:38:23 Timer event:\n                3ms: Add markers (2 markers) 14:38:24 Timer event: 1274ms: Total time spent in AJBuilder.build() namely,\n                the adviceDidNotMatch warning was added and then we fell back to a full build and the warning wasn't\n                cleared. Performing a \"clean\" build fixes the problem. This is since the pipelining changes.\n            ","120739":"This optimization disables weaving for a ClassLoader where there are no aspects defined. This\n                is actually useful if you have aspect exclusions that exclude all the aspects defined in a parent class\n                loader. It is also helpful in the trivial/rare case where there is an aop.xml definition with no aspect\n                definitions.\n            ","148409":"I am using AspectJ load time weaving with Spring 2.0 RC1 to inject my entities, and I am\n                getting the following exception: java.lang.ClassCastException:\n                org.aspectj.apache.bcel.classfile.Signature$TypeVariableSignature at\n                org.aspectj.weaver.UnresolvedType.forGenericTypeSignature(UnresolvedType.java:348) at\n                org.aspectj.weaver.bcel.BcelWorld.addSourceObjectType(BcelWorld.java:385) at\n                org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.accept(ClassLoaderWeavingAdaptor.java:492) at\n                org.aspectj.weaver.tools.WeavingAdaptor.shouldWeave(WeavingAdaptor.java:230) at\n                org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:210) at\n                org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:65) at\n                org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:55)\n                at sun.instrument.TransformerManager.transform(TransformerManager.java:122) at\n                sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:155) at\n                java.lang.ClassLoader.defineClass1(Native Method) . . . Having examined the call stack under the\n                debugger, this seems to happening when the weaver is attempting to determine whether a particular class\n                should be weaved. The exception is thrown in the following method, at the cast highlighted below. public\n                static UnresolvedType forGenericTypeSignature(String sig,String declaredGenericSig) { UnresolvedType ret\n                = UnresolvedType.forSignature(sig); ret.typeKind=TypeKind.GENERIC; ClassSignature csig = new\n                GenericSignatureParser().parseAsClassSignature(declaredGenericSig); Signature.FormalTypeParameter[] ftps\n                = csig.formalTypeParameters; ret.typeVariables = new TypeVariable[ftps.length]; for (int i = 0; i <\n                ftps.length; i++) { Signature.FormalTypeParameter parameter = ftps[i]; Signature.ClassTypeSignature cts\n                = (Signature.ClassTypeSignature)parameter.classBound; // EXCEPTION HERE! ret.typeVariables[i]=new\n                TypeVariable(ftps[i].identifier,UnresolvedType.forSignature(cts.outerType.identifier+\";\")); }\n                ret.signatureErasure = sig; ret.signature = ret.signatureErasure; return ret; } The class in question\n                (which is not one that requires weaving), has the following signature: public class HibernateEntityDAO<interfaceT\n                extends SecurityEntity, concreteT extends interfaceT> extends HibernateDaoSupport implements\n                EntityDAO<interfaceT> The exception is happening because the parameter.classBound member is not of\n                type Signature.ClassTypeSignature, but an instance of Signature.TypeVariableSignature. The loop variable\n                i is 1, and parameter.identifier is ?concreteT?, so it looks like it's the signature of the second type\n                parameter (concreteT) that is tripping up the weaver.\n            ","34858":"this test file (Test.java) crashes the weaver: public class Test { static aspect MockProcessing\n                { pointcut testFlow(final Thread thread) : cflow(execution(void run()) && this(thread) &&\n                within(Thread)); // the within is an optimization Object around() : call(*\n                DummyConfiguration.createRootApplicationModule(..)) && testFlow(Thread) { return null; } } }\n                class Bar { void foo() { DummyConfiguration.createRootApplicationModule(); } } class DummyConfiguration\n                { static Object createRootApplicationModule() { return null; } } prompt>ajc -d 11bin -1.4 Test.java\n                Exception thrown from AspectJ 1.1rc1 This might be logged as a bug already -- find current bugs at\n                http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&component=Compiler Bugs for exceptions\n                thrown have titles File:line from the top stack, e.g., \"SomeFile.java:243\" If you don't find\n                the exception below in a bug, please add a new bug at\n                http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a\n                test program that can reproduce this exception. 0 0 java.lang.ArrayIndexOutOfBoundsException: 0 at\n                org.aspectj.weaver.IntMap.get(IntMap.java:109) at\n                org.aspectj.weaver.patterns.CflowPointcut.concretize1(CflowPointcut.j ava:170) at\n                org.aspectj.weaver.patterns.ReferencePointcut.concretize1(ReferencePo intcut.java:270) at\n                org.aspectj.weaver.patterns.AndPointcut.concretize1(AndPointcut.java: 88) at\n                org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:127) at\n                org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:120) at\n                org.aspectj.weaver.Advice.concretize(Advice.java:207) at\n                org.aspectj.weaver.CrosscuttingMembers.addShadowMunger(CrosscuttingMe mbers.java:78) at\n                org.aspectj.weaver.CrosscuttingMembers.addShadowMungers(CrosscuttingM embers.java:72) at\n                org.aspectj.weaver.ResolvedTypeX.collectCrosscuttingMembers(ResolvedT ypeX.java:328) at\n                org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect(Crosscut tingMembersSet.java:54) at\n                org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave(BcelWeaver.java:16 4) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:214) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerat\n                eClassFiles(AjBuildManager.java:394) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBu ildManager.java:149) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:55) at\n                org.aspectj.tools.ajc.Main.run(Main.java:216) at org.aspectj.tools.ajc.Main.runMain(Main.java:155) at\n                org.aspectj.tools.ajc.Main.main(Main.java:72) 1 fail|abort\n            ","39626":"I use AspectJ 1.1 from within eclipse. After some time of developing, I get following stack\n                trace (Wrapped in the eclipse gui), when I try to compile a java file with a huge amount of syntax\n                errors, missing variables, and other problems. As soon as I have fixed these issues, I can comnpile\n                normally as ever. Unfortunatly I can not provide any more detailed information because: this errors pops\n                up randomly, disappears when the bug is fixed, I have neither the time nor the permission to create a\n                more accurate sample java.lang.NullPointerException at java.lang.String.<init>(String.java:214) at\n                org.aspectj.ajdt.internal.core.builder.AsmBuilder.visit (AsmBuilder.java:231) at\n                org.aspectj.ajdt.internal.core.builder.AsmBuilder.visit (AsmBuilder.java:259) at\n                org.eclipse.jdt.internal.compiler.ast.AnonymousLocalTypeDeclaration.traverse\n                (AnonymousLocalTypeDeclaration.java:138) at\n                org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.traverse\n                (QualifiedAllocationExpression.java:342) at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse\n                (MessageSend.java:299) at org.eclipse.jdt.internal.compiler.ast.Block.traverse(Block.java:147) at\n                org.eclipse.jdt.internal.compiler.ast.ForStatement.traverse (ForStatement.java:347) at\n                org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse (MethodDeclaration.java:157) at\n                org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse (TypeDeclaration.java:946) at\n                org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse\n                (CompilationUnitDeclaration.java:303) at org.aspectj.ajdt.internal.core.builder.AsmBuilder.internalBuild\n                (AsmBuilder.java:169) at org.aspectj.ajdt.internal.core.builder.AsmBuilder.build (AsmBuilder.java:66) at\n                org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit\n                (EclipseFactory.java:303) at org.aspectj.ajdt.internal.compiler.AjCompiler.process(AjCompiler.java:67)\n                at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:338) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation (AjBuildManager.java:372) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild (AjBuildManager.java:133) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild (AjBuildManager.java:78) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile (CompilerAdapter.java:117) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run (AspectJBuildManager.java:164)\n                LoadTest.java CrefoClient/src/com/dcbank/scoring/socketserver kind regards Arno Schmidmeier\n            ","100227":"ajc crashes with a NullPointerException when an intertype declaration tries to modify an inner\n                class, if the enclosing (outer) class is generic: class Outer { class Inner {} } class Generic_Outer<T>\n                { class Inner {} } aspect Injector { int Outer.outer; // works int Outer.Inner.inner; // works int\n                Generic_Outer.outer; // works int Generic_Outer.Inner.inner; // crashes }\n                /home/user/sgelin3/dev/java/ajc/new_bug/Bug.java [error] Internal compiler error\n                java.lang.NullPointerException at\n                org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding(EclipseFactory.java:202) at\n                org.aspectj.ajdt.internal.compiler.ast.InterTypeFieldDeclaration.build(InterTypeFieldDeclaration.java:173)\n                at\n                org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTypeAndPerClause(AspectDeclaration.java:1020)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildInterTypeAndPerClause(AjLookupEnvironment.java:306)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:122)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:302) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:316) ...\n            ","149071":"This code fails, but should work: public aspect AspectItd { //private interface Holder {}\n                private int Holder.x; static aspect Inner { int doIt(Holder h) { return h.x++; } } } interface Holder{}\n                C:\\devel\\scratch\\inner>ajc AspectItd.java C:\\devel\\scratch\\inner\\AspectItd.java:6 [error] The field\n                Holder.x is not visibl e return h.x++; 1 error This appears to be incorrectly applying the visibility\n                rules based on the declared type (i.e., a private defined on Holder shouldn't be visible in Inner),\n                whereas of course it should be using the aspect's visibility rule: the field is visible to AspectItd,\n                hence to Inner. If you make the interface an inner type, then it works properly (i.e., comment out\n                interface Holder and uncomment the line above). By analogy, this Java code also works: public class Java\n                { private int x; static class Inner { int doIt(Java j) { return j.x++; } } }\n            ","156962":"The latest dev builds still have cases where they don't match properly on @Deprecated. See\n                attached for two failing test cases for execution and hasMethod.\n            ","47910":"I call ajc -sourceroots <mydir> -outjar <my.jar> and an output file is created with\n                a .jar extension, but it is not a valid jar file because there is no MANIFEST.MF file. I see that the\n                text for ajc says: -outjar <file> put output classes in zip file <file> which might imply\n                that it is supposed to be a zip file, but a parameter called - outjar which creates a zip file doesn't\n                really make sense. If -outjar is used, the resulting file should be a valid jar file, i.e. with a\n                META-INF/MANIFEST.MF file inside.\n            ","49657":"I was weaving a 3rd party library and wrote an aspect that should affect both a base class and\n                a derived class, but inadvertently wove only the derived class. This resulted in the following error. I\n                would like the weaver to catch this kind of error at weave (link) time, rather than creating code that\n                results in a rt error... I get this error in 1.1.1 final and in a fairly recent version from CVS HEAD:\n                java.lang.AbstractMethodError at ajee.logging.LogManager.ajc$interMethodDispatch1\n                $ajee_logging_LogManager$ajee_logging_Loggable$getLogger(LogManager.java) at\n                ajee.tracing.ExecutionTracer.ajc$before$ajee_tracing_ExecutionTracer$926 (ExecutionTracer.java:62) at\n                library.Derived.<init>(Derived.java:46) This line is a call to super(); I've attached a small\n                example that reproduces another error that I think is related: C:\\devel\\test\\ctors\\twoPass>build\n                C:\\devel\\test\\ctors\\twoPass>call ajc -outjar fullBase.jar sample\\Base.java sampl e\\Derived.java\n                Exception in thread \"main\" java.lang.ExceptionInInitializerError at sample.Derived.<init>(Derived.java:6)\n                at sample.Derived.main(Derived.java:13) Caused by: org.aspectj.lang.NoAspectBoundException at\n                sample.Trace.aspectOf(Trace.aj) at sample.Trace.<init>(Trace.aj:5) at\n                sample.Trace.ajc$postClinit(Trace.aj) at sample.Trace.<clinit>(Trace.aj:5) ... 2 more\n            ","113511":"Alex, here is the basic patch that is working well before you leave for the weekend ;-) I'll\n                let Matthew post it officially to bugzilla since it was his idea. The earlier return from !enabled is a\n                small addition I made that seems to help further. It would be great to have this in HEAD so I can report\n                performance numbers based on it in part 2 of my article on developerworks ;-) Hope you are enjoying your\n                new addition! Thanks! Index: ClassLoaderWeavingAdaptor.java\n                =================================================================== RCS file:\n                /home/technology/org.aspectj/modules/loadtime/src/org/aspectj/weaver/loadtim\n                e/ClassLoaderWeavingAdaptor.java,v retrieving revision 1.18 diff -u -r1.18\n                ClassLoaderWeavingAdaptor.java --- ClassLoaderWeavingAdaptor.java 19 Oct 2005 13:11:36 -0000 1.18 +++\n                ClassLoaderWeavingAdaptor.java 21 Oct 2005 16:04:41 -0000 @@ -107,8 +107,13 @@ // register the\n                definitions registerDefinitions(weaver, loader); + if (!enabled) { + return; + } messageHandler =\n                bcelWorld.getMessageHandler(); + bcelWorld.setResolutionLoader((ClassLoader)null);//loader.getParent());\n                + // after adding aspects weaver.prepareForWeave(); } @@ -148,7 +153,11 @@\n                definitions.add(DocumentParser.parse(xml)); } } - + if (definitions.isEmpty()) { + enabled = false; +\n                return; + } + // still go thru if definitions is empty since we will configure // the default message\n                handler in there registerOptions(weaver, loader, definitions);\n            ","113510":"clearly define what the goal for readAspect is old byte per byte reading cause NPE in some test\n                case current impl is hashcode for aspect name + classloader - ie unstable across startups.\n            ","128699":"The error associated with the declare construct is incorrect. The current message is: \"expected\n                one of error, warning, parents, soft, dominates\" dominates should be changed to \"precendence\"\n                and new annotation related declararions should be mentioned. Here is a suggestion: \"expected one of\n                error, warning, parents, soft, precedence, @type, @method, @constructor, @field\"\n            ","92880":"implement PTW for @AJ aspects so far delayed to make sure PTW in code style was not evolving\n            ","148537":"MyClass.java ============ public class MyClass { @Retention({RententionPolicy.RUNTIME}) private\n                @interface MyAnnotation { } } --- MyAspect.aj =========== privileged public aspect MyAspect { declare\n                @type : MyClass+ : @MyClass.MyAnnotation; } --- Internal Compiler Error: java.lang.ClassCastException at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.Annotation.detectStandardAnnotation(Annotation.java:99)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Annotation.resolveType(Annotation.java:280) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode.resolveAnnotations(ASTNode.java:436) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.getAnnotationTagBits(SourceTypeBinding.java:743)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.ast.Annotation.resolveType(Annotation.java:331) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode.resolveAnnotations(ASTNode.java:436) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodBinding.getAnnotationTagBits(MethodBinding.java:450)\n                at\n                org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.resolveTypesFor(SourceTypeBinding.java:1268)\n                at\n                org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.methods(SourceTypeBinding.java:1081)\n                at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.checkSpec(AspectDeclaration.java:131) at\n                org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTypeAndPerClause(AspectDeclaration.java:1070)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildInterTypeAndPerClause(AjLookupEnvironment.java:463)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.collectAllITDsAndDeclares(AjLookupEnvironment.java:332)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:173)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:301) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:315) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:862) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:242) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:161) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n                ClassCastException thrown: org.aspectj.org.eclipse.jdt.internal.compiler.ast.ArrayInitializer\n            ","117681":"Using Sun JDK1.5.0_04 Audit.java public interface Audit { public String getLastUpdatedBy();\n                public void setLastUpdatedBy(String un); } AuditImpl.java public class AuditImpl implements Audit {\n                private String lastUpdatedBy; public String getLastUpdatedBy() { return lastUpdatedBy; } public void\n                setLastUpdatedBy(String un) { lastUpdatedBy = un; } } TestAspect.java import\n                org.aspectj.lang.annotation.*; Test.java @Aspect public class TestAspect { @DeclareParents(\"Test\")\n                public static Audit introduced = new AuditImpl(); } public class Test { public static void main(String[]\n                args) { Test t = new Test(); Audit a = (Audit)t; a.setLastUpdatedBy(\"username\");\n                System.out.println(\"Username =\"+a.getLastUpdatedBy()); } } files.lst Audit.java AuditImpl.java\n                TestAspect.java Test.java Compiled using the following command d:\\aspectj1.5\\bin\\ajc -classpath \"d:\\aspectj1.5\\lib\\aspectjrt.jar\"\n                -argfi le files.lst -1.5 d:\\aspectj1.5\\bin\\aj5 Test Exception in thread \"main\"\n                java.lang.VerifyError: (class: Test, method: setLastUpdatedBy signature: (Ljava/lang/String;)V)\n                Incompatible argument to function d:\\aspectj1.5\\bin\\aj5 -noverify Test Username=\n            ","50570":"It looks like the getParameterName() operation on org.aspectj.lang.reflect.\n                CatchClauseSignature is not working. Instead of returning the name of the exception as declared in the\n                matched handler, returns the string value \"<missing>\". Here is a test case that shows\n                the problem :- ------START OF TEST CASE CODE----------- public class MyApp { public void doSomething() {\n                // Get around \"unreachable code error... if (true) { throw new BusinessException(\"Surprise!!\");\n                } System.out.println(\"Busy doing something.\"); } public static void main(String[] args) { try\n                { MyApp m = new MyApp(); m.doSomething(); } catch (BusinessException be) { System.out.println(\"Exception\n                caught : \" + be.getMessage()); } } } class BusinessException extends RuntimeException {\n                BusinessException(String message) { super(message); } } aspect AppMonitor { pointcut problemHandling() :\n                handler(Throwable+); before() : problemHandling() { CatchClauseSignature cSig = (CatchClauseSignature)\n                thisJoinPointStaticPart.getSignature(); System.out.println( \"MONITOR::\\tCaught a \" +\n                cSig.getParameterType().getName() + \" called \" + cSig.getParameterName()); } } ------END OF\n                TEST CASE CODE----------- The output from running the above was ... MONITOR:: Caught a BusinessException\n                called <missing> Exception caught : Surprise !!!! Operating system : Windows XP AspectJ : 1.1.1\n                final and also on latest from CVS HEAD\n            ","55341":"When compiling a binary concrete aspect library (for later LTW) consisting of more than one\n                aspect that performs an ITD on a target class not exposed to the weaver I get the following error: error\n                Type mismatch: cannot convert from java.lang.String to java.lang.String The error does not oocur if a\n                complete build & weave is performed. Testcase attached.\n            ","60015":"(This is an incomplete bug report -- sorry no time not to further isolate.) Running AJDT 1.1.6,\n                I get dozens of these warnings: ---------- Warning does not match because declaring type is\n                java.lang.Object, if match desired use target(st.ata.mc.exim.DatastoreReader)\n                [Xlint:unmatchedSuperTypeInCall] Blah.aj project/src/package/dir line 22 ---------- for something like\n                this code: ---------- import pack.Interface; ... pointcut dsrCall() : call(* Interface.*(..)); //\n                WARNING HERE ... ---------- Each warning points to the pointcut (not the join point shadow). NPE running\n                from the command-line with the latest tree (will attach).\n            ","148536":"public aspect Bug { declare @type : Object+ : @SomeAnnotation; } If SomeAnnotation cannot be\n                found, this aspect produces an internal compiler error: java.lang.NullPointerException at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareAnnotations(AjLookupEnvironment.java:806)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:592)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveIntertypes(AjLookupEnvironment.java:363)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:214)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:301) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:315) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:862) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:242) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:161) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n                NullPointerException thrown: null\n            ","33635":"In \"!if(expression)\" the negation part is ignored. I am using beta4. How to\n                reproduce: public class Test { public static void main(String args[]) { } } aspect NotIfBugAspect {\n                before() : execution(* main(..)) && !if(true) { System.out.println(\"NotIfBugAspect message\");\n                } } > ajc *.java > java Test NotIfBugAspect message If I change the pointcut in before advice to\n                move negation inside if(), everything works fine: aspect NotIfBugAspect { before() : execution(*\n                main(..)) && if(!true) { System.out.println(\"NotIfBugAspect message\"); } } > ajc\n                *.java > java Test <no output>\n            ","64069":"When weaving into source, ITDs for constructors and methods override private members of the\n                same signature: it is as if the private member never existed. This is illustrated by the example in\n                Dups.java. The same example, when the classes are compiled separately and using bytecode weaving, gives\n                a ClassFormatError upon execution. The situation for fields is different: the compiler flags an error\n                when an ITD tries to introduce a public x where a private x already existed. The error is however\n                flagged only when x is used in the class. Without any uses, such a clashing field is passed by the\n                compiler, but when the program is run, java throws a ClassFormatError. This behaviour is illustrated in\n                DupField.java The above seems to be a bug: the behaviour should be consistent in all situations.\n                Request: make it always legal to introduce a new member by ITD that has the same name/signature as a\n                private member. Mangle the private member and all its uses. /*\n                --------------------------------------------------------------- Dups.java When weaving into source, ITDs\n                for constructors and methods override private members of the same name. Using bytecode weaving (and\n                separate class files for each of the classes) this example gives a ClassFormatError upon execution. */\n                aspect Aspect { public A.new() { super(); System.out.println(\"ITD A()\"); } public void A.bar()\n                { System.out.println(\"ITD bar\"); } } class A { void foo() { A a = new A(); bar(); } private\n                A() { super(); System.out.println(\"private A()\"); } private void bar() { System.out.println(\"private\n                bar\"); } } public class Dups { static public void main(String[] args) { new A().foo(); } } /*\n                ------------------------------------------------------------------ DupField.java The compiler flags an\n                error when an ITD tries to introduce a public x where a private x already existed. The error is however\n                flagged only when x is used in the class. Without any uses, such a clashing field is passed by the\n                compiler, but when the program is run, java throws a ClassFormatError. This behaviour is illustrated in\n                DupField.java: to see the ClassFormatError, comment out the assignment \"x=0\" in foo(). */\n                aspect Aspect { public int A.x; } class A { private int x; void foo() { // when the line below is\n                commented, we get a runtime error x=0; // error: The field x is ambiguous } } public class DupField {\n                static public void main(String[] args) { new A(); } }\n            ","41123":"Sample run that fails using injars: C:\\devel\\test\\libraryWeave>ajc\n                ajee\\testing\\ExecutionMonitor.aj C:\\devel\\test\\libraryWeave>jar cf ajee.jar ajee\\testing\\*.class\n                C:\\devel\\test\\libraryWeave>ajc -injars ajee.jar model\\BusObj.java model\\MonitorB usObj.java\n                C:\\devel\\test\\libraryWeave\\model\\BusObj.java:3 Class must implement the inherite d abstract method\n                ExecutionMonitor.MonitoredItem.ajc$interMethodDispatch2 $ajee_t esting_ExecutionMonitor$record(String,\n                String) public class BusObj { ^^^^^^ 1 error It works in a single pass compilation:\n                C:\\devel\\test\\libraryWeave>ajc ajee\\testing\\ExecutionMonitor.aj model\\BusObj.jav a\n                model\\MonitorBusObj.java C:\\devel\\test\\libraryWeave> Sample source code: package ajee.testing; public\n                aspect ExecutionMonitor { public interface MonitoredItem {} private void MonitoredItem.record(String\n                eventType, String eventName) {} } --- package model; public class BusObj { } --- package model; import\n                ajee.testing.ExecutionMonitor; public aspect MonitorBusObj { declare parents: BusObj implements\n                ExecutionMonitor.MonitoredItem; }\n            ","42573":"My -classpath entry in a config/.lst file was resolved relative to the working directory rather\n                than to the config/.lst file. BuildArgParser.java looks like this would also be true for bootclasspath\n                and extdirs, but not for injars, aspectpath, or sourceroots.\n            ","29934":"When the program below is run, it produces a NullPointerException...\n                java.lang.NullPointerException at A2.ajc$around$A2$3b6proceed(CflowCycles.java) at\n                A2.ajc$around$A2$3b6_aroundBody3(CflowCycles.java:35) at Target.run(CflowCycles.java:24) at\n                CflowCycles.run_aroundBody4(CflowCycles.java:8) at CflowCycles.main_aroundBody6(CflowCycles.java:24) at\n                CflowCycles.main(CflowCycles.java:24) ---(in new/CflowCycles.java and in ajcTestsFailing.xml) import\n                org.aspectj.testing.Tester; /** @testcase cflow cycles in advice from different aspects */ public class\n                CflowCycles { public static void main( String args[] ) { Tester.expectEvent(\"target A1\");\n                Tester.expectEvent(\"target A2\"); new Target().run(); Tester.checkAllEventsIgnoreDups(); } }\n                class Target { public void run(){ } } aspect A1 { pointcut TargetRunFlow () // ok if no cflow:\n                within(Target) && execution(* *(..)) && !within (A1+); : !within(A1+) &&\n                !preinitialization(new(..)) && !initialization(new (..))//cflow(within(Target) &&\n                execution(* *(..))) && !within(A1+) ; Object around () : TargetRunFlow() { Tester.event(\"target\n                A1\"); return proceed(); } // ok if in the same class } aspect A2 { pointcut TargetRun () :\n                within(Target) && execution(* *(..)) && !within(A2+); ; Object around () : TargetRun() {\n                Tester.event(\"target A2\"); return proceed(); } }\n            ","122580":"Here is a stack trace I am getting when I try to use AspectJ 1.5.0 final release's load-time\n                weaving with JRockIt 1.4.2_08 using -Xmanagement:class=org.aspectj.weaver.loadtime.JRockitAgent to load\n                Weblogic Server 8.1 SP2. I debugged the code in Eclipse and discovered that the weaver was being\n                initialized while loading IMessage$Kind, so the JRockIt VM simply hasn't run staticinitialization yet,\n                making IMessage.INFO null. I was able to fix this stack trace by hoisting the check for loading AspectJ\n                code up BEFORE initializing a weaving adaptor i.e., changing line 55 of Aj.java to be if (loader == null\n                || className == null || className.startsWith(\"org/aspectj/\")) { I then commented out line 251\n                of WeavingAdaptor to avoid a duplicate check: private boolean shouldWeaveName (String name) { return\n                !((/*(name.startsWith(\"org.apache.bcel.\")||//FIXME AV why ? bcel is wrapped in org.aspectj.\n                name.startsWith(\"org.aspectj.\")||*/ // now checked earlier, to avoid circularity issues in\n                initialization name.startsWith(\"java.\") || name.startsWith(\"javax.\")) //||\n                name.startsWith(\"$Proxy\")//JDK proxies//FIXME AV is that 1.3 proxy ? fe. ataspect.$Proxy0 is a\n                java5 proxy... || name.startsWith(\"sun.reflect.\"));//JDK reflect } Note that this bug does NOT\n                occur when using a JRockIt 1.5.0 VM, even with the -Xmanagement command line argument. Stack Trace:\n                java.lang.IllegalArgumentException: null kind at org.aspectj.bridge.Message.<init>(Ljava/lang/String;Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Lorg/aspectj/bridge/ISourceLocation;Ljava/lang/Throwable;[Lorg/aspectj/bridge/ISourceLocation;ZIII)V(Message.java:89)\n                at org.aspectj.bridge.Message.<init>(Ljava/lang/String;Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Lorg/aspectj/bridge/ISourceLocation;Ljava/lang/Throwable;[Lorg/aspectj/bridge/ISourceLocation;)V(Message.java:67)\n                at org.aspectj.bridge.Message.<init>(Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Ljava/lang/Throwable;Lorg/aspectj/bridge/ISourceLocation;)V(Message.java:110)\n                at\n                org.aspectj.bridge.MessageUtil.info(Ljava/lang/String;)Lorg/aspectj/bridge/IMessage;(MessageUtil.java:211)\n                at\n                org.aspectj.bridge.MessageUtil.info(Lorg/aspectj/bridge/IMessageHandler;Ljava/lang/String;)Z(MessageUtil.java:98)\n                at org.aspectj.weaver.tools.WeavingAdaptor.info(Ljava/lang/String;)Z(WeavingAdaptor.java:343) at\n                org.aspectj.weaver.tools.WeavingAdaptor.createMessageHandler()V(WeavingAdaptor.java:168) at\n                org.aspectj.weaver.tools.WeavingAdaptor.<init>()V(WeavingAdaptor.java:80) at\n                org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.<init>(Ljava/lang/ClassLoader;Lorg/aspectj/weaver/loadtime/IWeavingContext;)V(ClassLoaderWeavingAdaptor.java:70)\n                at\n                org.aspectj.weaver.loadtime.Aj$WeaverContainer.getWeaver(Ljava/lang/ClassLoader;Lorg/aspectj/weaver/loadtime/IWeavingContext;)Lorg/aspectj/weaver/tools/WeavingAdaptor;(Aj.java:94)\n                at org.aspectj.weaver.loadtime.Aj.preProcess(Ljava/lang/String;[BLjava/lang/ClassLoader;)[B(Aj.java:61)\n                at\n                org.aspectj.weaver.loadtime.JRockitAgent.preProcess(Ljava/lang/ClassLoader;Ljava/lang/String;[B)[B(JRockitAgent.java:74)\n                at jrockit.vm.ClassPreProcessorManager.notifyClassPreProcessor(ILjava/lang/String;[B)[B(Unknown Source)\n                at jrockit.vm.Classes.defineClass0(ILjava/lang/String;[BII)I(Unknown Source) at\n                jrockit.vm.Classes.defineClass(Ljava/lang/ClassLoader;Ljava/lang/String;[BII)Ljava/lang/Class;(Unknown\n                Source) at\n                java.lang.ClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;(Unknown\n                Source) at\n                java.security.SecureClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/CodeSource;)Ljava/lang/Class;(SecureClassLoader.java:123)\n                at\n                java.net.URLClassLoader.defineClass(Ljava/lang/String;Lsun/misc/Resource;)Ljava/lang/Class;(URLClassLoader.java:251)\n                at\n                java.net.URLClassLoader.access$100(Ljava/net/URLClassLoader;Ljava/lang/String;Lsun/misc/Resource;)Ljava/lang/Class;(URLClassLoader.java:55)\n                at java.net.URLClassLoader$1.run()Ljava/lang/Object;(URLClassLoader.java:194) at\n                jrockit.vm.AccessController.do_privileged_exc(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;I)Ljava/lang/Object;(Unknown\n                Source) at\n                jrockit.vm.AccessController.doPrivileged(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;(Unknown\n                Source) at\n                java.net.URLClassLoader.findClass(Ljava/lang/String;)Ljava/lang/Class;(URLClassLoader.java:187) at\n                java.lang.ClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class;(Unknown Source) at\n                sun.misc.Launcher$AppClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class;(Launcher.java:274) at\n                java.lang.ClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class;(Unknown Source) at\n                java.lang.ClassLoader.loadClassFromNative(II)Ljava/lang/Class;(Unknown Source) at\n                jrockit.vm.RNI.getRunnableCode(I)I(Unknown Source) at jrockit.vm.RNI.trampoline()V(Unknown Source) at\n                org.aspectj.bridge.MessageUtil.info(Ljava/lang/String;)Lorg/aspectj/bridge/IMessage;(MessageUtil.java:???)\n                at\n                org.aspectj.bridge.MessageUtil.info(Lorg/aspectj/bridge/IMessageHandler;Ljava/lang/String;)Z(MessageUtil.java:98)\n                at org.aspectj.weaver.tools.WeavingAdaptor.info(Ljava/lang/String;)Z(WeavingAdaptor.java:343)\n                java.lang.IllegalArgumentException: null kind at org.aspectj.bridge.Message.<init>(Ljava/lang/String;Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Lorg/aspectj/bridge/ISourceLocation;Ljava/lang/Throwable;[Lorg/aspectj/bridge/ISourceLocation;ZIII)V(Message.java:89)\n                at org.aspectj.bridge.Message.<init>(Ljava/lang/String;Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Lorg/aspectj/bridge/ISourceLocation;Ljava/lang/Throwable;[Lorg/aspectj/bridge/ISourceLocation;)V(Message.java:67)\n                at org.aspectj.bridge.Message.<init>(Ljava/lang/String;Lorg/aspectj/bridge/IMessage$Kind;Ljava/lang/Throwable;Lorg/aspectj/bridge/ISourceLocation;)V(Message.java:110)\n                at\n                org.aspectj.bridge.MessageUtil.info(Ljava/lang/String;)Lorg/aspectj/bridge/IMessage;(MessageUtil.java:211)\n                at\n                org.aspectj.bridge.MessageUtil.info(Lorg/aspectj/bridge/IMessageHandler;Ljava/lang/String;)Z(MessageUtil.java:98)\n                at org.aspectj.weaver.tools.WeavingAdaptor.info(Ljava/lang/String;)Z(WeavingAdaptor.java:343) at\n                org.aspectj.weaver.tools.WeavingAdaptor.createMessageHandler()V(WeavingAdaptor.java:168) at\n                org.aspectj.weaver.tools.WeavingAdaptor.<init>()V(WeavingAdaptor.java:80) at\n                org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor.<init>(Ljava/lang/ClassLoader;Lorg/aspectj/weaver/loadtime/IWeavingContext;)V(ClassLoaderWeavingAdaptor.java:70)\n                at\n                org.aspectj.weaver.loadtime.Aj$WeaverContainer.getWeaver(Ljava/lang/ClassLoader;Lorg/aspectj/weaver/loadtime/IWeavingContext;)Lorg/aspectj/weaver/tools/WeavingAdaptor;(Aj.java:94)\n                at org.aspectj.weaver.loadtime.Aj.preProcess(Ljava/lang/String;[BLjava/lang/ClassLoader;)[B(Aj.java:61)\n                at\n                org.aspectj.weaver.loadtime.JRockitAgent.preProcess(Ljava/lang/ClassLoader;Ljava/lang/String;[B)[B(JRockitAgent.java:74)\n                at jrockit.vm.ClassPreProcessorManager.notifyClassPreProcessor(ILjava/lang/String;[B)[B(Unknown Source)\n                at jrockit.vm.Classes.defineClass0(ILjava/lang/String;[BII)I(Unknown Source) at\n                jrockit.vm.Classes.defineClass(Ljava/lang/ClassLoader;Ljava/lang/String;[BII)Ljava/lang/Class;(Unknown\n                Source) at\n                java.lang.ClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;(Unknown\n                Source) at\n                java.security.SecureClassLoader.defineClass(Ljava/lang/String;[BIILjava/security/CodeSource;)Ljava/lang/Class;(SecureClassLoader.java:123)\n                at\n                java.net.URLClassLoader.defineClass(Ljava/lang/String;Lsun/misc/Resource;)Ljava/lang/Class;(URLClassLoader.java:251)\n                at\n                java.net.URLClassLoader.access$100(Ljava/net/URLClassLoader;Ljava/lang/String;Lsun/misc/Resource;)Ljava/lang/Class;(URLClassLoader.java:55)\n                at java.net.URLClassLoader$1.run()Ljava/lang/Object;(URLClassLoader.java:194) at\n                jrockit.vm.AccessController.do_privileged_exc(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;I)Ljava/lang/Object;(Unknown\n                Source) at\n                jrockit.vm.AccessController.doPrivileged(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;(Unknown\n                Source) at\n                java.net.URLClassLoader.findClass(Ljava/lang/String;)Ljava/lang/Class;(URLClassLoader.java:187) at\n                java.lang.ClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class;(Unknown Source) at\n                sun.misc.Launcher$AppClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class;(Launcher.java:274) at\n                java.lang.ClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class;(Unknown Source) at\n                java.lang.ClassLoader.loadClassFromNative(II)Ljava/lang/Class;(Unknown Source) at\n                jrockit.vm.RNI.getRunnableCode(I)I(Unknown Source) at jrockit.vm.RNI.trampoline()V(Unknown Source) at\n                org.aspectj.bridge.MessageUtil.info(Lorg/aspectj/bridge/IMessageHandler;Ljava/lang/String;)Z(MessageUtil.java:???)\n                at org.aspectj.weaver.tools.WeavingAdaptor.info(Ljava/lang/String;)Z(WeavingAdaptor.java:343) at\n                org.aspectj.weaver.tools.WeavingAdaptor.createMessageHandler()V(WeavingAdaptor.java:168)\n            ","81863":"From discussion on aspectj list: Hi, Well, having just done some testing, I think this even\n                simpler case shows within() is not behaving correctly for annotations: @Entity public class myClass1\n                {...} public class myClass2 {...} public aspect myAspect { before():call(* *(..)) &&\n                within(@Entity *) { } } The pointcut matches all the method calls in myClass1 and myClass2 (effectively\n                it is parsing but then ignoring the annotation specified in the within()). So, what you want to do is\n                valid but AspectJ is misbehaving - you get a stack overflow because the perthis() clause is also\n                matching on your aspect type when obviously that doesnt have the annotation and shouldnt be matched.\n                Andy. --- Andy Clement AspectJ Development Rifflard Micka?l <Mickael.Rifflard@atosorigin.com> Sent\n                by: aspectj-users-admin@eclipse.org 22/12/2004 16:56 Please respond to aspectj-users@eclipse.org To <aspectj-users@eclipse.org>\n                cc Subject [aspectj-users] Aspect instance on JDK 1.5 annotation Hi all, I'm currently trying to get an\n                aspect instance for an object instance with specific JDK 1.5 annotation. Exemple : Create an aspect\n                instance for all object like that : @Entity public class myClass { ... } I try public aspect myAspect\n                perthis(within(@Entity *)) {...} but this aspect execution lead to a java.lang.StackOverflowError\n                exception. Is it possible ? Thanks. Micka?l _______________________________________________\n                aspectj-users mailing list aspectj-users@eclipse.org\n                http://dev.eclipse.org/mailman/listinfo/aspectj-users\n            ","124999":"The following case produces a runtime error: package aj; public abstract aspect\n                GenericInheritedMethod<T> { protected final T getSomething() { return null; } } package aj; aspect\n                UseInheritedMethod extends GenericInheritedMethod<Integer> { // works as expected before() :\n                execution(void someMethod()) { System.out.println(getSomething()); } // Runtime Error void around() :\n                execution(void someMethod()) { System.out.println(getSomething()); } public static void main(String[]\n                args) { someMethod(); } private static void someMethod() { } } >java aj.UseInheritedMethod null\n                Exception in thread \"main\" java.lang.NoSuchMethodError:\n                aj.UseInheritedMethod.getSomething()Ljava/lang/Integer; at\n                aj.UseInheritedMethod.ajc$inlineAccessMethod$aj_UseInheritedMethod$aj_UseInheritedMethod$getSomething(UseInheritedMethod.aj)\n                at aj.UseInheritedMethod.ajc$around$aj_UseInheritedMethod$2$c74e36b7(UseInheritedMethod.aj:12) at\n                aj.UseInheritedMethod.someMethod(UseInheritedMethod.aj:1) at\n                aj.UseInheritedMethod.main(UseInheritedMethod.aj:16) The \"inlineAccessMethod\" should call\n                \"getSomething()Ljava/lang/Object;\" as the before advice does.\n            ","115251":"I get the same BCException when I build incrementally but not after cleaning the project. The\n                code is correct (I think) and runs fine after clean-and-build. AJDT Build id: 20051104134042 AspectJ\n                version: 1.5.0.200510241400 (Sorry if this is another manifestation of a different bug or an AJDT bug.)\n                --------------------------------------------------------------- ----------------- Singleton.java package\n                com.isberg.articles.aop7.patterns; /** * CODE article singleton variant without eager/lazy */ public\n                abstract aspect Singleton<Target> pertypewithin(Target) { private final Object lock = new\n                Object(); private Target singleton; /** * Subaspects define this. All join points must return type\n                Target. */ abstract protected pointcut creation(); pointcut creating() : cflow(within(Singleton+) &&\n                adviceexecution()); Target around() : creation() && !creating(){ synchronized(lock) { if\n                (singleton == null) { singleton = proceed(); } return singleton; } } } -----------------\n                SingletonTest.java package com.isberg.articles.aop7.patterns; import junit.framework.TestCase; public\n                class SingletonTest extends TestCase { public void testSingleton() throws Exception { C[] cs =\n                {C.create(), new C(), C.create()}; for (int i = 1; i < cs.length; i++) { assertEquals(cs[0], cs[i]);\n                } } static class C { static C create() {return new C();} C() {} } static aspect A extends Singleton<C>\n                { protected pointcut creation() : execution(static C C.create()) || call(C.new()); } }\n                --------------------------------------------------------------- trouble in:public class\n                com.isberg.articles.aop7.patterns.SingletonTest extends junit.framework.TestCase: public void <init>():\n                ALOAD_0 // com.isberg.articles.aop7.patterns.SingletonTest this (line 5) INVOKESPECIAL\n                junit.framework.TestCase.<init> ()V constructor-execution(void\n                com.isberg.articles.aop7.patterns.SingletonTest.<init>()) | RETURN constructor-execution(void\n                com.isberg.articles.aop7.patterns.SingletonTest.<init>()) end public void <init>() public\n                void testSingleton() throws java.lang.Exception org.aspectj.weaver.MethodDeclarationLineNumber: 6:142 :\n                method-execution(void com.isberg.articles.aop7.patterns.SingletonTest.testSingleton()) | ICONST_3 (line\n                7) | ANEWARRAY com.isberg.articles.aop7.patterns.SingletonTest$C | DUP | ICONST_0 |\n                method-call(com.isberg.articles.aop7.patterns.SingletonTest$C\n                com.isberg.articles.aop7.patterns.SingletonTest$C.create()) | | INVOKESTATIC\n                com.isberg.articles.aop7.patterns.SingletonTest$C.create\n                ()Lcom/isberg/articles/aop7/patterns/SingletonTest$C; |\n                method-call(com.isberg.articles.aop7.patterns.SingletonTest$C\n                com.isberg.articles.aop7.patterns.SingletonTest$C.create()) | AASTORE | DUP | ICONST_1 |\n                constructor-call(void com.isberg.articles.aop7.patterns.SingletonTest$C.<init>()) | | NEW\n                com.isberg.articles.aop7.patterns.SingletonTest$C | | DUP | | INVOKESPECIAL\n                com.isberg.articles.aop7.patterns.SingletonTest$C.<init> ()V | constructor-call(void\n                com.isberg.articles.aop7.patterns.SingletonTest$C.<init>()) | AASTORE | DUP | ICONST_2 |\n                method-call(com.isberg.articles.aop7.patterns.SingletonTest$C\n                com.isberg.articles.aop7.patterns.SingletonTest$C.create()) | | INVOKESTATIC\n                com.isberg.articles.aop7.patterns.SingletonTest$C.create\n                ()Lcom/isberg/articles/aop7/patterns/SingletonTest$C; |\n                method-call(com.isberg.articles.aop7.patterns.SingletonTest$C\n                com.isberg.articles.aop7.patterns.SingletonTest$C.create()) | AASTORE | ASTORE_1 | ICONST_1 (line 8) |\n                ISTORE_2 | GOTO L1 | L0: ALOAD_1 // com.isberg.articles.aop7.patterns.SingletonTest$C[] cs (line 9) |\n                ICONST_0 | AALOAD | ALOAD_1 // com.isberg.articles.aop7.patterns.SingletonTest$C[] cs | ILOAD_2 // int i\n                | AALOAD | method-call(void junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object)) | |\n                INVOKESTATIC com.isberg.articles.aop7.patterns.SingletonTest.assertEquals\n                (Ljava/lang/Object;Ljava/lang/Object;)V | method-call(void\n                junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object)) | IINC 2 1 // int i (line 8) |\n                L1: ILOAD_2 // int i | ALOAD_1 // com.isberg.articles.aop7.patterns.SingletonTest$C[] cs | ARRAYLENGTH |\n                IF_ICMPLT L0 | RETURN (line 11) method-execution(void\n                com.isberg.articles.aop7.patterns.SingletonTest.testSingleton()) end public void testSingleton() throws\n                java.lang.Exception end public class com.isberg.articles.aop7.patterns.SingletonTest when implementing\n                on shadow constructor-call(void com.isberg.articles.aop7.patterns.SingletonTest$C.<init>()) when\n                weaving type com.isberg.articles.aop7.patterns.SingletonTest when weaving classes when weaving when\n                incrementally building\n                BuildConfig[c:\\home\\ws\\main-31\\.metadata\\.plugins\\org.eclipse.ajdt.core\\devworks-fall.generated.lst]\n                #Files=90 org.aspectj.weaver.BCException: Class com.isberg.articles.aop7.patterns.Singleton does not\n                have a method ajc$around$com_isberg_articles_aop7_patterns_Singleton$1$51e13820 with signature\n                (Lorg/aspectj/runtime/internal/AroundClosure;)Ljava/lang/Object; when implementing on shadow\n                constructor-call(void com.isberg.articles.aop7.patterns.SingletonTest$C.<init>()) when weaving\n                type com.isberg.articles.aop7.patterns.SingletonTest when weaving classes when weaving when\n                incrementally building\n                BuildConfig[c:\\home\\ws\\main-31\\.metadata\\.plugins\\org.eclipse.ajdt.core\\devworks-fall.generated.lst]\n                #Files=90 at org.aspectj.weaver.bcel.LazyClassGen.getLazyMethodGen(LazyClassGen.java:1161) at\n                org.aspectj.weaver.bcel.LazyClassGen.getLazyMethodGen(LazyClassGen.java:1146) at\n                org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline(BcelShadow.java:1973) at\n                org.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:211) at\n                org.aspectj.weaver.Shadow.implementMungers(Shadow.java:514) at\n                org.aspectj.weaver.Shadow.implement(Shadow.java:391) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:1782) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:394) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:98) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1478) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1443) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1217) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1039) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:300) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178) at\n                org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:759) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:249) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:158) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n            ","145950":"-XaddSerialVersionUID fails to add a serialversionuid field to a type if Serializable isn't a\n                direct parent. this case fails: class X implements I { } // X will not get the field if woven interface\n                I implements Serializable {} this works: class X implements Serializable {} // X will get the field if\n                woven there is a mistake in the code that checks for the serializable interface\n            ","115252":"When an annotation can only target one kind of thing (e.g., a type) but is used to modify\n                something else in a pointcut (e.g., a method), it would be nice if the compiler emitted an error, since\n                the two situations can be confusingly similar: call(@Nice * *(..)) // method call((@Nice *) *(..)) //\n                return type --------------------------------------------- import java.lang.annotation.ElementType;\n                import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import\n                java.lang.annotation.Target; public class AnnotationTypePatternMistakes {\n                @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.TYPE}) @interface I{} @I() class C{} static\n                aspect A { // would like a CE here - I only on types pointcut pc() : execution(@I * *(..)); declare\n                error : pc() : \"hi\"; } }\n            ","34951":"Compiling spacewar without specifying aspectjrt.jar on the classpath causes a NPE. Expected an\n                error message \"aspectjrt.jar required\". Steps to reproduce 1) install latest 2) cd\n                doc/examples 3) java -jar ../../lib/aspectjtools.jar -verbose @spacewar/debug.lst RESULT:NPE in attached\n                log\n            ","148786":"Took me a while to discover how to recreate this problem, but this class: public class A {\n                public static void main(String []argv) { byte[][] bytes = new byte[][]{{0},{1}}; } } causes this\n                bytecode: 0: iconst_2 1: anewarray #18; //class \"[B\" and this causes the newarray joinpoint\n                code to go bang. (eg. before(): call(*[].new(..)) {}) java.lang.NullPointerException at\n                org.aspectj.weaver.bcel.BcelWorld.fromBcel(BcelWorld.java:236) at\n                org.aspectj.weaver.bcel.BcelWorld.makeJoinPointSignatureForArrayConstruction(BcelWorld.java:483) at\n                org.aspectj.weaver.bcel.BcelShadow.makeArrayConstructorCall(BcelShadow.java:801) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2510) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2325) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:490) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:115) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1574) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1525) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1305) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1127)\n            ","148545":"MyEnum.java =========== public enum MyEnum { ONE, TWO, THREE, FOUR, FIVE } ---\n                MyAnnotation.java ================= import java.lang.annotation.Retention; import\n                java.lang.annotation.RetentionPolicy; @Retention(RetentionPolicy.RUNTIME) public @interface MyAnnotation\n                { MyEnum[] value(); } --- MyClass.java ============ public class MyClass { public MyEnum getValue() {\n                return MyEnum.ONE; } @MyAnnotation({ MyEnum.ONE, MyEnum.TWO }) public void test() { } public static void\n                main(String[] args) { new MyClass().test(); } } --- MyAspect.aj =========== import java.util.Arrays;\n                privileged public aspect MyAspect { Object around(MyClass o, MyAnnotation a) : execution(@MyAnnotation *\n                *(..)) && target(o) && @annotation(a) { if (!isOneOf(o.getValue(), a.value())) throw new\n                IllegalStateException( o.getValue() + \" is not one of \" + Arrays.toString(a.value())); return\n                proceed(o, a); } private static final <T> boolean isOneOf(T obj, T[] arr) { for (T el : arr) if\n                (obj == el) return true; return false; } } --- Executing the main method of MyClass produces: Exception\n                in thread \"main\" java.lang.NoSuchMethodError: MyAspect.isOneOf(LMyEnum;[LMyEnum;)Z at\n                MyAspect.ajc$privMethod$MyAspect$MyAspect$isOneOf(MyAspect.aj:1) at\n                MyClass.test_aroundBody1$advice(MyClass.java:109) at MyClass.test(MyClass.java:1) at\n                MyClass.main(MyClass.java:12) --- What's interesting is that if you remove the \"privileged\"\n                modifier from the aspect definition, then it works fine.\n            ","123423":"Per type within aspects have a generated field ajc$withinType. Almost any time I ever use one\n                of them, I'd like to access this field. Sometimes, e.g., for deferred initialization, I have to create a\n                duplicate field that initializes this as such: private Class managedClass; after() returning:\n                staticinitialization(*) { managedClass = thisJoinPointStaticPart.getSignature().getDeclaringType(); ...\n                It would be nice if there were a method with the signature Class getWithinType() defined on any\n                pertypewithin aspect.\n            ","173602":"The following exception is caused by a duplicate inter-type introduction method declaration in\n                an aspect. Removing the duplicate method solves the problem. java.lang.NullPointerException at\n                org.aspectj.ajdt.internal.compiler.ast.InterTypeMethodDeclaration.resolve(InterTypeMethodDeclaration.java:90)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1088)\n                at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.resolve(AspectDeclaration.java:116) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1137) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:305)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:519) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:887) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:244) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:199) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:170) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n                NullPointerException thrown: null\n            ","70619":"The following program causes ajc 1.2 to abort: public class Conflict { public static void\n                main(String[] args) { } } aspect Conflict1 { declare precedence: Conflict1, Conflict2; before():\n                execution(* *(..)) { } } aspect Conflict2 { declare precedence: Conflict2, Conflict1; after():\n                execution(* *(..)) { } }\n            ","129525":"The load-time weaving system can produce truly massive quantities of output when there's a\n                weaving error, since the system dumps the bytecode to syserr. It would be much better to produce an\n                ajcore file and just point to it, or use some other log.\n            ","135001":"java.lang.NullPointerException at\n                org.aspectj.weaver.bcel.BcelShadow.weaveAroundInline(BcelShadow.java:2109) at\n                org.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:232) at\n                org.aspectj.weaver.Shadow.implementMungers(Shadow.java:639) at\n                org.aspectj.weaver.Shadow.implement(Shadow.java:456) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2236) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:491) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:109) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1560) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1511) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1291) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1113) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:311) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:183) at\n                org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:862) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:242) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:161) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n            ","152366":"The load-time weaving definition system accepts AND in addition to &amp;&amp; for\n                pointcuts, but it silently accepts and then fails to work with type patterns that use AND. Such type\n                patterns are important when creating exceptions (e.g., excluding weblogic..* &amp;&amp;\n                !weblogic.jdbc..*) and using AND is also helpful here. I've attached a patch to support this and tests\n                to show it's working.\n            ","44191":"I have experienced situations where IAJC outputs a message like this at the end of compilation.\n                [iajc] can't find type org.xxx.SomeTest In my case this was one time highly confusing since I did not\n                expect the class in question to be referred anywhere in the project (I have to date still not located\n                the reference). For such cases, it would be extremely nice if the error message would display WHY it\n                need the class (i.e. the name of the refering class(es) or aspect(es) possibly with a reasonable cutoff\n                as there is seldom need to list all referals). So I would like a message like this: [iajc] can't find\n                type org.xxx.SomeTest referred by org.yyy.SomeClass,org.yy.SomeOtherClass ...\n            ","71723":"When introducing new member functions to existing classes via inter-type declarations, the\n                scoping rules that apply to the ITD bodies are the same as for the aspect - for example, private members\n                of the target class cannot be accessed unless the aspect is privileged. Similarly, protected members of\n                classes in different packages should not be visible in ITDs unless the aspect is privileged. This rule\n                is only enforced for protected members declared in the target class - protected members that are\n                inherited are visible from ITDs in aspects in different packages. The following is an example of this:\n                ---------------------- package foo; public class Foo extends AncientFoo { protected int i() { return 42;\n                } public static void main(String[] args) { new Foo().doStuff(); } public void doStuff() { } protected\n                int ancientI() { return 42; } } class AncientFoo { protected int ancientI() { return -42; } protected\n                int ancientJ() { return 0; } } ---------- package bar; import foo.Foo; aspect Bar { public void\n                Foo.doing() { try { System.out.println(i()); // fails in ajc System.out.println(ancientI()); // fails in\n                ajc System.out.println(ancientJ()); // succeeds System.out.println(clone()); // succeeds }\n                catch(Throwable t) { } } before(Foo f) : call(* doStuff(..)) && target(f) { f.doing(); } }\n                ------------------- All four calls in Foo.doing() should fail, as they refer to protected members of\n                foo.Foo from package bar. However, only the first 2 - the ones directly declared/overridden in foo.Foo -\n                are detected as errors, and removing them makes the rest compile and execute. Best wishes, Pavel\n            ","49638":"The problem is found by the example in Listing 5.15 from Laddad's AspectJ in Action book. It\n                looks like an exception object in after() throwing(Throwable ex) advice has a problem being converted to\n                string in a _logger.logp() call. Environment ----------- OS: Solaris 8 kernel patch level 108528-27 plus\n                j2se recommended patches Java version: java -version java version \"1.4.2\" Java(TM) 2 Runtime\n                Environment, Standard Edition (build 1.4.2-b28) Java HotSpot(TM) Client VM (build 1.4.2-b28, mixed mode)\n                The problem has also been reproduced with AspectJ 1.1.1 on Windows 2000 5.00.2195, SP 4. Description\n                ----------- ajc aborts with the following output: trouble in: public class TestException extends\n                java.lang.Object: public static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0 public static\n                final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_1 public void <init>(): ALOAD_0 //\n                TestException this (line 1) INVOKESPECIAL java.lang.Object.<init> ()V constructor-execution(void\n                TestException.<init>()) | RETURN constructor-execution(void TestException.<init>()) end\n                public void <init>() public static void main(String[]): method-execution(void\n                TestException.main(java.lang.String[])) | method-call(void TestException.perform()) | | catch\n                java.lang.Throwable -> E0 | | | INVOKESTATIC TestException.perform ()V (line 4) | | catch\n                java.lang.Throwable -> E0 | | GOTO L0 | | E0: ASTORE_1 | | INVOKESTATIC\n                ExceptionLoggerAspectV2.aspectOf ()LExceptionLoggerAspectV2; | | ALOAD_1 | | GETSTATIC\n                TestException.ajc$tjp_0 Lorg/aspectj/lang/JoinPoint$StaticPart; | | INVOKEVIRTUAL\n                ExceptionLoggerAspectV2.ajc$after$ExceptionLoggerAspectV2$14a\n                (Ljava/lang/Throwable;Lorg/aspectj/lang/JoinPoint$StaticPart;)V | | ALOAD_1 | | ATHROW | | L0: NOP | |\n                ACONST_NULL | | ASTORE_2 | | INVOKESTATIC ExceptionLoggerAspectV2.aspectOf ()LExceptionLoggerAspectV2; |\n                | ALOAD_2 | | CHECKCAST java.lang.Throwable | | GETSTATIC TestException.ajc$tjp_0\n                Lorg/aspectj/lang/JoinPoint$StaticPart; | | INVOKEVIRTUAL\n                ExceptionLoggerAspectV2.ajc$after$ExceptionLoggerAspectV2$14a\n                (Ljava/lang/Throwable;Lorg/aspectj/lang/JoinPoint$StaticPart;)V | | NOP | method-call(void\n                TestException.perform()) | RETURN (line 5) method-execution(void TestException.main(java.lang.String[]))\n                end public static void main(String[]) public static void perform(): method-execution(void\n                TestException.perform()) | ACONST_NULL (line 8) | ASTORE_0 | ALOAD_0 // java.lang.Object nullObj (line\n                9) | method-call(java.lang.String java.lang.Object.toString()) | | catch java.lang.Throwable -> E0 |\n                | | INVOKEVIRTUAL java.lang.Object.toString ()Ljava/lang/String; | | catch java.lang.Throwable -> E0\n                | | GOTO L0 | | E0: ASTORE_1 | | INVOKESTATIC ExceptionLoggerAspectV2.aspectOf\n                ()LExceptionLoggerAspectV2; | | ALOAD_1 | | GETSTATIC TestException.ajc$tjp_1\n                Lorg/aspectj/lang/JoinPoint$StaticPart; | | INVOKEVIRTUAL\n                ExceptionLoggerAspectV2.ajc$after$ExceptionLoggerAspectV2$14a\n                (Ljava/lang/Throwable;Lorg/aspectj/lang/JoinPoint$StaticPart;)V | | ALOAD_1 | | ATHROW | | L0: NOP |\n                method-call(java.lang.String java.lang.Object.toString()) | POP | RETURN (line 10) method-execution(void\n                TestException.perform()) end public static void perform() end public class TestException ABORT Exception\n                thrown from AspectJ 1.1.1 This might be logged as a bug already -- find current bugs at\n                http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&component=Compiler Bugs for exceptions\n                thrown have titles File:line from the top stack, e.g., \"SomeFile.java:243\" If you don't find\n                the exception below in a bug, please add a new bug at\n                http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a\n                test program that can reproduce this exception. can't convert from java.lang.String to\n                java.lang.Throwable can't convert from java.lang.String to java.lang.Throwable\n                org.aspectj.weaver.BCException: can't convert from java.lang.String to java.lang.Throwable at\n                org.aspectj.weaver.bcel.Utility.appendConversion(Utility.java:203) at\n                org.aspectj.weaver.bcel.BcelVar.appendLoadAndConvert(BcelVar.java:57) at\n                org.aspectj.weaver.bcel.BcelAdvice.getAdviceArgSetup(BcelAdvice.java:287) at\n                org.aspectj.weaver.bcel.BcelAdvice.getAdviceInstructions(BcelAdvice.java:244) at\n                org.aspectj.weaver.bcel.BcelShadow.weaveAfterReturning(BcelShadow.java:986) at\n                org.aspectj.weaver.bcel.BcelShadow.weaveAfter(BcelShadow.java:941) at\n                org.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:126) at\n                org.aspectj.weaver.Shadow.implementMungers(Shadow.java:341) at\n                org.aspectj.weaver.Shadow.implement(Shadow.java:313) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:1006) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:299) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:77) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:417) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:390) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:327) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerateClassFiles(AjBuildManager.java:256)\n                at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:156) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:70) at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:99) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:53) at\n                org.aspectj.tools.ajc.Main.run(Main.java:217) at org.aspectj.tools.ajc.Main.runMain(Main.java:155) at\n                org.aspectj.tools.ajc.Main.main(Main.java:72) 1 fail|abort Sample code is two files, TextException.java\n                and ExceptionLoggerAspectV2.java (see below). To reproduce the problem, do $ ajc *.java File 1 -\n                TestException.java ---------------------------- public class TestException { public static void\n                main(String[] args) { perform(); } public static void perform() { Object nullObj = null;\n                nullObj.toString(); } } File 2 - ExceptionLoggerAspectV2.java -------------------------------------\n                import java.util.logging.*; import org.aspectj.lang.*; public aspect ExceptionLoggerAspectV2 { Logger\n                _logger = Logger.getLogger(\"exceptions\"); ExceptionLoggerAspectV2() {\n                _logger.setLevel(Level.ALL); } pointcut exceptionLogMethods() : call(* *.*(..)) &&\n                !within(ExceptionLoggerAspectV2); after() thowing(Throwable ex) : exceptionLogMethods() { if\n                (_logger.isLoggable(Level.WARNING)) { Signature sig = thisJoinPointStaticPart.getSignature();\n                _logger.logp(Level.WARNING, sig.getDeclaringType().getName(), sig.getName(), \"Exception logger\n                aspect\", ex); } } }\n            ","156904":"The Eclipse AJDT give an incorrect warning when you want to advise a private method of a\n                private inner class. When I want to advise a private method in a private inner class, like this public\n                class Outer { private class Inner { private void myMethod() } } Using the following poincut: poincut\n                innerpointcut():execution( * Outer.Inner.myMethod() ); and advice: before():innerpointcut() {\n                System.out.println( \"executing!\" ); } I get a warning \"invalidAbsoluteTypeName\" next\n                to my pointcut, but next to the advice, there is a marker that points to the private method.\n            ","145693":"See attached failing testCase.","57666":"(Ah, the joy of build infrastructure...) Mostly self-explanatory trace, from a build Monday Apr\n                5, 2004 at 08:46:01 GMT: duplicate entry: META-INF/MANIFEST.MF duplicate entry: META-INF/MANIFEST.MF\n                java.util.zip.ZipException: duplicate entry: META-INF/MANIFEST.MF at\n                java.util.zip.ZipOutputStream.putNextEntry(ZipOutputStream.java:163) at\n                java.util.jar.JarOutputStream.putNextEntry(JarOutputStream.java:90) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.writeResource(AjBuildManager.java:344) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesFromJarFile(AjBuildManager.java:288)\n                at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.copyResourcesToDestination(AjBuildManager.java:253)\n                at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:195) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:94) at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:102) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:53) at\n                org.aspectj.tools.ajc.Main.run(Main.java:280) at org.aspectj.tools.ajc.Main.runMain(Main.java:217) at\n                org.aspectj.tools.ajc.Main.main(Main.java:79)\n            ","120543":"It would be very useful to know exactly which version of the weaver is being used for LTW. An\n                informational message could be issued when each WeavingAdaptor instance is created (it is possible to\n                have multiple versions of AspectJ in a system). This message could be similar to the that issued by\n                \"ajc -version\".\n            ","51320":"I get the following exception when weaving the attached aspect on the dev build.\n                java.lang.ClassCastException at org.aspectj.weaver.patterns.IfPointcut.concretize1(IfPointcut.java:156)\n                at org.aspectj.weaver.patterns.IfPointcut.concretize(IfPointcut.java:143) at\n                org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:119) at\n                org.aspectj.weaver.Checker.concretize(Checker.java:35) at org.aspectj.weaver.CrosscuttingMembers.\n                addShadowMunger(CrosscuttingMembers.java:78) at\n                org.aspectj.weaver.CrosscuttingMembers.addDeclare(CrosscuttingMembers. java:102) at\n                org.aspectj.weaver.CrosscuttingMembers.addDeclares(CrosscuttingMembers. java:92) at\n                org.aspectj.weaver.CrosscuttingMembersSet. addAdviceLikeDeclares(CrosscuttingMembersSet.java:65) at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.\n                addAdviceLikeDeclares(AjLookupEnvironment.java:147) at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.\n                completeTypeBindings(AjLookupEnvironment.java:122) at\n                org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java: 300) at\n                org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:314) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager. performCompilation(AjBuildManager.java:384) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager. doBuild(AjBuildManager.java:125) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager. batchBuild(AjBuildManager.java:70) at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:104) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:53) at\n                org.aspectj.tools.ajc.Main.run(Main.java:234) at org.aspectj.tools.ajc.Main.runMain(Main.java:170) at\n                org.aspectj.tools.ajc.Main.main(Main.java:81)\n            ","86789":"The following example declare precedence : (@PremiumPartner *), *; results in the error message\n                circularity in declare precedence, ''*'' occurs more than once It is the same example (apart form the\n                name) as in the developers notebook. (see also\n                http://dev.eclipse.org/mhonarc/lists/aspectj-dev/msg01326.html)\n            ","124105":"See Jeppe's post on the mailing list... will append more here soon.","51322":"Introduce method with an unknown type as an arguement as follows: class A {} public abstract\n                aspect B { public void A.someMethod(WCharType a) { //blah } } WCharType is an unknown type or is\n                forgotten to be imported (in my case). This shall cause ajc to puke the following:\n                java.lang.NullPointerException at\n                org.aspectj.ajdt.internal.compiler.ast.InterTypeMethodDeclaration.build(InterTypeMethodDeclaration\n                .java:87) at\n                org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTypeAndPerClause(AspectDeclarat\n                ion.java:744) at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildInterTypeAndPerClause(AjLookupE\n                nvironment.java:206) at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnviron\n                ment.java:94) at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:310) at\n                org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:324) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:373) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:125) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:70) at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:99) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:53) at\n                org.aspectj.tools.ajc.Main.run(Main.java:217) at org.aspectj.tools.ajc.Main.runMain(Main.java:155) at\n                org.aspectj.tools.ajc.Main.main(Main.java:72)\n                /home/czhang/eclipse/workspace/lib/libajob/org/omg/PortableServer/portable/Delegate.java:0 Internal\n                compiler error java.lang.NullPointerException at\n                org.aspectj.ajdt.internal.compiler.ast.InterTypeMethodDeclaration.build(InterTypeMethodDeclaration\n                .java:87) at\n                org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTypeAndPerClause(AspectDeclarat\n                ion.java:744) at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildInterTypeAndPerClause(AjLookupE\n                nvironment.java:206) at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnviron\n                ment.java:94) at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:310) at\n                org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:324) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:373) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:125) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:70) at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:99) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:53) at\n                org.aspectj.tools.ajc.Main.run(Main.java:217) at org.aspectj.tools.ajc.Main.runMain(Main.java:155) at\n                org.aspectj.tools.ajc.Main.main(Main.java:72) !! no source information available !! !! no source\n                information available !! ABORT Exception thrown from AspectJ 1.1.1 This might be logged as a bug already\n                -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&component=Compiler\n                Bugs for exceptions thrown have titles File:line from the top stack, e.g., \"SomeFile.java:243\"\n                If you don't find the exception below in a bug, please add a new bug at\n                http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a\n                test program that can reproduce this exception. null java.lang.NullPointerException at\n                org.aspectj.ajdt.internal.compiler.ast.InterTypeMethodDeclaration.build(InterTypeMethodDeclaration\n                .java:87) at\n                org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTypeAndPerClause(AspectDeclarat\n                ion.java:744) at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildInterTypeAndPerClause(AjLookupE\n                nvironment.java:206) at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnviron\n                ment.java:94) at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:310) at\n                org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:324) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:373) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:125) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:70) at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:99) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:53) at\n                org.aspectj.tools.ajc.Main.run(Main.java:217) at org.aspectj.tools.ajc.Main.runMain(Main.java:155) at\n                org.aspectj.tools.ajc.Main.main(Main.java:72) 1 fail|abort, 1 error\n            ","53981":"Using a method named proceed(..) in around advice confuses the compiler (in at least the 2-3\n                ways shown below). True of the current tree (untested in 1.1.1). Workaround for now is to rename the\n                method. ---- first problem: NPE in compiler java.lang.NullPointerException at\n                org.aspectj.ajdt.internal.compiler.ast.MakeDeclsPublicVisitor.endVisit(MakeDeclsPublicVisitor.java:44)\n                public class Proceeding { public static void main(String[] args) { } static aspect A { interface\n                IProceed { void proceed(Runnable next); } IProceed decorator; void around() : execution(void\n                main(String[])) { decorator.proceed(new Runnable() { public void run() { proceed(); } }); } } } ----\n                second problem: incorrect error wrt number of arguments public class Proceeding { public static void\n                main(String[] args) { } static aspect A { void around() : execution(void main(String[])) {\n                Proceeding.proceed(null); // BUG: treated as proceed(Object); } } static void proceed(Object o) {} }\n                ---- third hypothetical: we should document how ambiguity is resolved public class Proceeding { public\n                static void main(String[] args) { } static aspect A { void around() : execution(void main(String[])) {\n                proceed(); // special form or Proceeding.proceed()? } } void proceed() {} }\n            ","118599":"Configuration: - Eclipse 3.1.1 - AJDT 1.3.0.20051129155513 Problem Description: Project A\n                defines an interface with static aspect to provide a default implementation: public interface\n                Attributable { void setAttribute(String name, Object attribute); Object getAttribute(String name);\n                static aspect DefImpl { private Map<String,Object> Attributable.attributes = new HashMap<String,Object>();\n                public void Attributable.setAttribute(String name, Object attribute) { this.attributes.put(name,\n                attribute); } public Object Attributable.getAttribute(String name) { return this.attributes.get(name); }\n                } } Project A generates a JAR that gets used in Project B on both the Java Build Path and the AspectJ\n                Aspect Path. Project B contains the following implementing class: public class AnAttributedClass\n                implements Attributable { public void doSomething() { this.setAttribute(\"foo\", \"bar\");\n                } } This results in the compile error \"The method setAttribute(String,Object) is ambiguous for the\n                type AnAttributedClass\". Please note that using the aspected interface within Project A when\n                implementing classes does not cause said compiler error. With best regards, Christoph Cenowa\n            ","122728":"When trying to run ajdoc on a moderate size code base (266 classes / interfaces / aspects),\n                ajdoc crashes. Here's what happens: D:\\work\\napa\\jnapa\\core>ajdoc -source 1.5 -classpath\n                D:\\work\\napa\\jnapa\\core\\lib\\aspectjrt.jar;D:\\work\\napa\\jnapa\\core\\l\n                ib\\dom4j-1.5.2.jar;D:\\work\\napa\\jnapa\\core\\lib\\groovy-all-1.0-jsr-03.jar -d\n                D:\\work\\napa\\jnapa\\core\\build\\doc\\internal - author -package -argfile\n                D:\\work\\napa\\jnapa\\core\\jnapafilelist34352.lst > Calling ajc...\n                D:\\work\\napa\\jnapa\\commons\\utils\\src\\fi\\napa\\util\\aspects\\CachingAspect.aj:72 [warning] advice defined\n                in fi.napa.util.a spects.CachingAspect has not been applied [Xlint:adviceDidNotMatch] 1 warning >\n                Building signature files... An internal error occured in ajdoc Please copy the following text into an\n                email message and send it, along with any additional information you can add to: aspectj-dev@eclipse.org\n                java.lang.IndexOutOfBoundsException: Index: 3, Size: 3 java.lang.IndexOutOfBoundsException: Index: 3,\n                Size: 3 at java.util.ArrayList.RangeCheck(ArrayList.java:546) at\n                java.util.ArrayList.get(ArrayList.java:321) at\n                org.aspectj.tools.ajdoc.StubFileGenerator.processMembers(StubFileGenerator.java:124) at\n                org.aspectj.tools.ajdoc.StubFileGenerator.processTypeDeclaration(StubFileGenerator.java:99) at\n                org.aspectj.tools.ajdoc.StubFileGenerator.processMembers(StubFileGenerator.java:113) at\n                org.aspectj.tools.ajdoc.StubFileGenerator.processTypeDeclaration(StubFileGenerator.java:99) at\n                org.aspectj.tools.ajdoc.StubFileGenerator.processFile(StubFileGenerator.java:61) at\n                org.aspectj.tools.ajdoc.StubFileGenerator.doFiles(StubFileGenerator.java:38) at\n                org.aspectj.tools.ajdoc.Main.main(Main.java:157) The file jnapafilelist34352.lst contains only file\n                entries w/ absolute paths, e.g.\n                D:\\work\\napa\\jnapa\\core\\src\\fi\\napa\\core\\tableprocessing\\transfer\\mapping\\Transformation.java I am using\n                ajc and ajdoc 1.5.0 release version. I'll be happy to provide any other information that may help in\n                solving this issue. D:\\work\\napa\\jnapa\\core>ajdoc -v ajdoc version 1.5.0 D:\\work\\napa\\jnapa\\core>ajc\n                -v AspectJ Compiler 1.5.0 built on Tuesday Dec 20, 2005 at 12:05:54 GMT\n            ","40380":"AJDT 1.1.3, Eclipse 2.1 To build a JDK 1.4. program under Eclipse using JDK 1.3 the appropriate\n                build library should be selected in the Project Properties \"Java Build Path\". However AspectJ\n                continues to use the JDK associated with Eclipse so errors result from using 1.4 APIs. The same will\n                occur running Eclipse under 1.4 and compiling programs for 1.5 Testcase: 1. Run Eclipse under JDK 1.3 2.\n                Create a Java project which uses a 1.4 JDK 3. Write a Java classes that uses 1.4 APIs e.g. public class\n                TestStringBuffer { public static void main(String[] args) { new StringBuffer(\"Test\").indexOf(\"T\");\n                } } 4. Convert to AspectJ project\n            ","82062":"It would be wonderful if the WeaveMessage object would provide two additional things: - the\n                affected class name - the aspect name I could use this to determine which aspect is woven into which\n                class during load-time weaving (need this for dependency management).\n            ","133117":"When the noGuardForLazyTjp compiler option is set to warning or error and a piece of advice\n                causes this warning to show up, you get one warning for every join point matched by the advice. I think\n                just one would probably be enough...\n            ","36430":"Adding a RFE as Wes suggested... Wes' reply: There are some issues with the -Xnoweave option\n                that we won't have the time to carefully resolve for 1.1, even though, as you suggest, there may be\n                times when it would be useful. The workaround at present is to weave tracing into transactions when the\n                transactions jar is compiled. e.g., -- do the build ajc @tracing.lst -outjar tracing.jar ajc\n                @transactions.lst -aspectpath tracing.jar \\ -outjar transactions.jar ajc @app.lst -aspectpath \"tracing.jar;transactions.jar\"\n                \\ -outjar app.jar -- build the jar mkdir final cd final jar xf ../tracing.jar jar xf ../transactions.jar\n                jar xf ../app.jar # fixup manifest, etc? jar cf ../final.jar * What if you don't have the sources for\n                the transactions.jar? This is a case of getting binary transactions aspects from a vendor who won't\n                provide source and wanting to weave your tracing into it. I would hope that by the time that problem\n                becomes prevalent, we will have a solution for it. If you'd like to keep this on the radar, please\n                submit this discussion as an RFE for the compiler at\n                http://dev.eclipse.org/bugs/enter_bug.cgi?product=AspectJ Thank you - Wes P.S. - Personally, I think\n                this case > > ajc -injars app.jar;transaction.jar > -aspectpath transaction.jar;tracing.jar\n                doesn't make sense. Things on the aspectpath are defined, whereas things in injars will be woven into\n                and redefined. It's not clear from this command which variant the user expects when refering to a type\n                in transactions.jar. Ramnivas Laddad wrote: > > Hello, > > I think I have a use case that\n                cannot be implemented > (at least elegantly, anyway) without noweave/XnoWeave > option (and thus I\n                request to make it a regular option > instead of experimental -X). > > Basically, I want to\n                have my tracing.jar ( > contains tracing aspect) weave into transaction.jar > (contains abstract\n                transaction mangement aspects, > concrete policy enforcement aspects, and supporting > classes).\n                Assume app.jar contain business classes > and interfaces. Each of the jar is created using >\n                -ourjar (but not -noweave or -XnoWeave). > > To build the final system I issue the following >\n                command: > > ajc -injars app.jar;transaction.jar > -aspectpath transaction.jar;tracing.jar >\n                > Now compiler gives me error due to multiply woven > classes and aspects in transaction.jar. >\n                > Everything works fine if I create the original jar > files using -noweave. > > I could\n                workaround by creating multiple jars, but > I hink -noweave is the right approach as > I really\n                don't want to ship multiple jars that are > needed to implement a single concern and expect the >\n                users to correctly specify jar files in -injars > and -aspectpath. > > -Ramnivas\n            ","49743":"I am heavily using the runtime signature information from thisJoinPoint.getSignature() and the\n                toString() method of it. This causes heavy String operations each time the toString method is called.\n                Would it be possible to cache the resulting string for example in MethodSignatureImpl and similar\n                classes for other signatures?\n            ","40257":"Relative paths (e.g. \"../\") are no longer parser properly in AJDE 1.1.0.\n            ","57430":"Exceptions thrown from the compiler used to be printed once, with the submit-bug header. Now\n                they are printed twice, without and with the header. True of CVS version.\n            ","62227":"The message handler in the weaving adapter for load time weaving says: public boolean\n                handleMessage(IMessage message) throws AbortException { if (!isIgnoring(message.getKind())) { if\n                (verbose) System.err.println(message.getMessage()); throw new AbortException(message); } return true; }\n                This means for warnings it goes bang. So, even a declare warning that is meant to tell the user\n                something informational during a LTW will cause the code to blow up. The fix is straightforward and\n                simply to log warning messages and only fail for error messages. I am waiting for a testcase from\n                Matthew before checking in the fix.\n            ","148972":"These have been reported to me on a large system doing some intricate weaving where some\n                classes are 1.2, some 1.4, some 1.5 and the VM is 1.5. Binary weaving declare parents sometimes refuses\n                to allow the modification of the hierarchy because it sees a clash between two methods when there is\n                none. The two cases I'm fixing are: 1. sometimes the signatures of the return types differ with the '.'\n                or '/' problem (fix == be consistent) 2. sometimes the syntheticness of the methods in the relationship\n                isn't determined correctly\n            ","99168":"inter-type declaration on a generic inner class crashes the compiler: class Outer { class Inner\n                {} class Generic_Inner<T> {} } class Generic_Outer<T> { } aspect Injector { int Outer.outer;\n                // works int Outer.Inner.inner; // works int Generic_Outer.outer; // works int\n                Outer.Generic_Inner.inner; // crashes } /home/user/sgelin3/dev/java/ajc/new_bug/Bug.java [error]\n                Internal compiler error java.lang.RuntimeException: can't handle: class Generic_Inner#RAW extends NULL\n                TYPENULL SUPERINTERFACES enclosing type : OuterNULL FIELDSNULL METHODS at\n                org.aspectj.ajdt.internal.compiler.lookup.InterTypeScope.makeSourceTypeBinding(InterTypeScope.java:35)\n                at org.aspectj.ajdt.internal.compiler.lookup.InterTypeScope.<init>(InterTypeScope.java:28) at\n                org.aspectj.ajdt.internal.compiler.ast.InterTypeDeclaration.resolve(InterTypeDeclaration.java:101) at\n                org.aspectj.ajdt.internal.compiler.ast.InterTypeFieldDeclaration.resolve(InterTypeFieldDeclaration.java:141)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1076)\n                at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.resolve(AspectDeclaration.java:110) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1125) ...\n            ","57436":"Java 1.5 beta reports a ClassFormatError when running programs (e.g., spacewar) compiled by ajc\n                1.1.1 and the latest CVS head. Sun's Java 1.5 beta binary-compatibility docs say that some obfuscators\n                violated the .class format specification, so those .class files will fail when run under 1.5. (The docs\n                also say they are still incomplete.) Although 1.5 is still beta, we would want to submit a bug to Sun if\n                our implementation techniques are valid, so we don't have to change those techniques. For 1.2, we should\n                at document if we don't fix, since many people are using 1.5.\n            ","76055":"In order to find out which other pointcuts are referenced by a pointcut definition i need to\n                access the private members of the CflowPointcut, IfPointcut and NotPointcut PatternNodes found in the\n                weaver module. Unlike the OrPointcut and AndPointcut classes, they are missing the appropriate getter\n                methods.\n            ","31423":"Pointcut adviceexecution() does not seem to pick advice execution join points in beta4. Here is\n                a program that shows the problem: public class Test { public static void main(String[] args) { } }\n                aspect Aspect1 { before() : execution(* Test.*(..)) { System.out.println(\"Reached \" +\n                thisJoinPoint); } } aspect Aspect2 { before() : adviceexecution() && !within(Aspect2) {\n                System.out.println(\"Reached \" + thisJoinPoint); } } F:\\aop\\bugs\\1.1\\b4\\adviceexecution>ajc\n                -version AspectJ Compiler 1.1beta4 F:\\aop\\bugs\\1.1\\b4\\adviceexecution>ajc Test.java\n                F:\\aop\\bugs\\1.1\\b4\\adviceexecution>java Test Reached execution(void Test.main(String[]))\n            ","48091":"In cases where the body of advice refers to a non-statically evaluable portion of thisJoinPoint\n                (so that it can't be optimized by the compiler to thisJoinPointStaticPart), the JoinPoint object is\n                currently always created before entering the advice body - even if the JoinPoint object would never\n                actually be accessed (because of a test within the advice for example). Since a) thisJoinPoint is often\n                used in tracing applications b) tracing applications tend to be very pervasive, c) they must have low\n                overhead when tracing is disabled, and d) creation of thisJoinPoint objects is expensive (v. expensive\n                compared to just testing a flag) it would be nice if there was a way to create JoinPoint objects lazily\n                on first actual reference within the advice body.\n            ","148727":"Separate compilation of the following program breaks on 1.5.2rc1 because of the recent change\n                to marking aspect methods as synthetic: public aspect Asp { } public class Client { public static void\n                main(String argz[]) { System.out.println(\"Can call aspectOf? \"+Asp.aspectOf()); } }\n                C:\\devel\\scratch\\synthetic>ajc -classpath asp.jar;%CLASSPATH% Client.java\n                C:\\devel\\scratch\\synthetic\\Client.java:3 [error] The method aspectOf() is undefi ned for the type Asp\n                System.out.println(\"Can call aspectOf? \"+Asp.aspectOf()); 1 error C:\\devel\\scratch\\synthetic>javac\n                -classpath asp.jar;%CLASSPATH% Client.java Client.java:3: cannot find symbol symbol : method aspectOf()\n                location: class Asp System.out.println(\"Can call aspectOf? \"+Asp.aspectOf()); ^ 1 error\n                Clearly it's vital that external users of a library be able to call API methods like aspectOf on library\n                aspects. This works: C:\\devel\\scratch\\synthetic>ajc *.aj Client.java C:\\devel\\scratch\\synthetic>java\n                Client Can call aspectOf? Asp@b89838 Patch with test integrated into CVS tree to follow...\n            ","58520":"When a file is advised, javadoc uses the following naming convention for setting its \"A\n                NAME\": convertCheckedException(java.lang.Throwable) However, ajdoc uses the unqualified name for\n                the argument, resuting in the follwing in-file anchor link: <class-name>.html#convertCheckedException(Throwable)?\n                Which fails to navigate to the anchor within the file, although it does always go to the right file.\n            ","146546":"As part of bug 141730 we need to remove the hard coded dependency on \"|\" in methods\n                which use handles to get the filename. These methods are: AsmManager.getFileName(String)\n                AspectJElementHierarchy.getFileName(String)\n            ","112243":"I am seeing this exception when using ajc to do binary weaving: [iajc] Exception thrown from\n                AspectJ 1.5.0M4 [iajc] This might be logged as a bug already -- find current bugs at [iajc]\n                http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&component =Compiler [iajc] Bugs for\n                exceptions thrown have titles File:line from the top stack, [iajc] e.g., \"SomeFile.java:243\"\n                [iajc] If you don't find the exception below in a bug, please add a new bug [iajc] at\n                http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ [iajc] To make the bug a priority, please\n                include a test program [iajc] that can reproduce this exception. [iajc]\n                org.aspectj.weaver.MissingResolvedTypeWithKnownSignature [iajc] when batch building with classpath: ...\n                [iajc] org.aspectj.weaver.MissingResolvedTypeWithKnownSignature [iajc] java.lang.ClassCastException:\n                org.aspectj.weaver.MissingResolvedType WithKnownSignature [iajc] at\n                org.aspectj.weaver.bcel.BcelWorld.addSourceObjectType(BcelWor ld.java:277) [iajc] at\n                org.aspectj.weaver.bcel.BcelWeaver.addClassFile(BcelWeaver.ja va:373) [iajc] at\n                org.aspectj.weaver.bcel.BcelWeaver.addJarFile(BcelWeaver.java :306) [iajc] at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.initBce lWorld(AjBuildManager.java:598) [iajc] at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild (AjBuildManager.java:204) [iajc] at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBu ild(AjBuildManager.java:151) [iajc] at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:1 12) [iajc] at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java: 60) [iajc] at\n                org.aspectj.tools.ajc.Main.run(Main.java:326) [iajc] at\n                org.aspectj.tools.ajc.Main.runMain(Main.java:240) [iajc] at\n                org.aspectj.tools.ajc.Main.main(Main.java:83) [iajc] 1 fail|abort I see this also in HEAD and used the\n                debugger to determine it is trying to resolve the type that it's trying to load! I am able to get it to\n                finish the weave with no errors by changing BcelWorld as follows: public BcelObjectType\n                addSourceObjectType(JavaClass jc) { BcelObjectType ret = null; String signature =\n                UnresolvedType.forName(jc.getClassName ()).getSignature(); ReferenceType nameTypeX = null; Object lookup\n                = typeMap.get(signature); if (lookup instanceof ReferenceType) { nameTypeX = (ReferenceType)lookup; }\n                Instead of just casting. Then the result is null and it falls through to the usual lookup unresolved\n                type logic. Is this fix correct? I suspect it would take a few hours to narrow down a test case for this\n                one.\n            ","53999":"cosmetic mistake in error message... expected: can't bind type name 'unknown.Error' actual:\n                can't bind type name 'unknown$Error' (not sure why it would ever be munged with $) public class Test {\n                public static void main(String[] args) { test(); } static void test() { throw new Error(\"hello\");\n                } static aspect A { declare soft : unknown.Error : call(void test()); // CE } }\n            ","135780":"The thisJoinPoint.printString() fails on a 1.1 VM because it relies on a\n                java.lang.ref.SoftReference. I need this to work because we're using AspectJ on an embedded device that\n                is still using a pre-1.2 VM. The problem lies in org.aspectj.runtime.reflect.SignatureImpl. The attached\n                patch fixes it and passes all the tests. I tested the failing program manually on a 1.1 VM, but\n                automating the test would require adding a 1.1 VM to the regression test infrastructure. Sample: public\n                aspect Java11Test { before() : execution(* *(..)) { System.out.println(thisJoinPoint.toString()); }\n                public static void main(String args[]) {} } >ajc -target 1.1 Java11Test.aj >\\java\\jre1.1.8_010\\bin\\jre\n                -cp .;%CLASSPATH% Java11Test Exception in thread \"main\" java.lang.NoClassDefFoundError:\n                java/lang/ref/SoftRef erence at org.aspectj.runtime.reflect.JoinPointImpl$StaticPartImpl.toString(Joi\n                nPointImpl.java:43) at org.aspectj.runtime.reflect.JoinPointImpl$StaticPartImpl.toString(Joi\n                nPointImpl.java:48) at Java11Test.ajc$before$Java11Test$1$3444dde4(Java11Test.aj:3) at\n                Java11Test.main(Java11Test.aj)\n            ","54965":"When I added support for -outjar in the test harness, I was surprised to find duplicate entry\n                exceptions coming from the output file writing to the outjar. I traced it through, and found that every\n                source file passed to an incremental compile is in fact compiled twice! The first time round we note the\n                references, and of course each file has a reference to itself. Then we call \"AjState.getFilesToCompile\"\n                looking to see if there are any further files to compile in another iteration. This method does not\n                remember the set of files it just compiled, so since we have referenced each type we just compiled, and\n                we have no reord of that fact, we compile them again. Second time around, the bytecodes are identical to\n                the previous go, so recordClassFile doesn't note their dependents - and thus this time we terminate.\n            ","82171":"Proposal pasted from the following email discussion:\n                http://dev.eclipse.org/mhonarc/lists/ajdt-dev/msg00379.html We finally seem to be both have more support\n                for working directly with the Java Model, and more need to do so. Here's an idea for a light-weight\n                update to our architecture that will give us transparent access for working with the relationship map\n                using either the IJavaElements or IProgramElements. The idea is that we change the handle identifiers,\n                used for storing entries in the map, to be the same those used by the JavaModel, i.e.\n                IJavaElement.getHandleIdentifier(). That will allow us to ask for relationships for IJavaElements, and\n                get back a list of handles that an adapter can turn into IJavaElements. Currently our identifiers are a\n                source location including path, line, and column number. The Java model uses the handles that look like\n                the following, \"=Project-l/src<pkg1{Foo.java[Foo~m1\", which uniquely identify members, are\n                stable across builds and Eclipse invocations, but don't go below the member signature. So our adapter\n                will have to extend these by appending either line/column or offset information to reach at \"code\"\n                elements (e.g. calls, handlers). That's doable, and these handles should just get ignored by JavaCore as\n                desired. But I'm wondering what they should correspond to in our extended Java Model, perhaps a subtype\n                of SourceRefElement called ICodeElement? We should get JDT Core to add something like that anyway, but\n                they'll probably want to call it IUnknownElement or IGenericRefElement to provide other projects with\n                the same sort of extensibility. Another challenge will be generating the project part of the handle\n                because our compiler doesn't know about workspaces. I hope that info can be extracted from the full path\n                and source path information. Then for other IDEs we can simply use the same relative path convention.\n            ","67592":"In ajc a use of thisJoinPoint corresponds to an object of type JoinPoint, where a JoinPoint\n                object has four components, which can be retrieved using accessor methods. this getThis() target\n                getTarget() args getArgs() staticJoinPoint getStaticPart() In the case of args, the object returned is\n                an Object array. This means that an advice decl can overwrite the args, and then another advice which\n                shares the same JoinPoint will see the changed args. Here is a small example. In this aspect the before\n                advice changes arg[0] to always be \"Laurie\" and then the after advice will always say that\n                \"Laurie won a million pounds\". Is this the behaviour that is intended? I would have thought\n                that the interface to args[] should be such that the values can only be read. Otherwise very strange\n                interactions between advice decls could occur.\n                --------------------------------------------------------------------- public class Main { public static\n                Main v = new Main(); void lottery ( String arg ) { System.out.println(\"The arg in lottery is \"\n                + arg); } public static void main (String args[]) { v.lottery(\"Oege\"); v.lottery(\"Ganesh\");\n                } } --------------------------------------------------------------------- public aspect Aspect { // This\n                pair of advice decls demonstrates that an advice can change to // the args of a join point. before () :\n                call(* lottery(java.lang.String)) && !within(Aspect) { System.out.println(\"BEFORE \" +\n                thisJoinPoint + \" at \" + thisJoinPointStaticPart.getSourceLocation()); Object args[] =\n                thisJoinPoint.getArgs(); System.out.println(\"arg[0] is \" + args[0]); args[0] = \"Laurie\";\n                System.out.println(\"... now it is \" + thisJoinPoint.getArgs()[0]); } after () : call(*\n                lottery(java.lang.String)) && !within(Aspect) { System.out.println(\"AFTER \" +\n                thisJoinPoint + \" at \" + thisJoinPointStaticPart.getSourceLocation()); if\n                (thisJoinPoint.getArgs()[0].equals(\"Laurie\")) System.out.println(\"Laurie wins 1 million\n                pounds!\"); } }\n            ","28919":"If you don't find the exception below in a bug, please add a new bug To make the bug a\n                priority, please include a test program that can reproduce this exception. bad non-abstract method with\n                no code: private native int nativeMessagePumpInitialize() on public class\n                plc.comm.pvi.PviCom$LinkEventHandlerImpl bad non-abstract method with no code: private native int\n                nativeMessagePumpInitialize() on public class plc.comm.pvi.PviCom$LinkEventHandlerImpl\n                java.lang.RuntimeException: bad non-abstract method with no code: private native int\n                nativeMessagePumpInitialize() on public class plc.comm.pvi.PviCom$LinkEventHandlerImpl at\n                org.aspectj.weaver.bcel.LazyMethodGen.<init>(Unknown Source) at\n                org.aspectj.weaver.bcel.LazyClassGen.<init>(Unknown Source) at\n                org.aspectj.weaver.bcel.BcelObjectType.getLazyClassGen(Unknown Source) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(Unknown Source) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(Unknown Source) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerateClassFiles (Unknown Source) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild (Unknown Source) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(Unknown Source) at org.aspectj.tools.ajc.Main.run(Unknown\n                Source) at org.aspectj.tools.ajc.Main.runMain(Unknown Source) at org.aspectj.tools.ajc.Main.main(Unknown\n                Source)\n            ","47318":"org.aspectj.asm.IRelationship.Kind.ALL is an array that should contain all kinds that an\n                IRelationship may have. There are three possible kinds defined in IRelationship.java: ADVICE, DECLARE\n                and DECLARE_INTER_TYPE. The Kind[] ALL does only contain ADVICE and DECLARE. This can lead to an\n                ArrayIndexOutOfBoundsException.\n            ","116949":"java.lang.ClassCastException at org.aspectj.weaver.bcel.BcelClassWeaver.checkForOverride\n                (BcelClassWeaver.java:607) at org.aspectj.weaver.bcel.BcelClassWeaver.calculateAnyRequiredBridgeMethods\n                (BcelClassWeaver.java:676) at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1537) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1485) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1266) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1088) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave (AjCompilerAdapter.java:300) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling (AjCompilerAdapter.java:178) at\n                org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspect\n                j_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile (Compiler.java:367) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation (AjBuildManager.java:809) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild (AjBuildManager.java:254) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild (AjBuildManager.java:163) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run (AspectJBuildManager.java:191) trouble\n                in: public class ts.simul.client.AbstractClient$OptionSetter extends\n                ts.util.CmdLineProgram$OptionSetterBase: final ts.simul.client.AbstractClient this$0 private static\n                final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0 public void <init>(ts.simul.client.AbstractClient)\n                org.aspectj.weaver.MethodDeclarationLineNumber: 59:1411 : ALOAD_0 //\n                ts.simul.client.AbstractClient$OptionSetter this (line 60) ALOAD_1 PUTFIELD\n                ts.simul.client.AbstractClient$OptionSetter.this$0 Lts/simul/client/AbstractClient; ALOAD_0 //\n                ts.simul.client.AbstractClient$OptionSetter this (line 59) ALOAD_1 INVOKESPECIAL\n                ts.util.CmdLineProgram$OptionSetterBase.<init> (Lts/util/CmdLineProgram;)V\n                constructor-execution(void ts.simul.client.AbstractClient$OptionSetter.<init>\n                (ts.simul.client.AbstractClient)) | RETURN constructor-execution(void\n                ts.simul.client.AbstractClient$OptionSetter.<init> (ts.simul.client.AbstractClient)) end public\n                void <init>(ts.simul.client.AbstractClient) public boolean setOption_file(String) throws\n                ts.util.IllegalProgramArgumentException org.aspectj.weaver.MethodDeclarationLineNumber: 62:1469 :\n                method-execution(boolean ts.simul.client.AbstractClient$OptionSetter.setOption_file(java.lang.String)) |\n                ALOAD_1 // java.lang.String optParam (line 65) | method-call(int java.lang.String.length()) | |\n                INVOKEVIRTUAL java.lang.String.length ()I | method-call(int java.lang.String.length()) | IFLE L1 |\n                ALOAD_0 // ts.simul.client.AbstractClient$OptionSetter this (line 66) | GETFIELD\n                ts.simul.client.AbstractClient$OptionSetter.this$0 Lts/simul/client/AbstractClient; | ALOAD_1 //\n                java.lang.String optParam | PUTFIELD ts.simul.client.AbstractClient.fileName Ljava/lang/String; | NEW\n                java.io.File (line 67) | DUP | ALOAD_0 // ts.simul.client.AbstractClient$OptionSetter this | GETFIELD\n                ts.simul.client.AbstractClient$OptionSetter.this$0 Lts/simul/client/AbstractClient; | GETFIELD\n                ts.simul.client.AbstractClient.fileName Ljava/lang/String; | constructor-call(void java.io.File.<init>(java.lang.String))\n                | | INVOKESPECIAL java.io.File.<init> (Ljava/lang/String;)V | constructor-call(void java.io.File.<init>(java.lang.String))\n                | ASTORE_2 | ALOAD_2 // java.io.File file (line 68) | method-call(boolean java.io.File.exists()) | |\n                INVOKEVIRTUAL java.io.File.exists ()Z | method-call(boolean java.io.File.exists()) | IFNE L0 | NEW\n                ts.util.IllegalProgramArgumentException (line 69) | DUP | NEW java.lang.StringBuilder | DUP | LDC \"Cannot\n                find file: [\" | constructor-call(void java.lang.StringBuilder.<init>(java.lang.String)) | |\n                INVOKESPECIAL java.lang.StringBuilder.<init> (Ljava/lang/String;)V | constructor-call(void\n                java.lang.StringBuilder.<init>(java.lang.String)) | ALOAD_0 //\n                ts.simul.client.AbstractClient$OptionSetter this | GETFIELD\n                ts.simul.client.AbstractClient$OptionSetter.this$0 Lts/simul/client/AbstractClient; | GETFIELD\n                ts.simul.client.AbstractClient.fileName Ljava/lang/String; | method-call(java.lang.StringBuilder\n                java.lang.StringBuilder.append (java.lang.String)) | | INVOKEVIRTUAL java.lang.StringBuilder.append\n                (Ljava/lang/String;)Ljava/lang/StringBuilder; | method-call(java.lang.StringBuilder\n                java.lang.StringBuilder.append (java.lang.String)) | LDC \"]\" |\n                method-call(java.lang.StringBuilder java.lang.StringBuilder.append (java.lang.String)) | | INVOKEVIRTUAL\n                java.lang.StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder; |\n                method-call(java.lang.StringBuilder java.lang.StringBuilder.append (java.lang.String)) |\n                method-call(java.lang.String java.lang.StringBuilder.toString()) | | INVOKEVIRTUAL\n                java.lang.StringBuilder.toString () Ljava/lang/String; | method-call(java.lang.String\n                java.lang.StringBuilder.toString()) | constructor-call(void ts.util.IllegalProgramArgumentException.<init>\n                (java.lang.String)) | | INVOKESPECIAL ts.util.IllegalProgramArgumentException.<init>\n                (Ljava/lang/String;)V | constructor-call(void ts.util.IllegalProgramArgumentException.<init>\n                (java.lang.String)) | ATHROW | L0: ICONST_1 (line 70) | IRETURN | L1: ICONST_0 (line 73) | IRETURN\n                method-execution(boolean ts.simul.client.AbstractClient$OptionSetter.setOption_file(java.lang.String))\n                end public boolean setOption_file(String) throws ts.util.IllegalProgramArgumentException public boolean\n                setOption_class(String) throws ts.util.IllegalProgramArgumentException\n                org.aspectj.weaver.MethodDeclarationLineNumber: 76:1971 : method-execution(boolean\n                ts.simul.client.AbstractClient$OptionSetter.setOption_class(java.lang.String)) | ALOAD_1 //\n                java.lang.String optParam (line 79) | method-call(int java.lang.String.length()) | | INVOKEVIRTUAL\n                java.lang.String.length ()I | method-call(int java.lang.String.length()) | IFLE L1 | ALOAD_0 //\n                ts.simul.client.AbstractClient$OptionSetter this (line 80) | GETFIELD\n                ts.simul.client.AbstractClient$OptionSetter.this$0 Lts/simul/client/AbstractClient; | ALOAD_1 //\n                java.lang.String optParam | PUTFIELD ts.simul.client.AbstractClient.className Ljava/lang/String; | catch\n                ts.simul.SimulationException -> E0 | | ALOAD_0 // ts.simul.client.AbstractClient$OptionSetter this\n                (line 82) | | GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0\n                Lts/simul/client/AbstractClient; | | ALOAD_0 // ts.simul.client.AbstractClient$OptionSetter this | |\n                GETFIELD ts.simul.client.AbstractClient$OptionSetter.this$0 Lts/simul/client/AbstractClient; | |\n                GETFIELD ts.simul.client.AbstractClient.className Ljava/lang/String; | | method-call(java.lang.Class\n                ts.simul.SceneFactory.getSceneClass (java.lang.String)) | | | INVOKESTATIC\n                ts.simul.SceneFactory.getSceneClass (Ljava/lang/String;)Ljava/lang/Class; | |\n                method-call(java.lang.Class ts.simul.SceneFactory.getSceneClass (java.lang.String)) | | PUTFIELD\n                ts.simul.client.AbstractClient.sceneClass Ljava/lang/Class; | | ALOAD_0 //\n                ts.simul.client.AbstractClient$OptionSetter this (line 83) | | GETFIELD\n                ts.simul.client.AbstractClient$OptionSetter.this$0 Lts/simul/client/AbstractClient; | | method-call(void\n                ts.simul.client.AbstractClient.setBeanInfoSearchPath()) | | | INVOKESTATIC\n                ts.simul.Architecture.aspectOf () Lts/simul/Architecture; | | | GETSTATIC\n                ts.simul.client.AbstractClient$OptionSetter.ajc$tjp_0 Lorg/aspectj/lang/JoinPoint$StaticPart; | | |\n                INVOKEVIRTUAL ts.simul.Architecture.ajc$before$ts_simul_Architecture$1$ae285a4d\n                (Lorg/aspectj/lang/JoinPoint$StaticPart;)V | | | INVOKEVIRTUAL\n                ts.simul.client.AbstractClient.setBeanInfoSearchPath ()V | | method-call(void\n                ts.simul.client.AbstractClient.setBeanInfoSearchPath()) | | GOTO L0 | catch ts.simul.SimulationException\n                -> E0 | E0: ASTORE_2 (line 85) | NEW ts.util.IllegalProgramArgumentException (line 86) | DUP |\n                ALOAD_2 // ts.simul.SimulationException e | method-call(java.lang.String\n                ts.simul.SimulationException.getMessage()) | | INVOKEVIRTUAL ts.simul.SimulationException.getMessage ()\n                Ljava/lang/String; | method-call(java.lang.String ts.simul.SimulationException.getMessage()) |\n                constructor-call(void ts.util.IllegalProgramArgumentException.<init> (java.lang.String)) | |\n                INVOKESPECIAL ts.util.IllegalProgramArgumentException.<init> (Ljava/lang/String;)V |\n                constructor-call(void ts.util.IllegalProgramArgumentException.<init> (java.lang.String)) | ATHROW\n                | L0: ICONST_1 (line 88) | IRETURN | L1: ICONST_0 (line 91) | IRETURN method-execution(boolean\n                ts.simul.client.AbstractClient$OptionSetter.setOption_class(java.lang.String)) end public boolean\n                setOption_class(String) throws ts.util.IllegalProgramArgumentException public boolean\n                setOption_name(String) org.aspectj.weaver.MethodDeclarationLineNumber: 94:2593 :\n                method-execution(boolean ts.simul.client.AbstractClient$OptionSetter.setOption_name(java.lang.String)) |\n                ALOAD_0 // ts.simul.client.AbstractClient$OptionSetter this (line 96) | GETFIELD\n                ts.simul.client.AbstractClient$OptionSetter.this$0 Lts/simul/client/AbstractClient; | ALOAD_1 //\n                java.lang.String optParam | PUTFIELD ts.simul.client.AbstractClient.sceneName Ljava/lang/String; |\n                ICONST_1 (line 97) | IRETURN method-execution(boolean\n                ts.simul.client.AbstractClient$OptionSetter.setOption_name(java.lang.String)) end public boolean\n                setOption_name(String) public boolean setOption_actors(String)\n                org.aspectj.weaver.MethodDeclarationLineNumber: 100:2739 : method-execution(boolean\n                ts.simul.client.AbstractClient$OptionSetter.setOption_actors(java.lang.String)) | catch\n                java.lang.NumberFormatException -> E0 | | ALOAD_1 // java.lang.String optParam (line 103) | |\n                method-call(int java.lang.Integer.parseInt(java.lang.String)) | | | INVOKESTATIC\n                java.lang.Integer.parseInt (Ljava/lang/String;) I | | method-call(int\n                java.lang.Integer.parseInt(java.lang.String)) | | ISTORE_2 | | GOTO L0 | catch\n                java.lang.NumberFormatException -> E0 | E0: ASTORE_2 // int n (line 105) | ICONST_0 (line 106) |\n                IRETURN | L0: ICONST_1 (line 108) | IRETURN method-execution(boolean\n                ts.simul.client.AbstractClient$OptionSetter.setOption_actors(java.lang.String)) end public boolean\n                setOption_actors(String) end public class ts.simul.client.AbstractClient$OptionSetter when weaving type\n                ts.simul.client.AbstractClient$OptionSetter when weaving classes when weaving when incrementally\n                building BuildConfig [c:\\Projects\\eclipse\\.metadata\\.plugins\\org.eclipse.ajdt.core\\TS.generated.lst]\n                #Files=79\n            ","109614":"I am getting following error when compiling code using iajc ant task: [iajc.task] trouble in:\n                [iajc.task] public class admin.modelbean.AdminUserMB extends web.FormSupport: [iajc.task] private static\n                final org.apache.log4j.Logger log .... (Ljava/lang/String;)Ljava/lang/StringBuffer; [iajc.task] |\n                method-call(java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.String)) [iajc.task] | LDC_W\n                \"}\" (line 249) [iajc.task] | method-call(java.lang.StringBuffer\n                java.lang.StringBuffer.append(java.lang.String)) [iajc.task] | | INVOKEVIRTUAL\n                java.lang.StringBuffer.append (Ljava/lang/String;)Ljava/lang/StringBuffer; [iajc.task] |\n                method-call(java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.String)) [iajc.task] |\n                method-call(java.lang.String java.lang.StringBuffer.toString()) [iajc.task] | | INVOKEVIRTUAL\n                java.lang.StringBuffer.toString ()Ljava/lang/String; (line 236) [iajc.task] |\n                method-call(java.lang.String java.lang.StringBuffer.toString()) [iajc.task] | ARETURN [iajc.task]\n                method-execution(java.lang.String admin.modelbean.AdminUserMB.toString()) [iajc.task] end public String\n                toString() [iajc.task] end public class admin.modelbean.AdminUserMB [iajc.task]\n                java.lang.RuntimeException: Ranges must be updated with an enclosing instructionList [iajc.task] at\n                org.aspectj.weaver.bcel.Range.updateTarget(Range.java:170) [iajc.task] at\n                org.aspectj.weaver.bcel.BcelShadow.retargetFrom(BcelShadow.java:235) [iajc.task] at\n                org.aspectj.weaver.bcel.BcelShadow.deleteNewAndDup(BcelShadow.java:212) [iajc.task] at\n                org.aspectj.weaver.bcel.BcelShadow.prepareForMungers(BcelShadow.java:252) [iajc.task] at\n                org.aspectj.weaver.Shadow.implement(Shadow.java:374) [iajc.task] at\n                org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:1754) [iajc.task] at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:393) [iajc.task] at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:96) [iajc.task] at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1372) [iajc.task] at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1337) [iajc.task] at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1114) [iajc.task] at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1001) [iajc.task] at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:286) [iajc.task] at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:165)\n                [iajc.task] at\n                org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\n                [iajc.task] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)\n                [iajc.task] at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:728)\n                [iajc.task] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:206)\n                [iajc.task] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:140)\n                [iajc.task] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112) [iajc.task] at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60) [iajc.task] at\n                org.aspectj.tools.ajc.Main.run(Main.java:324) [iajc.task] at\n                org.aspectj.tools.ajc.Main.runMain(Main.java:238) [iajc.task] at\n                org.aspectj.tools.ajc.Main.main(Main.java:82) [iajc.task] ABORT [iajc.task] [iajc.task] Exception thrown\n                from AspectJ 1.5.0_M3a [iajc.task] This might be logged as a bug already -- find current bugs at\n                [iajc.task] http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&component=Compiler [iajc.task]\n                Bugs for exceptions thrown have titles File:line from the top stack, [iajc.task] e.g., \"SomeFile.java:243\"\n                [iajc.task] If you don't find the exception below in a bug, please add a new bug [iajc.task] at\n                http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ [iajc.task] To make the bug a priority,\n                please include a test program [iajc.task] that can reproduce this exception. [iajc.task] Ranges must be\n                updated with an enclosing instructionList [iajc.task] Ranges must be updated with an enclosing\n                instructionList [iajc.task] java.lang.RuntimeException: Ranges must be updated with an enclosing\n                instructionList [iajc.task] at org.aspectj.weaver.bcel.Range.updateTarget(Range.java:170) [iajc.task] at\n                org.aspectj.weaver.bcel.BcelShadow.retargetFrom(BcelShadow.java:235) [iajc.task] at\n                org.aspectj.weaver.bcel.BcelShadow.deleteNewAndDup(BcelShadow.java:212) [iajc.task] at\n                org.aspectj.weaver.bcel.BcelShadow.prepareForMungers(BcelShadow.java:252) [iajc.task] at\n                org.aspectj.weaver.Shadow.implement(Shadow.java:374) [iajc.task] at\n                org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:1754) [iajc.task] at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:393) [iajc.task] at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:96) [iajc.task] at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1372) [iajc.task] at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1337) [iajc.task] at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1114) [iajc.task] at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1001) [iajc.task] at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:286) [iajc.task] at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:165)\n                [iajc.task] at\n                org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\n                [iajc.task] at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367)\n                [iajc.task] at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:728)\n                [iajc.task] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:206)\n                [iajc.task] at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:140)\n                [iajc.task] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112) [iajc.task] at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60) [iajc.task] at\n                org.aspectj.tools.ajc.Main.run(Main.java:324) [iajc.task] at\n                org.aspectj.tools.ajc.Main.runMain(Main.java:238) [iajc.task] at\n                org.aspectj.tools.ajc.Main.main(Main.java:82) [iajc.task] 1 fail|abort BUILD FAILED\n                /home/sbhatti/workspace/devint/build.xml:100: The following error occurred while executing this line:\n                /home/sbhatti/workspace/devint/build.xml:164: The following error occurred while executing this line:\n                /home/sbhatti/workspace/devint/modules/novo/build.xml:59: The following error occurred while executing\n                this line: /opt/sbhatti/dev/current/novo/build.xml:326: failure[-1] running ajc\n            ","72157":"Compiling the program below results in the constructor for the class SCE2 throwing Exception,\n                which it is not declared to throw either in the source code or in the generated bytecode. If the\n                'declare soft' statement is removed, then the super() call in the SCE2 constructor is correctly reported\n                as throwing an undeclared exception; it seems that the 'declare soft' statement turns off the exception\n                checking of the super() call despite there being no join point which covers this call that would\n                actually soften the exception. I'm using 'DEVELOPMENT built on Monday Aug 16, 2004 at 13:50:47 GMT'.\n                public class SuperConsExc { public SuperConsExc() throws Exception { throw new Exception(); } public\n                static void main(String[] args) { new SCE2(); } } class SCE2 extends SuperConsExc { public SCE2() {\n                super(); } } aspect SCEAspect { declare soft: Exception: within(SCE2); }\n            ","70773":"In AspectJ 1.1.11 for Eclipse, build ID 1.2.0 (and also in the previous 1.1.10) on Eclipse\n                version 3.0.0, build ID 200406351208: If I enable incremental compilation and make a change to a file\n                (typing a space and deleting it, or editing a comment), I get a \"ConncurrentModificationException\n                thrown: null\" error.\n            ","119539":"Get compiler xlint adviceDidNotMatch when using parameterized type to specify type pattern for\n                pertypewithin clause. Parameterized type works in pointcuts, and the pointcut matches staticly (with\n                deow). Same result for before or around advice. Also, the permitted uses for the type parameter of a\n                parameterized aspect in the adk15notebook section on point. Resolutions could be: - not a bug b/c the\n                code below is wrong - not permitted to use type parameter in pertypewithin; doc updated - permitted,\n                fixed ... AspectJ version 1.5.0.20051206103951, via AJDT -----------------------------------------\n                sample package bugs; public class GenericPerTypeWithin { public static void main(String[] args) { new\n                C(); // fyi, compiler does nothing absent this call? } public static abstract aspect Singleton<Target>\n                pertypewithin(Target) { pointcut creation() : execution(Target+.new()) ; // adviceDoesNotMatch - same\n                for before advice Target around() : creation() { return proceed(); } // picks out constructor-execution\n                below declare warning : creation() : \"Singleton.creation()\"; } static class C { C(){} } static\n                aspect A extends Singleton<C> {} }\n            ","131505":"Using the -outxml option in AJDT the generated aop.xml files are not correct after the first\n                build and contain all the aspects that have ever been built (including those in different projects and\n                duplicates if an aspect has been built twice). It seems that there is a global list of aspects\n                (aspectNames in AjBuildManager) that is never cleared.\n            ","153535":"The following problem is interesting because the advice weaves correctly with Java 1.5 LTW and\n                also using Java 1.4 with build-time weaving. However, the following call pointcut isn't matching the\n                expected call site in Java 1.4 load-time weaving (*). Pointcut: private pointcut inExecQuery() :\n                (within(uk.ltd.getahead.dwr.impl.ExecuteQuery) || within(uk.ltd.getahead.dwr.ExecuteQuery)); public\n                pointcut dwrQuery(Method method, Object receiver, Object[] params) : inExecQuery() &&\n                withincode(* execute(..)) && call(* Method.invoke(..)) && args(receiver, params) &&\n                target(method); protected pointcut monitorEnd() : dwrQuery(*, *, *); Matching call site: Object reply =\n                method.invoke(object, params); I've tracked it down to failing to find the method in\n                ResolvedType.matches. On line 405: \"m1.getSignature()\"= \"(Ljava/lang/Object;[Ljava.lang.Object;)Ljava/lang/Object;\"\n                \"m2.getSignature()\"= \"(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\"\n                Note the difference between . and / ^ ^ It looks to me like the signature for array types in the\n                reflection delegate is erroneously using . instead of /. I have attached a patch to the\n                ReflectionBasedReferenceTypeDelegateTest that isolates this unexpected signature return. Hopefully you\n                agree that this is not correct. If not, some more information follows. Here's the stack trace where the\n                match fails: ResolvedType.matches(Member, Member) line: 405\n                ReferenceType(ResolvedType).lookupMember(Member, Iterator) line: 347\n                ReferenceType(ResolvedType).lookupMethod(Member) line: 326 LTWWorld(World).resolve(Member) line: 504\n                MemberImpl.resolve(World) line: 93 JoinPointSignatureIterator.addSignaturesUpToFirstDefiningMember()\n                line: 109 JoinPointSignatureIterator.<init>(Member, World) line: 51\n                MemberImpl.getJoinPointSignatures(World) line: 943 SignaturePattern.matches(Member, World, boolean)\n                line: 286 KindedPointcut.matchInternal(Shadow) line: 106 KindedPointcut(Pointcut).match(Shadow) line:\n                146 AndPointcut.matchInternal(Shadow) line: 53 AndPointcut(Pointcut).match(Shadow) line: 146\n                AndPointcut.matchInternal(Shadow) line: 51 AndPointcut(Pointcut).match(Shadow) line: 146\n                AndPointcut.matchInternal(Shadow) line: 51 AndPointcut(Pointcut).match(Shadow) line: 146\n                AndPointcut.matchInternal(Shadow) line: 51 AndPointcut(Pointcut).match(Shadow) line: 146\n                OrPointcut.matchInternal(Shadow) line: 50 OrPointcut(Pointcut).match(Shadow) line: 146\n                BcelAdvice(ShadowMunger).match(Shadow, World) line: 71 BcelAdvice(Advice).match(Shadow, World) line: 112\n                BcelAdvice.match(Shadow, World) line: 107 BcelClassWeaver.match(BcelShadow, List) line: 2806\n                BcelClassWeaver.matchInvokeInstruction(LazyMethodGen, InstructionHandle, InvokeInstruction, BcelShadow,\n                List) line: 2768 BcelClassWeaver.match(LazyMethodGen, InstructionHandle, BcelShadow, List) line: 2506\n                BcelClassWeaver.match(LazyMethodGen) line: 2332 BcelClassWeaver.weave() line: 494\n                BcelClassWeaver.weave(BcelWorld, LazyClassGen, List, List, List) line: 119\n                BcelWeaver.weave(UnwovenClassFile, BcelObjectType, boolean) line: 1613\n                BcelWeaver.weaveWithoutDump(UnwovenClassFile, BcelObjectType) line: 1564\n                BcelWeaver.weaveAndNotify(UnwovenClassFile, BcelObjectType, IWeaveRequestor) line: 1341\n                BcelWeaver.weave(IClassFileProvider) line: 1163\n                ClassLoaderWeavingAdaptor(WeavingAdaptor).getWovenBytes(String, byte[]) line: 319\n                ClassLoaderWeavingAdaptor(WeavingAdaptor).weaveClass(String, byte[]) line: 225 Aj.preProcess(String,\n                byte[], ClassLoader) line: 77 ClassPreProcessorAdapter.preProcess(String, byte[], ClassLoader) line: 67\n                ClassPreProcessorHelper.defineClass0Pre(ClassLoader, String, byte[], int, int, ProtectionDomain) line:\n                107 WebappClassLoader(ClassLoader).defineClass(String, byte[], int, int, ProtectionDomain) line: 539\n                WebappClassLoader(SecureClassLoader).defineClass(String, byte[], int, int, CodeSource) line: 123\n                WebappClassLoader.findClassInternal(String) line: 1786 WebappClassLoader.findClass(String) line: 1048\n                WebappClassLoader.loadClass(String, boolean) line: 1506 WebappClassLoader.loadClass(String) line: 1385\n                WebappClassLoader(ClassLoader).loadClassInternal(String) line: 302 Class.forName0(String, boolean,\n                ClassLoader) line: not available [native method] Class.forName(String) line: 141\n                InitializeLog.setWarnLogging(String) line: 121 InitializeLog.initializeLogging() line: 96\n                ContextLoaderServlet.init() line: 13 ContextLoaderServlet(GenericServlet).init(ServletConfig) line: 212\n                StandardWrapper.loadServlet() line: 879 StandardWrapper.load() line: 767\n                StandardContext.loadOnStartup(Container[]) line: 3483 StandardContext.start() line: 3709\n                StandardHost(ContainerBase).addChildInternal(Container) line: 776\n                StandardHost(ContainerBase).addChild(Container) line: 759 StandardHost.addChild(Container) line: 537\n                StandardHostDeployer.install(String, URL) line: 260 StandardHost.install(String, URL) line: 730\n                HostConfig.deployWARs(File, String[]) line: 558 HostConfig.deployApps() line: 373 HostConfig.start()\n                line: 784 HostConfig.lifecycleEvent(LifecycleEvent) line: 330\n                LifecycleSupport.fireLifecycleEvent(String, Object) line: 119 StandardHost(ContainerBase).start() line:\n                1155 StandardHost.start() line: 696 StandardEngine(ContainerBase).start() line: 1147\n                StandardEngine.start() line: 310 StandardService.start() line: 449 StandardServer.start() line: 2212\n                Catalina.start() line: 458 Catalina.execute() line: 345 Catalina.process(String[]) line: 129\n                NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]\n                NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39 DelegatingMethodAccessorImpl.invoke(Object,\n                Object[]) line: 25 Method.invoke(Object, Object[]) line: 324 Bootstrap.main(String[]) line: 150 I'm\n                using a modified version of Alex Vasseur's LTW plugin for a Java 1.4 VM although I haven't tested on the\n                JRockIt plugin for a 1.4 VM: my guess is that this would fail there too.\n            ","72154":"When the compiler terminates abnormally (exception) or behaves unexpectedly\n                (warning/error/abort) a simple dump of the compiler state should be produced to aid problem diagnosis.\n                The content and conditions under which the dump is produced should be configurable by the user but the\n                facility should be enabled by default for exceptions. Consequently its inclusion should have negligible\n                impact on compiler performance and footprint. The file should be attached to bug reports to give a\n                complete and objective description of the user?s environment and support problem resolution where a\n                testcase cannot be provided. One approach is to write a uniquely name file (using date & time) in\n                the current directory e.g ?ajcore.20040818.105200.txt? which should be human readable (it can be zipped\n                if large) to allow the user to potentially diagnose their own problems or remove potentially sensitive\n                data before submission. It should contain basic information such as AspectJ version, system properties\n                and command line as well as failure information such as _full_ exception stack trace, compiler messages\n                and internal compiler state.\n            ","72150":"AJC fails to find nested static classes during binary-weaving analysis if the classes have been\n                previously compiled with J2SE5.0 javac compiler with options: -source 1.5/ - target 1.5 Note, that the\n                nested static classes are not necessarily subject to bytecode weaving - AJC merely fails to detect them\n                in the JARS for its analysis. This issue disappears when the .java sources are pre-compiled with -\n                source/target 1.4, regardless if the javac compiler comes from the J2SE1.4 or J2SE5.0 distribution. This\n                issue is distinct form Bug #71548, since no 5.0 source code processing is required from AJC ever.\n                Thanks, Hristo\n            ","109173":"Here are some suggested enhancements as a result of exhaustive testing in the Eclipse/OSGi\n                environment. 1. If no aspects are declared for a particular class loader, either because there are no\n                visible aop.xml files or they contain no aspect definitions, then we should short-circuit the\n                implementation of weaveClass() so that byte-code is not unnecessarily passed to the weaver. This is\n                especially important under OSGi where there may be hundreds of class bundles, each with their own class\n                loader only some of which are being woven. We can use the existing ?enabled? flag. 2. As previously\n                discussed on aspectj-dev the META-INF directory is considered private in OSGi and is therefore an\n                inappropriate location for aop.xml files declaring shared aspects. I therefore propose a System property\n                to set the a resource names for finding aop.xml files which would default to ?META-INF/aop.xml? e.g.\n                -Dorg.aspectj.weaver.loadtime.configuration=META- INF/aop.xml;org/aspectj/aop.xml. 3. We should not be\n                catching Throwable in Aj. Instead we should catch known exceptions e.g. BCException and issue messages\n                while letting other runtime exceptions pass back to the class loader. A user provided IMessageHandler\n                implementation can decide under what circumstances to abort. Alternatively if Aj is considered to be a\n                ?safe? interface for weaving agents e.g. JVMTI then the dump logic it contains should be moved to the\n                WeavingAdaptor so that it can be used directly from a class loader.\n            ","119543":"Code and exception below. Same result for HEAD and AspectJ 1.5.0.20051206103951 via AJDT.\n                ------------------------------- bugs/CachedToString.java package bugs; import\n                java.lang.ref.SoftReference; import junit.framework.TestCase; public class CachedToString { /** * @param\n                args */ public static void main(String[] args) { new CacheGetterTest().testToString(); } public static\n                class CacheGetterTest extends TestCase { static boolean runAdvice; public void testToString() {\n                RandomToString me = new RandomToString (); runAdvice = false; String one = me.toString(); String two =\n                me.toString(); assertFalse(one.equals(two)); runAdvice = true; one = me.toString(); two = me.toString();\n                assertTrue(one.equals(two)); } static class RandomToString { static aspect CacheToString extends\n                CachedItem<String> { public pointcut context() : if(runAdvice); public pointcut caching() :\n                execution(String RandomToString.toString()); } Random random = new Random(-1); public String toString()\n                { return \"\" + random.nextFloat(); } } } public abstract static aspect CachedItem<Result>\n                pertarget(results()){ SoftReference<Result> cache; boolean nullCache; // CODE writing pointcut\n                trifecta separate context if extended and errors // getcode declaring-pointcuts-to-extend-with-caching\n                START /** * Define join points to cache. * Must override, with staticly-determinable pointcuts * that\n                pick out join points that are permitted. */ protected abstract pointcut caching(); /** ok to use Result\n                field-get or return value */ private pointcut permitted() : get(Result *) || execution(Result *()) ||\n                call(Result *()) || call(Result.new(..)); /** Subaspects may add dynamic tests for the join points. */\n                pointcut context() : !disabled(); private pointcut disabled(); // fyi, undefined == none // getcode\n                results START /** the pointcut composed from the user, as permitted, with context */ pointcut results()\n                : caching() && permitted() && context(); // getcode results END Result around() :\n                results() { // ... } // getcode declaring-pointcuts-to-extend-with-caching END Result result; if\n                (nullCache) { result = null; } else if ((null == cache) || (null == (result = cache.get()))){ result =\n                proceed(); if (null == result) { nullCache = true; } else { cache = new SoftReference(result); } }\n                return result; } } } ------------------------------- exception\n                C:\\home\\ws\\main-31\\my-ajbugs\\aspectj-src\\bugs\\CachedToString.java [error] Internal compiler error\n                java.lang.StringIndexOutOfBoundsException: String index out of range: -2 at\n                java.lang.String.substring(String.java:1768) at\n                org.aspectj.weaver.TypeFactory.createTypeFromSignature(TypeFactory.java:86) at\n                org.aspectj.weaver.UnresolvedType.forSignature(UnresolvedType.java:426) at\n                org.aspectj.weaver.UnresolvedType.getOutermostType(UnresolvedType.java:601) at\n                org.aspectj.weaver.ResolvedType.isVisible(ResolvedType.java:1259) at\n                org.aspectj.weaver.ResolvedType.addPointcutsResolvingConflicts(ResolvedType.java:1743) at\n                org.aspectj.weaver.ResolvedType.getExposedPointcuts(ResolvedType.java:1716) at\n                org.aspectj.weaver.ResolvedType.getExposedPointcuts(ResolvedType.java:1710) at\n                org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.checkPointcutDeclarations(EclipseSourceType.java:293)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.resolvePointcutDeclarations(AjLookupEnvironment.java:414)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.resolvePointcutDeclarations(AjLookupEnvironment.java:419)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.resolvePointcutDeclarations(AjLookupEnvironment.java:419)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.resolvePointcutDeclarations(AjLookupEnvironment.java:419)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:231)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:301) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:315) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:230) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:156) at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60) at\n                org.aspectj.tools.ajc.Main.run(Main.java:326) at org.aspectj.tools.ajc.Main.runMain(Main.java:240) at\n                org.aspectj.tools.ajc.Main.main(Main.java:83) (no source information available) ABORT Exception thrown\n                from AspectJ DEVELOPMENT This might be logged as a bug already -- find current bugs at\n                http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&component=Compiler Bugs for exceptions\n                thrown have titles File:line from the top stack, e.g., \"SomeFile.java:243\" If you don't find\n                the exception below in a bug, please add a new bug at\n                http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a\n                test program that can reproduce this exception. String index out of range: -2 when resolving pointcut\n                declarations CachedToString when completing type bindings when batch building with classpath:\n                c:\\home\\apps\\jdk15\\jre\\lib\\ext\\dnsns.jar;c:\\home\\apps\\jdk15\\jre\\lib\\ext\\localedata.jar;c:\\home\\apps\\jdk15\\jre\\lib\\ext\\sunjce_provider.jar;c:\\home\\apps\\jdk15\\jre\\lib\\ext\\sunpkcs11.jar;C:\\home\\ws\\main-31\\lib\\junit\\junit.jar;C:\\home\\wes\\dev\\tools\\aspectj-1.5\\lib\\aspectjrt.jar;\n                String index out of range: -2 java.lang.StringIndexOutOfBoundsException: String index out of range: -2\n                at java.lang.String.substring(String.java:1768) at\n                org.aspectj.weaver.TypeFactory.createTypeFromSignature(TypeFactory.java:86) at\n                org.aspectj.weaver.UnresolvedType.forSignature(UnresolvedType.java:426) at\n                org.aspectj.weaver.UnresolvedType.getOutermostType(UnresolvedType.java:601) at\n                org.aspectj.weaver.ResolvedType.isVisible(ResolvedType.java:1259) at\n                org.aspectj.weaver.ResolvedType.addPointcutsResolvingConflicts(ResolvedType.java:1743) at\n                org.aspectj.weaver.ResolvedType.getExposedPointcuts(ResolvedType.java:1716) at\n                org.aspectj.weaver.ResolvedType.getExposedPointcuts(ResolvedType.java:1710) at\n                org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.checkPointcutDeclarations(EclipseSourceType.java:293)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.resolvePointcutDeclarations(AjLookupEnvironment.java:414)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.resolvePointcutDeclarations(AjLookupEnvironment.java:419)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.resolvePointcutDeclarations(AjLookupEnvironment.java:419)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.resolvePointcutDeclarations(AjLookupEnvironment.java:419)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:231)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:301) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:315) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:230) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:156) at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60) at\n                org.aspectj.tools.ajc.Main.run(Main.java:326) at org.aspectj.tools.ajc.Main.runMain(Main.java:240) at\n                org.aspectj.tools.ajc.Main.main(Main.java:83) 1 fail|abort, 1 error Signal 127\n            ","48080":"*** to be discussed on aspectj-dev / users before implementing *** We have found it useful to\n                be able to include contextual information in the messages produced by declare warning /error. We want to\n                be able to write something like: declare warning: call(* com.ibm.ws..*(..)) : \"Call to protected\n                WAS API: %s\"; and get the compiler message: \"Call to protected WAS API: void\n                com.ibm.ws.SomeClass.someMethod(boolean)\" We prototyped a solution using substitution variables as\n                follows: %% inserts a % character %k inserts the joinpoint kind %s inserts the signature at the\n                joinpoint %t inserts the name of the declaring type at the joinpoint %i inserts the name of the\n                identifier at the joinpoint %j inserts a string representation of the joinpoint %f inserts the filename\n                where the match was found %l inserts the line number where the match was found %a inserts the file and\n                line number of the declare error/warning definition (this may not be the perfect set...) Here's a\n                complete mini-example showing all the subsitutions in action : Hello.java ========= public class Hello {\n                public static void main(String[] args) { System.out.println(\"Hello\"); new Hello().sayItToo();\n                } private void sayItToo() { System.out.println(\"me too\"); } } Warn.java ========= public\n                aspect Warn { declare warning : execution(* Hello.*(..)) : \"My\n                warning:\\n%%k=%k\\n%%s=%s\\n%%t=%t\\n%%i=%i\\n%%j=%j\\n%%f=%f\\n%%l=% l\\n%%a=%a\"; declare warning :\n                call(* Hello.*(..)) : \"Illegal call to %t.%i(..)\"; } To get the following output:\n                C:\\ColyerRoot\\Data\\AspectJDev\\eclipse\\workspace\\Notes\\decwtest\\Hello.java:4 Illegal call to\n                Hello.sayItToo(..) C:\\ColyerRoot\\Data\\AspectJDev\\eclipse\\workspace\\Notes\\decwtest\\Hello.java:3 My\n                warning: %k=method-execution %s=void Hello.main(java.lang.String[]) %t=Hello %i=main\n                %j=method-execution(void Hello.main(java.lang.String[]))\n                %f=C:\\ColyerRoot\\Data\\AspectJDev\\eclipse\\workspace\\Notes\\decwtest\\Hello.java %l=3\n                %a=C:\\ColyerRoot\\Data\\AspectJDev\\eclipse\\workspace\\Notes\\decwtest\\Warn.java:3\n                C:\\ColyerRoot\\Data\\AspectJDev\\eclipse\\workspace\\Notes\\decwtest\\Hello.java:8 My warning:\n                %k=method-execution %s=void Hello.sayItToo() %t=Hello %i=sayItToo %j=method-execution(void\n                Hello.sayItToo()) %f=C:\\ColyerRoot\\Data\\AspectJDev\\eclipse\\workspace\\Notes\\decwtest\\Hello.java %l=8\n                %a=C:\\ColyerRoot\\Data\\AspectJDev\\eclipse\\workspace\\Notes\\decwtest\\Warn.java:3 3 warnings The following\n                patch implements the extension (warning - based on a version of Checker.java from a while back). Index:\n                Checker.java =================================================================== RCS file:\n                /home/technology/org. aspectj/modules/weaver/src/org/aspectj/weaver/Checker.java,v retrieving revision\n                1.5 diff -u -r1.5 Checker.java --- Checker.java 12 Mar 2003 19:51:43 -0000 1.5 +++ Checker.java 19 Jul\n                2003 12:34:12 -0000 @@ -17,6 +17,7 @@ import java.util.Collections; import org.aspectj.bridge.IMessage;\n                +import org.aspectj.bridge.ISourceLocation; import org.aspectj.bridge.Message; import\n                org.aspectj.weaver.patterns.DeclareErrorOrWarning; import org.aspectj.weaver.patterns.PerClause; @@\n                -49,7 +50,7 @@ public boolean match(Shadow shadow, World world) { if (super.match(shadow, world)) {\n                world.getMessageHandler().handleMessage( - new Message(msg, + new Message(format(msg,shadow), isError ?\n                IMessage.ERROR : IMessage.WARNING, null, shadow.getSourceLocation())); @@ -63,5 +64,85 @@ } public\n                Collection getThrownExceptions() { return Collections.EMPTY_LIST; } + +// %% inserts a % character +//\n                %k inserts the joinpoint kind +// %s inserts the signature at the joinpoint +// %t inserts the name of\n                the declaring type at the joinpoint +// %i inserts the name of the identifier at the joinpoint +// %j\n                inserts a string representation of the joinpoint +// %J inserts an extended string representation of the\n                joinpoint +// %f inserts the filename where the match was found +// %l inserts the line number where the\n                match was found +// %a inserts the name of the aspect where the declare was defined + private String\n                format(String msg, Shadow shadow) { + StringBuffer ret = new StringBuffer(); + for(int i = 0; i <\n                msg.length(); i++) { + if (msg.charAt(i) != '%') { + ret.append(msg.charAt(i)); + } else { + // its a\n                substitution character + int subCharPos = i+1; + if (subCharPos < msg.length()) { + i++; // consume\n                it + substitute(ret,shadow,msg.charAt(i)); + } + } + } + return ret.toString(); + } + + /** + * @param\n                buf the buffer in which to insert the substitution + * @param shadow shadow from which to draw context\n                info + * @param c the substitution character + */ + private void substitute(StringBuffer ret, Shadow\n                shadow, char c) { + ISourceLocation loc; + switch(c) { + case '%': + ret.append('%'); + break; + case\n                'k': // kind + ret.append(shadow.getKind().getName()); + break; + case 's': +\n                ret.append(shadow.getSignature()); + break; + case 't': + ret.append(shadow.getEnclosingType()); +\n                break; + case 'i': + ret.append(shadow.getSignature().getName()); + break; + case 'j': + case 'J': +\n                ret.append(shadow.toString()); + break; + case 'f': // file name + loc = shadow.getSourceLocation(); +\n                if ((loc != null) && (loc.getSourceFile() != null)) { +\n                ret.append(loc.getSourceFile().toString()); + } + break; + case 'l': // line number + loc =\n                shadow.getSourceLocation(); + if (loc != null) { + ret.append(loc.getLine()); + } + break; + case 'a':\n                // aspect file and line number + loc = getSourceLocation(); + if ((loc != null) &&\n                (loc.getSourceFile() != null)) { + ret.append(loc.getSourceFile().toString()); + ret.append(':'); +\n                ret.append(loc.getLine()); + } + break; + default: // unknown substitution character, leave alone +\n                ret.append('%'); + ret.append(c); + } + } }\n            ","120401":"I keep getting UnresolvedType UnsupportedOperationException unhelpful message \"resolve\n                this type first,\" so I'm adding the signature to the message (without permission, hence the bug as\n                notice). throw new UnsupportedOperationException(\"unable to parameterize unresolved type: \" +\n                signature); ------------------------------- java.lang.UnsupportedOperationException at\n                org.aspectj.weaver.UnresolvedType.parameterize(UnresolvedType.java:218) at\n                org.aspectj.weaver.patterns.ExactTypePattern.parameterizeWith(ExactTypePattern.java:242) at\n                org.aspectj.weaver.patterns.TypePatternList.parameterizeWith(TypePatternList.java:195) at\n                org.aspectj.weaver.patterns.DeclareParents.parameterizeWith(DeclareParents.java:77) at\n                org.aspectj.weaver.ReferenceType.getDeclares(ReferenceType.java:484) at\n                org.aspectj.weaver.ResolvedType.collectDeclares(ResolvedType.java:523) at\n                org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers(ResolvedType.java:488) at\n                org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect(CrosscuttingMembersSet.java:60) at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addCrosscuttingStructures(AjLookupEnvironment.java:378)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addCrosscuttingStructures(AjLookupEnvironment.java:388)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.collectAllITDsAndDeclares(AjLookupEnvironment.java:314)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:168)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:301) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:315) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:230) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:185) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:163) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n                UnsupportedOperationException thrown: resolve this type first\n            ","148737":"I believe this is similar to 112880. The message and stack trace I am getting are --\n                (IllegalStateException) Can't ask to parameterize a member of non-generic type: com...object kind(raw)\n                Can't ask to parameterize a member of non-generic type: com...object kind(raw)\n                java.lang.IllegalStateException: Can't ask to parameterize a member of non-generic type: com....object\n                kind(raw) at org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:612) at\n                org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:597) at\n                org.aspectj.weaver.ReferenceType.getDeclaredMethods(ReferenceType.java:508) at\n                org.aspectj.weaver.ResolvedType$4.get(ResolvedType.java:225) at\n                org.aspectj.weaver.Iterators$3$1.hasNext(Iterators.java:118) at\n                org.aspectj.weaver.Iterators$5.hasNext(Iterators.java:171) at\n                org.aspectj.weaver.Iterators$3.hasNext(Iterators.java:128) at\n                org.aspectj.weaver.ResolvedType.lookupMember(ResolvedType.java:345) at\n                org.aspectj.weaver.ResolvedType.lookupMethod(ResolvedType.java:326) . . . The same code was able to be\n                weaved under 1.5.0. The reason why this is a major issue is 1.5.0 suffers from a StackOverflowException.\n            ","128128":"The iajc ant task doesn't failonerror anymore. The most relevant line is AjcTask.java:1256 with\n                holder.numMessages(IMessage.ERROR, false) always returning 0. The holder:MessageHandler instance\n                delegates messages to an interceptor AntMessageHandler. The AntMessageHandler is (almost) always\n                consuming the messages, leaving the MessageHandler.java:108 to return without recording any messages\n                itself. I would have liked to submit a patch with this bug report but I'm not yet sure what the correct\n                interceptor.handleMessage(message) behavior should be in this case. Note: The AntMessageHandler properly\n                reporting message priorities (\"error\" vs. \"warn\") is welcome functionality - thanks.\n            ","43194":"See the attached file VerifyBug.jar for the source files. You won't need anything else to\n                compiler and reproduce this bug: ~/bug> ls AbstractCaching.java TreeNode.java VerifyBug.jar\n                ContainerCaching.java TreeNodeFolding.java WorkspaceGroup.java ContainerLoader.java TreePanel.java\n                WorkspaceNode.java Makefile TreeWorkspace.java ~/bug> gmake /cygdrive/c/aspectj1.1.1/bin/ajc\n                -classpath \"C:\\aspectj1.1.1 \\lib\\aspectjrt.jar\" -version AspectJ Compiler 1.1.1\n                /cygdrive/c/aspectj1.1.1/bin/ajc -classpath \"C:\\aspectj1.1.1\\lib\\aspectjrt.jar\" *.java java\n                -classpath \"C:\\aspectj1.1.1\\lib\\aspectjrt.jar;.\" TreeNode java.lang.VerifyError: (class:\n                TreeNode, method: doShowAction signature: ()V) Unable to pop operand off an empty stack Exception in\n                thread \"main\" make: *** [all] Error 1\n            ","103741":"I had a project that I was compiling using Java 5 source support. I turned off java 5 support\n                but accidentally left in an @annotation pointcut in it. When recompiling, I get an error dialog\n                BCException thrown: Bad type signature: <missing> When I restart I get this in my error log, and\n                if I compile the same message. java.lang.ClassCastException: org.eclipse.core.internal.resources.Project\n                at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.<init> (AJCompilationUnit.java:118) at\n                org.eclipse.ajdt.core.AspectJCore.create(AspectJCore.java:137) at\n                org.eclipse.ajdt.core.AspectJCore.create(AspectJCore.java:38) at\n                org.eclipse.ajdt.core.model.AJProjectModel$Persistence.loadJavaElements (AJProjectModel.java:633) at\n                org.eclipse.ajdt.core.model.AJProjectModel$Persistence.loadModel (AJProjectModel.java:568) at\n                org.eclipse.ajdt.core.model.AJProjectModel.loadModel (AJProjectModel.java:136) at\n                org.eclipse.ajdt.core.model.AJModel.getModelForProject(AJModel.java:83) at\n                org.eclipse.ajdt.core.model.AJModel.isAdvised(AJModel.java:126) at\n                org.eclipse.ajdt.internal.buildconfig.ImageDecorator.decorateImage (ImageDecorator.java:207) at\n                org.eclipse.ui.internal.decorators.FullDecoratorDefinition.decorateImage\n                (FullDecoratorDefinition.java:111) at org.eclipse.ui.internal.decorators.FullImageDecoratorRunnable.run\n                (FullImageDecoratorRunnable.java:28) at org.eclipse.core.internal.runtime.InternalPlatform.run\n                (InternalPlatform.java:1044) at org.eclipse.core.runtime.Platform.run(Platform.java:783) at\n                org.eclipse.ui.internal.decorators.DecoratorManager.safeDecorateImage (DecoratorManager.java:395) at\n                org.eclipse.ui.internal.decorators.DecoratorManager.decorateImage (DecoratorManager.java:360) at\n                org.eclipse.jface.viewers.DecoratingLabelProvider.getImage (DecoratingLabelProvider.java:84) at\n                org.eclipse.jface.viewers.DecoratingLabelProvider.updateLabel (DecoratingLabelProvider.java:212) at\n                org.eclipse.jface.viewers.StructuredViewer.buildLabel (StructuredViewer.java:1855) at\n                org.eclipse.jface.viewers.TreeViewer.doUpdateItem(TreeViewer.java:228) at\n                org.eclipse.jface.viewers.AbstractTreeViewer$UpdateItemSafeRunnable.run (AbstractTreeViewer.java:85) at\n                org.eclipse.core.internal.runtime.InternalPlatform.run (InternalPlatform.java:1044) at\n                org.eclipse.core.runtime.Platform.run(Platform.java:783) at\n                org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:44) at\n                org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:148) at\n                org.eclipse.jface.viewers.AbstractTreeViewer.doUpdateItem (AbstractTreeViewer.java:621) at\n                org.eclipse.jface.viewers.StructuredViewer$UpdateItemSafeRunnable.run (StructuredViewer.java:434) at\n                org.eclipse.core.internal.runtime.InternalPlatform.run (InternalPlatform.java:1044) at\n                org.eclipse.core.runtime.Platform.run(Platform.java:783) at\n                org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:44) at\n                org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:148)\n            ","34925":"These test files crash the compiler (in fact if you just compile ConvertToUnchecked it crashes\n                it): ConvertToUnchecked.java: import java.io.IOException; // example 3 aspect ConvertToUnchecked { //\n                make all exceptions in an application unchecked; \"soft\" //declare soft: (Exception &&\n                !RuntimeException): within(com.foo.app..*); // convert IOExceptions in a package to PersistenceException\n                pointcut module() : within(test.*); // within (com.foo.framework.persistence.*); // convert exceptions\n                // within(test.*) would work to allow an immediate catch, except for // the last statement in a try\n                block // however, I suspect that would also generate inefficient code // even this might be inefficient:\n                it needs to wrap every method body in a // try ... catch block after() throwing (IOException e) :\n                within(test.*) { throw new PersistenceException(e); } declare soft: (IOException): module(); } // tested\n                by: test.ConvertToUnchecked ---- PersistenceException.java public class PersistenceException extends\n                Exception { public PersistenceException(Throwable cause) { super(cause); } } --- sample run:\n                C:\\ron\\devel\\articles\\errorHandling>ajc -1.4 ConvertToUnchecked.java Persistence Exception.java\n                java.lang.RuntimeException: unimplemented: throw new PersistenceException(e) at\n                org.aspectj.ajdt.internal.compiler.lookup.EclipseShadow.makeShadow (Ec lipseShadow.java:148) at\n                org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeShadow (E clipseFactory.java:292) at\n                org.aspectj.ajdt.internal.compiler.problem.AjProblemReporter.unhandle\n                dException(AjProblemReporter.java:67) at\n                org.eclipse.jdt.internal.compiler.flow.FlowContext.checkExceptionHand lers(FlowContext.java:249) at\n                org.eclipse.jdt.internal.compiler.ast.ThrowStatement.analyseCode (Thro wStatement.java:35) at\n                org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.analy\n                seCode(AbstractMethodDeclaration.java:106) at\n                org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode (Typ eDeclaration.java:445) at\n                org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.anal\n                yseCode(CompilationUnitDeclaration.java:76) at org.eclipse.jdt.internal.compiler.Compiler.process\n                (Compiler.java:539) at org.aspectj.ajdt.internal.compiler.AjCompiler.process (AjCompiler.java :65) at\n                org.eclipse.jdt.internal.compiler.Compiler.compile (Compiler.java:340) at\n                org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile (Ab stractImageBuilder.java:232) at\n                org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile (Ab stractImageBuilder.java:171) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager$BatchBuilder.ru n(AjBuildManager.java:656) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild (AjBu ildManager.java:139) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:55) at\n                org.aspectj.tools.ajc.Main.run(Main.java:216) at org.aspectj.tools.ajc.Main.runMain(Main.java:155) at\n                org.aspectj.tools.ajc.Main.main(Main.java:72)\n                C:\\ron\\devel\\articles\\errorHandling\\ConvertToUnchecked.java:0 Internal compiler error\n                java.lang.RuntimeException: unimplemented: throw new PersistenceException(e) at\n                org.aspectj.ajdt.internal.compiler.lookup.EclipseShadow.makeShadow (Ec lipseShadow.java:148) at\n                org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeShadow (E clipseFactory.java:292) at\n                org.aspectj.ajdt.internal.compiler.problem.AjProblemReporter.unhandle\n                dException(AjProblemReporter.java:67) at\n                org.eclipse.jdt.internal.compiler.flow.FlowContext.checkExceptionHand lers(FlowContext.java:249) at\n                org.eclipse.jdt.internal.compiler.ast.ThrowStatement.analyseCode (Thro wStatement.java:35) at\n                org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.analy\n                seCode(AbstractMethodDeclaration.java:106) at\n                org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode (Typ eDeclaration.java:445) at\n                org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.anal\n                yseCode(CompilationUnitDeclaration.java:76) at org.eclipse.jdt.internal.compiler.Compiler.process\n                (Compiler.java:539) at org.aspectj.ajdt.internal.compiler.AjCompiler.process (AjCompiler.java :65) at\n                org.eclipse.jdt.internal.compiler.Compiler.compile (Compiler.java:340) at\n                org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile (Ab stractImageBuilder.java:232) at\n                org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile (Ab stractImageBuilder.java:171) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager$BatchBuilder.ru n(AjBuildManager.java:656) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild (AjBu ildManager.java:139) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:55) at\n                org.aspectj.tools.ajc.Main.run(Main.java:216) at org.aspectj.tools.ajc.Main.runMain(Main.java:155) at\n                org.aspectj.tools.ajc.Main.main(Main.java:72) !! no source information available !! ABORT Exception\n                thrown from AspectJ 1.1rc1 This might be logged as a bug already -- find current bugs at\n                http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&component=Compiler Bugs for exceptions\n                thrown have titles File:line from the top stack, e.g., \"SomeFile.java:243\" If you don't find\n                the exception below in a bug, please add a new bug at\n                http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a\n                test program that can reproduce this exception. unimplemented: throw new PersistenceException(e)\n                unimplemented: throw new PersistenceException(e) java.lang.RuntimeException: unimplemented: throw new\n                PersistenceException(e) at org.aspectj.ajdt.internal.compiler.lookup.EclipseShadow.makeShadow (Ec\n                lipseShadow.java:148) at org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeShadow (E\n                clipseFactory.java:292) at org.aspectj.ajdt.internal.compiler.problem.AjProblemReporter.unhandle\n                dException(AjProblemReporter.java:67) at\n                org.eclipse.jdt.internal.compiler.flow.FlowContext.checkExceptionHand lers(FlowContext.java:249) at\n                org.eclipse.jdt.internal.compiler.ast.ThrowStatement.analyseCode (Thro wStatement.java:35) at\n                org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.analy\n                seCode(AbstractMethodDeclaration.java:106) at\n                org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode (Typ eDeclaration.java:445) at\n                org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.anal\n                yseCode(CompilationUnitDeclaration.java:76) at org.eclipse.jdt.internal.compiler.Compiler.process\n                (Compiler.java:539) at org.aspectj.ajdt.internal.compiler.AjCompiler.process (AjCompiler.java :65) at\n                org.eclipse.jdt.internal.compiler.Compiler.compile (Compiler.java:340) at\n                org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile (Ab stractImageBuilder.java:232) at\n                org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile (Ab stractImageBuilder.java:171) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager$BatchBuilder.ru n(AjBuildManager.java:656) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild (AjBu ildManager.java:139) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:55) at\n                org.aspectj.tools.ajc.Main.run(Main.java:216) at org.aspectj.tools.ajc.Main.runMain(Main.java:155) at\n                org.aspectj.tools.ajc.Main.main(Main.java:72) 1 fail|abort, 1 error\n            ","138143":"When developing aspects as annotations, i get a NullPointerException when saving a source file\n                which has duplicated method names. Obviously that also breaks the java code itself but it also pops up\n                an aspectj message info. Here is a sample code: @Aspect public class AspectClass{ @Pointcut(\"call(@Incoming\n                * *(..))\") public void incomingMessage() { } @Pointcut(\"call(@Activity * *(..))\") public\n                void incomingMessage() { } } The npe is the following: java.lang.NullPointerException at\n                org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.makeResolvedPointcutDefinition(EclipseSourceType.java:217)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.fillDeclaredMembers(EclipseSourceType.java:188)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.getDeclaredPointcuts(EclipseSourceType.java:250)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType.checkPointcutDeclarations(EclipseSourceType.java:267)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.resolvePointcutDeclarations(AjLookupEnvironment.java:433)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:236)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:301) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:315) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:862) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:269) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:168) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n                NullPointerException thrown: null regards Moritz Post\n            ","121616":"Encountered during a JavaPolis demo. I was using a pre-release development version. However,\n                reproducable with latest post-release development version as well. Create the following source file:\n                package banking; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Pointcut;\n                public class Main { public static void main(String[] args) { System.out.println(\"Main\"); } }\n                @Aspect class MainLogger { @Pointcut(\"execution(* main(..))\") public void log(JoinPoint\n                thisJoinPoint) { System.out.println(\"Before \" thisJoinPoint\"); } } Note that the import\n                statement for JoinPoint is lacking. Compiling this source file crahses the compiler. Adding import\n                statement for JoinPoint makes it work fine. C:\\work\\aop\\src\\workspace\\CallDebugBug>ajc -version\n                AspectJ Compiler DEVELOPMENT built on Tuesday Dec 20, 2005 at 13:58:29 GMT\n                C:\\work\\aop\\src\\workspace\\CallDebugBug>ajc -1.5 banking\\Main.java\n                C:\\work\\aop\\src\\workspace\\CallDebugBug\\banking\\Main.java [error] Internal compil er error\n                java.lang.NullPointerException at org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVi\n                sitor.buildFormalAdviceBindingsFrom(ValidateAtAspectJAnnotationsVisitor.java:417 ) at\n                org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVi\n                sitor.convertToPointcutDeclaration(ValidateAtAspectJAnnotationsVisitor.java:513) at\n                org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVi\n                sitor.visit(ValidateAtAspectJAnnotationsVisitor.java:188) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.t\n                raverse(MethodDeclaration.java:185) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.tra verse(TypeDeclaration.java:1195)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDecl\n                aration.traverse(CompilationUnitDeclaration.java:339) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.beforeAnalysing( AjCompilerAdapter.java:154) at\n                org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$before$org_asp\n                ectj_ajdt_internal_compiler_CompilerAdapter$7$db78446d(CompilerAdapter.aj:101) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compil er.java:517) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compil er.java:329) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion(AjBuildManager.java:811) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuild Manager.java:230) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBu ildManager.java:156) at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60) at\n                org.aspectj.tools.ajc.Main.run(Main.java:326) at org.aspectj.tools.ajc.Main.runMain(Main.java:240) at\n                org.aspectj.tools.ajc.Main.main(Main.java:83) (no source information available)\n                C:\\work\\aop\\src\\workspace\\CallDebugBug\\banking\\Main.java:16 [error] JoinPoint ca nnot be resolved to a\n                type public void log(JoinPoint thisJoinPoint) { ^^^^^^^\n                C:\\work\\aop\\src\\workspace\\CallDebugBug\\banking\\Main.java:17 [error] Syntax error , insert \")\"\n                to complete MethodInvocation System.out.println(\"Before \" thisJoinPoint\");\n                C:\\work\\aop\\src\\workspace\\CallDebugBug\\banking\\Main.java:17 [error] Syntax error , insert \";\"\n                to complete BlockStatements System.out.println(\"Before \" thisJoinPoint\"); ABORT Exception\n                thrown from AspectJ DEVELOPMENT This might be logged as a bug already -- find current bugs at\n                http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&component=Compiler Bugs for exceptions\n                thrown have titles File:line from the top stack, e.g., \"SomeFile.java:243\" If you don't find\n                the exception below in a bug, please add a new bug at\n                http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a\n                test program that can reproduce this exception. when validating @AspectJ annotations log when analysing\n                types defined in compilation unit C:\\work\\aop\\src\\workspace\\CallD ebugBug\\banking\\Main.java when\n                processing compilation unit C:\\work\\aop\\src\\workspace\\CallDebugBug\\banking\\ Main.java when batch\n                building with classpath: c:\\java\\jdk1.5.0_04\\jre\\lib\\ext\\dnsns.jar;c:\n                \\java\\jdk1.5.0_04\\jre\\lib\\ext\\localedata.jar;c:\\java\\jdk1.5.0_04\\jre\\lib\\ext\\sun\n                jce_provider.jar;c:\\java\\jdk1.5.0_04\\jre\\lib\\ext\\sunpkcs11.jar;c:\\java\\jdk1.5.0_\n                04\\lib\\tools.jar;c:\\java\\jdk1.5.0_04\\jre\\lib\\rt.jar;C:\\java\\aspectj\\aspectj5\\lib\n                \\aspectjrt.jar;C:\\java\\log4j\\jakarta-log4j-1.2.8\\dist\\lib\\log4j-1.2.8.jar;C:\\jav\n                a\\jess\\Jess61p5\\jess.jar;c:\\java\\j2sdkee1.3.1\\lib\\system\\cloudscape.jar;c:\\java\\\n                j2sdkee1.3.1\\lib\\system\\tools.jar;c:\\java\\j2sdkee1.3.1\\lib\\cloudscape\\RmiJdbc.ja\n                r;c:\\java\\j2sdkee1.3.1\\lib\\cloudscape\\cloudclient.jar;c:\\java\\j2sdkee1.3.1\\lib\\c\n                lasses;c:\\java\\j2sdkee1.3.1\\classes;c:\\java\\j2sdkee1.3.1\\lib\\j2ee.jar;c:\\java\\j2\n                sdkee1.3.1\\lib\\toolclasses;c:\\java\\j2sdkee1.3.1\\lib\\j2eetools.jar;c:\\java\\j2sdke\n                e1.3.1\\lib\\locale;c:\\java\\j2sdkee1.3.1\\lib\\j2ee.jar;c:\\java\\j2sdkee1.3.1\\lib\\jha\n                ll.jar;c:\\java\\j2sdkee1.3.1\\lib\\locale;c:\\java\\jdk1.5.0_04\\lib\\tools.jar;c:\\java\n                \\j2sdkee1.3.1\\lib\\jhall.jar;C:\\java\\ws\\axis\\axis-1_1\\lib\\axis.jar;C:\\java\\ws\\axi\n                s\\axis-1_1\\lib\\axis-ant.jar;C:\\java\\ws\\axis\\axis-1_1\\lib\\commons-discovery.jar;C\n                :\\java\\ws\\axis\\axis-1_1\\lib\\commons-logging.jar;C:\\java\\ws\\axis\\axis-1_1\\lib\\jax\n                rpc.jar;C:\\java\\ws\\axis\\axis-1_1\\lib\\saaj.jar;C:\\java\\ws\\axis\\axis-1_1\\lib\\log4j\n                -1.2.8.jar;C:\\java\\ws\\axis\\axis-1_1\\lib\\wsdl4j.jar;C:\\java\\concurrency\\concurren\n                cy.jar;C:\\java\\junit\\junit3.8.1\\junit.jar;.; null java.lang.NullPointerException at\n                org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVi\n                sitor.buildFormalAdviceBindingsFrom(ValidateAtAspectJAnnotationsVisitor.java:417 ) at\n                org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVi\n                sitor.convertToPointcutDeclaration(ValidateAtAspectJAnnotationsVisitor.java:513) at\n                org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVi\n                sitor.visit(ValidateAtAspectJAnnotationsVisitor.java:188) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.t\n                raverse(MethodDeclaration.java:185) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.tra verse(TypeDeclaration.java:1195)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDecl\n                aration.traverse(CompilationUnitDeclaration.java:339) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.beforeAnalysing( AjCompilerAdapter.java:154) at\n                org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$before$org_asp\n                ectj_ajdt_internal_compiler_CompilerAdapter$7$db78446d(CompilerAdapter.aj:101) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compil er.java:517) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compil er.java:329) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion(AjBuildManager.java:811) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuild Manager.java:230) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBu ildManager.java:156) at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60) at\n                org.aspectj.tools.ajc.Main.run(Main.java:326) at org.aspectj.tools.ajc.Main.runMain(Main.java:240) at\n                org.aspectj.tools.ajc.Main.main(Main.java:83) 1 fail|abort, 4 errors\n            ","115607":"This program: ---8<----- @interface I {} class Simple {} public aspect C { declare @type:\n                Simple : @I; } ---8<----- (all in a file called C.java, open with the AJ editor) when built shows\n                incorrect gutter markers, it shows a double headed arrow on Simple implying that it annotates itself -\n                rather than something outgoing from the declare statement and something incoming on the Simple type.\n            ","45489":"Some elements have the wrong kinds when a saved structure model is loaded. E.g. if I close then\n                re-open the eclipse workbench classes are shown as interface in the outline view. Also if I traverse the\n                tree with the code below I get the wrong kinds assigned to classed, interfaces, aspects and import\n                declarations. List list = StructureModelUtil.getPackagesInModel(); for(Iterator i = list.iterator();\n                i.hasNext();){ Object[] o = (Object[])i.next(); IProgramElement node = (IProgramElement)o[0]; List files\n                = StructureModelUtil.getFilesInPackage(node); for(Iterator i2 = files.iterator(); i2.hasNext();){\n                IProgramElement file = (IProgramElement)i2.next (); System.out.println(\"file \" + file.getKind\n                ().toString() + \", \" + file.getName()); boolean added2 = false; List file_children =\n                file.getChildren(); // file children can be classes, aspects or other things for(Iterator i3 =\n                file_children.iterator(); i3.hasNext();){ IProgramElement file_child = (IProgramElement)i3.next();\n                System.out.println(\"kind: \" + file_child.getKind().toString() +\", \" +\n                file_child.getName());\n            ","71878":"If you checkout the \"JarUsingProject\" project from \"org.eclipse.ajdt.test/manual\n                testing\" in the AJDT 1.1.12 tree, and look at the advised-by entries in the outline view and the\n                context menu of the gutter annotation, on Windows you get \"injar aspect: AbstractAspect.aj\",\n                but on Linux you get \"injar aspect:\n                C:\\eclipse30AJDTPluginTest\\eclipse\\workspace\\JarGeneratingProject\\src\\p1\\AbstractAspect.aj\". The\n                Windows-style path indicates the location of the original class files in the JAR file, which was clearly\n                built on Windows.\n            ","158412":"I am trying to use an @AspectJ @Pointcut in a \"normal\" AspectJ declare error\n                expression. That results in the following exception. java.lang.NullPointerException at\n                org.aspectj.weaver.patterns.ReferencePointcut.concretize1(ReferencePointcut.java:361) at\n                org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:233) at\n                org.aspectj.weaver.patterns.NotPointcut.concretize1(NotPointcut.java:100) at\n                org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:233) at\n                org.aspectj.weaver.patterns.AndPointcut.concretize1(AndPointcut.java:97) at\n                org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:233) at\n                org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:220) at\n                org.aspectj.weaver.Checker.concretize(Checker.java:45) at\n                org.aspectj.weaver.CrosscuttingMembers.addShadowMunger(CrosscuttingMembers.java:91) at\n                org.aspectj.weaver.CrosscuttingMembers.addDeclare(CrosscuttingMembers.java:122) at\n                org.aspectj.weaver.CrosscuttingMembers.addDeclares(CrosscuttingMembers.java:113) at\n                org.aspectj.weaver.CrosscuttingMembersSet.addAdviceLikeDeclares(CrosscuttingMembersSet.java:117) at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.addAdviceLikeDeclares(AjLookupEnvironment.java:382)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:245)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:301) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:315) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:887) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:244) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:199) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:170) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n                NullPointerException thrown: null\n            ","155148":"I turned on tracing for the Aj class inside of Oracle's OC4J server. In one test (not always)\n                it deadlocked. It looks like the threads are each trying to lock each other's loader. Notice that one of\n                the threads is in the toString method of the Oracle ClassLoader (perhaps another reason to prefer\n                tracing argument class names and system identity hashcodes). Here's a thread dump from Ctrl+BREAK: Found\n                one Java-level deadlock: ============================= \"WorkExecutorWorkerThread-1\": waiting\n                to lock monitor 0x003384ec (object 0x05239e48, a oracle.classloader.Po licyClassLoader), which is held\n                by \"OC4J Launcher\" \"OC4J Launcher\": waiting to lock monitor 0x0033848c (object\n                0x0554f0e8, a oracle.classloader.Po licyClassLoader), which is held by \"WorkExecutorWorkerThread-1\"\n                Java stack information for the threads listed above: ===================================================\n                \"WorkExecutorWorkerThread-1\": at\n                oracle.classloader.SearchPolicy.loadClass(SearchPolicy.java:641) - waiting to lock <0x05239e48> (a\n                oracle.classloader.PolicyClassLoader) at\n                oracle.classloader.PolicyClassLoader.askParentForClass(PolicyClassLoa der.java:1284) at\n                oracle.classloader.SearchPolicy$AskParent.getClass(SearchPolicy.java: 69) at\n                oracle.classloader.SearchSequence.getClass(SearchSequence.java:119) at\n                oracle.classloader.SearchPolicy.loadClass(SearchPolicy.java:642) - locked <0x0554f0e8> (a\n                oracle.classloader.PolicyClassLoader) at\n                oracle.classloader.PolicyClassLoader.askParentForClass(PolicyClassLoa der.java:1284) at\n                oracle.classloader.SearchPolicy$AskParent.getClass(SearchPolicy.java: 69) at\n                oracle.classloader.SearchSequence.getClass(SearchSequence.java:119) at\n                oracle.classloader.PolicyClassLoader.internalLoadClass(PolicyClassLoa der.java:1660) - locked <0x056a9ed0>\n                (a oracle.classloader.PolicyClassLoader) at\n                oracle.classloader.PolicyClassLoader.loadClass(PolicyClassLoader.java :1621) at\n                oracle.classloader.PolicyClassLoader.loadClass(PolicyClassLoader.java :1606) at\n                java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319) - locked <0x056a9ed0> (a\n                oracle.classloader.PolicyClassLoader) at\n                oracle.j2ee.ra.jms.generic.WorkConsumer.doReceive(WorkConsumer.java:9 87) at\n                oracle.j2ee.ra.jms.generic.WorkConsumer.run(WorkConsumer.java:215) - locked <0x05de2718> (a\n                oracle.j2ee.ra.jms.generic.WorkConsumer) at\n                oracle.j2ee.connector.work.WorkWrapper.runTargetWork(WorkWrapper.java :242) at\n                oracle.j2ee.connector.work.WorkWrapper.doWork(WorkWrapper.java:215) at\n                oracle.j2ee.connector.work.WorkWrapper.run(WorkWrapper.java:190) at\n                EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(PooledExec utor.java:814) at\n                java.lang.Thread.run(Thread.java:595) \"OC4J Launcher\": at\n                oracle.classloader.PolicyClassLoader.toString(PolicyClassLoader.java: 1846) - waiting to lock <0x0554f0e8>\n                (a oracle.classloader.PolicyClassLoader) at java.text.MessageFormat.subformat(MessageFormat.java:1237)\n                at java.text.MessageFormat.format(MessageFormat.java:828) at java.text.Format.format(Format.java:133) at\n                java.text.MessageFormat.format(MessageFormat.java:804) at\n                java.util.logging.Formatter.formatMessage(Formatter.java:130) - locked <0x0514e920> (a\n                java.util.logging.SimpleFormatter) at java.util.logging.SimpleFormatter.format(SimpleFormatter.java:63)\n                - locked <0x0514e920> (a java.util.logging.SimpleFormatter) at\n                java.util.logging.StreamHandler.publish(StreamHandler.java:179) - locked <0x0514a0a8> (a\n                java.util.logging.FileHandler) at java.util.logging.FileHandler.publish(FileHandler.java:555) - locked\n                <0x0514a0a8> (a java.util.logging.FileHandler) at java.util.logging.Logger.log(Logger.java:428) at\n                java.util.logging.Logger.doLog(Logger.java:450) at java.util.logging.Logger.logp(Logger.java:619) at\n                java.util.logging.Logger.entering(Logger.java:870) at\n                org.aspectj.weaver.tools.Jdk14Trace.enter(Jdk14Trace.java:32) at\n                org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:67) at\n                org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(C\n                lassPreProcessorAgentAdapter.java:55) at\n                sun.instrument.TransformerManager.transform(TransformerManager.java:1 22) at\n                sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java :155) at\n                java.lang.ClassLoader.defineClass1(Native Method) at\n                java.lang.ClassLoader.defineClass(ClassLoader.java:620) at\n                oracle.classloader.PolicyClassLoader.defineClass(PolicyClassLoader.ja va:2224) at\n                oracle.classloader.PolicyClassLoader.findLocalClass(PolicyClassLoader .java:1457) at\n                oracle.classloader.SearchPolicy$FindLocal.getClass(SearchPolicy.java: 167) at\n                oracle.classloader.SearchSequence.getClass(SearchSequence.java:119) at\n                oracle.classloader.PolicyClassLoader.internalLoadClass(PolicyClassLoa der.java:1660) - locked <0x05239e48>\n                (a oracle.classloader.PolicyClassLoader) at\n                oracle.classloader.PolicyClassLoader.loadClass(PolicyClassLoader.java :1621) at\n                oracle.classloader.PolicyClassLoader.loadClass(PolicyClassLoader.java :1606) at\n                java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319) - locked <0x05239e48> (a\n                oracle.classloader.PolicyClassLoader) at com.evermind.server.http.HttpRequestHandler.<init>(HttpRequestHandler\n                .java:97) at com.evermind.server.http.HttpConnectionListener$HttpNIOAcceptHandler.\n                getReadHandler(HttpConnectionListener.java:116) at\n                oracle.oc4j.network.ReadHandlerPool.getContextFromBackend(ReadHandler Pool.java:63) at\n                com.evermind.util.BBPool.startPool(BBPool.java:42) at\n                oracle.oc4j.network.ReadHandlerPool.register(ReadHandlerPool.java:25) - locked <0x05ec9290> (a\n                java.util.ArrayList) at oracle.oc4j.network.ServerSocketAcceptHandler.setPoolOptions(ServerSo\n                cketAcceptHandler.java:140) at com.evermind.server.http.HttpConnectionListener.setRequestHandlerPool\n                (HttpConnectionListener.java:232) at\n                com.evermind.server.http.HttpConnectionListener.initHandlers(HttpConn ectionListener.java:226) at\n                com.evermind.server.http.HttpConnectionListener.<init>(HttpConnection Listener.java:174) at\n                com.evermind.server.http.HttpServer.getListener(HttpServer.java:481) - locked <0x05ec4f88> (a\n                com.evermind.server.http.HttpServer) at\n                com.evermind.server.http.HttpServer.setSites(HttpServer.java:267) - locked <0x05ec4f88> (a\n                com.evermind.server.http.HttpServer) at\n                com.evermind.server.http.HttpServer.setConfig(HttpServer.java:180) at\n                com.evermind.server.ApplicationServer.initializeHttp(ApplicationServe r.java:2296) at\n                com.evermind.server.ApplicationServer.setConfig(ApplicationServer.jav a:944) at\n                com.evermind.server.ApplicationServerLauncher.run(ApplicationServerLa uncher.java:113) - locked <0x0530eb20>\n                (a java.lang.Object) at java.lang.Thread.run(Thread.java:595) Found 1 deadlock.\n            ","130300":"This option is redundant apart from use in AspectJ development and maintenance. It is confusing\n                to users and is a source new problems for LTW.\n            ","42539":"Given the following point cut and advice: public aspect ExceptionAspect { pointcut\n                exceptionThrower() : execution(public * ExceptionBugTest.*(..) throws Exception+); declare warning :\n                exceptionThrower() : \"throws Exception+\"; } And the to be aspected code: public class\n                ExceptionBugTest { class MyException extends Exception { } public void method1() throws Exception { }\n                public void method2() throws MyException { } } listing file default.lst: C:\\temp\\AJC\n                Bug\\ExceptionAspect.aj C:\\temp\\AJC Bug\\ExceptionBugTest.java AJC does not advise\n                ExceptionBugTest.method2(). The output from the compilation is the following: C:\\temp\\AJC Bug>ajc\n                -argfile default.lst -classpath %ASPECTJ_HOME%\\lib\\aspectjrt.jar C:\\eclipse\\workspace\\AJC\n                Bug\\ExceptionBugTest.java:11 throws Exception+ From the aspect-j mailing list, contributed by Jim\n                Hugunin: &lt;detail&gt;The bug was caused because the code for ThrowsPattern mistakenly used the\n                internal protected method TypePattern.matchesExactly instead of the external public method\n                TypePattern.matchesStatically. Because the classes were in the same package, Java's accessibility rules\n                allowed this. It would be nice if there was an easy way to specifiy that a method could only be accessed\n                from subtypes.&lt;/detail&gt;\n            ","149289":"Both AJDT (Bug 71066) and AspectJ (Bug 95516) support the generation of an aop.xml to declare\n                the set of know aspects for LTW. However if the user modifies the file to add options etc then the\n                changes can be over-written. There is a need to allow the user to provide their own configuration in a\n                separate file.\n            ","114875":"Eclipse 3.1 AJDT 1.3.0.20051102174241 package com.aspectj.test; import\n                org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Before; import\n                org.aspectj.lang.annotation.Pointcut; @Aspect public abstract class Base { @Pointcut -->Seems to be\n                the problem abstract void method(); public static void main(String args[]){ } } package\n                com.aspectj.test; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Before;\n                import org.aspectj.lang.annotation.Pointcut; @Aspect public class Sub extends Base{ @Pointcut( \"execution(*\n                com.aspectj.test.Base.main(..))\" ) void method(){}; @Before(\"method()\") public void\n                test(){ } } The code above shows java.lang.NullPointerException at\n                org.aspectj.weaver.patterns.BasicTokenSource.makeTokenSource (BasicTokenSource.java:84) at\n                org.aspectj.weaver.patterns.PatternParser.<init> (PatternParser.java:1373) at\n                org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVisitor.conv\n                ertToPointcutDeclaration(ValidateAtAspectJAnnotationsVisitor.java:493) at\n                org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVisitor.visi\n                t(ValidateAtAspectJAnnotationsVisitor.java:188) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse\n                (MethodDeclaration.java:185) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse (TypeDeclaration.java:1183)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.tr\n                averse(CompilationUnitDeclaration.java:339) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.beforeAnalysing (AjCompilerAdapter.java:154) at\n                org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$before$org_aspectj_ajdt_\n                internal_compiler_CompilerAdapter$7$db78446d(CompilerAdapter.aj:101) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process (Compiler.java:517) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile (Compiler.java:329) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation (AjBuildManager.java:759) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild (AjBuildManager.java:225) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild (AjBuildManager.java:180) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild (AjBuildManager.java:158) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile (CompilerAdapter.java:117) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run (AspectJBuildManager.java:191) The\n                syntax @Pointcut(\"\") is shown as error too. If this is not a bug then a proper message instead\n                of an exception is helpful.\n            ","77163":"The default setting for the load time weaver is (as of 1.2.1rc1) to produce weaving messages\n                rather than ignore them. I think the default should be changed to ignore them. Also, I cannot override\n                the default setting with -Daj.weaver.versose=\"False\". This is the implied syntax from\n                docs/examples/build.xml. If this has changed then build.xml should be updated. Otherwise, the weaver\n                should be fixed to use it!\n            ","125405":"To reproduce: Create a new AspectJ project, and create a new aspect: package test; public\n                aspect ATest { // main public static void main(String[] args) { } } ==== Then, write ATest<T>\n                instead of just ATest and then save. You should now get the warning: 2 only abstract aspects can have\n                type parameters ATest.aj So far so good. Now, remove the newly added \"<T>\" and save\n                again. This should happen: java.lang.IllegalStateException at\n                org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:605) at\n                org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:590) at\n                org.aspectj.weaver.ReferenceType.getDeclaredMethods(ReferenceType.java:421) at\n                org.aspectj.weaver.ResolvedType.getDeclaredAdvice(ResolvedType.java:699) at\n                org.aspectj.weaver.ResolvedType.getDeclaredShadowMungers(ResolvedType.java:736) at\n                org.aspectj.weaver.ResolvedType.collectShadowMungers(ResolvedType.java:572) at\n                org.aspectj.weaver.ResolvedType.collectCrosscuttingMembers(ResolvedType.java:501) at\n                org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect(CrosscuttingMembersSet.java:66) at\n                org.aspectj.weaver.bcel.BcelWeaver.prepareForWeave(BcelWeaver.java:439) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:283) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:178) at\n                org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:254) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:163) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n                IllegalStateException thrown: Can't ask to parameterize a member of non-generic type: test.ATest\n                kind(raw)\n            ","82752":"This bug affects ajdoc, and could affect other tools relying on the ASM.","44272":"When writing aspects with cycles in the advice precedence, get warning \"circular\n                dependency at {join point}\" -- should be \"circular advice dependency...\" or \"circular\n                advice precedences at {join point} -- reorder the advice in the aspect\". FWIW, here's an example of\n                circularity in advice precedence: ---- aspect A { pointcut crun() : execution (void run()) ; before() :\n                crun() {} after() returning : crun() {} void around() : crun() { proceed(); } } ---- See programming\n                guide for more discussion of circularity in advice precedence.\n            ","30439":"AspectJ Compiler 1.1beta4 This program: aspect Foo { pointcut p1(): execution(void f()) &&\n                cflow(execution(void f1())); pointcut p2(): execution(void f()) && cflow(execution(void f2()));\n                before(): p1() { } after(): p1() { } before(): p2() { } after(): p2() { } } class A { void f1() { f(); }\n                void f2() { f(); } void f() { } } results in these errors: circular dependency at method-execution(void\n                A.f()) circular dependency at method-execution(void A.f()) circular dependency at method-execution(void\n                A.f()) circular dependency at method-execution(void A.f()) 4 errors If I comment out any one of the four\n                pieces of advice, all the errors go away. Also, assuming that there is a valid reason for printing this\n                error sometimes, how come there's no line number? --Doug\n            ","54625":"Either fix the class file deleting etc. to work with jars, or always do a batch build when\n                working with outjars.\n            ","48990":"FastMatch, the efficient pattern matching for pointcuts on the constant pool, is currrently\n                only implemented for the within pointcut. I am planning to provide further oimplementations for other\n                pointcuts by release 1.2.\n            ","161217":"I've been playing with some aspect deployment models and got into this error during project\n                rebuild from AJDT: java.lang.NullPointerException at\n                org.aspectj.weaver.bcel.BcelAdvice.implementOn(BcelAdvice.java:199) at\n                org.aspectj.weaver.Shadow.implementMungers(Shadow.java:699) at\n                org.aspectj.weaver.Shadow.implement(Shadow.java:471) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2832) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:506) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeave ... lasses when weaving when batch building\n                BuildConfig[...] #Files=6 Here is the aspect and classes it is applied to: ----- @Aspect(\"percflow(execution(*\n                InstrumentedBean.getProperty2()))\") public class GetFieldAtAspect { @Around(\"execution(*\n                ConfigurableBean.getProperty2())\") public Object onGet(ProceedingJoinPoint jp) throws Throwable {\n                return jp.proceed(); } } ------ import org.springframework.beans.factory.InitializingBean; public class\n                InstrumentedBean implements InitializingBean, IInstrumentedBean { private ConfigurableBean\n                configurableBean; private String value; private transient String transientValue = \"aaa\";\n                public void afterPropertiesSet() throws Exception { this.configurableBean = new ConfigurableBean(); }\n                public String getProperty1() { synchronized(this) { return this.configurableBean.getProperty1(); } }\n                public String getProperty2() { synchronized(this) { return this.configurableBean.getProperty2(); } }\n                public void setValue(String value) { synchronized(this) { this.value = value; } } public Object\n                getValue() { synchronized(this) { return value; } } public Object getTransientValue() { return\n                transientValue; } public void setTransientValue(String transientValue) { this.transientValue =\n                transientValue; } } ------ import java.io.Serializable; import\n                org.springframework.beans.factory.annotation.Configurable; @Configurable public class ConfigurableBean\n                implements Serializable { private static final long serialVersionUID = 1L; private String property1;\n                private String property2; public ConfigurableBean() { } public String getProperty1() { return\n                this.property1; } public String getProperty2() { return this.property2; } public void\n                setProperty1(String property1) { this.property1 = property1; } public void setProperty2(String\n                property2) { this.property2 = property2; } }\n            ","74238":"When I used cflow pointcut for my applet, I couldn't launch the Applet.\n                java.lang.ExceptionInInitializerError at SandAspect.ajc$preClinit(SandAspect.aj) at SandAspect.<clinit>(SandAspect.aj)\n                at SandApplet.init(SandApplet.java) at sun.applet.AppletPanel.run(AppletPanel.java:353) at\n                java.lang.Thread.run(Thread.java:534) Caused by: java.security.AccessControlException: access denied\n                (java.util.Proper tyPermission aspectj.runtime.cflowstack.usethreadlocal read) at\n                java.security.AccessControlContext.checkPermission(AccessControlConte xt.java:269) at\n                java.security.AccessController.checkPermission(AccessController.java: 401) at\n                java.lang.SecurityManager.checkPermission(SecurityManager.java:524) at\n                java.lang.SecurityManager.checkPropertyAccess(SecurityManager.java:12 76) at\n                java.lang.System.getProperty(System.java:612) at\n                org.aspectj.runtime.internal.CFlowStack.selectFactoryForVMVersion(CFl owStack.java:124) at\n                org.aspectj.runtime.internal.CFlowStack.<clinit>(CFlowStack.java:59) ... 5 more It because\n                CFlowStack uses System.getProperty method with no try..catch block. Applet doesn't have permission to\n                read system property: \"aspectj.runtime.cflowstack.usethreadlocal\". workaround: modify\n                CFlowStack.java(1.5) line 123,124 like this ----- private static String\n                getSystemPropertyWithNoSecurityException( String aPropertyName, String aDefaultValue){ try{ return\n                System.getProperty(aPropertyName, aDefaultValue); } catch(java.lang.SecurityException e){ return\n                aDefaultValue; } } private static void selectFactoryForVMVersion() { String override =\n                getSystemPropertyWithNoSecurityException( \"aspectj.runtime.cflowstack.usethreadlocal\" , \"unspecified\"\n                ); ----- I think defining getSystemPropertyWithNoSecurityException(or more simple name :-)) method in\n                some utility class and using it where you call System.getProperty are better way.\n            ","113257":"I keep getting an incremental compilation error on this pointcut when I save other files (in\n                AJDT): public pointcut scope() : within(DoMonitorErrors+) || ((within(pkg1..*)|| within(pkg2..*) ||\n                within(pkg3..*)) && !within(pkg1.monitoring..*)); It is used as follows: after() throwing\n                (Throwable t) : publicMethodExec() && scope() && adviceEnabled() { ...\n                recordThrowable(t, thisJoinPointStaticPart, thisEnclosingJoinPointStaticPart); } before(Throwable t) :\n                handler(*) && args(t) && scope() && adviceEnabled() { ... recordThrowable(t,\n                thisJoinPointStaticPart, thisEnclosingJoinPointStaticPart); } The resulting incremental compilation\n                produces an error which requires a full rebuild to clear: the parameter t is not bound in [all branches\n                of] pointcut ErrorMonitor.aj aspectjSupport/src/pkg1/monitoring line 58\n            ","120909":"1. ReflectionBasedReferenceTypeDelegateTest.testCompareSubclassDelegates()\n                junit.framework.AssertionFailedError: Errors:Couldn't find void java.util.HashMap.onEntry() in the bcel\n                set Couldn't find void java.util.HashMap.onExit() in the bcel set Couldn't find void\n                java.util.HashMap.transfer0(java.util.HashMap$Entry[]) in the bcel set ? ? ? ? at\n                junit.framework.Assert.fail(Assert.java:47) ? ? ? ? at junit.framework.Assert.assertTrue(Assert.java:20)\n                ? ? ? ? at\n                org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateTest.testCompareSubclassDelegates(ReflectionBasedReferenceTypeDelegateTest.java:278)\n                ? ? ? ? at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ? ? ? ? at\n                sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64) ? ? ? ? at\n                sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ? ? ? ? at\n                java.lang.reflect.Method.invoke(Method.java:615) ? ? ? ? at\n                junit.framework.TestCase.runTest(TestCase.java:154) ? ? ? ? at\n                junit.framework.TestCase.runBare(TestCase.java:127) ? ? ? ? at\n                junit.framework.TestResult$1.protect(TestResult.java:106) ? ? ? ? at\n                junit.framework.TestResult.runProtected(TestResult.java:124) ? ? ? ? at\n                junit.framework.TestResult.run(TestResult.java:109) ? ? ? ? at\n                junit.framework.TestCase.run(TestCase.java:118) ? ? ? ? at\n                junit.framework.TestSuite.runTest(TestSuite.java:208) ? ? ? ? at\n                junit.framework.TestSuite.run(TestSuite.java:203) ? ? ? ? at\n                junit.framework.TestSuite.runTest(TestSuite.java:208) ? ? ? ? at\n                junit.framework.TestSuite.run(TestSuite.java:203) ? ? ? ? at\n                junit.framework.TestSuite.runTest(TestSuite.java:208) ? ? ? ? at\n                junit.framework.TestSuite.run(TestSuite.java:203) ? ? ? ? at\n                junit.framework.TestSuite.runTest(TestSuite.java:208) ? ? ? ? at\n                junit.framework.TestSuite.run(TestSuite.java:203) ? ? ? ? at\n                org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) ? ? ? ? at\n                org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) ? ? ? ? at\n                org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) This failure\n                occures because when we compare BeclWorld with ReflectionWorld we are still picking up the default (Sun)\n                version of HashMap in JRE15_LIB for BCEL. The solution is to create both worlds with the same class\n                loader. 2. Ajc150Tests.testModifierOverrides() junit.framework.AssertionFailedError: Expecting output:\n                execution(void pr119749.C.m()): execMe[@pr119749$Me()] execution(void pr119749.C.m()): execEx But found\n                output: execution(void pr119749.C.m()): execMe[@pr119749.Me()] execution(void pr119749.C.m()): execEx\n                First difference is on line 1 ? ? ? ? at junit.framework.Assert.fail(Assert.java:47) ? ? ? ? at\n                org.aspectj.testing.OutputSpec.matchAgainst(OutputSpec.java:58) ? ? ? ? at\n                org.aspectj.testing.RunSpec.execute(RunSpec.java:61) ? ? ? ? at\n                org.aspectj.testing.AjcTest.runTest(AjcTest.java:68) ? ? ? ? at\n                org.aspectj.testing.XMLBasedAjcTestCase.runTest(XMLBasedAjcTestCase.java:111) ? ? ? ? at\n                org.aspectj.systemtest.ajc150.Ajc150Tests.testModifierOverrides(Ajc150Tests.java:852) ? ? ? ? at\n                sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ? ? ? ? at\n                sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64) ? ? ? ? at\n                sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ? ? ? ? at\n                java.lang.reflect.Method.invoke(Method.java:615) ? ? ? ? at\n                junit.framework.TestCase.runTest(TestCase.java:154) ? ? ? ? at\n                junit.framework.TestCase.runBare(TestCase.java:127) ? ? ? ? at\n                junit.framework.TestResult$1.protect(TestResult.java:106) ? ? ? ? at\n                junit.framework.TestResult.runProtected(TestResult.java:124) ? ? ? ? at\n                junit.framework.TestResult.run(TestResult.java:109) ? ? ? ? at\n                junit.framework.TestCase.run(TestCase.java:118) ? ? ? ? at\n                junit.framework.TestSuite.runTest(TestSuite.java:208) ? ? ? ? at\n                junit.framework.TestSuite.run(TestSuite.java:203) ? ? ? ? at\n                junit.framework.TestSuite.runTest(TestSuite.java:208) ? ? ? ? at\n                junit.framework.TestSuite.run(TestSuite.java:203) ? ? ? ? at\n                junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) ? ? ? ? at\n                junit.extensions.TestSetup$1.protect(TestSetup.java:19) ? ? ? ? at\n                junit.framework.TestResult.runProtected(TestResult.java:124) ? ? ? ? at\n                junit.extensions.TestSetup.run(TestSetup.java:23) ? ? ? ? at\n                junit.framework.TestSuite.runTest(TestSuite.java:208) ? ? ? ? at\n                junit.framework.TestSuite.run(TestSuite.java:203) ? ? ? ? at\n                junit.framework.TestSuite.runTest(TestSuite.java:208) ? ? ? ? at\n                junit.framework.TestSuite.run(TestSuite.java:203) ? ? ? ? at\n                junit.framework.TestSuite.runTest(TestSuite.java:208) ? ? ? ? at\n                junit.framework.TestSuite.run(TestSuite.java:203) ? ? ? ? at\n                junit.framework.TestSuite.runTest(TestSuite.java:208) ? ? ? ? at\n                junit.framework.TestSuite.run(TestSuite.java:203) ? ? ? ? at\n                org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) ? ? ? ? at\n                org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) ? ? ? ? at\n                org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) This failure is\n                due a difference between JDKs in the implementation of toString() for annotations.\n            ","130837":"java.lang.NullPointerException at\n                org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVisitor.buildFormalAdviceBindingsFrom(ValidateAtAspectJAnnotationsVisitor.java:417)\n                at\n                org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVisitor.resolveAndSetPointcut(ValidateAtAspectJAnnotationsVisitor.java:364)\n                at\n                org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVisitor.validateAdvice(ValidateAtAspectJAnnotationsVisitor.java:336)\n                at\n                org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVisitor.visit(ValidateAtAspectJAnnotationsVisitor.java:186)\n                at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:185)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1195)\n                at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:339)\n                at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.beforeAnalysing(AjCompilerAdapter.java:154) at\n                org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$before$org_aspectj_ajdt_internal_compiler_CompilerAdapter$7$db78446d(CompilerAdapter.aj:101)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:517) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:824) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:234) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:189) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:164) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n                NullPointerException thrown: null\n            ","80916":"With a project containing one class and one aspect: public class HelloClass { public static\n                void main(String[] args) { new HelloClass().sayHello(); } public void sayHello() { System.out.println(\"Hello\");\n                } } public aspect A1 { pointcut test() : get(* System.out); declare warning : test() &&\n                !within(A1) : \"test warning\"; pointcut anotherTest() : execution(void\n                HelloClass.sayHello(..)); after() returning : anotherTest() { System.out.println(\"returning....\");\n                } } The following is returned from the structure model: asmRelMap entry: HelloClass.sayHello(),\n                relationship: advised by, target: A1.afterReturning(): anotherTest.. asmRelMap entry:\n                A1.afterReturning(): anotherTest.., relationship: uses pointcut, target: A1.anotherTest() asmRelMap\n                entry: A1.afterReturning(): anotherTest.., relationship: advises, target: HelloClass.sayHello()\n                asmRelMap entry: HelloClass.sayHello(), relationship: advised by, target: A1.afterReturning():\n                anotherTest.. asmRelMap entry: A1.anotherTest(), relationship: pointcut used by, target:\n                A1.afterReturning(): anotherTest.. asmRelMap entry: A1.declare warning: \"test warning\",\n                relationship: matched by, target: HelloClass.sayHello() In other words, the model is saying that there\n                are two entries the same: asmRelMap entry: HelloClass.sayHello(), relationship: advised by, target:\n                A1.afterReturning(): anotherTest.. whereas one of these should be the \"matches declare\"\n                relationship relating to the declare warning. Changing the aspect to be: public aspect A1 { pointcut\n                test() : get(* System.out); declare warning : test() && !within(A1) : \"test warning\";\n                pointcut anotherTest() : execution(void HelloClass.sayHello(..)); after() returning : anotherTest() {\n                System.out.println(\"returning....\"); } after() returning : test() { System.out.println(\"returning\n                again!\"); } } means that the IRelationshipMap does now contain the \"matches declare\"\n                relationship. This is all with AspectJ 5 M1.\n            ","133307":"I have the following construct: public interface TestIF<T extends TestIF> {} public class\n                TestClass {} public aspect TestAspect { declare parents: TestClass implements TestIF<TestClass>; }\n                The later aspect does not compile, although public class TestClass implements TestIF<TestClass> {\n                } is a valid class.\n            ","125480":"An aop.xml aspect cannot inherit an abstract method but it should inherit one that has already\n                been made concrete in a super-aspect. At the moment an abstract method \"test()\" causes the\n                follow error during LTW: info AspectJ Weaver Version DEVELOPMENT built on info register classloader\n                org.aspectj.weaver.loadtime.WeavingURLClassLoader info using\n                /C:/temp/ajcSandbox/ajcTest6462.tmp/META-INF/aop.xml error Abstract pointcut 'test' not configured: <concrete-aspect\n                name='TraceHelloWorld' extends='ConcreteMethods'/> in aop.xml warning register definition failed --\n                (AbortException) Abstract pointcut 'test' not configured: <concrete-aspect name='TraceHelloWorld'\n                extends='ConcreteMethods'/> in aop.xml Abstract pointcut 'test' not configured: <concrete-aspect\n                name='TraceHelloWorld' extends='ConcreteMethods'/> in aop.xml Message: error Abstract pointcut 'test'\n                not configured: <concrete-aspect name='TraceHelloWorld' extends='ConcreteMethods'/> in aop.xml\n                org.aspectj.bridge.AbortException: Abstract pointcut 'test' not configured: <concrete-aspect\n                name='TraceHelloWorld' extends='ConcreteMethods'/> in aop.xml\n            ","98320":"import java.util.*; class C { Set<String> simple_local; Set<Set<String>>\n                nested_local; } aspect Inter_Type_Injector { Set<String> C.simple_intertype; Set<Set<String>>\n                C.nested_intertype; public void test() { Set<String> simple_local = new C().simple_local; // works\n                Set<String> simple_intertype = new C().simple_intertype; // works Set<Set<String>>\n                nested_local = new C().nested_local; // works Set<Set<String>> nested_intertype = new\n                C().nested_intertype; // fails } } zipfile classpath entry does not exist:\n                /opt/sun-jdk-1.5.0/jre/lib/i18n.jar zipfile classpath entry does not exist:\n                /opt/sun-jdk-1.5.0/jre/lib/sunrsasign.jar directory classpath entry does not exist:\n                /opt/sun-jdk-1.5.0/jre/classes compiling /home/user/sgelin3/shared/dev/java/ajc/Bug.java\n                /home/user/sgelin3/shared/dev/java/ajc/Bug.java:16 [error] Type mismatch: cannot convert from Set<Set<E>>\n                to Set<Set<String>> Set<Set<String>> nested_intertype = new\n                C().nested_intertype; // fails ^^^^^^^^^^^ 1 error\n            ","147701":"This is my code: @Aspect public class TestBeanAdvice { public static class\n                ApplicationContextAwareImpl implements ApplicationContextAware { public void\n                setApplicationContext(ApplicationContext applicationContext) throws BeansException { } }\n                @DeclareParents(value=\"org.springframework.beans.TestBean\",\n                defaultImpl=TestBeanAdvice.ApplicationContextAwareImpl.class) private ApplicationContextAware\n                implementationInterface; } If I use this advice with the load-time weaver I get this exception:\n                org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'testBean'\n                defined in class path resource [org/springframework/context/support/testbean-context.xml]: Instantiation\n                of bean failed; nested exception is java.lang.NoClassDefFoundError: BeansException Caused by:\n                java.lang.NoClassDefFoundError: BeansException at java.lang.Class.getDeclaredMethods0(Native Method) at\n                java.lang.Class.privateGetDeclaredMethods(Class.java:2365) at\n                java.lang.Class.getDeclaredMethods(Class.java:1763) at\n                java.beans.Introspector$1.run(Introspector.java:1265) at\n                java.security.AccessController.doPrivileged(Native Method) at\n                java.beans.Introspector.getPublicDeclaredMethods(Introspector.java:1263) at\n                java.beans.Introspector.getTargetMethodInfo(Introspector.java:1129) at\n                java.beans.Introspector.getBeanInfo(Introspector.java:387) at\n                java.beans.Introspector.getBeanInfo(Introspector.java:159) at\n                org.springframework.beans.CachedIntrospectionResults.<init>(CachedIntrospectionResults.java:142)\n                at org.springframework.beans.CachedIntrospectionResults.forClass(CachedIntrospectionResults.java:83) at\n                org.springframework.beans.BeanWrapperImpl.setIntrospectionClass(BeanWrapperImpl.java:238) at\n                org.springframework.beans.BeanWrapperImpl.setWrappedInstance(BeanWrapperImpl.java:196) at\n                org.springframework.beans.BeanWrapperImpl.setWrappedInstance(BeanWrapperImpl.java:179) at\n                org.springframework.beans.BeanWrapperImpl.<init>(BeanWrapperImpl.java:132) at\n                org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:502)\n                at\n                org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:356)\n                at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:256)\n                at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:167)\n                at\n                org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:253)\n                at\n                org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:332)\n                at\n                org.springframework.context.support.AspectJClassLoaderWithGenericApplicationContextTests.testCreateApplicationContextWithBeanFactoryAndAspectJClassLoader(AspectJClassLoaderWithGenericApplicationContextTests.java:63)\n                at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at\n                sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at\n                sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at\n                com.intellij.rt.execution.junit2.JUnitStarter.main(JUnitStarter.java:32) at\n                sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at\n                sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at\n                sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at\n                com.intellij.rt.execution.application.AppMain.main(AppMain.java:90) (wrapped in a Spring exception, I'm\n                using the container) After doing some debugging I found the exception appears when loading the\n                dependencies of the TestBean class, so I guess there's a problem with the way the parent is declared in\n                the bytecode of TestBean. You can find the TestBean class here:\n                http://fisheye1.cenqua.com/browse/~raw,r=1.28/springframework/spring/test/org/springframework/beans/TestBean.java\n                Steven\n            ","37739":"The following code produces an Xlint:unresolvableMember warning: class A { A(Class type) {} A()\n                { this(String.class); } } class B { public void test() { } public void test2() { test(); } } aspect C {\n                void around() : (call (void B.test()) && withincode (void B.test2())) { proceed(); } } The\n                warning text is: Warning.java:22 can not resolve this member: void A.<catch>(java.lang.ClassNotFoundException)\n                [Xlint:unresolvableMember] Line 22 is the line in the aspect that says \"withincode\". If I\n                comment out the aspect, the warning goes away. Also, if I comment out A's default constructor, it goes\n                away. The \"String.class\" seems to have something to do with the warning. I can reproduce this\n                with 1.1rc1 and 1.1rc2.\n            ","117189":"This patch to the ClassLoaderWeavingAdaptor adds two optimizations when enabled is false for\n                the adaptor: it immediately returns false for accept and it also avoids the overhead of constructing a\n                weaver or world. It also contains commented out code that was letting me improve performance by loading\n                reflective proxies instead of creating BCEL objects for a resolution loader (which is currently broken\n                since reflective proxies now require a ReflectionWorld...)\n            ","123612":"Given the following code: ------------------------------------------------- public aspect A {\n                declare @type : C : @MyAnnotation; } @interface MyAnnotation { } class C { }\n                ------------------------------------------------- if you comment out the declare @type statement and do\n                an incremental build, then the following ArrayIndexOutOfBoundsException occurs:\n                java.lang.ArrayIndexOutOfBoundsException: 0 at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareAnnotations(AjLookupEnvironment.java:754)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:571)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveIntertypes(AjLookupEnvironment.java:357)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:209)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:301) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:315) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:254) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:163) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191) This is\n                against the latest code in HEAD.\n            ","126328":"If there are > 1000 jars on the combination of classpath, aspectpath, and inpath, it is\n                possible for a ZipFile to be closed and not successfully reopened before trying to read from it again.\n            ","80249":"Currently, the order in which you specify types when passing them to the compiler can affect\n                how they are woven: For example, if we have class A and class B extends A - Also, an aspect that\n                'declare parents: A+ implements Serializable' then depending on whether we see A first, we may or may\n                not make B serializable. The fix is that when we weave a type, we first weave its supertype then its\n                superinterfaces (if they were also passed to the compiler). The problematic construct is declare parents\n                - so we only process the types in a special order if there are declare parents around. Also, because we\n                can't currently do decp when binary weaving, the order processing logic is only being put into the\n                source weaving pipeline.\n            ","128744":"LTW doesn't work using JRE1.4 in Eclipse now I want to support JRE1.4 when LTW. I defined a\n                aop.xml file in application META-INF path, it works fine using JRE1.4 in command-line, aop.xml file is\n                used when LTW, the command as below: \"D:\\work\\BTM\\eclipse\n                3.1.1\\eclipse-SDK-3.1.1-win32\\eclipse-1.4.2\\jre\\bin\\java\" -classpath \"C:\\aspectj1.5\\lib\\aspectjweaver.jar\"\n                \"-Djava.system.class.loader=org.aspectj.weaver.loadtime.WeavingURLClassLoader\" \"-Daj.class.path=D:\\work\\BTM\\eclipse\n                3.1.1\\jre1.4.2\\myTest;C:\\aspectj1.5\\doc\\examples\\armtest\\jar\\btm-deps-e3.1.jar;C:\\aspectj1.5\\doc\\examples\\armtest\\jar\\btm-rt.jar\"\n                Hello but it doesn't work in Eclipse, I added upper command to VM arguments, it can't find aop.xml,\n                because if I changed aop.xml to be wrong, there is no any error when execute the application in Eclipse\n                , but there will be error when execute it in command-line, based on this point, I think that aop.xml\n                didn't be used in Eclipse, I also tried to add \"-Daj.aspect.path=D:\\work\\BTM\\eclipse\n                3.1.1\\jre1.4.2\\myTest\", but it is still. so I want to confirm if AspectJ only supports command-line\n                for JRE1.4? doesn't support Eclipse for JRE1.4? BTW, my Eclipse env: eclipse 3.1.1 +\n                ajdt_1.3_for_eclipse_3.1 + Sun JDK 1.4.2. I also tried to use eclipse 3.1.2, but this problem is still\n                existed.\n            ","150671":"When an aspect has a declare error statement involving a pointcut that captures the setting of\n                a volatile field, a compilation error is not produced. This bug can be reproduced as follows. Consider\n                the following class: class A { private volatile int state; public void foo() { state = 0; } } Now\n                consider this aspect: aspect FSM { declare error: set(* A.state): \"Changing state\"; } The\n                setting of the state field in method foo() does not result in a compilation error as expected. I\n                originally noticed this bug when using AJDT 1.4 with Eclipse 3.2. However this has been reproduced and\n                confirmed with the aspectj 1.5.2 compiler.\n            ","42993":"The file AspectBug.java: public aspect AspectBug extends AbstractCaching\n                perthis(execution(ContainerLoader+.new(..))) { declare parents: ContainerDescriptor implements\n                AbstractCaching.Key; protected pointcut loadExecutions( Key key ): ContainerLoader.containerLoads( *,\n                key ); } abstract aspect AbstractCaching { interface Key {} protected abstract pointcut\n                loadExecutions(Key key); } class Key { } class ContainerDescriptor { } class ActiveContainer { } class\n                ContainerLoader { public ActiveContainer createContainer(ContainerDescriptor c) { return null; } public\n                pointcut containerLoads(ContainerLoader loader, ContainerDescriptor containerDesc ): this(loader) &&\n                args(containerDesc) && execution(ActiveContainer ContainerLoader.createContainer\n                (ContainerDescriptor)); } First, here are the versions of AspectJ I'm using (this is a bash shell under\n                cygwin on Windows XP): ~> CLASSPATH='C:\\aspectj1.0\\lib\\aspectjrt.jar' /cygdrive/c/aspectj1.0/bin/ajc\n                - version ajc version 1.0.6 (built Jul 24, 2002 6:21 PM PST) running on java 1.4.1_02 ~>\n                CLASSPATH='C:\\aspectj1.1\\lib\\aspectjrt.jar' /cygdrive/c/aspectj1.1/bin/ajc - version AspectJ Compiler\n                1.1.0 ~> CLASSPATH='C:\\aspectj1.1.1rc1 \\lib\\aspectjrt.jar' /cygdrive/c/aspectj1.1.1rc1/bin/ajc\n                -version AspectJ Compiler 1.1.1rc1 ~> CLASSPATH='C:\\aspectj1.1.1 \\lib\\aspectjrt.jar'\n                /cygdrive/c/aspectj1.1.1/bin/ajc -version AspectJ Compiler 1.1.1 For all four of these compilers, I give\n                them the AspectBug.java file (which is attached): ~> CLASSPATH='C:\\aspectj1.0\\lib\\aspectjrt.jar'\n                /cygdrive/c/aspectj1.0/bin/ajc AspectBug.java ~> CLASSPATH='C:\\aspectj1.1\\lib\\aspectjrt.jar'\n                /cygdrive/c/aspectj1.1/bin/ajc AspectBug.java ~> CLASSPATH='C:\\aspectj1.1.1rc1 \\lib\\aspectjrt.jar'\n                /cygdrive/c/aspectj1.1.1rc1/bin/ajc AspectBug.java ~> CLASSPATH='C:\\aspectj1.1.1 \\lib\\aspectjrt.jar'\n                /cygdrive/c/aspectj1.1.1/bin/ajc AspectBug.java C:\\Documents and Settings\\Macneil\n                Shonle\\AspectBug.java:7 incompatible type, expected ContainerDescriptor found\n                BindingTypePattern(AbstractCaching$Key, 0) 1 error As you can see, only the final run (with the Sept 11\n                build of ajc) do we see the \"incompatible type\" error. If this is not a regression but a\n                desirable result, how should the code be ported?\n            ","38131":"I am using 1.1rc1. This is a regression since rc1 and a deviation from javac. I am guessing\n                this may have to do something with change in the underlying Eclipse compiler. Create a class in a\n                subpackage such as: package subpackage; public class Test { public static void main(String[] args) {\n                System.out.println(\"Hello\"); } } Then compile using following command: > ajc\n                subpackage\\Test.java You will see a directory \"subpackage\" created under the existing \"subpackage\"\n                directory. The test.class is then put in subpackage\\subpackage directory. This means running java\n                command results in Exception in thread \"main\" java.lang.NoClassDefFoundError: subpackage/Test\n                Running either of the following command fixes the problem: > ajc -d . subpackage\\Test.java or >\n                javac subpackage\\Test.java No big deal, really. But it will be nice to have same behavior as javac.\n            ","108118":"ensure that @SuppressAJWarnings are indeed suppressed during pointcut operations. This requires\n                wrapping major pointcut operations with calls to Lint from the associated advice.\n            ","100195":"AspectJ version: 1.2.1 (also observed in aspectj-DEVELOPMENT) java version \"1.4.2_07\"\n                When debugging java code woven with an \"around\" advice with proceed, it looks like the\n                LocalVariableTable information gets lost during the weaving. Example code: // Foo.java public class Foo\n                { private String myString = \"A String\"; public static void main(String[] args) { new\n                Foo().foo(); } private void foo() { String myLocal = myString; System.out.println(myLocal); //\n                breakpoint here } } // Test.aj aspect Test { void around() : ( execution(* Foo.foo(..) ) ) {\n                System.out.println(\"before\"); proceed(); System.out.println(\"after\"); } } We\n                compiled with ajc 1.2.1: ajc -g -preserveAllLocals -sourceroots . When running Foo in the Eclipse 3.1.0\n                debugger and setting a breakpoint at the \"System.out.println(myLocal);\" line, the debugger\n                \"Variables\" window is empty. Also, disassembling with javap shows that the LocalVariableTable\n                is empty in the generated foo_aroundBody0 method : > javap -c -l -s -private Foo private static final\n                void foo_aroundBody0(Foo); Signature: (LFoo;)V Code: 0: aload_0 1: getfield #15; //Field\n                myString:Ljava/lang/String; 4: astore_1 5: aload_1 6: ldc #30; //String X 8: invokevirtual #36; //Method\n                java/lang/String.endsWith: (Ljava/lang/String;)Z 11: ifeq 27 14: ldc #38; //String local1 16: astore_3\n                17: getstatic #44; //Field java/lang/System.out:Ljava/io/PrintStream; 20: aload_3 21: invokevirtual #50;\n                //Method java/io/PrintStream.println: (Ljava/lang/String;)V 24: goto 37 27: ldc #52; //String local2 29:\n                astore_3 30: getstatic #44; //Field java/lang/System.out:Ljava/io/PrintStream; 33: aload_3 34:\n                invokevirtual #50; //Method java/io/PrintStream.println: (Ljava/lang/String;)V 37: return\n                LineNumberTable: line 7: 0 line 8: 5 line 9: 14 line 10: 17 line 12: 27 line 13: 30 line 15: 37\n            ","51929":"A java.lang.VerifyError is thrown at runtime complaining about 'Bad access to protected data'\n                when advice, on a sub-aspect, that calls a protected method, on the super-aspect, is woven into a class.\n                However another call to the same method woven into the same class but due to advice declared in the\n                super-aspect works fine. The aspects were woven into precompiled (by sun's 1.4 javac) classes. The\n                verify error occurs under both sun's 1.4 and blackdowns 1.3 VMs, and presumably all VMs. Workaround:\n                Making the protected method public fixes the verify error. A test case is available in CVS:\n                tests/bugs/protectedvf/... tests/ajcTestFailing.xml\n            ","69459":"Using Introduction it is possible to hide instance methods by static methods. Example: class\n                Super { public void m(){}; } class Sub {} aspect A { public static void Sub.m(){} } Acccording to the\n                Java Language Specification this is not allowed. Is this behaviour desired ?? It is also possible to\n                override static methods by instance methods, wich causes a compile time error in java.\n            ","125475":"I get this error: C:\\temp\\ajcSandbox\\ajcTest27856.tmp\\TestEmptyPointcutAtAspect.java:8:0::0\n                Method annotated with @Pointcut() for abstract pointcut must be abstract when compiling this aspect with\n                ajc (it's fine with javac): @Aspect public class TestEmptyPointcutAtAspect { @Pointcut(\"\")\n                protected void scope () {} }\n            ","58681":"ajc should emit the available -X options on -help or -X request (the latter like java) to get\n                more traffic and feedback on the experimental options.\n            ","131933":"import java.util.List; public aspect Slide71 { before(): GenericType<String>.foo() {}\n                before(): GenericType<MyList>.foo() {} //before(): GenericType.foo() {} } class GenericType<T>\n                { public pointcut foo(): execution(* T.*(..)); } that programs gives: (because MyList is not a known\n                type) java.lang.ClassCastException at\n                org.aspectj.weaver.patterns.TypePattern.resolveExactType(TypePattern.java:193) at\n                org.aspectj.weaver.patterns.ReferencePointcut.resolveBindings(ReferencePointcut.java:130) at\n                org.aspectj.weaver.patterns.Pointcut.resolve(Pointcut.java:194) at\n                org.aspectj.ajdt.internal.compiler.ast.PointcutDesignator.finishResolveTypes(PointcutDesignator.java:84)\n                at\n                org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration.resolveStatements(AdviceDeclaration.java:118)\n                at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:400)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1088)\n                at org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.resolve(AspectDeclaration.java:116) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1137) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:305)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:514) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:843) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:268) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:170) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n                ClassCastException thrown: org.aspectj.weaver.patterns.WildTypePattern\n            ","131932":"import java.util.List; public aspect Slide74 { public X Bar<X>.getFirst() { return\n                lts.get(0); } static class Bar<T> { List<T> lts; } } in AJDT, this program incorrectly shows\n                the relationship from the TYPE to the Bar class rather than from the ITD to the Bar class.\n            ","132349":"Using the 1.5 compiler from the 20th of December or Eclipse with the AJDT plugin\n                1.5.0.20051220093604 to compile the following code: public class TopLevelType<E> { public static\n                class NestedType {} } aspect SomeAspect { public void TopLevelType.NestedType.someMethod() { } } results\n                in: C:\\Dokumente und Einstellungen\\Michi\\Eigene Dateien\\Temp\\tmp\\TopLevelType.java [error] Internal\n                compiler error java.lang.IllegalStateException: Use generic type, not parameterized type at\n                org.aspectj.weaver.ResolvedTypeMunger.<init>(ResolvedTypeMunger.java:69) at\n                org.aspectj.weaver.NewMethodTypeMunger.<init>(NewMethodTypeMunger.java:28) at\n                org.aspectj.ajdt.internal.compiler.ast.InterTypeMethodDeclaration.build(InterTypeMethodDeclaration.java:197)\n                at\n                org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTypeAndPerClause(AspectDeclaration.java:1066)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildInterTypeAndPerClause(AjLookupEnvironment.java:442)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.collectAllITDsAndDeclares(AjLookupEnvironment.java:326)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:168)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:301) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:315) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:230) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:156) at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60) at\n                org.aspectj.tools.ajc.Main.run(Main.java:326) at org.aspectj.tools.ajc.Main.runMain(Main.java:240) at\n                org.aspectj.tools.ajc.Main.main(Main.java:83) (no source information available) ABORT Exception thrown\n                from AspectJ 1.5.0 This might be logged as a bug already -- find current bugs at\n                http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&component=Compiler Bugs for exceptions\n                thrown have titles File:line from the top stack, e.g., \"SomeFile.java:243\" If you don't find\n                the exception below in a bug, please add a new bug at\n                http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a\n                test program that can reproduce this exception. Use generic type, not parameterized type when collecting\n                itds and declares SomeAspect when completing type bindings when batch building with classpath:\n                C:\\Programme\\Java\\jre1.5.0_06\\lib\\ext\\dnsns.jar;C:\\Programme\\Java\\jre1.5.0_06\\lib\\ext\\localedata.jar;C:\\Programme\\Java\\jre1.5.0_06\\lib\\ext\\sunjce_provider.jar;C:\\Programme\\Java\\jre1.5.0_06\\lib\\ext\\sunpkcs11.jar;C:\\Programme\\Java\\aspectj1.5\\lib\\aspectjrt.jar;\n                Use generic type, not parameterized type java.lang.IllegalStateException: Use generic type, not\n                parameterized type at org.aspectj.weaver.ResolvedTypeMunger.<init>(ResolvedTypeMunger.java:69) at\n                org.aspectj.weaver.NewMethodTypeMunger.<init>(NewMethodTypeMunger.java:28) at\n                org.aspectj.ajdt.internal.compiler.ast.InterTypeMethodDeclaration.build(InterTypeMethodDeclaration.java:197)\n                at\n                org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTypeAndPerClause(AspectDeclaration.java:1066)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildInterTypeAndPerClause(AjLookupEnvironment.java:442)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.collectAllITDsAndDeclares(AjLookupEnvironment.java:326)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:168)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:301) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:315) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:811) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:230) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:156) at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60) at\n                org.aspectj.tools.ajc.Main.run(Main.java:326) at org.aspectj.tools.ajc.Main.runMain(Main.java:240) at\n                org.aspectj.tools.ajc.Main.main(Main.java:83) 1 fail|abort, 1 error\n            ","96371":"AspectJ 5 load-time weaving in CVS HEAD isn't loading aop.xml files properly from a jar file\n                without specifying the global -D flag. The following patch fixes the problem for me so I can load\n                aop.xml files from jars on the classpath without a global flag: ClassLoaderWeavingAdaptor.java:109: -\n                Enumeration xmls = loader.getResources(\"/META-INF/aop.xml\"); + Enumeration xmls =\n                loader.getResources(\"META-INF/aop.xml\"); I.e., getResources doesn't work with a leading\n                separator, at least not on the Sun VM or JRockIt on Windows. Writing a unit test for this would require\n                significant changes to the loadtime module, so I wrote a standalone test of the API: public class\n                TestApi extends TestCase { public void testLoadResource() throws Exception { URL urlList[] = { new URL (\"file:testsrc/org/aspectj/weaver/loadtime/test/sample.jar\")\n                }; ClassLoader loader = new URLClassLoader(urlList); Enumeration xmls = loader.getResources(\"META-INF/aop.xml\");\n                //this version fails: //Enumeration xmls = loader.getResources(\"/META-INF/aop.xml\");\n                assertTrue(xmls.hasMoreElements()); } }\n            ","76096":"The example below generates a compiler error, on both Linux and Windows. The error occurs for\n                ajdt (eclipse) as well. The compiler error: $ ajc -version > AspectJ Compiler 1.2 built on Friday May\n                21, 2004 at > 15:06:22 GMT > $ ajc ConcreteClassA.java > error can't find type $Local$ >\n                > /home/marin/tests/ConcreteClassA.java:18 error Class > must implement the inherited abstract\n                method > InterfaceA.a2() > InterfaceA a = new AbstractClassA() { > ^^^^^^^^^^^^^ > > 2\n                errors > -------- > The example (in ConcreteClassA.java): interface InterfaceA { public void a1();\n                public void a2(); } abstract class AbstractClassA implements InterfaceA { public void a1() {\n                System.out.println(\"AbstractClassA.a()\"); } } public class ConcreteClassA extends\n                AbstractClassA { public void someMethod() { InterfaceA a = new AbstractClassA() { }; } } aspect\n                IntroAspectA { public void AbstractClassA.a2() { System.out.println(\"AbstractClassA.a2() from\n                IntroAspectA\"); } } ------------ If you comment out the body of someMethod() (the anonymous class),\n                the code compiles without errors.\n            ","136707":"The iajc ant task should produce a summary of what it is doing, like the javac task does:\n                [javac] Compiling 189 source files to C:\\project\\classes\n            ","117296":"Hi, This code is a form of \"Curiously Recurring Template Pattern\" public class\n                PropertySupport<T extends PropertySupport<T>> { } My AJDT project does not accept this\n                though my JDK 5.0 ECLIPSE project does. java.lang.StackOverflowError at\n                org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding(EclipseFactory.java:197) at\n                org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding(EclipseFactory.java:281) at\n                org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding(EclipseFactory.java:281) Thanks,\n                Mohan\n            ","119353":"I am running into a problem in load-time weaving when I use reflection delegates because the\n                weaver is generating an incorrect bridge method when I perform an inter-type declaration on\n                Struts.ActionServlet for the init method. On investigation, the BCEL world is recognizing this as an\n                overriding method, because its version of getDeclaredMethods is returning the declared methods for all\n                ancestor superclasses. However, the reflection world is returning only the declared methods for this one\n                class. It therefore appears that the weaver expects getDeclaredMethods to return all of them (making the\n                name quite misleading). I think previously the method was being implemented inconsistently between 1.5\n                reflection and <1.5 reflection delegates. But it looks like it needs to be handled consistently to\n                include all superclass methods. However, I don?t know what other places (e.g., the MAP) are really\n                expecting getDeclaredMethods and its siblings to behave like Java reflection's version? I started work\n                on adding a getAllDeclaredMethods method to ReferenceType and delegates, as an alternative to provide\n                the weaver the ability to check method overriding as in this case, but it's a little bit involved and I\n                wanted to flag the issue first. Here's a test that fails and illustrates the issue: Index:\n                ReflectionBasedReferenceTypeDelegateTest.java\n                =================================================================== RCS file:\n                /home/technology/org.aspectj/modules/weaver/testsrc/org/aspectj/weaver/reflect/ReflectionBasedReferenceTypeDelegateTest.java,v\n                retrieving revision 1.5 diff -u -r1.5 ReflectionBasedReferenceTypeDelegateTest.java ---\n                ReflectionBasedReferenceTypeDelegateTest.java 28 Nov 2005 17:44:40 -0000 1.5 +++\n                ReflectionBasedReferenceTypeDelegateTest.java 6 Dec 2005 04:11:41 -0000 @@ -238,6 +238,18 @@ assertTrue(\"Superclass\n                for Map generic type should be Object but was \"+rt2,rt2.equals(UnresolvedType.OBJECT)); } + public\n                void testCompareSubclassDelegates() { + world.setBehaveInJava5Way(true); + + BcelWorld bcelWorld = new\n                BcelWorld(); + bcelWorld.setBehaveInJava5Way(true); + UnresolvedType javaUtilHashMap =\n                UnresolvedType.forName(\"java.util.HashMap\"); + ReferenceType rawType =\n                (ReferenceType)bcelWorld.resolve(javaUtilHashMap ); + + ReferenceType rawReflectType =\n                (ReferenceType)world.resolve(javaUtilHashMap ); +\n                assertEquals(rawType.getDelegate().getDeclaredMethods().length,\n                rawReflectType.getDelegate().getDeclaredMethods().length); + } + // todo: array of int protected void\n                setUp() throws Exception { This results in: junit.framework.AssertionFailedError: expected:<41>\n                but was:<29> at junit.framework.Assert.fail(Assert.java:47) at\n                junit.framework.Assert.failNotEquals(Assert.java:282) at\n                junit.framework.Assert.assertEquals(Assert.java:64) at\n                junit.framework.Assert.assertEquals(Assert.java:201) at\n                junit.framework.Assert.assertEquals(Assert.java:207) at\n                org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateTest.testCompareSubclassDelegates(ReflectionBasedReferenceTypeDelegateTest.java:250)\n                at java.lang.reflect.Method.invoke(Native Method) at junit.framework.TestCase.runTest(TestCase.java:154)\n                at junit.framework.TestCase.runBare(TestCase.java:127) at\n                junit.framework.TestResult$1.protect(TestResult.java:106) at\n                junit.framework.TestResult.runProtected(TestResult.java:124) at\n                junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118)\n                at junit.framework.TestSuite.runTest(TestSuite.java:208) at\n                junit.framework.TestSuite.run(TestSuite.java:203) at\n                org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) at\n                org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) at\n                org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\n            ","59895":"NPE when updating an aspect in incremental mode. Find test case in incremental/full-rebuild.\n                AjBuildManager.java:208 finally clause runs after every iteration: ret = !handler.hasErrors(); handler =\n                null; But at AjBuildManager.java:124, handler is only set if there is not a complete rebuild: if\n                (!canIncremental && !batch) { // retry as batch? return doBuild(buildConfig, baseHandler, true);\n                } this.handler = ... Since result is set by return doBuild..), could say if (null != handler) { ret =\n                !handler.hasErrors(); } (Seems to have been introduced in a month ago in 1.44. Our test coverage of\n                incremental mode is awful.)\n            ","114343":"Hi guys! I've downloaded DEVELOPMENT-20051029200407. There is some issue that I think is still\n                open. Take a look at the example: Java Code: ---------- public class Test1 { Set<Integer> intsSet;\n                public Set<Integer> foo() { return intsSet; } } public class Test2 { Set<Double> dSet;\n                public Set<Double> foo() { return dSet; } } Aspect: ------- public privileged aspect TestAspect {\n                pointcut gettingMemberCollection(Test t) : target(t) && get(!public Set<Number+> com.*.*)\n                && !within(TestAspect); Set around(Test t) : gettingMemberCollection(t) { Set s = proceed(t);\n                return s; } } As you can see, I would like to replace access to member Set of something which derives\n                from Number. But the problem is that around advice is stricted to return exact type of the member, and\n                I'm getting the same error as earlier. incompatible return type applying to field-get(java.util.Set\n                com.mprv.secsph.Test.intsSet) incompatible return type applying to field-get(java.util.Set\n                com.mprv.secsph.Test.dSet) In the M2 I just declared the advice this way and it worked fine. May be now,\n                you should allow to declare the advice this way: Set<? extends Number> around(Test t) :\n                gettingMemberCollection(t) { Set s = proceed(t); return s; } Thanks! Misha.\n            ","135068":"I get \"VerifyError: Incompatible object argument for function call\" error when using\n                LTW with @Aspect stype aspects. Interestingly enough, LTW works as expected with equivalent .aj style\n                aspect. Compile time weaving works with both aspect styles. Tested on Linux with AspectJ 1.5.0, 1.5.1\n                and DEVELOPMENT-20060404163823 and SUN 1.5.0_06 and IBM 1.5.0SR1 JVMs. I will attach example project\n                shortly.\n            ","128618":"The zip file I am about to attach contains two AspectJ project, one depending on the other. If\n                you make a small change to MainClass.java in 'Test Project' and save you will see a strange warning in\n                that class - \"advice defined in ras.FFDC has not been applied [Xlint:adviceDidNotMatch]\". If\n                you do a full build the warning goes away. Note that the error would be on line 36 if there were 36\n                lines in the class, which relates to a line in the FFDC aspect that contains advice.\n            ","132591":"See also bug #57666 which is related (but has to do with manifests): I have a META-INF/aop.xml\n                file in my aspectpath and another one in the source path. That shouldn't even be a duplicate, because\n                the aspectpath resource should NOT be copied to output at all. In AspectJ build: 1.5.1.20060309143651 I\n                am now getting: java.util.zip.ZipException at\n                java.util.zip.ZipOutputStream.putNextEntry(ZipOutputStream.java:163) at\n                java.util.jar.JarOutputStream.putNextEntry(JarOutputStream.java:90) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.writeOutxmlFile(AjBuildManager.java:549) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:320) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:163) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n                ZipException thrown: duplicate entry: META-INF/aop.xml\n            ","64331":"I've got an java.lang.NullPointerException while running the aspectJ 1.2 compiler. That's the\n                stack trace: [iajc] If you don't find the exception below in a bug, please add a new bug [iajc] at\n                http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ [iajc] To make the bug a priority, please\n                include a test program [iajc] that can reproduce this exception. [iajc] null [iajc]\n                java.lang.NullPointerException [iajc] at\n                org.aspectj.ajdt.internal.compiler.WeaverMessageHandler.buildSeeAlsoProblems(WeaverMessageHandler.java:172)\n                [iajc] at\n                org.aspectj.ajdt.internal.compiler.WeaverMessageHandler.handleMessage(WeaverMessageHandler.java:100)\n                [iajc] at org.aspectj.weaver.ResolvedTypeX.checkInterTypeMungers(ResolvedTypeX.java:989) [iajc] at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:716) [iajc] at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:689) [iajc] at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:615) [iajc] at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:563) [iajc] at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:239) [iajc] at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:114) [iajc]\n                at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:376) [iajc] at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:601) [iajc]\n                at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:160) [iajc] at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:94) [iajc] at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:102) [iajc] at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:53) [iajc] at\n                org.aspectj.tools.ajc.Main.run(Main.java:280) [iajc] at\n                org.aspectj.tools.ajc.Main.runMain(Main.java:217) [iajc] at\n                org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM(AjcTask.java:1157) [iajc] at\n                org.aspectj.tools.ant.taskdefs.AjcTask.execute(AjcTask.java:954) [iajc] at\n                org.apache.tools.ant.Task.perform(Task.java:341) [iajc] at\n                org.apache.tools.ant.taskdefs.Sequential.execute(Sequential.java:117) [iajc] at\n                org.apache.tools.ant.Task.perform(Task.java:341) [iajc] at\n                net.sf.antcontrib.logic.IfTask.execute(Unknown Source) [iajc] at\n                sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [iajc] at\n                sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) [iajc] at\n                sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) [iajc] at\n                java.lang.reflect.Method.invoke(Method.java:324) [iajc] at\n                org.apache.tools.ant.TaskAdapter.execute(TaskAdapter.java:147) [iajc] at\n                org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:193) [iajc] at\n                org.apache.tools.ant.Task.perform(Task.java:341) [iajc] at\n                org.apache.tools.ant.Target.execute(Target.java:309) [iajc] at\n                org.apache.tools.ant.Target.performTasks(Target.java:336) [iajc] at\n                org.apache.tools.ant.Project.executeTarget(Project.java:1339) [iajc] at\n                org.apache.tools.ant.Project.executeTargets(Project.java:1255) [iajc] at\n                org.apache.tools.ant.Main.runBuild(Main.java:609) [iajc] at\n                org.apache.tools.ant.Main.start(Main.java:196) [iajc] at org.apache.tools.ant.Main.main(Main.java:235)\n                [if] Error in class net.sf.antcontrib.logic.IfTask Sorry, i have no simple test case for that problem...\n            ","138219":"A pointcut expression for a per-clause fails to resolve if it contains any reference pointcuts\n                referring to pointcut expressions defined in other types. (Even if that is indirectly, through a local\n                named pointcut).\n            ","95517":"docs says ajc provides LTW things, but that one does not at all go thru aop.xml lookups and so\n                on Needs to be removed or made consistent in some way\n            ","43033":"This must be caused by the fix to concretization... Input sources: package base; public\n                abstract aspect ExceptionHandling { public abstract pointcut scope(); declare soft: Exception: scope();\n                } package model; import base.ExceptionHandling; public aspect ModelExceptionHandling extends\n                ExceptionHandling { public pointcut scope() : within(*); protected RuntimeException\n                convertCheckedException(Throwable t) { return new RuntimeException(t.getMessage(), t } Compiler output:\n                C:\\eclipse\\workspace\\atrack>ajc -d debug @narrow.lst java.lang.NullPointerException at\n                org.aspectj.weaver.patterns.ReferencePointcut.concretize1 (ReferencePo intcut.java:243) at\n                org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:127) at\n                org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:110) at\n                org.aspectj.weaver.CrosscuttingMembers.addDeclare (CrosscuttingMembers .java:111) at\n                org.aspectj.weaver.CrosscuttingMembers.addDeclares (CrosscuttingMember s.java:92) at\n                org.aspectj.weaver.ResolvedTypeX.collectCrosscuttingMembers (ResolvedT ypeX.java:332) at\n                org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect (Crosscut tingMembersSet.java:50) at\n                org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTy\n                peAndPerClause(AspectDeclaration.java:754) at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildIn\n                terTypeAndPerClause(AjLookupEnvironment.java:124) at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.complet\n                eTypeBindings(AjLookupEnvironment.java:91) at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile\n                (Compiler.ja va:310) at org.eclipse.jdt.internal.compiler.Compiler.compile (Compiler.java:324) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion(AjBuildManager.java:373) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild (AjBuild Manager.java:125) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild (AjBu ildManager.java:70) at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:99) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:53) at\n                org.aspectj.tools.ajc.Main.run(Main.java:217) at org.aspectj.tools.ajc.Main.runMain(Main.java:155) at\n                org.aspectj.tools.ajc.Main.main(Main.java:72)\n                C:\\eclipse\\workspace\\atrack\\src\\org\\atrack\\model\\error\\impl\\ModelExceptionHandl i ng.java:0 Internal\n                compiler error java.lang.NullPointerException at\n                org.aspectj.weaver.patterns.ReferencePointcut.concretize1 (ReferencePo intcut.java:243) at\n                org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:127) at\n                org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:110) at\n                org.aspectj.weaver.CrosscuttingMembers.addDeclare (CrosscuttingMembers .java:111) at\n                org.aspectj.weaver.CrosscuttingMembers.addDeclares (CrosscuttingMember s.java:92) at\n                org.aspectj.weaver.ResolvedTypeX.collectCrosscuttingMembers (ResolvedT ypeX.java:332) at\n                org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect (Crosscut tingMembersSet.java:50) at\n                org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTy\n                peAndPerClause(AspectDeclaration.java:754) at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildIn\n                terTypeAndPerClause(AjLookupEnvironment.java:124) at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.complet\n                eTypeBindings(AjLookupEnvironment.java:91) at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile\n                (Compiler.ja va:310) at org.eclipse.jdt.internal.compiler.Compiler.compile (Compiler.java:324) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion(AjBuildManager.java:373) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild (AjBuild Manager.java:125) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild (AjBu ildManager.java:70) at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:99) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:53) at\n                org.aspectj.tools.ajc.Main.run(Main.java:217) at org.aspectj.tools.ajc.Main.runMain(Main.java:155) at\n                org.aspectj.tools.ajc.Main.main(Main.java:72) !! no source information available !!\n                C:\\eclipse\\workspace\\atrack\\src\\org\\atrack\\model\\error\\impl\\ModelExceptionHandl i ng.java:23 Unmatched\n                bracket return new RuntimeException(t.getMessage(), t ^ ABORT Exception thrown from AspectJ DEVELOPMENT\n                This might be logged as a bug already -- find current bugs at\n                http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&component=Compiler Bugs for exceptions\n                thrown have titles File:line from the top stack, e.g., \"SomeFile.java:243\" If you don't find\n                the exception below in a bug, please add a new bug at\n                http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a\n                test program that can reproduce this exception. null java.lang.NullPointerException at\n                org.aspectj.weaver.patterns.ReferencePointcut.concretize1 (ReferencePo intcut.java:243) at\n                org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:127) at\n                org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:110) at\n                org.aspectj.weaver.CrosscuttingMembers.addDeclare (CrosscuttingMembers .java:111) at\n                org.aspectj.weaver.CrosscuttingMembers.addDeclares (CrosscuttingMember s.java:92) at\n                org.aspectj.weaver.ResolvedTypeX.collectCrosscuttingMembers (ResolvedT ypeX.java:332) at\n                org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect (Crosscut tingMembersSet.java:50) at\n                org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTy\n                peAndPerClause(AspectDeclaration.java:754) at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildIn\n                terTypeAndPerClause(AjLookupEnvironment.java:124) at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.complet\n                eTypeBindings(AjLookupEnvironment.java:91) at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile\n                (Compiler.ja va:310) at org.eclipse.jdt.internal.compiler.Compiler.compile (Compiler.java:324) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion(AjBuildManager.java:373) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild (AjBuild Manager.java:125) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild (AjBu ildManager.java:70) at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:99) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:53) at\n                org.aspectj.tools.ajc.Main.run(Main.java:217) at org.aspectj.tools.ajc.Main.runMain(Main.java:155) at\n                org.aspectj.tools.ajc.Main.main(Main.java:72) 1 fail|abort, 2 errors C:\\eclipse\\workspace\\atrack>cd\n                \\devel\\test\\excHandling\\c1 C:\\devel\\test\\excHandling\\c1>ajc base\\ExceptionHandling.java\n                model\\ModelExceptio nHandling.java java.lang.NullPointerException at\n                org.aspectj.weaver.patterns.ReferencePointcut.concretize1 (ReferencePo intcut.java:243) at\n                org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:127) at\n                org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:110) at\n                org.aspectj.weaver.CrosscuttingMembers.addDeclare (CrosscuttingMembers .java:111) at\n                org.aspectj.weaver.CrosscuttingMembers.addDeclares (CrosscuttingMember s.java:92) at\n                org.aspectj.weaver.ResolvedTypeX.collectCrosscuttingMembers (ResolvedT ypeX.java:332) at\n                org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect (Crosscut tingMembersSet.java:50) at\n                org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTy\n                peAndPerClause(AspectDeclaration.java:754) at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildIn\n                terTypeAndPerClause(AjLookupEnvironment.java:124) at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.complet\n                eTypeBindings(AjLookupEnvironment.java:91) at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile\n                (Compiler.ja va:310) at org.eclipse.jdt.internal.compiler.Compiler.compile (Compiler.java:324) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion(AjBuildManager.java:373) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild (AjBuild Manager.java:125) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild (AjBu ildManager.java:70) at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:99) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:53) at\n                org.aspectj.tools.ajc.Main.run(Main.java:217) at org.aspectj.tools.ajc.Main.runMain(Main.java:155) at\n                org.aspectj.tools.ajc.Main.main(Main.java:72)\n                C:\\devel\\test\\excHandling\\c1\\model\\ModelExceptionHandling.java:0 Internal compil er error\n                java.lang.NullPointerException at org.aspectj.weaver.patterns.ReferencePointcut.concretize1 (ReferencePo\n                intcut.java:243) at org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:127) at\n                org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:110) at\n                org.aspectj.weaver.CrosscuttingMembers.addDeclare (CrosscuttingMembers .java:111) at\n                org.aspectj.weaver.CrosscuttingMembers.addDeclares (CrosscuttingMember s.java:92) at\n                org.aspectj.weaver.ResolvedTypeX.collectCrosscuttingMembers (ResolvedT ypeX.java:332) at\n                org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect (Crosscut tingMembersSet.java:50) at\n                org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTy\n                peAndPerClause(AspectDeclaration.java:754) at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildIn\n                terTypeAndPerClause(AjLookupEnvironment.java:124) at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.complet\n                eTypeBindings(AjLookupEnvironment.java:91) at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile\n                (Compiler.ja va:310) at org.eclipse.jdt.internal.compiler.Compiler.compile (Compiler.java:324) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion(AjBuildManager.java:373) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild (AjBuild Manager.java:125) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild (AjBu ildManager.java:70) at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:99) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:53) at\n                org.aspectj.tools.ajc.Main.run(Main.java:217) at org.aspectj.tools.ajc.Main.runMain(Main.java:155) at\n                org.aspectj.tools.ajc.Main.main(Main.java:72) !! no source information available !!\n                C:\\devel\\test\\excHandling\\c1\\model\\ModelExceptionHandling.java:9 Unmatched brack et return new\n                RuntimeException(t.getMessage(), t ^ ABORT Exception thrown from AspectJ DEVELOPMENT This might be\n                logged as a bug already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&component=Compiler\n                Bugs for exceptions thrown have titles File:line from the top stack, e.g., \"SomeFile.java:243\"\n                If you don't find the exception below in a bug, please add a new bug at\n                http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a\n                test program that can reproduce this exception. null java.lang.NullPointerException at\n                org.aspectj.weaver.patterns.ReferencePointcut.concretize1 (ReferencePo intcut.java:243) at\n                org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:127) at\n                org.aspectj.weaver.patterns.Pointcut.concretize(Pointcut.java:110) at\n                org.aspectj.weaver.CrosscuttingMembers.addDeclare (CrosscuttingMembers .java:111) at\n                org.aspectj.weaver.CrosscuttingMembers.addDeclares (CrosscuttingMember s.java:92) at\n                org.aspectj.weaver.ResolvedTypeX.collectCrosscuttingMembers (ResolvedT ypeX.java:332) at\n                org.aspectj.weaver.CrosscuttingMembersSet.addOrReplaceAspect (Crosscut tingMembersSet.java:50) at\n                org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration.buildInterTy\n                peAndPerClause(AspectDeclaration.java:754) at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.buildIn\n                terTypeAndPerClause(AjLookupEnvironment.java:124) at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.complet\n                eTypeBindings(AjLookupEnvironment.java:91) at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile\n                (Compiler.ja va:310) at org.eclipse.jdt.internal.compiler.Compiler.compile (Compiler.java:324) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilat ion(AjBuildManager.java:373) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild (AjBuild Manager.java:125) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild (AjBu ildManager.java:70) at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:99) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:53) at\n                org.aspectj.tools.ajc.Main.run(Main.java:217) at org.aspectj.tools.ajc.Main.runMain(Main.java:155) at\n                org.aspectj.tools.ajc.Main.main(Main.java:72) 1 fail|abort, 2 errors\n            ","47754":"the attached example throws this at class load time. please note that this bug results in a\n                different exception when happens in a different setup, and when the class is loaded by JBoss. (more\n                cryptic, talking about generic class format error) Exception in thread \"main\"\n                java.lang.ClassFormatError: com/netvisor/nvsr/client/InvalidByteCodeBug$Test$ITest (Illegal method\n                modifiers: 0x409) at java.lang.ClassLoader.defineClass0(Native Method) at\n                java.lang.ClassLoader.defineClass(ClassLoader.java:537) at\n                java.security.SecureClassLoader.defineClass(SecureClassLoader.java: 123) at\n                java.net.URLClassLoader.defineClass(URLClassLoader.java:251) at\n                java.net.URLClassLoader.access$100(URLClassLoader.java:55) at\n                java.net.URLClassLoader$1.run(URLClassLoader.java:194) at\n                java.security.AccessController.doPrivileged(Native Method) at\n                java.net.URLClassLoader.findClass(URLClassLoader.java:187) at\n                java.lang.ClassLoader.loadClass(ClassLoader.java:289) at\n                sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:274) at\n                java.lang.ClassLoader.loadClass(ClassLoader.java:235) at\n                java.lang.ClassLoader.loadClassInternal(ClassLoader.java:302) at\n                java.lang.ClassLoader.defineClass0(Native Method) at\n                java.lang.ClassLoader.defineClass(ClassLoader.java:537) at\n                java.security.SecureClassLoader.defineClass(SecureClassLoader.java: 123) at\n                java.net.URLClassLoader.defineClass(URLClassLoader.java:251) at\n                java.net.URLClassLoader.access$100(URLClassLoader.java:55) at\n                java.net.URLClassLoader$1.run(URLClassLoader.java:194) at\n                java.security.AccessController.doPrivileged(Native Method) at\n                java.net.URLClassLoader.findClass(URLClassLoader.java:187) at\n                java.lang.ClassLoader.loadClass(ClassLoader.java:289) at\n                sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:274) at\n                java.lang.ClassLoader.loadClass(ClassLoader.java:235) at\n                java.lang.ClassLoader.loadClassInternal(ClassLoader.java:302) at\n                com.netvisor.nvsr.client.InvalidByteCodeBug.run(InvalidByteCodeBug. java:15) at\n                com.netvisor.nvsr.client.InvalidByteCodeBug.main(InvalidByteCodeBug. java:8)\n            ","158624":"OK, not sure what to report here or what info you need, but here's the set up, message, and\n                erroreous class. I don't understand the errors from the compiler enough to parse down the erroneous file\n                to something that contains only the bug, but I could if direction were given. Here's my set up: Eclipse\n                SDK Version: 3.2.0 Build id: M20060629-1905 With AJDT: Eclipse AspectJ Development Tools Version:\n                1.4.1.200608141223 AspectJ version: 1.5.3.200608210848 Here's the bug dump from the compiler inside\n                Eclipse: java.lang.UnsupportedOperationException at\n                org.aspectj.weaver.UnresolvedType.parameterize(UnresolvedType.java:221) at\n                org.aspectj.weaver.ResolvedMemberImpl.parameterize(ResolvedMemberImpl.java:680) at\n                org.aspectj.weaver.ResolvedMemberImpl.parameterize(ResolvedMemberImpl.java:690) at\n                org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:643) at\n                org.aspectj.weaver.ResolvedMemberImpl.parameterizedWith(ResolvedMemberImpl.java:597) at\n                org.aspectj.weaver.ReferenceType.getDeclaredMethods(ReferenceType.java:508) at\n                org.aspectj.weaver.ResolvedType$4.get(ResolvedType.java:226) at\n                org.aspectj.weaver.Iterators$3$1.hasNext(Iterators.java:118) at\n                org.aspectj.weaver.Iterators$5.hasNext(Iterators.java:171) at\n                org.aspectj.weaver.Iterators$3.hasNext(Iterators.java:128) at\n                org.aspectj.weaver.ResolvedType.lookupMember(ResolvedType.java:346) at\n                org.aspectj.weaver.ResolvedType.lookupMethod(ResolvedType.java:327) at\n                org.aspectj.weaver.World.resolve(World.java:523) at\n                org.aspectj.weaver.MemberImpl.resolve(MemberImpl.java:93) at\n                org.aspectj.weaver.JoinPointSignatureIterator.addSignaturesUpToFirstDefiningMember(JoinPointSignatureIterator.java:109)\n                at org.aspectj.weaver.JoinPointSignatureIterator.<init>(JoinPointSignatureIterator.java:51) at\n                org.aspectj.weaver.MemberImpl.getJoinPointSignatures(MemberImpl.java:943) at\n                org.aspectj.weaver.patterns.SignaturePattern.matches(SignaturePattern.java:286) at\n                org.aspectj.weaver.patterns.KindedPointcut.matchInternal(KindedPointcut.java:106) at\n                org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:146) at\n                org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:51) at\n                org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:146) at\n                org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:75) at\n                org.aspectj.weaver.Advice.match(Advice.java:112) at\n                org.aspectj.weaver.bcel.BcelAdvice.match(BcelAdvice.java:117) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2806) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.matchInvokeInstruction(BcelClassWeaver.java:2768) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2506) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2332) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:494) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:119) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1606) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1557) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1335) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1155) at\n                org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries(AjPipeliningCompilerAdapter.java:455)\n                at\n                org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving(AjPipeliningCompilerAdapter.java:392)\n                at\n                org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing(AjPipeliningCompilerAdapter.java:380)\n                at\n                org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184(CompilerAdapter.aj:98)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:533) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:892) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:246) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:165) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191) trouble\n                in: public class com.wec.lib.util.test.SyncValueTest extends junit.framework.TestCase: private\n                com.wec.lib.util.test.SyncValueTest$SyncInteger a private\n                com.wec.lib.util.test.SyncValueTest$SyncInteger b private\n                com.wec.lib.util.test.SyncValueTest$SyncInteger c private\n                com.wec.lib.util.test.SyncValueTest$SyncInteger d private\n                com.wec.lib.util.test.SyncValueTest$SyncInteger e public void <init>(): ALOAD_0 //\n                Lcom/wec/lib/util/test/SyncValueTest; this (line 17) INVOKESPECIAL junit.framework.TestCase.<init>\n                ()V constructor-execution(void com.wec.lib.util.test.SyncValueTest.<init>()) | ALOAD_0 //\n                Lcom/wec/lib/util/test/SyncValueTest; this (line 27) | NEW\n                com.wec.lib.util.test.SyncValueTest$SyncInteger | DUP | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest;\n                this | ICONST_1 | INVOKESPECIAL com.wec.lib.util.test.SyncValueTest$SyncInteger.<init>\n                (Lcom/wec/lib/util/test/SyncValueTest;I)V | PUTFIELD com.wec.lib.util.test.SyncValueTest.a\n                Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest;\n                this (line 28) | NEW com.wec.lib.util.test.SyncValueTest$SyncInteger | DUP | ALOAD_0 //\n                Lcom/wec/lib/util/test/SyncValueTest; this | ICONST_2 | INVOKESPECIAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.<init> (Lcom/wec/lib/util/test/SyncValueTest;I)V |\n                PUTFIELD com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; |\n                ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this (line 29) | NEW\n                com.wec.lib.util.test.SyncValueTest$SyncInteger | DUP | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest;\n                this | ICONST_3 | INVOKESPECIAL com.wec.lib.util.test.SyncValueTest$SyncInteger.<init>\n                (Lcom/wec/lib/util/test/SyncValueTest;I)V | PUTFIELD com.wec.lib.util.test.SyncValueTest.c\n                Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest;\n                this (line 30) | NEW com.wec.lib.util.test.SyncValueTest$SyncInteger | DUP | ALOAD_0 //\n                Lcom/wec/lib/util/test/SyncValueTest; this | ICONST_4 | INVOKESPECIAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.<init> (Lcom/wec/lib/util/test/SyncValueTest;I)V |\n                PUTFIELD com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; |\n                ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this (line 31) | NEW\n                com.wec.lib.util.test.SyncValueTest$SyncInteger | DUP | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest;\n                this | ICONST_5 | INVOKESPECIAL com.wec.lib.util.test.SyncValueTest$SyncInteger.<init>\n                (Lcom/wec/lib/util/test/SyncValueTest;I)V | PUTFIELD com.wec.lib.util.test.SyncValueTest.e\n                Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | RETURN (line 17) constructor-execution(void\n                com.wec.lib.util.test.SyncValueTest.<init>()) end public void <init>() public void\n                testSyncValueGroup() org.aspectj.weaver.MethodDeclarationLineNumber: 39:1035 : method-execution(void\n                com.wec.lib.util.test.SyncValueTest.testSyncValueGroup()) | ALOAD_0 //\n                Lcom/wec/lib/util/test/SyncValueTest; this (line 42) | GETFIELD com.wec.lib.util.test.SyncValueTest.a\n                Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ICONST_1 | ANEWARRAY com.wec.lib.util.SyncValueGroup\n                | DUP | ICONST_0 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD\n                com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | AASTORE |\n                method-call(void\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.link(com.wec.lib.util.SyncValueGroup[])) | |\n                INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.link ([Lcom/wec/lib/util/SyncValueGroup;)V\n                | method-call(void\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.link(com.wec.lib.util.SyncValueGroup[])) | ALOAD_0 //\n                Lcom/wec/lib/util/test/SyncValueTest; this (line 43) | GETFIELD com.wec.lib.util.test.SyncValueTest.a\n                Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | ALOAD_0 //\n                Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.b\n                Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | IF_ACMPNE L0 | ICONST_1\n                | GOTO L1 | L0: ICONST_0 | L1: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V |\n                ICONST_1 (line 44) | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD\n                com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | CHECKCAST\n                java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue ()I | IF_ICMPNE L2 | ICONST_1 | GOTO L3 |\n                L2: ICONST_0 | L3: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V | ALOAD_0 //\n                Lcom/wec/lib/util/test/SyncValueTest; this (line 45) | GETFIELD com.wec.lib.util.test.SyncValueTest.b\n                Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ICONST_2 | INVOKESTATIC java.lang.Integer.valueOf\n                (I)Ljava/lang/Integer; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue\n                (Ljava/lang/Object;)V | ICONST_2 (line 46) | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this |\n                GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; |\n                INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | CHECKCAST\n                java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue ()I | IF_ICMPNE L4 | ICONST_1 | GOTO L5 |\n                L4: ICONST_0 | L5: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V | ALOAD_0 //\n                Lcom/wec/lib/util/test/SyncValueTest; this (line 47) | GETFIELD com.wec.lib.util.test.SyncValueTest.b\n                Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ICONST_1 | ANEWARRAY com.wec.lib.util.SyncValueGroup\n                | DUP | ICONST_0 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD\n                com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | AASTORE |\n                INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.link ([Lcom/wec/lib/util/SyncValueGroup;)V\n                | ICONST_2 (line 48) | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD\n                com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | CHECKCAST\n                java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue ()I | IF_ICMPNE L6 | ICONST_1 | GOTO L7 |\n                L6: ICONST_0 | L7: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V | ALOAD_0 //\n                Lcom/wec/lib/util/test/SyncValueTest; this (line 49) | GETFIELD com.wec.lib.util.test.SyncValueTest.c\n                Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ICONST_3 | INVOKESTATIC java.lang.Integer.valueOf\n                (I)Ljava/lang/Integer; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue\n                (Ljava/lang/Object;)V | ICONST_3 (line 50) | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this |\n                GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; |\n                INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | CHECKCAST\n                java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue ()I | IF_ICMPNE L8 | ICONST_1 | GOTO L9 |\n                L8: ICONST_0 | L9: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V | ICONST_3 (line 51)\n                | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.b\n                Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | CHECKCAST\n                java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue ()I | IF_ICMPNE L10 | ICONST_1 | GOTO L11 |\n                L10: ICONST_0 | L11: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V | ALOAD_0 //\n                Lcom/wec/lib/util/test/SyncValueTest; this (line 52) | GETFIELD com.wec.lib.util.test.SyncValueTest.a\n                Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ICONST_4 | INVOKESTATIC java.lang.Integer.valueOf\n                (I)Ljava/lang/Integer; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue\n                (Ljava/lang/Object;)V | ICONST_4 (line 53) | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this |\n                GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; |\n                INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | CHECKCAST\n                java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue ()I | IF_ICMPNE L12 | ICONST_1 | GOTO L13 |\n                L12: ICONST_0 | L13: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V | ICONST_4 (line\n                54) | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD\n                com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | CHECKCAST\n                java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue ()I | IF_ICMPNE L14 | ICONST_1 | GOTO L15 |\n                L14: ICONST_0 | L15: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V | ALOAD_0 //\n                Lcom/wec/lib/util/test/SyncValueTest; this (line 55) | GETFIELD com.wec.lib.util.test.SyncValueTest.b\n                Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ICONST_1 | INVOKESTATIC java.lang.Integer.valueOf\n                (I)Ljava/lang/Integer; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue\n                (Ljava/lang/Object;)V | ICONST_1 (line 56) | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this |\n                GETFIELD com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; |\n                INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | CHECKCAST\n                java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue ()I | IF_ICMPNE L16 | ICONST_1 | GOTO L17 |\n                L16: ICONST_0 | L17: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V | ICONST_1 (line\n                57) | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD\n                com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | CHECKCAST\n                java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue ()I | IF_ICMPNE L18 | ICONST_1 | GOTO L19 |\n                L18: ICONST_0 | L19: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V | ALOAD_0 //\n                Lcom/wec/lib/util/test/SyncValueTest; this (line 59) | GETFIELD com.wec.lib.util.test.SyncValueTest.d\n                Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ICONST_1 | ANEWARRAY com.wec.lib.util.SyncValueGroup\n                | DUP | ICONST_0 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD\n                com.wec.lib.util.test.SyncValueTest.e Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | AASTORE |\n                INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.link ([Lcom/wec/lib/util/SyncValueGroup;)V\n                | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this (line 60) | GETFIELD\n                com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | ALOAD_0 //\n                Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.e\n                Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | IF_ACMPNE L20 | ICONST_1\n                | GOTO L21 | L20: ICONST_0 | L21: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V |\n                ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this (line 63) | GETFIELD\n                com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ICONST_1 |\n                ANEWARRAY com.wec.lib.util.SyncValueGroup | DUP | ICONST_0 | ALOAD_0 //\n                Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.d\n                Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | AASTORE | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.link ([Lcom/wec/lib/util/SyncValueGroup;)V | ICONST_1\n                (line 64) | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD\n                com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | CHECKCAST\n                java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue ()I | IF_ICMPNE L22 | ICONST_1 | GOTO L23 |\n                L22: ICONST_0 | L23: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V | ICONST_1 (line\n                65) | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD\n                com.wec.lib.util.test.SyncValueTest.e Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | CHECKCAST\n                java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue ()I | IF_ICMPNE L24 | ICONST_1 | GOTO L25 |\n                L24: ICONST_0 | L25: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V | ALOAD_0 //\n                Lcom/wec/lib/util/test/SyncValueTest; this (line 66) | GETFIELD com.wec.lib.util.test.SyncValueTest.d\n                Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | BIPUSH 8 | INVOKESTATIC java.lang.Integer.valueOf\n                (I)Ljava/lang/Integer; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue\n                (Ljava/lang/Object;)V | BIPUSH 8 (line 67) | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this |\n                GETFIELD com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; |\n                INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | CHECKCAST\n                java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue ()I | IF_ICMPNE L26 | ICONST_1 | GOTO L27 |\n                L26: ICONST_0 | L27: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V | BIPUSH 8 (line\n                68) | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD\n                com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | CHECKCAST\n                java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue ()I | IF_ICMPNE L28 | ICONST_1 | GOTO L29 |\n                L28: ICONST_0 | L29: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V | BIPUSH 8 (line\n                69) | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD\n                com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | CHECKCAST\n                java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue ()I | IF_ICMPNE L30 | ICONST_1 | GOTO L31 |\n                L30: ICONST_0 | L31: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V | BIPUSH 8 (line\n                70) | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD\n                com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | CHECKCAST\n                java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue ()I | IF_ICMPNE L32 | ICONST_1 | GOTO L33 |\n                L32: ICONST_0 | L33: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V | BIPUSH 8 (line\n                71) | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD\n                com.wec.lib.util.test.SyncValueTest.e Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | CHECKCAST\n                java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue ()I | IF_ICMPNE L34 | ICONST_1 | GOTO L35 |\n                L34: ICONST_0 | L35: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V | ALOAD_0 //\n                Lcom/wec/lib/util/test/SyncValueTest; this (line 74) | GETFIELD com.wec.lib.util.test.SyncValueTest.c\n                Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.unlink ()V | ALOAD_0 //\n                Lcom/wec/lib/util/test/SyncValueTest; this (line 75) | GETFIELD com.wec.lib.util.test.SyncValueTest.c\n                Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ICONST_3 | INVOKESTATIC java.lang.Integer.valueOf\n                (I)Ljava/lang/Integer; | INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue\n                (Ljava/lang/Object;)V | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this (line 76) | GETFIELD\n                com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ICONST_2 |\n                INVOKESTATIC java.lang.Integer.valueOf (I)Ljava/lang/Integer; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue (Ljava/lang/Object;)V | ICONST_2 (line 77) |\n                ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.a\n                Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | CHECKCAST\n                java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue ()I | IF_ICMPNE L36 | ICONST_1 | GOTO L37 |\n                L36: ICONST_0 | L37: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V | ICONST_2 (line\n                78) | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD\n                com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | CHECKCAST\n                java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue ()I | IF_ICMPNE L38 | ICONST_1 | GOTO L39 |\n                L38: ICONST_0 | L39: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V | ICONST_3 (line\n                79) | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD\n                com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | CHECKCAST\n                java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue ()I | IF_ICMPNE L40 | ICONST_1 | GOTO L41 |\n                L40: ICONST_0 | L41: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V | ICONST_2 (line\n                80) | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD\n                com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | CHECKCAST\n                java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue ()I | IF_ICMPNE L42 | ICONST_1 | GOTO L43 |\n                L42: ICONST_0 | L43: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V | ICONST_2 (line\n                81) | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD\n                com.wec.lib.util.test.SyncValueTest.e Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | CHECKCAST\n                java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue ()I | IF_ICMPNE L44 | ICONST_1 | GOTO L45 |\n                L44: ICONST_0 | L45: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V | ALOAD_0 //\n                Lcom/wec/lib/util/test/SyncValueTest; this (line 82) | GETFIELD com.wec.lib.util.test.SyncValueTest.d\n                Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.unlink ()V | ALOAD_0 //\n                Lcom/wec/lib/util/test/SyncValueTest; this (line 83) | GETFIELD com.wec.lib.util.test.SyncValueTest.c\n                Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ICONST_1 | ANEWARRAY com.wec.lib.util.SyncValueGroup\n                | DUP | ICONST_0 | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD\n                com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | AASTORE |\n                INVOKEVIRTUAL com.wec.lib.util.test.SyncValueTest$SyncInteger.link ([Lcom/wec/lib/util/SyncValueGroup;)V\n                | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this (line 84) | GETFIELD\n                com.wec.lib.util.test.SyncValueTest.a Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | ICONST_1 |\n                INVOKESTATIC java.lang.Integer.valueOf (I)Ljava/lang/Integer; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.setValue (Ljava/lang/Object;)V | ICONST_1 (line 85) |\n                ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD com.wec.lib.util.test.SyncValueTest.a\n                Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | CHECKCAST\n                java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue ()I | IF_ICMPNE L46 | ICONST_1 | GOTO L47 |\n                L46: ICONST_0 | L47: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V | ICONST_1 (line\n                86) | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD\n                com.wec.lib.util.test.SyncValueTest.b Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | CHECKCAST\n                java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue ()I | IF_ICMPNE L48 | ICONST_1 | GOTO L49 |\n                L48: ICONST_0 | L49: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V | ICONST_3 (line\n                87) | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD\n                com.wec.lib.util.test.SyncValueTest.c Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | CHECKCAST\n                java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue ()I | IF_ICMPNE L50 | ICONST_1 | GOTO L51 |\n                L50: ICONST_0 | L51: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V | ICONST_3 (line\n                88) | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD\n                com.wec.lib.util.test.SyncValueTest.d Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | CHECKCAST\n                java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue ()I | IF_ICMPNE L52 | ICONST_1 | GOTO L53 |\n                L52: ICONST_0 | L53: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V | ICONST_1 (line\n                89) | ALOAD_0 // Lcom/wec/lib/util/test/SyncValueTest; this | GETFIELD\n                com.wec.lib.util.test.SyncValueTest.e Lcom/wec/lib/util/test/SyncValueTest$SyncInteger; | INVOKEVIRTUAL\n                com.wec.lib.util.test.SyncValueTest$SyncInteger.getValue ()Ljava/lang/Object; | CHECKCAST\n                java.lang.Integer | INVOKEVIRTUAL java.lang.Integer.intValue ()I | IF_ICMPNE L54 | ICONST_1 | GOTO L55 |\n                L54: ICONST_0 | L55: INVOKESTATIC com.wec.lib.util.test.SyncValueTest.assertTrue (Z)V | RETURN (line 90)\n                method-execution(void com.wec.lib.util.test.SyncValueTest.testSyncValueGroup()) end public void\n                testSyncValueGroup() end public class com.wec.lib.util.test.SyncValueTest when weaving classes when\n                weaving when batch building\n                BuildConfig[D:\\workspace\\.metadata\\.plugins\\org.eclipse.ajdt.core\\ANSER2.generated.lst] #Files=365\n                Here's the class: package com.wec.lib.util.test; import static com.wec.ide.Constants.UNCHECKED; import\n                junit.framework.TestCase; import org.junit.Test; import com.wec.lib.util.SyncValueGroup; import\n                com.wec.scrum.Tests; /** * This class tests the SyncValueGroup utility class. */ @Tests(classes = {\n                SyncValueGroup.class }) @SuppressWarnings(\"nls\") public class SyncValueTest extends TestCase {\n                class SyncInteger extends SyncValueGroup<Integer> { public SyncInteger(int val) { super(new\n                Integer(val)); } public void valueChanged() { } } private SyncInteger a = new SyncInteger(1); private\n                SyncInteger b = new SyncInteger(2); private SyncInteger c = new SyncInteger(3); private SyncInteger d =\n                new SyncInteger(4); private SyncInteger e = new SyncInteger(5); /** * Ensures that SyncValueGroup\n                replicates values and * calls valueChange. */ @SuppressWarnings(UNCHECKED) @Test public void\n                testSyncValueGroup() { // Link tests a.link(b); assertTrue(a.getValue() == b.getValue()); assertTrue(1\n                == b.getValue()); b.setValue(2); assertTrue(2 == a.getValue()); b.link(c); assertTrue(2 ==\n                c.getValue()); c.setValue(3); assertTrue(3 == a.getValue()); assertTrue(3 == b.getValue());\n                a.setValue(4); assertTrue(4 == c.getValue()); assertTrue(4 == b.getValue()); b.setValue(1); assertTrue(1\n                == c.getValue()); assertTrue(1 == a.getValue()); d.link(e); assertTrue(d.getValue() == e.getValue()); //\n                Join loops b.link(d); assertTrue(1 == d.getValue()); assertTrue(1 == e.getValue()); d.setValue(8);\n                assertTrue(8 == a.getValue()); assertTrue(8 == b.getValue()); assertTrue(8 == c.getValue());\n                assertTrue(8 == d.getValue()); assertTrue(8 == e.getValue()); // Unlink tests c.unlink(); c.setValue(3);\n                b.setValue(2); assertTrue(2 == a.getValue()); assertTrue(2 == b.getValue()); assertTrue(3 ==\n                c.getValue()); assertTrue(2 == d.getValue()); assertTrue(2 == e.getValue()); d.unlink(); c.link(d);\n                a.setValue(1); assertTrue(1 == a.getValue()); assertTrue(1 == b.getValue()); assertTrue(3 ==\n                c.getValue()); assertTrue(3 == d.getValue()); assertTrue(1 == e.getValue()); } }\n            ","138215":"When a pointcut expression used with an @DeclareWarning construct contains a reference\n                pointcut, the warning is correctly produced at matched join points, but the compiler also gives an error\n                saying that the referenced pointcut cannot be found.\n            ","155238":"The tracing module uses obj.hashCode() to identify untrusted objects when formatting. I think\n                it would be a little safer and more accurate to use System.identityHashCode(obj). This way the tracing\n                code wouldn't call any application-defined code, and would give a value that can't change if the loader\n                state changes.\n            ","29769":"The org.aspectj.ajde.BuildOptionsAdapter interface does not yet support the new AspectJ 1.1\n                compiler options. These need to be added to the interface, any old or renamed options deprecated, and\n                then the correct processing needs to happen within Ajde to pass these options to the compiler. This\n                enhancement is needed by the various IDE projects for there AspectJ 1.1 support.\n            ","125101":"Hi. I am weaving two aspects into a jar file \"jar-to-jar\". ajc 1.5.0 gives me a huge\n                error message (see attachement). Would be great if I could get any recommendations on this. Thanks! Eric\n            ","148388":"Using the code in bug #148381 (with any of the working options), LT weaver produces what seems\n                a debug message: \"? WeavingClassFileProvider.acceptResult() test.Main->test.Main$AjcClosure1\"\n                > java -javaagent:%ASPECTJ_LIB_HOME%\\aspectjweaver.jar test.Main ?\n                WeavingClassFileProvider.acceptResult() test.Main->test.Main$AjcClosure1 Method Main.foo() took\n                longer than expected Max expected = 1000, actual = 65371\n            ","116626":"Hi again :-) I'm trying to use loadtime weaving and getting an exception. Please look at the\n                testcase: Java code: ========== public class Test<T> { Set<T> intsSet; public Test() {\n                this.intsSet = new HashSet<T>(); } public <T> T[] getObjs(T[] a) { return\n                intsSet.toArray(a); } public static void main(String[] args) { System.out.println(\"AAA :-)\");\n                new TTT().foo(); } } class TTT { public void foo() { Test<Object> mt = new Test<Object>();\n                Object[] arr = mt.getObjs(new Object[]{}); } } Aspect: ======= public privileged aspect TestAspect {\n                pointcut TestToArray(Test mt) : target(mt) && !within(TestAspect); Object[] around(Test mt,\n                Object[] objs) : TestToArray(mt) && args(objs) && execution(Object[]\n                com.mprv.secsph.Test.getObjs(Object[])) { objs = proceed(mt, objs); System.out.println(\"GO Aspects!\");\n                return objs; } } aop.xml ======= <aspectj> <aspects> <aspect name=\"com.mprv.secsph.TestAspect\"/>\n                </aspects> <weaver options=\"-verbose -XlazyTjp -showWeaveInfo\"> <include\n                within=\"com.mprv.*\"/> </weaver> </aspectj> Program output: ============== AAA\n                :-) info weaving 'com/mprv/secsph/TestAspect' java.lang.NullPointerException at\n                org.aspectj.weaver.tools.WeavingAdaptor$WeavingClassFileProvider.getBytes (WeavingAdaptor.java:390) at\n                org.aspectj.weaver.tools.WeavingAdaptor.getAtAspectJAspectBytes (WeavingAdaptor.java:259) at\n                org.aspectj.weaver.tools.WeavingAdaptor.weaveClass (WeavingAdaptor.java:181) at\n                org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:66) at\n                org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform\n                (ClassPreProcessorAgentAdapter.java:52) at sun.instrument.TransformerManager.transform\n                (TransformerManager.java:122) at sun.instrument.InstrumentationImpl.transform\n                (InstrumentationImpl.java:155) at java.lang.ClassLoader.defineClass1(Native Method) at\n                java.lang.ClassLoader.defineClass(ClassLoader.java:620) at java.security.SecureClassLoader.defineClass\n                (SecureClassLoader.java:124) at java.net.URLClassLoader.defineClass(URLClassLoader.java:260) at\n                java.net.URLClassLoader.access$100(URLClassLoader.java:56) at\n                java.net.URLClassLoader$1.run(URLClassLoader.java:195) at\n                java.security.AccessController.doPrivileged(Native Method) at\n                java.net.URLClassLoader.findClass(URLClassLoader.java:188) at\n                java.lang.ClassLoader.loadClass(ClassLoader.java:306) at\n                sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268) at\n                java.lang.ClassLoader.loadClass(ClassLoader.java:251) at\n                java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319) at\n                com.mprv.secsph.Test.getObjs(Test.java:1) at com.mprv.secsph.TTT.foo(Test.java:34) at\n                com.mprv.secsph.Test.main(Test.java:27) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n                at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:39) at\n                sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:25) at\n                java.lang.reflect.Method.invoke(Method.java:585) at\n                com.intellij.rt.execution.application.AppMain.main(AppMain.java:86) GO Aspects! ==== This exception\n                doesn't happen all the time ... but if you will try a few times, you will probably get it. May you can\n                understand what is the problem event without running the test case. Anyway, I took a look at your code,\n                and have a guess (but it's only the guess) - My aspect is in the application classpath. Actually it's in\n                the same package, so may be you are trying to weave the aspect with itself somehow ... Thanks! Misha.\n            ","122742":"If an @AspectJ aspect advises itself using after throwing advice that itself throws an\n                exception running the resulting program causes a VerifyError: java.lang.VerifyError: (class: A, method:\n                stop signature: ()V) catch_type not a subclass of Throwable at\n                java.lang.Class.getDeclaredMethods0(Native Method) at\n                java.lang.Class.privateGetDeclaredMethods(Class.java:2365) at\n                java.lang.Class.getMethod0(Class.java:2611) at java.lang.Class.getMethod(Class.java:1579) at\n                org.aspectj.tools.ajc.AjcTestCase.run(AjcTestCase.java:608) at\n                org.aspectj.testing.RunSpec.execute(RunSpec.java:56) at\n                org.aspectj.testing.AjcTest.runTest(AjcTest.java:68) at\n                org.aspectj.testing.XMLBasedAjcTestCase.runTest(XMLBasedAjcTestCase.java:111) at\n                org.aspectj.systemtest.ajc150.Ajc150Tests.testError(Ajc150Tests.java:877) at\n                sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at\n                sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at\n                sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at\n                java.lang.reflect.Method.invoke(Method.java:585) at junit.framework.TestCase.runTest(TestCase.java:154)\n                at junit.framework.TestCase.runBare(TestCase.java:127) at\n                junit.framework.TestResult$1.protect(TestResult.java:106) at\n                junit.framework.TestResult.runProtected(TestResult.java:124) at\n                junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118)\n                at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) at\n                org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) at\n                org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\n            ","125699":"Inherting the following advice in an @aspect causes an unexpected error. before (Object obj) :\n                execution(* *(..)) && this(obj) { System.out.println(thisJoinPoint); } \"erre the parameter\n                thisJoinPoint is not bound in [all branches of] pointcut\"\n            ","43709":"I have an library with an aspect that includes advice, which I compile into an outjar. In my\n                client project I extend it, and make a concrete pointcut that results in the library aspect affecting\n                parts of my system. There is a bug and an enhancement request here: 1) A bug: when you look at the\n                structure view for affected classes, there is a problem if you try to navigate from calls to advice (in\n                AJDT, it results in an NPE). Here is the stack trace in AJDT: java.lang.NullPointerException at\n                org.aspectj.asm.internal.ProgramElement.toLinkLabelString (ProgramElement.java:403) at\n                org.eclipse.ajdt.internal.core.AJDTStructureViewNode.getLabel (AJDTStructureViewNode.java:171) at\n                org.eclipse.ajdt.internal.core.AJDTStructureViewNodeAdapter.getLabel\n                (AJDTStructureViewNodeAdapter.java:89) at org.eclipse.ui.model.WorkbenchLabelProvider.getText\n                (WorkbenchLabelProvider.java:142) at\n                org.eclipse.jface.viewers.TreeViewer.doUpdateItem(TreeViewer.java:95) at\n                org.eclipse.jface.viewers.AbstractTreeViewer$UpdateItemSafeRunnable.run (AbstractTreeViewer.java:87) at\n                org.eclipse.core.internal.runtime.InternalPlatform.run (InternalPlatform.java:1006) at\n                org.eclipse.core.runtime.Platform.run(Platform.java:413) at\n                org.eclipse.jface.viewers.AbstractTreeViewer.doUpdateItem (AbstractTreeViewer.java:406) at\n                org.eclipse.jface.viewers.StructuredViewer$UpdateItemSafeRunnable.run (StructuredViewer.java:119) at\n                org.eclipse.core.internal.runtime.InternalPlatform.run (InternalPlatform.java:1006) at\n                org.eclipse.core.runtime.Platform.run(Platform.java:413) at\n                org.eclipse.jface.viewers.StructuredViewer.updateItem (StructuredViewer.java:1271) at\n                org.eclipse.jface.viewers.AbstractTreeViewer.createTreeItem (AbstractTreeViewer.java:320) at\n                org.eclipse.jface.viewers.AbstractTreeViewer$1.run (AbstractTreeViewer.java:303) at\n                org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:69) at\n                org.eclipse.jface.viewers.AbstractTreeViewer.createChildren (AbstractTreeViewer.java:289) at\n                org.eclipse.jface.viewers.AbstractTreeViewer.handleTreeExpand (AbstractTreeViewer.java:697) at\n                org.eclipse.jface.viewers.AbstractTreeViewer$4.treeExpanded (AbstractTreeViewer.java:709) at\n                org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:175) at\n                org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:81) at\n                org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:840) at\n                org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:865) at\n                org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:849) at\n                org.eclipse.swt.widgets.Tree.wmNotifyChild(Tree.java:1909) at\n                org.eclipse.swt.widgets.Control.WM_NOTIFY(Control.java:3815) at\n                org.eclipse.swt.widgets.Composite.WM_NOTIFY(Composite.java:642) at\n                org.eclipse.swt.widgets.Control.windowProc(Control.java:2816) at\n                org.eclipse.swt.widgets.Display.windowProc(Display.java:2361) at\n                org.eclipse.swt.internal.win32.OS.CallWindowProcW(Native Method) at\n                org.eclipse.swt.internal.win32.OS.CallWindowProc(OS.java:1236) at\n                org.eclipse.swt.widgets.Tree.callWindowProc(Tree.java:156) at\n                org.eclipse.swt.widgets.Tree.WM_LBUTTONDOWN(Tree.java:1517) at\n                org.eclipse.swt.widgets.Control.windowProc(Control.java:2799) at\n                org.eclipse.swt.widgets.Display.windowProc(Display.java:2361) at\n                org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method) at\n                org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:1303) at\n                org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:1543) at\n                org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1402) at\n                org.eclipse.ui.internal.Workbench.run(Workbench.java:1385) at\n                org.eclipse.core.internal.boot.InternalBootLoader.run (InternalBootLoader.java:858) at\n                org.eclipse.core.boot.BootLoader.run(BootLoader.java:461) at\n                sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at\n                sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at\n                sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at\n                java.lang.reflect.Method.invoke(Unknown Source) at\n                org.eclipse.core.launcher.Main.basicRun(Main.java:291) at\n                org.eclipse.core.launcher.Main.run(Main.java:747) at org.eclipse.core.launcher.Main.main(Main.java:583)\n                2) The enhancement request: the concrete aspect that applies the advice should also show what is\n                affected in the project. Of course, it would also be nice to see how a given concrete library aspect in\n                the aspect path affects your project too.\n            ","152631":"This occurs in the AspectJ build in AJDT from August 1 but not from July 31:\n                java.lang.NullPointerException at\n                org.aspectj.weaver.bcel.BcelTypeMunger.enforceDecpRule1_abstractMethodsImplemented(BcelTypeMunger.java:250)\n                at org.aspectj.weaver.bcel.BcelTypeMunger.mungeNewParent(BcelTypeMunger.java:194) at\n                org.aspectj.weaver.bcel.BcelTypeMunger.munge(BcelTypeMunger.java:106) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:454) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:119) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1597) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1548) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1328) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1124) at\n                org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.weaveQueuedEntries(AjPipeliningCompilerAdapter.java:451)\n                at\n                org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.queueForWeaving(AjPipeliningCompilerAdapter.java:389)\n                at\n                org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter.afterProcessing(AjPipeliningCompilerAdapter.java:377)\n                at\n                org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$after$org_aspectj_ajdt_internal_compiler_CompilerAdapter$5$6b855184(CompilerAdapter.aj:98)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:533) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:891) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:246) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:165) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191) trouble\n                in:public class glassbox.agent.ErrorContainmentTest$ErrorMockAspect extends java.lang.Object implements\n                glassbox.agent.api.NotSerializable: private static Throwable ajc$initFailureCause [Synthetic] public\n                static final glassbox.agent.ErrorContainmentTest$ErrorMockAspect ajc$perSingletonInstance [Synthetic]\n                static void <clinit>(): catch java.lang.Throwable -> E0 | INVOKESTATIC\n                glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$postClinit ()V (line 60) catch\n                java.lang.Throwable -> E0 GOTO L0 E0: ASTORE_0 ALOAD_0 PUTSTATIC\n                glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$initFailureCause Ljava/lang/Throwable; L0:\n                RETURN end static void <clinit>() void <init>(): ALOAD_0 //\n                Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect; this (line 60) INVOKESPECIAL java.lang.Object.<init>\n                ()V RETURN end void <init>() public void\n                ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$1$9589fc() AdviceAttribute(before,\n                (scope() && call(* hook1())), 0, 1670) : NEW java.lang.RuntimeException (line 64) DUP LDC \"rte\"\n                INVOKESPECIAL java.lang.RuntimeException.<init> (Ljava/lang/String;)V ATHROW end public void\n                ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$1$9589fc() public void\n                ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$2$f75db3e2() AdviceAttribute(before,\n                execution(* glassbox.agent.ErrorContainmentTest.hook5()), 0, 1764) : NEW java.lang.RuntimeException\n                (line 67) DUP LDC \"rte\" INVOKESPECIAL java.lang.RuntimeException.<init>\n                (Ljava/lang/String;)V ATHROW end public void\n                ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$2$f75db3e2() public void\n                ajc$around$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$3$a3a17d(org.aspectj.runtime.internal.AroundClosure)\n                AdviceAttribute(around, (scope() && call(* hook2())), 1, 1913) : NEW java.lang.Error (line 71)\n                DUP LDC \"foo\" INVOKESPECIAL java.lang.Error.<init> (Ljava/lang/String;)V ATHROW end\n                public void\n                ajc$around$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$3$a3a17d(org.aspectj.runtime.internal.AroundClosure)\n                static void\n                ajc$around$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$3$a3a17dproceed(org.aspectj.runtime.internal.AroundClosure)\n                throws java.lang.Throwable org.aspectj.weaver.AjAttribute$AjSynthetic@19a01f9 : ALOAD_0 //\n                Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect; this (line 1) ICONST_0 ANEWARRAY java.lang.Object\n                INVOKEVIRTUAL org.aspectj.runtime.internal.AroundClosure.run ([Ljava/lang/Object;)Ljava/lang/Object;\n                INVOKESTATIC org.aspectj.runtime.internal.Conversions.voidValue (Ljava/lang/Object;)Ljava/lang/Object;\n                RETURN end static void\n                ajc$around$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$3$a3a17dproceed(org.aspectj.runtime.internal.AroundClosure)\n                throws java.lang.Throwable public void\n                ajc$after$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$4$bfd07f() AdviceAttribute(after, (scope()\n                && call(* hook4())), 0, 1991) : NEW org.aspectj.lang.SoftException (line 74) DUP ACONST_NULL\n                INVOKESPECIAL org.aspectj.lang.SoftException.<init> (Ljava/lang/Throwable;)V ATHROW end public\n                void ajc$after$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$4$bfd07f() public void\n                ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$5$e5bddfdc() AdviceAttribute(before,\n                logErrorInTest(), 0, 2446) : GETSTATIC glassbox.agent.ErrorContainmentTest.logCount I (line 84) ICONST_1\n                IADD PUTSTATIC glassbox.agent.ErrorContainmentTest.logCount I RETURN (line 85) end public void\n                ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$5$e5bddfdc() public void\n                ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$6$16ecfe62() AdviceAttribute(before,\n                (adviceexecution(* *) && (within(glassbox.util.logging.api.LogManagement) &&\n                (cflow(logError()) && cflow((execution(* testLoggingError(..)) &&\n                within(glassbox.agent.ErrorContainmentTest)))))), 0, 2506) : GETSTATIC java.lang.System.err\n                Ljava/io/PrintStream; (line 87) LDC \"match\" INVOKEVIRTUAL java.io.PrintStream.println\n                (Ljava/lang/String;)V RETURN (line 88) end public void\n                ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$6$16ecfe62() public void\n                ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$7$e9ae8482() AdviceAttribute(before,\n                (adviceexecution(* *) && (within(glassbox.util.logging.api.LogManagement) &&\n                cflow((execution(* testLoggingError(..)) && within(glassbox.agent.ErrorContainmentTest))))), 0,\n                2721) : GETSTATIC java.lang.System.err Ljava/io/PrintStream; (line 90) LDC \"match in test\"\n                INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V RETURN (line 91) end public void\n                ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$7$e9ae8482() public void\n                ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$8$c6ac5351() AdviceAttribute(before,\n                (adviceexecution(* *) && (within(glassbox.util.logging.api.LogManagement) &&\n                cflow(logError()))), 0, 2923) : GETSTATIC java.lang.System.err Ljava/io/PrintStream; (line 93) LDC\n                \"match in log\" INVOKEVIRTUAL java.io.PrintStream.println (Ljava/lang/String;)V RETURN (line\n                94) end public void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$8$c6ac5351() public\n                void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$9$16ecfe62() AdviceAttribute(before,\n                (adviceexecution(* *) && (within(glassbox.util.logging.api.LogManagement) &&\n                (cflow(logError()) && cflow((execution(* testLoggingError(..)) &&\n                within(glassbox.agent.ErrorContainmentTest)))))), 0, 3069) : GETSTATIC\n                glassbox.agent.ErrorContainmentTest.recursiveThrows I (line 96) ICONST_1 IADD PUTSTATIC\n                glassbox.agent.ErrorContainmentTest.recursiveThrows I GETSTATIC\n                glassbox.agent.ErrorContainmentTest.recursiveThrows I (line 97) ICONST_2 IF_ICMPGE L0 NEW\n                java.lang.RuntimeException (line 98) DUP LDC \"recursive logging failure\" INVOKESPECIAL\n                java.lang.RuntimeException.<init> (Ljava/lang/String;)V ATHROW L0: RETURN (line 100) end public\n                void ajc$before$glassbox_agent_ErrorContainmentTest$ErrorMockAspect$9$16ecfe62() public static\n                glassbox.agent.ErrorContainmentTest$ErrorMockAspect aspectOf()\n                org.aspectj.weaver.AjAttribute$AjSynthetic@3cd8fe : GETSTATIC\n                glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$perSingletonInstance\n                Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect; (line 1) IFNONNULL L0 NEW\n                org.aspectj.lang.NoAspectBoundException DUP LDC \"glassbox_agent_ErrorContainmentTest$ErrorMockAspect\"\n                GETSTATIC glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$initFailureCause Ljava/lang/Throwable;\n                INVOKESPECIAL org.aspectj.lang.NoAspectBoundException.<init>\n                (Ljava/lang/String;Ljava/lang/Throwable;)V ATHROW L0: GETSTATIC\n                glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$perSingletonInstance\n                Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect; ARETURN end public static\n                glassbox.agent.ErrorContainmentTest$ErrorMockAspect aspectOf() public static boolean hasAspect()\n                org.aspectj.weaver.AjAttribute$AjSynthetic@1bd4f6 : GETSTATIC\n                glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$perSingletonInstance\n                Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect; (line 1) IFNULL L0 ICONST_1 IRETURN L0: ICONST_0\n                IRETURN end public static boolean hasAspect() private static void ajc$postClinit()\n                org.aspectj.weaver.AjAttribute$AjSynthetic@1febf91 : NEW\n                glassbox.agent.ErrorContainmentTest$ErrorMockAspect (line 1) DUP INVOKESPECIAL\n                glassbox.agent.ErrorContainmentTest$ErrorMockAspect.<init> ()V PUTSTATIC\n                glassbox.agent.ErrorContainmentTest$ErrorMockAspect.ajc$perSingletonInstance\n                Lglassbox/agent/ErrorContainmentTest$ErrorMockAspect; RETURN end private static void ajc$postClinit()\n                end public class glassbox.agent.ErrorContainmentTest$ErrorMockAspect when type munging with\n                (BcelTypeMunger ResolvedTypeMunger(Parent, null)) when weaving aspects when weaving when batch building\n                BuildConfig[C:\\devel\\glassbox\\.metadata\\.plugins\\org.eclipse.ajdt.core\\glassboxMonitor.generated.lst]\n                #Files=107 The source is: public class ErrorContainmentTest extends TestCase { ... static aspect\n                ErrorMockAspect implements NotSerializable { ... I will try to narrow this down if the problem isn't\n                obvious.\n            ","152873":"The current implementation of shouldWeaveAnnotationStyleAspect is surprising because it weaves\n                annotation aspects without regard as to whether they are registered in an aop.xml file. If an\n                annotation-style aspect is loaded, it is always woven, even if it doesn't match the for what classes\n                should be woven in the aop.xml file, and even if not registered therein. This is both unexpected and it\n                imposes significant overhead on configurations where they aren't used and simple fast match exclusions\n                prevent weaving (see bug #152871). Is there really a need to weave annotation style aspects like this?\n                Why can't it be done by using the aop.xml configuration mechanism that all other aspects use? In a large\n                system, the CPU overhead of parsing and creating BCEL objects for all loaded classes should be avoided\n                where possible.\n            ","124808":"Hi, Here is the second generics issue: Java code: ========== public class Test<T extends\n                Integer> { Set<T> ints = new HashSet<T>(); public Set<T> foo() { return ints; }\n                public static void main(String[] args) { Test<Integer> t = new Test<Integer>(); Set<Integer>\n                ints = t.foo(); } } Aspect: ======= public privileged aspect TestAspect { pointcut\n                gettingMemberCollection(Test t) : target(t) && get(!public Set<Number+>\n                com.mprv.secsph.*.*) && !within(TestAspect); after (Test test) : gettingMemberCollection(test) {\n                System.out.println(\"GO Aspects!\"); } } Compiler output: ================ warning at after\n                (Test test) : gettingMemberCollection(test) { ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                /root/IdeaProjects/aspectsTest/src/com/mprv/secsph/TestAspect.aj:19:0::0 advice defined in\n                com.mprv.secsph.TestAspect has not been applied [Xlint:adviceDidNotMatch] I would expect \"gettingMemberCollection\"\n                to catch access to \"ints\" member of \"Test\" ... Thanks a lot! Misha.\n            ","152871":"I'm analyzing a profile of cpu times spent weaving into Weblogic 9.2 with LTW. Of a total of 22\n                seconds of CPU, 2.6 seconds are spent in ClassParser.parse() with the exact same amount spent underneath\n                WeavingAdaptor.shouldWeave and WeavingAdaptor.shouldWeaveAnnotationStyleAspect\n                WeavingAdaptor.shouldWeave is calling CLWA.accept which calls Utility.makeJavaClass which calls\n                ClassParser.parse. Then the exact same expensive operation is getting called again in\n                shouldWeaveAnnotationStyleAspect via BcelWorld.isAnnotationStyleAspect. Proposed Simple fix: allow\n                shouldWeave to also return a BcelObjectType by setting a field in the adapter (which would be cleared to\n                be null on start). The in shouldWeaveAnnotationStyleAspect, check the field. I'd be glad to write and\n                test a patch to do this if the committers agree with the proposal. We wouldn't want to always parse the\n                bytecode, because it would we should be aiming to avoid that expense as often as possible. In our case,\n                we're using exclusion type patterns that currently require accept to make a Java class. In cases where\n                that's not necessary, it also seems odd that shouldWeaveAnnotationStyleAspect runs at all: I will post a\n                separate enhancement request for limiting the cases where it runs.\n            ","138223":"junit.framework.AssertionFailedError: test \"Double at annotation matching (no binding)\"\n                failed test \"Double at annotation matching (no binding)\" failed Unexpected warning messages:\n                warning at before() : transactionalOperation() { ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                /private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:20:0::0 advice defined in\n                DoubleAnnotationMatching has not been applied [Xlint:adviceDidNotMatch] Unexpected fail messages: abort\n                trouble in: class Foo extends java.lang.Object: void <init>(): ALOAD_0 // LFoo; this (line 26)\n                INVOKESPECIAL java.lang.Object.<init> ()V constructor-execution(void Foo.<init>()) | RETURN\n                constructor-execution(void Foo.<init>()) end void <init>() public void foo()\n                org.aspectj.weaver.MethodDeclarationLineNumber: 28:533 : method-execution(void Foo.foo()) | RETURN (line\n                28) method-execution(void Foo.foo()) end public void foo() public void bar()\n                org.aspectj.weaver.MethodDeclarationLineNumber: 30:563 : method-execution(void Foo.bar()) | RETURN (line\n                30) method-execution(void Foo.bar()) end public void bar() end class Foo -- (BCException) Impossible!\n                annotation=[Tx] shadow=[method-execution(void Foo.foo()) at\n                /private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:28::533] pointcut is at\n                [/private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:15::316] when implementing on\n                shadow method-execution(void Foo.foo()) when weaving type Foo when weaving classes when weaving when\n                batch building BuildConfig[null] #Files=1 Impossible! annotation=[Tx] shadow=[method-execution(void\n                Foo.foo()) at /private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:28::533] pointcut is\n                at [/private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:15::316] when implementing on\n                shadow method-execution(void Foo.foo()) when weaving type Foo when weaving classes when weaving when\n                batch building BuildConfig[null] #Files=1 org.aspectj.weaver.BCException: Impossible! annotation=[Tx]\n                shadow=[method-execution(void Foo.foo()) at\n                /private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:28::533] pointcut is at\n                [/private/tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj:15::316] when implementing on\n                shadow method-execution(void Foo.foo()) when weaving type Foo when weaving classes when weaving when\n                batch building BuildConfig[null] #Files=1 at\n                org.aspectj.weaver.patterns.AnnotationPointcut.findResidueInternal(AnnotationPointcut.java:201) at\n                org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267) at\n                org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:93) at\n                org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267) at\n                org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:93) at\n                org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267) at\n                org.aspectj.weaver.patterns.IfPointcut.findResidueInternal(IfPointcut.java:173) at\n                org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267) at\n                org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:93) at\n                org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267) at\n                org.aspectj.weaver.patterns.AndPointcut.findResidueInternal(AndPointcut.java:93) at\n                org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267) at\n                org.aspectj.weaver.patterns.OrPointcut.findResidueInternal(OrPointcut.java:96) at\n                org.aspectj.weaver.patterns.Pointcut.findResidue(Pointcut.java:267) at\n                org.aspectj.weaver.bcel.BcelAdvice.specializeOn(BcelAdvice.java:132) at\n                org.aspectj.weaver.bcel.BcelShadow.prepareForMungers(BcelShadow.java:325) at\n                org.aspectj.weaver.Shadow.implement(Shadow.java:455) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.implement(BcelClassWeaver.java:2236) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:491) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:109) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1560) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1511) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1291) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1113) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:311) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:183) at\n                org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:862) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:242) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:161) at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:114) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60) at\n                org.aspectj.tools.ajc.Main.run(Main.java:367) at org.aspectj.tools.ajc.Main.runMain(Main.java:246) at\n                org.aspectj.tools.ajc.Ajc.compile(Ajc.java:199) at org.aspectj.tools.ajc.Ajc.compile(Ajc.java:163) at\n                org.aspectj.tools.ajc.AjcTestCase.ajc(AjcTestCase.java:510) at\n                org.aspectj.testing.CompileSpec.execute(CompileSpec.java:53) at\n                org.aspectj.testing.AjcTest.runTest(AjcTest.java:68) at\n                org.aspectj.testing.XMLBasedAjcTestCase.runTest(XMLBasedAjcTestCase.java:111) at\n                org.aspectj.systemtest.ajc152.Ajc152Tests.testDoubleAnnotationMatching_pr138221(Ajc152Tests.java:37) at\n                sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at\n                sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at\n                sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at\n                java.lang.reflect.Method.invoke(Method.java:585) at junit.framework.TestCase.runTest(TestCase.java:154)\n                at junit.framework.TestCase.runBare(TestCase.java:127) at\n                junit.framework.TestResult$1.protect(TestResult.java:106) at\n                junit.framework.TestResult.runProtected(TestResult.java:124) at\n                junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118)\n                at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) at\n                org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) at\n                org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) command was: ajc\n                -classpath\n                /Users/adrian/projects/aspectjdev/lib/test/aspectjrt.jar:../testing-client/bin:../runtime/bin:../aspectj5rt/bin:../lib/junit/junit.jar:../bridge/bin:../loadtime/bin:../weaver/bin:../weaver5/bin:../aj-build/jars/bridge.jar:../aj-build/jars/util.jar:../aj-build/jars/loadtime.jar:../aj-build/jars/weaver.jar:../aj-build/jars/weaver5.jar:../aj-build/jars/asm.jar:../lib/test/testing-client.jar:../lib/test/aspectjrt.jar:/tmp/ajcSandbox/ajcTest18924.tmp\n                -1.5 /tmp/ajcSandbox/ajcTest18924.tmp/DoubleAnnotationMatching.aj -d /tmp/ajcSandbox/ajcTest18924.tmp at\n                junit.framework.Assert.fail(Assert.java:47) at\n                org.aspectj.tools.ajc.AjcTestCase.assertMessages(AjcTestCase.java:452) at\n                org.aspectj.testing.CompileSpec.execute(CompileSpec.java:56) at\n                org.aspectj.testing.AjcTest.runTest(AjcTest.java:68) at\n                org.aspectj.testing.XMLBasedAjcTestCase.runTest(XMLBasedAjcTestCase.java:111) at\n                org.aspectj.systemtest.ajc152.Ajc152Tests.testDoubleAnnotationMatching_pr138221(Ajc152Tests.java:37) at\n                sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at\n                sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at\n                sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at\n                java.lang.reflect.Method.invoke(Method.java:585) at junit.framework.TestCase.runTest(TestCase.java:154)\n                at junit.framework.TestCase.runBare(TestCase.java:127) at\n                junit.framework.TestResult$1.protect(TestResult.java:106) at\n                junit.framework.TestResult.runProtected(TestResult.java:124) at\n                junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118)\n                at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) at\n                org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) at\n                org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\n            ","102459":"When advice is executed, the object you have to work with is the joinpoint. This can then be\n                queried to get various information out of it. It would be nice, if as part of the weaving you could get\n                hold of the same information. This is particularly useful in the case of writing a coverage tool. In\n                order to measure where you've been, you have to know all the places you could possibly go. The\n                introduction of the -showWeaveInfo option means that we can record these places, however, this would be\n                greatly enhanced by providing similar information as to that which is collected as the program is\n                running. The information which would be good is the same as that obtained from\n                JoinPoint.StaticPart.getSignature().toLongString().\n            ","68494":"In addition to accepting .java source files ajdoc needs to accept .aj files.","49250":"SoftException should implement getCause(): public Throwable getCause() { return inner; } (As\n                pointed out by Ramnivas, misc mail messages, code comments...) Using getCause() means the chain should\n                print as expected in 1.4+, esp. when SoftException is itself wrapped as a RemoteException. Since\n                getCause() replicates getWrappedThrowable(), we could deprecate that, but we must continue to support it\n                to maintain upwards binary compatibility in the runtime classes.\n            ","44117":"java.lang.NullPointerException at org.aspectj.weaver.AsmRelationshipProvider.checkerMunger\n                (AsmRelationshipProvider.java:51) at org.aspectj.weaver.Checker.match(Checker.java:58) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:985) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:791) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:291) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:77) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:417) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:390) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:316) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerateClassFile\n                s(AjBuildManager.java:256) at org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild\n                (AjBuildManager.java:156) at org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild\n                (AjBuildManager.java:70) at org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:103)\n                at org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run (AspectJBuildManager.java:165)\n            ","134541":"When advice doesn't match in a 1.5.0 enabled project, there is an adviceDidNotMatch warning\n                against the line number of the advice. If you insert a line before this advice and save then the warning\n                stays associated with the original line and not the new one. Full building puts the warning against the\n                new line. This is a regression and didn't happen in AJ 1.5.0.\n            ","153845":"public aspect OuterAspect { private pointcut isSetter() : execution(void set*(..)); public\n                static aspect InnerAspect pertarget(isSetter()) { } } java.lang.IllegalStateException at\n                org.aspectj.apache.bcel.classfile.GenericSignatureParser.parseFieldTypeSignature(GenericSignatureParser.java:163)\n                at\n                org.aspectj.apache.bcel.classfile.GenericSignatureParser.parseTypeArgument(GenericSignatureParser.java:253)\n                at\n                org.aspectj.apache.bcel.classfile.GenericSignatureParser.maybeParseTypeArguments(GenericSignatureParser.java:261)\n                at\n                org.aspectj.apache.bcel.classfile.GenericSignatureParser.parseClassTypeSignature(GenericSignatureParser.java:208)\n                at\n                org.aspectj.apache.bcel.classfile.GenericSignatureParser.parseAsClassSignature(GenericSignatureParser.java:56)\n                at org.aspectj.apache.bcel.classfile.Signature.asClassSignature(Signature.java:315) at\n                org.aspectj.apache.bcel.classfile.JavaClass.getGenericClassTypeSignature(JavaClass.java:973) at\n                org.aspectj.weaver.bcel.BcelObjectType.initializeFromJavaclass(BcelObjectType.java:164) at\n                org.aspectj.weaver.bcel.BcelObjectType.<init>(BcelObjectType.java:131) at\n                org.aspectj.weaver.bcel.BcelWorld.buildBcelDelegate(BcelWorld.java:337) at\n                org.aspectj.weaver.bcel.BcelWorld.addSourceObjectType(BcelWorld.java:395) at\n                org.aspectj.weaver.bcel.BcelWeaver.addIfAspect(BcelWeaver.java:263) at\n                org.aspectj.weaver.bcel.BcelWeaver.addAspectsFromDirectory(BcelWeaver.java:255) at\n                org.aspectj.weaver.bcel.BcelWeaver.addLibraryJarFile(BcelWeaver.java:205) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.initBcelWorld(AjBuildManager.java:698) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:223) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:199) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:170) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n                IllegalStateException thrown: Expecting [,L, or T, but found Pjava while unpacking\n                Ljava/util/AbstractSet<Pjava/util/Map$Entry<TK;TV;>;>;\n            ","65319":"class Test { public static void main(String args[]) { new Test().method(); } public void\n                method() { new Test2().method2(); } } class Test2 { public void method2() {} } aspect Plain {\n                before(Test x): call(void *.* (..)) && (this(x) || target(x)) { } }\n            ","132926":"Just upgraded to latest AJDT (Version: 1.3.1, Build id: 20060322082516 AspectJ version:\n                1.5.1.20060320075953) and the compiler crashed while rebulding the project (which used to work fine\n                using using the March 16th version). Retrying with 'clean' build produced the same crash.\n                java.lang.NullPointerException at\n                org.aspectj.weaver.AnnotationX.ensureAtTargetInitialized(AnnotationX.java:158) at\n                org.aspectj.weaver.AnnotationX.specifiesTarget(AnnotationX.java:98) at\n                org.aspectj.weaver.bcel.BcelWeaver.verifyTargetIsOK(BcelWeaver.java:1450) at\n                org.aspectj.weaver.bcel.BcelWeaver.applyDeclareAtType(BcelWeaver.java:1417) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveParentTypeMungers(BcelWeaver.java:1366) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveParentsFor(BcelWeaver.java:1223) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveParentsFor(BcelWeaver.java:1211) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1058) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:311) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:183) at\n                org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:845) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:241) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:161) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n                NullPointerException thrown: null\n            ","130869":"Ok, so I'm on the bleeding edge of aspect design here... but I have a generic aspect of the\n                form public abstract aspect MyAspect<T extends Bar> { declare warning : T.somePC() : \"a match\";\n                } and Bar is defined as: public abstract aspect Bar { public abstract pointcut somePC(); } (yes, what\n                that enables is indeed unbelievably cool). We fail (perhaps unsurprisingly) when compiling the generic\n                aspect because we can't find the pointcut somePC in T. We should of course be looking in the upper bound\n                when searching for a pointcut in a type variable...\n            ","142165":"the scheme used to rewrite pointcuts defined in XML that use AND doesnt work, they get\n                mangled.\n            ","119210":"I met NullPointerException when weaving. Doesn't Aj support this situations? public class\n                TestLib { private static int myInt; static { myInt = 1; } public static void main(String[] args) { //\n                TODO Auto-generated method stub System.out.println(\"myInt=\"+myInt); } } public aspect\n                ThreadAspectLib { pointcut setThreadLocalsField():set(private int TestLib.myInt); Integer\n                around():setThreadLocalsField() { try{ return new Integer(2); } catch(Exception e) {\n                e.printStackTrace(); return null; } } } ---- AspectJ Properties --- AspectJ Compiler DEVELOPMENT built\n                on Tuesday Jun 14, 2005 at 15:41:05 GMT ---- Dump Properties --- Dump file:\n                ajcore.20051205.145247.250.txt Dump reason: java.lang.NullPointerException Dump on exception: true Dump\n                at exit condition: abort ---- Exception Information --- java.lang.NullPointerException at\n                org.aspectj.weaver.ResolvedTypeX$Primitive.isAssignableFrom(ResolvedTypeX.java:985) at\n                org.aspectj.weaver.ResolvedTypeX.isAssignableFrom(ResolvedTypeX.java:96) at\n                org.aspectj.weaver.Advice.match(Advice.java:143) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:1673) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.matchSetInstruction(BcelClassWeaver.java:1543) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java(Compiled Code)) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java(Compiled Code)) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:377) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:94) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1362) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1327) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1106) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:993) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:286) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:165) at\n                org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:368) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:727) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:206) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:140) at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:112) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:60) at\n                org.aspectj.tools.ajc.Main.run(Main.java:318) at org.aspectj.tools.ajc.Main.runMain(Main.java:228) at\n                org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM(AjcTask.java:1194) at\n                org.aspectj.tools.ant.taskdefs.AjcTask.execute(AjcTask.java:985) at\n                org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:275) at\n                org.apache.tools.ant.Task.perform(Task.java:364) at org.apache.tools.ant.Target.execute(Target.java:341)\n                at org.apache.tools.ant.Target.performTasks(Target.java:369) at\n                org.apache.tools.ant.Project.executeTarget(Project.java:1214) at\n                org.apache.tools.ant.Project.executeTargets(Project.java:1062) at\n                org.apache.tools.ant.Main.runBuild(Main.java:690) at org.apache.tools.ant.Main.startAnt(Main.java:200)\n                at org.apache.tools.ant.launch.Launcher.run(Launcher.java:196) at\n                org.apache.tools.ant.launch.Launcher.main(Launcher.java:55) ---- System Properties --- java.assistive=ON\n                java.runtime.name=Java(TM) 2 Runtime Environment, Standard Edition sun.boot.library.path=C:\\Program\n                Files\\IBM\\Java141\\jre\\bin java.vm.version=1.4.1 java.vm.vendor=IBM Corporation\n                java.vendor.url=http://www.ibm.com/ path.separator=; java.vm.name=Classic VM file.encoding.pkg=sun.io\n            ","54421":"The following code does not compile because the message uses string concatenation (the +\n                operator). public class WarningSample { public void method() {} public void anotherMethod() {\n                this.method(); } } aspect WarningAspect { pointcut illegalCall(): call(* WarningSample.method()) &&\n                within(WarningSample); // the same thing happens with declare error declare warning: illegalCall() :\n                \"Hey, don't \" + \"do that, that is not nice. You should do something else\"; }\n            ","76798":"We don't currently include a version in the class files that come out of the weaver. This can\n                cause problems. For example, if we add a new attribute to a class file in a future version of AspectJ,\n                then that attribute will cause older versions of AspectJ to blow up if they encounter it. If we include\n                a version in the class file we can rev the version number when we add attributes (or change the class\n                file form in another way), and by checking that version number in the weaver we can better determine\n                whether we should fail if we encounter a new attribute (or other change), or if it is safe to continue\n                processing. I will add a new WeaverVersion attribute that includes 2 shorts. Major and Minor.\n                Encountering a major version in a class file that is greater than the version a particular weaver is\n                designed to understand will cause compilation to fail. Encountering a minor version in a class file that\n                is greater than the minor version a particular weaver is designed to understand will not cause\n                compilation to fail - we will assume it is safe to continue.\n            ","151673":"We have had a user report a problem where after advice being woven into a particular method is\n                producing code that does not verify. The problem occurs if the bytecode being input to the weaving\n                process includes a subroutine that contains the return from the method. Here is the problematic snippet\n                produced by some unknown compiler: 200: invokespecial #17; //Method com/MyException.\"<init>\":(Ljava/lang/String;)V\n                203: athrow 204: aload_3 205: astore 6 207: jsr 234 210: aload 6 212: areturn 213: astore 4 215: aload 4\n                217: invokevirtual #79; //Method java/lang/Throwable.printStackTrace:()V 220: jsr 234 223: goto 238 226:\n                astore 7 228: jsr 234 231: aload 7 233: athrow 234: astore 8 236: aload_3 237: areturn 238: return\n                Exception table: from to target type 2 213 213 Class javax/ejb/FinderException 2 226 226 any see the\n                jsr's jump to 234, but before the subroutine return at 238 there is an areturn out of the method (this\n                method returns a String). After weaving we get something like this: 200: invokespecial #17; //Method\n                com/MyException.\"<init>\":(Ljava/lang/String;)V 203: athrow 204: aload_3 205: astore 6\n                207: jsr 238 210: aload 6 212: astore 9 214: goto 248 217: astore 4 219: aload 4 221: invokevirtual #79;\n                //Method java/lang/Throwable.printStackTrace:()V 224: jsr 238 227: goto 246 230: astore 7 232: jsr 238\n                235: aload 7 237: athrow 238: astore 8 240: aload_3 241: astore 9 243: goto 248 246: astore 9 248:\n                invokestatic #299; //Method After.aspectOf:()LAfter; 251: invokevirtual #302; //Method\n                After.ajc$afterReturning$After$1$26d6d4a7:()V 254: aload 9 256: return see how the areturn has been lost\n                - this code will blow up with a verify error (the string is on the stack, we just ignore it and 'return'\n                normally)\n            ","88652":"I get this warning in my code, though I actually do not specify an array type. The signature I\n                want to match is the following constructor signature: public Touple(Object formulaHandle, Object...\n                propositions) {...} Touple implements IRelation The pointcut I use is the following: pointcut p():\n                call(Touple.new(..)); This should actually match the signature, shouldn't it? AspectJ however complains\n                with this warning: an array type as the last parameter in a signature does not match on the varargs\n                declared method: void ltlrv.Touple.<init>(java.lang.Object, java.lang.Object[])\n                [Xlint:cantMatchArrayTypeOnVarargs] Also, even if I *had* stated an array type, it should match even\n                then IMHO, since arrays and varargs are actually the same in the Java implementation.\n            ","119451":"// Main.java package bug; public class Main { } aspect LogMain { } Generating ajdoc through\n                Eclipse (AJDT 1.3.0.20051206092602, AspectJ 1.5.0.20051206103951) generate incorrect warning for the\n                LogMain aspect: > Calling ajc... > Building signature files... > Calling javadoc... Loading\n                source file C:\\work\\aop\\src\\ajdocworkingdir\\bug\\Main.java... Constructing Javadoc information...\n                C:\\work\\aop\\src\\ajdocworkingdir\\bug\\Main.java:11: class LogMain is public, should be declared in a file\n                named LogMain.java public class LogMain { ^ Standard Doclet version 1.5.0_04 Building tree for all the\n                packages and classes... Generating c:\\work\\aop\\src\\workspace\\AJDocPackageAspect\\doc\\bug/\\LogMain.html...\n                Generating c:\\work\\aop\\src\\workspace\\AJDocPackageAspect\\doc\\bug/\\Main.html... Generating\n                c:\\work\\aop\\src\\workspace\\AJDocPackageAspect\\doc\\bug/\\package-frame.html... Generating\n                c:\\work\\aop\\src\\workspace\\AJDocPackageAspect\\doc\\bug/\\package-summary.html... Generating\n                c:\\work\\aop\\src\\workspace\\AJDocPackageAspect\\doc\\bug/\\package-tree.html... Generating\n                c:\\work\\aop\\src\\workspace\\AJDocPackageAspect\\doc\\constant-values.html... Building index for all the\n                packages and classes... Generating\n                c:\\work\\aop\\src\\workspace\\AJDocPackageAspect\\doc\\overview-tree.html... Generating\n                c:\\work\\aop\\src\\workspace\\AJDocPackageAspect\\doc\\index-all.html... Generating\n                c:\\work\\aop\\src\\workspace\\AJDocPackageAspect\\doc\\deprecated-list.html... Building index for all\n                classes... Generating c:\\work\\aop\\src\\workspace\\AJDocPackageAspect\\doc\\allclasses-frame.html...\n                Generating c:\\work\\aop\\src\\workspace\\AJDocPackageAspect\\doc\\allclasses-noframe.html... Generating\n                c:\\work\\aop\\src\\workspace\\AJDocPackageAspect\\doc\\index.html... Generating\n                c:\\work\\aop\\src\\workspace\\AJDocPackageAspect\\doc\\help-doc.html... Generating\n                c:\\work\\aop\\src\\workspace\\AJDocPackageAspect\\doc\\stylesheet.css... 1 warning > Decorating html\n                files... > Decorating C:\\work\\aop\\src\\workspace\\AJDocPackageAspect\\doc\\bug\\Main.html... > Removing\n                generated tags (this may take a while)... > Finished.\n            ","132130":"For this program (when all entered into *one* file) I don't see a marker from the declare to\n                the annotated method. If the annotated method is in another file, I do... (not sure if\n                fields/ctors/types are also a problem..) public aspect basic { declare @method: * debit(..):\n                @Secured(role=\"supervisor\"); } class BankAccount { public void debit(long accId,long amount) {\n                } } @interface Secured { String role(); }\n            ","107299":"ajc doesn't recognize Windows absolute file paths that don't start with a drive letter, e.g.,\n                run: ajc -inpath \\test.jar [error] build config error: bad inpath component: \\test.jar but ajc -inpath\n                c:\\test.jar works ajc -aspectpath \\test.jar Test.aj [error] build config error: bad aspectpath:\n                \\test.jar ajc -aspectpath c:\\test.jar Test.aj (works)\n            ","72531":"I have a \"declare warning\" declaration that warns on usage of any method that returns\n                an array of any POJO type, this should point to the methods that in reality return an array, but i see\n                warnings at points other than these array returning methods, and also those that have void in their\n                signature. In the attached files i get a warning at statements like: > PrinterWorld p = new\n                PrinterWorld();[in main()method] > System.out.println(\"Hello World!\"); > return new\n                Integer(3); and these being the first/only lines in their respective methods.\n            ","74952":"Reference: \"cflow(within(C)) vs (within(C)||cflowbelow(within(C)) in aspectj-users mailing\n                list. The aspect TraceClass below doesn't print any message when the pointcut is defined to \"!cflow(within(Trace*))\".\n                The other defintion \"!(within(Trace*) || cflowbelow(within(Trace*)))\" works fine. Wes Isberg\n                in his reply explained that cflow should never be used alone but he thought \"there is a bug or two\n                in here\" class SomeClass { static public void main (String [] args) { } } // SomeClass aspect\n                TraceClass { // members static private int level = 0; static private void offset() { int i; for (i = 0;\n                i < level; ++i) { System.out.print(\" \"); } } // offset pointcut pc() :\n                !cflow(within(Trace*)) // !(within(Trace*) || cflowbelow(within(Trace*))) ; before () : pc() { offset();\n                System.out.println(\"-> \" + thisJoinPoint); ++level; } after () : pc() { --level; offset();\n                System.out.println(\"<- \" + thisJoinPoint); } } // TraceClass In order to try to figure out\n                what is happening within TraceClass, I added a second aspect, TraceTrace, just to trace TraceClass.\n                aspect TraceTrace { // members static private int level = 0; static private void offset() { int i; for\n                (i = 0; i < level; ++i) { System.out.print(\" \"); } } // offset pointcut pc() :\n                within(TraceClass); before () : pc() { offset(); System.out.println(\"=> \" + thisJoinPoint);\n                ++level; } after () : pc() { --level; offset(); System.out.println(\"<= \" + thisJoinPoint);\n                } } // TraceTrace Here is what TraceTrace prints when TraceClass uses \"!cflow(within(Trace*))\"\n                => staticinitialization(TraceClass.<clinit>) => set(int TraceClass.level) <= set(int\n                TraceClass.level) => preinitialization(TraceClass()) => initialization(TraceClass()) =>\n                execution(TraceClass()) <= execution(TraceClass()) <= initialization(TraceClass()) <=\n                staticinitialization(TraceClass.<clinit>) The after advice is not executed for preinitialization.\n            ","29186":"This works fine without -emacssym, but dies with it: aspect Foo { before() : call(void foo()) {\n                } void Bar.bar() { foo(); } } class Bar { void foo() { } } munger: (before: (persingleton(Foo) &&\n                call(ExactTypePattern(void) foo()))->void Foo.ajc$before$Foo$f()) on method-call(void Bar.foo())\n                trouble in: public class Foo extends java.lang.Object: TypeMungers: [(BcelTypeMunger\n                ResolvedTypeMunger(Method, void Bar.bar()))] public static final Foo ajc$perSingletonInstance static\n                void <clinit>(): INVOKESTATIC Foo.ajc$clinit ()V (line 1) staticinitialization(void Foo.<clinit>())\n                | RETURN staticinitialization(void Foo.<clinit>()) end static void <clinit>() void <init>():\n                ALOAD_0 // Foo this (line 1) INVOKESPECIAL java.lang.Object.<init> ()V constructor-execution(void\n                Foo.<init>()) | RETURN constructor-execution(void Foo.<init>()) end void <init>()\n                public void ajc$before$Foo$f() AdviceAttribute(before, call(ExactTypePattern(void) foo()), 0, 15) :\n                advice-execution(void Foo.ajc$before$Foo$f()) | RETURN (line 2) advice-execution(void\n                Foo.ajc$before$Foo$f()) end public void ajc$before$Foo$f() public static void\n                ajc$interMethod$Foo$Bar$bar(Bar) EffectiveSignatureAttribute(void Bar.bar(), method-execution) :\n                method-execution(void Bar.bar()) | ALOAD_0 // Bar arg0 (line 3) | method-call(void Bar.foo()) | |\n                GETSTATIC Foo.ajc$perSingletonInstance LFoo; | | INVOKEVIRTUAL Foo.ajc$before$Foo$f ()V | |\n                INVOKEVIRTUAL Bar.foo ()V | method-call(void Bar.foo()) | RETURN method-execution(void Bar.bar()) end\n                public static void ajc$interMethod$Foo$Bar$bar(Bar) public static void\n                ajc$interMethodDispatch1$Foo$Bar$bar(Bar) EffectiveSignatureAttribute(void Bar.bar(), method-call) :\n                ALOAD_0 // Bar arg0 INVOKEVIRTUAL Bar.ajc$interMethodDispatch2$$bar ()V RETURN end public static void\n                ajc$interMethodDispatch1$Foo$Bar$bar(Bar) public static Foo aspectOf()\n                org.aspectj.weaver.AjAttribute$AjSynthetic@f8f7db : GETSTATIC Foo.ajc$perSingletonInstance LFoo; ARETURN\n                end public static Foo aspectOf() public static boolean hasAspect()\n                org.aspectj.weaver.AjAttribute$AjSynthetic@5856a5 : GETSTATIC Foo.ajc$perSingletonInstance LFoo; IFNULL\n                L0 ICONST_1 IRETURN L0: ICONST_0 IRETURN end public static boolean hasAspect() private static void\n                ajc$clinit() org.aspectj.weaver.AjAttribute$AjSynthetic@c39a20 : NEW Foo DUP INVOKESPECIAL Foo.<init>\n                ()V PUTSTATIC Foo.ajc$perSingletonInstance LFoo; RETURN end private static void ajc$clinit() end public\n                class Foo Exception thrown from AspectJ 1.1b2 This might be logged as a bug already -- see the bug\n                database at http://dev.eclipse.org (product: AspectJ, component: compiler) Bugs for exceptions thrown\n                have titles File:line from the top stack, e.g., \"SomeFile.java:243\" If you don't find the\n                exception below in a bug, please add a new bug To make the bug a priority, please include a test program\n                that can reproduce this exception. null java.lang.NullPointerException at\n                org.aspectj.weaver.AsmAdaptor.findOrCreateBodyNode(Unknown Source) at\n                org.aspectj.weaver.AsmAdaptor.getNode(Unknown Source) at\n                org.aspectj.weaver.AsmAdaptor.noteMunger(Unknown Source) at\n                org.aspectj.weaver.Shadow.implementMungers(Unknown Source) at\n                org.aspectj.weaver.Shadow.implement(Unknown Source) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.implement(Unknown Source) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(Unknown Source) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(Unknown Source) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(Unknown Source) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(Unknown Source) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.weaveAndGenerateClassFiles(Unknown Source) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(Unknown Source) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(Unknown Source) at org.aspectj.tools.ajc.Main.run(Unknown\n                Source) at org.aspectj.tools.ajc.Main.runMain(Unknown Source) at org.aspectj.tools.ajc.Main.main(Unknown\n                Source) 1 fail|abort\n            ","59208":"This problem was first observed when weaving large binary legacy classes with the ajc 1.2 rc1\n                candidate. It turns out that BCEL fails with different error messages dependent on whether we are doing\n                a binary weave or a straight ajc compile. In the latter case, the error message is rather confusing. To\n                reproduce: 1. Compile and run the following code to produce Foo.java // File FooProducer.java public\n                class FooProducer { public static final int N_METHODS = 50; public static final int N_STATEMENTS =\n                Short.MAX_VALUE/(2 * N_METHODS); public static void main(String[] args) { System.out.println(\"public\n                class Foo {\"); System.out.println(\"static java.util.Set hs = new java.util.HashSet ();\");\n                for (int i = 0; i < N_METHODS; i++) { System.out.println(\"public void test\" + i + \"()\n                { \"); for (int j = 0; j < N_STATEMENTS; j++) { System.out.println(\"hs.add(new Object());\");\n                } System.out.println(\"}\"); } System.out.println(\"}\"); } }// End of FooProducer.java\n                2. Create the following Aspect: // File a.aj aspect a { boolean around() : (target(java.util.HashSet)\n                && call(boolean add(..) ) ) { return false; } } // End of a.aj *** 3.a - straight compile and\n                weave: ajc - sourceroots . ABORT Exception thrown from AspectJ 1.2rc1 This might be logged as a bug\n                already -- find current bugs at http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&component=Compiler\n                Bugs for exceptions thrown have titles File:line from the top stack, e.g., \"SomeFile.java:243\"\n                If you don't find the exception below in a bug, please add a new bug at\n                http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a\n                test program that can reproduce this exception. Expected class `CONSTANT_Utf8' at index 25700 and got\n                CONSTANT_NameAndType[12] (name_index = 25696, signature_index = 81) Expected class `CONSTANT_Utf8' at\n                index 25700 and got CONSTANT_NameAndType[12] (name_index = 25696, signature_index = 81)\n                org.apache.bcel.classfile.ClassFormatException: Expected class `CONSTANT_Utf8' at index 25700 and got\n                CONSTANT_NameAndType[12](name_index = 25696, signature_index = 81) at\n                org.apache.bcel.classfile.ConstantPool.getConstant (ConstantPool.java:271) at\n                org.apache.bcel.classfile.Attribute.readAttribute(Attribute.java:163) at\n                org.apache.bcel.classfile.FieldOrMethod.<init>(FieldOrMethod.java:98) at\n                org.apache.bcel.classfile.Field.<init>(Field.java:83) at\n                org.apache.bcel.classfile.ClassParser.readFields (ClassParser.java:270) at\n                org.apache.bcel.classfile.ClassParser.parse(ClassParser.java:172) at\n                org.aspectj.weaver.bcel.Utility.makeJavaClass(Utility.java:358) at\n                org.aspectj.weaver.bcel.UnwovenClassFile.getJavaClass (UnwovenClassFile.java:63) at\n                org.aspectj.weaver.bcel.UnwovenClassFile.getClassName (UnwovenClassFile.java:147) at\n                org.aspectj.ajdt.internal.compiler.WeaverAdapter.acceptResult (WeaverAdapter.java:177) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify (BcelWeaver.java:621) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:563) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave (AjCompilerAdapter.java:239) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling (AjCompilerAdapter.java:114) at\n                org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:376) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation (AjBuildManager.java:600) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild (AjBuildManager.java:160) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild (AjBuildManager.java:94) at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:102) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:53) at\n                org.aspectj.tools.ajc.Main.run(Main.java:280) at org.aspectj.tools.ajc.Main.runMain(Main.java:217) at\n                org.aspectj.tools.ajc.Main.main(Main.java:79) 1 fail|abort Signal 127 *** 3b - binary weave ajc -noweave\n                -outjar test.jar a.aj javac -d classes Foo.java ajc -aspectpath test.jar -inpath classes ABORT Exception\n                thrown from AspectJ 1.2rc1 This might be logged as a bug already -- find current bugs at\n                http://bugs.eclipse.org/bugs/buglist.cgi?product=AspectJ&component=Compiler Bugs for exceptions\n                thrown have titles File:line from the top stack, e.g., \"SomeFile.java:243\" If you don't find\n                the exception below in a bug, please add a new bug at\n                http://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ To make the bug a priority, please include a\n                test program that can reproduce this exception. Class can't be both final and abstract Class can't be\n                both final and abstract org.apache.bcel.classfile.ClassFormatException: Class can't be both final and\n                abstract at org.apache.bcel.classfile.ClassParser.readClassInfo (ClassParser.java:242) at\n                org.apache.bcel.classfile.ClassParser.parse(ClassParser.java:165) at\n                org.aspectj.weaver.bcel.Utility.makeJavaClass(Utility.java:358) at\n                org.aspectj.weaver.bcel.UnwovenClassFile.getJavaClass (UnwovenClassFile.java:63) at\n                org.aspectj.weaver.bcel.UnwovenClassFile.getClassName (UnwovenClassFile.java:147) at\n                org.aspectj.ajdt.internal.compiler.WeaverAdapter.acceptResult (WeaverAdapter.java:177) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify (BcelWeaver.java:621) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:563) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave (AjCompilerAdapter.java:239) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling (AjCompilerAdapter.java:114) at\n                org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:376) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation (AjBuildManager.java:600) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild (AjBuildManager.java:160) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild (AjBuildManager.java:94) at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:102) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:53) at\n                org.aspectj.tools.ajc.Main.run(Main.java:280) at org.aspectj.tools.ajc.Main.runMain(Main.java:217) at\n                org.aspectj.tools.ajc.Main.main(Main.java:79) 1 fail|abort Signal 127\n            ","151845":"Building of a large project fails while weaving. NPE in\n                EclipseSourceContext.removeUnnecessaryProblems(..) The project was just migrated to Eclipse 3.2 Eclipse\n                newly installed with Eclipse SDK and via Update manager with AJDT, CDT, Web/J2EE tools, SubClipse,\n                SpringIDE. Same Project workes in Eclipse 3.1. Simple Test AspectJ-Project workes OK Building with\n                Ant/AspectJ compiler (as external Tools Launch in Eclipse) works. I tried the following, but got the\n                error anyway: - Checked out as a new AspectJ Project - upgraded to the developement Version of AJDT\n            ","77799":"Calling Ajde.getDefault().getStructureSearchManager().findMatches(...) for an AspectJ project\n                that has not been built results in a NullPointerException in\n                StructureSearchManager.findMatchesHelper(...) (line 58) Simple patch is attached.\n            ","39436":"build I20030625 The old tasks view showed a summary of the number of tasks, errors, warnings\n                and infos in the status line. This is missing in the reworked view.\n            ","118192":"See attached patch for a failing junit test case.","152257":"Incrementally compiling code with advice throwing an excpetion gives errors stating that the\n                exception can't be thrown. Full compilation compiles the code successfully. AJDT Version: 1.4.1 Build\n                id: 20060727081607 AspectJ version: 1.5.3.20060726092219 Here is the minimum code the reproduce the\n                behavior. // Main.java package test; import java.io.IOException; public class Main { public void\n                testMethod() throws IOException { methodThatThrows(); } public static void methodThatThrows() throws\n                IOException { System.out.println(\"Inside method that may throw an IOException\"); } } //\n                IOExceptionInjector.aj package test; import java.io.IOException; public aspect IOExceptionInjector {\n                pointcut faultInjection() : call(void methodThatThrows() throws IOException); void around() throws\n                IOException : faultInjection() { throw new IOException(\"Exception injected by aspect.\"); } }\n                1. Modify something in Main.java (add and delete a space, for example). 2. Save to compile incremetally.\n                An error is issued for the call to methodThatThrows() stating \"Severity and Description Path\n                Resource Location Creation Time Id can't throw checked exception 'java.io.IOException' at this join\n                point 'method-call(void test.Main.methodThatThrows())' IncrementalCompilerHandlingException/src/test\n                Main.java line 7 1154196826350 7956 \" Do a full rebuild and the error goes away.\n            ","95529":"for M4 note: need to think some if we want to jit the concrete aspect, or if its not that\n                needed ie that the shadow munger API allow us to do what we need (perhaps not easy to deal with\n                perClause and uniqueness enforcement of concrete-aspect name, but perhaps a burden as well to deal with\n                jit since then no bytecode can be grabbed from file system ie may confuse the bcel repository and\n                resolvedTypeX and alike) Ideas Andy ? I am more in favor of bytecode gen the concrete aspect there.\n                (that further means the underlying infra needs to support define class callbacks like \"acceptClass\"\n                thing used for ajc$Closure and alike when running LTW. I am ok with that)\n            ","72528":"I have an aspect that captures around() a pcd and returns an Object[], though the actual\n                methods being instrumented might return any valid POJO array, i understand that AspectJ will take care\n                of casting at assignment. I expected the following code to work properly, but at runtime i get a\n                java.lang.VerifyError as shown below: F:\\wd\\Hello>ajbrowser HelloWorld.lst java.lang.VerifyError:\n                (class: de/rohith/PrinterWorld, method: returnArrayWithCl oning signature: ()[Ljava/lang/Integer;)\n                Incompatible argument to function at de.rohith.HelloWorld.main(HelloWorld.java:18) Exception in thread\n                \"main\" I suspect the compiler fails to notice the return types of the methods being caught at\n                compile time. I have tested this code with both ajbrowser as well as AJDT, both result in the same error\n                output. -----------HelloWorldAspect.java--------------- package de.rohith; import java.lang.Object;\n                public aspect HelloWorldAspect { private int callDepth = -1; public HelloWorldAspect() { } pointcut\n                hello(): !within(HelloWorldAspect); pointcut method(): execution(public (*[]) de..*(..)); pointcut\n                cloning(): call(* java.lang.Object.clone()); declare warning: method() && hello(): \"*[]\n                returning method called\" ; Object[] around(): cflow(method()) && cloning() &&\n                hello() { print(\"\", thisEnclosingJoinPointStaticPart); Object[] ret = proceed(); return\n                (Object[])ret.clone(); } private void print(String prefix, Object message) { for (int i = 0, spaces =\n                callDepth * 2; i < spaces; i++) { System.out.print(\" \"); } System.out.println(prefix +\n                message); } } -----------PrinterWorld.java------------ package de.rohith; public class PrinterWorld {\n                private Integer[] intArray = new Integer[2]; public PrinterWorld() { } public void print() {\n                System.out.println(\"Hello World!\"); } public Integer returnInt() { return new Integer(3); }\n                public Integer[] returnArrayWithCloning() { for (int i = 0; i < intArray.length; i++) { intArray[i] =\n                new Integer(i++); } return (Integer[])intArray.clone(); } public Integer[] returnArrayWithoutCloning() {\n                return intArray; } } -----------HelloWorld.java------------ package de.rohith; public class HelloWorld {\n                public static void main(String[] args) { PrinterWorld p = new PrinterWorld(); p.print(); Integer i =\n                p.returnInt(); Integer[] intArray = p.returnArrayWithCloning(); Integer[] array2 =\n                p.returnArrayWithoutCloning(); } }\n            ","104218":"If I weave a class with Aspect1 using -Xreweavable then load-time weave it with Aspect2 (using\n                org.aspectj.weaver.loadtime.Aj) then Aspect1 is not rewoven. This is confirmed by the lack of weaveinfo\n                messages for Aspect1. This works for post-compile weaving although there are no explicit tests. Attached\n                is a reweavable test for binary weaving. It needs to be adapted to run under\n                org.aspectj.systemtest.ajc150.ataspectj.\n            ","151182":"Hi, I created a logging aspect for our application some time ago using 1.5.0 of AspectJ. I\n                enabled this from time to time using Load Time Weaving. I have recently recompiled the aspect using\n                1.5.2 and tried to run it also using the 1.5.2 weaver jar, but it fails with a NullPointerException.\n                This is part of one of the many stacktraces: 20 jul 2006 07:42:49,046 - java.lang.NullPointerException\n                20 jul 2006 07:42:49,062 - at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveParentTypeMungers(BcelWeaver.java:1367) 20 jul 2006 07:42:49,062\n                - at org.aspectj.weaver.bcel.BcelWeaver.weaveParentsFor(BcelWeaver.java:1237) 20 jul 2006 07:42:49,062 -\n                at org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1072) 20 jul 2006 07:42:49,062 - at\n                org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:284) 20 jul 2006 07:42:49,062\n                - at org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:212) 20 jul 2006\n                07:42:49,062 - at org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:65) 20 jul 2006 07:42:49,062 - at\n                org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter.transform(ClassPreProcessorAgentAdapter.java:55)\n                20 jul 2006 07:42:49,062 - at sun.instrument.TransformerManager.transform(Unknown Source) 20 jul 2006\n                07:42:49,062 - at sun.instrument.InstrumentationImpl.transform(Unknown Source) 20 jul 2006 07:42:49,062\n                - at java.lang.ClassLoader.defineClass1(Native Method) 20 jul 2006 07:42:49,062 - at\n                java.lang.ClassLoader.defineClass(Unknown Source) I then tried with the 1.5.0 weaver jar (although the\n                aspect was compiled using 1.5.2) and this ran without problems.\n            ","70008":"Using the spacewar example, the following works fine: ajdoc -private -d doc spacewar\n                coordination but the following breaks: ajdoc -public -d doc spacewar coordination The end of the failing\n                output is below. Display.html and Display.DisplayAspect.html were not generated as the types are not\n                public, so presumably the decorator shouldn't be looking for them in this case. > Decorating html\n                files... > Decorating C:\\aspectj1.2\\doc\\examples\\doc\\spacewar\\Debug.html... > Decorating\n                C:\\aspectj1.2\\doc\\examples\\doc\\spacewar\\Display.DisplayAspect.html. .. An internal error occured in\n                ajdoc Please copy the following text into an email message and send it, along with any additional\n                information you can add to: aspectj-dev@eclipse.org java.io.FileNotFoundException:\n                C:\\aspectj1.2\\doc\\examples\\doc\\spacewar\\Display.D isplayAspect.html (The system cannot find the file\n                specified) java.io.FileNotFoundException: C:\\aspectj1.2\\doc\\examples\\doc\\spacewar\\Display.D\n                isplayAspect.html (The system cannot find the file specified) at java.io.FileInputStream.open(Native\n                Method) at java.io.FileInputStream.<init>(FileInputStream.java:106) at java.io.FileReader.<init>(FileReader.java:55)\n                at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFile(HtmlDecorator. java:142) at\n                org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromDecl(HtmlDecora tor.java:115) at\n                org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromDecls(HtmlDecor ator.java:54) at\n                org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromInputFiles(Html Decorator.java:43) at\n                org.aspectj.tools.ajdoc.Main.main(Main.java:210)\n            ","61411":"Using AspectJ 1.2rc1 on Windows XP This report highlights a problem that I've seen using\n                ajdoc.bat on Windows but the issue applies equally to the ajc.bat and ajbrowser.bat files as well. The\n                %ASPECTJ_HOME%\\bin\\ajdoc.bat file that users run to launch the ajdoc tool imposes a limit of only 9\n                command line arguments that may be passed to the class org.aspectj.tools.ajdoc.Main. In scenarios where\n                there the -sourcepath, -classpath, -d etc options are used it is easy for these to \"eat up\"\n                the list of arguments that are passed into the JVM. A long list of packages entered at the end of the\n                ajdoc.bat command can be truncated or possibly even ignored (in which case an error message will be\n                output telling the user that no classes or packages have been specified). In order to prevent a limit\n                being put on the number of arguments passed to the launched JVM, the invocation line needs to end with\n                %* rather than the %1 %2 %3 %4 %5 %6 %7 %8 %9 list it currently uses. The proposed fix also *seems*\n                (could somebody else confirm this ?) to sort out another problem regarding the ajdoc.bat file which is\n                this : long semi- colon delimited paths supplied as the arguments for the -sourcepath and -classpath\n                options seem to get split apart and passed into the JVM as separate arguments unless the entire path\n                list is supplied inside quotes. This should not be necessary. It seems that the batch file processor\n                interprets the semi-colons in a path list as delimiters between arguments. Consequently each element in\n                the path list is treated as a separate argument instead of being part of one big string representing the\n                sourcepath or classpath.\n            ","70241":"See screenshots.","61536":"See following code: public class Test2 { public static void main(String args[]) {\n                System.out.println(\"Hi\"); } } aspect Aspect2 { // shouldn't one have to say, java..* instead\n                of java.. in the following?? // Note that the first advice (incorrect one) passes the front-end, but\n                does // not match, whereas the second one does match. I believe the front-end // should reject the first\n                one. before () : call( * java..(..)) && within(Test2) { System.out.println( \"Incorrect One:\n                Before a call of method in a java package \"); } before () : call( * java..*(..)) &&\n                within(Test2) { System.out.println( \"Correct One: Before a call of method in a java package \");\n                } }\n            ","148693":"'Number of LocalVariableTable attributes of Code attribute '<CODE>' (method 'public\n                static mypackage.MyAspect aspectOf() [(Unknown attribute org.aspectj.weaver.AjSynthetic)]') exceeds\n                number of local variable slots '0' ('There may be no more than one LocalVariableTable attribute per\n                local variable in the Code attribute.').'. ================================================= package\n                mypackage; public aspect MyAspect { pointcut executeMethod(): within(TestClass) && execution(*\n                *(..)); before(): executeMethod() { System.out.println(\"Enter \"+thisJoinPointStaticPart); }\n                after(): executeMethod() { System.out.println(\"Leave \"+thisJoinPointStaticPart); } } class\n                TestClass { public static void main(String[] args) { } }\n                ================================================ JustIce by Enver Haase, (C) 2001-2002. <http://bcel.sourceforge.net>\n                <http://jakarta.apache.org/bcel> Now verifying: mypackage.TestClass Pass 1: VERIFIED_OK Passed\n                verification. Pass 2: VERIFIED_OK Passed verification. Pass 3a, method number 0 ['public void <init>()']:\n                VERIFIED_OK Passed verification. Pass 3b, method number 0 ['public void <init>()']: VERIFIED_OK\n                Passed verification. Pass 3a, method number 1 ['public static void main(String[] args) [(Unknown\n                attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46)]']: VERIFIED_REJECTED\n                Instruction invokestatic[184](3) 28 constraint violated: Return type class/interface could not be\n                verified successfully: 'Number of LocalVariableTable attributes of Code attribute '<CODE>' (method\n                'public static mypackage.MyAspect aspectOf() [(Unknown attribute org.aspectj.weaver.AjSynthetic)]')\n                exceeds number of local variable slots '0' ('There may be no more than one LocalVariableTable attribute\n                per local variable in the Code attribute.').'. Pass 3b, method number 1 ['public static void\n                main(String[] args) [(Unknown attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00\n                00 00 46)]']: VERIFIED_NOTYET Not yet verified. Pass 3a, method number 2 ['static void <clinit>()']:\n                VERIFIED_OK Passed verification. Pass 3b, method number 2 ['static void <clinit>()']: VERIFIED_OK\n                Passed verification. Warnings: Pass 2: Attribute '(Unknown attribute org.aspectj.weaver.WeaverVersion:\n                00 03 00 00 00 00 00 00 00 00... (truncated))' as an attribute of the ClassFile structure 'public class\n                mypackage.TestClass extends java.lang.Object filename mypackage.TestClass compiled from TestClass.java\n                compiler version 46.0 access flags 33 constant pool 69 entries ACC_SUPER flag true Attribute(s):\n                SourceFile(TestClass.java) (Unknown attribute org.aspectj.weaver.WeaverVersion: 00 03 00 00 00 00 00 00\n                00 00... (truncated)) (Unknown attribute org.aspectj.weaver.WeaverState: 53 00 00 00 01 00 12 6d 79\n                70... (truncated)) 1 fields: private static final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0 3\n                methods: public void <init>() public static void main(String[] args) [(Unknown attribute\n                org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46)] static void <clinit>() '\n                is unknown and will therefore be ignored. Pass 2: Attribute '(Unknown attribute\n                org.aspectj.weaver.WeaverState: 53 00 00 00 01 00 12 6d 79 70... (truncated))' as an attribute of the\n                ClassFile structure 'public class mypackage.TestClass extends java.lang.Object filename\n                mypackage.TestClass compiled from TestClass.java compiler version 46.0 access flags 33 constant pool 69\n                entries ACC_SUPER flag true Attribute(s): SourceFile(TestClass.java) (Unknown attribute\n                org.aspectj.weaver.WeaverVersion: 00 03 00 00 00 00 00 00 00 00... (truncated)) (Unknown attribute\n                org.aspectj.weaver.WeaverState: 53 00 00 00 01 00 12 6d 79 70... (truncated)) 1 fields: private static\n                final org.aspectj.lang.JoinPoint$StaticPart ajc$tjp_0 3 methods: public void <init>() public\n                static void main(String[] args) [(Unknown attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00\n                00 00 05 00 00 00 46)] static void <clinit>() ' is unknown and will therefore be ignored. Pass 2:\n                Attribute '<LocalVariableTable: LocalVariable(start_pc = 0, length = 5, index = 0:mypackage.TestClass\n                this)>' as an attribute of Code attribute '<CODE>' (method 'public void <init>()') will\n                effectively be ignored and is only useful for debuggers and such. Pass 2: Attribute '<LineNumberTable:\n                LineNumber(0, 3)>' as an attribute of Code attribute '<CODE>' (method 'public void <init>()')\n                will effectively be ignored and is only useful for debuggers and such. Pass 2: Attribute '(Unknown\n                attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46)' as an attribute of\n                Method 'public static void main(String[] args) [(Unknown attribute\n                org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46)]' is unknown and will therefore\n                be ignored. Pass 2: Attribute '(Unknown attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00\n                00 05 00 00 00 46)' as an attribute of Method 'public static void main(String[] args) [(Unknown\n                attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46)]' is neither Code nor\n                Exceptions and is therefore only of use for debuggers and such. Pass 2: Unknown attribute '(Unknown\n                attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46)'. This attribute is\n                not known in any context! Pass 2: Attribute '<LocalVariableTable: LocalVariable(start_pc = 9, length\n                = 0, index = 0:String[] args)>' as an attribute of Code attribute '<CODE>' (method 'public\n                static void main(String[] args) [(Unknown attribute org.aspectj.weaver.MethodDeclarationLineNumber: 00\n                00 00 05 00 00 00 46)]') will effectively be ignored and is only useful for debuggers and such. Pass 2:\n                Attribute '<LineNumberTable: LineNumber(9, 6)>' as an attribute of Code attribute '<CODE>'\n                (method 'public static void main(String[] args) [(Unknown attribute\n                org.aspectj.weaver.MethodDeclarationLineNumber: 00 00 00 05 00 00 00 46)]') will effectively be ignored\n                and is only useful for debuggers and such. Pass 2: Class or interface initialization method 'static void\n                <clinit>()' has superfluous access modifier(s) set: everything but ACC_STRICT is ignored. Pass 2:\n                Attribute '<LineNumberTable: LineNumber(0, 1)>' as an attribute of Code attribute '<CODE>'\n                (method 'static void <clinit>()') will effectively be ignored and is only useful for debuggers and\n                such. Pass 2: Unknown attribute '(Unknown attribute org.aspectj.weaver.WeaverVersion: 00 03 00 00 00 00\n                00 00 00 00... (truncated))'. This attribute is not known in any context! Pass 2: Unknown attribute\n                '(Unknown attribute org.aspectj.weaver.WeaverState: 53 00 00 00 01 00 12 6d 79 70... (truncated))'. This\n                attribute is not known in any context!\n            ","82218":"Using AJDT 1.2.0M2 {with Java 5 JRE on XP SP2}, install Spacewar example and generate to\n                Spacewar/docs. Result: output has no cross-references (and displays special AJDT tags), and stderr lists\n                this exception: java.lang.StringIndexOutOfBoundsException: String index out of range: -1 at\n                java.lang.AbstractStringBuilder.insert(AbstractStringBuilder.java:980) at\n                java.lang.StringBuffer.insert(StringBuffer.java:447) at\n                org.aspectj.tools.ajdoc.HtmlDecorator.insertDeclarationsDetails(HtmlDecorator.java:350) at\n                org.aspectj.tools.ajdoc.HtmlDecorator.addAspectDocumentation(HtmlDecorator.java:234) at\n                org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFile(HtmlDecorator.java:188) at\n                org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromDecl(HtmlDecorator.java:116) at\n                org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromDecls(HtmlDecorator.java:54) at\n                org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromInputFiles(HtmlDecorator.java:43) at\n                org.aspectj.tools.ajdoc.Main.main(Main.java:210)\n            ","83303":"Given this scenario: - class A define method m1 (with proteceted visibility) - class B extends\n                class A and implements interface I and override method m1 (but with public visibility) - interface I\n                define method m1 (with public visibility) The code is correct and compile using java 1.4 Let's modify\n                the scenario: move the method B.m1 into a method introduction on aspect C, such that - class B extends\n                class A - apsect C intosuces method m1 into B (with public visibility) and makes B implemts I (declare\n                parents) - A and I as before The compiler reports this error: B.java:1 [error] The inherited method\n                A.m1() cannot hide the public abstract method in I class B extends A {\n            ","82570":"I am attempting to use AspectJ and output all classes in debug mode (required by our code\n                coverage instrumentor). However any code introduced by our aspects to production classes does not\n                include debug line information. Our ant script uses the iajc task as follows: <iajc ... debug=\"true\"\n                .. /> We have an aspect that introduces a public, no-arguments constructor into various classes. If I\n                enable this aspect, then do a clean build, I get the following error from our code coverage tool:\n                [jblanket] java.lang.UnsupportedOperationException: No line numbers detected in\n                com.abmuk.oms.core.model.core.XMLObject.<init>. Either remove the 'oneLineFile' tag or turn debug\n                on when compiling. If I remove that aspect, we get no errors about debug line information. I've tried\n                debug=\"true\" or debugLevel=\"lines,vars,source\", with no success. This issue is\n                preventing our Unit Test suite from executing. If you require any further information, please don't\n                hesitate to email me. Cheers, Chris Nappin.\n            ","152388":"I get this message from an error in a recent dev build of AspectJ with load-time weaving. I\n                don't know how there is a null source location associated with this message, but either it shouldn't be\n                there or MessageUtil line 806 should use this patch: Index: src/org/aspectj/bridge/MessageUtil.java\n                =================================================================== RCS file:\n                /home/technology/org.aspectj/modules/bridge/src/org/aspectj/bridge/MessageUtil.java,v retrieving\n                revision 1.11 diff -u -r1.11 MessageUtil.java --- src/org/aspectj/bridge/MessageUtil.java 1 Jun 2006\n                09:36:37 -0000 1.11 +++ src/org/aspectj/bridge/MessageUtil.java 31 Jul 2006 22:32:16 -0000 @@ -803,7\n                +803,7 @@ writer.println(baseMessage); for (Iterator iter =\n                message.getExtraSourceLocations().iterator(); iter.hasNext();) { ISourceLocation element =\n                (ISourceLocation) iter.next(); - writer.print(\"\\tsee also: \" + element.toString()); +\n                writer.print(\"\\tsee also: \" + element); if (iter.hasNext()) { writer.println(); } NPE follows:\n                java.lang.NullPointerException at\n                org.aspectj.bridge.MessageUtil.addExtraSourceLocations(MessageUtil.java:806) at\n                org.aspectj.bridge.MessageUtil.renderMessage(MessageUtil.java:793) at\n                org.aspectj.bridge.Message.toString(Message.java:177) at\n                org.aspectj.bridge.MessageWriter.render(MessageWriter.java:73) at\n                org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHandler.render(WeavingAdaptor.java:471) at\n                org.aspectj.bridge.MessageWriter.handleMessage(MessageWriter.java:41) at\n                org.aspectj.weaver.tools.WeavingAdaptor$WeavingAdaptorMessageHandler.handleMessage(WeavingAdaptor.java:425)\n                at org.aspectj.weaver.bcel.BcelTypeMunger.error(BcelTypeMunger.java:378) at\n                org.aspectj.weaver.bcel.BcelTypeMunger.enforceDecpRule1_abstractMethodsImplemented(BcelTypeMunger.java:273)\n                at org.aspectj.weaver.bcel.BcelTypeMunger.mungeNewParent(BcelTypeMunger.java:194) at\n                org.aspectj.weaver.bcel.BcelTypeMunger.munge(BcelTypeMunger.java:106) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:450) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:115) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1613) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1564) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1341) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1163) at\n                org.aspectj.weaver.tools.WeavingAdaptor.getWovenBytes(WeavingAdaptor.java:288) at\n                org.aspectj.weaver.tools.WeavingAdaptor.weaveClass(WeavingAdaptor.java:214) at\n                org.aspectj.weaver.loadtime.Aj.preProcess(Aj.java:76) at\n                org.aspectj.ext.ltw13.ClassPreProcessorAdapter.preProcess(ClassPreProcessorAdapter.java:65) at\n                org.codehaus.aspectwerkz.hook.impl.ClassPreProcessorHelper.defineClass0Pre(ClassPreProcessorHelper.java:107)\n                at java.lang.ClassLoader.defineClass(ClassLoader.java:539) ... NOTE: I'm using Alex Vasseur's adaptor to\n                invoke AspectJ LTW from a 1.4 VM, but with recursion protection added. I don't think that should change\n                the expected behavior of Aj.\n            ","69011":"When trying to document classes that are in the default package, the following error occurs:\n                > Calling ajc... > Building signature files... > Calling javadoc... Loading source file\n                C:\\eclipse_RC3\\eclipse\\ajdocworkingdir\\A.java... C:\\eclipse_RC3\\eclipse\\ajdocworkingdir\\A.java:1: <identifier>\n                expected package ; ^ 1 error > Decorating html files... > Decorating C:\\doc\\classX.html... An\n                internal error occured in ajdoc Please copy the following text into an email message and send it, along\n                with any additional information you can add to: aspectj-dev@eclipse.org java.io.FileNotFoundException:\n                C:\\doc\\classX.html (The system cannot find the file specified) java.io.FileNotFoundException:\n                C:\\doc\\classX.html (The system cannot find the file specified) at java.io.FileInputStream.open(Native\n                Method) at java.io.FileInputStream.<init>(FileInputStream.java:106) at java.io.FileReader.<init>(FileReader.java:55)\n                at org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFile (HtmlDecorator.java:142) at\n                org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromDecl (HtmlDecorator.java:115) at\n                org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromDecls (HtmlDecorator.java:54) at\n                org.aspectj.tools.ajdoc.HtmlDecorator.decorateHTMLFromInputFiles (HtmlDecorator.java:43) at\n                org.aspectj.tools.ajdoc.Main.main(Main.java:210)\n            ","47952":"SoftExceptions should print not only their trace but also that of the wrapped throwable. We\n                should be able to set a flag on class initialization whether we are running under 1.4 and then implement\n                it under 1.4 using initCause() and otherwise by direct delegation. I can do this fix if we're agreed.\n            ","49457":"The compiler might not be detecting overloaded pointcut names when parameters are not bound,\n                and/or might not be implementing the pointcut correctly. Below is the context from my reply to Ron\n                Bodkin on aspectj-dev \"Proper behavior of overloaded pointcut definitions\". (I have not\n                checked this code recently or submitted a test case, nor have I evaluated whether my code below actually\n                replicates Ron's bug.) ---- context from the email The programming guide says, It is an error for two\n                pointcuts to be named with the same name in the same class or aspect declaration. When I compile with\n                overloaded pointcut names, I do get an error. pointcut pc(Runnable r) : target(r) && call(void\n                run()); pointcut pc(SubRunnable r) : target(r) && call(void run()); $ aspectj-1.1.1 -classpath\n                $ajrt11 OverloadedPointcut.java ...\\OverloadedPointcut.java:14 duplicate pointcut name: pc\n                ...\\OverloadedPointcut.java:15 duplicate pointcut name: pc ... When I use these pointcuts with bound\n                parameters, I get an error. before(Runnable r) : pc(r) { log(\"pc(Runnable r)\"); }\n                before(SubRunnable r) : pc(r) { log(\"pc(SubRunnable r)\"); } When I use these pointcuts with\n                type parameters, I get no errors. before() : pc(Runnable) { log(\"pc(Runnable)\"); } before() :\n                pc(SubRunnable) { log(\"pc(SubRunnable)\"); } before() : pc(*) { log(\"pc(*)\"); } [...]\n                ---- my code public class OverloadedPointcut { public static void main(String[] args) { new C().run(); }\n                } class C { public void run() {} } aspect A { declare parents: C implements Runnable; declare parents: C\n                implements SubRunnable; interface SubRunnable extends Runnable {} pointcut pc(Runnable r) : target(r)\n                && call(void run()); pointcut pc(SubRunnable r) : target(r) && call(void run());\n                before(Runnable r) : pc(r) { log(\"pc(Runnable r)\"); } before(SubRunnable r) : pc(r) { log(\"pc(SubRunnable\n                r)\"); } before() : pc(Runnable) { log(\"pc(Runnable)\"); } before() : pc(SubRunnable) {\n                log(\"pc(SubRunnable)\"); } before() : pc(*) { log(\"pc(*)\"); } void log(String s) {\n                System.out.println(s); } } ---- Ron's code [...] the following program compiles with no warnings,\n                produces no output when run under AspectJ 1.1.1. It appears to behave as if the more specific definition\n                is the only definition of the pointcut [...] Here is a simple program that illustrates the question and\n                odd behavior: package lib; public class RunnablePointcuts { public pointcut runnableCalls(Runnable\n                runnable, Object caller) : call(* run(..)) && target(runnable) && this(caller); //public\n                pointcut specialRunnableCalls(SpecialRunnable runnable, Object caller) : public pointcut\n                runnableCalls(SpecialRunnable runnable, Object caller) : call(* run(..)) && target(runnable)\n                && this(caller); } --- package lib; public interface SpecialRunnable extends Runnable { } ---\n                package client; import lib.RunnablePointcuts; import lib.SpecialRunnable; public aspect Use {\n                before(Object caller) : RunnablePointcuts.runnableCalls(*, caller) && target(MyRunnable) {\n                System.out.println(\"my runnable called from \"+caller); } public static void main(String\n                args[]) { Use.aspectOf().doIt(); } public void doIt() { new MyRunnable().run(); } } // the advice will\n                run if you make this implement SpecialRunnable //class MyRunnable implements SpecialRunnable { class\n                MyRunnable implements Runnable { public void run() {} }\n            ","128655":"AJDT version: 1.3.1 (20060214104738) AspectJ version: 1.5.1.20060131132251 Not very sure of the\n                reason and couldn't reproduce on a smaller code base. The compiler crashes on incremental compilation,\n                but never when I do full \"clean\" build. Here is the stack trace:\n                java.lang.NullPointerException at\n                org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodBinding.getAnnotationTagBits(MethodBinding.java:447)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareAnnotations(AjLookupEnvironment.java:754)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:571)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:498)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doPendingWeaves(AjLookupEnvironment.java:365)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:179)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:301) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:315) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:824) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:258) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:164) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n                NullPointerException thrown: null\n            ","72671":"I have following bug running eclipse 3.0 and ajdt 1.1.12 I have following class: import\n                java.io.FileNotFoundException; import java.io.FileOutputStream; import org.w3c.dom.DOMConfiguration;\n                import org.w3c.dom.DOMError; import org.w3c.dom.DOMErrorHandler; import org.w3c.dom.Document; import\n                org.w3c.dom.DocumentFragment; import org.w3c.dom.NodeList; import org.w3c.dom.ls.DOMImplementationLS;\n                import org.w3c.dom.ls.LSInput; import org.w3c.dom.ls.LSOutput; import org.w3c.dom.ls.LSParser; import\n                com.dcbank.common.DOMImplementationLSSingleton; public class DOMHelper { public static final String\n                CLASS_ID = \"%full_filespec: DOMHelper.java~1:java:1 %\"; public static void save(Document\n                document, String filename) throws ClassNotFoundException, InstantiationException,\n                IllegalAccessException, FileNotFoundException { document.normalizeDocument(); } } which compiles very\n                fine with JDK 1.4.2_02 on Windows XP, as soon as the dom2-xml-apis.jar and dom3-xercesImpl.jar are added\n                at the beginning of the jre container, or are included in the jar-library list before the system jar. As\n                soon as I convert this project to an AspectJ project, the code does not compile anymore. The aspectJ\n                compiler does not find the normalizeDocument, which is included in the one of the two additional jars.\n                method any more. kind regards Arno Schmidmeier\n            ","147801":"I get a ClassFormatError trying to perform runtime-weaving on a DB2 class. The class being\n                woven is COM.ibm.db2.jdbc.app.DB2PreparedStatement. The full message exception is:\n                java.lang.ClassFormatError: Repetitive method name/signature in class file\n                COM/ibm/db2/jdbc/app/DB2PreparedStatement. In examining the post-weave class file, it looks as if\n                Aspectj is defining a duplicate method within the class called getParameterMetaData(). Here are the\n                messages from the weaver: 04:21:13,640 INFO [STDOUT] info weaving\n                'COM.ibm.db2.jdbc.app.DB2CallableStatement' 04:21:13,640 INFO [STDOUT] info weaver operating in\n                reweavable mode. Need to verify any required types exist. 04:21:13,671 INFO [STDOUT] info weaving\n                'COM.ibm.db2.jdbc.app.DB2PreparedStatement' 04:21:13,671 INFO [STDOUT] info weaver operating in\n                reweavable mode. Need to verify any required types exist. 04:21:13,703 INFO [STDOUT] weaveinfo Join\n                point 'method-execution(java.sql.ResultSet COM.ibm.db2.jdbc.app.DB2PreparedStatement.executeQuery())' in\n                Type 'COM.ibm.db2.jdbc.app.DB2PreparedStatement' (DB2PreparedStatement.java:1679) advised by before\n                advice from 'com.ibm.tivoli.itcam.toolkit.ai.aspectj.captureJDBC.CaptureSQLStatement'\n                (CaptureSQLStatement.aj:747) [with runtime test] 04:21:13,703 INFO [STDOUT] weaveinfo Join point\n                'method-execution(java.sql.ResultSet COM.ibm.db2.jdbc.app.DB2PreparedStatement.executeQuery())' in Type\n                'COM.ibm.db2.jdbc.app.DB2PreparedStatement' (DB2PreparedStatement.java:1679) advised by afterReturning\n                advice from 'com.ibm.tivoli.itcam.toolkit.ai.aspectj.captureJDBC.CaptureSQLStatement'\n                (CaptureSQLStatement.aj:946) [with runtime test] 04:21:13,718 INFO [STDOUT] weaveinfo Join point\n                'method-execution(java.sql.ResultSet COM.ibm.db2.jdbc.app.DB2PreparedStatement.executeQuery())' in Type\n                'COM.ibm.db2.jdbc.app.DB2PreparedStatement' (DB2PreparedStatement.java:1679) advised by afterThrowing\n                advice from 'com.ibm.tivoli.itcam.toolkit.ai.aspectj.captureJDBC.CaptureSQLStatement'\n                (CaptureSQLStatement.aj:971) [with runtime test] 04:21:13,718 INFO [STDOUT] weaveinfo Join point\n                'method-execution(boolean COM.ibm.db2.jdbc.app.DB2PreparedStatement.execute())' in Type\n                'COM.ibm.db2.jdbc.app.DB2PreparedStatement' (DB2PreparedStatement.java:3971) advised by before advice\n                from 'com.ibm.tivoli.itcam.toolkit.ai.aspectj.captureJDBC.CaptureSQLStatement'\n                (CaptureSQLStatement.aj:833) [with runtime test] 04:21:13,718 INFO [STDOUT] weaveinfo Join point\n                'method-execution(boolean COM.ibm.db2.jdbc.app.DB2PreparedStatement.execute())' in Type\n                'COM.ibm.db2.jdbc.app.DB2PreparedStatement' (DB2PreparedStatement.java:3971) advised by afterReturning\n                advice from 'com.ibm.tivoli.itcam.toolkit.ai.aspectj.captureJDBC.CaptureSQLStatement'\n                (CaptureSQLStatement.aj:946) [with runtime test]\n            ","117882":"Test program included and stack trace shown below: java.lang.NullPointerException at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doDeclareAnnotations(AjLookupEnvironment.java:742)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:556)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:483)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.doPendingWeaves(AjLookupEnvironment.java:350)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.completeTypeBindings(AjLookupEnvironment.java:177)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:301) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:315) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:809) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:254) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:163) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n                NullPointerException thrown: null\n            ","30168":"This program causes the java VM to crash. It is a minimal example -- if you remove anything in\n                the aspects it works. 1. PROGRAM CODE package test; import org.aspectj.lang.*; import\n                org.aspectj.lang.reflect.*; public class Test3 { public static void main(String[] args) throws Exception\n                { Test3 a = new Test3(); a.foo(-3); } public void foo(int i) { this.x=i; } int x; } aspect Log {\n                pointcut assign(Object newval, Object targ): set(* test..*) && args(newval) &&\n                target(targ); before(Object newval, Object targ): assign(newval,targ) { Signature sign =\n                thisJoinPoint.getSignature(); System.out.println(targ.toString() + \".\" + sign.getName() +\n                \":=\" + newval); } /* } // Different error message if you divide into two aspects aspect\n                Tracing { */ pointcut tracedCall(): call(* test..*(..))/* && !within(Tracing)*/ &&\n                !within(Log); after() returning (Object o): tracedCall() { // Works if you comment out either of these\n                two lines thisJoinPoint.getSignature(); System.out.println(thisJoinPoint); } } 2. RESULTS ON SOLARIS\n                [erik@oden test] java test.Test3 test.Test3@b8df17.x:=-3 Unexpected Signal : 11 occurred at\n                PC=0xFA415A00 Function=[Unknown.] Library=(N/A) NOTE: We are unable to locate the function name symbol\n                for the error just occurred. Please refer to release documentation for possible reason and solutions.\n                Current Java thread: Dynamic libraries: 0x10000 java 0xff350000 /usr/lib/libthread.so.1 0xff390000\n                /usr/lib/libdl.so.1 0xff200000 /usr/lib/libc.so.1 0xff330000\n                /usr/platform/SUNW,Ultra-250/lib/libc_psr.so.1 0xfe000000 /usr/j2se/jre/lib/sparc/client/libjvm.so\n                0xff2e0000 /usr/lib/libCrun.so.1 0xff1e0000 /usr/lib/libsocket.so.1 0xff100000 /usr/lib/libnsl.so.1\n                0xff0d0000 /usr/lib/libm.so.1 0xff310000 /usr/lib/libw.so.1 0xff0b0000 /usr/lib/libmp.so.2 0xff080000\n                /usr/j2se/jre/lib/sparc/native_threads/libhpi.so 0xff050000 /usr/j2se/jre/lib/sparc/libverify.so\n                0xff020000 /usr/j2se/jre/lib/sparc/libjava.so 0xfe7e0000 /usr/j2se/jre/lib/sparc/libzip.so 0xfe5b0000\n                /usr/lib/locale/sv_SE/sv_SE.so.2 Local Time = Fri Jan 24 13:38:29 2003 Elapsed Time = 2 # # HotSpot\n                Virtual Machine Error : 11 # Error ID : 4F530E43505002D3 01 # Please report this error at #\n                http://java.sun.com/cgi-bin/bugreport.cgi # # Java VM: Java HotSpot(TM) Client VM (1.4.0-b92 mixed mode)\n                # # An error report file has been saved as hs_err_pid15099.log. # Please refer to the file for further\n                information. # Abort [erik@oden test] [erik@oden test] /usr/j2se.old/bin/java test.Test3\n                test.Test3@1afa3.x:=-3 Unexpected Signal : 11 occurred at PC=0x85c24 Function name=(N/A) Library=(N/A)\n                NOTE: We are unable to locate the function name symbol for the error just occurred. Please refer to\n                release documentation for possible reason and solutions. Current Java thread: Dynamic libraries: 0x10000\n                /usr/j2se.old/bin/../bin/sparc/native_threads/java 0xff350000 /usr/lib/libthread.so.1 0xff390000\n                /usr/lib/libdl.so.1 0xff200000 /usr/lib/libc.so.1 0xff330000\n                /usr/platform/SUNW,Ultra-250/lib/libc_psr.so.1 0xfe480000 /usr/j2se.old/jre/lib/sparc/client/libjvm.so\n                0xff2e0000 /usr/lib/libCrun.so.1 0xff1e0000 /usr/lib/libsocket.so.1 0xff100000 /usr/lib/libnsl.so.1\n                0xff0d0000 /usr/lib/libm.so.1 0xff310000 /usr/lib/libw.so.1 0xff0b0000 /usr/lib/libmp.so.2 0xff080000\n                /usr/j2se.old/jre/lib/sparc/native_threads/libhpi.so 0xff050000 /usr/j2se.old/jre/lib/sparc/libverify.so\n                0xfe440000 /usr/j2se.old/jre/lib/sparc/libjava.so 0xff020000 /usr/j2se.old/jre/lib/sparc/libzip.so\n                0xfe260000 /usr/lib/locale/sv_SE/sv_SE.so.2 Local Time = Fri Jan 24 13:39:20 2003 Elapsed Time = 2 # #\n                HotSpot Virtual Machine Error : 11 # Error ID : 4F530E43505002C4 01 # Please report this error at #\n                http://java.sun.com/cgi-bin/bugreport.cgi # # Java VM: Java HotSpot(TM) Client VM (1.3.1_02-b02 mixed\n                mode) # # An error report file has been saved as hs_err_pid15100.log. # Please refer to the file for\n                further information. # Abort [erik@oden test] 3. RESULTS ON WINDOWS 2000 Results on Windows 2000 (If I\n                have copied it correctly) >java -classpath ..\\..\\aspectj1.1\\lib\\aspectjrt.jar;. test.Test3\n                test.Test3@1a8c4e7.x:=-3 Exception in thread \"main\" java.lang.NullPointerException at\n                test.Log.ajc$afterReturning$test_Log$30d(Test3.java:37) at test.Test3.main(Test3.java:8) >java\n                -version java version \"1.4.1_01\" Java(TM) 2 Runtime Environment, Standard Edition (build\n                1.4.1_01-b01) Java HotSpot(TM) Client VM (build 1.4.1_01-b01, mixed mode) java\n            ","52394":"BEA's JRockit JVM (version: 8.1sp2-1.4.1_05-Load10-viking-win32-sthqa29-20031105-1554) crashes\n                on simple inter-type declarations. (Obviously I have also submitted this bug to BEA, but the AJ team may\n                be able to shed some light on what is going on and where (if anywhere) BEA's JVM is behaving wrong.) The\n                cannonical example lies below: public class SimpleClass { public static void main(String[] args) {\n                SimpleClass simple = new SimpleClass(); } } public aspect SimpleAspect { public int SimpleClass.foo; }\n                When running SimpleClass I get a JVM crash with the following thread stack trace. Thread Stack Trace: at\n                _exprPush+112 ()@0082FF70 at COM.jrockit.vm.RNI.toNative(Native Method)@32520000 at\n                COM.jrockit.vm.RNI.clinitTrampoline(Native Method)@325200FA at com.vms.adbase.jvmcrashtest.SimpleClass.<init>(SimpleClass.java:4)@344B0055\n                at com.vms.adbase.jvmcrashtest.SimpleClass.main(SimpleClass.java:6)@344B0034 --- End of stack trace Feel\n                free to ask me for further details. JRockit can be downloaded at:\n                http://commerce.bea.com/showallversions.jsp?family=WLJR. I reproduced this error on Windows XP, but it\n                also happend on RedHat. Is it worth adding JRockit to AspectJ's compatibility test suite?\n            ","32463":"Version: AspectJ Compiler 1.1beta4 The ajc compiler issues a spurious error message and exits\n                with a negative error code when weaving code containing static declaration of a nested class. The\n                compiler seem to write the classfiles correctly but the negative exit status causes problems when e.g.\n                using the AjcCompilerAdapter in ant. To reproduce: 1) Extract the following two files into an empty\n                directory: // File: A.aj: aspect A { pointcut withinTest(): within(Test); pointcut callToHandleOrder() :\n                (withinTest() && call(* handleOrder(..))); Object around(): callToHandleOrder() { return \"DUMMY\n                inserted by ASPECT\" ; } } // End of File A.aj // File : Test.java public class Test { // Commenting\n                out the static declaration makes everything work OK static { class StaticNestedClass { } } public static\n                void main(String[] args) { System.out.println(new Test().handleOrder(\"test\")); } private\n                String handleOrder(String t) { return t; } } // End of Test.java 2) Compile the files ajc -sourceroots .\n                -verbose Output: ----- compiling c:/aspectj1.1/doc/examples/bug/./A.aj compiling\n                c:/aspectj1.1/doc/examples/bug/./Test.java weaving might need to weave [UnwovenClassFile(null,\n                Test$1$StaticNestedClass), UnwovenClassFile(null, A), UnwovenClassFile(null, Test)](world=true) wrote\n                class file: c:\\aspectj1.1\\doc\\examples\\bug\\A.class can't find type Test$1 wrote class file:\n                c:\\aspectj1.1\\doc\\examples\\bug\\Test$1$StaticNestedClass.class wrote class file:\n                c:\\aspectj1.1\\doc\\examples\\bug\\Test.class 1 error ------\n            ","120363":"According to the specification\n                (http://www.eclipse.org/aspectj/doc/next/adk15notebook/ltw-configuration.html) \"The set of types to\n                be woven are those types matched by at least one weaver include element and not matched by any weaver\n                exclude element.\" However if an includ elemement can be fast matched e.g. \"com.foo..*\"\n                any exclude elements are ignored (see bug 117854). There is no explicit test in the harness for this\n                feature.\n            ","125810":"An error is issued when a sub-aspect does not implement an inherited abstract pointcut. This is\n                missing for a sub-@aspect.\n            ","149305":"Compiling following code placed in different packages causes unexpected error.\n                ====================================================== package com.codesrc.ozonator; import\n                org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.Around; import\n                org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Pointcut; import\n                com.codesrc.ozonator.identity.User; @Aspect public abstract class AbstractOzonator { @Pointcut(\"\")\n                protected abstract void readMethodExecution(); @Pointcut(\"readMethodExecution() &&\n                this(ozonated)\") private void ozonatedReadExecution(Object ozonated){}; @Around(\"ozonatedReadExecution(ozonated)\")\n                public Object aroundGetterCallNoRecurse( ProceedingJoinPoint thisJoinPoint, Object ozonated) throws\n                Throwable { System.out.println(\"thisJoinPoint=\"+thisJoinPoint+\", ozonated=\"+ozonated);\n                return thisJoinPoint.proceed(); } } -------------------------------------------------------------\n                package com.codesrc.ozonator.identity; import org.aspectj.lang.annotation.Aspect; import\n                org.aspectj.lang.annotation.Pointcut; import com.codesrc.ozonator.AbstractOzonator; @Aspect public class\n                IdentityOzonator extends AbstractOzonator { @Pointcut(\"execution(public *\n                com.codesrc.ozonator.identity.User+.get*(..)) \") protected void readMethodExecution() {} }\n                ========================================================================\n                /home/kei/tmp/0/t3/src/com/codesrc/ozonator/identity/IdentityOzonator.java:1 [error] the parameter\n                thisJoinPoint is not bound in [all branches of] pointcut (no source information available) If I place\n                all code into one package, then the code is being compiled successfuly. This bag looks like Bug 125699,\n                but I use aspectj-1.5.2.rc1.\n            ","101047":"AspectJ version: DEVELOPMENT (also observed in 1.2.1) When weaving with a before or after\n                advice, the generated local variable table will, on branch instructions, offset the \"length\"\n                field of a local variable wrongly by one instruction. Also, the weaver will mix up local variables with\n                the same name, thus violating the java VM specification: // Test.aj aspect Test { before() : (\n                execution(* Foo.foo(..) ) ) { System.out.println(\"before\"); } // Foo.java public class Foo {\n                private String myString = \"A String\"; public static void main(String[] args) { new\n                Foo().foo(); } private void foo() { String myLocal = myString; if (myLocal.endsWith(\"X\")) {\n                String local1 = \"local1\"; System.out.println(local1); } else if (myLocal.endsWith(\"Y\"))\n                { String local2 = \"local2\"; System.out.println(local2); } else { String local1 = \"local3\";\n                System.out.println(local1); } } } --- We compilw with ajc -sourceroots . and dumps Foo with javap: javap\n                -c -l -s -private Foo .... .... private void foo(); Signature: ()V Code: 0: invokestatic #65; //Method\n                Test.aspectOf:()LTest; 3: invokevirtual #68; //Method Test.ajc$before$Test$1$f0485e90:()V 6: aload_0 7:\n                getfield #15; //Field myString:Ljava/lang/String; 10: astore_1 11: aload_1 12: ldc #30; //String X 14:\n                invokevirtual #36; //Method java/lang/String.endsWith: (Ljava/lang/String;)Z 17: ifeq 33 20: ldc #38;\n                //String local1 22: astore_2 23: getstatic #44; //Field java/lang/System.out:Ljava/io/PrintStream; 26:\n                aload_2 27: invokevirtual #50; //Method java/io/PrintStream.println: (Ljava/lang/String;)V 30: goto 65\n                33: aload_1 34: ldc #52; //String Y 36: invokevirtual #36; //Method java/lang/String.endsWith:\n                (Ljava/lang/String;)Z 39: ifeq 55 42: ldc #54; //String local2 44: astore_2 45: getstatic #44; //Field\n                java/lang/System.out:Ljava/io/PrintStream; 48: aload_2 49: invokevirtual #50; //Method\n                java/io/PrintStream.println: (Ljava/lang/String;)V 52: goto 65 55: ldc #56; //String local3 57: astore_2\n                58: getstatic #44; //Field java/lang/System.out:Ljava/io/PrintStream; 61: aload_2 62: invokevirtual #50;\n                //Method java/io/PrintStream.println: (Ljava/lang/String;)V 65: return LineNumberTable: line 7: 6 line\n                8: 11 line 9: 20 line 10: 23 line 11: 33 line 12: 42 line 13: 45 line 15: 55 line 16: 58 line 18: 65\n                LocalVariableTable: Start Length Slot Name Signature 6 60 0 this LFoo; 11 55 1 myLocal\n                Ljava/lang/String; 45 12 2 local2 Ljava/lang/String; 23 43 2 local1 Ljava/lang/String; We see that the\n                two occurences of the \"local1\" variable erroneously have been combined into one entry,\n                starting at byte 23 and ending at byte 66. This is obviously wrong, since \"local1\" has no\n                value in the \"local2\" block. Secondly, the \"local2\" variable end is wrongly offset\n                by one instruction offset.\n            ","50776":"A first class (class A) declares only one method with some exceptions in the throws clause (\n                void m() throws Exception ). A second class (class B) extends it without redefinig the method. An aspect\n                declares a method introduction in the class B, with the same name, signature and return type of the one\n                in class A, but without throws clause; this is a legal override. In the second class (class B) each\n                invocation to the overriden method doesn't need a try-catch block, because it refers to his hown method\n                that raises no exception. This code compiles using ajc version 1.0.6 (built Jul 24, 2002 6:21 PM PST)\n                running on java 1.4.0 But not using AspectJ Compiler 1.1.1 AspectJ Compiler 1.1.0 class A{ public A(){}\n                public void m() throws Exception{} } class B extends A{ public B(){} public void some_code(){ m();} }\n                aspect C{ public void B.m(){} }\n            ","59909":"Problem: The current implementation of CFlowStack (Version 1.1-till 1.2 rc1) stores all threads\n                in a hashtable. These Threads are removes after several calls to the methods getThreadStack(). (In our\n                cases >70 calls.) In our project, this cycle is much to long. We have soveral long running threads,\n                which grap quite a lot of lot of memory. This memory can only be freed after the threads have been\n                removed from the CFlowStack. In our production code we sum up to more than 300 Threads stored in\n                different CFlowStack Varaibles. Often this results in out of memory Errors. Added patch provides an\n                improved freeing scheme. It checks if the size of the table has grown, if it has, it checks if it can\n                remove some threads.\n            ","87376":"see attached mini-project to reproduce","138540":"I needed to add X=\"set:activateLightweightDelegates=false? to my ant build configuration,\n                to troubleshoot the out of memory permgen condition. However, the ant task support doesn't currently\n                support adding the new -Xset style options Andy added. Here is a small patch to pass any -Xset: options\n                through, that worked for me.\n            ","67774":"Hi, I am getting null-pointer-exceptions whenever I try to specify a pointcut with a \"withincode(Signature)\"\n                clause. E.g.: public aspect DetectSystemOutErrorUsage { pointcut allSystemOutAndSystemErrAccesses():\n                (get(* System.out) || get(* System.err)) ; declare warning: allSystemOutAndSystemErrAccesses() &&\n                !adviceexecution() && !within(com.tivoli.act..Test*) && !within(com.tivoli.act.log..*)\n                && !execution(* com.tivoli.act..*.main(..)) && !execution(* com.tivoli.act..*.usage())\n                // && !withincode(* com.tivoli.act..*.main(..)) // && !withincode(*\n                com.tivoli.act..*.usage()) : \"Warning: use of System.out or System.err - consider logging instead!\";\n                } In the above example excluding main() and usage() methods from the pointcut using an\n                execution(...)-clause (shows) works but using a withincode()-clause (as commented) always yields an NPE:\n                trouble in: null java.lang.NullPointerException at org.aspectj.weaver.patterns.SignaturePattern.matches\n                (SignaturePattern.java:87) at org.aspectj.weaver.patterns.WithincodePointcut.match\n                (WithincodePointcut.java:42) at org.aspectj.weaver.patterns.NotPointcut.match(NotPointcut.java:45) at\n                org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42) at\n                org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42) at\n                org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42) at\n                org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42) at\n                org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42) at\n                org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42) at\n                org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42) at\n                org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:62) at\n                org.aspectj.weaver.Checker.match(Checker.java:48) at org.aspectj.weaver.bcel.BcelClassWeaver.match\n                (BcelClassWeaver.java:1121) at org.aspectj.weaver.bcel.BcelClassWeaver.matchInit\n                (BcelClassWeaver.java:895) at org.aspectj.weaver.bcel.BcelClassWeaver.match (BcelClassWeaver.java:793)\n                at org.aspectj.weaver.bcel.BcelClassWeaver.weave (BcelClassWeaver.java:343) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave (BcelClassWeaver.java:80) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:724) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump (BcelWeaver.java:689) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify (BcelWeaver.java:615) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:563) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave (AjCompilerAdapter.java:239) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling (AjCompilerAdapter.java:114) at\n                org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:376) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation (AjBuildManager.java:601) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild (AjBuildManager.java:160) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild (AjBuildManager.java:94) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile (CompilerAdapter.java:108) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run (AspectJBuildManager.java:165) !SESSION\n                Jun 18, 2004 10:49:48.666 --------------------------------------------- eclipse.buildId=I200406110010\n                java.version=1.4.2_03 java.vendor=Sun Microsystems Inc. BootLoader constants: OS=win32, ARCH=x86,\n                WS=win32, NL=de_CH !ENTRY org.eclipse.ajdt.ui 4 0 Jun 18, 2004 10:49:48.666 !MESSAGE\n                NullPointerException thrown: null !STACK 0 java.lang.NullPointerException at\n                org.aspectj.weaver.patterns.SignaturePattern.matches (SignaturePattern.java:87) at\n                org.aspectj.weaver.patterns.WithincodePointcut.match (WithincodePointcut.java:42) at\n                org.aspectj.weaver.patterns.NotPointcut.match(NotPointcut.java:45) at\n                org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42) at\n                org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42) at\n                org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42) at\n                org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42) at\n                org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42) at\n                org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42) at\n                org.aspectj.weaver.patterns.AndPointcut.match(AndPointcut.java:42) at\n                org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:62) at\n                org.aspectj.weaver.Checker.match(Checker.java:48) at org.aspectj.weaver.bcel.BcelClassWeaver.match\n                (BcelClassWeaver.java:1121) at org.aspectj.weaver.bcel.BcelClassWeaver.matchInit\n                (BcelClassWeaver.java:895) at org.aspectj.weaver.bcel.BcelClassWeaver.match (BcelClassWeaver.java:793)\n                at org.aspectj.weaver.bcel.BcelClassWeaver.weave (BcelClassWeaver.java:343) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave (BcelClassWeaver.java:80) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:724) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump (BcelWeaver.java:689) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify (BcelWeaver.java:615) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:563) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave (AjCompilerAdapter.java:239) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling (AjCompilerAdapter.java:114) at\n                org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:376) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation (AjBuildManager.java:601) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild (AjBuildManager.java:160) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild (AjBuildManager.java:94) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile (CompilerAdapter.java:108) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run (AspectJBuildManager.java:165) Michael\n            ","154332":"As raised by Mr Bodkin on the list: Can anyone tell me why this compiling this program produces\n                warnings for marker but not for deprecated (in a recent dev build of AJDT)? Is this just a bug? Both\n                have runtime retention, so I would expect equivalent behavior. @Deprecated @Marker public aspect Annot {\n                pointcut test() : within(@Marker *);// *); declare warning: staticinitialization(@Deprecated *): \"deprecated\";\n                declare warning: staticinitialization(@Marker *): \"marker\"; public static void main(String\n                argz[]) { new Baz().foo(); } } @Deprecated @Marker class Baz { public void foo() {} }\n                @Retention(RetentionPolicy.RUNTIME) public @interface Marker { }\n            ","62642":"When a <clinit> of a class contains after throwing advice that may catch\n                ExceptionInInitializer errors due to an embedded advice aspectOf() that fails, the ExceptionInIntializer\n                error does not get properly reported. For the example below: public class Main { static int x = 13; int\n                y; public Main() { y= 14; } public static void main(String args[]) { Main m = new Main(); m.y = 3;\n                System.out.println(\"hi\"); } } aspect Aspect { before () : within(*) { System.out.println(\"BEFORE\n                \" + thisJoinPointStaticPart.getKind() + \" at \" +\n                thisJoinPointStaticPart.getSourceLocation()); } after () : within(*) { System.out.println(\"AFTER\n                \" + thisJoinPointStaticPart.getKind() + \" at \" +\n                thisJoinPointStaticPart.getSourceLocation()); } } .... when compiled with ajc, and then run, the\n                following exception is given, Exception in thread \"main\" java.lang.NoClassDefFoundError at\n                Main.<clinit>(Main.java:1) when really one wants the following: Exception in thread \"main\"\n                java.lang.ExceptionInInitializerError at Main. ... Caused by: org.aspectj.lang.NoAspectBoundException:\n                Aspect at Aspect.aspectOf .. ------------- Here is a fix ... I give the decompiled <clinit> for\n                Main.java and indicate with comments, look for ***LJH ****, what can be woven to fix it. Basically, the\n                catch block for after throwing, when in <clinit>, should first check if the caught exception if a\n                ExceptionInInitializerError, and if so just throw it. ----------- static {\n                org.aspectj.runtime.reflect.Factory r1; java.lang.Throwable r2, r31; int $i0; r1 = new Factory(\"Main.java\",\n                Class.forName(\"Main\")); ajc$tjp_0 = r1.makeSJP(\"field-set\", r1.makeFieldSig(\"8-x-Main-int-\"),\n                2); ajc$tjp_1 = r1.makeSJP(\"staticinitialization\", r1.makeInitializerSig(\"8--Main-\"),\n                2); ajc$tjp_10 = r1.makeSJP(\"preinitialization\", r1.makeConstructorSig(\"1--Main----\"),\n                5); ajc$tjp_2 = r1.makeSJP(\"field-set\", r1.makeFieldSig(\"0-y-Main-int-\"), 6);\n                ajc$tjp_3 = r1.makeSJP(\"constructor-execution\", r1.makeConstructorSig(\"1--Main----\"),\n                6); ajc$tjp_4 = r1.makeSJP(\"constructor-call\", r1.makeConstructorSig(\"1--Main----\"),\n                10); ajc$tjp_5 = r1.makeSJP(\"field-set\", r1.makeFieldSig(\"0-y-Main-int-\"), 11);\n                ajc$tjp_6 = r1.makeSJP(\"field-get\", r1.makeFieldSig(\"19-out-java.lang.System-java.io.PrintStream-\"),\n                12); ajc$tjp_7 = r1.makeSJP(\"method-call\", r1.makeMethodSig(\"1-println-java.io.PrintStream-java.lang.String:-arg0:--void-\"),\n                12); ajc$tjp_8 = r1.makeSJP(\"method-execution\", r1.makeMethodSig(\"9-main-Main-[Ljava.lang.String;:-args:--void-\"),\n                10); ajc$tjp_9 = r1.makeSJP(\"initialization\", r1.makeConstructorSig(\"1--Main----\"),\n                6); try { Aspect.aspectOf().ajc$before$Aspect$1$36f01b1c(ajc$tjp_1); $i0 = 13; try {\n                Aspect.aspectOf().ajc$before$Aspect$1$36f01b1c(ajc$tjp_0); x = $i0; } catch (Throwable $r30) { /*** LJH\n                insert here *****/ if ($r30 instanceof ExceptionInIntializerError) //*** throw($r30); //***\n                /***********/ r31 = $r30; Aspect.aspectOf().ajc$after$Aspect$2$36f01b1c(ajc$tjp_0); throw r31; }\n                Aspect.aspectOf().ajc$after$Aspect$2$36f01b1c(ajc$tjp_0); } catch (Throwable $r36) { /*** LJH insert\n                here *****/ if ($r36 instanceof ExceptionInIntializerError) //*** throw($r36); //*** /***********/ r2 =\n                $r36; Aspect.aspectOf().ajc$after$Aspect$2$36f01b1c(ajc$tjp_1); throw r2; }\n                Aspect.aspectOf().ajc$after$Aspect$2$36f01b1c(ajc$tjp_1); }\n            ","118715":"In ClassLoaderWeavingAdaptor if weaverOption.lint is null, then a loaded Xlint properties file\n                gets overwritten by the default Xlint properties. See attached patch to fix this problem.\n            ","59596":"I tried to add an Aspect to java.awt.Label. I compile the aspect via: ajc -inpath\n                /usr/local/j2sdk_nb/j2sdk1.4.2/jre/lib/rt.jar Timestamp.java Here is the aspect Timestamp.java: aspect\n                Timestamp { private int java.awt.Label._ts_read = 0; private int java.awt.Label._ts_write = 0; pointcut\n                writeOp(): call (void java.awt.Label.setText (String)); pointcut readOp(): call (String\n                java.awt.Label.getText()); after (java.awt.Label b) returning: readOp() && target (b) {\n                b._ts_read++; } after (java.awt.Label b) returning: writeOp() && target (b) { b._ts_write++;\n                System.out.println (b._ts_write); } public static void main (String[] args) { java.awt.Label b1 = new\n                java.awt.Label(); b1.setText (\"abc\"); } } Here is the error message I get from ajc: null\n                java.lang.NullPointerException at\n                org.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils.makeLocationContext(EclipseAdapterUtils.java:50)\n                at\n                org.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils.makeSourceLocation(EclipseAdapterUtils.java:120)\n                at org.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils.makeMessage(EclipseAdapterUtils.java:129)\n                at org.aspectj.ajdt.internal.core.builder.AjBuildManager$4.acceptResult(AjBuildManager.java:663) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.acceptResult(AjCompilerAdapter.java:178) at\n                org.aspectj.ajdt.internal.compiler.WeaverAdapter.finishedWith(WeaverAdapter.java:203) at\n                org.aspectj.ajdt.internal.compiler.WeaverAdapter.weaveCompleted(WeaverAdapter.java:167) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:570) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:239) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:114) at\n                org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:376) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:600) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:160) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:94) at\n                org.aspectj.ajdt.ajc.AjdtCommand.doCommand(AjdtCommand.java:102) at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand(AjdtCommand.java:53) at\n                org.aspectj.tools.ajc.Main.run(Main.java:280) at org.aspectj.tools.ajc.Main.runMain(Main.java:217) at\n                org.aspectj.tools.ajc.Main.main(Main.java:79) 1 fail|abort\n            ","112736":"If you convert file extensions between .aj and .java, the compiler doesn't properly clear its\n                symbol table, generating bogus warnings about conflicting inter-type declarations. It should avoid this.\n                Work around: full rebuild. See screenshot for an example. After recompiling the \"errors\" go\n                away...\n            ","145086":"Simon ran into the same problem in setting the values. I will attach a patch to fix this, with\n                test cases to properly verify it works in both cases. java.lang.NullPointerException at\n                org.aspectj.runtime.reflect.SignatureImpl$CacheImpl.set(SignatureImpl.java:224) at\n                org.aspectj.runtime.reflect.SignatureImpl.toString(SignatureImpl.java:57) at\n                org.aspectj.runtime.reflect.SignatureImpl.toString(SignatureImpl.java:62)\n            ","53012":"The compiler silently accepts ---- public class DeclarePrecedence { public static void\n                main(String[] args) { System.out.println(\"hello\"); } } aspect DP { declare precedence:\n                DeclarePrecedence, DP; before() : staticinitialization(DeclarePrecedence) { System.out.println(\"ok\");\n                } } ---- Since this is likely to be a mistake, an error would be nice. However, that would mean saying\n                (!TargetClass && TargetClass+) to pick out the aspect subtypes of TargetClass.\n            ","120356":"Perhaps an issue in the ASM struct for DEOW since cross struct. is empty in AJDT , despite\n                error / warning gutter and message is ok.\n            ","152848":"I get the exception below when I enable AspectJ on my Java project:\n                java.lang.IllegalStateException at\n                org.aspectj.weaver.TypeFactory.createParameterizedType(TypeFactory.java:42) at\n                org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter.classTypeSignature2TypeX(BcelGenericSignatureToTypeXConverter.java:82)\n                at\n                org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter.classTypeSignature2TypeX(BcelGenericSignatureToTypeXConverter.java:42)\n                at org.aspectj.weaver.asm.AsmDelegate.ensureSignatureUnpacked(AsmDelegate.java:410) at\n                org.aspectj.weaver.asm.AsmDelegate.getDeclaredInterfaces(AsmDelegate.java:538) at\n                org.aspectj.weaver.ReferenceType.getDeclaredInterfaces(ReferenceType.java:426) at\n                org.aspectj.weaver.ResolvedType.getDirectSupertypes(ResolvedType.java:64) at\n                org.aspectj.weaver.ResolvedType.collectInterTypeMungers(ResolvedType.java:1155) at\n                org.aspectj.weaver.ResolvedType.getInterTypeMungersIncludingSupers(ResolvedType.java:1134) at\n                org.aspectj.weaver.ResolvedType.checkInterTypeMungers(ResolvedType.java:1201) at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:643)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:519)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.createBinaryTypeFrom(AjLookupEnvironment.java:1058)\n                at\n                org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:480)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:190) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:111)\n                at\n                org.aspectj.org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve(UnresolvedReferenceBinding.java:43)\n                at\n                org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType(BinaryTypeBinding.java:53)\n                at\n                org.aspectj.org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getTypeOrPackage(PackageBinding.java:167)\n                at\n                org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.findImport(CompilationUnitScope.java:413)\n                at\n                org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.findSingleImport(CompilationUnitScope.java:466)\n                at\n                org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.faultInImports(CompilationUnitScope.java:331)\n                at\n                org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.faultInTypes(CompilationUnitScope.java:400)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:512) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:887) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:244) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:163) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n                IllegalStateException thrown: Expecting raw type\n            ","83565":"I just downloaded AJDT version 1.2.0.20050124144759 and I am running Eclipse 3.1M4. I tried to\n                use aspectJ on an existing Java 5 project. There are no aspects in it yet, just straight Java 5. The\n                project runs just fine as a standard Java project. When add the AspectJ nature and I try to compile the\n                project, no class files are generated and I get this error generated on a type that is parameterized:\n                Internal compiler error org.aspectj.weaver.BCException: Bad type name: at\n                org.aspectj.weaver.TypeX.nameToSignature(TypeX.java:634) at\n                org.aspectj.weaver.TypeX.forName(TypeX.java:87) at\n                org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBinding(EclipseFactory.java:155) at\n                org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.fromBindings(EclipseFactory.java:163) at\n                org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember(EclipseFactory.java:229) at\n                org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.makeResolvedMember(EclipseFactory.java:224) at\n                org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.visit(AsmHierarchyBuilder.java:675) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.traverse(ConstructorDeclaration.java:447)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1133)\n                at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:314)\n                at\n                org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.internalBuild(AsmHierarchyBuilder.java:171)\n                at\n                org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder.buildStructureForCompilationUnit(AsmHierarchyBuilder.java:111)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory.finishedCompilationUnit(EclipseFactory.java:354)\n                at org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterProcessing(AjCompilerAdapter.java:138) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:373) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:682) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:168) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild(AjBuildManager.java:102) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:122) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:165) The\n                source code of the file that generates this error is: package mj.compiler.ast; import java.util.Vector;\n                import mj.compiler.Driver; import mj.compiler.Visitor; public class Sequence<T extends AST>\n                extends AST { private Vector<T> elements = new Vector<T>(); public Sequence() { super(0, 0);\n                } public Sequence(T element) { super(element); elements.add(element); } public int length() { return\n                elements.size(); } public T elementAt(int i) { return elements.elementAt(i); } public Sequence add(T\n                element) { elements.add(element); return this; } public Sequence add(int pos, T element) {\n                elements.add(pos, element); return this; } public Sequence addAll(Sequence<T> others) { if( others\n                == null ) return this; elements.addAll(others.elements); return this; } public void\n                visitChildren(Visitor v) { for( AST element : elements ) { element.visit(v); } } public void\n                replaceChild(AST old, AST gnu) { T NEW = (T)gnu; for(int i = 0; i < elements.size(); i++ ) { if(\n                elements.get(i) == old ) { elements.set(i, NEW); return; } } throw new Driver.CompileError(\"Can't\n                find child in replaceChild.\"); } /*** START GENERATED VISITOR PROTOCOL ***///TODO public void\n                visit(mj.compiler.Visitor v) { v.visitSequence(this); } /*** END GENERATED VISITOR PROTOCOL ***/ } Hope\n                this helps something. ps- I am able to create and run a very simple AspectJ project with an aspect,\n                advice, and some Java 5 syntax.\n            ","120351":"Sam wrote: > I'm trying something and it works from .aj but not from .java. When > I try\n                it with annotation based stuff I get a nasty exception: > > [iajc] trouble in: > [iajc] public\n                class gsc.repository.IdentifierTest extends > junit.framework.TestCase: > [iajc] private static\n                final org.aspectj.lang.JoinPoint > $StaticPart ajc$tjp_0 > [iajc] public void <init>(): >\n                [iajc] ALOAD_0 > [iajc] INVOKESPECIAL > junit.framework.TestCase.<init> ()V > [iajc]\n                constructor-execution(void > gsc.repository.IdentifierTest.<init>()) > [iajc] | RETURN >\n                [iajc] constructor-execution(void > gsc.repository.IdentifierTest.<init>()) > [iajc] end\n                public void <init>() > > [iajc] public void testIdentifierExactMatch() throws >\n                java.security.NoSuchAlgorithmException, java.io.IOException: > [iajc] method-execution(void >\n                gsc.repository.IdentifierTest.testIdentifierExactMatch()) > [iajc] | NEW java.io.File > [iajc] |\n                DUP > [iajc] | LDC \"test-repository/ant-test/jars/ > ant-1.6.2.jar\" > [iajc] |\n                INVOKESPECIAL java.io.File.<init> > (Ljava/lang/String;)V > [iajc] | INVOKESTATIC >\n                gsc.repository.Identifier.interrogate (Ljava/io/File;)Ljava/util/List; > [iajc] | ASTORE_1 >\n                [iajc] | ALOAD_1 > [iajc] | ICONST_0 > [iajc] | INVOKEINTERFACE java.util.List.get >\n                (I)Ljava/lang/Object; > [iajc] | CHECKCAST gsc.repository.ejb.Jar > [iajc] | ASTORE_2 > [iajc]\n                | ALOAD_2 > [iajc] | INVOKEVIRTUAL > gsc.repository.ejb.Jar.getVersion ()Ljava/lang/String; >\n                [iajc] | LDC \"1.6.2\" > [iajc] | INVOKESTATIC >\n                gsc.repository.IdentifierTest.assertEquals (Ljava/lang/String;Ljava/ > lang/String;)V > [iajc] |\n                RETURN > [iajc] method-execution(void > gsc.repository.IdentifierTest.testIdentifierExactMatch())\n                > [iajc] end public void testIdentifierExactMatch() throws >\n                java.security.NoSuchAlgorithmException, java.io.IOException > > [iajc] public void\n                testIdentifierExactSameClasses() throws > java.security.NoSuchAlgorithmException,\n                java.io.IOException: > [iajc] method-execution(void >\n                gsc.repository.IdentifierTest.testIdentifierExactSameClasses()) > [iajc] | NEW java.io.File >\n                [iajc] | DUP > [iajc] | LDC \"test-jars/ant-1.6.2-test.jar\" > [iajc] | INVOKESPECIAL\n                java.io.File.<init> > (Ljava/lang/String;)V > [iajc] | INVOKESTATIC >\n                gsc.repository.Identifier.interrogate (Ljava/io/File;)Ljava/util/List; > [iajc] | ASTORE_1 >\n                [iajc] | ALOAD_1 > [iajc] | ICONST_0 > [iajc] | INVOKEINTERFACE java.util.List.get >\n                (I)Ljava/lang/Object; > [iajc] | CHECKCAST gsc.repository.ejb.Jar > [iajc] | ASTORE_2 > [iajc]\n                | ALOAD_2 > [iajc] | INVOKEVIRTUAL > gsc.repository.ejb.Jar.getVersion ()Ljava/lang/String; >\n                [iajc] | LDC \"1.6.2\" > [iajc] | INVOKESTATIC >\n                gsc.repository.IdentifierTest.assertEquals (Ljava/lang/String;Ljava/ > lang/String;)V > [iajc] |\n                RETURN > [iajc] method-execution(void >\n                gsc.repository.IdentifierTest.testIdentifierExactSameClasses()) > [iajc] end public void\n                testIdentifierExactSameClasses() > throws java.security.NoSuchAlgorithmException, java.io.IOException\n                > > [iajc] public void testIdentifierMixedUp() throws > java.security.NoSuchAlgorithmException,\n                java.io.IOException: > [iajc] method-execution(void >\n                gsc.repository.IdentifierTest.testIdentifierMixedUp()) > [iajc] | NEW java.io.File > [iajc] | DUP\n                > [iajc] | LDC \"test-jars/groovy-1.0-beta-4-and- > commons-logging-1.0.2.jar\" >\n                [iajc] | INVOKESPECIAL java.io.File.<init> > (Ljava/lang/String;)V > [iajc] | INVOKESTATIC\n                > gsc.repository.Identifier.interrogate (Ljava/io/File;)Ljava/util/List; > [iajc] | ASTORE_1 >\n                [iajc] | ALOAD_1 > [iajc] | INVOKEINTERFACE java.util.List.size ()I > [iajc] | ICONST_2 >\n                [iajc] | INVOKESTATIC > gsc.repository.IdentifierTest.assertEquals (II)V > [iajc] | ICONST_2 >\n                [iajc] | ISTORE_2 > [iajc] | ALOAD_1 > [iajc] | INVOKEINTERFACE > java.util.List.iterator\n                ()Ljava/util/Iterator; > [iajc] | ASTORE_3 > [iajc] | L0: ALOAD_3 > [iajc] | INVOKEINTERFACE\n                > java.util.Iterator.hasNext ()Z > [iajc] | IFEQ L3 > [iajc] | ALOAD_3 > [iajc] |\n                INVOKEINTERFACE > java.util.Iterator.next ()Ljava/lang/Object; > [iajc] | CHECKCAST\n                gsc.repository.ejb.Jar > [iajc] | ASTORE 4 > [iajc] | ALOAD 4 > [iajc] | INVOKEVIRTUAL >\n                gsc.repository.ejb.Jar.getGroupid ()Ljava/lang/String; > [iajc] | LDC \"groovy\" > [iajc]\n                | INVOKEVIRTUAL > java.lang.String.equals (Ljava/lang/Object;)Z > [iajc] | IFEQ L1 > [iajc] |\n                ALOAD 4 > [iajc] | INVOKEVIRTUAL > gsc.repository.ejb.Jar.getGroupid ()Ljava/lang/String; >\n                [iajc] | LDC \"groovy\" > [iajc] | INVOKESTATIC >\n                gsc.repository.IdentifierTest.assertEquals (Ljava/lang/String;Ljava/ > lang/String;)V > [iajc] |\n                ALOAD 4 > [iajc] | INVOKEVIRTUAL > gsc.repository.ejb.Jar.getArtifactid ()Ljava/lang/String; >\n                [iajc] | LDC \"groovy\" > [iajc] | INVOKESTATIC >\n                gsc.repository.IdentifierTest.assertEquals (Ljava/lang/String;Ljava/ > lang/String;)V > [iajc] |\n                ALOAD 4 > [iajc] | INVOKEVIRTUAL > gsc.repository.ejb.Jar.getVersion ()Ljava/lang/String; >\n                [iajc] | LDC \"1.0-beta-4\" > [iajc] | INVOKESTATIC >\n                gsc.repository.IdentifierTest.assertEquals (Ljava/lang/String;Ljava/ > lang/String;)V > [iajc] |\n                IINC 2 -1 > [iajc] | GOTO L2 > [iajc] | L1: ALOAD 4 > [iajc] | INVOKEVIRTUAL >\n                gsc.repository.ejb.Jar.getGroupid ()Ljava/lang/String; > [iajc] | LDC \"commons-logging\"\n                > [iajc] | INVOKESTATIC > gsc.repository.IdentifierTest.assertEquals (Ljava/lang/String;Ljava/\n                > lang/String;)V > [iajc] | ALOAD 4 > [iajc] | INVOKEVIRTUAL >\n                gsc.repository.ejb.Jar.getArtifactid ()Ljava/lang/String; > [iajc] | LDC \"commons-logging\"\n                > [iajc] | INVOKESTATIC > gsc.repository.IdentifierTest.assertEquals (Ljava/lang/String;Ljava/\n                > lang/String;)V > [iajc] | ALOAD 4 > [iajc] | INVOKEVIRTUAL >\n                gsc.repository.ejb.Jar.getVersion ()Ljava/lang/String; > [iajc] | LDC \"1.0.2\" > [iajc] |\n                INVOKESTATIC > gsc.repository.IdentifierTest.assertEquals (Ljava/lang/String;Ljava/ >\n                lang/String;)V > [iajc] | IINC 2 -1 > [iajc] | L2: GOTO L0 > [iajc] | L3: ILOAD_2 > [iajc] |\n                ICONST_0 > [iajc] | INVOKESTATIC > gsc.repository.IdentifierTest.assertEquals (II)V > [iajc] |\n                RETURN > [iajc] method-execution(void > gsc.repository.IdentifierTest.testIdentifierMixedUp())\n                > [iajc] end public void testIdentifierMixedUp() throws > java.security.NoSuchAlgorithmException,\n                java.io.IOException > > [iajc] end public class gsc.repository.IdentifierTest > > [iajc]\n                > [iajc] Exception thrown from AspectJ 1.5.0M5 > > [iajc] This might be logged as a bug already\n                -- find current > bugs at > [iajc] http://bugs.eclipse.org/bugs/buglist.cgi? > product=AspectJ&component=Compiler\n                > > [iajc] Bugs for exceptions thrown have titles File:line from > the top stack, > [iajc]\n                e.g., \"SomeFile.java:243\" > > [iajc] If you don't find the exception below in a bug,\n                please > add a new bug > [iajc] at http://bugs.eclipse.org/bugs/enter_bug.cgi? >\n                product=AspectJ > [iajc] To make the bug a priority, please include a test program > [iajc] that\n                can reproduce this exception. > [iajc] Incorrectly attempting counter operation on stacked cflow >\n                > [iajc] when implementing on shadow method-execution(void >\n                gsc.repository.IdentifierTest.testIdentifierExactMatch()) > [iajc] when weaving type\n                gsc.repository.IdentifierTest > [iajc] when weaving classes > [iajc] when weaving > [iajc] when\n                batch building with classpath: /Users/sam/Library/ >\n                Java/Extensions/jsk-policy.jar:/System/Library/Java/Extensions/ >\n                CoreAudio.jar:/System/Library/Java/Extensions/dns_sd.jar:/System/ >\n                Library/Java/Extensions/j3daudio.jar:/System/Library/Java/Extensions/ >\n                j3dcore.jar:/System/Library/Java/Extensions/j3dutils.jar:/System/ >\n                Library/Java/Extensions/jai_codec.jar:/System/Library/Java/Extensions/ >\n                jai_core.jar:/System/Library/Java/Extensions/mlibwrapper_jai.jar:/ >\n                System/Library/Java/Extensions/MRJToolkit.jar:/System/Library/Java/ >\n                Extensions/QTJava.zip:/System/Library/Java/Extensions/QTJSupport.jar:/ >\n                System/Library/Java/Extensions/vecmath.jar:/System/Library/Frameworks/ >\n                JavaVM.framework/Versions/1.5.0/Home/lib/ext/apple_provider.jar:/ >\n                System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Home/lib/ >\n                ext/dnsns.jar:/System/Library/Frameworks/JavaVM.framework/Versions/ >\n                1.5.0/Home/lib/ext/localedata.jar:/System/Library/Frameworks/ >\n                JavaVM.framework/Versions/1.5.0/Home/lib/ext/sunjce_provider.jar:/ >\n                Users/sam/gs/squire/jardb/.aspectj-lib/aspectjrt-1.5.0_M5.jar:/Users/ >\n                sam/gs/squire/jardb/.aspectj-lib/aspectjtools-1.5.0_M5.jar:/Users/sam/ >\n                gs/squire/jardb/target/classes:/Users/sam/gs/squire/jardb/target/test- >\n                classes:/Users/sam/gs/squire/jardb/.lib/antlr-2.7.5.jar:/Users/sam/gs/ >\n                squire/jardb/.lib/asm-1.5.3.jar:/Users/sam/gs/squire/jardb/.lib/ >\n                cglib-2.1_2.jar:/Users/sam/gs/squire/jardb/.lib/commons- >\n                collections-2.1.1.jar:/Users/sam/gs/squire/jardb/.lib/commons- >\n                logging-1.0.4.jar:/Users/sam/gs/squire/jardb/.lib/dom4j-1.6.jar:/ >\n                Users/sam/gs/squire/jardb/.lib/ehcache-1.1.jar:/Users/sam/gs/squire/ >\n                jardb/.lib/ejb3-persistence-pr.jar:/Users/sam/gs/squire/jardb/.lib/ >\n                emma-2.0.latest.jar:/Users/sam/gs/squire/jardb/.lib/ >\n                emma_ant-2.0.latest.jar:/Users/sam/gs/squire/jardb/.lib/ >\n                hibernate-3.1alpha1.jar:/Users/sam/gs/squire/jardb/.lib/hibernate- >\n                annotations-3.1beta3.jar:/Users/sam/gs/squire/jardb/.lib/hibernate- >\n                entitymanager-3.1beta1.jar:/Users/sam/gs/squire/jardb/.lib/ >\n                jta-1.0.jar:/Users/sam/gs/squire/jardb/.lib/junit-3.8.1.jar:/Users/ >\n                sam/gs/squire/jardb/.lib/postgresql-7.4.1-jdbc3.jar:/Users/sam/gs/ >\n                squire/jardb/.lib/svn-javahl-1.2.0.jar:/Users/sam/gs/squire/jardb/lib/ >\n                testng-4.2-jdk15.jar:/Users/sam/gs/squire/jardb/target/aspects.jar: > [iajc] Incorrectly attempting\n                counter operation on stacked cflow > [iajc] java.lang.RuntimeException: Incorrectly attempting >\n                counter operation on stacked cflow > [iajc] at org.aspectj.weaver.bcel.BcelShadow.weaveCflowEntry\n                > (BcelShadow.java:1890) > [iajc] at org.aspectj.weaver.bcel.BcelAdvice.implementOn >\n                (BcelAdvice.java:231) > [iajc] at org.aspectj.weaver.Shadow.implementMungers > (Shadow.java:514)\n                > [iajc] at org.aspectj.weaver.Shadow.implement(Shadow.java:391) > [iajc] at\n                org.aspectj.weaver.bcel.BcelClassWeaver.implement > (BcelClassWeaver.java:2142) > [iajc] at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave > (BcelClassWeaver.java:467) > [iajc] at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave > (BcelClassWeaver.java:102) > [iajc] at\n                org.aspectj.weaver.bcel.BcelWeaver.weave > (BcelWeaver.java:1534) > [iajc] at >\n                org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java: > 1485) > [iajc] at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify > (BcelWeaver.java:1266) > [iajc] at\n                org.aspectj.weaver.bcel.BcelWeaver.weave > (BcelWeaver.java:1088) > [iajc] at >\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave > (AjCompilerAdapter.java:300) > [iajc]\n                at > org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling >\n                (AjCompilerAdapter.java:178) > [iajc] at >\n                org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning >\n                $org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0 > (CompilerAdapter.aj:70) > [iajc]\n                at > org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile > (Compiler.java:367) >\n                [iajc] at > org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation >\n                (AjBuildManager.java:809) > [iajc] at >\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild > (AjBuildManager.java:230) > [iajc]\n                at > org.aspectj.ajdt.internal.core.builder.AjBuildManager.batchBuild > (AjBuildManager.java:156)\n                > [iajc] at org.aspectj.ajdt.ajc.AjdtCommand.doCommand > (AjdtCommand.java:112) > [iajc] at\n                org.aspectj.ajdt.ajc.AjdtCommand.runCommand > (AjdtCommand.java:60) > [iajc] at\n                org.aspectj.tools.ajc.Main.run(Main.java:326) > [iajc] at\n                org.aspectj.tools.ajc.Main.runMain(Main.java:240) > [iajc] at >\n                org.aspectj.tools.ant.taskdefs.AjcTask.executeInSameVM(AjcTask.java: > 1210) > [iajc] at\n                org.aspectj.tools.ant.taskdefs.AjcTask.execute > (AjcTask.java:1001) > [iajc] at\n                org.apache.tools.ant.UnknownElement.execute > (UnknownElement.java:275) > [iajc] at\n                org.apache.tools.ant.Task.perform(Task.java:364) > [iajc] at\n                org.apache.tools.ant.taskdefs.Sequential.execute > (Sequential.java:64) > [iajc] at\n                org.apache.tools.ant.UnknownElement.execute > (UnknownElement.java:275) > [iajc] at\n                org.apache.tools.ant.Task.perform(Task.java:364) > [iajc] at >\n                org.apache.tools.ant.taskdefs.MacroInstance.execute > (MacroInstance.java:378) > [iajc] at\n                org.apache.tools.ant.UnknownElement.execute > (UnknownElement.java:275) > [iajc] at\n                org.apache.tools.ant.Task.perform(Task.java:364) > [iajc] at\n                org.apache.tools.ant.Target.execute(Target.java:341) > [iajc] at\n                org.apache.tools.ant.Target.performTasks > (Target.java:369) > [iajc] at\n                org.apache.tools.ant.Project.executeSortedTargets > (Project.java:1216) > [iajc] at\n                org.apache.tools.ant.Project.executeTarget > (Project.java:1185) > [iajc] at >\n                org.apache.tools.ant.helper.DefaultExecutor.executeTargets > (DefaultExecutor.java:40) > [iajc] at\n                org.apache.tools.ant.Project.executeTargets > (Project.java:1068) > [iajc] at\n                org.apache.tools.ant.Main.runBuild(Main.java:668) > [iajc] at\n                org.apache.tools.ant.Main.startAnt(Main.java:187) > [iajc] at\n                org.apache.tools.ant.launch.Launcher.run > (Launcher.java:246) > [iajc] at\n                org.apache.tools.ant.launch.Launcher.main > (Launcher.java:67) > > > package\n                gsc.aspects.testing; > > import junit.framework.*; > import java.io.*; > import java.util.*;\n                > > import org.aspectj.lang.annotation.Pointcut; > import org.aspectj.lang.annotation.Before;\n                > import org.aspectj.lang.annotation.Aspect; > import org.aspectj.lang.annotation.After; >\n                import org.aspectj.lang.JoinPoint; > > @Aspect > public class TestMethodMapperAnnotations {\n                > > @Pointcut(\"this(testCase) && this(TestCase) && execution(void >\n                test*())\") > public void inTestClass(TestCase testCase) { > } > > private Map<String,\n                Map<String, Integer>> coverage; > > @Before(\"cflowbelow(inTestClass(testCase)) &&\n                execution(* *(..))\") > public void beforeMethodExecution(JoinPoint thisJoinPoint, > TestCase\n                testCase) { > String testname = testCase.getClass().getName(); > String methodSignature =\n                thisJoinPoint.getStaticPart > ().getSignature().toString(); > Map<String, Integer> tests =\n                coverage.get(methodSignature); > if (tests == null) { > tests = new HashMap<String, Integer>();\n                > coverage.put(methodSignature, tests); > } > Integer count = tests.get(testname); > if\n                (count == null) { > count = 1; > } else { > count++; > } > tests.put(testname, count);\n                > } > > @Before(\"inTestClass(testCase)\") > public void\n                beforeExecutingTestMethod(TestCase testCase) { > try { > File file = new File(\"results.ser\");\n                > if (file.exists()) { > ObjectInputStream ois = new ObjectInputStream(new >\n                FileInputStream(file)); > coverage = (Map<String, Map<String, Integer>>) >\n                ois.readObject(); > ois.close(); > } else { > coverage = new HashMap<String, Map<String,\n                Integer>>(); > } > } catch (Exception e) { > e.printStackTrace(); > } > } > >\n                @After(\"inTestClass(testCase)\") > public void afterExecutingTestMethod(TestCase testCase) {\n                > try { > File file = new File(\"results.ser\"); > ObjectOutputStream oos = new\n                ObjectOutputStream(new > FileOutputStream(file)); > oos.writeObject(coverage); > oos.close();\n                > } catch (Exception e) { > e.printStackTrace(); > } > } > > } > > vs. > >\n                package gsc.aspects.testing; > > import junit.framework.*; > import java.io.*; > import\n                java.util.*; > > public aspect TestMethodMapper { > > pointcut inTestClass(TestCase\n                testCase) : this(testCase) && this > (TestCase) && execution(void test*()); >\n                private Map<String, Map<String, Integer>> coverage; > > before(TestCase testCase) :\n                cflowbelow(inTestClass(testCase)) && > execution(* *(..)) { > String testname =\n                testCase.getClass().getName(); > String methodSignature = thisJoinPointStaticPart.getSignature >\n                ().toString(); > Map<String, Integer> tests = coverage.get(methodSignature); > if (tests ==\n                null) { > tests = new HashMap<String, Integer>(); > coverage.put(methodSignature, tests);\n                > } > Integer count = tests.get(testname); > if (count == null) { > count = 1; > } else {\n                > count++; > } > tests.put(testname, count); > } > > before(TestCase testCase) :\n                inTestClass(testCase) { > try { > File file = new File(\"results.ser\"); > if\n                (file.exists()) { > ObjectInputStream ois = new ObjectInputStream(new FileInputStream > (file));\n                > coverage = (Map<String, Map<String, Integer>>) ois.readObject(); > ois.close(); >\n                } else { > coverage = new HashMap<String, Map<String, Integer>>(); > } > } catch\n                (Exception e) { > e.printStackTrace(); > } > } > > after(TestCase testCase) :\n                inTestClass(testCase) { > try { > File file = new File(\"results.ser\"); >\n                ObjectOutputStream oos = new ObjectOutputStream(new > FileOutputStream(file)); >\n                oos.writeObject(coverage); > oos.close(); > } catch (Exception e) { > e.printStackTrace(); >\n                } > } > > } > > >\n            ","120474":"I am seeing a BCException that gets caught and prints a stack trace in Aj.preProcess when\n                loading a class named \"$Proxy4\" This occurs in UnresolvedType.nameToSignature because the\n                string it receives from ResolvedType.getDeclaringType is \"\" (i.e., it strips off the leading\n                $, treating the type as if it were a nested type of nothing). I'm not sure of the best resolution, but\n                maybe the loop in ResolvedType should just say while (lastDollar > 0). This would handle the \"leading\n                $\" case as an identifier rather than trying to look up the empty string. This might help with\n                Hibernate's $$ types too... Here is the stack when it happens: UnresolvedType.nameToSignature(String)\n                line: 774 UnresolvedType.forName(String) line: 309 ReferenceType(ResolvedType).getDeclaringType() line:\n                1255 WithinPointcut.isWithinType(ResolvedType) line: 50 WithinPointcut.fastMatch(FastMatchInfo) line: 67\n                AndPointcut.fastMatch(FastMatchInfo) line: 51 AndPointcut.fastMatch(FastMatchInfo) line: 51\n                AndPointcut.fastMatch(FastMatchInfo) line: 51 AndPointcut.fastMatch(FastMatchInfo) line: 51\n                AndPointcut.fastMatch(FastMatchInfo) line: 51 BcelWeaver.fastMatch(List, ResolvedType) line: 1635\n                BcelWeaver.weave(UnwovenClassFile, BcelObjectType, boolean) line: 1516\n                BcelWeaver.weaveWithoutDump(UnwovenClassFile, BcelObjectType) line: 1494\n                BcelWeaver.weaveAndNotify(UnwovenClassFile, BcelObjectType, IWeaveRequestor) line: 1275\n                BcelWeaver.weave(IClassFileProvider) line: 1097\n                ClassLoaderWeavingAdaptor(WeavingAdaptor).getWovenBytes(String, byte[]) line: 261\n                ClassLoaderWeavingAdaptor(WeavingAdaptor).weaveClass(String, byte[]) line: 194 Aj.preProcess(String,\n                byte[], ClassLoader) line: 65\n            ","148908":"Ajdoc chokes on interfaces with initializers for final fields (it doesn't preserve the\n                initializer value). See attached AJDT project that fails when you run ajdoc with the default options on\n                it: > Calling ajc... > Building signature files... > Calling javadoc... Loading source file\n                C:\\eclipse\\3.2\\ajdocworkingdir\\BadInterface.java... 1 error > Decorating html files... > Removing\n                generated tags (this may take a while)... > Finished.\n                C:\\eclipse\\3.2\\ajdocworkingdir\\BadInterface.java:9: = expected static final Comparator MY_COMPARATOR; ^\n            ","46298":"Under certain condition you can not cleanly decompile code generated by the aspectj\n                compiler/byte code weaver. package com.regular; public class ExceptionCatcher { public\n                ExceptionCatcher() { super(); } public void catchException() { try { ExceptionThrower throwUp = new\n                ExceptionThrower(); throwUp.throwException(); } catch(Exception e) { System.out.println(\"Inside my\n                catch block\"); } } public static void main(String[] args) { ExceptionCatcher catcher = new\n                ExceptionCatcher(); catcher.catchException(); } } package com.aop; import org.aspectj.lang.JoinPoint;\n                public aspect ExceptionHandler { pointcut classList() : within(com.regular..*); before(Throwable e) :\n                classList() && handler(*) && args(e) { System.out.println(\"Starting before block\");\n                log(thisJoinPointStaticPart, e); System.out.println(\"End of before block\"); } private void\n                log(JoinPoint.StaticPart jp, Throwable e) { System.out.println(\"Class Name: \" +\n                jp.getSignature ().getDeclaringType()); System.out.println(\"Error Message\" + e.getMessage() );\n                } } Runing JAD: jad ExceptionCatcher.class Parsing ExceptionCatcher.class... Generating\n                ExceptionCatcher.jad Couldn't fully decompile method catchException Couldn't resolve all exception\n                handlers in method catchException Now the JAD Output: // Decompiled by Jad v1.5.7. Copyright 1997-99\n                Pavel Kouznetsov. // Jad home page: http://www.geocities.com/SiliconValley/Bridge/8617/jad.html //\n                Decompiler options: packimports(3) // Source File Name: ExceptionCatcher.java package com.regular;\n                import com.aop.ExceptionHandler; import com.capitalone.risk.aop.ITestInterface; import\n                com.capitalone.risk.aop.ITestInterfaceAspect; import java.io.PrintStream; import\n                org.aspectj.runtime.reflect.Factory; // Referenced classes of package com.regular: // ExceptionThrower\n                public class ExceptionCatcher implements com.aop.IntroductionPointCut.IPhilipsTarget { public\n                ExceptionCatcher() { } public void catchException() { if(this instanceof ITestInterface)\n                ITestInterfaceAspect.aspectOf\n                ().ajc$before$com_capitalone_risk_aop_ITestInterfaceAspect$113((ITestInterface) this); ExceptionThrower\n                throwUp = new ExceptionThrower(); throwUp.throwException(); break MISSING_BLOCK_LABEL_77; Exception\n                exception; exception; ExceptionHandler.aspectOf().ajc$before$com_aop_ExceptionHandler$1f8 (exception,\n                ajc$tjp_0); Exception e = exception; System.out.println(\"Inside my catch block\"); break\n                MISSING_BLOCK_LABEL_77; Throwable throwable; throwable; if(this instanceof ITestInterface)\n                ITestInterfaceAspect.aspectOf\n                ().ajc$after$com_capitalone_risk_aop_ITestInterfaceAspect$172((ITestInterface) this); throw throwable;\n                if(this instanceof ITestInterface) ITestInterfaceAspect.aspectOf\n                ().ajc$after$com_capitalone_risk_aop_ITestInterfaceAspect$172((ITestInterface) this); return; } public\n                static void main(String args[]) { ExceptionCatcher catcher = new ExceptionCatcher();\n                catcher.catchException(); } public static final org.aspectj.lang.JoinPoint.StaticPart ajc$tjp_0; static\n                { Factory factory = new Factory(\"ExceptionCatcher.java\", Class.forName (\"com.regular.ExceptionCatcher\"));\n                ajc$tjp_0 = factory.makeSJP(\"exception-handler\", factory.makeCatchClauseSig(\"0--com.regular.ExceptionCatcher-\n                java.lang.Exception-<missing>-\"), 33); } } The aspect class: jad ExceptionHandler.class\n                Parsing ExceptionHandler.class... Generating ExceptionHandler.jad Couldn't fully decompile method\n                aspectOf // Decompiled by Jad v1.5.7. Copyright 1997-99 Pavel Kouznetsov. // Jad home page:\n                http://www.geocities.com/SiliconValley/Bridge/8617/jad.html // Decompiler options: packimports(3) //\n                Source File Name: ExceptionHandler.java package com.aop; import java.io.PrintStream; import\n                org.aspectj.lang.NoAspectBoundException; import org.aspectj.lang.Signature; public class\n                ExceptionHandler { public ExceptionHandler() { } public void\n                ajc$before$com_aop_ExceptionHandler$1f8(Throwable e, org.aspectj.lang.JoinPoint.StaticPart\n                thisJoinPointStaticPart) { System.out.println(\"Starting before block\");\n                log(thisJoinPointStaticPart, e); System.out.println(\"End of before block\"); } private void\n                log(org.aspectj.lang.JoinPoint.StaticPart jp, Throwable e) { System.out.println(\"Class Name: \"\n                + jp.getSignature().getDeclaringType ()); System.out.println(\"Error Message\" +\n                e.getMessage()); } public static ExceptionHandler aspectOf() { ajc$perSingletonInstance; JVM INSTR dup ;\n                JVM INSTR ifnull 8; goto _L1 _L2 _L1: return; _L2: throw new NoAspectBoundException(); } public static\n                boolean hasAspect() { return ajc$perSingletonInstance != null; } private static void ajc$postClinit() {\n                ajc$perSingletonInstance = new ExceptionHandler(); } public static final ExceptionHandler\n                ajc$perSingletonInstance; static { ajc$postClinit(); } } Enjoy! Ron\n            ","83563":"It seems that pertypewithin() aspect association does not handle nested classes correctly. Here\n                is a test class that exhibits the problem: package test; public class Test { public static void\n                main(String[] args) { new NestedTest().run(); } static class NestedTest implements Runnable { public\n                void run() { System.out.println(\"Running...\"); } } } aspect PertypewithinTest\n                pertypewithin(Test) { before() : execution(* *.*(..)) { System.out.println(thisJoinPointStaticPart); } }\n                > ajc -version AspectJ Compiler DEVELOPMENT built on Monday Jan 24, 2005 at 17:07:00 GMT > ajc\n                test\\Test.java > java test.Test execution(void test.Test.main(String[])) execution(void\n                test.Test.bar()) Exception in thread \"main\" java.lang.NoSuchMethodError:\n                test.Test$1.ajc$test_Per typewithinTest$localAspectOf()Ltest/PertypewithinTest; at\n                test.Test$1.run(Test.java) at test.Test.bar(Test.java:9) at test.Test.main(Test.java:13) The same\n                problem is seen for anonymous inner classes, as well: package test; public class Test { public void\n                bar() { new Runnable() { public void run() { System.out.println(\"Running...\"); } }.run(); }\n                public static void main(String[] args) { new Test().bar(); } } aspect PertypewithinTest\n                pertypewithin(Test) { before() : execution(* *.*(..)) { System.out.println(thisJoinPoint); } } > ajc\n                test\\Test.java > java test.Test execution(void test.Test.main(String[])) execution(void\n                test.Test.bar()) Exception in thread \"main\" java.lang.NoSuchMethodError:\n                test.Test$1.ajc$test_Per typewithinTest$localAspectOf()Ltest/PertypewithinTest; at\n                test.Test$1.run(Test.java) at test.Test.bar(Test.java:9) at test.Test.main(Test.java:13)\n            ","153490":"I try out Contract4J 0.5 with AspectJ 1.5.2 (Build 20060629124300) and Eclipse 3.2 (Build\n                M20060629-1905) under Windows XP SP2 and Java 1.5.0_06. So I became following exception. (You will find\n                my testcode below the exception.) I am not sure if this bug related to Contract4J or to AspectJ!? ====\n                The Exception ==== java.lang.IllegalStateException at\n                org.aspectj.weaver.asm.AsmDelegate.getFormalTypeParametersFromOuterClass(AsmDelegate.java:465) at\n                org.aspectj.weaver.asm.AsmDelegate.ensureSignatureUnpacked(AsmDelegate.java:395) at\n                org.aspectj.weaver.asm.AsmDelegate.getDeclaredInterfaces(AsmDelegate.java:538) at\n                org.aspectj.weaver.ReferenceType.getDeclaredInterfaces(ReferenceType.java:426) at\n                org.aspectj.weaver.ResolvedType.getDirectSupertypes(ResolvedType.java:64) at\n                org.aspectj.weaver.ResolvedType.collectInterTypeMungers(ResolvedType.java:1155) at\n                org.aspectj.weaver.ResolvedType.getInterTypeMungersIncludingSupers(ResolvedType.java:1134) at\n                org.aspectj.weaver.ResolvedType.checkInterTypeMungers(ResolvedType.java:1201) at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:643)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.weaveInterTypeDeclarations(AjLookupEnvironment.java:519)\n                at\n                org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment.createBinaryTypeFrom(AjLookupEnvironment.java:1058)\n                at\n                org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createBinaryTypeFrom(LookupEnvironment.java:480)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.accept(Compiler.java:190) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:111)\n                at\n                org.aspectj.org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve(UnresolvedReferenceBinding.java:43)\n                at\n                org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType(BinaryTypeBinding.java:53)\n                at\n                org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.getMemberType(BinaryTypeBinding.java:618)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope.findMemberType(Scope.java:928) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BlockScope.getBinding(BlockScope.java:449) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference.resolveType(QualifiedNameReference.java:903)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:326) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:829) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:422)\n                at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:178)\n                at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:400)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1088)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1137)\n                at\n                org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:305)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:519) at\n                org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:329) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:887) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:271) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:170) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n                IllegalStateException thrown: How come we're in AsmObjectType resolving an inner type of something that\n                is NOT a AsmObjectType?? ==== My TestCode ==== import org.contract4j5.Contract; import\n                org.contract4j5.Post; import org.contract4j5.Pre; import org.contract4j5.aspects.Contract4J; // this is\n                a dummy code!! @Contract public class Foo { private String fooField = null; @Pre(\"nr != null\")\n                public void setFooField(String f) { fooField = f; } @Post(\"$return != null\") public String\n                getFooField() { return fooField; } public static void main(String[] args) {\n                Contract4J.setEnabled(Contract4J.TestType.Pre, true); //1\n                Contract4J.setEnabled(Contract4J.TestType.Post, true); //2\n                Contract4J.setEnabled(Contract4J.TestType.Invar, true); //3 Foo foo = new Foo(); foo.setFooField(null);\n                System.out.println(foo.getFooField()); } }\n            ","40192":"The build can not be cancelled during the bytecode weaving stage.","141956":"I don't know much about the internal workings of aspectJ but this bug keeps popping up so I\n                went through the trouble of checking of trying to debug it so that I could hopefully provide enough\n                information to get it fixed. This happens while using eclipse AJDT. It never happens if I fully do a\n                clean before rebuild. It only seems to happen when doing incrmental builds (using the project->build\n                automatically setting). The error happens in the iterator that recursively builds a list of methods to\n                return for matching. The error is triggered here: // we need to know if it is an interface from Parent\n                kind munger // as those are used for @AJ ITD and we precisely want to skip those boolean shouldSkip =\n                false; for (int j = 0; j < rtx.interTypeMungers.size(); j++) { ConcreteTypeMunger munger =\n                (ConcreteTypeMunger) rtx.interTypeMungers.get(j); if (munger.getMunger().getKind() ==\n                ResolvedTypeMunger.Parent) { shouldSkip = true; break; } } munger.getMunger() returns null because the\n                munger instance is a BcelPerClauseAspectAdder. My naive fix would be to check munger.getMunger() == null\n                or check munger.getKind(). I'm assuming that BcelPerClausAspectAdder is one that should be skipped since\n                it is related to @AJ ??? Again, I don't know very much about the internal architecture of the weaver\n                magic so I hope this is enough information. I would appreciate it if someone who knows more of the\n                internals could speculate as to why this bug would never pop up on a clean build but only on incremental\n                builds? Also it's not on all incremental builds and I haven't been able to isolate what kind of changes\n                or compiles it triggers this, although it seems that once I got the exception once, I keep getting it on\n                every build until I do a clean. java.lang.NullPointerException at\n                org.aspectj.weaver.ResolvedType.addAndRecurse(ResolvedType.java:288) at\n                org.aspectj.weaver.ResolvedType.getMethodsWithoutIterator(ResolvedType.java:257) at\n                org.aspectj.weaver.ResolvedType.lookupResolvedMember(ResolvedType.java:378) at\n                org.aspectj.weaver.JoinPointSignatureIterator.findSignaturesFromSupertypes(JoinPointSignatureIterator.java:178)\n                at org.aspectj.weaver.JoinPointSignatureIterator.hasNext(JoinPointSignatureIterator.java:69) at\n                org.aspectj.weaver.patterns.SignaturePattern.matches(SignaturePattern.java:287) at\n                org.aspectj.weaver.patterns.KindedPointcut.matchInternal(KindedPointcut.java:103) at\n                org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:144) at\n                org.aspectj.weaver.patterns.AndPointcut.matchInternal(AndPointcut.java:51) at\n                org.aspectj.weaver.patterns.Pointcut.match(Pointcut.java:144) at\n                org.aspectj.weaver.ShadowMunger.match(ShadowMunger.java:64) at\n                org.aspectj.weaver.Advice.match(Advice.java:109) at\n                org.aspectj.weaver.bcel.BcelAdvice.match(BcelAdvice.java:104) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:2210) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.match(BcelClassWeaver.java:1752) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:479) at\n                org.aspectj.weaver.bcel.BcelClassWeaver.weave(BcelClassWeaver.java:109) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1574) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveWithoutDump(BcelWeaver.java:1525) at\n                org.aspectj.weaver.bcel.BcelWeaver.weaveAndNotify(BcelWeaver.java:1305) at\n                org.aspectj.weaver.bcel.BcelWeaver.weave(BcelWeaver.java:1127) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.weave(AjCompilerAdapter.java:321) at\n                org.aspectj.ajdt.internal.compiler.AjCompilerAdapter.afterCompiling(AjCompilerAdapter.java:192) at\n                org.aspectj.ajdt.internal.compiler.CompilerAdapter.ajc$afterReturning$org_aspectj_ajdt_internal_compiler_CompilerAdapter$2$f9cc9ca0(CompilerAdapter.aj:70)\n                at org.aspectj.org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:367) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.performCompilation(AjBuildManager.java:862) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.doBuild(AjBuildManager.java:269) at\n                org.aspectj.ajdt.internal.core.builder.AjBuildManager.incrementalBuild(AjBuildManager.java:168) at\n                org.aspectj.ajde.internal.CompilerAdapter.compile(CompilerAdapter.java:117) at\n                org.aspectj.ajde.internal.AspectJBuildManager$CompilerThread.run(AspectJBuildManager.java:191)\n            "}