{"NameMangler":"isSyntheticMethod perObjectInterfaceGet perObjectInterfaceSet perObjectInterfaceField perTypeWithinFieldForTarget perTypeWithinLocalAspectOf itdAtDeclareParentsField privilegedAccessMethodForMethod privilegedAccessMethodForFieldGet privilegedAccessMethodForFieldSet inlineAccessMethodForMethod inlineAccessMethodForFieldGet inlineAccessMethodForFieldSet adviceName interFieldInterfaceField interFieldInterfaceSetter interFieldInterfaceGetter interFieldSetDispatcher interFieldGetDispatcher interFieldClassField interFieldInitializer interMethod interMethodDispatcher interMethodBody preIntroducedConstructor postIntroducedConstructor superDispatchMethod protectedDispatchMethod makeVisibilityName makeName makeName makeName cflowStack cflowCounter makeClosureClassName aroundCallbackMethodName getExtractableName proceedMethodName isSyntheticMethod perObjectInterfaceGet perObjectInterfaceSet perObjectInterfaceField perTypeWithinFieldForTarget perTypeWithinLocalAspectOf itdAtDeclareParentsField privilegedAccessMethodForMethod privilegedAccessMethodForFieldGet privilegedAccessMethodForFieldSet inlineAccessMethodForMethod inlineAccessMethodForFieldGet inlineAccessMethodForFieldSet adviceName interFieldInterfaceField interFieldInterfaceSetter interFieldInterfaceGetter interFieldSetDispatcher interFieldGetDispatcher interFieldClassField interFieldInitializer interMethod interMethodDispatcher interMethodBody preIntroducedConstructor postIntroducedConstructor superDispatchMethod protectedDispatchMethod makeVisibilityName makeName makeName makeName cflowStack cflowCounter makeClosureClassName aroundCallbackMethodName getExtractableName proceedMethodName PREFIX ITD_PREFIX CFLOW_STACK_TYPE CFLOW_COUNTER_TYPE CFLOW_STACK_UNRESOLVEDTYPE CFLOW_COUNTER_UNRESOLVEDTYPE SOFT_EXCEPTION_TYPE PERSINGLETON_FIELD_NAME PERCFLOW_FIELD_NAME PERCFLOW_PUSH_METHOD PEROBJECT_BIND_METHOD PERTYPEWITHIN_GETINSTANCE_METHOD PERTYPEWITHIN_CREATEASPECTINSTANCE_METHOD PERTYPEWITHIN_WITHINTYPEFIELD PERTYPEWITHIN_GETWITHINTYPENAME_METHOD AJC_PRE_CLINIT_NAME AJC_POST_CLINIT_NAME INITFAILURECAUSE_FIELD_NAME PREFIX ITD_PREFIX CFLOW_STACK_TYPE CFLOW_COUNTER_TYPE CFLOW_STACK_UNRESOLVEDTYPE CFLOW_COUNTER_UNRESOLVEDTYPE SOFT_EXCEPTION_TYPE PERSINGLETON_FIELD_NAME PERCFLOW_FIELD_NAME PERCFLOW_PUSH_METHOD PEROBJECT_BIND_METHOD PERTYPEWITHIN_GETINSTANCE_METHOD PERTYPEWITHIN_CREATEASPECTINSTANCE_METHOD PERTYPEWITHIN_WITHINTYPEFIELD PERTYPEWITHIN_GETWITHINTYPENAME_METHOD AJC_PRE_CLINIT_NAME AJC_POST_CLINIT_NAME INITFAILURECAUSE_FIELD_NAME org.aspectj.weaver.NameMangler org.aspectj.weaver.NameMangler  public static final char[] CLINIT = { '<', 'c', 'l', 'i', 'n', 'i', 't', '>' };\r\n  public static final char[] INIT = { '<', 'i', 'n', 'i', 't', '>' };\r\n  -----\r\n  PTWIMPL Method and field names\r\n  body of an itd-m\r\n  around advice method is not synthetic, but generated proceed is...\r\n  it's synthetic unless it is an advice method\r\n  }\r\n  PTWIMPL method names that must include aspect type\r\n  ??? might want to handle case where aspect and class are in same package similar to public\r\n  ??? might want to handle case where aspect and class are in same package similar to public\r\n  public static final char[] CLINIT = { '<', 'c', 'l', 'i', 'n', 'i', 't', '>' };\r\n  public static final char[] INIT = { '<', 'i', 'n', 'i', 't', '>' };\r\n  -----\r\n  PTWIMPL Method and field names\r\n  body of an itd-m\r\n  around advice method is not synthetic, but generated proceed is...\r\n  it's synthetic unless it is an advice method\r\n  }\r\n  PTWIMPL method names that must include aspect type\r\n  ??? might want to handle case where aspect and class are in same package similar to public\r\n  ??? might want to handle case where aspect and class are in same package similar to public\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","BecomeWorkingCopyOperation":"executeOperation getWorkingCopy isReadOnly problemRequestor org.aspectj.org.eclipse.jdt.internal.core.BecomeWorkingCopyOperation  open the working copy now to ensure contents are that of the current state of this element\r\n  report an ADDED delta\r\n  report a F_PRIMARY_WORKING_COPY change delta for a primary working copy\r\n  report added java delta for a non-primary working copy\r\n /*\r\n\t * Creates a BecomeWorkingCopyOperation for the given working copy.\r\n\t * perOwnerWorkingCopies map is not null if the working copy is a shared working copy.\r\n\t */\r\n /*create if needed*/\r\n /*record usage*/\r\n /*\r\n\t * Returns the working copy this operation is working on.\r\n\t */\r\n /*\r\n\t * @see JavaModelOperation#isReadOnly\r\n\t */\r\n","CodeStream":"insertionIndex sort swap aaload aastore aconst_null addDefinitelyAssignedVariables addLabel addVisibleLocalVariable addVariable aload aload_0 aload_1 aload_2 aload_3 anewarray areturn arrayAt arrayAtPut arraylength astore astore_0 astore_1 astore_2 astore_3 athrow baload bastore bipush caload castore checkcast checkcast d2f d2i d2l dadd daload dastore dcmpg dcmpl dconst_0 dconst_1 ddiv decrStackSize dload dload_0 dload_1 dload_2 dload_3 dmul dneg drem dreturn dstore dstore_0 dstore_1 dstore_2 dstore_3 dsub dup dup_x1 dup_x2 dup2 dup2_x1 dup2_x2 exitUserScope exitUserScope f2d f2i f2l fadd faload fastore fcmpg fcmpl fconst_0 fconst_1 fconst_2 fdiv fload fload_0 fload_1 fload_2 fload_3 fmul fneg frem freturn fstore fstore_0 fstore_1 fstore_2 fstore_3 fsub generateBoxingConversion generateClassLiteralAccessForType generateCodeAttributeForProblemMethod generateConstant generateEmulatedReadAccessForField generateEmulatedWriteAccessForField generateEmulationForConstructor generateEmulationForField generateEmulationForMethod generateFieldAccess generateFieldAccess generateImplicitConversion generateInlinedValue generateInlinedValue generateInlinedValue generateInlinedValue generateInlinedValue generateInlinedValue generateInlinedValue generateInlinedValue generateOuterAccess generateReturnBytecode generateStringConcatenationAppend generateSyntheticBodyForConstructorAccess generateSyntheticBodyForEnumValueOf generateSyntheticBodyForEnumValues generateSyntheticBodyForFieldReadAccess generateSyntheticBodyForFieldWriteAccess generateSyntheticBodyForMethodAccess generateSyntheticBodyForSwitchTable generateSyntheticEnclosingInstanceValues generateSyntheticOuterArgumentValues generateUnboxingConversion generateWideRevertedConditionalBranch getBaseTypeValue getContents getfield getPosition getstatic getTYPE goto_ goto_w i2b i2c i2d i2f i2l i2s iadd iaload iand iastore iconst_0 iconst_1 iconst_2 iconst_3 iconst_4 iconst_5 iconst_m1 idiv if_acmpeq if_acmpne if_icmpeq if_icmpge if_icmpgt if_icmple if_icmplt if_icmpne ifeq ifge ifgt ifle iflt ifne ifnonnull ifnull iinc iload iload_0 iload_1 iload_2 iload_3 imul indexOfSameLineEntrySincePC ineg inlineForwardReferencesFromLabelsTargeting init initializeMaxLocals instance_of invoke invokeAccessibleObjectSetAccessible invokeArrayNewInstance invokeClassForName invokeClassGetDeclaredConstructor invokeClassGetDeclaredField invokeClassGetDeclaredMethod invokeEnumOrdinal invokeinterface invokeJavaLangAssertionErrorConstructor invokeJavaLangAssertionErrorDefaultConstructor invokeJavaLangClassDesiredAssertionStatus invokeJavaLangEnumvalueOf invokeJavaLangEnumValues invokeJavaLangErrorConstructor invokeJavaLangReflectConstructorNewInstance invokeJavaLangReflectFieldGetter invokeJavaLangReflectFieldSetter invokeJavaLangReflectMethodInvoke invokeJavaUtilIteratorHasNext invokeJavaUtilIteratorNext invokeNoClassDefFoundErrorStringConstructor invokeObjectGetClass invokespecial invokestatic invokeStringConcatenationAppendForType invokeStringConcatenationDefaultConstructor invokeStringConcatenationStringConstructor invokeStringConcatenationToString invokeStringIntern invokeStringValueOf invokeSystemArraycopy invokeThrowableGetMessage invokevirtual ior irem ireturn isDefinitelyAssigned ishl ishr istore istore_0 istore_1 istore_2 istore_3 isub iushr ixor jsr jsr_w l2d l2f l2i ladd laload land lastore lcmp lconst_0 lconst_1 ldc ldc ldc ldc ldc2_w ldc2_w ldcForIndex ldiv lload lload_0 lload_1 lload_2 lload_3 lmul lneg load load lookupswitch lor lrem lreturn lshl lshr lstore lstore_0 lstore_1 lstore_2 lstore_3 lsub lushr lxor monitorenter monitorexit multianewarray new_ newarray newArray newJavaLangAssertionError newJavaLangError newNoClassDefFoundError newStringContatenation newWrapperFor nop optimizeBranch pop pop2 pushOnStack putfield putstatic record recordExpressionType recordPositionsFrom recordPositionsFrom registerExceptionHandler removeNotDefinitelyAssignedVariables removeUnusedPcToSourceMapEntries removeVariable reset reset resetForProblemClinit resizeByteArray ret return_ saload sastore sendOperator sipush store swap tableswitch throwAnyException toString updateLastRecordedEndPC writePosition writePosition writeSignedShort writeSignedShort writeSignedWord writeSignedWord writeUnsignedShort writeWidePosition DEBUG ImplicitThis LABELS_INCREMENT LOCALS_INCREMENT noExceptionHandlers noLabels noLocals noVisibleLocals RESTART_IN_WIDE_MODE allLocalsCounter bCodeStream classFile classFileOffset constantPool countLabels exceptionLabels exceptionLabelsCounter generateAttributes L_UNKNOWN L_OPTIMIZABLE L_CANNOT_OPTIMIZE labels lastEntryPC lastAbruptCompletion lineSeparatorPositions locals maxFieldCount maxLocals methodDeclaration pcToSourceMap pcToSourceMapSize position preserveUnusedLocals stackDepth stackMax startingClassFileOffset targetLevel visibleLocals visibleLocalsCount wideMode org.aspectj.org.eclipse.jdt.internal.compiler.codegen.CodeStream  local variable attributes output\r\n  faster than ((m % 2) != 0)\r\n  we search only on even indexes\r\n  if the indexes have not crossed, swap\r\n  loop through the array until indices cross\r\n  The current classfile it is associated to.\r\n  The constant pool used to generate bytecodes that need to store information into the constant pool\r\n  a jump to the next bytecode.\r\n  last entry recorded\r\n  position of last instruction which abrupts completion: goto  So when first set can be incremented\r\n  Use Ints to keep from using extra bc when adding\r\n  Use Ints to keep from using extra bc when adding\r\n  I need to keep the starting point inside the byte array\r\n  target level to manage different code generation between different target levels\r\n  to handle goto_w\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Required to fix 1PR0XVS: LFRE:WINNT - Compiler: variable table for method appears incorrect\r\n  Check if the local is definitely assigned\r\n  $NON-NLS-1$\r\n  Don't need to use the wide bytecode\r\n  Widen\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  the stackDepth should be equal to 0\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Widen\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  + 2 because it is a double\r\n  Don't need to use the wide bytecode\r\n  Widen\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  the stackDepth should be equal to 0\r\n  $NON-NLS-1$\r\n  Widen\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  left currentScope\r\n  there may be some preserved locals never initialized\r\n  this variable is no longer visible afterwards\r\n  mark all the scope's locals as losing their definite assignment\r\n  left currentScope\r\n  there may be some preserved locals never initialized\r\n  this variable is no longer visible afterwards\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Widen\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  the stackDepth should be equal to 0\r\n  $NON-NLS-1$\r\n  Widen\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  invokestatic: Byte.valueOf(byte)\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  non interface case\r\n  $NON-NLS-1$\r\n  non interface case\r\n  Generate the body of the exception handler\r\n  Retrieve the message from the old exception\r\n  Send the constructor taking a message string as an argument\r\n  generation using the new ldc_w bytecode\r\n  use default constant type\r\n  need boxing\r\n  swap  the field with the receiver\r\n  leave a java.lang.reflect.Field object on the stack\r\n  parameter is a reference binding\r\n  leave a java.lang.reflect.Field object on the stack\r\n  leave a java.lang.reflect.Field object on the stack\r\n  parameter is a reference binding\r\n  need to unbox  TODO (philippe) should improve local emulation failure reporting\r\n  into a string (handles null case)\r\n  special name&ordinal argument generation for enum constructors\r\n  pass along name param as name arg\r\n  pass along ordinal param as ordinal arg\r\n  }\r\n  }\r\n  break;\r\n  for bridge methods\r\n  qualified super \"X.super.foo()\" targets methods from superclass\r\n  interface or annotation type\r\n  for bridge methods\r\n  zero should not be returned see bug 141810\r\n  Generate the body of the exception handler\r\n  we don't use it so we can pop it\r\n  supplying enclosing instance for the anonymous type's superclass\r\n  perform some emulation work in case there is some and we are inside a local type only\r\n  always consider it if complying to 1.5\r\n  compliance >= JDK1_5\r\n  will perform null check\r\n  generate the synthetic outer arguments then\r\n  argCount\r\n  return type size\r\n  invokevirtual: byteValue()\r\n  argCount\r\n  return type size\r\n  invokevirtual: shortValue()\r\n  argCount\r\n  return type size\r\n  invokevirtual: charValue()\r\n  argCount\r\n  return type size\r\n  invokevirtual: intValue()\r\n  argCount\r\n  return type size\r\n  invokevirtual: longValue()\r\n  argCount\r\n  return type size\r\n  invokevirtual: floatValue()\r\n  argCount\r\n  return type size\r\n  invokevirtual: doubleValue()\r\n  argCount\r\n  return type size\r\n  invokevirtual: booleanValue()\r\n  argCount\r\n  return type size\r\n  invokevirtual: byteValue()\r\n  argCount\r\n  return type size\r\n  invokevirtual: shortValue()\r\n  argCount\r\n  return type size\r\n  invokevirtual: charValue()\r\n  argCount\r\n  return type size\r\n  invokevirtual: intValue()\r\n  argCount\r\n  return type size\r\n  invokevirtual: longValue()\r\n  argCount\r\n  return type size\r\n  invokevirtual: floatValue()\r\n  argCount\r\n  return type size\r\n  invokevirtual: doubleValue()\r\n  argCount\r\n  return type size\r\n  invokevirtual: booleanValue()\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$  $NON-NLS-1$  ensure existing forward references are updated\r\n  backward jump, no further chaining allowed\r\n  this.lastAbruptCompletion = -1;\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   have to widen\r\n  $NON-NLS-1$\r\n  Widen\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  already inlined\r\n  recursive\r\n  ignore since already inlined\r\n  optimizable, providing no vetoing\r\n  case label\r\n  check was some standards, and no case  String and int (enum constant name+ordinal)\r\n  take into account enum constructor synthetic name+ordinal\r\n  an enclosingInstanceType can only be a reference binding. It cannot be\r\n  take into account the synthetic parameters\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  invokevirtual: java.lang.reflect.AccessibleObject.setAccessible(Z)V;\r\n  argCount\r\n  return type size\r\n  invokestatic: java.lang.reflect.Array.newInstance(Ljava.lang.Class;int[])Ljava.lang.Object;\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  argCount\r\n  return type size\r\n  invokevirtual: java.lang.Class getDeclaredConstructor([Ljava.lang.Class)Ljava.lang.reflect.Constructor;\r\n  argCount\r\n  return type size\r\n  invokevirtual: java.lang.Class.getDeclaredField(Ljava.lang.String)Ljava.lang.reflect.Field;\r\n  argCount\r\n  return type size\r\n  invokevirtual: java.lang.Class getDeclaredMethod(Ljava.lang.String, [Ljava.lang.Class)Ljava.lang.reflect.Method;\r\n  $NON-NLS-1$   argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  initialized to 1 to take into account this  immediately\r\n  the number of bytes.\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  argCount\r\n  return type size\r\n  invokevirtual: java.lang.reflect.Constructor.newInstance([Ljava.lang.Object;)Ljava.lang.Object;\r\n  argCount\r\n  return type size\r\n  argCount\r\n  return type size\r\n  argCount\r\n  return type size\r\n  invokevirtual: java.lang.reflect.Method.invoke(Ljava.lang.Object;[Ljava.lang.Object;)Ljava.lang.Object;\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  initialized to 1 to take into account this immediately\r\n  enclosing instances\r\n  outer local variables\r\n  adding String and int\r\n  $NON-NLS-1$\r\n  a static method\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  invokespecial: java.lang.StringBuffer.<init>()V\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  argCount\r\n  return type size\r\n  $NON-NLS-1$\r\n  initialized to 1 to take into account this  immediately\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  the stackDepth should be equal to 0\r\n  Mirror of UnconditionalFlowInfo.isDefinitelyAssigned(..)\r\n  use bits\r\n  id is zero-based\r\n  use extra vector\r\n  if vector not yet allocated, then not initialized\r\n  if not enough room in vector, then not initialized\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Widen\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Generate a ldc\r\n  $NON-NLS-1$\r\n  Generate a ldc_w\r\n  $NON-NLS-1$\r\n  Generate a ldc\r\n  $NON-NLS-1$\r\n  Generate a ldc_w\r\n  this case is very rare, so we can afford to lose time to handle it\r\n  we resize the byte array immediately if necessary\r\n  0xC0 = 1100 0000\r\n  0x80 = 1000 0000\r\n  0xE0 = 1110 0000\r\n  0x80 = 1000 0000\r\n  0x80 = 1000 0000\r\n  we only need one byte: ASCII table\r\n  the string is too big to be encoded in one pass\r\n  write the first part\r\n  write the remaining part\r\n  we resize the byte array immediately if necessary\r\n  0xC0 = 1100 0000\r\n  0x80 = 1000 0000\r\n  0xE0 = 1110 0000\r\n  0x80 = 1000 0000\r\n  0x80 = 1000 0000\r\n  we only need one byte: ASCII table\r\n  the next part is done\r\n  now on the stack it should be a StringBuffer and a string.\r\n  we reuse the same index\r\n  $NON-NLS-1$\r\n  Generate a ldc\r\n  $NON-NLS-1$\r\n  Generate a ldc_w\r\n  $NON-NLS-1$\r\n  Generate a ldc2_w\r\n  $NON-NLS-1$\r\n  Generate a ldc2_w\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Widen\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  break;\r\n  Using dedicated int bytecode\r\n  $NON-NLS-1$\r\n  faster than % 4\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  the stackDepth should be equal to 0\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Widen\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  We didn't call it new, because there is a conflit with the new keyword\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  new: java.lang.StringBuilder\r\n  new: java.lang.Integer\r\n  $NON-NLS-1$\r\n  new: java.lang.Boolean\r\n  $NON-NLS-1$\r\n  new: java.lang.Byte\r\n  $NON-NLS-1$\r\n  new: java.lang.Character\r\n  $NON-NLS-1$\r\n  new: java.lang.Float\r\n  $NON-NLS-1$\r\n  new: java.lang.Double\r\n  $NON-NLS-1$\r\n  new: java.lang.Short\r\n  $NON-NLS-1$\r\n  new: java.lang.Long\r\n  $NON-NLS-1$\r\n  new: java.lang.Void\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  resize the collection\r\n  resize the array pcToSourceMap\r\n  Widening an existing entry that already has the same source positions\r\n  record the first entry\r\n  we can safely add the new entry. The endPC of the previous entry is not in conflit with the startPC of the new entry.\r\n  search if an existing entry exists for startPC\r\n  see if we can widen the existing entry\r\n  no bytecode since last entry pc\r\n  index for PC\r\n  we have to add an entry that won't be sorted. So we sort the pcToSourceMap.\r\n  widen existing entry\r\n  in this case there is already an entry in the table\r\n  lastEntryPC represents the endPC of the lastEntry.\r\n  resize the exception handlers table\r\n  no need to resize. So just add the new exception label\r\n  if this happens, then we must update their pc entries to reflect it in debug attributes\r\n  this variable is no longer visible afterwards\r\n  must be sure to grow enough\r\n  $NON-NLS-1$\r\n  Don't Widen\r\n  Widen\r\n  $NON-NLS-1$\r\n  the stackDepth should be equal to 0\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  break;\r\n  Reference object\r\n  Using dedicated int bytecode\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  padding\r\n  if high is maxint, then avoids wrapping to minint.\r\n  optimized tableswitch\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  need to update the initialization endPC in case of generation of local variable attributes.\r\n  we keep the resize in here because it is used outside the code stream\r\n  we keep the resize in here because it is used outside the code stream\r\n  no bound check since used only from within codestream where already checked\r\n /* Arbitrarily establishing partition element as the midpoint of\r\n\t\t\t  * the array.\r\n\t\t\t  */\r\n /* find the first element that is greater than or equal to \r\n\t\t\t\t * the partition element starting from the left Index.\r\n\t\t\t\t */\r\n /* find an element that is smaller than or equal to \r\n\t\t\t\t * the partition element starting from the right Index.\r\n\t\t\t\t */\r\n /* If the right index has not reached the left side of array\r\n\t\t\t  * must now sort the left partition.\r\n\t\t\t  */\r\n /* If the left index has not reached the right side of array\r\n\t\t\t  * must now sort the right partition.\r\n\t\t\t  */\r\n /* There are two cases:\r\n\t\t\t\t\t * 1) there is no initialization interval opened ==> add an opened interval\r\n\t\t\t\t\t * 2) there is already some initialization intervals but the last one is closed ==> add an opened interval\r\n\t\t\t\t\t * An opened interval means that the value at localBinding.initializationPCs[localBinding.initializationCount - 1][1]\r\n\t\t\t\t\t * is equals to -1.\r\n\t\t\t\t\t * initializationPCs is a collection of pairs of int:\r\n\t\t\t\t\t * \tfirst value is the startPC and second value is the endPC. -1 one for the last value means that the interval\r\n\t\t\t\t\t * \tis not closed yet.\r\n\t\t\t\t\t */\r\n /* We need to protect the runtime code from binary inconsistencies\r\n\t\tin case the accessedType is missing, the ClassNotFoundException has to be converted\r\n\t\tinto a NoClassDefError(old ex message), we thus need to build an exception handler for this one. */\r\n /* Operand is already on the stack, and maybe nil:\r\n\t\tnote type1 is always to  java.lang.String here.*/\r\n /*not only exact match (that is, allow compatible)*/\r\n /*\r\n * Wide conditional branch compare, improved by swapping comparison opcode\r\n *   ifeq WideTarget\r\n * becomes\r\n *    ifne Intermediate\r\n *    gotow WideTarget\r\n *    Intermediate:\r\n */\r\n /*\r\n\t Possible optimization for code such as:\r\n\t public Object foo() {\r\n\t\tboolean b = true;\r\n\t\tif (b) {\r\n\t\t\tif (b)\r\n\t\t\t\treturn null;\r\n\t\t} else {\r\n\t\t\tif (b) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\tThe goto around the else block for the first if will\r\n\tbe unreachable, because the thenClause of the second if\r\n\treturns. Also see 114894\r\n\t}*/\r\n /*\r\n * Some placed labels might be branching to a goto bytecode which we can optimize better.\r\n */\r\n /* First we need to check if at the insertion position there is not an existing entry\r\n\t\t\t\t\t * that includes the one we want to insert. This is the case if pcToSourceMap[insertionIndex - 1] == newLine.\r\n\t\t\t\t\t * In this case we don't want to change the table. If not, we want to insert a new entry. Prior to insertion\r\n\t\t\t\t\t * we want to check if it is worth doing an arraycopy. If not we simply update the recorded pc.\r\n\t\t\t\t\t */\r\n /* the last recorded entry is on the same line. But it could be relevant to widen this entry.\r\n\t\t\t   we want to extend this entry forward in case we generated some bytecode before the last entry that are not related to any statement\r\n\t\t\t*/\r\n /* the existingEntryIndex corresponds to an entry with the same line and a PC >= startPC.\r\n\t\t\t\t\t\tin this case it is relevant to widen this entry instead of creating a new one.\r\n\t\t\t\t\t\tline1: this(a,\r\n\t\t\t\t\t\t  b,\r\n\t\t\t\t\t\t  c);\r\n\t\t\t\t\t\twith this code we generate each argument. We generate a aload0 to invoke the constructor. There is no entry for this\r\n\t\t\t\t\t\taload0 bytecode. The first entry is the one for the argument a.\r\n\t\t\t\t\t\tBut we want the constructor call to start at the aload0 pc and not just at the pc of the first argument.\r\n\t\t\t\t\t\tSo we widen the existing entry (if there is one) or we create a new entry with the startPC.\r\n\t\t\t\t\t*/\r\n","ClassFileReader":"printTypeModifiers read read read read read read read read accessFlags decodeAnnotations getConstantClassNameAt getConstantPoolOffsets getEnclosingTypeName getFields getFileName getGenericSignature getInnerSourceName getInterfaceNames getMemberTypes getMethods getAnnotations getModifiers getName getSourceName getSuperclassName getTagBits getVersion hasNonSyntheticFieldChanges hasNonSyntheticMethodChanges hasStructuralChanges hasStructuralChanges hasStructuralFieldChanges hasStructuralMethodChanges initialize isAnonymous isBinaryType isLocal isMember isNestedType sourceFileName toString getReferenceBytes getAccessFlags getAttributeCount getAttributes getClassIndex getClassName getConstantClassNameAt getConstantPool getFieldInfos getFieldsCount getInnerClassesAttribute getInterfaceIndexes getInterfaceNames getMagic getMajorVersion getMethodInfos getMethodsCount getMinorVersion getSourceFileAttribute getSuperclassIndex getSuperclassName isClass isInterface accessFlags classFileName className classNameIndex constantPoolCount annotations fields fieldsCount innerInfo innerInfoIndex innerInfos interfaceNames interfacesCount methods methodsCount signature sourceName sourceFileName superclassName tagBits version enclosingTypeName NO_FIELD_INFOS NO_INTERFACES_NAMES NO_METHOD_INFOS accessFlags attributes attributesCount className classNameIndex constantPool fields fieldsCount innerClassesAttribute interfaceIndexes interfaceNames interfacesCount magicNumber majorVersion methods methodsCount minorVersion sourceFileAttribute superclassName superclassNameIndex org.aspectj.org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader org.aspectj.org.eclipse.jdt.internal.core.util.ClassFileReader  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  initialized in case the .class file is a nested type\r\n  all subsequent uses of the constant pool element faster.\r\n  major<<16 + minor\r\n  Pass #1 - Fill in all primitive constants\r\n  Read and validate access flags\r\n  Read the classname, use exception handlers to catch bad format\r\n  Read the superclass name, can be null for java.lang.Object\r\n  field this.superclassName. null is fine.\r\n  Read the interfaces, use exception handlers to catch bad format\r\n  Read the fields, use exception handlers to catch bad format\r\n  Read the methods\r\n  Read the attributes\r\n  With the last parameter being 'false', the data structure will not be flushed out\r\n  nothing to record in this.annotations\r\n  we might have some member types of the current type\r\n  are present in the current class.\r\n  member or local scenario\r\n  extract from full name\r\n  modifiers\r\n  different @Target status ?\r\n  different @Deprecated status ?\r\n  different @Retention status ?\r\n  different hierarchy status ?\r\n  e.g. @Override change has no influence outside\r\n  meta-annotations\r\n  generic signature\r\n  superclass\r\n  interfaces\r\n  TypeConstants.NoSuperInterfaces\r\n  member types\r\n  TypeConstants.NoMemberTypes\r\n  fields\r\n  methods\r\n  generic signature\r\n  generic signature\r\n  TypeConstants.NoExceptions\r\n  protection against ill-formed attributes (67600)\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-2$   $NON-NLS-1$   AspectJ Extension\r\n  all subsequent uses of the constant pool element faster.\r\n  no need to go further\r\n  Pass #1 - Fill in all primitive constants\r\n  Read and validate access flags\r\n  Read the classname, use exception handlers to catch bad format\r\n  Read the superclass name, can be zero for java.lang.Object\r\n  field this.superclassName. null is fine.\r\n  Read the interfaces, use exception handlers to catch bad format\r\n  Read the this.fields, use exception handlers to catch bad format\r\n  Read the this.methods\r\n  Read the attributes\r\n /*\r\n * Answer the resolved compoundName of the enclosing type\r\n * or null if the receiver is a top level type.\r\n */\r\n /*\r\n\t\t\t * Checking that outerClassNameIDx is different from 0 should be enough to determine if an inner class\r\n\t\t\t * attribute entry is a member class, but due to the bug:\r\n\t\t\t * http://dev.eclipse.org/bugs/show_bug.cgi?id=14592\r\n\t\t\t * we needed to add an extra check. So we check that innerNameIndex is different from 0 as well.\r\n\t\t\t * \r\n\t\t\t * https://bugs.eclipse.org/bugs/show_bug.cgi?id=49879\r\n\t\t\t * From JavaMail 1.2, the class javax.mail.Folder contains an anonymous class in the\r\n\t\t\t * terminateQueue() method for which the inner attribute is boggus.\r\n\t\t\t * outerClassNameIdx is not 0, innerNameIndex is not 0, but the sourceName length is 0.\r\n\t\t\t * So I added this extra check to filter out this anonymous class from the \r\n\t\t\t * member types.\r\n\t\t\t */\r\n","CodeSnippetEvaluator":"addEvaluationResultForCompilationProblem getClassName getCompiler getMapper getSource getWrapperEnvironment DEVELOPMENT_MODE codeSnippet mapper org.aspectj.org.eclipse.jdt.internal.eval.CodeSnippetEvaluator  shift line number, source start and source end\r\n  shift line number, source start and source end\r\n  shift line number, source start and source end\r\n  Initialize the compiler's lookup environment with the already compiled super classes\r\n  Should never happen since we compiled this type\r\n","MemberRef":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getQualifier setQualifier getName setName resolveBinding memSize treeSize QUALIFIER_PROPERTY NAME_PROPERTY PROPERTY_DESCRIPTORS optionalQualifier memberName org.aspectj.org.eclipse.jdt.core.dom.MemberRef  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","MultiTypeDeclarationPattern":"getBlankPattern getIndexCategories matchesDecodedKey queryIn print simpleNames qualifications typeSuffix CATEGORIES org.aspectj.org.eclipse.jdt.internal.core.search.matching.MultiTypeDeclarationPattern  set to TYPE_SUFFIX for matching both classes and interfaces\r\n  null simple names are allowed (should return all names)\r\n  only used to report type declarations, not their positions\r\n  check type suffix\r\n  check qualified name\r\n  check simple name (null are allowed)\r\n  match rule is irrelevant when the key is null\r\n  do a prefix query with the simpleName\r\n  do a prefix query with the simpleName\r\n  TODO (frederic) implement regular expression match\r\n  match rule is irrelevant when the key is null\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","SearchableEnvironment":"convertSearchFilterToModelFilter find findPackages findExactTypes findExactTypes findType findType findTypes findTypes isPackage toStringChar toStringCharChar cleanup nameLookup unitToSkip workingCopies project searchScope checkAccessRestrictions isCanceled isCanceled org.aspectj.org.eclipse.jdt.internal.core.SearchableEnvironment  Create search scope with visible entry on the project's classpath\r\n  retrieve the requested type\r\n  find all siblings (other types declared in same unit, since may be used for name resolution)\r\n  in the resulting collection, ensure the requested type is the first one\r\n  check that the index is in bounds (see https:  SourceType\r\n  BinaryType\r\n  construct name env answer\r\n  revert to model investigation\r\n  accept only top level types\r\n  revert to model investigation\r\n  accept only top level types\r\n  not case sensitive\r\n  TODO (david) should add camel case support\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*exact match*/\r\n /*\r\n\t\t\tif (true){\r\n\t\t\t\tfindTypes(new String(prefix), storage, NameLookup.ACCEPT_CLASSES | NameLookup.ACCEPT_INTERFACES);\r\n\t\t\t\treturn;\t\t\r\n\t\t\t}\r\n\t\t*/\r\n","RuntimeInvisibleParameterAnnotationsAttribute":"getParameterAnnotations getParametersNumber NO_ENTRIES parameterAnnotations parametersNumber org.aspectj.org.eclipse.jdt.internal.core.util.RuntimeInvisibleParameterAnnotationsAttribute /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IRuntimeInvisibleParameterAnnotations#getAnnotations()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IRuntimeInvisibleParameterAnnotations#getParametersNumber()\r\n\t */\r\n","CompletionOnMethodTypeParameter":"resolveStatements print org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnMethodTypeParameter  $NON-NLS-1$\r\n","MethodBinding":"isAnnotationMember isConstructor isDefaultConstructor getName getAnnotations getDeclaringClass getParameterAnnotations getParameterTypes getReturnType getDefaultValue getExceptionTypes getJavaElement getUnresolvedJavaElement getKind getModifiers isDeprecated isRecovered isSynthetic isVarargs getKey isEqualTo getTypeParameters isGenericMethod getTypeArguments isParameterizedMethod isRawMethod isSubsignature getMethodDeclaration overrides toString areParameterErasuresEqual areParametersEqual areParametersCompatibleWith kind canBeSeenBy areTypeVariableErasuresEqual canBeSeenBy getVisibleBinding getVisibleBinding findPrivilegedBinding canBeSeenBy computeSubstitutedMethod computeUniqueKey constantPoolDeclaringClass constantPoolName genericSignature getAnnotations getParameterAnnotations getAccessFlags getAnnotationTagBits getDefaultValue getTypeVariable hasSubstitutedParameters hasSubstitutedReturnType isAbstract isBridge isConstructor isDefault isDefaultAbstract isDeprecated isFinal isImplementing isNative isOverriding isMain isPrivate isUsed isProtected isPublic isStatic isStrictfp isSynchronized isSynthetic isVarargs isViewedAsDeprecated original readableName setAnnotations setAnnotations setDefaultValue setParameterAnnotations shortReadableName setSelector signature signature sourceEnd sourceMethod sourceStart alwaysNeedsAccessMethod getAccessMethod toString tiebreakMethod typeVariables VALID_MODIFIERS NO_TYPE_BINDINGS binding resolver parameterTypes exceptionTypes name declaringClass returnType key typeParameters typeArguments annotations parameterAnnotations modifiers selector returnType parameters thrownExceptions declaringClass typeVariables signature tagBits org.aspectj.org.eclipse.jdt.core.dom.MethodBinding org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodBinding  $NON-NLS-1$\r\n  report no binding since one or more parameter has no binding\r\n  case of method not in the created AST, or a binary method\r\n  declaring type doesn't exist\r\n  annotation type member declaration\r\n  annotation type members don't have parameters\r\n  identical binding - equal (key or no key)\r\n  other binding missing\r\n  equivalent to return getTypeParameters().length > 0;\r\n  see https:  see https:  propagate the strictfp & deprecated modifiers\r\n  New AspectJ Extension - check for null\r\n  special API used to change method declaring class for runtime visibility check\r\n  can call foo(int i, X ... x) with foo(1) but NOT foo();\r\n  all remainig argument types must be compatible with the elementsType of varArgType\r\n  is an ArrayBinding by definition\r\n  isProtected() or isDefault()\r\n  AspectJ Extension - new local variable to hold the declaringType\r\n  NewNew AspectJ Extension - enclosingSourceType();\r\n  AspectJ Extension - was declaringClass\r\n  AspectJ Extension - was == declaringClass.fPackage\r\n  already know they are not the identical type\r\n  AspectJ Extension - changed declaringClass to declaringType\r\n  AspectJ Extension - changed declaringClass to declaringType\r\n  AspectJ Extension - made non-final\r\n  AspectJ Extension\r\n  notePrivilegedTypeAccess(this, null);\r\n  AspectJ Extension - was scope.enclosingSourceType()\r\n  static import call\r\n  OR previous assertions are true for one of the enclosing type\r\n  invocationType();  this MUST be an ITD\r\n  MUST be in the same package as the invocationType though... (pr 71723)\r\n  End AspectJ Extension\r\n  receiverType can be an array binding in one case... see if you can change it\r\n  see 1FMEPDL - return invocationSite.isTypeAccess();\r\n  special tolerance for type variable direct bounds\r\n  AND the invocationType and the declaringClass have a common enclosingType\r\n  isDefault()\r\n  receiverType can be an array binding in one case... see if you can change it\r\n  package could be null for wildcards  AspectJ Extension - made non-final\r\n  <T2 extends X<T2>> Object dup() {return null;}\r\n  declaring class\r\n  selector\r\n  generic signature\r\n  thrown exceptions\r\n  add one char for separator\r\n  only append thrown exceptions if any is generic  It can only be from a source type within compilation units to process.\r\n  AspectJ Extension, made non-final\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  insert String name,int ordinal\r\n  take into account the synthetic argument type signatures as well\r\n  move the extra padding arguments of the synthetic constructor invocation to the end\r\n  we need to record inner classes references\r\n  take into account the synthetic argument type signatures as well\r\n  move the extra padding arguments of the synthetic constructor invocation to the end\r\n  insert String name,int ordinal\r\n  take into account the synthetic argument type signatures as well\r\n  move the extra padding arguments of the synthetic constructor invocation to the end\r\n  AspectJ Extension\r\n  End AspectJ Extension\r\n  guard due to pr154923 - an npe occurs that is probably disguising an underlying problem that will be reported properly\r\n  End AspectJ Extension\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* Answer true if the argument types & the receiver's parameters have the same erasure\r\n*/\r\n /* Answer true if the argument types & the receiver's parameters are equal\r\n*/\r\n /*\r\n * Returns true if given parameters are compatible with this method parameters.\r\n * Callers to this method should first check that the number of TypeBindings\r\n * passed as argument matches this MethodBinding number of parameters\r\n */\r\n /* Answer true if the type variables have the same erasure\r\n*/\r\n /*\r\n * declaringUniqueKey dot selector genericSignature\r\n * p.X { <T> void bar(X<T> t) } --> Lp/X;.bar<T:Ljava/lang/Object;>(LX<TT;>;)V\r\n */\r\n /* \r\n * Answer the declaring class to use in the constant pool\r\n * may not be a reference binding (see subtypes)\r\n */\r\n /* Answer the receiver's constant pool name.\r\n*\r\n* <init> for constructors\r\n* <clinit> for clinit methods\r\n* or the source name of the method\r\n*/\r\n /* Answer true if the return type got substituted.\r\n */\r\n /* Answer true if the receiver is an abstract method\r\n*/\r\n /* Answer true if the receiver is a bridge method\r\n*/\r\n /* Answer true if the receiver is a constructor\r\n*/\r\n /* Answer true if the receiver has default visibility\r\n*/\r\n /* Answer true if the receiver is a system generated default abstract method\r\n*/\r\n /* Answer true if the receiver is a deprecated method\r\n*/\r\n /* Answer true if the receiver is final and cannot be overridden\r\n*/\r\n /* Answer true if the receiver is implementing another method\r\n * in other words, it is overriding and concrete, and overriden method is abstract\r\n * Only set for source methods\r\n*/\r\n /* Answer true if the receiver is a native method\r\n*/\r\n /* Answer true if the receiver is overriding another method\r\n * Only set for source methods\r\n*/\r\n /*\r\n * Answer true if the receiver is a \"public static void main(String[])\" method\r\n */\r\n /* Answer true if the receiver has private visibility\r\n*/\r\n /* Answer true if the receiver has private visibility and is used locally\r\n*/\r\n /* Answer true if the receiver has protected visibility\r\n*/\r\n /* Answer true if the receiver has public visibility\r\n*/\r\n /* Answer true if the receiver is a static method\r\n*/\r\n /* Answer true if all float operations must adher to IEEE 754 float/double rules\r\n*/\r\n /* Answer true if the receiver is a synchronized method\r\n*/\r\n /* Answer true if the receiver has public visibility\r\n*/\r\n /* Answer true if the receiver method has varargs\r\n*/\r\n /* Answer true if the receiver's declaring type is deprecated (or any of its enclosing types)\r\n*/\r\n /* foo(int, Thread) */\r\n /* (ILjava/lang/Thread;)Ljava/lang/Object; */\r\n /* Answer the receiver's signature.\r\n*\r\n* NOTE: This method should only be used during/after code gen.\r\n* The signature is cached so if the signature of the return type or any parameter\r\n* type changes, the cached state is invalid.\r\n*/\r\n /*\r\n * This method is used to record references to nested types inside the method signature.\r\n * This is the one that must be used during code generation.\r\n * \r\n * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=171184\r\n */\r\n","PointcutParameterImpl":"getName getType getBinding setBinding getName getType getBinding setBinding name type binding name type binding org.aspectj.weaver.reflect.PointcutParameterImpl org.aspectj.weaver.reflect.PointcutParameterImpl /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","TargetSourceRangeComputer":"getStartPosition getLength computeSourceRange startPosition length org.aspectj.org.eclipse.jdt.core.dom.rewrite.TargetSourceRangeComputer","MethodDelegateTypeMunger":"equals hashCode getDelegate getImplClassName write readMethod matches changesPublicSignature equals hashCode write readFieldHost matches changesPublicSignature equals hashCode getDelegate getImplClassName write readMethod matches changesPublicSignature equals hashCode write readFieldHost matches changesPublicSignature aspect implClassName typePattern hashCode aspect typePattern aspect implClassName typePattern hashCode aspect typePattern org.aspectj.weaver.MethodDelegateTypeMunger org.aspectj.weaver.MethodDelegateTypeMunger  match only on class\r\n  match only on class\r\n  match only on class\r\n  match only on class\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved.\r\n * This program and the accompanying materials are made available\r\n * under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution and is available at\r\n * http://eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors: \r\n *     Alexandre Vasseur     initial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved.\r\n * This program and the accompanying materials are made available\r\n * under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution and is available at\r\n * http://eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors: \r\n *     Alexandre Vasseur     initial implementation\r\n * ******************************************************************/\r\n","ClassFile":"buildAllDirectoriesInto createProblemType getNewInstance writeToDisk addAbstractMethod addAttributes addDefaultAbstractMethods addFieldAttributes addFieldInfo addFieldInfos addMissingAbstractProblemMethod addProblemClinit addProblemConstructor addProblemConstructor addProblemMethod addProblemMethod addSpecialMethods addSyntheticConstructorAccessMethod addSyntheticEnumValueOfMethod addSyntheticEnumValuesMethod addSyntheticFieldReadAccessMethod addSyntheticFieldWriteAccessMethod addSyntheticMethodAccessMethod addSyntheticSwitchTable completeCodeAttribute completeCodeAttributeForClinit completeCodeAttributeForClinit completeCodeAttributeForMissingAbstractProblemMethod completeCodeAttributeForProblemMethod completeCodeAttributeForSyntheticMethod completeCodeAttributeForSyntheticMethod completeMethodInfo fileName generateAnnotation generateCodeAttributeHeader generateElementValue generateElementValue generateElementValueForNonConstantExpression generateMethodInfoAttribute generateMethodInfoAttribute generateMethodInfoAttribute generateMethodInfoAttribute writeToContents generateMethodInfoHeader generateMethodInfoHeader generateMethodInfoHeaderForClinit generateMissingAbstractMethods generateRuntimeAnnotations generateRuntimeAnnotationsForParameters getBytes getCompoundName initByteArrays initialize isRuntimeInvisible isRuntimeVisible outerMostEnclosingClassFile recordInnerClasses reset resizeContents setForMethodInfos becomeWorkingCopy buildStructure codeComplete codeComplete codeComplete codeComplete codeSelect codeSelect createElementInfo equals exists existsUsingJarTypeCache findElement findPrimaryType getAttachedJavadoc getBinaryTypeInfo getBytes getJarBinaryTypeInfo getBuffer getClassFile getTypeRoot getCorrespondingResource getElementAt getElementAtConsideringSibling getElementName getElementType getHandleFromMemento getHandleMementoDelimiter getPath getResource getSource getSourceRange getTopLevelTypeName getType getTypeName getWorkingCopy getWorkingCopy hasBuffer hashCode isClass isInterface isReadOnly validateClassFile openBuffer mapSource simpleName translatedName translatedNames unqualifiedName codeComplete bytes codeStream constantPool constantPoolOffset contents contentsOffset creatingProblemType enclosingClassFile header headerOffset innerClassesBindings methodCount methodCountOffset isShared produceAttributes referenceBinding targetJDK INITIAL_CONTENTS_SIZE INITIAL_HEADER_SIZE INNER_CLASSES_SIZE extraAttributes name binaryType org.aspectj.org.eclipse.jdt.internal.compiler.ClassFile org.aspectj.org.eclipse.jdt.internal.core.ClassFile  the header contains all the bytes till the end of the constant pool\r\n  that collection contains all the remaining bytes of the .class file\r\n  pool managment\r\n  debug and stack map attributes\r\n  all\r\n  a slower algorithm so as to refine the diagnostic\r\n  no one could create f -- complain\r\n  someone else created f -- need to check its type\r\n  we have to create that directory\r\n  pre-existed\r\n  reset\r\n  no one could create f -- complain\r\n  someone else created f -- need to check its type\r\n  we have to create that directory\r\n  this is suboptimal, but it catches corner cases\r\n  token contains the last one\r\n  see bug 180109\r\n  inner attributes\r\n  add its fields\r\n  we have to set the number of fields to be equals to 0\r\n  leave some space for the methodCount\r\n  add its user defined methods\r\n  which should contain all the problem\r\n  add abstract methods\r\n  propagate generation of (problem) member types\r\n  First we ensure that the outputPath exists\r\n  To be able to pass the mkdirs() method we need to remove the extra file separator at the end of the outDir name\r\n  if no IOException occured, output cannot be null\r\n  default constructor for subclasses\r\n  AspectJ Extension\r\n  force the modifiers to be public and abstract\r\n  update the method count\r\n  leave two bytes for the number of attributes and store the current offset\r\n  to the @fieldBinding\r\n  attribute\r\n  write the source file name\r\n  source attribute\r\n  to the @fieldBinding\r\n  the length of a deprecated attribute is equals to 0\r\n  Deprecated attribute\r\n  add signature attribute\r\n  to the @fieldBinding\r\n  the length of a signature attribute is equals to 2\r\n  add enclosing method attribute (1.5 mode only)\r\n  the length of a signature attribute is equals to 2\r\n  new code:\r\n  End AspectJ Extension\r\n  add an attribute for inconsistent hierarchy\r\n  the length of an inconsistent hierarchy attribute is equals to 0\r\n  Inner class attribute\r\n  Generate the inner class attribute\r\n  attribute name\r\n  inner class index\r\n  equals to 0 if the innerClass is not a member type\r\n  member or member of local\r\n  outer class index: anonymous and local have no outer class index\r\n  equals to 0 if the innerClass is an anonymous type\r\n  name index\r\n  implicitely static\r\n  access flag\r\n  write any \"extraAttributes\"\r\n  update the number of attributes\r\n  resynchronize all offsets of the classfile\r\n  default abstract methods\r\n  Generate the constantValueAttribute\r\n  Now we generate the constant attribute corresponding to the fieldBinding\r\n  The attribute length = 2 in case of a constantValue attribute\r\n  already inside a problem type creation : no constant for this field\r\n  report an error and abort: will lead to a problem type classfile creation\r\n  problem should abort\r\n  Need to add the constant_value_index\r\n  the length of a synthetic attribute is equals to 0\r\n  the length of a deprecated attribute is equals to 0\r\n  add signature attribute\r\n  to the @fieldBinding\r\n  the length of a signature attribute is equals to 2\r\n  to the @fieldBinding\r\n  First the accessFlags\r\n  pre 1.5, synthetic was an attribute, not a modifier\r\n  Then the nameIndex\r\n  Then the descriptorIndex\r\n  leave some space for the number of attributes\r\n  write the number of fields\r\n  always clear the strictfp  Code attribute\r\n  $NON-NLS-1$   return codeStream.generateCodeAttributeForProblemMethod(comp.options.runtimeExceptionNameForCompileError, \"\")\r\n  leave two spaces for the number of attributes\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   insert the top line afterwards, once knowing how many problems we have to consider\r\n  return codeStream.generateCodeAttributeForProblemMethod(comp.options.runtimeExceptionNameForCompileError, \"\")\r\n  code attribute\r\n  always clear the strictfp  Code attribute\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   insert the top line afterwards, once knowing how many problems we have to consider\r\n  return codeStream.generateCodeAttributeForProblemMethod(comp.options.runtimeExceptionNameForCompileError, \"\")\r\n  we need to move back the contentsOffset to the value at the beginning of the method\r\n  we need to remove the method that causes the problem\r\n  always clear the strictfp  Code attribute\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   insert the top line afterwards, once knowing how many problems we have to consider\r\n  return codeStream.generateCodeAttributeForProblemMethod(comp.options.runtimeExceptionNameForCompileError, \"\")\r\n  we need to move back the contentsOffset to the value at the beginning of the method\r\n  we need to remove the method that causes the problem\r\n  default abstract methods\r\n  add synthetic methods infos\r\n  a non-accessible field\r\n  a non-accessible field\r\n  generate a method info to emulate an access to a non-accessible method   generate a method info to emulate an access to a non-accessible constructor\r\n  generate a method info to define <enum>#values()\r\n  generate a method info to define <enum>#valueOf(String)\r\n  generate a method info to define the switch table synthetic method\r\n  this will add exception attribute, synthetic attribute, deprecated attribute,...\r\n  Code attribute\r\n  add code attribute\r\n  update the number of attributes\r\n  this will add exception attribute, synthetic attribute, deprecated attribute,...\r\n  Code attribute\r\n  add code attribute\r\n  update the number of attributes\r\n  this will add exception attribute, synthetic attribute, deprecated attribute,...\r\n  Code attribute\r\n  add code attribute\r\n  update the number of attributes\r\n  this will add exception attribute, synthetic attribute, deprecated attribute,...\r\n  Code attribute\r\n  add code attribute\r\n  update the number of attributes\r\n  this will add exception attribute, synthetic attribute, deprecated attribute,...\r\n  Code attribute\r\n  add code attribute\r\n  update the number of attributes\r\n  this will add exception attribute, synthetic attribute, deprecated attribute,...\r\n  Code attribute\r\n  add code attribute\r\n  update the number of attributes\r\n  this will add exception attribute, synthetic attribute, deprecated attribute,...\r\n  Code attribute\r\n  add code attribute\r\n  update the number of attributes\r\n  reinitialize the localContents with the byte modified by the code stream\r\n  to get the right position, 6 for the max_stack etc...\r\n  write the exception table\r\n  each label holds one handler per range (start  on the attribute generation\r\n  even ranges are start positions\r\n  odd ranges are end positions\r\n  any exception handler\r\n  debug attributes\r\n  leave two bytes for the attribute_length\r\n  leave space for attribute_length and line_number_table_length\r\n  write the entry\r\n  now we change the size of the line number attribute\r\n  first we handle the linenumber attribute\r\n  reserve enough space\r\n  leave space for attribute_length and local_variable_table_length\r\n  the startPC for this is always 0\r\n  the resolved position for this is always 0\r\n  used to remember the local variable with a generic type\r\n  we cannot have more than max locals\r\n  only entries for non zero length\r\n  now we can safely add the local entry\r\n  add the local variable type table attribute\r\n  reserve enough space\r\n  the startPC for this is always 0\r\n  the resolved position for this is always 0\r\n  now we can safely add the local entry\r\n  then we do the local variable attribute\r\n  -1 because last return doesn't count\r\n  add the stack map table attribute\r\n  generate the attribute\r\n  select next frame\r\n  need to find differences between the current frame and the previous frame\r\n  FULL_FRAME\r\n  leave two spots for number of locals\r\n  update the attribute length\r\n  reinitialize the contents with the byte modified by the code stream\r\n  to get the right position, 6 for the max_stack etc...\r\n  write the exception table\r\n  each label holds one handler per range (start  on the attribute generation\r\n  even ranges are start positions\r\n  odd ranges are end positions\r\n  any exception handler\r\n  debug attributes\r\n  leave two bytes for the attribute_length\r\n  leave space for attribute_length and line_number_table_length\r\n  write the entry\r\n  now we change the size of the line number attribute\r\n  first we handle the linenumber attribute\r\n  leave space for attribute_length and local_variable_table_length\r\n  used to remember the local variable with a generic type\r\n  we cannot have more than max locals\r\n  only entries for non zero length\r\n  now we can safely add the local entry\r\n  reserve enough space\r\n  now we can safely add the local entry\r\n  codeAttribute.addLocalVariableTableAttribute(this);\r\n  then we do the local variable attribute\r\n  -1 because last return doesn't count\r\n  add the stack map table attribute\r\n  generate the attribute\r\n  generate all frames\r\n  select next frame\r\n  FULL_FRAME\r\n  leave two spots for number of locals\r\n  ensure first that there is enough space available inside the contents array\r\n  update the attribute length\r\n  reinitialize the contents with the byte modified by the code stream\r\n  to get the right position, 6 for the max_stack etc...\r\n  write the exception table\r\n  debug attributes\r\n  leave two bytes for the attribute_length\r\n  first we handle the linenumber attribute\r\n  first entry at pc = 0\r\n  now we change the size of the line number attribute\r\n  first we handle the linenumber attribute\r\n  then we do the local variable attribute\r\n  -1 because last return doesn't count\r\n  add the stack map table attribute\r\n  generate the attribute\r\n  generate all frames\r\n  select next frame\r\n  need to find differences between the current frame and the previous frame\r\n  FULL_FRAME\r\n  leave two spots for number of locals\r\n  ensure first that there is enough space available inside the contents array\r\n  update the attribute length\r\n  reinitialize the localContents with the byte modified by the code stream\r\n  codeAttributeOffset is the position inside localContents byte array before we started to write  write the exception table\r\n  debug attributes\r\n  leave two bytes for the attribute_length\r\n  first we handle the linenumber attribute\r\n  first entry at pc = 0\r\n  now we change the size of the line number attribute\r\n  -1 because last return doesn't count\r\n  add the stack map table attribute\r\n  generate the attribute\r\n  generate all frames\r\n  select next frame\r\n  FULL_FRAME\r\n  leave two spots for number of locals\r\n  update the number of attributes  update the attribute length\r\n  reinitialize the localContents with the byte modified by the code stream\r\n  codeAttributeOffset is the position inside localContents byte array before we started to write  write the exception table\r\n  write the exception table\r\n  debug attributes\r\n  leave two bytes for the attribute_length\r\n  first we handle the linenumber attribute\r\n  first entry at pc = 0\r\n  now we change the size of the line number attribute\r\n  compute the resolved position for the arguments of the method\r\n  codeAttribute.addLocalVariableTableAttribute(this);\r\n  leave space for attribute_length and local_variable_table_length\r\n  the resolved position for this is always 0\r\n  used to remember the local variable with a generic type\r\n  we cannot have more than max locals\r\n  now we can safely add the local entry\r\n  now we can safely add the local entry\r\n  we cannot have more than max locals\r\n  add the local variable type table attribute\r\n  reserve enough space\r\n  the startPC for this is always 0\r\n  the resolved position for this is always 0\r\n  then we do the local variable attribute\r\n  -1 because last return doesn't count\r\n  add the stack map table attribute\r\n  generate the attribute\r\n  generate all frames\r\n  select next frame\r\n  FULL_FRAME\r\n  leave two spots for number of locals\r\n  update the number of attributes  update the attribute length\r\n  reinitialize the contents with the byte modified by the code stream\r\n  to get the right position, 6 for the max_stack etc...\r\n  on the attribute generation\r\n  write the exception table\r\n  each label holds one handler per range (start  on the attribute generation\r\n  even ranges are start positions\r\n  odd ranges are end positions\r\n  any exception handler\r\n  debug attributes\r\n  leave two bytes for the attribute_length\r\n  Seems like do would be better, but this preserves the existing behavior.\r\n  now we change the size of the line number attribute\r\n  first we handle the linenumber attribute\r\n  leave space for attribute_length and local_variable_table_length\r\n  used to remember the local variable with a generic type\r\n  we cannot have more than max locals\r\n  only entries for non zero length\r\n  now we can safely add the local entry\r\n  add the local variable type table attribute\r\n  reserve enough space\r\n  now we can safely add the local entry\r\n  then we do the local variable attribute\r\n  -1 because last return doesn't count\r\n  add the stack map table attribute\r\n  generate the attribute\r\n  generate all frames\r\n  select next frame\r\n  FULL_FRAME\r\n  leave two spots for number of locals\r\n  ensure first that there is enough space available inside the contents array\r\n  update the attribute length\r\n  update the number of attributes\r\n  this is a marker annotation (no member value pairs)\r\n  this is a single member annotation (one member value)\r\n  leave space for attribute_length(4), max_stack(2), max_locals(2), code_length(4)\r\n  automatic wrapping\r\n  already inside a problem type creation : no attribute\r\n  report an error and abort: will lead to a problem type classfile creation\r\n  class type\r\n  array type\r\n  AspectJ Extension - pass 3rd parameter (null in this case is OK)\r\n  AspectJ Extension - new method stub that can pass 3rd param\r\n  add an annotation default attribute\r\n  leave two bytes for the attribute_number\r\n  Exception attribute\r\n  check that there is enough space to write all the bytes for the exception attribute\r\n  The attribute length = length * 2 + 2 in case of a exception attribute\r\n  Check that there is enough space to write the deprecated attribute\r\n  the length of a deprecated attribute is equals to 0\r\n  Check that there is enough space to write the deprecated attribute\r\n  the length of a synthetic attribute is equals to 0\r\n  the length of a varargs attribute is equals to 0\r\n  add signature attribute\r\n  to the @fieldBinding\r\n  the length of a signature attribute is equals to 2\r\n  AspectJ Extension\r\n  End AspectJ Extension\r\n  AspectJ Extension - third parameter added\r\n  AspectJ Extension\r\n  add one more method\r\n  pre 1.5, varargs is an attribute, not a modifier (-target jsr14 mode)\r\n  add one more method\r\n  We know that we won't get more than 1 attribute: the code attribute\r\n  we found a match\r\n  leave space for the attribute length\r\n  leave space for the annotations length\r\n  leave space for the attribute length\r\n  leave space for the annotations length\r\n  leave space for the attribute length\r\n  leave space for the attribute length\r\n  generate the magic numbers inside the header\r\n  minor high\r\n  minor low\r\n  major high\r\n  major low\r\n  Modifier manipulations for classfile\r\n  rewrite private to non-public\r\n  rewrite protected into public\r\n  clear all bits that are illegal for a class or an interface\r\n  class or enum\r\n  set the AccSuper flag (has to be done after clearing AccSynchronized - since same value)\r\n  now we continue to generate the bytes inside the contents array\r\n  new code:\r\n  End AspectJ extension\r\n  new code:\r\n  1FF9ZBU: LFCOM:ALL - Local variable attributes busted (Sanity check)\r\n  could be forward reference\r\n  by default the retention is CLASS\r\n  by default the retention is CLASS\r\n  the code stream is reinitialized for each method\r\n  leave some space for the methodCount\r\n  close cu and its children\r\n  check whether the class file can be opened\r\n  during the creation of the diet class file representative of this ClassFile.\r\n  Make the type\r\n  Read children\r\n  $NON-NLS-1$\r\n  use project to retrieve corresponding .java IFile\r\n  has no associated souce\r\n  info is null\r\n  if parent is open, this class file must be in its children\r\n  the structure remains unknown\r\n  the structure remains unknown\r\n  .class file not on classpath, create a new buffer to be nice (see https:  don't throw a JavaModelException to be able to open .class file outside the classpath (see https:  ensure this class file's buffer is open so that source ranges are computed\r\n  ensure this class file's buffer is open so that source ranges are computed\r\n  Internal class file name doesn't contain \".class\" file extension\r\n  return existing handle instead of the one created above\r\n  create buffer\r\n  listen to buffer changes\r\n  create buffer\r\n  set the buffer source\r\n  listen to buffer changes\r\n  do the source mapping\r\n  skip parameter names\r\n /*<IAttribute>*/\r\n /* represents ClassNotFoundException, see class literal access*/\r\n /* Create and add the line number attribute (used for debugging) \r\n\t\t\t * Build the pairs of:\r\n\t\t\t * \t(bytecodePC lineNumber)\r\n\t\t\t * according to the table of start line indexes and the pcToSourceMap table\r\n\t\t\t * contained into the codestream\r\n\t\t\t */\r\n /* represents denote ClassNotFoundException, see class literal access*/\r\n /* Create and add the line number attribute (used for debugging) \r\n\t\t\t * Build the pairs of:\r\n\t\t\t * \t(bytecodePC lineNumber)\r\n\t\t\t * according to the table of start line indexes and the pcToSourceMap table\r\n\t\t\t * contained into the codestream\r\n\t\t\t */\r\n /* Create and add the line number attribute (used for debugging) \r\n\t\t\t    * Build the pairs of:\r\n\t\t\t    * (bytecodePC lineNumber)\r\n\t\t\t    * according to the table of start line indexes and the pcToSourceMap table\r\n\t\t\t    * contained into the codestream\r\n\t\t\t    */\r\n /* Create and add the line number attribute (used for debugging) \r\n\t\t\t    * Build the pairs of:\r\n\t\t\t    * (bytecodePC lineNumber)\r\n\t\t\t    * according to the table of start line indexes and the pcToSourceMap table\r\n\t\t\t    * contained into the codestream\r\n\t\t\t    */\r\n /* Create and add the line number attribute (used for debugging) \r\n\t\t\t    * Build the pairs of:\r\n\t\t\t    * (bytecodePC lineNumber)\r\n\t\t\t    * according to the table of start line indexes and the pcToSourceMap table\r\n\t\t\t    * contained into the codestream\r\n\t\t\t    */\r\n /* represents ClassNotFoundException, see class literal access*/\r\n /* represents NoSuchFieldError, see switch table generation*/\r\n /*\r\n\t\t\t\t * handle of the target jsr14 for varargs in the source\r\n\t\t\t\t * Varargs attribute\r\n\t\t\t\t * Check that there is enough space to write the deprecated attribute\r\n\t\t\t\t */\r\n /*\r\n * Creates a handle to a class file.\r\n */\r\n /*don't create*/\r\n /*record usage*/\r\n /*\r\n * @see IClassFile#becomeWorkingCopy(IProblemRequestor, WorkingCopyOwner, IProgressMonitor)\r\n */\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.core.ICodeAssist#codeComplete(int, org.aspectj.org.eclipse.jdt.core.CompletionRequestor)\r\n */\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.core.ICodeAssist#codeComplete(int, org.aspectj.org.eclipse.jdt.core.CompletionRequestor, org.aspectj.org.eclipse.jdt.core.WorkingCopyOwner)\r\n */\r\n /*\r\n * @see JavaElement\r\n */\r\n /*\r\n * @see IJavaElement\r\n */\r\n /*\r\n * @see IJavaElement\r\n */\r\n /*\r\n * Returns the name of the toplevel type of this class file.\r\n */\r\n /*don't create*/\r\n /*record usage*/\r\n /*\r\n * @see IClassFile\r\n */\r\n /* package */\r\n /* package */\r\n /* package */\r\n","DeclarePrecedenceImpl":"getDeclaringType getPrecedenceOrder toString getDeclaringType getPrecedenceOrder toString declaringType precedenceList precedenceString declaringType precedenceList precedenceString org.aspectj.internal.lang.reflect.DeclarePrecedenceImpl org.aspectj.internal.lang.reflect.DeclarePrecedenceImpl /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclarePrecedence#getDeclaringType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclarePrecedence#getPrecedenceOrder()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclarePrecedence#getDeclaringType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclarePrecedence#getPrecedenceOrder()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","CodeFormatterApplication":"bind bind bind bind displayHelp displayHelp formatDirTree formatFile processCommandLine readConfig start stop BUNDLE_NAME CommandLineConfigFile CommandLineDone CommandLineErrorConfig CommandLineErrorFile CommandLineErrorFileDir CommandLineErrorQuietVerbose CommandLineErrorNoConfigFile CommandLineFormatting CommandLineStart CommandLineUsage ConfigFileReadingError FormatProblem CaughtException ExceptionSkip ARG_CONFIG ARG_HELP ARG_QUIET ARG_VERBOSE configName options PDE_LAUNCH quiet verbose org.aspectj.org.eclipse.jdt.core.formatter.CodeFormatterApplication  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  read the file\r\n  format the file (the meat and potatoes)\r\n  write the file\r\n  the current arg should be a file or a directory name\r\n  format the list of files and","SiblingEnumeration":"hasMoreElements nextElement fCurrentElement org.aspectj.org.eclipse.jdt.internal.core.jdom.SiblingEnumeration /* package */\r\n","JavaCore":"addElementChangedListener addElementChangedListener addJavaElementMarkerAttributes addNonJavaResources addPreProcessingResourceChangedListener addPreProcessingResourceChangedListener configureJavaElementMarker create create create create create create create create createClassFileFrom createCompilationUnitFrom createJarPackageFragmentRootFrom getClasspathContainer getClasspathContainerInitializer computeClasspathContainerInitializer verbose_failed_to_instanciate_container_initializer verbose_found_container_initializer getClasspathVariable verbose_no_variable_initializer_found verbose_variable_value_after_initialization verbose_triggering_variable_initialization verbose_triggering_variable_initialization_invocation_trace getClasspathVariableDeprecationMessage getClasspathVariableInitializer verbose_failed_to_instanciate_variable_initializer verbose_found_variable_initializer getClasspathVariableNames getDefaultOptions getEncoding getGeneratedResources getGeneratedResource getJavaCore getJavaLikeExtensions getOption getOptions getPlugin getResolvedClasspathEntry getResolvedVariablePath getSharedWorkingCopies getUserLibraryNames getWorkingCopies initializeAfterLoad isClasspathVariableReadOnly isJavaLikeFileName isReferencedBy isReferencedBy newAccessRule newClasspathAttribute newContainerEntry newContainerEntry newContainerEntry newTypeHierarchy newLibraryEntry newLibraryEntry newLibraryEntry newProjectEntry newProjectEntry newProjectEntry newRegion newSourceEntry newSourceEntry newSourceEntry newSourceEntry newSourceEntry newVariableEntry newVariableEntry newVariableEntry removeClasspathVariable removeClasspathVariable removeElementChangedListener removeJavaLikeExtension removePreProcessingResourceChangedListener run run setClasspathContainer setClasspathVariable setClasspathVariable setClasspathVariables setComplianceOptions setOptions stop start NO_GENERATED_RESOURCES JAVA_CORE_PLUGIN PLUGIN_ID BUILDER_ID MODEL_ID NATURE_ID ATT_HANDLE_ID USER_LIBRARY_CONTAINER_ID COMPILER_LOCAL_VARIABLE_ATTR COMPILER_LINE_NUMBER_ATTR COMPILER_SOURCE_FILE_ATTR COMPILER_CODEGEN_UNUSED_LOCAL COMPILER_CODEGEN_TARGET_PLATFORM COMPILER_CODEGEN_INLINE_JSR_BYTECODE COMPILER_DOC_COMMENT_SUPPORT COMPILER_PB_UNREACHABLE_CODE COMPILER_PB_INVALID_IMPORT COMPILER_PB_OVERRIDING_PACKAGE_DEFAULT_METHOD COMPILER_PB_METHOD_WITH_CONSTRUCTOR_NAME COMPILER_PB_DEPRECATION COMPILER_PB_DEPRECATION_IN_DEPRECATED_CODE COMPILER_PB_DEPRECATION_WHEN_OVERRIDING_DEPRECATED_METHOD COMPILER_PB_HIDDEN_CATCH_BLOCK COMPILER_PB_UNUSED_LOCAL COMPILER_PB_UNUSED_PARAMETER COMPILER_PB_UNUSED_PARAMETER_WHEN_IMPLEMENTING_ABSTRACT COMPILER_PB_UNUSED_PARAMETER_WHEN_OVERRIDING_CONCRETE COMPILER_PB_UNUSED_PARAMETER_INCLUDE_DOC_COMMENT_REFERENCE COMPILER_PB_UNUSED_IMPORT COMPILER_PB_SYNTHETIC_ACCESS_EMULATION COMPILER_PB_NON_NLS_STRING_LITERAL COMPILER_PB_ASSERT_IDENTIFIER COMPILER_PB_ENUM_IDENTIFIER COMPILER_PB_STATIC_ACCESS_RECEIVER COMPILER_PB_INDIRECT_STATIC_ACCESS COMPILER_PB_NO_EFFECT_ASSIGNMENT COMPILER_PB_INCOMPATIBLE_NON_INHERITED_INTERFACE_METHOD COMPILER_PB_UNUSED_PRIVATE_MEMBER COMPILER_PB_LOCAL_VARIABLE_HIDING COMPILER_PB_SPECIAL_PARAMETER_HIDING_FIELD COMPILER_PB_FIELD_HIDING COMPILER_PB_TYPE_PARAMETER_HIDING COMPILER_PB_POSSIBLE_ACCIDENTAL_BOOLEAN_ASSIGNMENT COMPILER_PB_FALLTHROUGH_CASE COMPILER_PB_EMPTY_STATEMENT COMPILER_PB_BOOLEAN_METHOD_THROWING_EXCEPTION COMPILER_PB_UNNECESSARY_TYPE_CHECK COMPILER_PB_UNNECESSARY_ELSE COMPILER_PB_UNDOCUMENTED_EMPTY_BLOCK COMPILER_PB_FINALLY_BLOCK_NOT_COMPLETING COMPILER_PB_UNUSED_DECLARED_THROWN_EXCEPTION COMPILER_PB_UNUSED_DECLARED_THROWN_EXCEPTION_WHEN_OVERRIDING COMPILER_PB_UNQUALIFIED_FIELD_ACCESS COMPILER_PB_UNSAFE_TYPE_OPERATION COMPILER_PB_UNCHECKED_TYPE_OPERATION COMPILER_PB_RAW_TYPE_REFERENCE COMPILER_PB_FINAL_PARAMETER_BOUND COMPILER_PB_MISSING_SERIAL_VERSION COMPILER_PB_VARARGS_ARGUMENT_NEED_CAST COMPILER_PB_AUTOBOXING COMPILER_PB_ANNOTATION_SUPER_INTERFACE COMPILER_PB_MISSING_OVERRIDE_ANNOTATION COMPILER_PB_MISSING_DEPRECATED_ANNOTATION COMPILER_PB_INCOMPLETE_ENUM_SWITCH COMPILER_PB_INCONSISTENT_NULL_CHECK COMPILER_PB_UNUSED_LABEL COMPILER_PB_INVALID_JAVADOC COMPILER_PB_INVALID_JAVADOC_TAGS COMPILER_PB_INVALID_JAVADOC_TAGS__DEPRECATED_REF COMPILER_PB_INVALID_JAVADOC_TAGS__NOT_VISIBLE_REF COMPILER_PB_INVALID_JAVADOC_TAGS_VISIBILITY COMPILER_PB_MISSING_JAVADOC_TAGS COMPILER_PB_MISSING_JAVADOC_TAGS_VISIBILITY COMPILER_PB_MISSING_JAVADOC_TAGS_OVERRIDING COMPILER_PB_MISSING_JAVADOC_COMMENTS COMPILER_PB_MISSING_JAVADOC_COMMENTS_VISIBILITY COMPILER_PB_MISSING_JAVADOC_COMMENTS_OVERRIDING COMPILER_PB_CHAR_ARRAY_IN_STRING_CONCATENATION COMPILER_PB_MAX_PER_UNIT COMPILER_PB_FATAL_OPTIONAL_ERROR COMPILER_PB_PARAMETER_ASSIGNMENT COMPILER_SOURCE COMPILER_COMPLIANCE COMPILER_TASK_PRIORITIES COMPILER_TASK_PRIORITY_HIGH COMPILER_TASK_PRIORITY_LOW COMPILER_TASK_PRIORITY_NORMAL COMPILER_TASK_TAGS COMPILER_TASK_CASE_SENSITIVE COMPILER_PB_FORBIDDEN_REFERENCE COMPILER_PB_DISCOURAGED_REFERENCE COMPILER_PB_SUPPRESS_WARNINGS COMPILER_PB_UNHANDLED_WARNING_TOKEN COMPILER_PB_NULL_REFERENCE COMPILER_PB_POTENTIAL_NULL_REFERENCE COMPILER_PB_REDUNDANT_NULL_CHECK COMPILER_PB_OVERRIDING_METHOD_WITHOUT_SUPER_INVOCATION CORE_JAVA_BUILD_ORDER CORE_JAVA_BUILD_RESOURCE_COPY_FILTER CORE_JAVA_BUILD_DUPLICATE_RESOURCE CORE_JAVA_BUILD_CLEAN_OUTPUT_FOLDER CORE_JAVA_BUILD_RECREATE_MODIFIED_CLASS_FILES_IN_OUTPUT_FOLDER CORE_INCOMPLETE_CLASSPATH CORE_CIRCULAR_CLASSPATH CORE_INCOMPATIBLE_JDK_LEVEL CORE_JAVA_BUILD_INVALID_CLASSPATH CORE_ENCODING CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS DEFAULT_TASK_TAG DEFAULT_TASK_PRIORITY DEFAULT_TASK_TAGS DEFAULT_TASK_PRIORITIES FORMATTER_NEWLINE_OPENING_BRACE FORMATTER_NEWLINE_CONTROL FORMATTER_NEWLINE_ELSE_IF FORMATTER_NEWLINE_EMPTY_BLOCK FORMATTER_CLEAR_BLANK_LINES FORMATTER_LINE_SPLIT FORMATTER_COMPACT_ASSIGNMENT FORMATTER_TAB_CHAR FORMATTER_TAB_SIZE FORMATTER_SPACE_CASTEXPRESSION CODEASSIST_VISIBILITY_CHECK CODEASSIST_DEPRECATION_CHECK CODEASSIST_CAMEL_CASE_MATCH CODEASSIST_IMPLICIT_QUALIFICATION CODEASSIST_FIELD_PREFIXES CODEASSIST_STATIC_FIELD_PREFIXES CODEASSIST_LOCAL_PREFIXES CODEASSIST_ARGUMENT_PREFIXES CODEASSIST_FIELD_SUFFIXES CODEASSIST_STATIC_FIELD_SUFFIXES CODEASSIST_LOCAL_SUFFIXES CODEASSIST_ARGUMENT_SUFFIXES CODEASSIST_FORBIDDEN_REFERENCE_CHECK CODEASSIST_DISCOURAGED_REFERENCE_CHECK CODEASSIST_SUGGEST_STATIC_IMPORTS TIMEOUT_FOR_PARAMETER_NAME_FROM_ATTACHED_JAVADOC GENERATE DO_NOT_GENERATE PRESERVE OPTIMIZE_OUT VERSION_1_1 VERSION_1_2 VERSION_1_3 VERSION_1_4 VERSION_1_5 VERSION_1_6 VERSION_1_7 ABORT ERROR WARNING IGNORE COMPUTE INSERT DO_NOT_INSERT PRESERVE_ONE CLEAR_ALL NORMAL COMPACT TAB SPACE ENABLED DISABLED CLEAN PUBLIC PROTECTED DEFAULT PRIVATE NEVER JAVA_SOURCE_CONTENT_TYPE org.aspectj.org.eclipse.jdt.core.JavaCore  AspectJ Extension - made non-final\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  executable extension could not be created: ignore this initializer\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   even if persisted value exists, initializer is given priority, only if no initializer is found the persisted value is reused\r\n  avoid initialization cycles\r\n  flush cache\r\n  (see https:  initializer should have performed side-effect\r\n  break cycle (initializer did not init or reentering call)\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  executable extension could not be created: ignore this initializer\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   Verify that workspace is not shutting down (see bug https:  $NON-NLS-1$\r\n  collect all the java project\r\n  get the .class files generated when this element was built\r\n  collect all the .class files generated when all the units in this package were built\r\n  retrieve all non-java resources from the output location using the package fragment path\r\n  collect all the .class files generated when all the units in this package were built\r\n  retrieve all non-java resources from the output location using the package fragment path\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  internal project\r\n  internal binary archive\r\n  internal binary folder\r\n  inside the workspace\r\n  external binary folder\r\n  external binary archive\r\n  outside the workspace\r\n  lookup variable\r\n  append path suffix\r\n  if factory is null, default factory must be used\r\n  initialize all containers and variables\r\n  50% of the time is spent in initializing containers and variables\r\n  all classpaths in the workspace are going to be resolved, ensure that containers are initialized in one batch\r\n  avoid leaking source attachment properties (see https:  project no longer exist: ignore\r\n  in case it was already initialized before we cleaned up the source attachment proprties\r\n  dummy query for waiting until the indexes are ready\r\n  $NON-NLS-1$\r\n  to wait until indexes are fully rebuild\r\n  49% of the time is spent in the dummy search\r\n  (see https:  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  build state version number has changed: touch every projects to force a rebuild\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  1% of the time is spent in jar refresh\r\n  ensure external jars are refreshed (see https:  only match units or classfiles\r\n  external elements may still be equal with different handleIDs.\r\n  retry with immediate enclosing classfile\r\n  cycle through enclosing types in case marker is associated with a classfile (15568)\r\n  only match units or classfiles\r\n  external elements may still be equal with different handleIDs.\r\n  retry with immediate enclosing classfile\r\n  cycle through enclosing types in case marker is associated with a classfile (15568)\r\n  $NON-NLS-1$  $NON-NLS-1$\r\n  inclusion patterns\r\n  exclusion patterns\r\n  source attachment\r\n  source attachment root\r\n  specific output folder\r\n  combine access rules\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  treat empty path as none\r\n  inclusion patterns\r\n  exclusion patterns\r\n  specific output folder\r\n  no access rules to combine\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  inclusion patterns\r\n  exclusion patterns\r\n  source attachment\r\n  source attachment root\r\n  specific output folder\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  source attachment\r\n  source attachment root\r\n  custom output location\r\n  no access rules to combine\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$  inclusion patterns\r\n  exclusion patterns\r\n  source attachment\r\n  source attachment root\r\n  specific output folder\r\n  no access rules to combine\r\n  $NON-NLS-1$\r\n  use IWorkspace.run(...) to ensure that a build will be done in autobuild mode\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  ensure we call super.stop as the last thing\r\n  AspectJ Extension - made non-final\r\n /* (non-Javadoc)\r\n\t * Shutdown the JavaCore plug-in.\r\n\t * <p>\r\n\t * De-registers the JavaModelManager as a resource changed listener and save participant.\r\n\t * <p>\r\n\t * @see org.eclipse.core.runtime.Plugin#stop(BundleContext)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * Startup the JavaCore plug-in.\r\n\t * <p>\r\n\t * Registers the JavaModelManager as a resource changed listener and save participant.\r\n\t * Starts the background indexing, and restore saved classpath variable values.\r\n\t * <p>\r\n\t * @throws Exception\r\n\t * @see org.eclipse.core.runtime.Plugin#start(BundleContext)\r\n\t */\r\n","ExceptionTable":"accept dump getExceptionIndexTable getNumberOfExceptions getExceptionNames setExceptionIndexTable toString copy accept dump getExceptionIndexTable getNumberOfExceptions getExceptionNames setExceptionIndexTable toString copy number_of_exceptions exception_index_table number_of_exceptions exception_index_table org.aspectj.apache.bcel.classfile.ExceptionTable org.aspectj.apache.bcel.classfile.ExceptionTable  Table of indices into\r\n  constant pool\r\n  Table of indices into\r\n  constant pool\r\n","ImportBinding":"kind isStatic readableName toString compoundName onDemand reference resolvedImport org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ImportBinding  must ensure the import is resolved\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","OperatorIds":"AND_AND OR_OR AND OR LESS LESS_EQUAL GREATER GREATER_EQUAL XOR DIVIDE LEFT_SHIFT NOT TWIDDLE MINUS PLUS MULTIPLY REMAINDER RIGHT_SHIFT EQUAL_EQUAL UNSIGNED_RIGHT_SHIFT NumberOfTables QUESTIONCOLON NOT_EQUAL EQUAL INSTANCEOF PLUS_PLUS MINUS_MINUS org.aspectj.org.eclipse.jdt.internal.compiler.ast.OperatorIds","DeleteElementsOperation":"deleteElement initASTParser getMainTaskName getSchedulingRule groupElements processElement processElements verify childrenToRemove parser org.aspectj.org.eclipse.jdt.internal.core.DeleteElementsOperation  ensure cu is consistent (noop if already consistent)\r\n  $NON-NLS-1$  the import container (and report it in the delta)\r\n  if unit is working copy, then save will have already fired the delta\r\n","TypeParameterPattern":"findIndexMatches print findDeclarations findReferences name typeParameter declaringMemberName methodDeclaringClassName methodArgumentTypes org.aspectj.org.eclipse.jdt.internal.core.search.matching.TypeParameterPattern  set to find declarations & all occurences\r\n  set to find references & all occurences\r\n  store type parameter name\r\n  store type parameter declaring member name\r\n  For method type parameter, store also declaring class name and parameters type names\r\n  Note that requestor has to verify if needed whether the document violates the access restriction or not\r\n  scope encloses the path\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n\t * Same than LocalVariablePattern.\r\n\t */\r\n","BodyDeclaration":"internalModifiersProperty internalModifiers2Property getModifiersProperty internalJavadocProperty getJavadocProperty internalJavadocPropertyFactory internalModifiersPropertyFactory internalModifiers2PropertyFactory getJavadoc setJavadoc getModifiers setModifiers internalSetModifiers modifiers memSize optionalDocComment modifierFlags modifiers org.aspectj.org.eclipse.jdt.core.dom.BodyDeclaration  important: return property for AST.JLS3\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  but this would require tracking changes to this.modifiers\r\n  JLS2 behavior - bona fide property\r\n  more efficient than checking getAST().API_LEVEL\r\n  more efficient than just calling supportedOnlyIn2() to check\r\n  more efficient than just calling unsupportedIn2() to check\r\n /*package*/\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","RecoveryScannerData":"removeUnused insertedTokensPtr insertedTokens insertedTokensPosition insertedTokenUsed replacedTokensPtr replacedTokens replacedTokensStart replacedTokensEnd replacedTokenUsed removedTokensPtr removedTokensStart removedTokensEnd removedTokenUsed org.aspectj.org.eclipse.jdt.internal.compiler.parser.RecoveryScannerData","BcelMethod":"unpackJavaAttributes getParameterNames getLineNumberOfFirstInstruction determineParameterNames unpackAjAttributes processAttributes getAttributes getAnnotationDefaultValue getAttributeNames isAjSynthetic getAssociatedShadowMunger getEffectiveSignature hasDeclarationLineNumberInfo getDeclarationLineNumber getDeclarationOffset getSourceLocation getKind hasAnnotation getAnnotations getAnnotationTypes getAnnotationOfType addAnnotation ensureAnnotationsRetrieved ensureParameterAnnotationsRetrieved getParameterAnnotations getParameterAnnotationTypes canBeParameterized getGenericParameterTypes getGenericReturnType getMethod unpackGenericSignature evictWeavingState isSynthetic workOutIfSynthetic isEquivalentTo unpackJavaAttributes getParameterNames getLineNumberOfFirstInstruction determineParameterNames unpackAjAttributes processAttributes getAttributes getAnnotationDefaultValue getAttributeNames isAjSynthetic getAssociatedShadowMunger getEffectiveSignature hasDeclarationLineNumberInfo getDeclarationLineNumber getDeclarationOffset getSourceLocation getKind hasAnnotation getAnnotations getAnnotationTypes getAnnotationOfType addAnnotation ensureAnnotationsRetrieved ensureParameterAnnotationsRetrieved getParameterAnnotations getParameterAnnotationTypes canBeParameterized getGenericParameterTypes getGenericReturnType getMethod unpackGenericSignature evictWeavingState isSynthetic workOutIfSynthetic isEquivalentTo method associatedShadowMunger preResolvedPointcut effectiveSignature declarationLineNumber annotations parameterAnnotations bcelObjectType bitflags KNOW_IF_SYNTHETIC PARAMETER_NAMES_INITIALIZED CAN_BE_PARAMETERIZED UNPACKED_GENERIC_SIGNATURE IS_AJ_SYNTHETIC IS_SYNTHETIC IS_SYNTHETIC_INVERSE HAS_ANNOTATIONS HAVE_DETERMINED_ANNOTATIONS genericReturnType genericParameterTypes method associatedShadowMunger preResolvedPointcut effectiveSignature declarationLineNumber annotations parameterAnnotations bcelObjectType bitflags KNOW_IF_SYNTHETIC PARAMETER_NAMES_INITIALIZED CAN_BE_PARAMETERIZED UNPACKED_GENERIC_SIGNATURE IS_AJ_SYNTHETIC IS_SYNTHETIC IS_SYNTHETIC_INVERSE HAS_ANNOTATIONS HAVE_DETERMINED_ANNOTATIONS genericReturnType genericParameterTypes org.aspectj.weaver.bcel.BcelMethod org.aspectj.weaver.bcel.BcelMethod  these fields are not set for many BcelMethods...\r\n  used when ajc has\r\n  @Advice\r\n  all bits but\r\n  topmost bit)\r\n  genericized version of return and parameter types\r\n  do we have an annotation with the argNames value specified...\r\n  pre-resolved by ajc\r\n  System.out.println(\"found effective: \" + this);\r\n  it doesnt know anything\r\n  String[] strs = new String[as.length];\r\n  for testing - use with the method above\r\n  isAjSynthetic;   lets see if we can do better\r\n  Add it to the set of annotations\r\n  Add it to the set of annotation types\r\n  must be ok, we have evicted it\r\n  must be ok, we have evicted it\r\n  method.\r\n  generic method declaration\r\n  ());\r\n  this is a development bug, so fail fast with good info\r\n  lookup\r\n  development bug, fail fast with good info\r\n  development bug, fail fast with good info\r\n  this.sourceContext = SourceContextImpl.UNKNOWN_SOURCE_CONTEXT;\r\n  isSynthetic;\r\n  unset the bit\r\n  what the hell has gone wrong?\r\n  synthetic is a modifier (4096)\r\n  synthetic is an attribute\r\n  modifier (4096 or 0x1000)\r\n  to do a full build\r\n  these fields are not set for many BcelMethods...\r\n  used when ajc has\r\n  @Advice\r\n  all bits but\r\n  topmost bit)\r\n  genericized version of return and parameter types\r\n  do we have an annotation with the argNames value specified...\r\n  pre-resolved by ajc\r\n  System.out.println(\"found effective: \" + this);\r\n  it doesnt know anything\r\n  String[] strs = new String[as.length];\r\n  for testing - use with the method above\r\n  isAjSynthetic;   lets see if we can do better\r\n  Add it to the set of annotations\r\n  Add it to the set of annotation types\r\n  must be ok, we have evicted it\r\n  must be ok, we have evicted it\r\n  method.\r\n  generic method declaration\r\n  ());\r\n  this is a development bug, so fail fast with good info\r\n  lookup\r\n  development bug, fail fast with good info\r\n  development bug, fail fast with good info\r\n  this.sourceContext = SourceContextImpl.UNKNOWN_SOURCE_CONTEXT;\r\n  isSynthetic;\r\n  unset the bit\r\n  what the hell has gone wrong?\r\n  synthetic is a modifier (4096)\r\n  synthetic is an attribute\r\n  modifier (4096 or 0x1000)\r\n  to do a full build\r\n /* Java5 */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* Java5 */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","CreateTypeHierarchyOperation":"executeOperation getResult isReadOnly verify typeHierarchy org.aspectj.org.eclipse.jdt.internal.core.CreateTypeHierarchyOperation","CompletionOnSingleTypeReference":"aboutToResolve copyDims getTypeBinding isClass isInterface isException isSuperType printExpression resolveTypeEnclosing K_TYPE K_CLASS K_INTERFACE K_EXCEPTION kind isCompletionNode isConstructorType fieldTypeCompletionNode org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnSingleTypeReference  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n * No expansion of the completion reference into an array one\r\n */\r\n","SourceMethodElementInfo":"getArgumentNames getExceptionTypeNames getReturnTypeName getTypeParameterBounds getTypeParameterNames isConstructor isAnnotationMethod setArgumentNames setExceptionTypeNames setReturnType argumentNames exceptionTypes typeParameters org.aspectj.org.eclipse.jdt.internal.core.SourceMethodElementInfo /*\r\n\t * The type parameters of this source type. Empty if none.\r\n\t */\r\n","TheOriginalJDTScannerClass":"atEnd checkTaskTag getCurrentIdentifierSource getCurrentTokenEndPosition getCurrentTokenSource getCurrentTokenString getCurrentTokenSourceString getCurrentStringLiteral getRawTokenSource getRawTokenSourceEnd getCurrentTokenStartPosition getLineEnd getLineEnds getLineStart getNextChar getNextCharWithBoundChecks getNextChar getNextChar getNextCharAsDigit getNextCharAsDigit getNextCharAsJavaIdentifierPartWithBoundCheck getNextCharAsJavaIdentifierPart scanIdentifier getNextToken getNextUnicodeChar getNLSTags getSource jumpOverMethodBody jumpOverUnicodeWhiteSpace optimizedCurrentTokenSource1 optimizedCurrentTokenSource2 optimizedCurrentTokenSource3 optimizedCurrentTokenSource4 optimizedCurrentTokenSource5 optimizedCurrentTokenSource6 parseTags extractInt pushLineSeparator pushUnicodeLineSeparator recordComment resetTo scanEscapeCharacter scanIdentifierOrKeywordWithBoundCheck scanIdentifierOrKeyword internalScanIdentifierOrKeyword scanNumber getLineNumber setSource setSource setSource toString toStringAction unicodeInitializeBuffer unicodeStore sourceLevel complianceLevel useAssertAsAnIndentifier containsAssertKeyword useEnumAsAnIndentifier recordLineSeparator currentCharacter startPosition currentPosition initialPosition eofPosition tokenizeComments tokenizeWhiteSpace source withoutUnicodeBuffer withoutUnicodePtr unicodeAsBackSlash scanningFloatLiteral COMMENT_ARRAYS_SIZE commentStops commentStarts commentTagStarts commentPtr lastCommentLinePosition foundTaskTags foundTaskMessages foundTaskPriorities foundTaskPositions foundTaskCount taskTags taskPriorities isTaskCaseSensitive diet lineEnds linePtr wasAcr END_OF_SOURCE INVALID_HEXA INVALID_OCTAL INVALID_CHARACTER_CONSTANT INVALID_ESCAPE INVALID_INPUT INVALID_UNICODE_ESCAPE INVALID_FLOAT INVALID_LOW_SURROGATE INVALID_HIGH_SURROGATE NULL_SOURCE_STRING UNTERMINATED_STRING UNTERMINATED_COMMENT INVALID_CHAR_IN_STRING INVALID_DIGIT EMPTY_LINE_ENDS charArray_a charArray_b charArray_c charArray_d charArray_e charArray_f charArray_g charArray_h charArray_i charArray_j charArray_k charArray_l charArray_m charArray_n charArray_o charArray_p charArray_q charArray_r charArray_s charArray_t charArray_u charArray_v charArray_w charArray_x charArray_y charArray_z initCharArray TableSize InternalTableSize OptimizedLength charArray_length TAG_PREFIX TAG_PREFIX_LENGTH TAG_POSTFIX TAG_POSTFIX_LENGTH nlsTags nlsTagsPtr checkNonExternalizedStringLiterals returnOnlyGreater newEntry2 newEntry3 newEntry4 newEntry5 newEntry6 insideRecovery RoundBracket SquareBracket CurlyBracket BracketKinds LOW_SURROGATE_MIN_VALUE HIGH_SURROGATE_MIN_VALUE HIGH_SURROGATE_MAX_VALUE LOW_SURROGATE_MAX_VALUE org.aspectj.org.eclipse.jdt.internal.compiler.parser.TheOriginalJDTScannerClass  AspectJ extension, visibility raised\r\n  Aspectj extension, visibility raised\r\n  1.4 feature\r\n  flag indicating if processed source contains occurrences of keyword assert\r\n  1.5 feature\r\n  of a entire very large stream\r\n  unicode support\r\n  when == 0 ==> no unicode in the current token\r\n  AspectJ extension, non-final\r\n  no comment test with commentPtr value -1\r\n  task tag support\r\n  diet parsing support - jump over some method body when requested\r\n  remember the position of the cr  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  ----------------optimized identifier managment------------------\r\n  30*6 =210 entries\r\n  $NON-NLS-1$\r\n  generic support\r\n  extended unicode support\r\n  only look for newer task: tags\r\n  should be '*' or '  ensure tag is not leaded with letter if tag starts with a letter\r\n  case insensitive check\r\n  case sensitive check\r\n  ensure tag is not followed with letter if tag finishes with a letter\r\n  will be incremented when looping\r\n  check for tag occurrence only if not ambiguous with javadoc tag\r\n  retrieve message start and end positions\r\n  would only occur if tag is before EOF.\r\n  at most beginning of next task\r\n  see https:  trim the message\r\n  update the end position of the task\r\n  get the message source\r\n  TODO (frederic) see if we need to take unicode characters into account...\r\n  see OptimizedLength\r\n  no optimization\r\n  0 is used as a fast test flag so the real first char is in position 1\r\n  newIdentCount++;\r\n  0 is used as a fast test flag so the real first char is in position 1\r\n  0 is used as a fast test flag so the real first char is in position 1\r\n  2 is 1 (real start) + 1 (to jump over the \")\r\n  0 is used as a fast test flag so the real first char is in position 1\r\n  2 is 1 (real start) + 1 (to jump over the \")\r\n  next line start one character behind the lineEnd of the previous line\r\n  return a bounded copy of this.lineEnds\r\n  next line start one character behind the lineEnd of the previous line\r\n  handle the obvious case upfront\r\n  -------------end unicode traitement--------------\r\n  handle the obvious case upfront\r\n  ALL getNextChar.... ARE OPTIMIZED COPIES\r\n  handle the obvious case upfront\r\n  ALL getNextChar.... ARE OPTIMIZED COPIES\r\n  handle the obvious case upfront\r\n  ALL getNextChar.... ARE OPTIMIZED COPIES\r\n  ALL getNextChar.... ARE OPTIMIZED COPIES\r\n  handle the obvious case upfront\r\n  Unicode 4 detection\r\n  illegal low surrogate\r\n  ALL getNextChar.... ARE OPTIMIZED COPIES\r\n  handle the obvious case upfront\r\n  Unicode 4 detection\r\n  illegal low surrogate\r\n  loop for jumping over comments\r\n  ---------Consume white space and handles startPosition---------\r\n  reposition scanner in case we are interested by spaces as tokens\r\n  (this.currentCharacter == ' ') || ScannerHelper.isWhitespace(this.currentCharacter);\r\n  reposition scanner in case we are interested by spaces as tokens\r\n  optimized case already checked\r\n  Unicode 4 detection\r\n  illegal low surrogate\r\n  reposition scanner in case we are interested by spaces as tokens\r\n  -----------------end switch while try--------------------\r\n  loop for jumping over comments\r\n  ---------Consume white space and handles startPosition---------\r\n  reposition scanner in case we are interested by spaces as tokens\r\n  (this.currentCharacter == ' ') || ScannerHelper.isWhitespace(this.currentCharacter);\r\n  reposition scanner in case we are interested by spaces as tokens\r\n  relocate if finding another quote fairly close: thus unicode '  relocate if finding another quote fairly close: thus unicode '  consume next character\r\n  consume next character\r\n  relocate if finding another quote fairly close: thus unicode '  relocate if finding another quote fairly close: thus unicode '  rethrow\r\n  consume next character\r\n  set current position on new line character\r\n  set current position on new line character\r\n  relocate if finding another quote fairly close: thus unicode '  consume next character\r\n  we need to compute the escape character in a separate buffer\r\n  consume next character\r\n  line comment\r\n  get the next char\r\n  handle the \\\\u case manually into comment\r\n  jump over the \\\\\r\n  get the next char\r\n  handle the \\\\u case manually into comment\r\n  get the next char\r\n  consume next character\r\n  -------------unicode traitement ------------\r\n  jump over the \\\\\r\n  handle the \\\\u case manually into comment\r\n  empty comment is not a javadoc   loop until end of comment *  fall through default case to set star to false\r\n  get next char\r\n  -------------unicode traitement ------------\r\n  handle the \\\\u case manually into comment\r\n  traditional and javadoc comment\r\n  $NON-NLS-1$\r\n  the atEnd may not be <currentPosition == source.length> if source is only some part of a real (external) stream\r\n  optimized case already checked\r\n  Unicode 4 detection\r\n  illegal low surrogate\r\n  ---------Identify the next token-------------\r\n  ALL getNextChar.... ARE OPTIMIZED COPIES\r\n  buffer all the entries that have been left aside....\r\n  need the unicode buffer\r\n  fill the buffer with the char\r\n  loop for jumping over comments\r\n  ---------Consume white space and handles startPosition---------\r\n  consume next character\r\n  consume next character\r\n  consume next character\r\n  the string cannot go further that the line\r\n  the string cannot go further that the line\r\n  consume next character\r\n  consume next character\r\n  an eof will then be generated\r\n  get the next char\r\n  handle the \\\\u case manually into comment\r\n  jump over the \\\\\r\n  get the next char\r\n  handle the \\\\u case manually into comment\r\n  line comment\r\n  traditional and javadoc comment\r\n  get the next char\r\n  consume next character\r\n  jump over the \\\\\r\n  handle the \\\\u case manually into comment\r\n  empty comment is not a javadoc   loop until end of comment *  fall through default case to set star to false\r\n  get next char\r\n  handle the \\\\u case manually into comment\r\n  optimized case already checked\r\n  Unicode 4 detection\r\n  illegal low surrogate\r\n  -------consume token until } is found---------\r\n  optimization at no speed cost of 99.5 % of the singleCharIdentifier\r\n  ---------other side---------\r\n  --------add the entry-------\r\n  (r = new char[] {c0, c1});\r\n  int hash = ((c0 << 12) + (c1<< 6) + c2) % TableSize;\r\n  ---------other side---------\r\n  --------add the entry-------\r\n  (r = new char[] {c0, c1, c2});\r\n  int hash = (int) (((((long) c0) << 18) + (c1 << 12) + (c2 << 6) + c3) % TableSize);\r\n  ---------other side---------\r\n  --------add the entry-------\r\n  (r = new char[] {c0, c1, c2, c3});\r\n  int hash = (int) (((((long) c0) << 24) + (((long) c1) << 18) + (c2 << 12) + (c3 << 6) + c4) % TableSize);\r\n  ---------other side---------\r\n  --------add the entry-------\r\n  (r = new char[] {c0, c1, c2, c3, c4});\r\n  int hash = (int)(((((long) c0) << 32) + (((long) c1) << 24) + (((long) c2) << 18) + (c3 << 12) + (c4 << 6) + c5) % TableSize);\r\n  ---------other side---------\r\n  --------add the entry-------\r\n  (r = new char[] {c0, c1, c2, c3, c4, c5});\r\n  the whole line is commented out\r\n  0 is used as a fast test flag so the real first char is in position 1\r\n  resize\r\n  see comment on isLineDelimiter(char) for the use of '\\n' and '\\r'\r\n  System.out.println(\"merge LF-\" + (this.currentPosition - 1));\r\n  must merge eventual cr followed by lf\r\n  lf 000A\r\n  System.out.println(\"look-ahead LF-\" + this.currentPosition);\r\n  look-ahead for merged cr+lf\r\n  cr 000D\r\n  must merge eventual cr followed by lf\r\n  lf 000A\r\n  cr 000D\r\n  compute position\r\n  a new comment is recorded\r\n  reset comment stack\r\n  has read \\OctalDigit --> ignore last character\r\n  has read \\OctalDigit NonOctalDigit--> ignore last character\r\n  has read \\OctalDigit NonDigit--> ignore last character\r\n  has read \\ZeroToThree OctalDigit NonOctalDigit --> ignore last character\r\n  has read \\ZeroToThree OctalDigit OctalDigit\r\n  has read \\NotZeroToThree OctalDigit Digit --> ignore last character\r\n  thus we use a direct access to the source (for regular cases).\r\n  dispatch on the second char\r\n  handle the obvious case upfront\r\n  System.out.println(\"slow>>128:  \"+ c);\r\n  System.out.println(\"slow<=128:  \"+ c);\r\n  only one char....\r\n  dispatch on the second char\r\n  handle the obvious case upfront\r\n  System.out.println(\"slow>>128:  \"+ c);\r\n  System.out.println(\"slow<=128:  \"+ c);\r\n  only one char....\r\n  abstract\r\n  assert\r\n  boolean break byte\r\n  case char catch const class continue\r\n  const is not used in java ???????\r\n  default do double\r\n  else extends\r\n  final finally float for false\r\n  goto\r\n  no goto in java are allowed, so why java removes this keyword ???\r\n  if implements import instanceof int interface\r\n  long\r\n  native new null\r\n  package private protected public\r\n  return\r\n  short static super switch synchronized strictfp\r\n  try throw throws transient this true\r\n  void volatile\r\n  while widefp\r\n  return TokenNameIdentifier;\r\n  ----------hexa-----------------\r\n  if we are in source level < 1.5 we report an integer literal\r\n  consume next character\r\n  consume next character\r\n  read decimal part\r\n  consume next character\r\n  consume next character\r\n  -------------potential octal-----------------\r\n  make the distinction between octal and float ....\r\n  consume next character\r\n  consume next character\r\n  potential octal ! ... some one may write 000099.0 ! thus 00100 < 00078.0 is true !!!!! crazy language\r\n  decimal part that can be empty\r\n  consume next character\r\n  consume next character\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  but renamed so that we can replace it with our own scanner.\r\n /*static*/\r\n /*static*/\r\n /*static*/\r\n /*comment*/\r\n /*whitespace*/\r\n /*nls*/\r\n /*sourceLevel*/\r\n /*taskTag*/\r\n /*taskPriorities*/\r\n /*\r\n * Search the source position corresponding to the end of a given line number\r\n *\r\n * Line numbers are 1-based, and relative to the scanner initialPosition. \r\n * Character positions are 0-based.\r\n *\r\n * In case the given line number is inconsistent, answers -1.\r\n */\r\n /* \\ u000a: LINE FEED               */\r\n /* \\ u000c: FORM FEED               */\r\n /* \\ u000d: CARRIAGE RETURN         */\r\n /* \\ u0009: HORIZONTAL TABULATION   */\r\n /* \\ u0020: SPACE                   */\r\n /*\r\n * External API in JavaConventions.\r\n * This is used to optimize the case where the scanner is used to scan a single identifier.\r\n * In this case, the AIOOBE is slower to handle than a bound check\r\n */\r\n /* \\ u000a: LINE FEED               */\r\n /* \\ u000c: FORM FEED               */\r\n /* \\ u000d: CARRIAGE RETURN         */\r\n /* \\ u0009: HORIZONTAL TABULATION   */\r\n /* \\ u0020: SPACE                   */\r\n /*\t\t\t\t\tif (this.sourceLevel >= ClassFileConstants.JDK1_5) {\r\n\t\t\t\t\t\treturn TokenNameAT;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn TokenNameERROR;\r\n\t\t\t\t\t}*/\r\n /*\r\n\t\t\t\t\t\t\t\t * We need to completely consume the line break\r\n\t\t\t\t\t\t\t\t */\r\n /*\r\n\t\t\t\t\t\t\t\t\tif (isJavadoc)\r\n\t\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_JAVADOC;\r\n\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_BLOCK;\r\n\t\t\t\t\t\t\t\t\t*/\r\n /*\r\n\t\t\t\t\t\t\t\t * We need to completely consume the line break\r\n\t\t\t\t\t\t\t\t */\r\n /*\r\n * Should be used if a parse (usually a diet parse) has already been performed on the unit, \r\n * so as to get the already computed line end positions.\r\n */\r\n /*\r\n * Should be used if a parse (usually a diet parse) has already been performed on the unit, \r\n * so as to get the already computed line end positions.\r\n */\r\n","AnonymousClassCreationListener":"anonymousTypeBindingCreated org.aspectj.ajdt.internal.compiler.lookup.AnonymousClassCreationListener /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","EmacsStructureModelManager":"externalizeModel dumpStructureToFile printDecls printDecl fixFilename print subst EXTERN_FILE_SUFFIX writer org.aspectj.ajdt.internal.core.builder.EmacsStructureModelManager  Set fileSet = StructureModelManager.INSTANCE.getStructureModel().getFileMap().entrySet();\r\n  source files have source locations\r\n  ignore\r\n  this ignores relations on the compile unit\r\n  if (nodeObject instanceof IProgramElement) {\r\n  2\r\n  HACK:\r\n  4\r\n  5\r\n  }\r\n  this ignores relations on the compile unit\r\n  !currNode.isStmntKind() &&\r\n  9\r\n  10\r\n  11\r\n  12\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","IExprVisitor":"visit visit visit visit visit visit org.aspectj.weaver.ast.IExprVisitor org.aspectj.weaver.ast.IExprVisitor /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","FlowContext":"breakLabel checkExceptionHandlers checkExceptionHandlers continueLabel getTargetContextForBreakLabel getTargetContextForContinueLabel getTargetContextForDefaultBreak getTargetContextForDefaultContinue individualToString initsOnBreak initsOnReturn isBreakable isContinuable isNonReturningContext isSubRoutine labelName recordBreakFrom recordBreakTo recordContinueFrom recordFinalAssignment recordNullReference recordReturnFrom recordSettingFinal recordUsingNullReference removeFinalAssignmentIfAny subroutine toString NotContinuableContext associatedNode parent initsOnFinally deferNullDiagnostic preemptNullDiagnostic CAN_ONLY_NULL_NON_NULL CAN_ONLY_NULL CAN_ONLY_NON_NULL MAY_NULL CHECK_MASK IN_COMPARISON_NULL IN_COMPARISON_NON_NULL IN_ASSIGNMENT IN_INSTANCEOF CONTEXT_MASK org.aspectj.org.eclipse.jdt.internal.compiler.flow.FlowContext  preempt marks looping contexts\r\n  until the point where it is safely handled (Smarter - see comment at the end)\r\n  exceptions will actually never get sent...\r\n  was it already definitely caught ?\r\n  no need to complain, will fix up constructor exceptions\r\n  clause will be fixed up later as per JLS 8.6).\r\n  not handled anywhere, thus jump to error handling\r\n  method treatment for unchecked exceptions\r\n  try statement to the outermost ones.\r\n  collect inits\r\n  new code:\r\n  counting the number of remaining unhandled exceptions\r\n  total number of exceptions raised\r\n  (null replaces any handled exception)\r\n  exceptions will actually never get sent...\r\n  at most\r\n  remember that this exception has been definitely caught\r\n  was already definitely caught ?\r\n  removed from the remaining ones.\r\n  remove locally caught exceptions from the remaining ones\r\n  no need to complain, will fix up constructor exceptions\r\n  clause will be fixed up later as per JLS 8.6).\r\n  not handled anywhere, thus jump to error handling\r\n  method treatment for unchecked exceptions\r\n  try statement to the outermost ones.\r\n  collect inits\r\n  already reported\r\n  only one complaint if same exception declared to be thrown more than once\r\n  was scope.problemReporter().unhandledException(exception, location); see pr151772\r\n  if reaches this point, then there are some remaining unhandled exception types.\r\n  not found\r\n  matching label found\r\n  label is found, but not a continuable location\r\n  not found\r\n  not found\r\n  not found\r\n  $NON-NLS-1$\r\n  keep going\r\n  for initialization inside looping statement that effectively loops\r\n  no need to keep going\r\n  check against null and non null, with definite values -- comparisons\r\n  check against null, with definite values -- comparisons\r\n  check against non null, with definite values -- comparisons\r\n  check against null, with potential values -- NPE guard\r\n  check happened in a comparison\r\n  check happened in an assignment\r\n  check happened in an instanceof expression\r\n /* any exception */\r\n /* any exception */\r\n /*\r\n * lookup through break labels\r\n */\r\n /*\r\n * lookup through continue labels\r\n */\r\n /*\r\n * lookup a default break through breakable locations\r\n */\r\n /*\r\n * lookup a default continue amongst continuable locations\r\n */\r\n","DOMBuilder":"acceptImport acceptInitializer acceptPackage acceptProblem addChild createCompilationUnit createCompilationUnit createField createFields createImport createImport createInitializer createMethod createPackage createPackage createType enterAbstractMethod enterClass enterConstructor enterField enterInterface enterMethod enterType exitAbstractMethod exitClass exitConstructor exitField exitInterface exitMethod getParser initializeBuild fBuildingSingleMember fFinishedSingleMember fFields options org.aspectj.org.eclipse.jdt.internal.core.jdom.DOMBuilder  we only accept field declarations with one field\r\n  will be fixed up on exit\r\n  get last javadoc comment (see bug 68772)\r\n  will be fixed up on exit\r\n  get last javadoc comment (see bug 68772)\r\n  fixed on exitField\r\n  fixed on exitField\r\n  will be fixed in the exit\r\n  get last javadoc comment (see bug 68772)\r\n  fixed by setTypeRanges(DOMNode)\r\n  will be fixed in exit\r\n /* See 1FVII1P */\r\n /* see 1FVIIQZ */\r\n /* see 1FVIIV8 - obtain initializer range */\r\n","ISourceElementRequestor":"acceptConstructorReference acceptFieldReference acceptImport acceptLineSeparatorPositions acceptMethodReference acceptPackage acceptProblem acceptTypeReference acceptTypeReference acceptUnknownReference acceptUnknownReference enterCompilationUnit enterConstructor enterField enterInitializer enterMethod enterType exitCompilationUnit exitConstructor exitField exitInitializer exitMethod exitType declarationStart modifiers name nameSourceStart nameSourceEnd superclass superinterfaces typeParameters annotationPositions categories secondary anonymousMember declarationStart declarationEnd name nameSourceStart nameSourceEnd bounds annotationPositions isConstructor isAnnotation declarationStart modifiers returnType name nameSourceStart nameSourceEnd parameterTypes parameterNames exceptionTypes typeParameters annotationPositions categories declarationStart modifiers type name nameSourceStart nameSourceEnd annotationPositions categories org.aspectj.org.eclipse.jdt.internal.compiler.ISourceElementRequestor /*\r\n\t * Table of line separator position. This table is passed once at the end of\r\n\t * the parse action, so as to allow computation of normalized ranges.\r\n\t * \r\n\t * A line separator might corresponds to several characters in the source,\r\n\t *  \r\n\t */\r\n /*\r\n\t * initializationStart denotes the source start of the expression used for\r\n\t * initializing the field if any (-1 if no initialization).\r\n\t */\r\n","ExplicitConstructorCall":"analyseCode generateCode genericTypeArguments isImplicitSuper isSuperAccess isTypeAccess manageEnclosingInstanceAccessIfNecessary manageSyntheticAccessIfNecessary printStatement resolve setActualReceiverType setDepth setFieldIndex traverse arguments qualification binding codegenBinding syntheticAccessor accessMode typeArguments genericTypeArguments ImplicitSuper Super This implicitArguments typeArgumentsSourceStart org.aspectj.org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall  exact binding resulting from lookup\r\n  actual binding used for code generation (if no synthetic accessor)\r\n  synthetic accessor for inner-emulation\r\n  TODO Remove once DOMParser is activated\r\n  process enclosing instance\r\n  process arguments\r\n  check exceptions\r\n  pass along name param as name arg\r\n  pass along ordinal param as ordinal arg\r\n  special name&ordinal argument generation for enum constructors\r\n  handling innerclass instance allocation - enclosing instance arguments\r\n  generate arguments\r\n  handling innerclass instance allocation - outer local arguments\r\n  synthetic accessor got some extra arguments appended to its signature, which need values\r\n  locally propagate, since we already now the desired shape for sure\r\n  perform some emulation work in case there is some and we are inside a local type only\r\n  AspectJ Extension\r\n  if constructor from parameterized type got found, use the original constructor at codegen time\r\n  constructor will not be dumped as private, no emulation required thus\r\n  from 1.4 on, local type constructor can lose their private flag to ease emulation\r\n  perform some emulation work in case there is some and we are inside a local type only\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  unmark at all returns\r\n  AspectJ Extension\r\n  fault-tolerance\r\n  XXX Horrible AspectJ-specific hack\r\n  prevent (explicit) super constructor invocation from within enum\r\n  qualification should be from the type of the enclosingType\r\n  typeChecks all arguments\r\n  resolve type arguments (for generic constructor call)\r\n  arguments buffering for the method lookup\r\n  TODO (philippe) get rid of once well-known binding is available\r\n  typeChecks all arguments\r\n  will check later on\r\n  record a best guess, for clients who need hint about possible contructor match\r\n  replace args with errors with null type\r\n  shouldn't return generic method outside its context, rather convert it to raw method (175409)\r\n  ignore cases where method is used from within inside itself (e.g. direct recursions)\r\n  record the closest match, for clients who may still need hint about possible method match\r\n /* Inner emulation consists in either recording a dependency \r\n\t * link only, or performing one level of propagation.\r\n\t *\r\n\t * Dependency mechanism is used whenever dealing with source target\r\n\t * types, since by the time we reach them, we might not yet know their\r\n\t * exact need.\r\n\t */\r\n","RawTypeBinding":"computeUniqueKey createParameterizedMethod kind debugName genericTypeSignature isEquivalentTo isIntersectingWith isParameterizedType isRawType initializeArguments readableName shortReadableName org.aspectj.org.eclipse.jdt.internal.compiler.lookup.RawTypeBinding  only need signature if enclosing needs one\r\n  $NON-NLS-1$\r\n  copy all but trailing semicolon\r\n  $NON-NLS-1$\r\n  copy all but trailing semicolon\r\n  copy all but trailing semicolon\r\n  perform raw conversion on variable upper bound - could cause infinite regression if arguments were initialized lazily\r\n /*java.lang.Object,  p.X<T> */\r\n /*Object*/\r\n","JoinPointImpl":"getKind getSignature getSourceLocation toString toString toShortString toLongString getThis getTarget getArgs getStaticPart getKind getSignature getSourceLocation toString toShortString toLongString set$AroundClosure proceed proceed getKind getSignature getSourceLocation toString toString toShortString toLongString getThis getTarget getArgs getStaticPart getKind getSignature getSourceLocation toString toShortString toLongString set$AroundClosure proceed proceed getKind getSignature getSourceLocation toString toString toShortString toLongString getThis getTarget getArgs getStaticPart getKind getSignature getSourceLocation toString toShortString toLongString set$AroundClosure proceed proceed kind signature sourceLocation _this target args staticPart arc kind signature sourceLocation _this target args staticPart arc kind signature sourceLocation _this target args staticPart arc org.aspectj.runtime.reflect.JoinPointImpl org.aspectj.runtime.reflect.JoinPointImpl org.aspectj.runtime.reflect.JoinPointImpl  To proceed we need a closure to proceed on\r\n  when called from a before advice, but be a no-op\r\n  the first value to be a new this or a new target... (see pr126167)\r\n  state is always consistent with caller?,callee?,formals...,jp\r\n  replace [0] (this)\r\n  the join point has a this\r\n  this and target are the same so replace state[0]\r\n  copy the rest across\r\n  }\r\n  when called from a before advice, but be a no-op\r\n  To proceed we need a closure to proceed on\r\n  when called from a before advice, but be a no-op\r\n  the first value to be a new this or a new target... (see pr126167)\r\n  state is always consistent with caller?,callee?,formals...,jp\r\n  replace [0] (this)\r\n  the join point has a this\r\n  this and target are the same so replace state[0]\r\n  copy the rest across\r\n  }\r\n  when called from a before advice, but be a no-op\r\n  To proceed we need a closure to proceed on\r\n  when called from a before advice, but be a no-op\r\n  the first value to be a new this or a new target... (see pr126167)\r\n  state is always consistent with caller?,callee?,formals...,jp\r\n  replace [0] (this)\r\n  the join point has a this\r\n  this and target are the same so replace state[0]\r\n  copy the rest across\r\n  }\r\n  when called from a before advice, but be a no-op\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","CustomMungerFactory":"createCustomShadowMungers createCustomTypeMungers getAllCreatedCustomShadowMungers getAllCreatedCustomTypeMungers createCustomShadowMungers createCustomTypeMungers getAllCreatedCustomShadowMungers getAllCreatedCustomTypeMungers org.aspectj.weaver.CustomMungerFactory org.aspectj.weaver.CustomMungerFactory /* ShadowMunger */\r\n /* ConcreteTypeMunger */\r\n /* ShadowMunger */\r\n /* ConcreteTypeMunger */\r\n /* *******************************************************************\r\n * Copyright (c) 2007 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Linton Ye https://bugs.eclipse.org/bugs/show_bug.cgi?id=193065\r\n * ******************************************************************/\r\n /* ShadowMunger */\r\n /* ConcreteTypeMunger */\r\n /* ShadowMunger */\r\n /* ConcreteTypeMunger */\r\n /* *******************************************************************\r\n * Copyright (c) 2007 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Linton Ye https://bugs.eclipse.org/bugs/show_bug.cgi?id=193065\r\n * ******************************************************************/\r\n","ThreadCounter":"inc dec isNotZero inc dec isNotZero inc dec isNotZero org.aspectj.runtime.internal.cflowstack.ThreadCounter org.aspectj.runtime.internal.cflowstack.ThreadCounter org.aspectj.runtime.internal.cflowstack.ThreadCounter /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * ******************************************************************/\r\n","ClassFileInfo":"generateFieldInfos generateInnerClassHandles generateMethodInfos generateTypeParameterInfos hasReadBinaryChildren readBinaryChildren removeBinaryChildren binaryChildren typeParameters org.aspectj.org.eclipse.jdt.internal.core.ClassFileInfo  Make the fields\r\n  Can also return an entry for the enclosing type of an inner type.\r\n  if ((methodInfo.getModifiers() & IConstants.AccSynthetic) != 0) continue;   protect against malformed .class file (e.g. com  (case of bridge methods in 1.5)\r\n  (case of bridge methods in 1.5)\r\n  may not be a valid class file\r\n  Note inner class are separate openables that are not opened here: no need to pass in newElements\r\n /*\r\n\t * The type parameters in this class file.\r\n\t */\r\n /* package */\r\n","IParameterAnnotation":"getAnnotationsNumber getAnnotations org.aspectj.org.eclipse.jdt.core.util.IParameterAnnotation","AbstractAnnotationProcessorManager":"configure configureFromPlatform setOut setErr getNewUnits getNewClassFiles getDeletedUnits reset processAnnotations setProcessors org.aspectj.org.eclipse.jdt.internal.compiler.AbstractAnnotationProcessorManager","IPrivilegedHandler":"getPrivilegedAccessField getPrivilegedAccessMethod notePrivilegedTypeAccess org.aspectj.org.eclipse.jdt.internal.compiler.lookup.IPrivilegedHandler","ThisReference":"implicitThis analyseAssignment checkAccess generateAssignment generateCode generateCompoundAssignment generatePostIncrement isImplicitThis isThis nullStatus printExpression resolveType traverse traverse org.aspectj.org.eclipse.jdt.internal.compiler.ast.ThisReference  this cannot be assigned\r\n  this  static may not refer to this  $NON-NLS-1$\r\n /* \r\n\t * @see Reference#analyseAssignment(...)\r\n\t */\r\n /* \r\n\t * @see Reference#generateAssignment(...)\r\n\t */\r\n /* \r\n\t * @see Reference#generateCompoundAssignment(...)\r\n\t */\r\n /* \r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.Reference#generatePostIncrement()\r\n\t */\r\n","JavadocArrayQualifiedTypeReference":"reportInvalidType reportDeprecatedType traverse traverse tagSourceStart tagSourceEnd org.aspectj.org.eclipse.jdt.internal.compiler.ast.JavadocArrayQualifiedTypeReference /* (non-Javadoc)\r\n\t * Redefine to capture javadoc specific signatures\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode#traverse(org.aspectj.org.eclipse.jdt.internal.compiler.ASTVisitor, org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BlockScope)\r\n\t */\r\n","LineNumberTable":"unpack accept dump getLineNumberTable setLineNumberTable toString getSourceLine copy getTableLength unpack accept dump getLineNumberTable setLineNumberTable toString getSourceLine copy getTableLength isInPackedState data line_number_table_length line_number_table isInPackedState data line_number_table_length line_number_table org.aspectj.apache.bcel.classfile.LineNumberTable org.aspectj.apache.bcel.classfile.LineNumberTable  if 'isInPackedState' then this data needs unpacking\r\n  Table of line  throw it away now\r\n  Unpacks the byte array into the table\r\n  array is empty\r\n  else constrain search area\r\n  pos > j\r\n  if 'isInPackedState' then this data needs unpacking\r\n  Table of line  throw it away now\r\n  Unpacks the byte array into the table\r\n  array is empty\r\n  else constrain search area\r\n  pos > j\r\n /*\r\n   * Initialize from another object. Note that both objects use the same\r\n   * references (shallow copy). Use copy() for a physical copy.\r\n   */\r\n /*\r\n   * @param name_index Index of name\r\n   * @param length Content length in bytes\r\n   * @param line_number_table Table of line/numbers pairs\r\n   * @param constant_pool Array of constants\r\n   */\r\n /* If exact match can't be found (which is the most common case)\r\n       * return the line number that corresponds to the greatest index less\r\n       * than pos.\r\n       */\r\n /* Do a binary search since the array is ordered.\r\n     */\r\n /* It's possible that we did not find any valid entry for the bytecode\r\n     * offset we were looking for.\r\n     */\r\n /*\r\n   * Initialize from another object. Note that both objects use the same\r\n   * references (shallow copy). Use copy() for a physical copy.\r\n   */\r\n /*\r\n   * @param name_index Index of name\r\n   * @param length Content length in bytes\r\n   * @param line_number_table Table of line/numbers pairs\r\n   * @param constant_pool Array of constants\r\n   */\r\n /* If exact match can't be found (which is the most common case)\r\n       * return the line number that corresponds to the greatest index less\r\n       * than pos.\r\n       */\r\n /* Do a binary search since the array is ordered.\r\n     */\r\n /* It's possible that we did not find any valid entry for the bytecode\r\n     * offset we were looking for.\r\n     */\r\n","ClasspathLocation":"fetchAccessRestriction forSourceFolder forBinaryFolder forLibrary forLibrary forLibrary findClass getProjectRelativePath isOutputFolder isPackage cleanup reset debugPathString SOURCE BINARY accessRuleSet destinationPath org.aspectj.org.eclipse.jdt.internal.compiler.batch.ClasspathLocation org.aspectj.org.eclipse.jdt.internal.core.builder.ClasspathLocation","BreakStatement":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getLabel setLabel memSize treeSize analyseCode printStatement traverse LABEL_PROPERTY PROPERTY_DESCRIPTORS optionalLabel org.aspectj.org.eclipse.jdt.core.dom.BreakStatement org.aspectj.org.eclipse.jdt.internal.compiler.ast.BreakStatement  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  lookup the label, this should answer the returnContext\r\n  pretend it did not break since no actual target\r\n  grow\r\n  only record break info once accumulated through subroutines, and only against target context\r\n  collect inits\r\n  resize subroutines\r\n  $NON-NLS-1$\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","DeclarationOfAccessedFieldsPattern":"enclosingElement knownFields org.aspectj.org.eclipse.jdt.internal.core.search.matching.DeclarationOfAccessedFieldsPattern","AnnotationHolder":"storeAnnotations getAnnotations getDefaultValue getParameterAnnotations getParameterAnnotations setAnnotations getParameterAnnotations getParameterAnnotations setAnnotations getDefaultValue annotations parameterAnnotations defaultValue org.aspectj.org.eclipse.jdt.internal.compiler.lookup.AnnotationHolder  does not have any\r\n  no longer needed\r\n  is null if empty\r\n","INVOKEINTERFACE":"dump getCount toString consumeStack dump getCount toString consumeStack nargs nargs org.aspectj.apache.bcel.generic.INVOKEINTERFACE org.aspectj.apache.bcel.generic.INVOKEINTERFACE  Number of arguments on stack (number of stack slots), called \"count\" in vmspec2\r\n  nargs includes this reference\r\n  Number of arguments on stack (number of stack slots), called \"count\" in vmspec2\r\n  nargs includes this reference\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n","PrivilegedFieldBinding":"canBeSeenBy getAccessMethod alwaysNeedsAccessMethod getFieldBindingForLookup toString reader writer baseField org.aspectj.ajdt.internal.compiler.lookup.PrivilegedFieldBinding /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","Relationship":"getName getKind toString getSourceHandle getTargets addTarget hasRuntimeTest isAffects getName getKind toString getSourceHandle getTargets addTarget hasRuntimeTest isAffects serialVersionUID name kind isAffects sourceHandle targets hasRuntimeTest serialVersionUID name kind isAffects sourceHandle targets hasRuntimeTest org.aspectj.asm.internal.Relationship org.aspectj.asm.internal.Relationship  TODO should be a Set and not a list\r\n  TODO should be a Set and not a list\r\n /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n *     Andy Clement    Extensions for better IDE representation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n *     Andy Clement    Extensions for better IDE representation\r\n * ******************************************************************/\r\n","OptimizedReplaceEdit":"toString offset length replacement org.aspectj.org.eclipse.jdt.internal.formatter.OptimizedReplaceEdit  $NON-NLS-1$","DefaultErrorHandlingPolicies":"exitAfterAllProblems exitOnFirstError proceedOnFirstError proceedWithAllProblems org.aspectj.org.eclipse.jdt.internal.compiler.DefaultErrorHandlingPolicies /*\r\n * Accumulate all problems, then exit without proceeding.\r\n *\r\n * Typically, the #proceedWithProblems(Problem[]) should\r\n * show the problems.\r\n *\r\n */\r\n /*\r\n * Exit without proceeding on the first problem wich appears\r\n * to be an error.\r\n *\r\n */\r\n /*\r\n * Proceed on the first error met.\r\n *\r\n */\r\n /*\r\n * Accumulate all problems, then proceed with them.\r\n *\r\n */\r\n","IPackageDeclaration":"getElementName org.aspectj.org.eclipse.jdt.core.IPackageDeclaration","CompletionOnAnnotationMemberValuePair":"resolveType printExpression completedMemberValuePair org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnAnnotationMemberValuePair","IAttributeNamesConstants":"SYNTHETIC CONSTANT_VALUE LINE_NUMBER LOCAL_VARIABLE INNER_CLASSES CODE EXCEPTIONS SOURCE DEPRECATED SIGNATURE ENCLOSING_METHOD LOCAL_VARIABLE_TYPE_TABLE RUNTIME_VISIBLE_ANNOTATIONS RUNTIME_INVISIBLE_ANNOTATIONS RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS ANNOTATION_DEFAULT STACK_MAP_TABLE STACK_MAP org.aspectj.org.eclipse.jdt.core.util.IAttributeNamesConstants  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","ClassPreProcessor":"initialize preProcess initialize preProcess org.aspectj.weaver.loadtime.ClassPreProcessor org.aspectj.weaver.loadtime.ClassPreProcessor","IDOMType":"addSuperInterface getTypeParameters getName getSuperclass getSuperInterfaces isClass isEnum isAnnotation setClass setEnum setAnnotation setTypeParameters setName setSuperclass setSuperInterfaces org.aspectj.org.eclipse.jdt.core.jdom.IDOMType","BinaryTypeBinding":"convertMemberValue createAnnotation createAnnotations resolveType resolveType availableFields availableMethods cachePartsFrom createFields createMethod createMethods createTypeVariables enclosingType fields genericTypeSignature getExactConstructor getExactMethod getFieldBase getMemberType getMethodsBase hasMemberTypes getTypeVariable initializeTypeVariable isEquivalentTo isGenericType kind memberTypes methodsBase resolveTypeFor resolveTypesFor retrieveAnnotations storedAnnotations initializeDeprecatedAnnotationTagBits superclass superInterfaces typeVariables toString unResolvedMethods methods enclosingType environment storedAnnotations ajcInterMethod ajcInterField org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding  protected ReferenceBinding superclass;\r\n  For the link with the principle structure\r\n  keys are this ReferenceBinding & its fields and methods, value is an AnnotationHolder\r\n  should never reach here.\r\n  raw reference to generic ?\r\n  raw reference to generic ?\r\n  AspectJ extension - ensure we think we are resolved for getAnnotationTagBits() calls\r\n  is initialized in cachePartsFrom (called from LookupEnvironment.createBinaryTypeFrom())... must set to null so isGenericType() answers true\r\n  need enclosing type to access type variables\r\n  pretend parameterized to avoid raw\r\n  must be a member type not a top-level or local type\r\n  lazily sort fields\r\n  lazily sort methods\r\n  and still want to use binaries passed that point (e.g. type hierarchy resolver, see bug 63748).\r\n  must retrieve member types in case superclass  attempt to find each member type if it exists in the cache (otherwise - resolve it when requested)\r\n  ClassSignature = ParameterPart(optional) super_TypeSignature interface_signature\r\n  skip '<'\r\n  skip '>'\r\n  attempt to find the superclass if it exists in the cache (otherwise - resolve it when requested)\r\n  attempt to find each superinterface if it exists in the cache (otherwise - resolve it when requested)\r\n  attempt to find the superclass if it exists in the cache (otherwise - resolve it when requested)\r\n  attempt to find each superinterface if it exists in the cache (otherwise - resolve it when requested)\r\n  protect against incorrect use of the needFieldsAndMethods flag, see 48459\r\n  ordinal\r\n  second pass for reifying annotations, since may refer to fields being constructed (147875)\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  vararg methods are not recognized until 1.5\r\n  MethodTypeSignature = ParameterPart(optional) '(' TypeSignatures ')' return_typeSignature ['^' TypeSignature (optional)]\r\n  skip '<'\r\n  skip '>'\r\n  skip leading 'L' or 'T'\r\n  this is gonna get UGLY - warn the user?\r\n  Look for clashes with type variables on the generic method\r\n  had to extend this to also work for ITD fields (see 242797 c41)\r\n  skip '('\r\n  skip ')'\r\n  skip ')'\r\n  always retrieve return type (for constructors, its V for void - will be ignored)\r\n  get the exceptions the old way\r\n  attempt to find each exception if it exists in the cache (otherwise - resolve it when requested)\r\n  skip '^'\r\n  of the form (I[Ljava  first character is always '(' so skip it\r\n  Ignore synthetic argument for member types.\r\n  first character is always '(' so skip it\r\n  skip the synthetic arg if necessary\r\n  int parameter to method.getParameterAnnotations() include the synthetic arg\r\n  index is currently pointing at the ')'\r\n  fixup the declaring element of the type variable\r\n  discard <clinit>\r\n  want to see bridge methods as real methods\r\n  discard synthetics methods\r\n  detect all type variables first\r\n  initialize type variable bounds - may refer to forward variables\r\n  see https:  finish resolving the type\r\n  lazily sort fields\r\n  NOTE: the type of each field of a binary type is resolved when needed\r\n  lazily sort methods\r\n  NOTE: the return type, arg & exception types of each method of a binary type are resolved when needed\r\n  lazily sort methods\r\n  inner type lookups must know that a method with this name exists\r\n  ensure superclass is resolved before checking\r\n  ensure superinterfaces are resolved before checking\r\n  searches up the hierarchy as long as no potential (but not exact) match was found.\r\n  lazily sort fields\r\n  NOTE: the type of a field of a binary type is resolved when needed\r\n  source name is qualified with enclosing type name\r\n  enclosing$\r\n  enclosing $ typeName\r\n  only check trailing portion\r\n  no raw conversion for now\r\n  simply clone method subset\r\n  AspectJ Extension - added Base to name\r\n  lazily sort methods\r\n  iterate methods to resolve them\r\n  NOTE: the return type, arg & exception types of each method of a binary type are resolved when needed\r\n  AspectJ Extension - guard added\r\n  NOTE: member types of binary types are resolved when needed\r\n  InterfaceBound = ':' TypeSignature\r\n  skip name + ':'\r\n  variable is visible to its bounds\r\n  skip ':'\r\n  no raw conversion for now\r\n  NOTE: member types of binary types are resolved when needed\r\n  AspectJ Extension - added Base suffix\r\n  lazily sort methods\r\n  NOTE: the return type, arg & exception types of each method of a binary type are resolved when needed\r\n  AspectJ Extension - raised to public\r\n  not supported during this compile\r\n  AspectJ Extension - empty implementation here to stop super implementation running\r\n  finish resolving the type\r\n  propagate type inconsistency\r\n  propagate type inconsistency\r\n  NOTE: superInterfaces of binary types are resolved when needed\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  for the MethodVerifier so it doesn't resolve types\r\n  AspectJ Extension\r\n  AspectJ Extension - XXX extending SourceTypeBinding is a HORRIBLE hack, was 'extends ReferenceBinding'\r\n /* Answer the receiver's enclosing type... null if the receiver is a top level type.\r\n*\r\n* NOTE: enclosingType of a binary type is resolved when needed\r\n*/\r\n /* Answer the receiver's superclass... null if the receiver is Object or an interface.\r\n*\r\n* NOTE: superclass of a binary type is resolved when needed\r\n*/\r\n","DeclareAtFieldDeclaration":"clone0 subtreeMatch0 accept0 internalModifiersProperty internalModifiers2Property internalJavadocProperty propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty internalPatternNodeProperty internalAnnotationNameProperty JAVADOC_PROPERTY PATTERN_PROPERTY ANNOTATION_NAME_PROPERTY PROPERTY_DESCRIPTORS org.aspectj.org.eclipse.jdt.core.dom.DeclareAtFieldDeclaration  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  allow default implementation to flag the error\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /*\r\n\t * (omit javadoc for this method) Method declared on BodyDeclaration.\r\n\t * \r\n\t * There are no modifiers declared for DeclareErrorDeclaration - therefore\r\n\t * we don't do anything with this\r\n\t */\r\n /*\r\n\t * (omit javadoc for this method) Method declared on BodyDeclaration.\r\n\t * \r\n\t * There are no modifiers declared for DeclareErrorDeclaration - therefore\r\n\t * we don't do anything with this\r\n\t */\r\n /*\r\n\t * (omit javadoc for this method) Method declared on BodyDeclaration.\r\n\t */\r\n /*\r\n\t * (omit javadoc for this method) Method declared on ASTNode.\r\n\t */\r\n /*\r\n\t * (omit javadoc for this method) Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on DeclareAnnotationDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on DeclareAnnotationDeclaration.\r\n\t */\r\n","RuntimeInvisibleAnnotations":"accept dump copy accept dump copy org.aspectj.apache.bcel.classfile.annotation.RuntimeInvisibleAnnotations org.aspectj.apache.bcel.classfile.annotation.RuntimeInvisibleAnnotations","IElementChangedListener":"elementChanged org.aspectj.org.eclipse.jdt.core.IElementChangedListener","LineComment":"propertyDescriptors internalStructuralPropertiesForType getNodeType0 clone0 subtreeMatch0 accept0 memSize treeSize PROPERTY_DESCRIPTORS org.aspectj.org.eclipse.jdt.core.dom.LineComment  dispatch to correct overloaded match method\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","ClassFileStruct":"doubleAt floatAt i4At i8At reset u1At u2At u4At utf8At doubleAt floatAt i1At i2At i4At i8At u1At u2At u4At utf8At equals reference constantPoolOffsets structOffset org.aspectj.org.eclipse.jdt.internal.compiler.classfmt.ClassFileStruct org.aspectj.org.eclipse.jdt.internal.core.util.ClassFileStruct","BuildConfigListener":"currConfigChanged configsListUpdated org.aspectj.ajde.internal.BuildConfigListener /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","FileSystem":"findTypeNames findClass findClass isPackage reset normalizedPath getPath initialize normalize getClasspath getClasspath getClasspath getClasspath initializeKnownFileNames cleanup convertPathSeparators findClass findType findTypeNames findType findType isPackage classpaths knownFileNames org.aspectj.org.eclipse.jdt.internal.compiler.batch.FileSystem  New AspectJ Extension - extra int flag for mode, was 'public FileSystem(String[] classpathNames, String[] initialFileNames, String encoding) {'\r\n  New AspectJ Extension - pass extra mode\r\n  AspectJ Extension\r\n  should not happen\r\n  Uses the mode rather than a boolean, so we can specify JUST binary (ClasspathLocation.BINARY)\r\n  String destinationPath) {\r\n  End AspectJ Extension\r\n  new code:\r\n  class file only mode\r\n  keep == comparison valid\r\n  source only mode\r\n  new code:\r\n  new code:\r\n  End AspectJ Extension\r\n  keep == comparison valid\r\n  leave as is...\r\n  looking for a file which we know was provided at the beginning of the compilation\r\n  remember suggestion and keep looking\r\n  remember suggestion and keep looking\r\n  no better answer was found\r\n  concat with previous answers\r\n  concat with previous answers\r\n /*\r\n\tclassPathNames is a collection is Strings representing the full path of each class path\r\n\tinitialFileNames is a collection is Strings, the trailing '.java' will be removed if its not already.\r\n*/\r\n","InfixExpression":"toString toOperator propertyDescriptors internalStructuralPropertiesForType internalGetSetObjectProperty internalGetSetChildProperty internalGetChildListProperty getNodeType0 clone0 subtreeMatch0 accept0 getOperator setOperator getLeftOperand setLeftOperand getRightOperand setRightOperand hasExtendedOperands extendedOperands memSize treeSize token TIMES DIVIDE REMAINDER PLUS MINUS LEFT_SHIFT RIGHT_SHIFT_SIGNED RIGHT_SHIFT_UNSIGNED LESS GREATER LESS_EQUALS GREATER_EQUALS EQUALS NOT_EQUALS XOR OR AND CONDITIONAL_OR CONDITIONAL_AND CODES LEFT_OPERAND_PROPERTY OPERATOR_PROPERTY RIGHT_OPERAND_PROPERTY EXTENDED_OPERANDS_PROPERTY PROPERTY_DESCRIPTORS operator leftOperand rightOperand extendedOperands org.aspectj.org.eclipse.jdt.core.dom.InfixExpression  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  be careful not to trigger lazy creation of list\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  be careful not to trigger lazy creation of list\r\n  lazy init must be thread-safe for readers\r\n  lazy init must be thread-safe for readers\r\n  lazily initialize\r\n  treat Operator as free\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","CompletionOnJavadocFieldReference":"addCompletionFlags completeAnException completeInText completeBaseTypes completeFormalReference getCompletionFlags internalResolveType printExpression completionFlags separatorPosition org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnJavadocFieldReference  public boolean completionInText;\r\n  Resolve only receiver\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.JavadocFieldReference#internalResolveType(org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.JavadocFieldReference#printExpression(int, java.lang.StringBuffer)\r\n\t */\r\n","IStackMapTableAttribute":"getNumberOfEntries getStackMapFrame org.aspectj.org.eclipse.jdt.core.util.IStackMapTableAttribute","UpdateConfigurationDialog":"cancel_button_actionPerformed ok_button_actionPerformed jbInit getListCellRendererComponent mouseClicked keyPressed doCheck mousePressed mouseReleased mouseEntered mouseExited keyTyped keyReleased serialVersionUID message1 message2 box5 cancel_button ok_button flowLayout1 globalButton_panel jPanel1 jPanel2 titledBorder1 titledBorder2 borderLayout1 borderLayout2 borderLayout3 jPanel3 gridLayout1 jScrollPane1 updatedFilesList jScrollPane2 buildConfigList box2 messageLabel1 messageLabel2 serialVersionUID list org.aspectj.ajde.ui.swing.UpdateConfigurationDialog org.aspectj.ajde.ui.swing.CheckListCellRenderer org.aspectj.ajde.ui.swing.CheckListener  CheckListener listener = new CheckListener(buildConfigList);\r\n  (parentComponent.getWidth()  (parentComponent.getHeight()   /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation\r\n *     Helen Hawkins  Converted to new interface (bug 148190)  \r\n * ******************************************************************/\r\n","CodeException":"accept dump getCatchType getEndPC getHandlerPC getStartPC setCatchType setEndPC setHandlerPC setStartPC toString toString toString copy accept dump getCatchType getEndPC getHandlerPC getStartPC setCatchType setEndPC setHandlerPC setStartPC toString toString toString copy start_pc end_pc handler_pc catch_type start_pc end_pc handler_pc catch_type org.aspectj.apache.bcel.classfile.CodeException org.aspectj.apache.bcel.classfile.CodeException  Range in the code the exception handler is\r\n  active. start_pc is inclusive, end_pc exclusive\r\n  Range in the code the exception handler is\r\n  active. start_pc is inclusive, end_pc exclusive\r\n /* Starting address of exception handler, i.e.,\r\n\t\t\t               * an offset from start of code.\r\n\t\t\t               */\r\n /* Starting address of exception handler, i.e.,\r\n\t\t\t               * an offset from start of code.\r\n\t\t\t               */\r\n","Compiler":"acceptResult accept accept accept addCompilationUnit beginToCompile compile setBinaryTypes handleInternalException handleInternalException initializeParser internalBeginToCompile process processAnnotations reset resolve resolve parser requestor options problemReporter out unitsToProcess totalUnits lookupEnvironment DEBUG parseThreshold annotationProcessorManager referenceBindings DebugRequestor org.aspectj.org.eclipse.jdt.internal.compiler.Compiler  output for messages that are not sent to problemReporter\r\n  public CompilationUnitResult currentCompilationUnitResult;\r\n  (totalUnits-1) gives the last unit in unitToProcess\r\n  name lookup\r\n  ONCE STABILIZED, THESE SHOULD RETURN TO A FINAL FIELD\r\n  wrap requestor in DebugRequestor if one is specified\r\n  Switch the current policy and compilation result for this unit to the requested one.\r\n  want to abort enclosing request to compile\r\n  only report once\r\n  one requested further along to resolve sourceUnit.\r\n  diet parsing for large collection of unit\r\n  initial type binding creation\r\n  binding resolution\r\n  append the unit to the list of ones to process later on\r\n  when growing reposition units starting at position 0\r\n  rethrow\r\n  rethrow\r\n  -proc:only was set on the command line\r\n  End AspectJ Extension\r\n  process all units (some more could be injected in the loop by the lookup environment)\r\n  current unit being processed ?\r\n  Lookup environment may be in middle of connecting types\r\n  Lookup environment may be in middle of connecting types\r\n  with:\r\n  $NON-NLS-1$\r\n  severity\r\n  source start\r\n  source end\r\n  line number\r\n  column number\r\n  Exception may tell which compilation result it is related, and which problem caused it\r\n  current unit being processed ?\r\n  Lookup environment may be in middle of connecting types\r\n  already recorded\r\n  fixup filename TODO (philippe) should improve API to make this official\r\n  last unit in beginToCompile ?\r\n  no longer hold onto the unit\r\n  diet parsing for large collection of units\r\n  initial type binding creation\r\n  Switch the current policy and compilation result for this unit to the requested one.\r\n  binding resolution\r\n  fault in fields & methods\r\n  verify inherited methods\r\n  type checking\r\n  flow analysis\r\n  code generation\r\n  reference info\r\n  refresh the total number of units known at this stage\r\n  extract units to process\r\n  we reset the compiler in order to restart with the new units\r\n  last unit added\r\n  TODO (olivier) we should check if we should pass any unit at all for the last round\r\n  rethrow\r\n  rethrow\r\n  initial type binding creation\r\n  binding resolution\r\n  will request a full parse\r\n  process all units (some more could be injected in the loop by the lookup environment)\r\n  fault in fields & methods\r\n  verify inherited methods\r\n  type checking\r\n  flow analysis\r\n  code generation\r\n  release reference to processed unit declaration\r\n /*\r\n\t * Static requestor reserved to listening compilation results in debug mode,\r\n\t * so as for example to monitor compiler activity independantly from a particular\r\n\t * builder implementation. It is reset at the end of compilation, and should not \r\n\t * persist any information after having been reset.\r\n\t */\r\n /* create and record a compilation problem */\r\n /* hand back the compilation result */\r\n /* dump a stack trace to the console */\r\n /*\r\n\t * Compiler crash recovery in case of unexpected runtime exceptions\r\n\t */\r\n /* special treatment for SilentAbort: silently cancelling the compilation process */\r\n /* distant internal exception which could not be reported back there */\r\n /* distant problem which could not be reported back there? */\r\n /* hand back the compilation result */\r\n /*\r\n\t * Compiler recovery in case of internal AbortCompilation event\r\n\t */\r\n","ReflectionShadow":"makeExecutionShadow makeAdviceExecutionShadow makeCallShadow makeCallShadow makeStaticInitializationShadow makePreInitializationShadow makeInitializationShadow makeHandlerShadow makeHandlerShadow makeFieldGetShadow makeFieldGetShadow makeFieldSetShadow makeFieldSetShadow getIWorld getThisVar getTargetVar getEnclosingType getArgVar getThisJoinPointVar getThisJoinPointStaticPartVar getThisEnclosingJoinPointStaticPartVar getKindedAnnotationVar getWithinAnnotationVar getWithinCodeAnnotationVar getThisAnnotationVar getTargetAnnotationVar getArgAnnotationVar getEnclosingCodeSignature getSourceLocation getMatchingContext makeExecutionShadow makeAdviceExecutionShadow makeCallShadow makeCallShadow makeStaticInitializationShadow makePreInitializationShadow makeInitializationShadow makeHandlerShadow makeHandlerShadow makeFieldGetShadow makeFieldGetShadow makeFieldSetShadow makeFieldSetShadow getIWorld getThisVar getTargetVar getEnclosingType getArgVar getThisJoinPointVar getThisJoinPointStaticPartVar getThisEnclosingJoinPointStaticPartVar getKindedAnnotationVar getWithinAnnotationVar getWithinCodeAnnotationVar getThisAnnotationVar getTargetAnnotationVar getArgAnnotationVar getEnclosingCodeSignature getSourceLocation getMatchingContext world enclosingType enclosingMember matchContext thisVar targetVar argsVars atThisVar atTargetVar atArgsVars withinAnnotationVar withinCodeAnnotationVar annotationVar annotationFinder world enclosingType enclosingMember matchContext thisVar targetVar argsVars atThisVar atTargetVar atArgsVars withinAnnotationVar withinCodeAnnotationVar annotationVar annotationFinder org.aspectj.weaver.reflect.ReflectionShadow org.aspectj.weaver.reflect.ReflectionShadow  TODO Auto-generated method stub\r\n  TODO Auto-generated method stub\r\n  TODO Auto-generated method stub\r\n  is correctly the signature of the ctor.\r\n  XXX this code is copied from BcelShadow with one minor change...\r\n  TODO Auto-generated method stub\r\n  TODO Auto-generated method stub\r\n  TODO Auto-generated method stub\r\n  is correctly the signature of the ctor.\r\n  XXX this code is copied from BcelShadow with one minor change...\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getIWorld()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getThisVar()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getTargetVar()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getEnclosingType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getArgVar(int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getThisJoinPointVar()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getThisJoinPointStaticPartVar()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getThisEnclosingJoinPointStaticPartVar()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getKindedAnnotationVar(org.aspectj.weaver.UnresolvedType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getWithinAnnotationVar(org.aspectj.weaver.UnresolvedType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getWithinCodeAnnotationVar(org.aspectj.weaver.UnresolvedType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getThisAnnotationVar(org.aspectj.weaver.UnresolvedType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getTargetAnnotationVar(org.aspectj.weaver.UnresolvedType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getArgAnnotationVar(int, org.aspectj.weaver.UnresolvedType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getEnclosingCodeSignature()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getSourceLocation()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getIWorld()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getThisVar()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getTargetVar()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getEnclosingType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getArgVar(int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getThisJoinPointVar()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getThisJoinPointStaticPartVar()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getThisEnclosingJoinPointStaticPartVar()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getKindedAnnotationVar(org.aspectj.weaver.UnresolvedType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getWithinAnnotationVar(org.aspectj.weaver.UnresolvedType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getWithinCodeAnnotationVar(org.aspectj.weaver.UnresolvedType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getThisAnnotationVar(org.aspectj.weaver.UnresolvedType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getTargetAnnotationVar(org.aspectj.weaver.UnresolvedType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getArgAnnotationVar(int, org.aspectj.weaver.UnresolvedType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getEnclosingCodeSignature()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.Shadow#getSourceLocation()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","BinaryType":"closing codeComplete codeComplete codeComplete codeComplete createField createInitializer createMethod createType equals findMethods getChildren getChildrenForCategory getClassFileInfo getDeclaringType getElementInfo getElementType getField getFields getFlags getFullyQualifiedName getFullyQualifiedName getFullyQualifiedParameterizedName getHandleFromMemento getInitializer getInitializers getKey getMethod getMethods getPackageFragment getSuperclassTypeSignature getSourceFileName getSuperclassName getSuperInterfaceNames getSuperInterfaceTypeSignatures getTypeParameters getTypeParameterSignatures getType getTypeParameter getTypeQualifiedName getTypeQualifiedName getTypes isAnonymous isClass isEnum isInterface isAnnotation isLocal isMember isResolved loadTypeHierachy loadTypeHierachy newSupertypeHierarchy newSupertypeHierarchy newSupertypeHierarchy newSupertypeHierarchy newTypeHierarchy newTypeHierarchy newTypeHierarchy newTypeHierarchy newTypeHierarchy newTypeHierarchy resolved resolveType resolveType sourceFileName toStringInfo toStringName getAttachedJavadoc getJavadocContents NO_FIELDS NO_METHODS NO_TYPES NO_INITIALIZERS EMPTY_JAVADOC org.aspectj.org.eclipse.jdt.internal.core.BinaryType  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  use project to retrieve corresponding .java IFile\r\n  $NON-NLS-1$   $NON-NLS-1$   if type doesn't exist, no matching method can exist\r\n  ensure the class file's buffer is open so that categories are computed\r\n  so default to assuming $ is an enclosing type separator\r\n  anonymous or local type\r\n  that return a non-null enclosing type name for local types defined in anonymous (e.g. A$1$B)\r\n  exception thrown only when showing parameters\r\n  backward compatible with 3.0 mementos\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  should not happen\r\n  skip type parameters\r\n  default to using the outer most declaring type name\r\n  skip type parameters\r\n  skip superclass\r\n  $NON-NLS-1$\r\n  exception thrown only when showing parameters\r\n  annotation is interface too\r\n  not implemented for binary types\r\n  not implemented for binary types\r\n  malformed inner type: name doesn't contain a dollar\r\n  play it safe\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  try to find enum constant summary start\r\n  try to find required enum constant summary start\r\n  try to find optional enum constant summary start\r\n  try to find field summary start\r\n  try to find constructor summary start\r\n  try to find method summary start\r\n  we take the end of class data\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n * Remove my cached children from the Java Model\r\n */\r\n /*\r\n * @see IType#codeComplete(char[], int, int, char[][], char[][], int[], boolean, ICompletionRequestor)\r\n */\r\n /*\r\n * @see IType#codeComplete(char[], int, int, char[][], char[][], int[], boolean, ICompletionRequestor, WorkingCopyOwner)\r\n */\r\n /*\r\n * @see IType#createField(String, IJavaElement, boolean, IProgressMonitor)\r\n */\r\n /*\r\n * @see IType#createInitializer(String, IJavaElement, IProgressMonitor)\r\n */\r\n /*\r\n * @see IType#createMethod(String, IJavaElement, boolean, IProgressMonitor)\r\n */\r\n /*\r\n * @see IType#createType(String, IJavaElement, boolean, IProgressMonitor)\r\n */\r\n /*\r\n * @see IType#findMethods(IMethod)\r\n */\r\n /*\r\n * @see IParent#getChildren()\r\n */\r\n /*\r\n * @see IMember#getDeclaringType()\r\n */\r\n /*\r\n * @see IJavaElement\r\n */\r\n /*\r\n * @see IType#getField(String name)\r\n */\r\n /*\r\n * @see IType#getFields()\r\n */\r\n /*\r\n * @see IMember#getFlags()\r\n */\r\n /*\r\n * @see IType#getFullyQualifiedName()\r\n */\r\n /*\r\n * @see IType#getFullyQualifiedName(char enclosingTypeSeparator)\r\n */\r\n /*\r\n * @see IType#getFullyQualifiedParameterizedName()\r\n */\r\n /*\r\n * @see JavaElement\r\n */\r\n /*\r\n * @see IType#getInitializer(int occurrenceCount)\r\n */\r\n /*\r\n * @see IType#getInitializers()\r\n */\r\n /*\r\n * @see IType#getMethod(String name, String[] parameterTypeSignatures)\r\n */\r\n /*\r\n * @see IType#getMethods()\r\n */\r\n /*\r\n * @see IType#getPackageFragment()\r\n */\r\n /*\r\n * @see IType#getSuperclassName()\r\n */\r\n /*\r\n * @see IType#getSuperInterfaceNames()\r\n */\r\n /*\r\n * @see IType#getType(String)\r\n */\r\n /*\r\n * @see IType#getTypeQualifiedName()\r\n */\r\n /*\r\n * @see IType#getTypeQualifiedName(char)\r\n */\r\n /*\r\n * @see IType#getTypes()\r\n */\r\n /*\r\n * @see IType#isAnonymous()\r\n */\r\n /*\r\n * @see IType#isClass()\r\n */\r\n /*\r\n * @see IType#isInterface()\r\n */\r\n /*\r\n * @see IType#isLocal()\r\n */\r\n /*\r\n * @see IType#isMember()\r\n */\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.core.IType#isResolved()\r\n */\r\n /*\r\n * @see IType\r\n */\r\n /*\r\n * @see IType\r\n */\r\n /*\r\n * @see IType#newSupertypeHierarchy(IProgressMonitor monitor)\r\n */\r\n /*\r\n *@see IType#newSupertypeHierarchy(ICompilationUnit[], IProgressMonitor monitor)\r\n */\r\n /*\r\n * @see IType#newSupertypeHierarchy(WorkingCopyOwner, IProgressMonitor)\r\n */\r\n /*\r\n * @see IType#newTypeHierarchy(IJavaProject, IProgressMonitor)\r\n */\r\n /*\r\n * @see IType#newTypeHierarchy(IJavaProject, WorkingCopyOwner, IProgressMonitor)\r\n */\r\n /*\r\n * @see IType#newTypeHierarchy(ICompilationUnit[], IProgressMonitor)\r\n */\r\n /*\r\n * @see IType#newTypeHierarchy(WorkingCopyOwner, IProgressMonitor)\r\n */\r\n /*\r\n * @see IType#resolveType(String)\r\n */\r\n /*\r\n * @see IType#resolveType(String, WorkingCopyOwner)\r\n */\r\n /*\r\n\t\t * We assume that this type has been compiled from a file with its name\r\n\t\t * For example, A.class comes from A.java and p.A.class comes from a file A.java\r\n\t\t * in the folder p.\r\n\t\t */\r\n /*\r\n * Returns the source file name as defined in the given info.\r\n * If not present in the info, infers it from this type.\r\n */\r\n /*\r\n * @private Debugging purposes\r\n */\r\n /*\r\n\t * Check out to cut off the hierarchy see 119844\r\n\t * We remove what the contents between the start of class data and the first <P>\r\n\t */\r\n","GoToLineThread":"isFinished needsRetry run shortPause editorAdapter lineNumber fileToSeekTo finished org.aspectj.ajde.ui.swing.GoToLineThread /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation\r\n *     Helen Hawkins  Converted to new interface (bug 148190)  \r\n * ******************************************************************/\r\n","CodeSnippetThisReference":"checkAccess generateCode genericTypeArguments isSuperAccess isTypeAccess printExpression resolveType setActualReceiverType setDepth setFieldIndex evaluationContext delegateThis isImplicit org.aspectj.org.eclipse.jdt.internal.eval.CodeSnippetThisReference  this  static may not refer to this  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  implicit this\r\n  if this happen we should report illegal access to this in a static context\r\n","IConstantPoolConstant":"CONSTANT_Class CONSTANT_Fieldref CONSTANT_Methodref CONSTANT_InterfaceMethodref CONSTANT_String CONSTANT_Integer CONSTANT_Float CONSTANT_Long CONSTANT_Double CONSTANT_NameAndType CONSTANT_Utf8 CONSTANT_Methodref_SIZE CONSTANT_Class_SIZE CONSTANT_Double_SIZE CONSTANT_Fieldref_SIZE CONSTANT_Float_SIZE CONSTANT_Integer_SIZE CONSTANT_InterfaceMethodref_SIZE CONSTANT_Long_SIZE CONSTANT_String_SIZE CONSTANT_Utf8_SIZE CONSTANT_NameAndType_SIZE org.aspectj.org.eclipse.jdt.core.util.IConstantPoolConstant","ReturnaddressType":"equals getTarget equals getTarget NO_TARGET returnTarget NO_TARGET returnTarget org.aspectj.apache.bcel.generic.ReturnaddressType org.aspectj.apache.bcel.generic.ReturnaddressType /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n","StackMap":"dump getStackMap setStackMap toString copy accept getMapLength dump getStackMap setStackMap toString copy accept getMapLength map_length map map_length map org.aspectj.apache.bcel.classfile.StackMap org.aspectj.apache.bcel.classfile.StackMap  Table of stack map entries\r\n  Table of stack map entries\r\n /*\r\n   * @param name_index Index of name\r\n   * @param length Content length in bytes\r\n   * @param map Table of stack map entries\r\n   * @param constant_pool Array of constants\r\n   */\r\n /*\r\n   * @param name_index Index of name\r\n   * @param length Content length in bytes\r\n   * @param map Table of stack map entries\r\n   * @param constant_pool Array of constants\r\n   */\r\n","CompletionOnQualifiedNameReference":"printExpression resolveType completionIdentifier isInsideAnnotationAttribute org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnQualifiedNameReference  $NON-NLS-1$\r\n  it can be a package, type, member type, local variable or field\r\n","JavaSearchTypeNameMatch":"equals getModifiers getType hashCode setModifiers setType toString type modifiers org.aspectj.org.eclipse.jdt.internal.core.search.JavaSearchTypeNameMatch  store modifiers to avoid java model population\r\n  avoid unnecessary calls for identical objects\r\n /* (non-Javadoc)\r\n * Returns whether the matched type is equals to the given object or not.\r\n * @see java.lang.Object#equals(java.lang.Object)\r\n */\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.core.search.TypeNameMatch#getModifiers()\r\n */\r\n /* (non-Javadoc)\r\n * Note that returned handle exists as it matches a type accepted\r\n * from up-to-date index file.\r\n * @see org.aspectj.org.eclipse.jdt.core.search.TypeNameMatch#getType()\r\n */\r\n /* (non-Javadoc)\r\n * Returns the hash code of the matched type.\r\n * @see java.lang.Object#hashCode()\r\n */\r\n /* (non-Javadoc)\r\n * Returns the string of the matched type.\r\n * @see java.lang.Object#toString()\r\n */\r\n","ExternalJavaProject":"equals exists getOption isOnClasspath isOnClasspath EXTERNAL_PROJECT_NAME org.aspectj.org.eclipse.jdt.internal.core.ExternalJavaProject  $NON-NLS-1$\r\n  external project never exists\r\n  since project is external, no element is on classpath (see https:  since project is external, no resource is on classpath (see https: /*no .classpath format problem*/\r\n /*no resolved claspath*/\r\n /*no reverse map*/\r\n /*no resolve entry map*/\r\n","LangUtil":"is13VMOrGreater is14VMOrGreater is15VMOrGreater is16VMOrGreater throwIaxIfNull throwIaxIfNotAssignable throwIaxIfNotAssignable throwIaxIfFalse isEmpty isEmpty isEmpty split commaSplit splitClasspath getBoolean anySplit strings safeList copyStrings extractOptions safeCopy unqualifiedClassName unqualifiedClassName replace toSizedString renderExceptionShort renderException renderException elideEndingLines stackToString unwrapException arrayAsList acceptString makeClasspath addIfNotEmpty makeProcess getJavaExecutable sleep sleepUntil reinit init init init setEnvp setErrSnoop setOutSnoop start stop getCommand completed started userStopped getThrown getResult doCompleting stop makeThrown toString append is13VMOrGreater is14VMOrGreater is15VMOrGreater is16VMOrGreater throwIaxIfNull throwIaxIfNotAssignable throwIaxIfNotAssignable throwIaxIfFalse isEmpty isEmpty isEmpty split commaSplit splitClasspath getBoolean anySplit strings safeList copyStrings extractOptions safeCopy unqualifiedClassName unqualifiedClassName replace toSizedString renderExceptionShort renderException renderException elideEndingLines stackToString unwrapException arrayAsList acceptString makeClasspath addIfNotEmpty makeProcess getJavaExecutable sleep sleepUntil reinit init init init setEnvp setErrSnoop setOutSnoop start stop getCommand completed started userStopped getThrown getResult doCompleting stop makeThrown toString append EOL is13VMOrGreater is14VMOrGreater is15VMOrGreater is16VMOrGreater TEST_PACKAGES infixes command envp label init started completed userStopped process errStream outStream inStream errSnoop outSnoop result thrown fromProcess fromErrPipe fromOutPipe fromInPipe thrown EOL is13VMOrGreater is14VMOrGreater is15VMOrGreater is16VMOrGreater TEST_PACKAGES infixes command envp label init started completed userStopped process errStream outStream inStream errSnoop outSnoop result thrown fromProcess fromErrPipe fromOutPipe fromInPipe thrown org.aspectj.util.LangUtil org.aspectj.util.LangUtil  JLS 20.18.7\r\n  unset any not found\r\n  fixup remainder\r\n  ignored\r\n  Java 1.2 exceptions that carry exceptions\r\n  java.util.logging.LogRecord.getThrown()\r\n  XXX dumb implementation\r\n  XXX dumb implementation\r\n  java.ext.dirs\r\n  final Thread thread = Thread.currentThread();\r\n  init everything but command and label\r\n  pipe threads are children\r\n  start 4 threads, process & pipes for in, err, out\r\n  cache this\r\n  assert null == this.thrown\r\n  this will block if waiting\r\n  JLS 20.18.7\r\n  unset any not found\r\n  fixup remainder\r\n  ignored\r\n  Java 1.2 exceptions that carry exceptions\r\n  java.util.logging.LogRecord.getThrown()\r\n  XXX dumb implementation\r\n  XXX dumb implementation\r\n  java.ext.dirs\r\n  final Thread thread = Thread.currentThread();\r\n  init everything but command and label\r\n  pipe threads are children\r\n  start 4 threads, process & pipes for in, err, out\r\n  cache this\r\n  assert null == this.thrown\r\n  this will block if waiting\r\n /*\r\n\t\t * XXX not verified thread-safe, but should be. Known problems: - user stops (completed = true) then exception thrown from\r\n\t\t * destroying process (stop() expects !completed) ...\r\n\t\t */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /*\r\n\t\t * XXX not verified thread-safe, but should be. Known problems: - user stops (completed = true) then exception thrown from\r\n\t\t * destroying process (stop() expects !completed) ...\r\n\t\t */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","NodeEventHandler":"preRemoveChildEvent postRemoveChildEvent preReplaceChildEvent postReplaceChildEvent preAddChildEvent postAddChildEvent preValueChangeEvent postValueChangeEvent preCloneNodeEvent postCloneNodeEvent org.aspectj.org.eclipse.jdt.core.dom.NodeEventHandler","WithinAnnotationPointcut":"getAnnotationTypePattern couldMatchKinds parameterizeWith fastMatch matchInternal resolveBindings concretize1 findResidueInternal getBindingAnnotationTypePatterns getBindingTypePatterns write read equals hashCode buildDeclarationText toString accept getAnnotationTypePattern couldMatchKinds parameterizeWith fastMatch matchInternal resolveBindings concretize1 findResidueInternal getBindingAnnotationTypePatterns getBindingTypePatterns write read equals hashCode buildDeclarationText toString accept annotationTypePattern declarationText annotationTypePattern declarationText org.aspectj.weaver.patterns.WithinAnnotationPointcut org.aspectj.weaver.patterns.WithinAnnotationPointcut  if we weren't going to find the annotation\r\n  if we weren't going to find the annotation\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#fastMatch(org.aspectj.weaver.patterns.FastMatchInfo)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#match(org.aspectj.weaver.Shadow)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#resolveBindings(org.aspectj.weaver.patterns.IScope, org.aspectj.weaver.patterns.Bindings)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#concretize1(org.aspectj.weaver.ResolvedType, org.aspectj.weaver.IntMap)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#findResidue(org.aspectj.weaver.Shadow, org.aspectj.weaver.patterns.ExposedState)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingAnnotationTypePatterns()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingTypePatterns()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.PatternNode#write(java.io.DataOutputStream)\r\n\t */\r\n /* (non-Javadoc)\r\n     * @see java.lang.Object#equals(java.lang.Object)\r\n     */\r\n /* (non-Javadoc)\r\n     * @see java.lang.Object#hashCode()\r\n     */\r\n /* (non-Javadoc)\r\n     * @see java.lang.Object#toString()\r\n     */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#fastMatch(org.aspectj.weaver.patterns.FastMatchInfo)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#match(org.aspectj.weaver.Shadow)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#resolveBindings(org.aspectj.weaver.patterns.IScope, org.aspectj.weaver.patterns.Bindings)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#concretize1(org.aspectj.weaver.ResolvedType, org.aspectj.weaver.IntMap)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#findResidue(org.aspectj.weaver.Shadow, org.aspectj.weaver.patterns.ExposedState)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingAnnotationTypePatterns()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingTypePatterns()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.PatternNode#write(java.io.DataOutputStream)\r\n\t */\r\n /* (non-Javadoc)\r\n     * @see java.lang.Object#equals(java.lang.Object)\r\n     */\r\n /* (non-Javadoc)\r\n     * @see java.lang.Object#hashCode()\r\n     */\r\n /* (non-Javadoc)\r\n     * @see java.lang.Object#toString()\r\n     */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","MultiCommentRegion":"canAppend getDelimiter getDelimiter isIndentDescriptions isIndentRoots markHtmlRanges markHtmlTag markJavadocTag markRegion createLine fIndentDescriptions fIndentRoots fParameterNewLine fSeparateRoots org.aspectj.org.eclipse.jdt.internal.formatter.comment.MultiCommentRegion  Avoid wrapping punctuation\r\n  always append elements that did not have any range separators\r\n  Breaking the abstraction by directly accessing the list of ranges for looking ahead\r\n  Avoid appending consecutive immutable ranges, which together exceed the line width\r\n  Add blank line before first root  Blank line after <  Blank line before <pre> tag\r\n  $NON-NLS-1$\r\n  simply preserve range (~ word) breaks\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentRegion#canAppend(org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentLine, org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentRange, org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentRange, int, int)\r\n\t */\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentRegion#getDelimiter(org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentLine, org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentLine, org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentRange, org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentRange, java.lang.String)\r\n\t */\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentRegion#getDelimiter(org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentRange, org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentRange)\r\n\t */\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentRegion#markRegion()\r\n\t */\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentRegion#createLine()\r\n\t * @since 3.1\r\n\t */\r\n","AllocationExpression":"analyseCode checkCapturedLocalInitializationIfNecessary enclosingInstance generateCode genericTypeArguments isSuperAccess isTypeAccess manageEnclosingInstanceAccessIfNecessary manageSyntheticAccessIfNecessary printExpression resolveType setActualReceiverType setDepth setFieldIndex traverse type arguments binding codegenBinding syntheticAccessor typeArguments genericTypeArguments enumConstant org.aspectj.org.eclipse.jdt.internal.compiler.ast.AllocationExpression  exact binding resulting from lookup\r\n  actual binding used for code generation (if no synthetic accessor)\r\n  synthetic accessor for inner-emulation\r\n  for enum constant initializations\r\n  check captured variables are initialized in current context (26134)\r\n  process arguments\r\n  record some dependency information for exception types\r\n  check exception handling\r\n  only check external allocations\r\n  was ReferenceBinding allocatedType = this.codegenBinding.declaringClass;\r\n  just in case (see pr112783)\r\n  push enum constant name and ordinal\r\n  null for enum constant body\r\n  better highlight for allocation: display the type individually\r\n  handling innerclass instance allocation - enclosing instance arguments\r\n  generate the arguments for constructor\r\n  handling innerclass instance allocation - outer local arguments\r\n  synthetic accessor got some extra arguments appended to its signature, which need values\r\n  invoke constructor\r\n  conversion only generated if unboxing\r\n  locally propagate, since we already now the desired shape for sure\r\n  perform some emulation work in case there is some and we are inside a local type only\r\n  AspectJ Extension\r\n  if constructor from parameterized type got found, use the original constructor at codegen time\r\n  constructor will not be dumped as private, no emulation required thus\r\n  from 1.4 on, local type constructor can lose their private flag to ease emulation\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  type null for enum constant initializations\r\n  $NON-NLS-1$\r\n  Propagate the type checking to the arguments, and check if the constructor is defined.\r\n  disallow new X<String>.Y<Integer>()\r\n  isStatic() is answering true for toplevel types\r\n  initialization of an enum constant\r\n  typeChecks all arguments\r\n  resolve type arguments (for generic constructor call)\r\n  buffering the arguments' types\r\n  will check later on\r\n  record a best guess, for clients who need hint about possible contructor match\r\n  replace args with errors with null type\r\n  shouldn't return generic method outside its context, rather convert it to raw method (175409)\r\n  ignore cases where method is used from within inside itself (e.g. direct recursions)\r\n  record the closest match, for clients who may still need hint about possible method match\r\n  null type denotes fake allocation for enum constant inits\r\n  enum constant scenario\r\n /* Inner emulation consists in either recording a dependency \r\n * link only, or performing one level of propagation.\r\n *\r\n * Dependency mechanism is used whenever dealing with source target\r\n * types, since by the time we reach them, we might not yet know their\r\n * exact need.\r\n */\r\n","SingleTypeReference":"copyDims getLastToken getTypeBinding getTypeName printExpression resolveTypeEnclosing traverse traverse token org.aspectj.org.eclipse.jdt.internal.compiler.ast.SingleTypeReference","TypePatternList":"size get toString canMatchSignatureWithNParameters matches matches outOfStar inStar parameterizeWith resolveBindings resolveReferences postRead equals hashCode read write getTypePatterns getExactTypes accept traverse areAllExactWithNoSubtypesAllowed maybeGetCleanNames size get toString canMatchSignatureWithNParameters matches matches outOfStar inStar parameterizeWith resolveBindings resolveReferences postRead equals hashCode read write getTypePatterns getExactTypes accept traverse areAllExactWithNoSubtypesAllowed maybeGetCleanNames typePatterns ellipsisCount EMPTY ANY typePatterns ellipsisCount EMPTY ANY org.aspectj.weaver.patterns.TypePatternList org.aspectj.weaver.patterns.TypePatternList  can't use TypePattern.ELLIPSIS because of circular static dependency that introduces\r\n  System.err.print(\"match(\" + arguments + \", \" + types + \") -> \");\r\n  System.err.println(b);\r\n  invariant: if (tLeft > 0) then (ti < target.length && pi < pattern.length)\r\n  invariant: pLeft > 0, so we know we'll run out of stars and find a real char in pattern\r\n  invariant: if (tLeft > 0) then (ti < target.length)\r\n  can't use TypePattern.ELLIPSIS because of circular static dependency that introduces\r\n  System.err.print(\"match(\" + arguments + \", \" + types + \") -> \");\r\n  System.err.println(b);\r\n  invariant: if (tLeft > 0) then (ti < target.length && pi < pattern.length)\r\n  invariant: pLeft > 0, so we know we'll run out of stars and find a real char in pattern\r\n  invariant: if (tLeft > 0) then (ti < target.length)\r\n /*\r\n     * return true iff this pattern could ever match a signature with the\r\n     * given number of parameters\r\n     */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /*\r\n     * return true iff this pattern could ever match a signature with the\r\n     * given number of parameters\r\n     */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","State":"computeStructuralBuildTime copyFrom getDefinedTypeNamesFor getStructurallyChangedTypes isDuplicateLocator isKnownPackage isKnownType record recordLocatorForType recordStructuralDependency removeLocator removePackage removeQualifiedTypeName read readName readNames readRestriction tagAsNoopBuild wasNoopBuild tagAsStructurallyChanged wasStructurallyChanged wasStructurallyChanged write writeName writeNames writeRestriction toString javaProjectName sourceLocations binaryLocations references typeLocators buildNumber lastStructuralBuildTime structuralBuildTimes knownPackageNames previousStructuralBuildTime structurallyChangedTypes MaxStructurallyChangedTypes VERSION SOURCE_FOLDER BINARY_FOLDER EXTERNAL_JAR INTERNAL_JAR org.aspectj.org.eclipse.jdt.internal.core.builder.State  keyed by the project relative path of the type (ie. \"src1  keyed by qualified type name \"p1  of the form \"p1  keep track of ? structurally changed types, otherwise consider all to be changed\r\n  changed access rule presentation\r\n  indicates a full build\r\n  means only one type is defined with the same name as the file... saves space\r\n  is a type name of the form p1  can be empty when no types are defined\r\n  in the common case, the qualifiedTypeName is a substring of the typeLocator so share the char[] by using String.substring()\r\n  can skip if 0 (full build) since its assumed to be 0 if unknown\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  no restriction specified\r\n  tag the project since it has no source folders and can be skipped\r\n  too many to keep track of\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  remember the names have been interned\r\n  remember the names have been interned\r\n  remember the names have been interned\r\n  now write the interned qualified names as arrays of interned simple names\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n * byte\t\tVERSION\r\n * String\t\tproject name\r\n * int\t\t\tbuild number\r\n * int\t\t\tlast structural build number\r\n*/\r\n /*\r\n * ClasspathMultiDirectory[]\r\n * int\t\t\tid\r\n * String\t\tpath(s)\r\n*/\r\n /*\r\n * ClasspathLocation[]\r\n * int\t\t\tid\r\n * String\t\tpath(s)\r\n*/\r\n /*\r\n * Structural build numbers table\r\n * String\t\tprereq project name\r\n * int\t\t\tlast structural build number\r\n*/\r\n /*\r\n * String[]\tInterned type locators\r\n */\r\n /*\r\n * Type locators table\r\n * String\t\ttype name\r\n * int\t\t\tinterned locator id\r\n */\r\n /*\r\n * char[][][]\tInterned qualified names\r\n * char[][]\tInterned simple names\r\n */\r\n /*\r\n * References table\r\n * int\t\tinterned locator id\r\n * ReferenceCollection\r\n*/\r\n","FullPathHandleProvider":"createHandleIdentifier createHandleIdentifier getFileForHandle getLineNumberForHandle getOffSetForHandle createHandleIdentifier dependsOnLocation initialize createHandleIdentifier createHandleIdentifier getFileForHandle getLineNumberForHandle getOffSetForHandle createHandleIdentifier dependsOnLocation initialize ID_DELIM ID_DELIM org.aspectj.asm.internal.FullPathHandleProvider org.aspectj.asm.internal.FullPathHandleProvider  skip over the file\r\n  skip over the file\r\n  skip over the line number\r\n  skip over the column\r\n  return true;\r\n  skip over the file\r\n  skip over the file\r\n  skip over the line number\r\n  skip over the column\r\n  return true;\r\n /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n * ******************************************************************/\r\n","DefaultCommentMapper":"hasSameTable getComment getCommentIndex getExtendedStartPosition getLineNumber getExtendedEnd getExtendedLength firstLeadingCommentIndex lastTrailingCommentIndex initialize storeLeadingComments storeTrailingComments visitNode endVisitNode visit comments scanner leadingPtr leadingNodes leadingIndexes trailingPtr lastTrailingPtr trailingNodes trailingIndexes STORAGE_INCREMENT topSiblingParent siblings parentLineRange siblingPtr org.aspectj.org.eclipse.jdt.core.dom.DefaultCommentMapper  extended nodes storage\r\n  Init array pointers\r\n  Init comments\r\n  Init scanner and start ranges computing\r\n  Start unit visit\r\n  Reduce leading arrays if necessary\r\n  remove last remaining unresolved nodes\r\n  reduce array size\r\n  Reduce trailing arrays if necessary\r\n  Release scanner as it's only used during unit visit\r\n  Init extended position\r\n  Get line of node start position\r\n  Find first comment index\r\n  Look after potential comments\r\n  Verify for each comment that there's only white spaces between end and start of {following comment|node}\r\n  may be equals => then no scan is necessary\r\n  Should not happen, but return no extended position...\r\n  if first comment fails, then there's no extended position in fact\r\n  verify that there's no more than one line between node  stop search on condition 4)\r\n  stop search on condition 1) and 2)\r\n  Store previous infos\r\n  Verify that there's no token on the same line before first leading comment\r\n  Store leading comments indexes\r\n  Init extended position\r\n  special case for last child of its parent\r\n  Get line number\r\n  Find comments range index\r\n  Look after potential comments\r\n  get comment and leave if next starting position has been reached\r\n  Should not happen, but return no extended position...\r\n  if first index fails, then there's no extended position in fact...\r\n  otherwise we get the last index of trailing comment => break\r\n  verify that there's no more than one line between node  stop search on condition 3)\r\n  stop search on condition 1)\r\n  verify that there's nothing else than white spaces between node  Store index if we're on the same line than node end\r\n  Store previous infos\r\n  Verify that following node start is separated\r\n  Store trailing comments indexes\r\n  Compute new extended end\r\n  Look for children unresolved extended end\r\n  children extended end were stored before\r\n  there's no more unresolved nodes\r\n  we're no longer in node ancestor hierarchy\r\n  get previous node\r\n  Remove remaining unresolved nodes\r\n  Get default previous end\r\n  Look for sibling node\r\n  Found one previous sibling, so compute its trailing comments using current node start position\r\n  Stop visit for malformed node (see bug https:  Compute leading comments for current node\r\n  node is a CompilationUnit\r\n  Store current node as waiting sibling for its parent\r\n  We're always ok to visit sub-levels\r\n  Look if a child node is waiting for trailing comments computing\r\n  Remove sibling if needed\r\n  do nothing special, just go down in sub-levels\r\n /*\r\n\t * Get the index of comment which contains given position.\r\n\t * If there's no matching comment, then return depends on exact parameter:\r\n\t *\t\t= 0: return -1\r\n\t *\t\t< 0: return index of the comment before the given position\r\n\t *\t\t> 0: return index of the comment after the given position\r\n\t */\r\n /*\r\n\t * Search the line number corresponding to a specific position\r\n\t * between the given line range (inclusive)\r\n\t * @param position int\r\n\t * @parem lineRange size-2 int[]\r\n\t * @return int\r\n\t */\r\n /*\r\n\t * Returns the extended end position of the given node.\r\n\t */\r\n /*\r\n\t * Initialize leading and trailing comments tables in whole nodes hierarchy of a compilation\r\n\t * unit.\r\n\t * Scanner is necessary to scan between nodes and comments and verify if there's\r\n\t * nothing else than white spaces.\r\n\t */\r\n /*not a CompilationUnit*/\r\n","EclipseSourceContext":"getOffset getSourceFile makeSourceLocation makeSourceLocation tidy removeUnnecessaryProblems accept result offset problemToRemove org.aspectj.ajdt.internal.core.builder.EclipseSourceContext  TODO AV - should we do it lazily?\r\n  FIXME may be need -2\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","LocalTypeBinding":"addInnerEmulationDependent computeUniqueKey constantPoolName createArrayType genericTypeSignature readableName shortReadableName setAsMemberType setConstantPoolName signature sourceName toString updateInnerEmulationDependents LocalTypePrefix dependents localArrayBindings enclosingCase sourceStart enclosingMethod org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LocalTypeBinding  used to cache array bindings of various dimensions for this local type\r\n  from 1.4 on, local types should not be accessed across switch case blocks (52221)\r\n  used by computeUniqueKey to uniquely identify this binding\r\n  already stored\r\n  insert $sourceStart\r\n  insert $LocalName if local\r\n  insert remaining from outer key\r\n  find the cached array binding for this dimensionCount (if any)\r\n  no matching array\r\n  Record that the type is a local member type\r\n  $NON-NLS-1$\r\n  $NON-NLS-2$   $NON-NLS-2$   System.out.println(\"Updating \" + new String(this.readableName()) + \" --> \" + new String(dependency.scope.enclosingType().readableName()));\r\n /* java/lang/Object */\r\n /*\r\n * Overriden for code assist. In this case, the constantPoolName() has not been computed yet.\r\n * Slam the source name so that the signature is syntactically correct.\r\n * (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=99686)\r\n */\r\n /*java.lang.Object,  p.X<T> */\r\n /*Object*/\r\n /* java/lang/Object */\r\n /*\r\n * Overriden for code assist. In this case, the constantPoolName() has not been computed yet.\r\n * Slam the source name so that the signature is syntactically correct.\r\n * (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=102284)\r\n */\r\n","DiscardWorkingCopyOperation":"executeOperation getWorkingCopy isReadOnly org.aspectj.org.eclipse.jdt.internal.core.DiscardWorkingCopyOperation  report a REMOVED delta\r\n  report a F_PRIMARY_WORKING_COPY change delta for a primary working copy\r\n  report removed java delta for a non-primary working copy\r\n","BindingAnnotationTypePattern":"resolveBinding verifyRuntimeRetention parameterizeWith getFormalIndex equals hashCode remapAdviceFormals write read resolveBinding verifyRuntimeRetention parameterizeWith getFormalIndex equals hashCode remapAdviceFormals write read formalIndex VERSION formalIndex VERSION org.aspectj.weaver.patterns.BindingAnnotationTypePattern org.aspectj.weaver.patterns.BindingAnnotationTypePattern  we'll deal with this next check when the type var is actually bound...\r\n  default is class visibility\r\n  rev if serialised form changed\r\n  we'll deal with this next check when the type var is actually bound...\r\n  default is class visibility\r\n  rev if serialised form changed\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.ExactAnnotationTypePattern#write(java.io.DataOutputStream)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.ExactAnnotationTypePattern#write(java.io.DataOutputStream)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","CodeSnippetEnvironment":"findType findType isPackage cleanup env context org.aspectj.org.eclipse.jdt.internal.eval.CodeSnippetEnvironment  Should never happen since we compiled this type\r\n","MemberTypeBinding":"checkSyntheticArgsAndFields constantPoolName initializeDeprecatedAnnotationTagBits toString org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MemberTypeBinding  check enclosing type\r\n  $NON-NLS-2$  /* java/lang/Object */\r\n","Keywords":"COUNT ABSTRACT ASSERT BREAK CASE CATCH CLASS CONTINUE DEFAULT DO ELSE EXTENDS FINAL FINALLY FOR IF IMPLEMENTS IMPORT INSTANCEOF INTERFACE NATIVE NEW PACKAGE PRIVATE PROTECTED PUBLIC RETURN STATIC STRICTFP SUPER SWITCH SYNCHRONIZED THIS THROW THROWS TRANSIENT TRY VOLATILE WHILE TRUE FALSE NULL org.aspectj.org.eclipse.jdt.internal.codeassist.impl.Keywords  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","TerminalTokens":"TokenNameWHITESPACE TokenNameCOMMENT_LINE TokenNameCOMMENT_BLOCK TokenNameCOMMENT_JAVADOC TokenNameIdentifier TokenNameabstract TokenNameassert TokenNameboolean TokenNamebreak TokenNamebyte TokenNamecase TokenNamecatch TokenNamechar TokenNameclass TokenNamecontinue TokenNameconst TokenNamedefault TokenNamedo TokenNamedouble TokenNameelse TokenNameenum TokenNameextends TokenNamefalse TokenNamefinal TokenNamefinally TokenNamefloat TokenNamefor TokenNamegoto TokenNameif TokenNameimplements TokenNameimport TokenNameinstanceof TokenNameint TokenNameinterface TokenNamelong TokenNamenative TokenNamenew TokenNamenull TokenNamepackage TokenNameprivate TokenNameprotected TokenNamepublic TokenNamereturn TokenNameshort TokenNamestatic TokenNamestrictfp TokenNamesuper TokenNameswitch TokenNamesynchronized TokenNamethis TokenNamethrow TokenNamethrows TokenNametransient TokenNametrue TokenNametry TokenNamevoid TokenNamevolatile TokenNamewhile TokenNameaspect TokenNamepointcut TokenNamearound TokenNamebefore TokenNameafter TokenNamedeclare TokenNameprivileged TokenNameIntegerLiteral TokenNameLongLiteral TokenNameFloatingPointLiteral TokenNameDoubleLiteral TokenNameCharacterLiteral TokenNameStringLiteral TokenNamePLUS_PLUS TokenNameMINUS_MINUS TokenNameEQUAL_EQUAL TokenNameLESS_EQUAL TokenNameGREATER_EQUAL TokenNameNOT_EQUAL TokenNameLEFT_SHIFT TokenNameRIGHT_SHIFT TokenNameUNSIGNED_RIGHT_SHIFT TokenNamePLUS_EQUAL TokenNameMINUS_EQUAL TokenNameMULTIPLY_EQUAL TokenNameDIVIDE_EQUAL TokenNameAND_EQUAL TokenNameOR_EQUAL TokenNameXOR_EQUAL TokenNameREMAINDER_EQUAL TokenNameLEFT_SHIFT_EQUAL TokenNameRIGHT_SHIFT_EQUAL TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL TokenNameOR_OR TokenNameAND_AND TokenNamePLUS TokenNameMINUS TokenNameNOT TokenNameREMAINDER TokenNameXOR TokenNameAND TokenNameMULTIPLY TokenNameOR TokenNameTWIDDLE TokenNameDIVIDE TokenNameGREATER TokenNameLESS TokenNameLPAREN TokenNameRPAREN TokenNameLBRACE TokenNameRBRACE TokenNameLBRACKET TokenNameRBRACKET TokenNameSEMICOLON TokenNameQUESTION TokenNameCOLON TokenNameCOMMA TokenNameDOT TokenNameEQUAL TokenNameAT TokenNameELLIPSIS TokenNameEOF TokenNameERROR org.aspectj.org.eclipse.jdt.internal.compiler.parser.TerminalTokens  special tokens not part of grammar - not autogenerated\r\n","JavaCorePreferenceModifyListener":"preApply cleanJavaCore isJavaProjectAccessible PREFIX_LENGTH javaModel org.aspectj.org.eclipse.jdt.internal.core.JavaCorePreferenceModifyListener /* (non-Javadoc)\r\n\t * @see org.eclipse.core.runtime.preferences.PreferenceModifyListener#preApply(org.eclipse.core.runtime.preferences.IEclipsePreferences)\r\n\t */\r\n","BinaryExpressionFragmentBuilder":"addRealFragment addSmallFragment buildFragments fragments operators realFragmentsSize visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit size fragmentsList operatorsList realFragmentsSize org.aspectj.org.eclipse.jdt.internal.formatter.BinaryExpressionFragmentBuilder  keep implementation in sync with BinaryExpression#resolveType\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference, org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BlockScope)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedThisReference, org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BlockScope)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.internal.compiler.ast.SuperReference, org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BlockScope)\r\n\t */\r\n","FieldDeclaration":"propertyDescriptors internalStructuralPropertiesForType internalGetSetIntProperty internalGetSetChildProperty internalGetChildListProperty internalJavadocProperty internalModifiersProperty internalModifiers2Property getNodeType0 clone0 subtreeMatch0 accept0 getType setType fragments memSize treeSize analyseCode generateCode getKind isStatic printStatement resolve traverse JAVADOC_PROPERTY MODIFIERS_PROPERTY MODIFIERS2_PROPERTY TYPE_PROPERTY FRAGMENTS_PROPERTY PROPERTY_DESCRIPTORS_2_0 PROPERTY_DESCRIPTORS_3_0 baseType variableDeclarationFragments binding javadoc endPart1Position endPart2Position org.aspectj.org.eclipse.jdt.core.dom.FieldDeclaration org.aspectj.org.eclipse.jdt.internal.compiler.ast.FieldDeclaration  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  the sourceStart and the sourceEnd is ONLY on  the name\r\n  cannot define static non-constant field inside nested class\r\n  recorded inside the field itself).\r\n  non-static field, need receiver\r\n  generate initialization value\r\n  store into field\r\n  --------------------------------------------------------\r\n  thus must lookup separately in super type and outer context\r\n  keep checking outer scenario\r\n  keep checking outer scenario\r\n  keep checking outer scenario\r\n  collision with supertype field\r\n  already found a matching field\r\n  from outer scope. Subsequent static contexts are detected for free.\r\n  collision with outer field or local variable\r\n  update binding for type reference\r\n  check @Deprecated annotation presence\r\n  break dead-lock cycles by forcing constant to NotAConstant\r\n  needed in case of generic method invocation\r\n  must call before computeConversion() and typeMismatchError()\r\n  narrowing then boxing ?\r\n  autoboxing\r\n  cast from constant actual type to variable type\r\n  check for assignment with no effect\r\n  the resolution of the initialization hasn't been done\r\n  Resolve Javadoc comment if one is present\r\n /*private*/\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t * @since 3.0\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /*\r\n\t\t\tif (classScope != null) {\r\n\t\t\t\tthis.javadoc.resolve(classScope);\r\n\t\t\t}\r\n\t\t\t*/\r\n","AntAdapterMessages":"getString getString BUNDLE_NAME RESOURCE_BUNDLE org.aspectj.org.eclipse.jdt.internal.antadapter.AntAdapterMessages  $NON-NLS-1$\r\n  $NON-NLS-1$","DefaultCodeFormatterOptions":"getDefaultSettings getEclipseDefaultSettings getJavaConventionsSettings getAlignment getMap set setDeprecatedOptions setDefaultSettings setEclipseDefaultSettings setJavaConventionsSettings TAB SPACE MIXED alignment_for_arguments_in_allocation_expression alignment_for_arguments_in_enum_constant alignment_for_arguments_in_explicit_constructor_call alignment_for_arguments_in_method_invocation alignment_for_arguments_in_qualified_allocation_expression alignment_for_assignment alignment_for_binary_expression alignment_for_compact_if alignment_for_conditional_expression alignment_for_enum_constants alignment_for_expressions_in_array_initializer alignment_for_multiple_fields alignment_for_parameters_in_constructor_declaration alignment_for_parameters_in_method_declaration alignment_for_selector_in_method_invocation alignment_for_superclass_in_type_declaration alignment_for_superinterfaces_in_enum_declaration alignment_for_superinterfaces_in_type_declaration alignment_for_throws_clause_in_constructor_declaration alignment_for_throws_clause_in_method_declaration align_type_members_on_columns brace_position_for_annotation_type_declaration brace_position_for_anonymous_type_declaration brace_position_for_array_initializer brace_position_for_block brace_position_for_block_in_case brace_position_for_constructor_declaration brace_position_for_enum_constant brace_position_for_enum_declaration brace_position_for_method_declaration brace_position_for_type_declaration brace_position_for_switch continuation_indentation continuation_indentation_for_array_initializer blank_lines_after_imports blank_lines_after_package blank_lines_before_field blank_lines_before_first_class_body_declaration blank_lines_before_imports blank_lines_before_member_type blank_lines_before_method blank_lines_before_new_chunk blank_lines_before_package blank_lines_between_import_groups blank_lines_between_type_declarations blank_lines_at_beginning_of_method_body comment_clear_blank_lines_in_javadoc_comment comment_clear_blank_lines_in_block_comment comment_format_javadoc_comment comment_format_line_comment comment_format_block_comment comment_format_header comment_format_html comment_format_source comment_indent_parameter_description comment_indent_root_tags comment_insert_empty_line_before_root_tags comment_insert_new_line_for_parameter comment_line_length indent_statements_compare_to_block indent_statements_compare_to_body indent_body_declarations_compare_to_annotation_declaration_header indent_body_declarations_compare_to_enum_constant_header indent_body_declarations_compare_to_enum_declaration_header indent_body_declarations_compare_to_type_header indent_breaks_compare_to_cases indent_empty_lines indent_switchstatements_compare_to_cases indent_switchstatements_compare_to_switch indentation_size insert_new_line_after_annotation insert_new_line_after_opening_brace_in_array_initializer insert_new_line_at_end_of_file_if_missing insert_new_line_before_catch_in_try_statement insert_new_line_before_closing_brace_in_array_initializer insert_new_line_before_else_in_if_statement insert_new_line_before_finally_in_try_statement insert_new_line_before_while_in_do_statement insert_new_line_in_empty_anonymous_type_declaration insert_new_line_in_empty_block insert_new_line_in_empty_annotation_declaration insert_new_line_in_empty_enum_constant insert_new_line_in_empty_enum_declaration insert_new_line_in_empty_method_body insert_new_line_in_empty_type_declaration insert_space_after_and_in_type_parameter insert_space_after_assignment_operator insert_space_after_at_in_annotation insert_space_after_at_in_annotation_type_declaration insert_space_after_binary_operator insert_space_after_closing_angle_bracket_in_type_arguments insert_space_after_closing_angle_bracket_in_type_parameters insert_space_after_closing_paren_in_cast insert_space_after_closing_brace_in_block insert_space_after_colon_in_assert insert_space_after_colon_in_case insert_space_after_colon_in_conditional insert_space_after_colon_in_for insert_space_after_colon_in_labeled_statement insert_space_after_comma_in_allocation_expression insert_space_after_comma_in_annotation insert_space_after_comma_in_array_initializer insert_space_after_comma_in_constructor_declaration_parameters insert_space_after_comma_in_constructor_declaration_throws insert_space_after_comma_in_enum_constant_arguments insert_space_after_comma_in_enum_declarations insert_space_after_comma_in_explicit_constructor_call_arguments insert_space_after_comma_in_for_increments insert_space_after_comma_in_for_inits insert_space_after_comma_in_method_invocation_arguments insert_space_after_comma_in_method_declaration_parameters insert_space_after_comma_in_method_declaration_throws insert_space_after_comma_in_multiple_field_declarations insert_space_after_comma_in_multiple_local_declarations insert_space_after_comma_in_parameterized_type_reference insert_space_after_comma_in_superinterfaces insert_space_after_comma_in_type_arguments insert_space_after_comma_in_type_parameters insert_space_after_ellipsis insert_space_after_opening_angle_bracket_in_parameterized_type_reference insert_space_after_opening_angle_bracket_in_type_arguments insert_space_after_opening_angle_bracket_in_type_parameters insert_space_after_opening_bracket_in_array_allocation_expression insert_space_after_opening_bracket_in_array_reference insert_space_after_opening_brace_in_array_initializer insert_space_after_opening_paren_in_annotation insert_space_after_opening_paren_in_cast insert_space_after_opening_paren_in_catch insert_space_after_opening_paren_in_constructor_declaration insert_space_after_opening_paren_in_enum_constant insert_space_after_opening_paren_in_for insert_space_after_opening_paren_in_if insert_space_after_opening_paren_in_method_declaration insert_space_after_opening_paren_in_method_invocation insert_space_after_opening_paren_in_parenthesized_expression insert_space_after_opening_paren_in_switch insert_space_after_opening_paren_in_synchronized insert_space_after_opening_paren_in_while insert_space_after_postfix_operator insert_space_after_prefix_operator insert_space_after_question_in_conditional insert_space_after_question_in_wilcard insert_space_after_semicolon_in_for insert_space_after_unary_operator insert_space_before_and_in_type_parameter insert_space_before_at_in_annotation_type_declaration insert_space_before_assignment_operator insert_space_before_binary_operator insert_space_before_closing_angle_bracket_in_parameterized_type_reference insert_space_before_closing_angle_bracket_in_type_arguments insert_space_before_closing_angle_bracket_in_type_parameters insert_space_before_closing_brace_in_array_initializer insert_space_before_closing_bracket_in_array_allocation_expression insert_space_before_closing_bracket_in_array_reference insert_space_before_closing_paren_in_annotation insert_space_before_closing_paren_in_cast insert_space_before_closing_paren_in_catch insert_space_before_closing_paren_in_constructor_declaration insert_space_before_closing_paren_in_enum_constant insert_space_before_closing_paren_in_for insert_space_before_closing_paren_in_if insert_space_before_closing_paren_in_method_declaration insert_space_before_closing_paren_in_method_invocation insert_space_before_closing_paren_in_parenthesized_expression insert_space_before_closing_paren_in_switch insert_space_before_closing_paren_in_synchronized insert_space_before_closing_paren_in_while insert_space_before_colon_in_assert insert_space_before_colon_in_case insert_space_before_colon_in_conditional insert_space_before_colon_in_default insert_space_before_colon_in_for insert_space_before_colon_in_labeled_statement insert_space_before_comma_in_allocation_expression insert_space_before_comma_in_annotation insert_space_before_comma_in_array_initializer insert_space_before_comma_in_constructor_declaration_parameters insert_space_before_comma_in_constructor_declaration_throws insert_space_before_comma_in_enum_constant_arguments insert_space_before_comma_in_enum_declarations insert_space_before_comma_in_explicit_constructor_call_arguments insert_space_before_comma_in_for_increments insert_space_before_comma_in_for_inits insert_space_before_comma_in_method_invocation_arguments insert_space_before_comma_in_method_declaration_parameters insert_space_before_comma_in_method_declaration_throws insert_space_before_comma_in_multiple_field_declarations insert_space_before_comma_in_multiple_local_declarations insert_space_before_comma_in_parameterized_type_reference insert_space_before_comma_in_superinterfaces insert_space_before_comma_in_type_arguments insert_space_before_comma_in_type_parameters insert_space_before_ellipsis insert_space_before_parenthesized_expression_in_return insert_space_before_parenthesized_expression_in_throw insert_space_before_question_in_wilcard insert_space_before_opening_angle_bracket_in_parameterized_type_reference insert_space_before_opening_angle_bracket_in_type_arguments insert_space_before_opening_angle_bracket_in_type_parameters insert_space_before_opening_brace_in_annotation_type_declaration insert_space_before_opening_brace_in_anonymous_type_declaration insert_space_before_opening_brace_in_array_initializer insert_space_before_opening_brace_in_block insert_space_before_opening_brace_in_constructor_declaration insert_space_before_opening_brace_in_enum_constant insert_space_before_opening_brace_in_enum_declaration insert_space_before_opening_brace_in_method_declaration insert_space_before_opening_brace_in_type_declaration insert_space_before_opening_bracket_in_array_allocation_expression insert_space_before_opening_bracket_in_array_reference insert_space_before_opening_bracket_in_array_type_reference insert_space_before_opening_paren_in_annotation insert_space_before_opening_paren_in_annotation_type_member_declaration insert_space_before_opening_paren_in_catch insert_space_before_opening_paren_in_constructor_declaration insert_space_before_opening_paren_in_enum_constant insert_space_before_opening_paren_in_for insert_space_before_opening_paren_in_if insert_space_before_opening_paren_in_method_invocation insert_space_before_opening_paren_in_method_declaration insert_space_before_opening_paren_in_switch insert_space_before_opening_brace_in_switch insert_space_before_opening_paren_in_synchronized insert_space_before_opening_paren_in_parenthesized_expression insert_space_before_opening_paren_in_while insert_space_before_postfix_operator insert_space_before_prefix_operator insert_space_before_question_in_conditional insert_space_before_semicolon insert_space_before_semicolon_in_for insert_space_before_unary_operator insert_space_between_brackets_in_array_type_reference insert_space_between_empty_braces_in_array_initializer insert_space_between_empty_brackets_in_array_allocation_expression insert_space_between_empty_parens_in_annotation_type_member_declaration insert_space_between_empty_parens_in_constructor_declaration insert_space_between_empty_parens_in_enum_constant insert_space_between_empty_parens_in_method_declaration insert_space_between_empty_parens_in_method_invocation compact_else_if keep_guardian_clause_on_one_line keep_else_statement_on_same_line keep_empty_array_initializer_on_one_line keep_simple_if_on_one_line keep_then_statement_on_same_line never_indent_block_comments_on_first_column never_indent_line_comments_on_first_column number_of_empty_lines_to_preserve put_empty_statement_on_new_line tab_size filling_space page_width tab_char use_tabs_only_for_leading_indentations wrap_before_binary_operator initial_indentation_level line_separator org.aspectj.org.eclipse.jdt.internal.formatter.DefaultCodeFormatterOptions  backward compatibility code\r\n  see https:","ReflectionVar":"createThisVar createTargetVar createArgsVar createThisAnnotationVar createTargetAnnotationVar createArgsAnnotationVar createWithinAnnotationVar createWithinCodeAnnotationVar createAtAnnotationVar getBindingAtJoinPoint getBindingAtJoinPoint createThisVar createTargetVar createArgsVar createThisAnnotationVar createTargetAnnotationVar createArgsAnnotationVar createWithinAnnotationVar createWithinCodeAnnotationVar createAtAnnotationVar getBindingAtJoinPoint getBindingAtJoinPoint THIS_VAR TARGET_VAR ARGS_VAR AT_THIS_VAR AT_TARGET_VAR AT_ARGS_VAR AT_WITHIN_VAR AT_WITHINCODE_VAR AT_ANNOTATION_VAR annotationFinder argsIndex varType THIS_VAR TARGET_VAR ARGS_VAR AT_THIS_VAR AT_TARGET_VAR AT_ARGS_VAR AT_WITHIN_VAR AT_WITHINCODE_VAR AT_ANNOTATION_VAR annotationFinder argsIndex varType org.aspectj.weaver.reflect.ReflectionVar org.aspectj.weaver.reflect.ReflectionVar /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","DefaultASTVisitor":"endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisitNode visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visitNode org.aspectj.org.eclipse.jdt.core.dom.DefaultASTVisitor  do not visit Javadoc tags by default. Use constructor with boolean to enable.\r\n /* since 3.0 */\r\n /* since 3.0 */\r\n","JavaCompilerWarningsOptionsPanel":"loadOptions saveOptions jbInit createWarningContents createWarningsEntry createBorders addBordersToPanel ignoreOrWarning serialVersionUID parentPanel warningsEtchedBorder warningsTitleBorder warningsCompoundBorder warningsPanel warningsBox javaBuildOptions warningComboBoxes org.aspectj.ajde.ui.javaoptions.JavaCompilerWarningsOptionsPanel /*String --> JComboBox*/\r\n","HelperInterfaceBinding":"getFileName getTypeX addMethod fields methods constantPoolName generateClass generateMethod superInterfaces typeX enclosingType methods org.aspectj.ajdt.internal.compiler.lookup.HelperInterfaceBinding  this.fileName = scope.referenceCompilationUnit().getFileName();\r\n  classFile.addFieldInfos();\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","JavadocImplicitTypeReference":"copyDims getTypeBinding getLastToken getTypeName isThis internalResolveType reportInvalidType reportDeprecatedType resolveType resolveType traverse traverse printExpression token org.aspectj.org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference  handle the error here\r\n  is a shared type reference which was already resolved\r\n  already reported error\r\n  detected cycle while resolving hierarchy\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference#copyDims(int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference#getTypeBinding(org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference#getTypeName()\r\n\t */\r\n /*\r\n\t * Resolves type on a Block, Class or CompilationUnit scope.\r\n\t * We need to modify resoling behavior to avoid raw type creation.\r\n\t */\r\n","ClassInstanceCreation":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty internalGetChildListProperty getNodeType0 clone0 subtreeMatch0 accept0 getExpression setExpression typeArguments getName internalGetName setName internalSetName getType setType arguments getAnonymousClassDeclaration setAnonymousClassDeclaration resolveConstructorBinding memSize treeSize TYPE_ARGUMENTS_PROPERTY EXPRESSION_PROPERTY NAME_PROPERTY TYPE_PROPERTY ARGUMENTS_PROPERTY ANONYMOUS_CLASS_DECLARATION_PROPERTY PROPERTY_DESCRIPTORS_2_0 PROPERTY_DESCRIPTORS_3_0 optionalExpression typeArguments typeName type arguments optionalAnonymousClassDeclaration org.aspectj.org.eclipse.jdt.core.dom.ClassInstanceCreation  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  must check cycles\r\n  more efficient than just calling unsupportedIn2() to check\r\n  lazy init must be thread-safe for readers\r\n  lazy init must be thread-safe for readers\r\n  treat Code as free\r\n  n.b. typeName == null for ast.API_LEVEL >= JLS3\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t * @since 3.0\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /*package*/\r\n /*package*/\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","BcelAdvice":"shrink concretize parameterizeWith match specializeOn canInline implementOn removeUnnecessaryProblems collectCheckedExceptions getThrownExceptions mustCheckExceptions hasDynamicTests getAdviceInstructions getAdviceArgSetup getNonTestAdviceInstructions getOriginalSignature getTestInstructions compareTo getExposedStateAsBcelVars suppressLintWarnings clearLintSuppressions shrink concretize parameterizeWith match specializeOn canInline implementOn removeUnnecessaryProblems collectCheckedExceptions getThrownExceptions mustCheckExceptions hasDynamicTests getAdviceInstructions getAdviceArgSetup getNonTestAdviceInstructions getOriginalSignature getTestInstructions compareTo getExposedStateAsBcelVars suppressLintWarnings clearLintSuppressions pointcutTest exposedState thrownExceptions pointcutTest exposedState thrownExceptions org.aspectj.weaver.bcel.BcelAdvice org.aspectj.weaver.bcel.BcelAdvice  (signature==null?null:signature.slimline\r\n  ()));\r\n  ,bm.getExceptions(),bm.getBackingGenericMember()\r\n  );\r\n  if it isnt around advice or it is but inlining is turned off then shrink it to a ResolvedMemberImpl\r\n  !!! interaction with unit tests\r\n  ... only want to record it once against the advice(bug 133117)\r\n  allows for around advice where the return value is a type variable (see pr115250)\r\n  XXX this case is just here for supporting lazy test code\r\n  XXX this case is just here for supporting lazy test code\r\n  so that the joinpoint is primed for weaving\r\n  make sure thisJoinPoint parameters are initialized\r\n  collect up the problematic advice\r\n  XXX this guard seems to only be needed for bad test cases\r\n  System.err.println(\"isWoven? \" + ((BcelObjectType)concreteAspect).getLazyClassGen().getWeaverState());\r\n  the enclosing shadow too\r\n  at the moment it only deals with 'declared exception is not thrown'\r\n  PTWIMPL Entry to ptw is the static initialization of a type that matched the ptw type pattern\r\n  One solution would be to flag @AJ aspect with an annotation as \"prepared\" and query that one.\r\n  null tests for test harness\r\n  ??? can we really lump in Around here, how does this interact with Throwable\r\n  || pointcutTest == Literal.NO_TEST);\r\n  only call me after prepare has been called\r\n  after throwing does this just by the exception mechanism.\r\n  } else {   }\r\n  in the stack trace\r\n  pr121385\r\n  Erroneous vars have already had error msgs reported!\r\n  try to avoid verify error and pass in null\r\n  try to avoid verify error and pass in null\r\n  make sure we are in an around, since we deal with the closure, not the arg here\r\n  il.append(closureInstantiation);\r\n  if not @AJ aspect, go on with the regular binding handling\r\n  org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration\r\n  in the middle of the formal bindings but at the end, in a rock solid ordering\r\n  System.err.println(\"test: \" + pointcutTest);\r\n  System.err.println(\"compareTo: \" + this + \", \" + o);\r\n  System.err.println(\"      \" + o + \" innerCflowEntries \" + o.innerCflowEntries);\r\n  System.out.println(\"compare: \" + this + \" with \" + other);\r\n  the closure instantiation has the same mapping as the extracted method from wich it is called\r\n  ATAJ aspect\r\n  System.out.println(\"vars: \" + Arrays.asList(exposedState.vars));\r\n  (BcelVar[]) exposedState.vars;\r\n  (signature==null?null:signature.slimline\r\n  ()));\r\n  ,bm.getExceptions(),bm.getBackingGenericMember()\r\n  );\r\n  if it isnt around advice or it is but inlining is turned off then shrink it to a ResolvedMemberImpl\r\n  !!! interaction with unit tests\r\n  ... only want to record it once against the advice(bug 133117)\r\n  allows for around advice where the return value is a type variable (see pr115250)\r\n  XXX this case is just here for supporting lazy test code\r\n  XXX this case is just here for supporting lazy test code\r\n  so that the joinpoint is primed for weaving\r\n  make sure thisJoinPoint parameters are initialized\r\n  collect up the problematic advice\r\n  XXX this guard seems to only be needed for bad test cases\r\n  System.err.println(\"isWoven? \" + ((BcelObjectType)concreteAspect).getLazyClassGen().getWeaverState());\r\n  the enclosing shadow too\r\n  at the moment it only deals with 'declared exception is not thrown'\r\n  PTWIMPL Entry to ptw is the static initialization of a type that matched the ptw type pattern\r\n  One solution would be to flag @AJ aspect with an annotation as \"prepared\" and query that one.\r\n  null tests for test harness\r\n  ??? can we really lump in Around here, how does this interact with Throwable\r\n  || pointcutTest == Literal.NO_TEST);\r\n  only call me after prepare has been called\r\n  after throwing does this just by the exception mechanism.\r\n  } else {   }\r\n  in the stack trace\r\n  pr121385\r\n  Erroneous vars have already had error msgs reported!\r\n  try to avoid verify error and pass in null\r\n  try to avoid verify error and pass in null\r\n  make sure we are in an around, since we deal with the closure, not the arg here\r\n  il.append(closureInstantiation);\r\n  if not @AJ aspect, go on with the regular binding handling\r\n  org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration\r\n  in the middle of the formal bindings but at the end, in a rock solid ordering\r\n  System.err.println(\"test: \" + pointcutTest);\r\n  System.err.println(\"compareTo: \" + this + \", \" + o);\r\n  System.err.println(\"      \" + o + \" innerCflowEntries \" + o.innerCflowEntries);\r\n  System.out.println(\"compare: \" + this + \" with \" + other);\r\n  the closure instantiation has the same mapping as the extracted method from wich it is called\r\n  ATAJ aspect\r\n  System.out.println(\"vars: \" + Arrays.asList(exposedState.vars));\r\n  (BcelVar[]) exposedState.vars;\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved.\r\n * This program and the accompanying materials are made available\r\n * under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *     PARC     initial implementation\r\n *     Alexandre Vasseur    support for @AJ aspects\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved.\r\n * This program and the accompanying materials are made available\r\n * under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *     PARC     initial implementation\r\n *     Alexandre Vasseur    support for @AJ aspects\r\n * ******************************************************************/\r\n","SingleCommentLine":"adapt formatLowerBorder formatUpperBorder getContentPrefix getEndingPrefix getStartingPrefix scanLine tokenizeLine SINGLE_COMMENT_PREFIX NLS_TAG_PREFIX fLocaleSequence org.aspectj.org.eclipse.jdt.internal.formatter.comment.SingleCommentLine  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentLine#adapt(org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentLine)\r\n\t */\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentLine#formatLowerBorder(org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentRange, java.lang.String, int)\r\n\t */\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentLine#formatUpperBorder(org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentRange, java.lang.String, int)\r\n\t */\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentLine#getContentPrefix()\r\n\t */\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentLine#getEndingPrefix()\r\n\t */\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentLine#getStartingPrefix()\r\n\t */\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentLine#scanLine(int)\r\n\t */\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentLine#tokenizeLine(int)\r\n\t */\r\n","SimpleDOMBuilder":"acceptProblem acceptImport acceptPackage createCompilationUnit createCompilationUnit enterAbstractMethod enterConstructor enterField enterInitializer enterMethod enterType exitConstructor exitField exitInitializer exitMember exitMethod exitType getParser org.aspectj.org.eclipse.jdt.internal.core.jdom.SimpleDOMBuilder  $NON-NLS-1$\r\n  will be fixed up on exit\r\n  will be fixed in the exit\r\n  TODO (jerome) should pass in kind\r\n /* see 1FVIIQZ */\r\n /*don't report local declarations*/\r\n","NamePattern":"matches outOfStar inStar matches toString equals hashCode write read maybeGetSimpleName isAny accept matches outOfStar inStar matches toString equals hashCode write read maybeGetSimpleName isAny accept pattern starCount hashcode ELLIPSIS ANY pattern starCount hashcode ELLIPSIS ANY org.aspectj.weaver.patterns.NamePattern org.aspectj.weaver.patterns.NamePattern  System.err.print(\"match(\\\"\" + pattern + \"\\\", \\\"\" + target + \"\\\") -> \");\r\n  System.err.println(b);\r\n  just '*' matches anything\r\n  invariant: if (tLeft > 0) then (ti < target.length && pi < pattern.length)\r\n  invariant: pLeft > 0, so we know we'll run out of stars and find a real char in pattern\r\n  invariant: if (tLeft > 0) then (ti < target.length)\r\n  System.err.print(\"match(\\\"\" + pattern + \"\\\", \\\"\" + target + \"\\\") -> \");\r\n  System.err.println(b);\r\n  just '*' matches anything\r\n  invariant: if (tLeft > 0) then (ti < target.length && pi < pattern.length)\r\n  invariant: pLeft > 0, so we know we'll run out of stars and find a real char in pattern\r\n  invariant: if (tLeft > 0) then (ti < target.length)\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","ParameterizedGenericMethodBinding":"computeCompatibleMethod inferFromArgumentTypes resolveSubstituteConstraints computeUniqueKey environment hasSubstitutedParameters hasSubstitutedReturnType inferFromExpectedType isRawSubstitution substitute tiebreakMethod alwaysNeedsAccessMethod getAccessMethod typeArguments environment inferredReturnType wasInferred isRaw tiebreakMethod isUnchecked org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding  only set to true for instances resulting from method invocation inferrence\r\n  set to true for method behaving as raw for substitution purpose\r\n  transient flag set during inference (warning: bindings are shared, so flag cannot be trusted beyond)\r\n  incompatible due to wrong arity\r\n  explicit type arguments got supplied\r\n  initializes the map of substitutes (var --> type[][]{ equal, extends, super}\r\n  if message invocation has expected type\r\n  assume Object by default\r\n  record it was explicit from context, as opposed to assumed by default (see below)\r\n  15.12.2.8 - inferring unresolved type arguments\r\n  incompatible due to bound check\r\n  append offending substitute and typeVariable\r\n  tolerate unchecked bounds\r\n  bounds check\r\n  impossible substitution\r\n  impossible substitution\r\n  process mandatory arguments\r\n  last arg type - as is ?\r\n  will remove one dim\r\n  will remove one dim\r\n  eliminate one array dimension\r\n  impossible substitution\r\n  process optional arguments\r\n  raw generic method inferred\r\n  impossible substitution\r\n  apply inferred variable substitutions - replacing unresolved variable with original ones in param method\r\n  clone to replace null with original variable in param method\r\n  already inferred previously\r\n  try to find a better different match if any in subsequent equal candidates\r\n  }\r\n  pick first match, applicability check will rule out invalid scenario where others were present\r\n  check Tj=U constraints\r\n  already inferred previously\r\n  incompatible\r\n  check Tj>:U constraints\r\n  already inferred previously\r\n  TODO (philippe) need to improve\r\n  TypeBinding mostSpecificSubstitute = scope.greaterLowerBound(bounds);\r\n  check Tj<:U constraints\r\n  no substitution if original was static\r\n  no substitution if original was static\r\n  error case where exception type variable would have been substituted by a non-reference type (207573)\r\n  no substitution if original was static\r\n  not resulting from method invocation inferrence\r\n  error case where exception type variable would have been substituted by a non-reference type (207573)\r\n  resulting from method invocation inferrence\r\n  generic parameterized method can represent either an invocation or a raw generic method\r\n  immediate parent (could be a parameterized method)\r\n  impossible substitution\r\n  infer from expected return type\r\n  impossible substitution\r\n  impossible substitution\r\n  invocation: test1(new Vector<String>())    will infer: S=Vector<String>  and with code below: E=String\r\n  impossible substitution\r\n  impossible substitution\r\n  JLS 15.12.2.8 claims reverse inference shouldn't occur, however it improves inference\r\n  infer from bounds of type parameters\r\n  raw generic method inferred\r\n  incompatible\r\n  remaining unresolved variable are considered to be Object (or their bound actually)\r\n  this.typeArguments = substitutes; - no op since side effects got performed during #resolveSubstituteConstraints\r\n  to properly substitute a remaining unresolved variable which also appear in a formal bound\r\n  adjust method types to reflect latest inference\r\n  error case where exception type variable would have been substituted by a non-reference type (207573)\r\n  check this variable can be substituted given parameterized type\r\n  delegate to the original method since it might be an intertypemethodbinding ...\r\n /*\r\n\t * parameterizedDeclaringUniqueKey dot selector originalMethodGenericSignature percent typeArguments\r\n\t * p.X<U> { <T> void bar(T t, U u) { new X<String>().bar(this, \"\") } } --> Lp/X<Ljava/lang/String;>;.bar<T:Ljava/lang/Object;>(TT;Ljava/lang/String;)V%<Lp/X;>\r\n\t */\r\n","BindingAnnotationFieldTypePattern":"resolveBinding parameterizeWith getFormalIndex equals hashCode remapAdviceFormals write read matches getFormalType resolveBinding parameterizeWith getFormalIndex equals hashCode remapAdviceFormals write read matches getFormalType formalIndex formalType formalIndex formalType org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern org.aspectj.weaver.patterns.BindingAnnotationFieldTypePattern  In this construct the formal type differs from the annotation type\r\n  the type of the field within the annotation\r\n  the annotation type\r\n  \r\n  \r\n  In this construct the formal type differs from the annotation type\r\n  the type of the field within the annotation\r\n  the annotation type\r\n  \r\n  \r\n /* *******************************************************************\r\n * Copyright (c) 2008 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2008 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement     initial implementation \r\n * ******************************************************************/\r\n","BufferFactoryWrapper":"create createBuffer equals hashCode toString factory org.aspectj.org.eclipse.jdt.internal.core.BufferFactoryWrapper  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.WorkingCopyOwner#createBuffer(org.aspectj.org.eclipse.jdt.core.ICompilationUnit)\r\n\t */\r\n","DOMFactory":"createCompilationUnit createCompilationUnit createCompilationUnit createField createField createImport createImport createInitializer createInitializer createMethod createMethod createPackage createPackage createType createClass createInterface createType lineSeparator org.aspectj.org.eclipse.jdt.core.jdom.DOMFactory  constructor is explicitly API\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-2$   $NON-NLS-2$   $NON-NLS-2$   $NON-NLS-2$  /* (non-Javadoc)\r\n * Method declared on IDOMFactory.\r\n */\r\n /* (non-Javadoc)\r\n * Method declared on IDOMFactory.\r\n */\r\n /* (non-Javadoc)\r\n * Method declared on IDOMFactory.\r\n */\r\n /* (non-Javadoc)\r\n * Method declared on IDOMFactory.\r\n */\r\n /* (non-Javadoc)\r\n * Method declared on IDOMFactory.\r\n */\r\n /* (non-Javadoc)\r\n * Method declared on IDOMFactory.\r\n */\r\n /* (non-Javadoc)\r\n * Method declared on IDOMFactory.\r\n */\r\n /* (non-Javadoc)\r\n * Method declared on IDOMFactory.\r\n */\r\n /* (non-Javadoc)\r\n * Method declared on IDOMFactory.\r\n */\r\n /* (non-Javadoc)\r\n * Method declared on IDOMFactory.\r\n */\r\n /* (non-Javadoc)\r\n * Method declared on IDOMFactory.\r\n */\r\n /* (non-Javadoc)\r\n * Method declared on IDOMFactory.\r\n */\r\n /* (non-Javadoc)\r\n * Method declared on IDOMFactory.\r\n */\r\n /* (non-Javadoc)\r\n * Method declared on IDOMFactory.\r\n */\r\n /* (non-Javadoc)\r\n * Method declared on IDOMFactory.\r\n */\r\n /* (non-Javadoc)\r\n * Method declared on IDOMFactory.\r\n */\r\n /* (non-Javadoc)\r\n * Method declared on IDOMFactory.\r\n */\r\n","ExpressionStatement":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getExpression setExpression memSize treeSize EXPRESSION_PROPERTY PROPERTY_DESCRIPTORS expression org.aspectj.org.eclipse.jdt.core.dom.ExpressionStatement  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  lazy init must be thread-safe for readers\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","SelectionOnPackageReference":"print org.aspectj.org.eclipse.jdt.internal.codeassist.select.SelectionOnPackageReference  $NON-NLS-1$\r\n","StaticJoinPointFactory":"org.aspectj.weaver.StaticJoinPointFactory org.aspectj.weaver.StaticJoinPointFactory /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","BCException":"printStackTrace printStackTrace printStackTrace printStackTrace printStackTrace printStackTrace thrown thrown org.aspectj.weaver.BCException org.aspectj.weaver.BCException /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","ArrayInitializer":"propertyDescriptors internalStructuralPropertiesForType internalGetChildListProperty getNodeType0 clone0 subtreeMatch0 accept0 expressions memSize treeSize analyseCode generateCode printExpression resolveTypeExpecting traverse EXPRESSIONS_PROPERTY PROPERTY_DESCRIPTORS expressions expressions binding org.aspectj.org.eclipse.jdt.core.dom.ArrayInitializer org.aspectj.org.eclipse.jdt.internal.compiler.ast.ArrayInitializer  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  the type of the { , , , }\r\n  Flatten the values and compute the dimensions, by iterating in depth into nested array initializers\r\n  binding is an ArrayType, so I can just deal with the dimension\r\n  filter out initializations to default values\r\n  $NON-NLS-1$\r\n  allow new List<?>[5] - only check for generic array when no initializer, since also checked inside initializer resolution\r\n  allow new List<?>[5]\r\n  must call before computeConversion() and typeMismatchError()\r\n  Compile-time conversion required?\r\n  narrowing then boxing ?\r\n  autoboxing\r\n  infer initializer type for error reporting based on first element\r\n  fault-tolerance - resolve other expressions as well\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","IBorderAttributes":"BORDER_LOWER BORDER_UPPER org.aspectj.org.eclipse.jdt.internal.formatter.comment.IBorderAttributes","MatchLocatorParser":"createParser visit visit visit visit visit visit visit visit visit visit visit visit checkComment classInstanceCreation consumeAssignment consumeClassInstanceCreationExpressionQualifiedWithTypeArguments consumeClassInstanceCreationExpressionWithTypeArguments consumeExplicitConstructorInvocation consumeExplicitConstructorInvocationWithTypeArguments consumeFieldAccess consumeFormalParameter consumeLocalVariableDeclaration consumeMarkerAnnotation consumeMemberValuePair consumeMethodInvocationName consumeMethodInvocationNameWithTypeArguments consumeMethodInvocationPrimary consumeMethodInvocationPrimaryWithTypeArguments consumeMethodInvocationSuper consumeMethodInvocationSuperWithTypeArguments consumeNormalAnnotation consumePrimaryNoNewArray consumePrimaryNoNewArrayWithName consumeSingleMemberAnnotation consumeTypeArgument consumeTypeParameterHeader consumeUnaryExpression copyDims getTypeReference getUnspecifiedReference getUnspecifiedReferenceOptimized parseBodies parseBodies nodeSet patternLocator localDeclarationVisitor org.aspectj.org.eclipse.jdt.internal.core.search.matching.MatchLocatorParser  continue only if it has local type\r\n  continue only if it has local type;\r\n  continue only if it has local type\r\n  continue only if it has local type\r\n  continue only if it has local type\r\n  continue only if it has local type;\r\n  continue only if it has local type\r\n  continue only if it has local type\r\n  no local type for annotation type members\r\n  Search for pattern locator matches in javadoc comment parameters @param tags\r\n  Search for pattern locator matches in javadoc comment type parameters @param tags\r\n  Search for pattern locator matches in javadoc comment @throws  Search for pattern locator matches in javadoc comment @see tags\r\n  this is always a Reference\r\n  this is always a LocalDeclaration\r\n  this is always a LocalDeclaration\r\n  this is always an Annotation\r\n  this is always a MemberValuePair\r\n  this is always a MessageSend\r\n  this is always a MessageSend\r\n  this is always a MessageSend\r\n  this is always a MessageSend\r\n  this is always a MessageSend\r\n  this is always a MessageSend\r\n  this is always an Annotation\r\n  (see http:  PrimaryNoNewArray ::=  PushLPAREN Expression PushRPAREN\r\n  (see http:  this is always an Annotation\r\n  NB: Don't check container since type reference can happen anywhere\r\n  NB: Don't check container since unspecified reference can happen anywhere\r\n  NB: Don't check container since unspecified reference can happen anywhere\r\n  if not synthetic\r\n","Javadoc":"propertyDescriptors internalStructuralPropertiesForType internalGetSetObjectProperty internalGetChildListProperty getNodeType0 clone0 subtreeMatch0 accept0 getComment setComment tags memSize treeSize canBeSeen getNodeStartingAt print resolve resolve resolve resolveReference resolveParamTags resolveTypeParameterTags resolveThrowsTags verifyTypeReference traverse traverse COMMENT_PROPERTY TAGS_PROPERTY PROPERTY_DESCRIPTORS_2_0 PROPERTY_DESCRIPTORS_3_0 MINIMAL_DOC_COMMENT comment tags paramReferences paramTypeParameters exceptionReferences returnStatement seeReferences inheritedPositions invalidParameters valuePositions org.aspectj.org.eclipse.jdt.core.dom.Javadoc org.aspectj.org.eclipse.jdt.internal.compiler.ast.Javadoc  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  anything other than the default string takes space\r\n  @param\r\n  @param\r\n  @throws, @exception\r\n  @return\r\n  @see\r\n  @param\r\n  Store value tag positions\r\n  parameters array\r\n  array of invalid syntax tags parameters\r\n  type parameters array\r\n  thrown exception array\r\n  if binding is valid then look at arguments\r\n  if binding is valid then look at arguments\r\n  references array\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  @param tags\r\n  @return tags\r\n  @throws  @see tags\r\n  @value tag\r\n  get method declaration\r\n  @see tags\r\n  Resolve reference\r\n  if binding is valid then look if we have a reference to an overriden method  if binding is valid then look if we have a reference to an overriden method  see whether we can have a super reference\r\n  Look at @Override annotations\r\n  Store if a reference exists to an overriden method  @param tags\r\n  method with return should have @return tag\r\n  @return tags\r\n  @throws  @value tag\r\n  Resolve param tags with invalid syntax\r\n  Perform resolve\r\n  Verify field references\r\n  Verify whether field ref should be static or not (for @value tags)\r\n  cannot refer to method for @value tag\r\n  see bug https:  Verify type references\r\n  That's it for field references\r\n  Verify type references\r\n  cannot refer to method for @value tag\r\n  tag value\r\n  Verify type references\r\n  Verify that constructor reference are not used for @value tags\r\n  cannot refer to method for @value tag\r\n  tag value\r\n  Verify type references\r\n  Verify that message reference are not used for @value tags\r\n  (javadoc does not accept them and this is not a referenced bug or requested enhancement)\r\n  If no referenced method (field initializer for example) then report a problem for each param tag\r\n  If no param tags then report a problem for each method argument\r\n  Verify duplicated tags\r\n  Scan all @param tags\r\n  Look for undocumented arguments\r\n  Get declaration infos\r\n  If no referenced method (field initializer for example) then report a problem for each param tag\r\n  If no type variables then report a problem for each param type parameter tag\r\n  Verify duplicated tags\r\n  Scan all @param tags\r\n  Look for undocumented type parameters\r\n  Report invalid param\r\n  If no param tags then report a problem for each declaration type parameter\r\n  If no referenced method (field initializer for example) then report a problem for each throws tag\r\n  If no throws tags then report a problem for each method thrown exception\r\n  accept only valid class binding\r\n  Scan all @throws tags\r\n  flag only valid class name\r\n  Look for undocumented thrown exception\r\n  thrown exceptions subclasses are accepted\r\n  If not compatible only complain on unchecked exception\r\n  Verify additional @throws tags\r\n  flag only valid class name\r\n  reference must have enough visibility to be used\r\n  type reference must have enough visibility to be used\r\n  rebuild and store (in reverse order) compound name to handle embedded inner class\r\n  add package information\r\n  search for corresponding import\r\n  inner class single reference can only be done in same unit\r\n  when scope is not on compilation unit type, then inner class may not be visible...\r\n  member types\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /*\r\n\t * Search node with a given staring position in javadoc objects arrays.\r\n\t */\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode#print(int, java.lang.StringBuffer)\r\n\t */\r\n /*\r\n\t * Resolve type javadoc\r\n\t */\r\n /*\r\n\t * Resolve compilation unit javadoc\r\n\t */\r\n /* field declaration */\r\n /* compiler error */\r\n /*\r\n\t * Resolve method javadoc\r\n\t */\r\n /*\r\n\t * Resolve @param tags while method scope\r\n\t */\r\n /*\r\n\t * Resolve @param tags for type parameters\r\n\t */\r\n /*\r\n\t * Resolve @throws/@exception tags while method scope\r\n\t */\r\n","Instruction":"dump getName copy readInstruction consumeStack produceStack getOpcode getLength dispose equals hashCode getType getType getValue getIndex setIndex getValue isLoadInstruction isALOAD isStoreInstruction isASTORE getExceptions containsTarget updateTarget isJsrInstruction isConstantInstruction isConstantPoolInstruction isStackProducer isStackConsumer isIndexedInstruction isArrayCreationInstruction getLoadClassType isReturnInstruction isGoto isLocalVariableInstruction toString toString dump getName copy readInstruction consumeStack produceStack getOpcode getLength dispose equals hashCode getType getType getValue getIndex setIndex getValue isLoadInstruction isALOAD isStoreInstruction isASTORE getExceptions containsTarget updateTarget isJsrInstruction isConstantInstruction isConstantPoolInstruction isStackProducer isStackConsumer isIndexedInstruction isArrayCreationInstruction getLoadClassType isReturnInstruction isGoto isLocalVariableInstruction toString toString opcode opcode org.aspectj.apache.bcel.generic.Instruction org.aspectj.apache.bcel.generic.Instruction  OPTIMIZE is clone the right thing to do here? it is horrible\r\n  immutable instructions do not need copying\r\n  if it is zero, it should have been provided by an overriding implementation of getLength()\r\n  if (types[opcode]==null) throw new RuntimeException(getName()+\" is not a typed instruction\");\r\n  fixme\r\n  OPTIMIZE is clone the right thing to do here? it is horrible\r\n  immutable instructions do not need copying\r\n  if it is zero, it should have been provided by an overriding implementation of getLength()\r\n  if (types[opcode]==null) throw new RuntimeException(getName()+\" is not a typed instruction\");\r\n  fixme\r\n","IAnnotationComponentValue":"getAnnotationComponentValues getAnnotationValue getClassInfo getClassInfoIndex getConstantValue getConstantValueIndex getEnumConstantName getEnumConstantNameIndex getEnumConstantTypeName getEnumConstantTypeNameIndex getTag getValuesNumber BYTE_TAG CHAR_TAG DOUBLE_TAG FLOAT_TAG INTEGER_TAG LONG_TAG SHORT_TAG BOOLEAN_TAG STRING_TAG ENUM_TAG CLASS_TAG ANNOTATION_TAG ARRAY_TAG org.aspectj.org.eclipse.jdt.core.util.IAnnotationComponentValue","ElementNameValuePairGen":"dump getNameIndex getNameString getValue toString dump getNameIndex getNameString getValue toString nameIdx value cpool nameIdx value cpool org.aspectj.apache.bcel.classfile.annotation.ElementNameValuePairGen org.aspectj.apache.bcel.classfile.annotation.ElementNameValuePairGen  }\r\n  u2 name of the element\r\n  ConstantString cu8 = (ConstantString)cpool.getConstant(nameIdx);\r\n  }\r\n  u2 name of the element\r\n  ConstantString cu8 = (ConstantString)cpool.getConstant(nameIdx);\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement -     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement -     initial implementation \r\n * ******************************************************************/\r\n","Assignment":"toString toOperator propertyDescriptors internalStructuralPropertiesForType internalGetSetObjectProperty internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getOperator setOperator getLeftHandSide setLeftHandSide getRightHandSide setRightHandSide memSize treeSize analyseCode checkAssignment generateCode getDirectBinding getLastField nullStatus print printExpression printExpressionNoParenthesis printStatement resolveType resolveTypeExpecting traverse localVariableBinding op ASSIGN PLUS_ASSIGN MINUS_ASSIGN TIMES_ASSIGN DIVIDE_ASSIGN BIT_AND_ASSIGN BIT_OR_ASSIGN BIT_XOR_ASSIGN REMAINDER_ASSIGN LEFT_SHIFT_ASSIGN RIGHT_SHIFT_SIGNED_ASSIGN RIGHT_SHIFT_UNSIGNED_ASSIGN CODES LEFT_HAND_SIDE_PROPERTY OPERATOR_PROPERTY RIGHT_HAND_SIDE_PROPERTY PROPERTY_DESCRIPTORS assignmentOperator leftHandSide rightHandSide lhs expression org.aspectj.org.eclipse.jdt.core.dom.Assignment org.aspectj.org.eclipse.jdt.internal.compiler.ast.Assignment  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  an Assignment may occur inside a Expression - must check cycles\r\n  lazy init must be thread-safe for readers\r\n  an Assignment may occur inside a Expression - must check cycles\r\n  treat Code as free\r\n  but is build as an expression ==> the checkcast cannot fail\r\n  tag lhs as assigned\r\n  just a local variable.\r\n  the lhs is responsible to perform the implicitConversion generation for the assignment since optimized for unused local assignment.\r\n  i = i++;   i = i = ...;   return getDirectBinding(((PostfixExpression) someExpression).lhs);\r\n  no () when used as a statement\r\n  subclass redefine printExpressionNoParenthesis()\r\n  $NON-NLS-1$\r\n  no () when used as a statement\r\n  due to syntax lhs may be only a NameReference, a FieldReference or an ArrayReference\r\n  needed in case of generic method invocation\r\n  check for assignment with no effect\r\n  must call before computeConversion() and typeMismatchError()\r\n  may require to widen the rhs expression at runtime\r\n  narrowing then boxing ?\r\n  autoboxing\r\n  signal possible accidental boolean assignment (instead of using '==' operator)\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /*length pseudo field*/\r\n","IfStatement":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getExpression setExpression getThenStatement setThenStatement getElseStatement setElseStatement memSize treeSize analyseCode generateCode printStatement resolve traverse EXPRESSION_PROPERTY THEN_STATEMENT_PROPERTY ELSE_STATEMENT_PROPERTY PROPERTY_DESCRIPTORS expression thenStatement optionalElseStatement condition thenStatement elseStatement thenInitStateIndex elseInitStateIndex mergedInitStateIndex org.aspectj.org.eclipse.jdt.core.dom.IfStatement org.aspectj.org.eclipse.jdt.internal.compiler.ast.IfStatement  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  lazy init must be thread-safe for readers\r\n  for local variables table attributes\r\n  remember useful empty statement\r\n  remember useful empty statement\r\n  process the condition\r\n  process the THEN part\r\n  Save info for code gen\r\n  code gen: optimizing the jump around the ELSE part\r\n  else of an else-if\r\n  signal else clause unnecessarily nested, tolerate else-if code pattern\r\n  Save info for code gen\r\n  process the ELSE part\r\n  merge THEN & ELSE initializations\r\n  optimizing the then  generate condition side-effects\r\n  generate boolean condition\r\n  May loose some local variable initializations : affecting the local variable attributes\r\n  generate boolean condition\r\n  May loose some local variable initializations : affecting the local variable attributes\r\n  generate then statement\r\n  goto is tagged as part of the thenAction block\r\n  May loose some local variable initializations : affecting the local variable attributes\r\n  jump around the else statement\r\n  May loose some local variable initializations : affecting the local variable attributes\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","Alignment":"checkChunkStart checkColumn couldBreak getAlignment performFragmentEffect reset toFragmentsString toString update isWrapped name enclosing location fragmentIndex fragmentCount fragmentIndentations needRedoColumnAlignment chunkStartIndex chunkKind originalIndentationLevel breakIndentationLevel shiftBreakIndentationLevel fragmentBreaks wasSplit scribe M_FORCE M_INDENT_ON_COLUMN M_INDENT_BY_ONE M_COMPACT_SPLIT M_COMPACT_FIRST_BREAK_SPLIT M_ONE_PER_LINE_SPLIT M_NEXT_SHIFTED_SPLIT M_NEXT_PER_LINE_SPLIT M_MULTICOLUMN M_NO_ALIGNMENT mode SPLIT_MASK R_OUTERMOST R_INNERMOST tieBreakRule NONE BREAK CHUNK_FIELD CHUNK_METHOD CHUNK_TYPE CHUNK_ENUM org.aspectj.org.eclipse.jdt.internal.formatter.align.Alignment  name of alignment\r\n  link to enclosing alignment\r\n  start location of this alignment\r\n  indentation management\r\n  chunk management\r\n  break management\r\n  if bit set, then alignment will be non-optional (default is optional)\r\n  if bit set, broken fragments will be aligned on current location column (default is to break at current indentation level)\r\n  if bit set, broken fragments will be indented one level below current (not using continuation indentation)\r\n  fill each line with all possible fragments\r\n  compact mode, but will first try to break before first fragment\r\n  one fragment per line\r\n  one fragment per line, subsequent are indented further\r\n  one per line, except first fragment (if possible)\r\n  fragments are on same line, but multiple line of fragments will be aligned vertically\r\n  alignment tie-break rules - when split is needed, will decide whether innermost  alignment effects on a per fragment basis\r\n  chunk kind\r\n  initialize the break indentation level, using modes and continuationIndentationLevel preference\r\n  indent broken fragments exactly one level deeper than current indentation\r\n  indent broken fragments at next indentation level, based on current column\r\n  check for forced alignments\r\n  location to align and break on.\r\n  when redoing same chunk alignment, must not reset\r\n  }\r\n  backtrack only once all fragments got checked\r\n  cannot split better\r\n  perform alignment effect for current fragment\r\n  check for forced alignments\r\n  reset fragment indentation  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\t  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*  # aligned fragment\r\n\t\t\t *  foo(\r\n\t\t\t *     #AAAAA, #BBBBB,\r\n\t\t\t *     #CCCC);\r\n\t\t\t */\r\n /*  # aligned fragment\r\n\t\t\t *  foo(#AAAAA, #BBBBB,\r\n\t\t\t *     #CCCC);\r\n\t\t\t */\r\n /*  # aligned fragment\r\n\t\t\t *  foo(\r\n\t\t\t *      #AAAAA,\r\n\t\t\t *          #BBBBB,\r\n\t\t\t *          #CCCC);\r\n\t\t\t */\r\n /*  # aligned fragment\r\n\t\t\t *  foo(\r\n\t\t\t *      #AAAAA,\r\n\t\t\t *      #BBBBB,\r\n\t\t\t *      #CCCC);\r\n\t\t\t */\r\n /*  # aligned fragment\r\n\t\t\t *  foo(#AAAAA,\r\n\t\t\t *      #BBBBB,\r\n\t\t\t *      #CCCC);\r\n\t\t\t */\r\n","CreatePackageDeclarationOperation":"getChildPropertyDescriptor generateElementAST generateResultHandle getMainTaskName initializeDefaultPosition verify name org.aspectj.org.eclipse.jdt.internal.core.CreatePackageDeclarationOperation  look for an existing package declaration\r\n  equivalent package declaration already exists\r\n","FieldGenOrMethodGen":"setType getType getName setName getConstantPool setConstantPool addAttribute removeAttribute removeAttributes addAnnotation removeAnnotation removeAnnotations getAttributes getAttributesImmutable addAnnotationsAsAttribute getAnnotations getSignature clone setType getType getName setName getConstantPool setConstantPool addAttribute removeAttribute removeAttributes addAnnotation removeAnnotation removeAnnotations getAttributes getAttributesImmutable addAnnotationsAsAttribute getAnnotations getSignature clone name type cp attributeList annotationList name type cp attributeList annotationList org.aspectj.apache.bcel.generic.FieldGenOrMethodGen org.aspectj.apache.bcel.generic.FieldGenOrMethodGen  OPTIMIZE clone any use???\r\n  OPTIMIZE clone any use???\r\n /*<Attribute>*/\r\n /*<Attribute>*/\r\n /*<Attribute>*/\r\n /*<Attribute>*/\r\n","ExceptionTableEntry":"getStartPC getEndPC getHandlerPC getCatchTypeIndex getCatchType startPC endPC handlerPC catchTypeIndex catchType org.aspectj.org.eclipse.jdt.internal.core.util.ExceptionTableEntry","TypeVariable":"getFirstBound getUpperBound getAdditionalInterfaceBounds getLowerBound getName resolve canBeBoundTo isASubtypeOf setUpperBound setLowerBound setAdditionalInterfaceBounds toDebugString getDisplayName toString getSignature getSignatureForAttribute setRank getRank setDeclaringElement getDeclaringElement setDeclaringElementKind getDeclaringElementKind write read getGenericSignature getErasureSignature getFirstBound getUpperBound getAdditionalInterfaceBounds getLowerBound getName resolve canBeBoundTo isASubtypeOf setUpperBound setLowerBound setAdditionalInterfaceBounds toDebugString getDisplayName toString getSignature getSignatureForAttribute setRank getRank setDeclaringElement getDeclaringElement setDeclaringElementKind getDeclaringElementKind write read getGenericSignature getErasureSignature NONE isResolved beingResolved name rank declaringElementKind UNKNOWN METHOD TYPE declaringElement upperBound additionalInterfaceBounds lowerBound NONE isResolved beingResolved name rank declaringElementKind UNKNOWN METHOD TYPE declaringElement upperBound additionalInterfaceBounds lowerBound org.aspectj.weaver.TypeVariable org.aspectj.weaver.TypeVariable  no class bound was specified (it will default to object)\r\n  avoid spiral of death\r\n  look for type variable on method...\r\n  resolve by finding the real type var that we refer to...\r\n  should issue message, this is a workaround to get us going...\r\n  AMC - need a more robust test!\r\n  wildcard can accept any binding\r\n  aCandidateType is a subtype of upperBound\r\n  aCandidateType is a subtype of all additionalInterfaceBounds\r\n  lowerBound is a subtype of aCandidateType\r\n  only used when resolving\r\n  only used when resolving\r\n  only used when resolving\r\n  good enough approximation\r\n  if (declaringElementKind==UNKNOWN) throw new RuntimeException(\"Dont know declarer of this tvar : \"+this);\r\n  name, upperbound, additionalInterfaceBounds, lowerbound\r\n  no class bound was specified (it will default to object)\r\n  avoid spiral of death\r\n  look for type variable on method...\r\n  resolve by finding the real type var that we refer to...\r\n  should issue message, this is a workaround to get us going...\r\n  AMC - need a more robust test!\r\n  wildcard can accept any binding\r\n  aCandidateType is a subtype of upperBound\r\n  aCandidateType is a subtype of all additionalInterfaceBounds\r\n  lowerBound is a subtype of aCandidateType\r\n  only used when resolving\r\n  only used when resolving\r\n  only used when resolving\r\n  good enough approximation\r\n  if (declaringElementKind==UNKNOWN) throw new RuntimeException(\"Dont know declarer of this tvar : \"+this);\r\n  name, upperbound, additionalInterfaceBounds, lowerbound\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","IBinaryNestedType":"getEnclosingTypeName getModifiers getName org.aspectj.org.eclipse.jdt.internal.compiler.env.IBinaryNestedType","CommonsTraceFactory":"getTrace getTrace logFactory logFactory org.aspectj.weaver.tools.CommonsTraceFactory org.aspectj.weaver.tools.CommonsTraceFactory  OPTIMIZE move out of main weaver for now?\r\n  OPTIMIZE move out of main weaver for now?\r\n","IGlobalVariable":"getInitializer getName getTypeName org.aspectj.org.eclipse.jdt.core.eval.IGlobalVariable","EnclosingMethodAttribute":"getEnclosingClass getEnclosingClassIndex getMethodDescriptor getMethodDescriptorIndex getMethodName getMethodNameIndex getMethodNameAndTypeIndex enclosingClassIndex enclosingClassName methodDescriptorIndex methodDescriptor methodNameIndex methodName methodNameAndTypeIndex org.aspectj.org.eclipse.jdt.internal.core.util.EnclosingMethodAttribute /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IEnclosingMethodAttribute#getEnclosingClass()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IEnclosingMethodAttribute#getMethodDeclaringClassDescriptorIndex()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IEnclosingMethodAttribute#getMethodDescriptor()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IEnclosingMethodAttribute#getMethodDescriptorIndex()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IEnclosingMethodAttribute#getMethodName()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IEnclosingMethodAttribute#getMethodNameIndex()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IEnclosingMethodAttribute#getMethodNameAndTypeIndex()\r\n\t */\r\n","OverflowingLRUCache":"clone close elements fillingRatio getEntryTable getLoadFactor getOverflow makeSpace newInstance printStats privateRemoveEntry privateRemoveEntry put remove setLoadFactor setSpaceLimit shrink toString updateTimestamp fOverflow fTimestampsOn fLoadFactor fClass fCount org.aspectj.org.eclipse.jdt.internal.core.OverflowingLRUCache  (by a call to get(Object) for example)\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-2$   basic removal\r\n  thus entry will already be removed if reaching this point.\r\n  attempt to make new space\r\n  be handled later in a makeSpace call\r\n  $NON-NLS-1$\r\n /* Preserve order of entries by copying from oldest to newest */\r\n /* if space is already available */\r\n /* Free up space by removing oldest entries */\r\n /* check again, since we may have aquired enough space */\r\n /* update fOverflow */\r\n /* if this was the first entry */\r\n /* if this was the last entry */\r\n /* attempt to rid ourselves of the overflow, if there is any */\r\n /* Check whether there's an entry in the cache */\r\n","AbstractAnnotationAJ":"getType getTypeSignature getTypeName allowedOnAnnotationType allowedOnField allowedOnRegularType ensureAtTargetInitialized getValidTargets specifiesTarget retrieveAnnotationOnAnnotation isRuntimeVisible getTargets hasNameValuePair hasNamedValue stringify getType getTypeSignature getTypeName allowedOnAnnotationType allowedOnField allowedOnRegularType ensureAtTargetInitialized getValidTargets specifiesTarget retrieveAnnotationOnAnnotation isRuntimeVisible getTargets hasNameValuePair hasNamedValue stringify type supportedTargets type supportedTargets org.aspectj.weaver.AbstractAnnotationAJ org.aspectj.weaver.AbstractAnnotationAJ  @target meta annotation\r\n  @target meta annotation\r\n /* *******************************************************************\r\n * Copyright (c) 2008 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2008 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","Agent":"premain getInstrumentation premain getInstrumentation s_instrumentation s_transformer s_instrumentation s_transformer org.aspectj.weaver.loadtime.Agent org.aspectj.weaver.loadtime.Agent /* Handle duplicate agents */\r\n /* Handle duplicate agents */\r\n","NoSuchAdviceException":"getName getName serialVersionUID name serialVersionUID name org.aspectj.lang.reflect.NoSuchAdviceException org.aspectj.lang.reflect.NoSuchAdviceException /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","WithincodePointcut":"getSignature couldMatchKinds parameterizeWith fastMatch matchInternal write read resolveBindings postRead equals hashCode toString findResidueInternal concretize1 accept getSignature couldMatchKinds parameterizeWith fastMatch matchInternal write read resolveBindings postRead equals hashCode toString findResidueInternal concretize1 accept signature matchedShadowKinds signature matchedShadowKinds org.aspectj.weaver.patterns.WithincodePointcut org.aspectj.weaver.patterns.WithincodePointcut  these next two are needed for inlining of field initializers\r\n  they were withincode of the outer signature\r\n  look for inappropriate use of parameterized types and tell user...\r\n  these next two are needed for inlining of field initializers\r\n  they were withincode of the outer signature\r\n  look for inappropriate use of parameterized types and tell user...\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","ConstantDouble":"accept dump getBytes setBytes toString getConstantValue accept dump getBytes setBytes toString getConstantValue bytes bytes org.aspectj.apache.bcel.classfile.ConstantDouble org.aspectj.apache.bcel.classfile.ConstantDouble","SuperFixerVisitor":"visit endVisit endVisit superMethodsCalled method targetClass depthCounter org.aspectj.ajdt.internal.compiler.ast.SuperFixerVisitor  Keeps track of whether we are inside any nested local type declarations\r\n  an error has already occurred\r\n  need to treat super calls specially here\r\n  XXX this is a hack that violates some binary compatibility rules\r\n  ??? do we want these to be unique\r\n  pr198196 - when calling MarkerInterface.super.XXX()\r\n  pr206911\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","CompilerOptions":"getMap optionKeyFromIrritant optionKeyToIrritant getSeverity getSeverityString getVisibilityString set toString updateSeverity versionToJdkLevel versionFromJdkLevel warningOptionNames warningTokenFromIrritant warningTokenToIrritant OPTION_LocalVariableAttribute OPTION_LineNumberAttribute OPTION_SourceFileAttribute OPTION_PreserveUnusedLocal OPTION_DocCommentSupport OPTION_ReportMethodWithConstructorName OPTION_ReportOverridingPackageDefaultMethod OPTION_ReportDeprecation OPTION_ReportDeprecationInDeprecatedCode OPTION_ReportDeprecationWhenOverridingDeprecatedMethod OPTION_ReportHiddenCatchBlock OPTION_ReportUnusedLocal OPTION_ReportUnusedParameter OPTION_ReportUnusedParameterWhenImplementingAbstract OPTION_ReportUnusedParameterWhenOverridingConcrete OPTION_ReportUnusedParameterIncludeDocCommentReference OPTION_ReportUnusedImport OPTION_ReportSyntheticAccessEmulation OPTION_ReportNoEffectAssignment OPTION_ReportLocalVariableHiding OPTION_ReportSpecialParameterHidingField OPTION_ReportFieldHiding OPTION_ReportTypeParameterHiding OPTION_ReportPossibleAccidentalBooleanAssignment OPTION_ReportNonExternalizedStringLiteral OPTION_ReportIncompatibleNonInheritedInterfaceMethod OPTION_ReportUnusedPrivateMember OPTION_ReportNoImplicitStringConversion OPTION_ReportAssertIdentifier OPTION_ReportEnumIdentifier OPTION_ReportNonStaticAccessToStatic OPTION_ReportIndirectStaticAccess OPTION_ReportEmptyStatement OPTION_ReportUnnecessaryTypeCheck OPTION_ReportUnnecessaryElse OPTION_ReportUndocumentedEmptyBlock OPTION_ReportInvalidJavadoc OPTION_ReportInvalidJavadocTags OPTION_ReportInvalidJavadocTagsDeprecatedRef OPTION_ReportInvalidJavadocTagsNotVisibleRef OPTION_ReportInvalidJavadocTagsVisibility OPTION_ReportMissingJavadocTags OPTION_ReportMissingJavadocTagsVisibility OPTION_ReportMissingJavadocTagsOverriding OPTION_ReportMissingJavadocComments OPTION_ReportMissingJavadocCommentsVisibility OPTION_ReportMissingJavadocCommentsOverriding OPTION_ReportFinallyBlockNotCompletingNormally OPTION_ReportUnusedDeclaredThrownException OPTION_ReportUnusedDeclaredThrownExceptionWhenOverriding OPTION_ReportUnqualifiedFieldAccess OPTION_ReportUncheckedTypeOperation OPTION_ReportRawTypeReference OPTION_ReportFinalParameterBound OPTION_ReportMissingSerialVersion OPTION_ReportVarargsArgumentNeedCast OPTION_Source OPTION_TargetPlatform OPTION_Compliance OPTION_Encoding OPTION_MaxProblemPerUnit OPTION_TaskTags OPTION_TaskPriorities OPTION_TaskCaseSensitive OPTION_InlineJsr OPTION_ReportNullReference OPTION_ReportPotentialNullReference OPTION_ReportRedundantNullCheck OPTION_ReportAutoboxing OPTION_ReportAnnotationSuperInterface OPTION_ReportMissingOverrideAnnotation OPTION_ReportMissingDeprecatedAnnotation OPTION_ReportIncompleteEnumSwitch OPTION_ReportForbiddenReference OPTION_ReportDiscouragedReference OPTION_SuppressWarnings OPTION_ReportUnhandledWarningToken OPTION_ReportUnusedLabel OPTION_FatalOptionalError OPTION_ReportParameterAssignment OPTION_ReportFallthroughCase OPTION_ReportOverridingMethodWithoutSuperInvocation OPTION_GenerateClassFiles OPTION_Process_Annotations OPTION_ReportInvalidAnnotation OPTION_ReportMissingAnnotation OPTION_ReportMissingJavadoc GENERATE DO_NOT_GENERATE PRESERVE OPTIMIZE_OUT VERSION_1_1 VERSION_1_2 VERSION_1_3 VERSION_1_4 VERSION_JSR14 VERSION_1_5 VERSION_1_6 VERSION_1_7 ERROR WARNING IGNORE ENABLED DISABLED PUBLIC PROTECTED DEFAULT PRIVATE MethodWithConstructorName OverriddenPackageDefaultMethod UsingDeprecatedAPI MaskedCatchBlock UnusedLocalVariable UnusedArgument NoImplicitStringConversion AccessEmulation NonExternalizedString AssertUsedAsAnIdentifier UnusedImport NonStaticAccessToStatic Task NoEffectAssignment IncompatibleNonInheritedInterfaceMethod UnusedPrivateMember LocalVariableHiding FieldHiding AccidentalBooleanAssign EmptyStatement MissingJavadocComments MissingJavadocTags UnqualifiedFieldAccess UnusedDeclaredThrownException FinallyBlockNotCompleting InvalidJavadoc UnnecessaryTypeCheck UndocumentedEmptyBlock IndirectStaticAccess UnnecessaryElse UncheckedTypeOperation FinalParameterBound MissingSerialVersion EnumUsedAsAnIdentifier ForbiddenReference VarargsArgumentNeedCast NullReference AutoBoxing AnnotationSuperInterface TypeHiding MissingOverrideAnnotation IncompleteEnumSwitch MissingDeprecatedAnnotation DiscouragedReference UnhandledWarningToken RawTypeReference UnusedLabel ParameterAssignment FallthroughCase OverridingMethodWithoutSuperInvocation PotentialNullReference RedundantNullCheck OPTION_ReportSwallowedExceptionInCatchBlock SwallowedExceptionInCatchBlock OptionToIrritants errorThreshold warningThreshold produceDebugAttributes complianceLevel sourceLevel targetJDK defaultEncoding verbose produceReferenceInfo preserveAllLocalVariables parseLiteralExpressionsAsConstants maxProblemsPerUnit taskTags taskPriorites isTaskCaseSensitive reportDeprecationInsideDeprecatedCode reportDeprecationWhenOverridingDeprecatedMethod reportUnusedParameterWhenImplementingAbstract reportUnusedParameterWhenOverridingConcrete reportUnusedParameterIncludeDocCommentReference reportUnusedDeclaredThrownExceptionWhenOverriding reportSpecialParameterHidingField reportInvalidJavadocTagsVisibility reportInvalidJavadocTags reportInvalidJavadocTagsDeprecatedRef reportInvalidJavadocTagsNotVisibleRef reportMissingJavadocTagsVisibility reportMissingJavadocTagsOverriding reportMissingJavadocCommentsVisibility reportMissingJavadocCommentsOverriding inlineJsrBytecode docCommentSupport suppressWarnings treatOptionalErrorAsFatal performMethodsFullRecovery performStatementsRecovery storeAnnotations generateClassFiles processAnnotations warningTokens org.aspectj.org.eclipse.jdt.internal.compiler.impl.CompilerOptions  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Map: String optionKey --> Long irritant>\r\n  Default severity level for handlers\r\n  By default only lines and source attributes are generated.\r\n  by default be compliant with 1.4\r\n  1.3 source behavior by default\r\n  default generates for JVM1.2\r\n  will use the platform default encoding\r\n  print what unit is being processed\r\n  indicates if reference info is desired\r\n  indicates if unused  indicates whether literal expressions are inlined at parse-time or not\r\n  no more than 5000 problems per default\r\n  tags used to recognize tasks in comments\r\n  deprecation report\r\n  unused parameters report\r\n  unused declaration of thrown exception\r\n  constructor  check javadoc comments tags\r\n  check missing javadoc tags\r\n  check missing javadoc comments\r\n  JSR bytecode inlining\r\n  javadoc comment support\r\n  suppress warning annotation\r\n  treat optional error as fatal or just like warning?\r\n  parser perform statements recovery\r\n  parser perform statements recovery\r\n  store annotations\r\n  annotation processing\r\n  Enable annotation processing by default only in batch mode\r\n  keep in sync with warningTokens and warningTokenToIrritant\r\n  forced from 1.5 mode on\r\n  only optional if target < 1.5 (inlining on from 1.5 on)\r\n  Javadoc options\r\n  annotation processing requires annotation to be stored\r\n  annotation processing requires javadoc processing\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  AspectJ Extension\r\n  unknown\r\n  verification is optimized for all versions with same length and same \"1.\" prefix\r\n  unknown\r\n  unknown version\r\n  keep in sync with warningTokens and warningTokenToIrritant\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  keep in sync with warningTokenToIrritant and warningTokenFromIrritant\r\n  keep in sync with warningTokens and warningTokenFromIrritant\r\n  $NON-NLS-1$\r\n  suppress all warnings\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* AspectJ Extension */\r\n","ClassGenException":"org.aspectj.apache.bcel.generic.ClassGenException org.aspectj.apache.bcel.generic.ClassGenException","CodeSignature":"getParameterTypes getParameterNames getExceptionTypes getParameterTypes getParameterNames getExceptionTypes getParameterTypes getParameterNames getExceptionTypes org.aspectj.lang.reflect.CodeSignature org.aspectj.lang.reflect.CodeSignature org.aspectj.lang.reflect.CodeSignature /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","Ajc":"finalList execute compile removeUnsupported addAjcOptions logAndAddFilesToCompile AJC_COMPILER_SUCCESS MAIN_CLASS_NAME javacOnlyFlags javacOnlyArgs org.aspectj.tools.ant.taskdefs.compilers.Ajc  Same behavior as DefaultCompilerAdapter.logAndAddFilesToCompile\r\n  with .lst files also\r\n  file to the command line\r\n /* *******************************************************************\r\n * Copyright (c) 2000-2001 Xerox Corporation. \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","PerTypeWithin":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty clone0 subtreeMatch0 accept0 treeSize getTypePattern accept couldMatchKinds parameterizeWith fastMatch matchInternal resolveBindings findResidueInternal concretize write readPerClause getKind toString toDeclarationString isWithinType equals hashCode getTypePattern accept couldMatchKinds parameterizeWith fastMatch matchInternal resolveBindings findResidueInternal concretize write readPerClause getKind toString toDeclarationString isWithinType equals hashCode typePattern kindSet typePattern kindSet org.aspectj.org.eclipse.jdt.core.dom.PerTypeWithin org.aspectj.weaver.patterns.PerTypeWithin org.aspectj.weaver.patterns.PerTypeWithin  add the type thingy here\r\n  allow default implementation to flag the error\r\n  remeber to set the type thingy here\r\n  dispatch to correct overloaded match method\r\n  stub\r\n  Any shadow could be considered within a pertypewithin() type pattern\r\n  -----\r\n  PTWIMPL ?? Add a proper message\r\n  call the localAspectOf() method.\r\n  typePattern,\r\n  This munger will initialize the aspect instance field in the matched type\r\n  ATAJ: add a munger to add the aspectOf(..) to the @AJ aspects\r\n  ATAJ inline around advice support - don't use a late munger to allow around inling for itself\r\n  PTWIMPL Represents a parsed pertypewithin()\r\n  Any shadow could be considered within a pertypewithin() type pattern\r\n  -----\r\n  PTWIMPL ?? Add a proper message\r\n  call the localAspectOf() method.\r\n  typePattern,\r\n  This munger will initialize the aspect instance field in the matched type\r\n  ATAJ: add a munger to add the aspectOf(..) to the @AJ aspects\r\n  ATAJ inline around advice support - don't use a late munger to allow around inling for itself\r\n  PTWIMPL Represents a parsed pertypewithin()\r\n /* *******************************************************************\r\n * Copyright (c) 2005 IBM\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 IBM\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement     initial implementation \r\n * ******************************************************************/\r\n","UnconditionalFlowInfo":"addInitializationsFrom addPotentialInitializationsFrom addPotentialNullInfoFrom cannotBeDefinitelyNullOrNonNull cannotBeNull canOnlyBeNull copy discardInitializationInfo discardNonFieldInitializations initsWhenFalse initsWhenTrue isDefinitelyAssigned isDefinitelyAssigned isDefinitelyAssigned isDefinitelyNonNull isDefinitelyNull isDefinitelyUnknown isPotentiallyAssigned isPotentiallyAssigned isPotentiallyAssigned isPotentiallyNonNull isPotentiallyNull isPotentiallyUnknown isProtectedNonNull isProtectedNull markAsComparedEqualToNonNull markAsComparedEqualToNull markAsDefinitelyAssigned markAsDefinitelyAssigned markAsDefinitelyAssigned markAsDefinitelyNonNull markAsDefinitelyNull markAsDefinitelyUnknown mergedWith numberOfEnclosingFields nullInfoLessUnconditionalCopy safeInitsWhenTrue setReachMode toString unconditionalCopy unconditionalFieldLessCopy unconditionalInits unconditionalInitsWithoutSideEffect serialVersionUID coverageTestFlag coverageTestId definiteInits potentialInits nullBit1 nullBit2 nullBit3 nullBit4 extraLength extra maxFieldCount BitCacheSize org.aspectj.org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo  the coverage tests methods run or not.\r\n  never release with the coverageTestFlag set to true\r\n  assignment bits - first segment\r\n  null bits - first segment\r\n  extra segments\r\n  limit between fields and locals\r\n  64 bits in a long.\r\n  union of definitely assigned variables,\r\n  union of potentially set ones\r\n  combine null information\r\n  in all cases - avoid forgetting extras\r\n  shortcut regular copy because array copy is better\r\n  $NON-NLS-1$\r\n  both sides have extra storage\r\n  current storage is longer\r\n  $NON-NLS-1$\r\n  current storage is shorter -> grow current\r\n  $NON-NLS-1$\r\n  manage definite assignment info\r\n  tweak limits for nulls\r\n  treating extra storage\r\n  union of potentially set ones\r\n  no storage here, but other has extra storage.\r\n  both sides have extra storage\r\n  current storage is longer\r\n  current storage is shorter -> grow current\r\n  treating extra storage\r\n  if we get here, otherInits has some null info\r\n  bit1 is redundant\r\n  bit1 is redundant\r\n  $NON-NLS-1$\r\n  will do with a copy -- caveat: only valid because definite assignment bits copied above\r\n  $NON-NLS-1$\r\n  PREMATURE skip operations for fields\r\n  bit1 is redundant\r\n  bit1 is redundant\r\n  extra storage management\r\n  use bits\r\n  if vector not yet allocated, then not initialized\r\n  use extra vector\r\n  if not enough room in vector, then not initialized\r\n  use bits\r\n  if vector not yet allocated, then not initialized\r\n  use extra vector\r\n  if not enough room in vector, then not initialized\r\n  use bits\r\n  if vector not yet allocated, then not initialized\r\n  use extra vector\r\n  if not enough room in vector, then not initialized\r\n  do not clone the DeadEnd\r\n  copy slots\r\n  if vector not yet allocated, then not initialized\r\n  use extra vector\r\n  not enough room yet\r\n  else we only have complete non field array items left\r\n  use bits\r\n  if vector not yet allocated, then not initialized\r\n  use extra vector\r\n  if not enough room in vector, then not initialized\r\n  do not want to complain in unreachable code\r\n  do not want to complain in unreachable code if local declared in reachable code\r\n  do not want to complain in unreachable code\r\n  String instances\r\n  use bits\r\n  if vector not yet allocated, then not initialized\r\n  use extra vector\r\n  if not enough room in vector, then not initialized\r\n  do not want to complain in unreachable code\r\n  use bits\r\n  if vector not yet allocated, then not initialized\r\n  use extra vector\r\n  if not enough room in vector, then not initialized\r\n  do not want to complain in unreachable code\r\n  use bits\r\n  if vector not yet allocated, then not initialized\r\n  use extra vector\r\n  if not enough room in vector, then not initialized\r\n  use bits\r\n  id is zero-based\r\n  if vector not yet allocated, then not initialized\r\n  use extra vector\r\n  if not enough room in vector, then not initialized\r\n  final constants are inlined, and thus considered as always initialized\r\n  use bits\r\n  if vector not yet allocated, then not initialized\r\n  use extra vector\r\n  if not enough room in vector, then not initialized\r\n  use bits\r\n  if vector not yet allocated, then not initialized\r\n  use extra vector\r\n  if not enough room in vector, then not initialized\r\n  do not want to complain in unreachable code\r\n  use bits\r\n  if vector not yet allocated, then not initialized\r\n  use extra vector\r\n  if not enough room in vector, then not initialized\r\n  use bits\r\n  if vector not yet allocated, then not initialized\r\n  use extra vector\r\n  if not enough room in vector, then not initialized\r\n  use bits\r\n  if vector not yet allocated, then not initialized\r\n  use extra vector\r\n  if not enough room in vector, then not initialized\r\n  use extra vector\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  MACRO :'b,'es  use bits\r\n  position is zero-based\r\n  protected from non-object locals in calling methods\r\n  use extra vector\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  use bits\r\n  position is zero-based\r\n  protected from non-object locals in calling methods\r\n  use extra vector\r\n  might need to grow the arrays\r\n  use bits\r\n  position is zero-based\r\n  use extra vector\r\n  set assigned non null\r\n  clear others\r\n  position is zero-based\r\n  protected from non-object locals in calling methods\r\n  use extra vector\r\n  mark assigned null\r\n  clear others\r\n  position is zero-based\r\n  protected from non-object locals in calling methods\r\n  use extra vector\r\n  mark assigned null\r\n  clear others\r\n  position is zero-based\r\n  protected from non-object locals in calling methods\r\n  obvious\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  make sure otherInits won't be affected\r\n  intersection of definitely assigned variables,\r\n  union of potentially set ones\r\n  null combinations\r\n  only other had nulls\r\n  redundant with the three following ones\r\n  other has no null info\r\n  no storage here, but other has extra storage.\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  both sides have extra storage\r\n  current storage is longer\r\n  $NON-NLS-1$\r\n  current storage is shorter -> grow current\r\n  $NON-NLS-1$\r\n  manage definite assignment\r\n  no need to carry inexisting nulls\r\n  refine null bits requirements\r\n  no need to reset anything\r\n  compose nulls\r\n  treating extra storage\r\n  see InitializationTest#test090 (and others)\r\n  cannot modify DEAD_END\r\n  $NON-NLS-1$\r\n  PREMATURE consider printing bit fields as 0001 0001 1000 0001...\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  TODO (maxime) may consider leveraging null contribution verification as it is done in copy\r\n  if vector not yet allocated, then not initialized\r\n  use extra vector\r\n  not enough room yet\r\n  also see conditional inits, where it requests them to merge\r\n /*\r\n * Answer the total number of fields in enclosing types of a given type\r\n */\r\n","InstructionShort":"dump toString dump toString s s org.aspectj.apache.bcel.generic.InstructionShort org.aspectj.apache.bcel.generic.InstructionShort","TypeVariableBinding":"kind boundCheck canBeInstantiated collectSubstitutes constantPoolName computeUniqueKey debugName erasure genericSignature genericTypeSignature isErasureBoundTo isInterchangeableWith isTypeVariable original readableName resolve shortReadableName superclass superInterfaces toString upperBound declaringElement rank firstBound superclass superInterfaces genericTypeSignature org.aspectj.org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding  binding of declaring type or method\r\n  declaration rank, can be used to match variable in parameterized type\r\n  actual resolved variable supertypes (if no superclass bound, then associated to Object)\r\n  treat type var as public\r\n  can request additional types during hierarchy walk that are found as source types that also 'need' to connect their hierarchy\r\n  cannot be extended further to satisfy missing bounds\r\n  Enum#RAW is not a substitute for <E extends Enum<E>> (86838)\r\n  Enum#RAW is not a substitute for <E extends Enum<E>> (86838)\r\n  only infer for type params of the generic method\r\n  intersection type\r\n  wildcards are not true type expressions (JLS 15.12.2.7, p.453 2nd discussion)\r\n  cannot infer anything from a null type\r\n  reverse constraint, to reflect variable on rhs:   A << T --> T >: A\r\n  case CONSTRAINT_SUPER :\r\n  java  see https:  java  not a match\r\n  refresh the firstBound in case it changed\r\n  .append('[').append(this.rank).append(']');\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  java /* java/lang/Object */\r\n /*\r\n\t * declaringUniqueKey : genericTypeSignature\r\n\t * p.X<T> { ... } --> Lp/X;:TT;\r\n\t * p.X { <T> void foo() {...} } --> Lp/X;.foo()V:TT;\r\n\t */\r\n","AnnotationMethodInfoWithAnnotations":"getAnnotations initialize reset toStringContent annotations org.aspectj.org.eclipse.jdt.internal.compiler.classfmt.AnnotationMethodInfoWithAnnotations","RewriteEvent":"getChangeKind isListRewrite getOriginalValue getNewValue getChildren INSERTED REMOVED REPLACED CHILDREN_CHANGED UNCHANGED org.aspectj.org.eclipse.jdt.internal.core.dom.rewrite.RewriteEvent","HTMLEntity2JavaReader":"computeSubstitution entity2Text processEntity fgEntityLookup org.aspectj.org.eclipse.jdt.internal.formatter.comment.HTMLEntity2JavaReader  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-2$   $NON-NLS-1$   not found  /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.ui.text.SubstitutionTextReader#computeSubstitution(int)\r\n\t */\r\n","BatchImageBuilder":"build acceptSecondaryType cleanOutputFolders cleanUp compile copyExtraResourcesBack findOriginalResource processAnnotationResults rebuildTypesAffectedBySecondaryTypes storeProblemsFor toString incrementalBuilder secondaryTypes typeLocatorsWithUndefinedTypes org.aspectj.org.eclipse.jdt.internal.core.builder.BatchImageBuilder  if annotations or secondary types have to be processed after the compile loop\r\n  qualified names for all secondary types found during batch compile\r\n  type locators for all source files with errors that may be caused by 'not found' secondary types\r\n  $NON-NLS-1$\r\n  ignore exclusionPatterns if output folder == another source folder... not this one\r\n  ignore inclusionPatterns if output folder == another source folder... not this one\r\n  must walk children if inclusionPatterns != null\r\n  last one wins\r\n  ensure package folder exists\r\n  just in case the original was read only\r\n  the sourceFolder == project\r\n  must walk children if inclusionPatterns != null\r\n  whenever the generated types are initially added or structurally changed\r\n  secondary types have just been added, see bug 146324\r\n  $NON-NLS-1$\r\n","ProblemHandler":"computeSeverity createProblem handle handle record NoArgument policy problemFactory options org.aspectj.org.eclipse.jdt.internal.compiler.problem.ProblemHandler  by default all problems are errors\r\n  ignore non reportable warning\r\n  non reportable error is fatal\r\n  if no reference context, we need to abort from the current compilation process\r\n  problem couldn't be created, ignore\r\n  should abort ?\r\n  severity inferred using the ID\r\n /*\r\n * Problem handler can be supplied with a policy to specify\r\n * its behavior in error handling. Also see static methods for\r\n * built-in policies.\r\n *\r\n */\r\n /*\r\n * Given the current configuration, answers which category the problem\r\n * falls into:\r\n *\t\tError | Warning | Ignore\r\n */\r\n","TypePatternMatcher":"matches matches org.aspectj.weaver.tools.TypePatternMatcher org.aspectj.weaver.tools.TypePatternMatcher /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","HasMemberTypePattern":"matchesExactly hasField hasMethod matchesExactly matchesInstanceof parameterizeWith resolveBindings equals hashCode toString write read accept matchesExactly hasField hasMethod matchesExactly matchesInstanceof parameterizeWith resolveBindings equals hashCode toString write read accept signaturePattern declareAtPrefix signaturePattern declareAtPrefix org.aspectj.weaver.patterns.HasMemberTypePattern org.aspectj.weaver.patterns.HasMemberTypePattern  TODO what about ITDs\r\n  TODO what about ITDs\r\n  try itds before we give up\r\n  check that hasmember type patterns are allowed!\r\n  TODO what about ITDs\r\n  TODO what about ITDs\r\n  try itds before we give up\r\n  check that hasmember type patterns are allowed!\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","ajcDeclareSoft":"/* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","StackMapAttribute":"getNumberOfEntries getStackMapFrame getBytes NO_FRAMES NO_ENTRIES numberOfEntries frames bytes org.aspectj.org.eclipse.jdt.internal.core.util.StackMapAttribute","WildTypePattern":"getNamePatterns getUpperBound getLowerBound getAdditionalIntefaceBounds setIsVarArgs couldEverMatchSameTypesAs splitNames matchesExactly matchesExactly matchesParameters matchesBounds getDimensions isArray matchesExactlyByName lastIndexOfDotOrDollar innerMatchesExactly outOfStar inStar matchesInstanceof extractName maybeExtractName maybeGetSimpleName maybeGetCleanName parameterizeWith resolveBindings maybeResolveToAnyPattern maybeResolveToBindingTypePattern resolveBindingsFromFullyQualifiedTypeName lookupTypeInScope lookupTypeInWorldIncludingPrefixes lookupTypeInWorld resolveBindingsForExactType resolveGenericWildcard resolveParameterizedType resolveBindingsForMissingType resolveBindingsForTypeVariable verifyTypeParameters verify isStar isNamePatternStar preMatch toString equals hashCode write read readTypePattern150 readTypePatternOldStyle accept getNamePatterns getUpperBound getLowerBound getAdditionalIntefaceBounds setIsVarArgs couldEverMatchSameTypesAs splitNames matchesExactly matchesExactly matchesParameters matchesBounds getDimensions isArray matchesExactlyByName lastIndexOfDotOrDollar innerMatchesExactly outOfStar inStar matchesInstanceof extractName maybeExtractName maybeGetSimpleName maybeGetCleanName parameterizeWith resolveBindings maybeResolveToAnyPattern maybeResolveToBindingTypePattern resolveBindingsFromFullyQualifiedTypeName lookupTypeInScope lookupTypeInWorldIncludingPrefixes lookupTypeInWorld resolveBindingsForExactType resolveGenericWildcard resolveParameterizedType resolveBindingsForMissingType resolveBindingsForTypeVariable verifyTypeParameters verify isStar isNamePatternStar preMatch toString equals hashCode write read readTypePattern150 readTypePatternOldStyle accept GENERIC_WILDCARD_CHARACTER GENERIC_WILDCARD_SIGNATURE_CHARACTER namePatterns ellipsisCount importedPrefixes knownMatches dim boundscheckingoff upperBound additionalInterfaceBounds lowerBound isGeneric scope genericType requireExactType typeParameters sLoc VERSION GENERIC_WILDCARD_CHARACTER GENERIC_WILDCARD_SIGNATURE_CHARACTER namePatterns ellipsisCount importedPrefixes knownMatches dim boundscheckingoff upperBound additionalInterfaceBounds lowerBound isGeneric scope genericType requireExactType typeParameters sLoc VERSION org.aspectj.weaver.patterns.WildTypePattern org.aspectj.weaver.patterns.WildTypePattern  signature of ? is *\r\n  signature of ? is *\r\n  SECRETAPI - just for testing, turns off boundschecking temporarily...\r\n  extends Foo\r\n  extends Foo & A,B,C\r\n  super Foo\r\n  type pattern. We can only tell during resolve bindings.\r\n  called by parser after parsing a type pattern, must bump dim as well as setting flag\r\n  false is necessary but not sufficient\r\n  what about   we treat $ like . here\r\n  names). More work required on our part to get this right...\r\n  Ensure the annotation pattern is resolved\r\n  we have to match type parameters\r\n  type variables we need to make sure we match against them too\r\n  for upper bound, null can also match against Object - but anything else and we're out.\r\n  match ? extends\r\n  match ? super\r\n  it is a ? extends or ? super deal then we have to match them too.\r\n  we deal with parameter matching separately...\r\n  we deal with bounds matching separately too...\r\n  XXX hack\r\n  we match if the dimensions match\r\n  we've already ruled out \"*\", and no other name pattern should match an anonymous type\r\n  if it's longer than that, then known matches are prefixes of a sort\r\n  System.err.println(\"prefix match? \" + prefix + \" to \" + targetTypeName);\r\n  assumes that prefixes have a dot at the end\r\n  what about   we treat $ like . here\r\n  System.err.print(\"match(\\\"\" + Arrays.asList(namePatterns) + \"\\\", \\\"\" + Arrays.asList(names) + \"\\\") -> \");\r\n  System.err.println(b);\r\n  invariant: if (tLeft > 0) then (ti < target.length && pi < pattern.length)\r\n  exactly parallel with that in NamePattern\r\n  invariant: if (tLeft > 0) then (ti < target.length)\r\n  XXX hack to let unmatched types just silently remain so\r\n  it is not ok to treat Foo as a method name!\r\n  System.err.println(\"extract from : \" + Arrays.asList(namePatterns));\r\n  can't extract\r\n  System.err.println(\"    left : \" + Arrays.asList(namePatterns));\r\n  System.out.println(\"get clean: \" + this);\r\n  System.out.println(buf);\r\n  resolve any type parameters\r\n  resolve any bounds\r\n  pattern contains wildcards so can't be resolved to an ExactTypePattern...\r\n  ??? loses source location\r\n  AnyWithAnnotation\r\n  can't resolve to a simple \"any\" pattern\r\n  not possible to resolve to a binding type pattern\r\n  ??? this loop has too many inefficiencies to count\r\n  this must be a generic wildcard with bounds\r\n  we have to set the bounds on it based on the bounds of this pattern\r\n  might have changed if we find out include subtypes is set on one of the bounds...\r\n  leave as wild type pattern\r\n  messages already isued\r\n  AMC... just leave it as a wild type pattern then?\r\n  rt could be a parameterized type 156058\r\n  UnresolvedType type = scope.getWorld().resolve(tx,true);\r\n  ExactTypePattern for this WildTypePattern\r\n  Only put the lint warning out if we can't find it in the world\r\n  we have to set bounds on the TypeVariable held by tvrType before resolving it\r\n  leave as wild type pattern then\r\n  no bounds to worry about...\r\n  issue message \"does not match because baseType.getName() is not generic\"\r\n  issue message \"does not match because wrong no of type params\"\r\n  the call to checkBoundsOK\r\n  ok... (see pr112105)  Want to break this? Run GenericAspectK test.\r\n  issue message that type parameter does not meet specification\r\n  System.err.println(\"Verifying \"+ut.getName()+\" meets bounds for \"+tvs[i]);\r\n  ??? not most efficient\r\n  ??? not most efficient\r\n  rev on change\r\n  ! change from M2\r\n  file size. Storing it on enclosing types would be more efficient\r\n  generics info, new in M3\r\n  generics info, new in M3\r\n  signature of ? is *\r\n  signature of ? is *\r\n  SECRETAPI - just for testing, turns off boundschecking temporarily...\r\n  extends Foo\r\n  extends Foo & A,B,C\r\n  super Foo\r\n  type pattern. We can only tell during resolve bindings.\r\n  called by parser after parsing a type pattern, must bump dim as well as setting flag\r\n  false is necessary but not sufficient\r\n  what about   we treat $ like . here\r\n  names). More work required on our part to get this right...\r\n  Ensure the annotation pattern is resolved\r\n  we have to match type parameters\r\n  type variables we need to make sure we match against them too\r\n  for upper bound, null can also match against Object - but anything else and we're out.\r\n  match ? extends\r\n  match ? super\r\n  it is a ? extends or ? super deal then we have to match them too.\r\n  we deal with parameter matching separately...\r\n  we deal with bounds matching separately too...\r\n  XXX hack\r\n  we match if the dimensions match\r\n  we've already ruled out \"*\", and no other name pattern should match an anonymous type\r\n  if it's longer than that, then known matches are prefixes of a sort\r\n  System.err.println(\"prefix match? \" + prefix + \" to \" + targetTypeName);\r\n  assumes that prefixes have a dot at the end\r\n  what about   we treat $ like . here\r\n  System.err.print(\"match(\\\"\" + Arrays.asList(namePatterns) + \"\\\", \\\"\" + Arrays.asList(names) + \"\\\") -> \");\r\n  System.err.println(b);\r\n  invariant: if (tLeft > 0) then (ti < target.length && pi < pattern.length)\r\n  exactly parallel with that in NamePattern\r\n  invariant: if (tLeft > 0) then (ti < target.length)\r\n  XXX hack to let unmatched types just silently remain so\r\n  it is not ok to treat Foo as a method name!\r\n  System.err.println(\"extract from : \" + Arrays.asList(namePatterns));\r\n  can't extract\r\n  System.err.println(\"    left : \" + Arrays.asList(namePatterns));\r\n  System.out.println(\"get clean: \" + this);\r\n  System.out.println(buf);\r\n  resolve any type parameters\r\n  resolve any bounds\r\n  pattern contains wildcards so can't be resolved to an ExactTypePattern...\r\n  ??? loses source location\r\n  AnyWithAnnotation\r\n  can't resolve to a simple \"any\" pattern\r\n  not possible to resolve to a binding type pattern\r\n  ??? this loop has too many inefficiencies to count\r\n  this must be a generic wildcard with bounds\r\n  we have to set the bounds on it based on the bounds of this pattern\r\n  might have changed if we find out include subtypes is set on one of the bounds...\r\n  leave as wild type pattern\r\n  messages already isued\r\n  AMC... just leave it as a wild type pattern then?\r\n  rt could be a parameterized type 156058\r\n  UnresolvedType type = scope.getWorld().resolve(tx,true);\r\n  ExactTypePattern for this WildTypePattern\r\n  Only put the lint warning out if we can't find it in the world\r\n  we have to set bounds on the TypeVariable held by tvrType before resolving it\r\n  leave as wild type pattern then\r\n  no bounds to worry about...\r\n  issue message \"does not match because baseType.getName() is not generic\"\r\n  issue message \"does not match because wrong no of type params\"\r\n  the call to checkBoundsOK\r\n  ok... (see pr112105)  Want to break this? Run GenericAspectK test.\r\n  issue message that type parameter does not meet specification\r\n  System.err.println(\"Verifying \"+ut.getName()+\" meets bounds for \"+tvs[i]);\r\n  ??? not most efficient\r\n  ??? not most efficient\r\n  rev on change\r\n  ! change from M2\r\n  file size. Storing it on enclosing types would be more efficient\r\n  generics info, new in M3\r\n  generics info, new in M3\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.TypePattern#couldEverMatchSameTypesAs(org.aspectj.weaver.patterns.TypePattern)\r\n\t */\r\n /*isNested*/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.TypePattern#couldEverMatchSameTypesAs(org.aspectj.weaver.patterns.TypePattern)\r\n\t */\r\n /*isNested*/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","HasMemberTypePatternFinder":"visit hasMemberTypePattern visit hasMemberTypePattern hasMemberTypePattern hasMemberTypePattern org.aspectj.weaver.patterns.HasMemberTypePatternFinder org.aspectj.weaver.patterns.HasMemberTypePatternFinder /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","CompletionProposal":"create getAdditionalFlags setAdditionalFlags getKind getCompletionLocation getTokenStart getTokenEnd setTokenRange getCompletion setCompletion getReplaceStart getReplaceEnd setReplaceRange getRelevance setRelevance getDeclarationSignature getDeclarationKey setDeclarationSignature setDeclarationKey getName setName getSignature getKey setSignature setKey getFlags setFlags getRequiredProposals setRequiredProposals findParameterNames setParameterNames getAccessibility isConstructor toString updateCompletion ANONYMOUS_CLASS_DECLARATION FIELD_REF KEYWORD LABEL_REF LOCAL_VARIABLE_REF METHOD_REF METHOD_DECLARATION PACKAGE_REF TYPE_REF VARIABLE_DECLARATION POTENTIAL_METHOD_DECLARATION METHOD_NAME_REFERENCE ANNOTATION_ATTRIBUTE_REF JAVADOC_FIELD_REF JAVADOC_METHOD_REF JAVADOC_TYPE_REF JAVADOC_VALUE_REF JAVADOC_PARAM_REF JAVADOC_BLOCK_TAG JAVADOC_INLINE_TAG FIELD_IMPORT METHOD_IMPORT TYPE_IMPORT FIRST_KIND LAST_KIND completionKind completionLocation tokenStart tokenEnd completion replaceStart replaceEnd relevance declarationSignature declarationKey name signature key requiredProposals flags additionalFlags parameterNames parameterNamesComputed org.aspectj.org.eclipse.jdt.core.CompletionProposal  the start of a code snippet but this API isn't design to support negative position.\r\n  TODO (david) https:  protection for invalid signature\r\n  protection for invalid signature\r\n  protection for invalid signature\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","PoliceExtensionUse":"synchronizationDesignatorEncountered visit visit visit visit synchronizationDesignatorEncountered visit visit visit visit synchronizationDesignatorEncountered world p synchronizationDesignatorEncountered world p org.aspectj.weaver.bcel.PoliceExtensionUse org.aspectj.weaver.bcel.PoliceExtensionUse  error scenario can sometimes lead to this LazyClassGen.toLongString()\r\n  Check it!\r\n  error scenario can sometimes lead to this LazyClassGen.toLongString()\r\n  Check it!\r\n","BranchLabel":"addForwardReference becomeDelegateFor branch branchWide forwardReferenceCount forwardReferences initialize isCaseLabel isStandardLabel place toString forwardReferences forwardReferenceCount delegate tagBits WIDE USED org.aspectj.org.eclipse.jdt.internal.compiler.codegen.BranchLabel  Add an overflow check here.\r\n  \r\n  Label tagbits\r\n  already recorded\r\n  check for duplicates\r\n  other label is delegating to receiver from now on\r\n  all existing forward refs to other label are inlined into current label\r\n  need to merge the two sorted arrays of forward references\r\n  Leave two bytes free to generate the jump afterwards\r\n  Position is set. Write it!\r\n  Leave 4 bytes free to generate the jump offset afterwards\r\n  $NON-NLS-1$   see PR 1GIRQLA: ITPJCORE:ALL - ClassFormatError for local variable attribute\r\n  end of new code\r\n  we need to remove all entries that is beyond this.position inside the pcToSourcerMap table\r\n  Like we change the current position, we have to change the jump offset. See 1F4IRD9 for more details.\r\n  TODO how can position be set already ? cannot place more than once\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n\t\t * Position is set. Write it if it is not a wide branch.\r\n\t\t */\r\n /*\r\n* Put down  a reference to the array at the location in the codestream.\r\n*/\r\n /*\r\n* No support for wide branches yet\r\n*/\r\n /*\r\n* Place the label. If we have forward references resolve them.\r\n*/\r\n","DeclareDeclaration":"addAtAspectJAnnotations generateCode shouldDelegateCodeGeneration parseStatements resolveStatements build print generateInfoAttributes postParse getNodeType0 memSize treeSize resolveBinding declareDecl org.aspectj.ajdt.internal.compiler.ast.DeclareDeclaration org.aspectj.org.eclipse.jdt.core.dom.DeclareDeclaration  in AsmBuilder for processing of MethodDeclaration locations.\r\n  ??? we might need to set parameters to be empty\r\n  FIXME asc the name should perhaps include the hashcode of the pattern (type  them to be easily distinguised at weave time (e.g. see declare annotation)\r\n  ajh02: should add one called DECLARE_DECLARATION or something\r\n  ajh02: :- /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","IBytecodeVisitor":"_aaload _aastore _aconst_null _aload _aload_0 _aload_1 _aload_2 _aload_3 _anewarray _areturn _arraylength _astore _astore_0 _astore_1 _astore_2 _astore_3 _athrow _baload _bastore _bipush _caload _castore _checkcast _d2f _d2i _d2l _dadd _daload _dastore _dcmpg _dcmpl _dconst_0 _dconst_1 _ddiv _dload _dload_0 _dload_1 _dload_2 _dload_3 _dmul _dneg _drem _dreturn _dstore _dstore_0 _dstore_1 _dstore_2 _dstore_3 _dsub _dup _dup_x1 _dup_x2 _dup2 _dup2_x1 _dup2_x2 _f2d _f2i _f2l _fadd _faload _fastore _fcmpg _fcmpl _fconst_0 _fconst_1 _fconst_2 _fdiv _fload _fload_0 _fload_1 _fload_2 _fload_3 _fmul _fneg _frem _freturn _fstore _fstore_0 _fstore_1 _fstore_2 _fstore_3 _fsub _getfield _getstatic _goto _goto_w _i2b _i2c _i2d _i2f _i2l _i2s _iadd _iaload _iand _iastore _iconst_m1 _iconst_0 _iconst_1 _iconst_2 _iconst_3 _iconst_4 _iconst_5 _idiv _if_acmpeq _if_acmpne _if_icmpeq _if_icmpne _if_icmplt _if_icmpge _if_icmpgt _if_icmple _ifeq _ifne _iflt _ifge _ifgt _ifle _ifnonnull _ifnull _iinc _iload _iload_0 _iload_1 _iload_2 _iload_3 _imul _ineg _instanceof _invokeinterface _invokespecial _invokestatic _invokevirtual _ior _irem _ireturn _ishl _ishr _istore _istore_0 _istore_1 _istore_2 _istore_3 _isub _iushr _ixor _jsr _jsr_w _l2d _l2f _l2i _ladd _laload _land _lastore _lcmp _lconst_0 _lconst_1 _ldc _ldc_w _ldc2_w _ldiv _lload _lload_0 _lload_1 _lload_2 _lload_3 _lmul _lneg _lookupswitch _lor _lrem _lreturn _lshl _lshr _lstore _lstore_0 _lstore_1 _lstore_2 _lstore_3 _lsub _lushr _lxor _monitorenter _monitorexit _multianewarray _new _newarray _nop _pop _pop2 _putfield _putstatic _ret _return _saload _sastore _sipush _swap _tableswitch _wide _wide _breakpoint _impdep1 _impdep2 org.aspectj.org.eclipse.jdt.core.util.IBytecodeVisitor","CompletionFlags":"isStaticImport Default StaticImport org.aspectj.org.eclipse.jdt.core.CompletionFlags","DefaultCompilerAdapter":"beforeCompiling afterCompiling beforeProcessing afterProcessing beforeAnalysing beforeResolving afterResolving beforeResolving afterResolving afterAnalysing beforeGenerating afterGenerating afterDietParsing compiler org.aspectj.ajdt.internal.compiler.DefaultCompilerAdapter  release reference to processed unit declaration\r\n  AspectJ Extension\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.aspectj.org.eclipse.jdt.internal.compiler.ICompilerAdapter#beforeCompiling(org.aspectj.org.aspectj.org.eclipse.jdt.internal.compiler.env.ICompilationUnit[])\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.aspectj.org.eclipse.jdt.internal.compiler.ICompilerAdapter#afterCompiling()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.aspectj.org.eclipse.jdt.internal.compiler.ICompilerAdapter#beforeProcessing(org.aspectj.org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.aspectj.org.eclipse.jdt.internal.compiler.ICompilerAdapter#afterProcessing(org.aspectj.org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.aspectj.org.eclipse.jdt.internal.compiler.ICompilerAdapter#beforeResolving(org.aspectj.org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration, org.aspectj.org.aspectj.org.eclipse.jdt.internal.compiler.env.ICompilationUnit, boolean, boolean, boolean)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.aspectj.org.eclipse.jdt.internal.compiler.ICompilerAdapter#afterResolving(org.aspectj.org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration, org.aspectj.org.aspectj.org.eclipse.jdt.internal.compiler.env.ICompilationUnit, boolean, boolean, boolean)\r\n\t */\r\n","ResolvedSourceType":"getFullyQualifiedParameterizedName getKey isResolved toStringInfo unresolved uniqueKey org.aspectj.org.eclipse.jdt.internal.core.ResolvedSourceType  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n\t * See class comments.\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.core.SourceType#getKey()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.core.SourceType#isResolved()\r\n\t */\r\n","AttributeNamesConstants":"SyntheticName ConstantValueName LineNumberTableName LocalVariableTableName InnerClassName CodeName ExceptionsName SourceName DeprecatedName SignatureName LocalVariableTypeTableName EnclosingMethodName AnnotationDefaultName RuntimeInvisibleAnnotationsName RuntimeVisibleAnnotationsName RuntimeInvisibleParameterAnnotationsName RuntimeVisibleParameterAnnotationsName StackMapTableName InconsistentHierarchy VarargsName org.aspectj.org.eclipse.jdt.internal.compiler.codegen.AttributeNamesConstants  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","ExposeTypeMunger":"toString getExposedTypeSignature toString getExposedTypeSignature org.aspectj.weaver.ExposeTypeMunger org.aspectj.weaver.ExposeTypeMunger /* *******************************************************************\r\n * Copyright (c) 2007 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement, IBM       initial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2007 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement, IBM       initial implementation\r\n * ******************************************************************/\r\n","PointcutExpressionImpl":"asString toString getUnderlyingPointcut setMatchingContext couldMatchJoinPointsInType mayNeedDynamicTest getExposedState matchesMethodExecution matchesConstructorExecution matchesExecution matchesStaticInitialization matchesAdviceExecution matchesInitialization matchesPreInitialization matchesMethodCall matchesMethodCall matchesConstructorCall matchesConstructorCall matchesHandler matchesHandler matchesFieldGet matchesFieldGet matchesFieldSet matchesFieldSet getShadowMatch getPointcutExpression hasDynamicContent visit visit visit visit visit visit visit visit visit visit visit getModifiers getDeclaringClass getName getHandledExceptionType isSynthetic asString toString getUnderlyingPointcut setMatchingContext couldMatchJoinPointsInType mayNeedDynamicTest getExposedState matchesMethodExecution matchesConstructorExecution matchesExecution matchesStaticInitialization matchesAdviceExecution matchesInitialization matchesPreInitialization matchesMethodCall matchesMethodCall matchesConstructorCall matchesConstructorCall matchesHandler matchesHandler matchesFieldGet matchesFieldGet matchesFieldSet matchesFieldSet getShadowMatch getPointcutExpression hasDynamicContent visit visit visit visit visit visit visit visit visit visit visit getModifiers getDeclaringClass getName getHandledExceptionType isSynthetic expression world pointcut expression parameters matchContext hasDynamicContent decClass exType expression world pointcut expression parameters matchContext hasDynamicContent decClass exType org.aspectj.internal.lang.reflect.PointcutExpressionImpl org.aspectj.weaver.internal.tools.PointcutExpressionImpl org.aspectj.internal.lang.reflect.PointcutExpressionImpl org.aspectj.weaver.internal.tools.PointcutExpressionImpl /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.tools.PointcutExpression#setMatchingContext(org.aspectj.weaver.tools.MatchingContext)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.tools.PointcutExpression#getPointcutExpression()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.tools.PointcutExpression#setMatchingContext(org.aspectj.weaver.tools.MatchingContext)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.tools.PointcutExpression#getPointcutExpression()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","IConstantValueAttribute":"getConstantValueIndex getConstantValue org.aspectj.org.eclipse.jdt.core.util.IConstantValueAttribute","EclipseAttributeAdapter":"getNameChars getAllBytes attr org.aspectj.ajdt.internal.compiler.ast.EclipseAttributeAdapter /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","MissingSourceFileException":"missingSourceFile serialVersionUID org.aspectj.org.eclipse.jdt.internal.core.builder.MissingSourceFileException  backward compatible\r\n","ProblemMethodBinding":"problemId problemReason closestMatch org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ProblemMethodBinding  TODO (philippe) should rename into #alternateMatch\r\n","TypeBinding":"createArrayType getAnnotations getBinaryName getBound getClassFile getCompilationUnit getComponentType getDeclaredFields getDeclaredMethods getDeclaredModifiers getDeclaredTypes getDeclaringMethod getDeclaringClass getDimensions getElementType getTypeDeclaration getErasure getInterfaces getJavaElement getUnresolvedJavaElement getUnresolvedJavaElement getKey getKind getModifiers getName getPackage getPackageFragment getQualifiedName getSuperclass getTypeArguments getTypeBounds getTypeParameters getWildcard isGenericType isAnnotation isAnonymous isArray isAssignmentCompatible isCapture isCastCompatible isClass isDeprecated isEnum isEqualTo isFromSource isInterface isLocal isMember isNested isNullType isParameterizedType isPrimitive isRawType isRecovered isSubTypeCompatible isSynthetic isTopLevel isTypeVariable isUpperbound isWildcardType shouldBeRemoved toString wellKnownType canBeInstantiated capture collectSubstitutes constantPoolName debugName dimensions enclosingType erasure findSuperTypeErasingTo findSuperTypeWithSameErasure genericCast genericTypeSignature getPackage isAnnotationType isAnonymousType isArrayType isBaseType isBoundParameterizedType isCapture isClass isCompatibleWith isEnum isEquivalentTo isGenericType isHierarchyInconsistent isInterface isIntersectingWith isIntersectionType isLocalType isMemberType isNestedType isNumericType isParameterizedType isParameterizedWithOwnVariables isProvablyDistinctFrom isRawType isReifiable isThrowable isTypeArgumentContainedBy isTypeArgumentIntersecting isTypeVariable isUnboundWildcard isUncheckedException isWildcard kind leafComponentType needsUncheckedConversion qualifiedPackageName qualifiedSourceName signature sourceName swapUnresolved typeVariables NO_METHOD_BINDINGS NO_NAME NO_TYPE_BINDINGS NO_VARIABLE_BINDINGS VALID_MODIFIERS binding key resolver fields annotations methods members interfaces typeArguments bounds typeParameters id tagBits INT BYTE SHORT CHAR LONG FLOAT DOUBLE BOOLEAN NULL VOID org.aspectj.org.eclipse.jdt.core.dom.TypeBinding org.aspectj.org.eclipse.jdt.internal.compiler.lookup.TypeBinding  $NON-NLS-1$\r\n  no binary name for capture binding\r\n  pkgEnd is exclusive\r\n  if in a jar and no slash, it is a default package -> pkgEnd should be equal to jarSeparator\r\n  pkgEnd is exclusive\r\n  $NON-NLS-1$\r\n  resilience\r\n  $NON-NLS-1$\r\n  be resilient\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  case of a WilCardBinding that doesn't have a corresponding Java element\r\n  member or top level type\r\n  member type\r\n  top level type\r\n  type parameter\r\n  pkgEnd is exclusive\r\n  if in a jar and no slash, it is a default package -> pkgEnd should be equal to jarSeparator\r\n  local or anonymous type\r\n  does not exist\r\n  must use getElementAt(...) as there is no back pointer to the defining method (scope is null after resolution has ended)\r\n  clear the AccEnum bits\r\n  clear the AccAbstract and the AccInterface bits\r\n  clear the AccAbstract, AccAnnotation and the AccInterface bits\r\n  includes capture scenario\r\n  no superclass for interface types (interface | annotation type)\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  capture of ? extends  equivalent to return getTypeParameters().length > 0;\r\n  see https:  see https:  simulate capture in case checked binding did not properly get extracted from a reference\r\n  identical binding - equal (key or no key)\r\n  other binding missing\r\n  check return type\r\n  see https:  See values in the interface TagBits below\r\n  N stands for null even if it is never internally used\r\n  do not allow type variables to match with erasures for free\r\n  iterate superclass to avoid recording interfaces if searched supertype is class\r\n  X[][] has Object[] as an implicit supertype\r\n  fall-through\r\n  do not allow type variables  wildcard\r\n  intersection type\r\n  not a true wildcard (intersection type)\r\n  ? extends T  <=  ? extends ? extends T\r\n  forbide: Collection <=  ? extends Collection<?>\r\n  ? super T  <=  ? super ? super T\r\n  forbide: Collection <=  ? super Collection<?>\r\n  allow wildcard containment\r\n  static member types do not compare their enclosing\r\n  recurse\r\n  match \"? extends <upperBound>\" with \"?\"\r\n  match \"?\" with \"? extends <upperBound>\"\r\n  allow List<?> to match List<? extends Object> (and reciprocally)\r\n  JLS3: 4.5.1.1\r\n  TYPE_PARAM & ANY TYPE\r\n  WILDCARD & TYPE_PARAM\r\n  Object could always be a candidate\r\n  WILDCARD & WILDCARD\r\n  WILDCARD & OTHER TYPE\r\n  OTHER TYPE & TYPE_PARAM\r\n  OTHER TYPE & WILDCARD\r\n  OTHER TYPE & OTHER TYPE\r\n /*\r\n\t * @see ITypeBinding#getBinaryName()\r\n\t * @since 3.0\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getBound()\r\n\t */\r\n /*\r\n\t * Returns the class file for the given file name, or null if not found.\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.env.IDependent#getFileName()\r\n\t */\r\n /*\r\n\t * Returns the compilation unit for the given file name, or null if not found.\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.env.IDependent#getFileName()\r\n\t */\r\n /*\r\n\t * @see ITypeBinding#getComponentType()\r\n\t */\r\n /*\r\n\t * @see ITypeBinding#getDeclaredFields()\r\n\t */\r\n /*\r\n\t * @see ITypeBinding#getDeclaredMethods()\r\n\t */\r\n /*\r\n\t * @see ITypeBinding#getDeclaredModifiers()\r\n\t */\r\n /*\r\n\t * @see ITypeBinding#getDeclaredTypes()\r\n\t */\r\n /*\r\n\t * @see ITypeBinding#getDeclaringMethod()\r\n\t */\r\n /*\r\n\t * @see ITypeBinding#getDeclaringClass()\r\n\t */\r\n /*\r\n\t * @see ITypeBinding#getDimensions()\r\n\t */\r\n /*\r\n\t * @see ITypeBinding#getElementType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getTypeDeclaration()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getErasure()\r\n\t */\r\n /*\r\n\t * @see IBinding#getKey()\r\n\t */\r\n /*\r\n\t * @see IBinding#getKind()\r\n\t */\r\n /*\r\n\t * @see IBinding#getModifiers()\r\n\t */\r\n /*\r\n\t * @see ITypeBinding#getPackage()\r\n\t */\r\n /*\r\n\t * Returns the package that includes the given file name, or null if not found.\r\n\t * pkgEnd == jarSeparator if default package in a jar\r\n\t * pkgEnd > jarSeparator if non default package in a jar\r\n\t * pkgEnd > 0 if package not in a jar\r\n\t *\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.env.IDependent#getFileName()\r\n\t */\r\n /*\r\n\t * @see ITypeBinding#getSuperclass()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getTypeArguments()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getTypeBounds()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getTypeParameters()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getWildcard()\r\n\t * @since 3.1\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isGenericType()\r\n\t * @since 3.1\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isAnnotation()\r\n\t */\r\n /*\r\n\t * @see ITypeBinding#isAnonymous()\r\n\t */\r\n /*\r\n\t * @see ITypeBinding#isArray()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see ITypeBinding#isAssignmentCompatible(ITypeBinding)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see ITypeBinding#isCapture()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see ITypeBinding#isCastCompatible(ITypeBinding)\r\n\t */\r\n /*\r\n\t * @see ITypeBinding#isClass()\r\n\t */\r\n /*\r\n\t * @see IBinding#isDeprecated()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see ITypeBinding#isEnum()\r\n\t */\r\n /*\r\n\t * @see IBinding#isEqualTo(Binding)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ITypeBinding#isFromSource()\r\n\t */\r\n /*\r\n\t * @see ITypeBinding#isInterface()\r\n\t */\r\n /*\r\n\t * @see ITypeBinding#isLocal()\r\n\t */\r\n /*\r\n\t * @see ITypeBinding#isMember()\r\n\t */\r\n /*\r\n\t * @see ITypeBinding#isNested()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isParameterizedType()\r\n\t */\r\n /*\r\n\t * @see ITypeBinding#isPrimitive()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isRawType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see IBinding#isRecovered()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see ITypeBinding#isSubTypeCompatible(ITypeBinding)\r\n\t */\r\n /*\r\n\t * @see ITypeBinding#isTopLevel()\r\n\t */\r\n /*\r\n\t * @see ITypeBinding#isTypeVariable()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isUpperbound()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isWildcardType()\r\n\t */\r\n /*\r\n\t * For debugging purpose only.\r\n\t * @see java.lang.Object#toString()\r\n\t */\r\n /* Answer true if the receiver can be instantiated\r\n */\r\n /*\r\n * Answer the receiver's dimensions - 0 for non-array types\r\n */\r\n /* Answer the receiver's enclosing type... null if the receiver is a top level type.\r\n */\r\n /* Answer true if the receiver is an array\r\n */\r\n /* Answer true if the receiver is a base type\r\n */\r\n /* Answer true if the receiver type can be assigned to the argument type (right)\r\n */\r\n /* Answer true if the receiver's hierarchy has problems (always false for arrays & base types)\r\n */\r\n /* API\r\n * Answer the receiver's binding type from Binding.BindingID.\r\n */\r\n /*\r\n * Not all fields defined by this type (& its subclasses) are initialized when it is created.\r\n * Some are initialized only when needed.\r\n *\r\n * Accessors have been provided for some public fields so all TypeBindings have the same API...\r\n * but access public fields directly whenever possible.\r\n * Non-public fields have accessors which should be used everywhere you expect the field to be initialized.\r\n *\r\n * null is NOT a valid value for a non-public field... it just means the field is not initialized.\r\n */\r\n","CharConstant":"fromValue byteValue charValue doubleValue floatValue intValue longValue shortValue stringValue toString typeID value org.aspectj.org.eclipse.jdt.internal.compiler.impl.CharConstant  implicit cast to return type\r\n  implicit cast to return type\r\n  implicit cast to return type\r\n  implicit cast to return type\r\n  spec 15.17.11\r\n  $NON-NLS-1$\r\n","InvalidCursorLocation":"irritant NO_COMPLETION_INSIDE_UNICODE NO_COMPLETION_INSIDE_COMMENT NO_COMPLETION_INSIDE_STRING NO_COMPLETION_INSIDE_NUMBER serialVersionUID org.aspectj.org.eclipse.jdt.internal.codeassist.complete.InvalidCursorLocation  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  backward compatible\r\n","PackageFragmentInfo":"containsJavaResources getNonJavaResources setNonJavaResources nonJavaResources org.aspectj.org.eclipse.jdt.internal.core.PackageFragmentInfo  root doesn't exist: consider package has no nonJavaResources\r\n","UnsupportedPointcutPrimitiveException":"getUnsupportedPrimitive getInvalidPointcutExpression getUnsupportedPrimitive getInvalidPointcutExpression serialVersionUID unsupportedPrimitive pointcutExpression serialVersionUID unsupportedPrimitive pointcutExpression org.aspectj.weaver.tools.UnsupportedPointcutPrimitiveException org.aspectj.weaver.tools.UnsupportedPointcutPrimitiveException /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","ReflectionFactory":"makeCommand make getTypes makeCommand make getTypes OLD_AJC ECLIPSE NONE OLD_AJC ECLIPSE NONE org.aspectj.bridge.ReflectionFactory org.aspectj.bridge.ReflectionFactory  XXX lease, pool\r\n  XXX lease, pool\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","DOMCompilationUnit":"appendFragmentedContents canHaveChildren getHeader getJavaElement getName getNodeType initalizeHeader isAllowableChild newDOMNode normalize setHeader setName shareContents toString fHeader org.aspectj.org.eclipse.jdt.internal.core.jdom.DOMCompilationUnit  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","ITerminalSymbols":"TokenNameWHITESPACE TokenNameCOMMENT_LINE TokenNameCOMMENT_BLOCK TokenNameCOMMENT_JAVADOC TokenNameIdentifier TokenNameabstract TokenNameassert TokenNameboolean TokenNamebreak TokenNamebyte TokenNamecase TokenNamecatch TokenNamechar TokenNameclass TokenNamecontinue TokenNamedefault TokenNamedo TokenNamedouble TokenNameelse TokenNameextends TokenNamefalse TokenNamefinal TokenNamefinally TokenNamefloat TokenNamefor TokenNameif TokenNameimplements TokenNameimport TokenNameinstanceof TokenNameint TokenNameinterface TokenNamelong TokenNamenative TokenNamenew TokenNamenull TokenNamepackage TokenNameprivate TokenNameprotected TokenNamepublic TokenNamereturn TokenNameshort TokenNamestatic TokenNamestrictfp TokenNamesuper TokenNameswitch TokenNamesynchronized TokenNamethis TokenNamethrow TokenNamethrows TokenNametransient TokenNametrue TokenNametry TokenNamevoid TokenNamevolatile TokenNamewhile TokenNameIntegerLiteral TokenNameLongLiteral TokenNameFloatingPointLiteral TokenNameDoubleLiteral TokenNameCharacterLiteral TokenNameStringLiteral TokenNamePLUS_PLUS TokenNameMINUS_MINUS TokenNameEQUAL_EQUAL TokenNameLESS_EQUAL TokenNameGREATER_EQUAL TokenNameNOT_EQUAL TokenNameLEFT_SHIFT TokenNameRIGHT_SHIFT TokenNameUNSIGNED_RIGHT_SHIFT TokenNamePLUS_EQUAL TokenNameMINUS_EQUAL TokenNameMULTIPLY_EQUAL TokenNameDIVIDE_EQUAL TokenNameAND_EQUAL TokenNameOR_EQUAL TokenNameXOR_EQUAL TokenNameREMAINDER_EQUAL TokenNameLEFT_SHIFT_EQUAL TokenNameRIGHT_SHIFT_EQUAL TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL TokenNameOR_OR TokenNameAND_AND TokenNamePLUS TokenNameMINUS TokenNameNOT TokenNameREMAINDER TokenNameXOR TokenNameAND TokenNameMULTIPLY TokenNameOR TokenNameTWIDDLE TokenNameDIVIDE TokenNameGREATER TokenNameLESS TokenNameLPAREN TokenNameRPAREN TokenNameLBRACE TokenNameRBRACE TokenNameLBRACKET TokenNameRBRACKET TokenNameSEMICOLON TokenNameQUESTION TokenNameCOLON TokenNameCOMMA TokenNameDOT TokenNameEQUAL TokenNameEOF TokenNameERROR TokenNameenum TokenNameAT TokenNameELLIPSIS TokenNameconst TokenNamegoto org.aspectj.org.eclipse.jdt.core.compiler.ITerminalSymbols","IBinaryMethod":"getAnnotations getDefaultValue getExceptionTypeNames getGenericSignature getMethodDescriptor getParameterAnnotations getSelector getTagBits isClinit org.aspectj.org.eclipse.jdt.internal.compiler.env.IBinaryMethod","KindedPointcut":"getSignature couldMatchKinds couldEverMatchSameJoinPointsAs fastMatch matchInternal warnOnConfusingSig equals hashCode toString postRead write read resolveBindings findResidueInternal concretize1 parameterizeWith getKind accept getSignature couldMatchKinds couldEverMatchSameJoinPointsAs fastMatch matchInternal warnOnConfusingSig equals hashCode toString postRead write read resolveBindings findResidueInternal concretize1 parameterizeWith getKind accept kind signature matchKinds munger kind signature matchKinds munger org.aspectj.weaver.patterns.KindedPointcut org.aspectj.weaver.patterns.KindedPointcut  only set after concretization\r\n  Don't do all this processing if we don't need to !\r\n  no warnings for declare error  warning never needed if the declaring type is any\r\n  warning not needed if match type couldn't ever be the declaring type\r\n  exact declaring type then warning not needed.\r\n  this will be reported elsewhere.\r\n  XXX Put out another XLINT in this case?\r\n  PR60015 - Don't report the warning if the declaring type is object and 'this' is an interface\r\n  Bug fix 60936\r\n  no parameterized types\r\n  fields can't have a void type!\r\n  no parameterized types in declaring type position\r\n  no throwable parameterized types\r\n  no throwable parameterized types\r\n  no throwable parameterized types\r\n  list in capturing type identifiers.\r\n  only set after concretization\r\n  Don't do all this processing if we don't need to !\r\n  no warnings for declare error  warning never needed if the declaring type is any\r\n  warning not needed if match type couldn't ever be the declaring type\r\n  exact declaring type then warning not needed.\r\n  this will be reported elsewhere.\r\n  XXX Put out another XLINT in this case?\r\n  PR60015 - Don't report the warning if the declaring type is object and 'this' is an interface\r\n  Bug fix 60936\r\n  no parameterized types\r\n  fields can't have a void type!\r\n  no parameterized types in declaring type position\r\n  no throwable parameterized types\r\n  no throwable parameterized types\r\n  no throwable parameterized types\r\n  list in capturing type identifiers.\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#couldMatchKinds()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#couldMatchKinds()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","CompletionOnJavadocTypeParamReference":"addCompletionFlags getCompletionFlags printExpression reportError completionFlags missingParams org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnJavadocTypeParamReference  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.AllocationExpression#printExpression(int, java.lang.StringBuffer)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.SingleNameReference#reportError(org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BlockScope)\r\n\t */\r\n","InvalidInputException":"serialVersionUID org.aspectj.org.eclipse.jdt.core.compiler.InvalidInputException  backward compatible\r\n","PathCollector":"acceptIndexMatch getPaths paths org.aspectj.org.eclipse.jdt.internal.core.search.PathCollector /* a set of resource paths */\r\n /* (non-Javadoc)\r\n\t * @seeIndexQueryRequestor#acceptIndexMatch(IndexRecord, SearchParticipant, SearchPattern)\r\n\t */\r\n","ConditionalExpression":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getExpression setExpression getThenExpression setThenExpression getElseExpression setElseExpression memSize treeSize analyseCode generateCode generateOptimizedBoolean nullStatus optimizedBooleanConstant printExpressionNoParenthesis resolveType traverse EXPRESSION_PROPERTY THEN_EXPRESSION_PROPERTY ELSE_EXPRESSION_PROPERTY PROPERTY_DESCRIPTORS conditionExpression thenExpression elseExpression condition valueIfTrue valueIfFalse optimizedBooleanConstant optimizedIfTrueConstant optimizedIfFalseConstant trueInitStateIndex falseInitStateIndex mergedInitStateIndex org.aspectj.org.eclipse.jdt.core.dom.ConditionalExpression org.aspectj.org.eclipse.jdt.internal.compiler.ast.ConditionalExpression  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  lazy init must be thread-safe for readers\r\n  lazy init must be thread-safe for readers\r\n  treat Code as free\r\n  for local variables table attributes\r\n  process the if-true part\r\n  process the if-false part\r\n  merge if-true & if-false initializations\r\n  if ((t && (v = t)) ? t : t && (v = f)) r = v;  -- ok\r\n  Generate code for the condition\r\n  Jump over the else part\r\n  Tune codestream stack size\r\n  Then code generation\r\n  End of if statement\r\n  May loose some local variable initializations : affecting the local variable attributes\r\n  implicit conversion\r\n  constant\r\n  non boolean values\r\n  Generate code for the condition\r\n  no need to jump over, since branched to false already\r\n  implicit falling through the TRUE case\r\n  implicit falling through the FALSE case\r\n  no need to jump over, since branched to true already\r\n  Jump over the else part\r\n  Then code generation\r\n  End of if statement\r\n  May loose some local variable initializations : affecting the local variable attributes\r\n  no implicit conversion for boolean values\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  JLS3 15.25\r\n  will check later on\r\n  will check later on\r\n  bool ? nonBaseType : nonBaseType\r\n  bool ? nonBaseType : baseType\r\n  unboxing\r\n  unboxing\r\n  bool ? baseType : nonBaseType\r\n  unboxing\r\n  unboxing\r\n  boxing\r\n  boxing\r\n  bool ? baseType : baseType\r\n  Propagate the constant value from the valueIfTrue and valueIFFalse expression if it is possible\r\n  from valueIFTrue or valueIfFalse to the receiver constant\r\n  harmed the implicit conversion\r\n  Propagate the optimized boolean constant if possible\r\n  a ? true : true    (Short x Byte) or (Byte x Short)\"\r\n  <Byte|Short|Char> x constant(Int)  ---> <Byte|Short|Char>   and reciprocally\r\n  int\r\n  long\r\n  float\r\n  double\r\n  Numeric types\r\n  Type references (null null is already tested)\r\n  < 1.5 : one operand must be convertible to the other\r\n  >= 1.5 : LUB(operand types) must exist\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","ITypeRoot":"findPrimaryType getElementAt getWorkingCopy org.aspectj.org.eclipse.jdt.core.ITypeRoot","MakeDeclsPublicVisitor":"endVisit endVisit endVisit endVisit endVisit org.aspectj.ajdt.internal.compiler.ast.MakeDeclsPublicVisitor  import org.aspectj.org.eclipse.jdt.internal.compiler.ast.AnonymousLocalTypeDeclaration;\r\n  import org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalTypeDeclaration;\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.ASTVisitor#endVisit(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration, org.eclipse.jdt.internal.compiler.lookup.BlockScope)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.ASTVisitor#endVisit(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration, org.eclipse.jdt.internal.compiler.lookup.ClassScope)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","EvaluationResult":"addProblem getEvaluationID getEvaluationType getProblems getValue getValueDisplayString getValueTypeName hasErrors hasProblems hasValue hasWarnings toString NO_PROBLEMS evaluationID evaluationType problems displayString typeName T_VARIABLE T_CODE_SNIPPET T_IMPORT T_PACKAGE T_INTERNAL org.aspectj.org.eclipse.jdt.internal.eval.EvaluationResult  Not yet implemented\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","EclipseResolvedMember":"hasAnnotation getAnnotations getAnnotationOfType getAnnotationDefaultValue getAnnotationTypes getParameterNames getEclipseAnnotations getTypeDeclaration NO_ARGS realBinding argumentNames w cachedAnnotationTypes eclipseFactory org.aspectj.ajdt.internal.compiler.lookup.EclipseResolvedMember  ensure resolved\r\n  ensure resolved\r\n  Found the one\r\n  TODO does not cope with many cases...\r\n  ensure resolved\r\n  dont\r\n  being reported?\r\n /* *******************************************************************\r\n * Copyright (c) 2006 Contributors\r\n * All rights reserved.\r\n * This program and the accompanying materials are made available\r\n * under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *     Andy Clement                 initial implementation\r\n * ******************************************************************/\r\n","DefaultBindingResolver":"findDeclaringNode findDeclaringNode getBinding getCorrespondingNode getMethodBinding getMemberValuePairBinding getPackageBinding getTypeArguments getTypeBinding getTypeBinding getTypeBinding getTypeBinding getVariableBinding getWorkingCopyOwner getVariableBinding getAnnotationInstance isResolvedTypeInferredFromExpectedType isResolvedTypeInferredFromExpectedType lookupEnvironment recordScope resolveBoxing resolveUnboxing resolveConstantExpressionValue resolveConstructor resolveConstructor resolveConstructor resolveConstructor resolveExpressionType resolveField resolveField resolveImport resolveMember resolveMethod resolveMethod resolveMethod resolveTypeBindingForName resolveName resolvePackage resolveReference resolveMemberValuePair resolveReference resolveType resolveType resolveType resolveType resolveType resolveTypeParameter resolveVariable resolveVariable resolveWellKnownType resolveAnnotation scope store updateKey resolveArrayType bindingKeysToBindings compilerBindingsToASTBindings astNodesToBlockScope bindingsToAstNodes bindingTables newAstToOldAst scope workingCopyOwner isRecoveredBinding org.aspectj.org.eclipse.jdt.core.dom.DefaultBindingResolver  should be an AllocationExpression\r\n  anonymous type case\r\n  it is a type\r\n  if it is not a package, it has to be a type\r\n  it is a type\r\n  it is a type\r\n  one-based\r\n  use type from previous binding (no capture needed for array type)\r\n  in this case we want to get the next field declaring's class\r\n  use type from first binding (no capture needed for array type)\r\n  an extra lookup is required\r\n  it is a type\r\n  it is a type\r\n  it is a type\r\n  it is a type\r\n  it is a type\r\n  one-based\r\n  an extra lookup is required\r\n  it is a type\r\n  this is a variable or a field\r\n  this only happens if a type name has the same name as its package\r\n  retrieve the old ast node\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n\t * Holds on binding tables that can be shared by several ASTs.\r\n\t */\r\n /*\r\n\t * The shared binding tables accros ASTs.\r\n\t */\r\n /*\r\n\t * Method declared on BindingResolver.\r\n\t */\r\n /*\r\n\t * Method declared on BindingResolver.\r\n\t */\r\n /*\r\n\t * Method declared on BindingResolver.\r\n\t */\r\n /*\r\n\t * Method declared on BindingResolver.\r\n\t */\r\n /*\r\n\t * Method declared on BindingResolver.\r\n\t */\r\n /*\r\n\t\t\t\t\t * http://dev.eclipse.org/bugs/show_bug.cgi?id=24449\r\n\t\t\t\t\t */\r\n /*\r\n\t\t\t\t * http://dev.eclipse.org/bugs/show_bug.cgi?id=24449\r\n\t\t\t\t */\r\n /*\r\n\t * Method declared on BindingResolver.\r\n\t */\r\n /*\r\n\t * Method declared on BindingResolver.\r\n\t */\r\n /*\r\n\t * @see BindingResolver#resolveBoxing(Expression)\r\n\t */\r\n /*\r\n\t * @see BindingResolver#resolveUnboxing(Expression)\r\n\t */\r\n /*\r\n\t * @see BindingResolver#resolveConstantExpressionValue(Expression)\r\n\t */\r\n /*\r\n\t * @see BindingResolver#resolveConstructor(ClassInstanceCreation)\r\n\t */\r\n /*\r\n\t * @see BindingResolver#resolveConstructor(ConstructorInvocation)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.BindingResolver#resolveConstructor(org.aspectj.org.eclipse.jdt.core.dom.EnumConstantDeclaration)\r\n\t */\r\n /*\r\n\t * @see BindingResolver#resolveConstructor(SuperConstructorInvocation)\r\n\t */\r\n /*\r\n\t * Method declared on BindingResolver.\r\n\t */\r\n /*\r\n\t * @see BindingResolver#resolveField(FieldAccess)\r\n\t */\r\n /*\r\n\t * @see BindingResolver#resolveField(SuperFieldAccess)\r\n\t */\r\n /*\r\n\t * @see BindingResolver#resolveImport(ImportDeclaration)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.BindingResolver#resolveMember(org.aspectj.org.eclipse.jdt.core.dom.AnnotationTypeMemberDeclaration)\r\n\t */\r\n /*\r\n\t * Method declared on BindingResolver.\r\n\t */\r\n /*\r\n\t * Method declared on BindingResolver.\r\n\t */\r\n /*\r\n\t * Method declared on BindingResolver.\r\n\t */\r\n /* This is the case for a name which is part of a qualified name that\r\n\t\t\t\t * cannot be resolved. See PR 13063.\r\n\t\t\t\t */\r\n /* This is the case for a name which is part of a qualified name that\r\n\t\t\t\t * cannot be resolved. See PR 13063.\r\n\t\t\t\t */\r\n /*\r\n\t\t\t\t\t\t * http://dev.eclipse.org/bugs/show_bug.cgi?id=24449\r\n\t\t\t\t\t\t */\r\n /*\r\n\t * Method declared on BindingResolver.\r\n\t */\r\n /*\r\n\t * @see BindingResolver#resolvePackage(PackageDeclaration)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see BindingResolver#resolveReference(MemberRef)\r\n     * @since 3.0\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see BindingResolver#resolveMemberValuePair(MemberValuePair)\r\n     * @since 3.2\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see BindingResolver#resolveReference(MethodRef)\r\n     * @since 3.0\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.BindingResolver#resolveType(org.aspectj.org.eclipse.jdt.core.dom.AnnotationTypeDeclaration)\r\n\t */\r\n /*\r\n\t * @see BindingResolver#resolveType(AnonymousClassDeclaration)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.BindingResolver#resolveType(org.aspectj.org.eclipse.jdt.core.dom.EnumDeclaration)\r\n\t */\r\n /* Handle the void primitive type returned by getReturnType for a method declaration\r\n\t\t\t * that is a constructor declaration. It prevents null from being returned\r\n\t\t\t */\r\n /*\r\n\t * Method declared on BindingResolver.\r\n\t */\r\n /*\r\n\t * Method declared on BindingResolver.\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.BindingResolver#resolveVariable(org.aspectj.org.eclipse.jdt.core.dom.EnumConstantDeclaration)\r\n\t */\r\n /*\r\n\t * Method declared on BindingResolver.\r\n\t */\r\n /*\r\n\t * Method declared on BindingResolver.\r\n\t */\r\n /*\r\n\t * Method declared on BindingResolver.\r\n\t */\r\n /*\r\n\t * Method declared on BindingResolver.\r\n\t */\r\n /*\r\n\t * Method declared on BindingResolver.\r\n\t */\r\n","And":"accept toString equals getLeft getRight accept toString equals getLeft getRight left right left right org.aspectj.weaver.ast.And org.aspectj.weaver.ast.And /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","MementoTokenizer":"hasMoreTokens nextToken COUNT JAVAPROJECT PACKAGEFRAGMENTROOT PACKAGEFRAGMENT FIELD METHOD INITIALIZER COMPILATIONUNIT CLASSFILE TYPE PACKAGEDECLARATION IMPORTDECLARATION LOCALVARIABLE TYPE_PARAMETER memento length index org.aspectj.org.eclipse.jdt.internal.core.util.MementoTokenizer","EclipseSourceLocation":"getCompilationResult getOffset getStartPos getEndPos getSourceFile getLine getColumn getEndLine getContext toString hashCode equals getSourceFileName NO_CONTEXT result startPos endPos filename file startLine endLine column context hashCode org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceLocation  EclipseSourceContext eclipseContext;\r\n  lazy but final\r\n  new String(result.fileName));\r\n  || (0 == result.fileName.length)) {\r\n  1-based\r\n  JJH added check that lineNumber is in legal range to avoid exceptions\r\n  ?? which of n>1 problems?\r\n  other parts important?\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","CFlowPlusState":"get get get state state state org.aspectj.runtime.internal.CFlowPlusState org.aspectj.runtime.internal.CFlowPlusState org.aspectj.runtime.internal.CFlowPlusState /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","CorrectionEngine":"computeCorrections computeCorrections computeCorrections correct accept getAllWarningTokens getProblemArguments getWarningToken correctionStart correctionEnd prefixLength compilationUnit correctionRequestor CLASSES INTERFACES IMPORT METHOD FIELD LOCAL filter completionRequestor org.aspectj.org.eclipse.jdt.core.CorrectionEngine  $NON-NLS-1$\r\n  Type correction\r\n  Method correction\r\n  Field and local variable correction\r\n  search last segment position\r\n  search completion position\r\n /*\r\n\t * Ask the engine to compute a correction for the specified problem\r\n\t * of the given compilation unit.\r\n\t * Correction results are answered through a requestor.\r\n\t *\r\n\t *  @param unit org.aspectj.org.eclipse.jdt.internal.core.ICompilationUnit\r\n\t *      the compilation unit.\r\n\t *  \r\n\t * \t@param id int\r\n\t * \t\tthe id of the problem.\r\n\t * \r\n\t * \t@param start int\r\n\t * \t\ta position in the source where the error begin.\r\n\t *\r\n\t *  @param end int\r\n\t *      a position in the source where the error finish. \r\n\t * \r\n\t * \t@param arguments String[]\r\n\t * \t\targuments of the problem.\r\n\t * \r\n\t * @exception IllegalArgumentException if <code>requestor</code> is <code>null</code>\r\n\t * @exception JavaModelException currently this exception is never thrown, but the opportunity to thrown an exception\r\n\t * \twhen the correction failed is kept for later.\r\n\t * @since 2.0\r\n\t */\r\n","LocalVariableDeclarationMatch":"org.aspectj.org.eclipse.jdt.core.search.LocalVariableDeclarationMatch","AjPipeliningCompilerAdapter":"afterDietParsing beforeCompiling beforeProcessing beforeResolving afterResolving beforeAnalysing afterAnalysing beforeGenerating afterGenerating afterCompiling afterProcessing queueForWeaving acceptResult getBinarySourcesFrom notifyRequestor weaveQueuedEntries ensureWeaverInitialized postWeave containsAnAspect containsAnAspect isAspect getPipelineDebugOutput getResultsPendingWeave compiler weaver eWorld isBatchCompile reportedErrors isXTerminateAfterCompilation proceedOnError inJava5Mode noAtAspectJAnnotationProcessing intermediateResultsRequestor progressListener outputFileNameProvider binarySourceProvider weaverMessageHandler binarySourceSetForFullWeave processingToken resolvingToken analysingToken generatingToken incrementalCompilationState resultsPendingWeave pipelineStalled weaverInitialized toWaitFor droppingBackToFullBuild aspectSig pipelineTesting pipelineOutput debugPipeline org.aspectj.ajdt.internal.compiler.AjPipeliningCompilerAdapter  Maintains a list of whats weaving - whilst the pipeline is stalled, this accumulates aspects.\r\n  pipelining info\r\n  If we determine we are going to drop back to a full build - don't need to tell the weaver to report adviceDidNotMatch\r\n  Do we need to reset the message handler or create a new one? (This saves a ton of memory lost on incremental compiles...)\r\n  TODO break or exit here?\r\n  Break the units into two lists...\r\n  ...and put them back together, aspects first\r\n  Work out how long to stall the pipeline\r\n  TESTING\r\n  } else {\r\n  nothing got compiled, doesnt mean there is nothing to do... (binary weaving)\r\n  Don't wrap AbortCompilation exceptions!\r\n  which will then then log it as a compiler problem.\r\n  not great ... but one more check before we continue, see pr132314\r\n  no point weaving... just tell the requestor we're done\r\n  Map is fileName |-> List<UnwovenClassFile>\r\n  XXX - see bugs 57432,58679 - final parameter on next call should be \"compiler.options.maxProblemsPerUnit\"\r\n  by doing this only once, are we saying needToReweaveWorld can't change once the aspects have\r\n  been stuffed into the weaver?\r\n  dont need to do those again\r\n  force full recompilation from source\r\n  loop through top level types in the file\r\n  loop through inner types\r\n  loop through inner types\r\n  avoid an NPE when something else is wrong in this system ... the real problem will be reported elsewhere\r\n  force\r\n  resolution\r\n  another problem is being reported, so don't crash here\r\n  check for annotation style\r\n  code style\r\n /* fileName > List<UnwovenClassFile> */\r\n /* InterimResult */\r\n /* fileName |-> List<UnwovenClassFile> */\r\n /*\r\n\t * Called from the weaverAdapter once it has finished weaving the class files associated with a given compilation result.\r\n\t */\r\n","EvaluationContext":"allVariables complete deleteVariable deployCodeSnippetClassIfNeeded evaluate evaluate evaluateImports evaluateVariable evaluateVariables getCodeSnippetBytes getCodeSnippetSource getImports getPackageName getRootCodeSnippetBinary getVarClassName newVariable select setImports setLineSeparator setPackageName TIMING VAR_CLASS_COUNTER CODE_SNIPPET_COUNTER variables variableCount imports packageName varsChanged installedVars codeSnippetBinary lineSeparator declaringTypeName localVariableModifiers localVariableTypeNames localVariableNames isStatic isConstructorCall hasErrors org.aspectj.org.eclipse.jdt.internal.eval.EvaluationContext  default value\r\n  Do nothing\r\n  $NON-NLS-1$\r\n  Should never happen since we compiled this type\r\n  Deploy CodeSnippet class (only once)\r\n  Initialialize context\r\n  Reinitialize context to default values\r\n  Install new variables if needed\r\n  $NON-NLS-3$   Send code snippet on target\r\n  Compile code snippet if there was no errors while evaluating the variables\r\n  is needed to resolve a nested type\r\n  Send classes\r\n  Remember that the variables have been installed\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  assume variables is never empty\r\n  $NON-NLS-1$\r\n  this may change the visibility of the variable's types\r\n  this may change the visibility of the variable's types\r\n /* do names implicitly refer to a given type */\r\n /* can 'this' be used in this context */\r\n","ContextBasedMatcher":"couldMatchJoinPointsInType couldMatchJoinPointsInType mayNeedDynamicTest matchesStatically matchesDynamically couldMatchJoinPointsInType couldMatchJoinPointsInType mayNeedDynamicTest matchesStatically matchesDynamically org.aspectj.weaver.tools.ContextBasedMatcher org.aspectj.weaver.tools.ContextBasedMatcher /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","AnnotationFinder":"setClassLoader setWorld getAnnotation getAnnotationFromMember getAnnotationOfType getAnnotationDefaultValue getAnnotationFromClass getAnnotations getParameterAnnotationTypes setClassLoader setWorld getAnnotation getAnnotationFromMember getAnnotationOfType getAnnotationDefaultValue getAnnotationFromClass getAnnotations getParameterAnnotationTypes org.aspectj.weaver.reflect.AnnotationFinder org.aspectj.weaver.reflect.AnnotationFinder /* ResolvedType */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* ResolvedType */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","IConstantPoolEntry":"getKind getClassInfoNameIndex getClassIndex getNameAndTypeIndex getStringIndex getStringValue getIntegerValue getFloatValue getDoubleValue getLongValue getNameAndTypeInfoDescriptorIndex getNameAndTypeInfoNameIndex getClassInfoName getClassName getFieldName getMethodName getFieldDescriptor getMethodDescriptor getUtf8Value getUtf8Length org.aspectj.org.eclipse.jdt.core.util.IConstantPoolEntry","PatternParser":"setPointcutDesignatorHandlers maybeParsePerClause parsePerCflow parsePerObject parsePerTypeWithin parsePerSingleton parseDeclare parseDeclareAnnotation parseDeclareAtType parseDeclareAtMethod parseDeclareAtField parseDominates parseParents parseSoft parseErrorOrWarning parsePointcut parseNotOrPointcut parseAtomicPointcut parseSinglePointcut assertNoTypeVariables parseAnnotationPointcut parseAtAnnotationPointcut parseConstructorSignaturePattern parseWithinCodePointcut parseCflowPointcut parseWithinPointcut parseThisOrTargetPointcut parseThisOrTargetAnnotationPointcut parseWithinAnnotationPointcut parseWithinCodeAnnotationPointcut parseArgsPointcut parseArgsAnnotationPointcut parseReferencePointcut parseDesignatorPointcut parseDottedIdentifier parseKindedPointcut parseMonitorPointcut parseTypePattern parseTypePattern parseNotOrTypePattern parseAtomicTypePattern setAnnotationPatternForTypePattern maybeParseAnnotationPattern maybeParseSingleAnnotationPattern parseAnnotationValues parseSingleTypePattern parseSingleTypePattern parseHasMethodTypePattern parseHasFieldTypePattern parseGenericsWildcardTypePattern parseAnnotationNameOrVarTypePattern parseSimpleAnnotationName parseDottedNamePattern parseAnnotationNameValuePattern parseNamePattern checkLegalName isAdjacent parseModifiersPattern parseArgumentsPattern parseArgumentsAnnotationPattern parseOptionalThrowsPattern parseMethodOrConstructorSignaturePattern maybeEatNew parseFieldSignaturePattern tryToExtractName maybeParseTypeVariableList maybeParseSimpleTypeVariableList maybeParseTypeParameterList parseTypeVariable maybeParseAdditionalInterfaceBounds parsePossibleStringSequence parseStringLiteral parseIdentifier eatIdentifier maybeEatIdentifier eat eat nextToken maybeEatAdjacent maybeEat maybeEatIdentifier peek checkEof setPointcutDesignatorHandlers maybeParsePerClause parsePerCflow parsePerObject parsePerTypeWithin parsePerSingleton parseDeclare parseDeclareAnnotation parseDeclareAtType parseDeclareAtMethod parseDeclareAtField parseDominates parseParents parseSoft parseErrorOrWarning parsePointcut parseNotOrPointcut parseAtomicPointcut parseSinglePointcut assertNoTypeVariables parseAnnotationPointcut parseAtAnnotationPointcut parseConstructorSignaturePattern parseWithinCodePointcut parseCflowPointcut parseWithinPointcut parseThisOrTargetPointcut parseThisOrTargetAnnotationPointcut parseWithinAnnotationPointcut parseWithinCodeAnnotationPointcut parseArgsPointcut parseArgsAnnotationPointcut parseReferencePointcut parseDesignatorPointcut parseDottedIdentifier parseKindedPointcut parseMonitorPointcut parseTypePattern parseTypePattern parseNotOrTypePattern parseAtomicTypePattern setAnnotationPatternForTypePattern maybeParseAnnotationPattern maybeParseSingleAnnotationPattern parseAnnotationValues parseSingleTypePattern parseSingleTypePattern parseHasMethodTypePattern parseHasFieldTypePattern parseGenericsWildcardTypePattern parseAnnotationNameOrVarTypePattern parseSimpleAnnotationName parseDottedNamePattern parseAnnotationNameValuePattern parseNamePattern checkLegalName isAdjacent parseModifiersPattern parseArgumentsPattern parseArgumentsAnnotationPattern parseOptionalThrowsPattern parseMethodOrConstructorSignaturePattern maybeEatNew parseFieldSignaturePattern tryToExtractName maybeParseTypeVariableList maybeParseSimpleTypeVariableList maybeParseTypeParameterList parseTypeVariable maybeParseAdditionalInterfaceBounds parsePossibleStringSequence parseStringLiteral parseIdentifier eatIdentifier maybeEatIdentifier eat eat nextToken maybeEatAdjacent maybeEat maybeEatIdentifier peek checkEof tokenSource sourceContext allowHasTypePatterns pointcutDesignatorHandlers world pendingRightArrows tokenSource sourceContext allowHasTypePatterns pointcutDesignatorHandlers world pendingRightArrows org.aspectj.weaver.patterns.PatternParser org.aspectj.weaver.patterns.PatternParser  PTWIMPL Parse the pertypewithin clause\r\n  treat as a reference pointcut\r\n  @style support allows if(), if(true), if(false)\r\n  TODO - Alex has some token stuff going on here to get a readable name in place of \"\"...\r\n  String[] typeVariables = maybeParseSimpleTypeVariableList();\r\n  parseIdentifier();\r\n  parseIdentifier();\r\n  parseIdentifier();\r\n  parseIdentifier();\r\n  TypePattern type = TypePattern.ANY;\r\n  type,\r\n  type,\r\n  might be parameter annotation pattern or type annotation pattern\r\n  And and just return the Not directly (pr228980)\r\n  considered as part of the not, it is outside the not (pr228980)\r\n  need the test because (A+) should not set subtypes to false!\r\n  ???\r\n  LALR(2) - fix by making \"!@\" a single token\r\n  not for us!\r\n  not for us!\r\n  PVAL cope with annotation values at other places in this code\r\n  it was a key!\r\n  did they specify just a single entry 'v'  or a keyvalue pair 'k=v'\r\n  keep going whilst there are ','\r\n  parsing the a=b,c=d.)\r\n  ??? what about the source location of any's????\r\n  match.\r\n  For optimized syntax that allows binding directly to annotation values (pr234943)\r\n  the @ has already been eaten...\r\n  Remember if we just dealt with an ellipsis (PR61536)\r\n  System.err.println(\"literal kind: \" + tok.getString());\r\n  ??? so-so\r\n  go on\r\n  no elipsis or dotted name part\r\n  System.err.println(\"parsed: \" + names);\r\n  int startPos =\r\n  keep going until we hit ')' or '=' or ','\r\n  keep track of nested brackets\r\n  supported form 'a.b.c.d' or just 'a'\r\n  System.err.println(\"literal kind: \" + tok.getString());\r\n  ??? so-so\r\n  ()\r\n  ..\r\n  ???might want an error for a second ! without a paren\r\n  XXX should add check for any Java keywords\r\n  here we can check for 'new'\r\n  System.err.println(\"parsed field: \" + declaringType.toString());\r\n  of the form execution<T,S,V> - allows identifiers only\r\n  to be one less otherwise the end position isn't set correctly.\r\n  handle problem of >> and >>> being lexed as single tokens\r\n  XXX doesn't handle errors for extra tokens very well (sometimes ignores)\r\n  PTWIMPL Parse the pertypewithin clause\r\n  treat as a reference pointcut\r\n  @style support allows if(), if(true), if(false)\r\n  TODO - Alex has some token stuff going on here to get a readable name in place of \"\"...\r\n  String[] typeVariables = maybeParseSimpleTypeVariableList();\r\n  parseIdentifier();\r\n  parseIdentifier();\r\n  parseIdentifier();\r\n  parseIdentifier();\r\n  TypePattern type = TypePattern.ANY;\r\n  type,\r\n  type,\r\n  might be parameter annotation pattern or type annotation pattern\r\n  And and just return the Not directly (pr228980)\r\n  considered as part of the not, it is outside the not (pr228980)\r\n  need the test because (A+) should not set subtypes to false!\r\n  ???\r\n  LALR(2) - fix by making \"!@\" a single token\r\n  not for us!\r\n  not for us!\r\n  PVAL cope with annotation values at other places in this code\r\n  it was a key!\r\n  did they specify just a single entry 'v'  or a keyvalue pair 'k=v'\r\n  keep going whilst there are ','\r\n  parsing the a=b,c=d.)\r\n  ??? what about the source location of any's????\r\n  match.\r\n  For optimized syntax that allows binding directly to annotation values (pr234943)\r\n  the @ has already been eaten...\r\n  Remember if we just dealt with an ellipsis (PR61536)\r\n  System.err.println(\"literal kind: \" + tok.getString());\r\n  ??? so-so\r\n  go on\r\n  no elipsis or dotted name part\r\n  System.err.println(\"parsed: \" + names);\r\n  int startPos =\r\n  keep going until we hit ')' or '=' or ','\r\n  keep track of nested brackets\r\n  supported form 'a.b.c.d' or just 'a'\r\n  System.err.println(\"literal kind: \" + tok.getString());\r\n  ??? so-so\r\n  ()\r\n  ..\r\n  ???might want an error for a second ! without a paren\r\n  XXX should add check for any Java keywords\r\n  here we can check for 'new'\r\n  System.err.println(\"parsed field: \" + declaringType.toString());\r\n  of the form execution<T,S,V> - allows identifiers only\r\n  to be one less otherwise the end position isn't set correctly.\r\n  handle problem of >> and >>> being lexed as single tokens\r\n  XXX doesn't handle errors for extra tokens very well (sometimes ignores)\r\n /*\r\n\t\t * simplified design requires use of raw types for declare parents, no generic spec. allowed\r\n\t\t * String[] typeParameters = maybeParseSimpleTypeVariableList();\r\n\t\t */\r\n /* String kind = */\r\n /*String kind = */\r\n /*String,String*/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n *               2005 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation\r\n *     Adrian Colyer many updates since.... \r\n * ******************************************************************/\r\n /*\r\n\t\t * simplified design requires use of raw types for declare parents, no generic spec. allowed\r\n\t\t * String[] typeParameters = maybeParseSimpleTypeVariableList();\r\n\t\t */\r\n /* String kind = */\r\n /*String kind = */\r\n /*String,String*/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n *               2005 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation\r\n *     Adrian Colyer many updates since.... \r\n * ******************************************************************/\r\n","FloatUtil":"valueOfHexFloatLiteral valueOfHexDoubleLiteral convertHexFloatingPointLiteralToBits DOUBLE_FRACTION_WIDTH DOUBLE_PRECISION MAX_DOUBLE_EXPONENT MIN_NORMALIZED_DOUBLE_EXPONENT MIN_UNNORMALIZED_DOUBLE_EXPONENT DOUBLE_EXPONENT_BIAS DOUBLE_EXPONENT_SHIFT SINGLE_FRACTION_WIDTH SINGLE_PRECISION MAX_SINGLE_EXPONENT MIN_NORMALIZED_SINGLE_EXPONENT MIN_UNNORMALIZED_SINGLE_EXPONENT SINGLE_EXPONENT_BIAS SINGLE_EXPONENT_SHIFT org.aspectj.org.eclipse.jdt.internal.compiler.util.FloatUtil  Step 1: process the '0x' lead-in\r\n  Step 2: process leading '0's either before or after the '.'\r\n  leading zeros have been trimmed\r\n  record virtual '.' as being to right of all digits\r\n  middle hex digits\r\n  ignore leading binary 0's in hex digit\r\n  Step 4: process the 'P'\r\n  Step 5: process the exponent\r\n  Step 6: process the optional 'f' or 'd'\r\n  Step 7: handle mantissa of zero\r\n  ensure that top bit (as opposed to hex digit) is 1\r\n  Step 9: convert double literals to IEEE double\r\n  less bits than the faction can hold - pad on right with 0s\r\n  more bits than we can keep\r\n  round to DOUBLE_PRECISION bits\r\n  how many bits to move '.' to before leading hex digit\r\n  e.g., 0x0.08p0 has scaleFactor == -4\r\n  e.g., 0x0.01p0 has scaleFactorCompensation == +3\r\n  e.g., 0x80.0p0 has scaleFactor == +8\r\n  e.g., 0x10.0p0 has scaleFactorCompensation == +3\r\n  underflow - return Double.NaN\r\n  can be represented as an unnormalized double\r\n  the left most bit must be discarded (it's always a 1)\r\n  overflow to +infinity\r\n  Step 10: convert float literals to IEEE single\r\n  less bits than the faction can hold - pad on right with 0s\r\n  more bits than we can keep\r\n  round to DOUBLE_PRECISION bits\r\n  how many bits to move '.' to before leading hex digit\r\n  e.g., 0x0.08p0 has scaleFactor == -4\r\n  e.g., 0x0.01p0 has scaleFactorCompensation == +3\r\n  e.g., 0x80.0p0 has scaleFactor == +8\r\n  e.g., 0x10.0p0 has scaleFactorCompensation == +3\r\n  underflow - return Float.NaN\r\n  can be represented as an unnormalized single\r\n  the left most bit must be discarded (it's always a 1)\r\n  overflow to +infinity\r\n","AbstractTrace":"enter enter exit exit enter enter enter exit exit event warn error fatal formatMessage formatMessage formatDate formatObj formatArray formatCollection formatArgs formatObjects enter enter exit exit enter enter enter exit exit event warn error fatal formatMessage formatMessage formatDate formatObj formatArray formatCollection formatArgs formatObjects tracedClass timeFormat tracedClass timeFormat org.aspectj.weaver.tools.AbstractTrace org.aspectj.weaver.tools.AbstractTrace /*\r\n\t * Convenience methods\r\n\t */\r\n /*\r\n\t * Formatting\r\n\t */\r\n /* Use classname@hashcode */\r\n /* Classes can provide an alternative implementation of toString() */\r\n /* These classes have a safe implementation of toString() */\r\n /*\r\n\t * Convenience methods\r\n\t */\r\n /*\r\n\t * Formatting\r\n\t */\r\n /* Use classname@hashcode */\r\n /* Classes can provide an alternative implementation of toString() */\r\n /* These classes have a safe implementation of toString() */\r\n","SelectionOnQualifiedSuperReference":"printExpression resolveType org.aspectj.org.eclipse.jdt.internal.codeassist.select.SelectionOnQualifiedSuperReference  $NON-NLS-1$\r\n","TypeVariableReference":"getTypeVariable getTypeVariable org.aspectj.weaver.TypeVariableReference org.aspectj.weaver.TypeVariableReference /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","TypeDeclarationMatch":"org.aspectj.org.eclipse.jdt.core.search.TypeDeclarationMatch","CreateFieldOperation":"generateElementAST generateResultHandle getMainTaskName getFragment initializeDefaultPosition verifyNameCollision getASTNodeName rename org.aspectj.org.eclipse.jdt.internal.core.CreateFieldOperation","StructureTree":"setRootFilePath getRootFilePath jbInit getToggleClickCount serialVersionUID DEFAULT_FONT rootFilePath org.aspectj.ajde.ui.swing.StructureTree /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation\r\n *     Helen Hawkins  Converted to new interface (bug 148190)  \r\n * ******************************************************************/\r\n","AndPattern":"findIndexMatches hasNextQuery resetQuery org.aspectj.org.eclipse.jdt.internal.core.search.matching.AndPattern  TODO should rename IntersectingPattern, and make AndPattern a true subclass\r\n  AndPatterns cannot provide the decoded result\r\n  TODO should rename IntersectingPattern, and make AndPattern a true subclass\r\n /*no pattern*/\r\n","JavaSearchDocument":"getByteContents getCharContents getEncoding getFile toString file byteContents charContents org.aspectj.org.eclipse.jdt.internal.core.search.JavaSearchDocument  used during search and during indexing\r\n  used during search and during indexing\r\n  Return the encoding of the associated file\r\n  $NON-NLS-1$\r\n","CompletionOnJavadocParamNameReference":"addCompletionFlags getCompletionFlags printExpression reportError completionFlags missingParams missingTypeParams org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnJavadocParamNameReference  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.AllocationExpression#printExpression(int, java.lang.StringBuffer)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.SingleNameReference#reportError(org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BlockScope)\r\n\t */\r\n","DeleteResourceElementsOperation":"deletePackageFragment getMainTaskName processElement verify org.aspectj.org.eclipse.jdt.internal.core.DeleteResourceElementsOperation  collect the children to remove\r\n  remove the children\r\n  Discard non-java resources\r\n  delete remaining files in this package (.class file in the case where Proj=src=bin)\r\n  delete recursively empty folders\r\n  ensure the element is closed\r\n /*don't delete default package's folder: see https://bugs.eclipse.org/bugs/show_bug.cgi?id=38450*/\r\n","TypePatternQuestions":"askQuestion anyChanges toString ask equals hashCode toString askQuestion anyChanges toString ask equals hashCode toString questionsAndAnswers pattern type kind questionsAndAnswers pattern type kind org.aspectj.weaver.patterns.TypePatternQuestions org.aspectj.weaver.patterns.TypePatternQuestions  ??? doesn't change\r\n  System.out.println(question + \":\" + currentAnswer);\r\n  ??? doesn't change\r\n  System.out.println(question + \":\" + currentAnswer);\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","IRuntimeInvisibleParameterAnnotationsAttribute":"getParametersNumber getParameterAnnotations org.aspectj.org.eclipse.jdt.core.util.IRuntimeInvisibleParameterAnnotationsAttribute","IMessageHandler":"handleMessage isIgnoring dontIgnore ignore handleMessage isIgnoring dontIgnore ignore handleMessage isIgnoring dontIgnore ignore handleMessage isIgnoring dontIgnore ignore SYSTEM_ERR SYSTEM_OUT THROW SYSTEM_ERR SYSTEM_OUT THROW org.aspectj.bridge.IMessageHandler org.aspectj.bridge.IMessageHandler /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","DefaultTypePattern":"getDetail setDetail propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty clone0 subtreeMatch0 accept0 treeSize detail org.aspectj.org.eclipse.jdt.core.dom.DefaultTypePattern  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  boolean visitChildren =\r\n","Instanceof":"accept toString equals hashCode getVar getType accept toString equals hashCode getVar getType var type var type org.aspectj.weaver.ast.Instanceof org.aspectj.weaver.ast.Instanceof /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","DeclareAnnotationDeclaration":"analyseCode getDeclaredAnnotation shouldDelegateCodeGeneration addAnnotation postParse internalPatternNodeProperty internalAnnotationNameProperty internalAnnotationNamePropertyFactory internalPatternNodePropertyFactory getPatternNode setPatternNode getAnnotationName setAnnotationName annotation pattern name org.aspectj.ajdt.internal.compiler.ast.DeclareAnnotationDeclaration org.aspectj.org.eclipse.jdt.core.dom.DeclareAnnotationDeclaration  there is an error that will already be getting reported (e.g. incorrect pattern on decaf  not be reported on as we *do* store it against a method in this case\r\n  declare annotation needs a method to be written out.\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  lazy init must be thread-safe for readers\r\n /* *******************************************************************\r\n * Copyright (c) 2005 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Adrian Colyer initial implementation \r\n *      Andy Clement wired up to back end\r\n * ******************************************************************/\r\n","DocCommentParser":"parse parse setComment toString createArgumentReference createFieldReference createMethodReference createTag createTypeReference parseIdentifierTag parseReturn parseTag pushParamName pushSeeRef pushText refreshInlineTagPosition pushThrowName updateDocComment docComment ast org.aspectj.org.eclipse.jdt.core.dom.DocCommentParser  Init\r\n  Parse\r\n  backward compatibility\r\n  $NON-NLS-1$   Create method ref\r\n  may be > 0 for member class constructor reference\r\n  Set qualifier\r\n  Add arguments\r\n  should not happen\r\n  Update ref for whole name\r\n  Update references of each simple name\r\n  Read tag name\r\n  break for '*' as this is perhaps the end of comment (bug 65288)\r\n  allowed in tag names as this character is often used in doclets (bug 68087)\r\n  !, \", #, %, &, ', -, :, <, >, * chars and spaces are not allowed in tag names\r\n  (see bug https:  tage name may be empty (see bug https:  Decide which parse to perform depending on tag name\r\n  TODO (frederic) reconsider parameter value when @category will be significant in spec\r\n  and so is enough as it is only this parser which signals the missing tag warnings...\r\n  Cannot have @see inside inline comment\r\n  Cannot have @link outside inline comment\r\n  '<' was stored in identifiers stack\r\n  add simple name\r\n  '>' was stored in identifiers stack\r\n  set param tag source range\r\n /* (non-Javadoc)\r\n\t * Returns true if tag @deprecated is present in annotation.\r\n\t * \r\n\t * If annotation checking is enabled, will also construct an Annotation node, which will be stored into Parser.annotation\r\n\t * slot for being consumed later on.\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser#createArgumentReference(char[], java.lang.Object, int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser#createFieldReference()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser#createMethodReference(java.lang.Object[])\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser#createTag()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser#createTypeReference()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser#parseIdentifierTag(boolean)\r\n\t */\r\n /*\r\n\t * Parse @return tag declaration\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser#parseTag(int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser#pushParamName(java.lang.Object)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser#pushSeeRef(java.lang.Object)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser#pushText(int, int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser#pushText(int, int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser#pushThrowName(java.lang.Object)\r\n\t */\r\n /*\r\n\t * Add stored tag elements to associated comment.\r\n\t */\r\n","ASTNodeFinder":"findField findInitializer findMethod findType unit result count org.aspectj.org.eclipse.jdt.internal.core.util.ASTNodeFinder  visit only one level\r\n /*\r\n\t * Finds the FieldDeclaration in the given ast corresponding to the given field handle.\r\n\t * Returns null if not found.\r\n\t */\r\n /*\r\n\t * Finds the Initializer in the given ast corresponding to the given initializer handle.\r\n\t * Returns null if not found.\r\n\t */\r\n /*\r\n\t * Finds the AbstractMethodDeclaration in the given ast corresponding to the given method handle.\r\n\t * Returns null if not found.\r\n\t */\r\n /*\r\n\t * Finds the TypeDeclaration in the given ast corresponding to the given type handle.\r\n\t * Returns null if not found.\r\n\t */\r\n","RecoveredField":"add add parseTree sourceEnd toString updatedFieldDeclaration updateOnClosingBrace updateOnOpeningBrace updateParseTree updateSourceEndIfNecessary fieldDeclaration alreadyCompletedFieldInitialization anonymousTypes anonymousTypeCount org.aspectj.org.eclipse.jdt.internal.compiler.parser.RecoveredField  Prepare anonymous type list\r\n  Store type declaration as an anonymous type\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  fieldDeclaration is an enum constant\r\n  was an array initializer\r\n  no update is necessary\t(array initializer)\r\n  no update is necessary\t(enum constant)\r\n  might be an array initializer\r\n /*\r\n * Record an expression statement if field is expecting an initialization expression,\r\n * used for completion inside field initializers.\r\n */\r\n /*\r\n * Record a type declaration if this field is expecting an initialization expression \r\n * and the type is an anonymous type.\r\n * Used for completion inside field initializers.\r\n */\r\n /* \r\n * Answer the associated parsed structure\r\n */\r\n /*\r\n * Answer the very source end of the corresponding parse node\r\n */\r\n /*\r\n * A closing brace got consumed, might have closed the current element,\r\n * in which case both the currentElement is exited.\r\n *\r\n * Fields have no associated braces, thus if matches, then update parent.\r\n */\r\n /*\r\n * An opening brace got consumed, might be the expected opening one of the current element,\r\n * in which case the bodyStart is updated.\r\n */\r\n /*\r\n * Update the declarationSourceEnd of the corresponding parse node\r\n */\r\n","CheckDebugAttributes":"execute checkClassFile setFile setProperty file property org.aspectj.org.eclipse.jdt.core.CheckDebugAttributes  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","BcelShadow":"copyInto getIWorld deleteNewAndDup retargetFrom addAdvicePreventingLazyTjp prepareForMungers getRange setRange getSourceLine getEnclosingType getEnclosingClass getWorld makeConstructorExecution makeStaticInitialization makeExceptionHandler findHandlerParamName makeIfaceInitialization initIfaceInitializer makeUnfinishedInitialization makeUnfinishedPreinitialization makeMethodExecution init makeMethodExecution makeShadowForMethod makeAdviceExecution makeConstructorCall makeArrayConstructorCall makeMonitorEnter makeMonitorExit makeMethodCall makeShadowForMethodCall makeFieldGet makeFieldSet retargetAllBranches terminatesWithReturn arg0HoldsThis getThisVar getThisAnnotationVar getTargetVar getTargetAnnotationVar getArgVar getArgAnnotationVar getKindedAnnotationVar getWithinAnnotationVar getWithinCodeAnnotationVar getThisJoinPointStaticPartVar getThisEnclosingJoinPointStaticPartVar requireThisJoinPoint getThisJoinPointVar initializeThisJoinPoint checkLazyTjp loadThisJoinPoint createThisJoinPoint getThisJoinPointStaticPartBcelVar getThisJoinPointStaticPartBcelVar getThisEnclosingJoinPointStaticPartBcelVar getEnclosingCodeSignature makeArgsObjectArray initializeThisVar initializeTargetVar ensureTargetTypeIsCorrect ensureInitializedArgVar initializeArgVars initializeForAroundClosure initializeThisAnnotationVars initializeTargetAnnotationVars initializeArgAnnotationVars getRelevantMember getAnnotations initializeKindedAnnotationVars findMethod2 findMethod findField initializeWithinAnnotationVars initializeWithinCodeAnnotationVars weaveBefore weaveAfter weaveAfterReturning findReturnInstructions generateReturnInstructions hasANonVoidReturnType getAfterReturningAdviceDispatchInstructions insertAdviceInstructionsForBindingReturningParameter retargetReturnInstruction isLastInstructionInRange weaveAfterThrowing weaveSoftener weavePerObjectEntry weavePerTypeWithinAspectInitialization weaveCflowEntry weaveAroundInline getRedoneProceedCall getRedoneProceedCallForAnnotationStyle bindsThis bindsTarget visit visit visit visit visit visit visit visit weaveAroundClosure makeCallToCallback makeClosureInstantiation makeProceedArgumentMap makeClosureClassAndReturnConstructor extractMethod addPreInitializationReturnCode getSuperConstructorParameterTypes makeRemap createMethodGen samePackage addType addTypeToEnd genTempVar genTempVar genTempVarIndex getFactory getSourceLocation getEnclosingShadow getEnclosingMethod isFallsThrough setActualTargetType getActualTargetType copyInto getIWorld deleteNewAndDup retargetFrom addAdvicePreventingLazyTjp prepareForMungers getRange setRange getSourceLine getEnclosingType getEnclosingClass getWorld makeConstructorExecution makeStaticInitialization makeExceptionHandler findHandlerParamName makeIfaceInitialization initIfaceInitializer makeUnfinishedInitialization makeUnfinishedPreinitialization makeMethodExecution init makeMethodExecution makeShadowForMethod makeAdviceExecution makeConstructorCall makeArrayConstructorCall makeMonitorEnter makeMonitorExit makeMethodCall makeShadowForMethodCall makeFieldGet makeFieldSet retargetAllBranches terminatesWithReturn arg0HoldsThis getThisVar getThisAnnotationVar getTargetVar getTargetAnnotationVar getArgVar getArgAnnotationVar getKindedAnnotationVar getWithinAnnotationVar getWithinCodeAnnotationVar getThisJoinPointStaticPartVar getThisEnclosingJoinPointStaticPartVar requireThisJoinPoint getThisJoinPointVar initializeThisJoinPoint checkLazyTjp loadThisJoinPoint createThisJoinPoint getThisJoinPointStaticPartBcelVar getThisJoinPointStaticPartBcelVar getThisEnclosingJoinPointStaticPartBcelVar getEnclosingCodeSignature makeArgsObjectArray initializeThisVar initializeTargetVar ensureTargetTypeIsCorrect ensureInitializedArgVar initializeArgVars initializeForAroundClosure initializeThisAnnotationVars initializeTargetAnnotationVars initializeArgAnnotationVars getRelevantMember getAnnotations initializeKindedAnnotationVars findMethod2 findMethod findField initializeWithinAnnotationVars initializeWithinCodeAnnotationVars weaveBefore weaveAfter weaveAfterReturning findReturnInstructions generateReturnInstructions hasANonVoidReturnType getAfterReturningAdviceDispatchInstructions insertAdviceInstructionsForBindingReturningParameter retargetReturnInstruction isLastInstructionInRange weaveAfterThrowing weaveSoftener weavePerObjectEntry weavePerTypeWithinAspectInitialization weaveCflowEntry weaveAroundInline getRedoneProceedCall getRedoneProceedCallForAnnotationStyle bindsThis bindsTarget visit visit visit visit visit visit visit visit weaveAroundClosure makeCallToCallback makeClosureInstantiation makeProceedArgumentMap makeClosureClassAndReturnConstructor extractMethod addPreInitializationReturnCode getSuperConstructorParameterTypes makeRemap createMethodGen samePackage addType addTypeToEnd genTempVar genTempVar genTempVarIndex getFactory getSourceLocation getEnclosingShadow getEnclosingMethod isFallsThrough setActualTargetType getActualTargetType range world enclosingMethod appliedLazyTjpOptimization actualInstructionTargetType badAdvice sourceline thisVar targetVar argVars kindedAnnotationVars thisAnnotationVars targetAnnotationVars argAnnotationVars withinAnnotationVars withincodeAnnotationVars allArgVarsInitialized thisJoinPointVar isThisJoinPointLazy lazyTjpConsumers thisJoinPointStaticPartVar usesThis usesTarget range world enclosingMethod appliedLazyTjpOptimization actualInstructionTargetType badAdvice sourceline thisVar targetVar argVars kindedAnnotationVars thisAnnotationVars targetAnnotationVars argAnnotationVars withinAnnotationVars withincodeAnnotationVars allArgVarsInitialized thisJoinPointVar isThisJoinPointLazy lazyTjpConsumers thisJoinPointStaticPartVar usesThis usesTarget org.aspectj.weaver.bcel.BcelShadow org.aspectj.weaver.bcel.BcelShadow  SECRETAPI - for testing, this will tell us if the optimization succeeded *on the last shadow processed*\r\n  from the signature (pr109728) (1.4 declaring type issue)\r\n  bytecode sequence has only been seen once in the wild.\r\n  Go back from where we are looking for 'NEW' that takes us to a stack depth of 0. INVOKESPECIAL <init>\r\n  by the actual instruction we care about.\r\n  we must be in statement context.\r\n  XXX see next XXX comment\r\n  pr186884\r\n  Now make any jumps to the 'new', the 'dup' or the 'end' now target the nextHandle\r\n  records advice that is stopping us doing the lazyTjp optimization\r\n  at a handler jp and only before advice is supported) (pr46298)\r\n  int positionOffset = (hasTarget() ? 1 : 0) + ((hasThis() && !getKind().isTargetSameAsThis()) ? 1 : 0);\r\n  the store instruction\r\n  pr74952\r\n  no new  the arg-setup code, the start of the running code, and the end of the running code.\r\n  world.isXlazyTjp();   can't build tjp lazily, no suitable test...\r\n  on the stack.\r\n  easier than deleting it ...\r\n  an incorrect aload.\r\n  the one from the enclosingMethod declarationLineNumber if available.\r\n  overrides\r\n  move the start past ajc$preClinit\r\n  System.out.println(\"got store: \" + startOfHandler.getInstruction() + \", \" + index);\r\n  this call marks the instruction list as changed\r\n  UnresolvedType inType = constructor.getEnclosingClass().getType();\r\n  r.associateWithTargets(start, end);\r\n  OPTIMIZE this occurs lots of times for all jp kinds...\r\n  OPTIMIZE this occurs lots of times for all jp kinds...\r\n  all the arguments in temps.\r\n  (FieldInstruction) getHandle.getInstruction()),\r\n  (FieldInstruction) setHandle.getInstruction()),\r\n  this doesn't do the right thing for calls in the pre part of introduced constructors.\r\n  FIXME asc Why bother with this if we always return one?\r\n  Even if we can't find one, we have to return one as we might have this annotation at runtime\r\n  FIXME asc why bother with this if we always return one?\r\n  Even if we can't find one, we have to return one as we might have this annotation at runtime\r\n  reflective thisJoinPoint support\r\n  }\r\n  make sure any state needed is initialized, but throw the instructions out\r\n  special case only one lazyTjpUser\r\n  do we know enough to bother reporting?\r\n  check for around advice\r\n  If not lazy, its already been built and stored, just retrieve it\r\n  If we're lazy, build the join point right here.\r\n  Does someone else need it? If so, store it for later retrieval\r\n  TAG:SUPPORTING12: We didn't have different jpsp types in 1.2\r\n  the enclosing of an execution is itself\r\n  is correctly the signature of the ctor.\r\n  ??? need to better understand all the enclosing variants\r\n  gotta pop off the args before we find the target\r\n  Lets go back through the code from the start of the shadow\r\n  info we want\r\n  A load instruction may tell us the real type of what the clone() call is on\r\n  A field access instruction may tell us the real type of what the clone() call is on\r\n  Just use a standard java.lang.object array - that will work fine\r\n  A new array instruction obviously tells us it is an array type !\r\n  Just use a standard java.lang.object array - that will work fine\r\n  A multi new array instruction obviously tells us it is an array type !\r\n  Need to initialize argument i\r\n  we move backwards because we're popping off the stack\r\n  we move backwards because we're popping off the stack\r\n  what about annotations we havent\r\n  subclasses?\r\n  check the ITD'd dooberries\r\n  then the last arg of the above should be true\r\n  check the ITD'd dooberries\r\n  AjcMemberMaker.interMethodBody(fakerm,typeMunger.getAspectType()));\r\n  didn't find in ITDs, look in supers\r\n  ResolvedMember rm[] = relevantType.getDeclaredMethods();\r\n  check the ITD'd dooberries\r\n  if (fakerm.hasAnnotations())\r\n  Determine the annotations that are of interest\r\n  We can't have recognized the shadow - should blow up now to be on the safe side\r\n  String searchString = getSignature().getName()+getSignature().getParameterSignature();\r\n  FIXME asc whats the real diff between this one and the version in findMethod()?\r\n  For some shadow we are interested in annotations on the method containing that shadow.\r\n  list of instructions that handle the actual return from the join point\r\n  variable that holds the return value\r\n  we need at least one instruction, as the target for jumps\r\n  list of instructions for dispatching to the advice itself\r\n  so ignore RETURN\r\n  at the end of the instruction list...\r\n  we have to dup the return val before consuming it...\r\n  store the return value into this var\r\n  a shadow, inside me).\r\n  throw (ExceptionInInitializerError)exc;\r\n  ???Type.THROWABLE,\r\n  high priority if our args are on the stack\r\n  a shadow, inside me).\r\n  ??? special\r\n  ENH 42737\r\n  aload_1\r\n  instanceof class java  ifeq go to new SOFT_EXCEPTION_TYPE instruction\r\n  aload_1\r\n  athrow\r\n  handler.append(fact.NOP);\r\n  high priority if our args are on the stack\r\n  ??? would be nice to abstract that to say things only once\r\n  Don't initialize statics in\r\n  This should be getting managed by a counter - lets make sure.\r\n  arrayVar.appendLoad(entrySuccessInstructions, fact);\r\n  this is the same for both per and non-per\r\n  !!! THIS BLOCK OF CODE SHOULD BE IN A METHOD CALLED weaveAround(...);\r\n  Member originalSig = mungerSig;   ??? might want some checks here to give better errors\r\n  }\r\n  Note: for code style, this is done at Aspect compilation time.\r\n  we see one pjp passed around - dangerous\r\n  remember this decision to avoid re-analysis\r\n  specific test for @AJ proceedInInners\r\n  ??? should consider optimizations to recognize simple cases that don't require body extraction\r\n  start by exposing various useful things into the frame\r\n  eg. \"private static final void method_aroundBody0(M, M, String, org.aspectj.lang.JoinPoint)\"\r\n  now extract the advice into its own method\r\n  forces initialization ... dont like this but seems to be required for some tests to\r\n  time right now to discover which\r\n  java.lang.Object]\r\n  System.err.println(\"recip \" + recipientFileName);\r\n  the beginning of the parameter list\r\n  ??? we don't actually need to push NULL for the closure if we take care\r\n  (fact, getWorld(), munger.getSignature()));\r\n  InstructionHandle adviceMethodInvocation;\r\n  InstructionHandle endNop = range.insert(fact.NOP, Range.InsideAfter);\r\n  and actually add the whole mess to the shadow\r\n  [TODO document @AJ code rule: don't manipulate 2 jps proceed at the same time.. in an advice body]\r\n  proceed with args as a boxed Object[]\r\n  inlining support for code style aspects\r\n  remove this*JoinPoint* as arguments to proceed\r\n  System.out.println(\"stateTypes: \" + Arrays.asList(stateTypes));\r\n  throw new RuntimeException(\"unimplemented\");\r\n  from localAdvice signature\r\n  STORE the Object[] into a local variable\r\n  STORE the ProceedingJoinPoint instance into a local variable\r\n  use local variable 0\r\n  they have supplied new this as first entry in object array, consume it\r\n  Where to start in the object array in order to pick up arguments\r\n  store the Object[] array on stack if proceed with args\r\n  do the callback invoke\r\n  box it again. Handles cases where around advice does return something else than Object\r\n  MOVE OUT ALL THE INSTRUCTIONS IN MY SHADOW INTO ANOTHER METHOD!\r\n  cannot happen in around advice\r\n  pr226201\r\n  put \"this\" back on the stack\r\n  initialize the bit flags for this shadow\r\n  stick the bitflags on the stack and call the variant of linkClosureAndJoinPoint that takes an int\r\n  ATAJ for @AJ aspect we need to link the closure with the joinpoint instance\r\n  invoke the advice\r\n  remember to render tjps\r\n  exposed for testing\r\n  LazyMethodGen constructor) {\r\n  final Type objectArrayType = new ArrayType(Type.OBJECT, 1);\r\n  XXX we don't know why this is required\r\n  need this test to avoid args bound via cflow\r\n  constructor\r\n  method\r\n  int proceedVarIndex = 1;\r\n  int stateVarIndex = runMethod.allocateLocal(1);\r\n  class\r\n  convert thing on top of stack to object\r\n  push object array\r\n  swap\r\n  do object array store.\r\n  assert getKind() == PreInitialization\r\n  thisVar guaranteed to be 0\r\n  passing in a target too\r\n  assert targetVar == thisVar\r\n  point.\r\n  }\r\n  they will still refer to the subtype.\r\n  pr197719 - static accessor has been created to handle the call\r\n  pr230075, pr197719\r\n  join point, it is unnecessary to accept (and pass) tjp.\r\n  UnresolvedType.getNames(getSignature().getExceptions(world)),\r\n  }\r\n  eh doesn't think we need to garbage collect these (64K is a big number...)\r\n  For staticinitialization, if we have a nice offset, don't build a new source loc\r\n  System.err.println(this + \": \" + range);\r\n  SECRETAPI - for testing, this will tell us if the optimization succeeded *on the last shadow processed*\r\n  from the signature (pr109728) (1.4 declaring type issue)\r\n  bytecode sequence has only been seen once in the wild.\r\n  Go back from where we are looking for 'NEW' that takes us to a stack depth of 0. INVOKESPECIAL <init>\r\n  by the actual instruction we care about.\r\n  we must be in statement context.\r\n  XXX see next XXX comment\r\n  pr186884\r\n  Now make any jumps to the 'new', the 'dup' or the 'end' now target the nextHandle\r\n  records advice that is stopping us doing the lazyTjp optimization\r\n  at a handler jp and only before advice is supported) (pr46298)\r\n  int positionOffset = (hasTarget() ? 1 : 0) + ((hasThis() && !getKind().isTargetSameAsThis()) ? 1 : 0);\r\n  the store instruction\r\n  pr74952\r\n  no new  the arg-setup code, the start of the running code, and the end of the running code.\r\n  world.isXlazyTjp();   can't build tjp lazily, no suitable test...\r\n  on the stack.\r\n  easier than deleting it ...\r\n  an incorrect aload.\r\n  the one from the enclosingMethod declarationLineNumber if available.\r\n  overrides\r\n  move the start past ajc$preClinit\r\n  System.out.println(\"got store: \" + startOfHandler.getInstruction() + \", \" + index);\r\n  this call marks the instruction list as changed\r\n  UnresolvedType inType = constructor.getEnclosingClass().getType();\r\n  r.associateWithTargets(start, end);\r\n  OPTIMIZE this occurs lots of times for all jp kinds...\r\n  OPTIMIZE this occurs lots of times for all jp kinds...\r\n  all the arguments in temps.\r\n  (FieldInstruction) getHandle.getInstruction()),\r\n  (FieldInstruction) setHandle.getInstruction()),\r\n  this doesn't do the right thing for calls in the pre part of introduced constructors.\r\n  FIXME asc Why bother with this if we always return one?\r\n  Even if we can't find one, we have to return one as we might have this annotation at runtime\r\n  FIXME asc why bother with this if we always return one?\r\n  Even if we can't find one, we have to return one as we might have this annotation at runtime\r\n  reflective thisJoinPoint support\r\n  }\r\n  make sure any state needed is initialized, but throw the instructions out\r\n  special case only one lazyTjpUser\r\n  do we know enough to bother reporting?\r\n  check for around advice\r\n  If not lazy, its already been built and stored, just retrieve it\r\n  If we're lazy, build the join point right here.\r\n  Does someone else need it? If so, store it for later retrieval\r\n  TAG:SUPPORTING12: We didn't have different jpsp types in 1.2\r\n  the enclosing of an execution is itself\r\n  is correctly the signature of the ctor.\r\n  ??? need to better understand all the enclosing variants\r\n  gotta pop off the args before we find the target\r\n  Lets go back through the code from the start of the shadow\r\n  info we want\r\n  A load instruction may tell us the real type of what the clone() call is on\r\n  A field access instruction may tell us the real type of what the clone() call is on\r\n  Just use a standard java.lang.object array - that will work fine\r\n  A new array instruction obviously tells us it is an array type !\r\n  Just use a standard java.lang.object array - that will work fine\r\n  A multi new array instruction obviously tells us it is an array type !\r\n  Need to initialize argument i\r\n  we move backwards because we're popping off the stack\r\n  we move backwards because we're popping off the stack\r\n  what about annotations we havent\r\n  subclasses?\r\n  check the ITD'd dooberries\r\n  then the last arg of the above should be true\r\n  check the ITD'd dooberries\r\n  AjcMemberMaker.interMethodBody(fakerm,typeMunger.getAspectType()));\r\n  didn't find in ITDs, look in supers\r\n  ResolvedMember rm[] = relevantType.getDeclaredMethods();\r\n  check the ITD'd dooberries\r\n  if (fakerm.hasAnnotations())\r\n  Determine the annotations that are of interest\r\n  We can't have recognized the shadow - should blow up now to be on the safe side\r\n  String searchString = getSignature().getName()+getSignature().getParameterSignature();\r\n  FIXME asc whats the real diff between this one and the version in findMethod()?\r\n  For some shadow we are interested in annotations on the method containing that shadow.\r\n  list of instructions that handle the actual return from the join point\r\n  variable that holds the return value\r\n  we need at least one instruction, as the target for jumps\r\n  list of instructions for dispatching to the advice itself\r\n  so ignore RETURN\r\n  at the end of the instruction list...\r\n  we have to dup the return val before consuming it...\r\n  store the return value into this var\r\n  a shadow, inside me).\r\n  throw (ExceptionInInitializerError)exc;\r\n  ???Type.THROWABLE,\r\n  high priority if our args are on the stack\r\n  a shadow, inside me).\r\n  ??? special\r\n  ENH 42737\r\n  aload_1\r\n  instanceof class java  ifeq go to new SOFT_EXCEPTION_TYPE instruction\r\n  aload_1\r\n  athrow\r\n  handler.append(fact.NOP);\r\n  high priority if our args are on the stack\r\n  ??? would be nice to abstract that to say things only once\r\n  Don't initialize statics in\r\n  This should be getting managed by a counter - lets make sure.\r\n  arrayVar.appendLoad(entrySuccessInstructions, fact);\r\n  this is the same for both per and non-per\r\n  !!! THIS BLOCK OF CODE SHOULD BE IN A METHOD CALLED weaveAround(...);\r\n  Member originalSig = mungerSig;   ??? might want some checks here to give better errors\r\n  }\r\n  Note: for code style, this is done at Aspect compilation time.\r\n  we see one pjp passed around - dangerous\r\n  remember this decision to avoid re-analysis\r\n  specific test for @AJ proceedInInners\r\n  ??? should consider optimizations to recognize simple cases that don't require body extraction\r\n  start by exposing various useful things into the frame\r\n  eg. \"private static final void method_aroundBody0(M, M, String, org.aspectj.lang.JoinPoint)\"\r\n  now extract the advice into its own method\r\n  forces initialization ... dont like this but seems to be required for some tests to\r\n  time right now to discover which\r\n  java.lang.Object]\r\n  System.err.println(\"recip \" + recipientFileName);\r\n  the beginning of the parameter list\r\n  ??? we don't actually need to push NULL for the closure if we take care\r\n  (fact, getWorld(), munger.getSignature()));\r\n  InstructionHandle adviceMethodInvocation;\r\n  InstructionHandle endNop = range.insert(fact.NOP, Range.InsideAfter);\r\n  and actually add the whole mess to the shadow\r\n  [TODO document @AJ code rule: don't manipulate 2 jps proceed at the same time.. in an advice body]\r\n  proceed with args as a boxed Object[]\r\n  inlining support for code style aspects\r\n  remove this*JoinPoint* as arguments to proceed\r\n  System.out.println(\"stateTypes: \" + Arrays.asList(stateTypes));\r\n  throw new RuntimeException(\"unimplemented\");\r\n  from localAdvice signature\r\n  STORE the Object[] into a local variable\r\n  STORE the ProceedingJoinPoint instance into a local variable\r\n  use local variable 0\r\n  they have supplied new this as first entry in object array, consume it\r\n  Where to start in the object array in order to pick up arguments\r\n  store the Object[] array on stack if proceed with args\r\n  do the callback invoke\r\n  box it again. Handles cases where around advice does return something else than Object\r\n  MOVE OUT ALL THE INSTRUCTIONS IN MY SHADOW INTO ANOTHER METHOD!\r\n  cannot happen in around advice\r\n  pr226201\r\n  put \"this\" back on the stack\r\n  initialize the bit flags for this shadow\r\n  stick the bitflags on the stack and call the variant of linkClosureAndJoinPoint that takes an int\r\n  ATAJ for @AJ aspect we need to link the closure with the joinpoint instance\r\n  invoke the advice\r\n  remember to render tjps\r\n  exposed for testing\r\n  LazyMethodGen constructor) {\r\n  final Type objectArrayType = new ArrayType(Type.OBJECT, 1);\r\n  XXX we don't know why this is required\r\n  need this test to avoid args bound via cflow\r\n  constructor\r\n  method\r\n  int proceedVarIndex = 1;\r\n  int stateVarIndex = runMethod.allocateLocal(1);\r\n  class\r\n  convert thing on top of stack to object\r\n  push object array\r\n  swap\r\n  do object array store.\r\n  assert getKind() == PreInitialization\r\n  thisVar guaranteed to be 0\r\n  passing in a target too\r\n  assert targetVar == thisVar\r\n  point.\r\n  }\r\n  they will still refer to the subtype.\r\n  pr197719 - static accessor has been created to handle the call\r\n  pr230075, pr197719\r\n  join point, it is unnecessary to accept (and pass) tjp.\r\n  UnresolvedType.getNames(getSignature().getExceptions(world)),\r\n  }\r\n  eh doesn't think we need to garbage collect these (64K is a big number...)\r\n  For staticinitialization, if we have a nice offset, don't build a new source loc\r\n  System.err.println(this + \": \" + range);\r\n /* <UnresolvedType,BcelVar> */\r\n /* <UnresolvedType,BcelVar> */\r\n /* <UnresolvedType,BcelVar> */\r\n /* <UnresolvedType,BcelVar> */\r\n /* <UnresolvedType,BcelVar> */\r\n /* <UnresolvedType,BcelVar> */\r\n /*\r\n\t * PR 72528 This method double checks the target type under certain conditions. The Java 1.4 compilers seem to take calls to\r\n\t * clone methods on array types and create bytecode that looks like clone is being called on Object. If we advise a clone call\r\n\t * with around advice we extract the call into a helper method which we can then refer to. Because the type in the bytecode for\r\n\t * the call to clone is Object we create a helper method with an Object parameter - this is not correct as we have lost the fact\r\n\t * that the actual type is an array type. If we don't do the check below we will create code that fails java verification. This\r\n\t * method checks for the peculiar set of conditions and if they are true, it has a sneak peek at the code before the call to see\r\n\t * what is on the stack.\r\n\t */\r\n /*\r\n\t * Implementation notes:\r\n\t * \r\n\t * AroundInline still extracts the instructions of the original shadow into an extracted method. This allows inlining of even\r\n\t * that advice that doesn't call proceed or calls proceed more than once.\r\n\t * \r\n\t * It extracts the instructions of the original shadow into a method.\r\n\t * \r\n\t * Then it extracts the instructions of the advice into a new method defined on this enclosing class. This new method can then\r\n\t * be specialized as below.\r\n\t * \r\n\t * Then it searches in the instructions of the advice for any call to the proceed method.\r\n\t * \r\n\t * At such a call, there is stuff on the stack representing the arguments to proceed. Pop these into the frame.\r\n\t * \r\n\t * Now build the stack for the call to the extracted method, taking values either from the join point state or from the new\r\n\t * frame locs from proceed. Now call the extracted method. The right return value should be on the stack, so no cast is\r\n\t * necessary.\r\n\t * \r\n\t * If only one call to proceed is made, we can re-inline the original shadow. We are not doing that presently.\r\n\t * \r\n\t * If the body of the advice can be determined to not alter the stack, or if this shadow doesn't care about the stack, i.e.\r\n\t * method-execution, then the new method for the advice can also be re-lined. We are not doing that presently.\r\n\t */\r\n /* ResolvedType stateTypeX = */\r\n /* LazyMethodGen constructor = */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved.\r\n * This program and the accompanying materials are made available\r\n * under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *     PARC     initial implementation\r\n *     Alexandre Vasseur    support for @AJ aspects\r\n * ******************************************************************/\r\n /* <UnresolvedType,BcelVar> */\r\n /* <UnresolvedType,BcelVar> */\r\n /* <UnresolvedType,BcelVar> */\r\n /* <UnresolvedType,BcelVar> */\r\n /* <UnresolvedType,BcelVar> */\r\n /* <UnresolvedType,BcelVar> */\r\n /*\r\n\t * PR 72528 This method double checks the target type under certain conditions. The Java 1.4 compilers seem to take calls to\r\n\t * clone methods on array types and create bytecode that looks like clone is being called on Object. If we advise a clone call\r\n\t * with around advice we extract the call into a helper method which we can then refer to. Because the type in the bytecode for\r\n\t * the call to clone is Object we create a helper method with an Object parameter - this is not correct as we have lost the fact\r\n\t * that the actual type is an array type. If we don't do the check below we will create code that fails java verification. This\r\n\t * method checks for the peculiar set of conditions and if they are true, it has a sneak peek at the code before the call to see\r\n\t * what is on the stack.\r\n\t */\r\n /*\r\n\t * Implementation notes:\r\n\t * \r\n\t * AroundInline still extracts the instructions of the original shadow into an extracted method. This allows inlining of even\r\n\t * that advice that doesn't call proceed or calls proceed more than once.\r\n\t * \r\n\t * It extracts the instructions of the original shadow into a method.\r\n\t * \r\n\t * Then it extracts the instructions of the advice into a new method defined on this enclosing class. This new method can then\r\n\t * be specialized as below.\r\n\t * \r\n\t * Then it searches in the instructions of the advice for any call to the proceed method.\r\n\t * \r\n\t * At such a call, there is stuff on the stack representing the arguments to proceed. Pop these into the frame.\r\n\t * \r\n\t * Now build the stack for the call to the extracted method, taking values either from the join point state or from the new\r\n\t * frame locs from proceed. Now call the extracted method. The right return value should be on the stack, so no cast is\r\n\t * necessary.\r\n\t * \r\n\t * If only one call to proceed is made, we can re-inline the original shadow. We are not doing that presently.\r\n\t * \r\n\t * If the body of the advice can be determined to not alter the stack, or if this shadow doesn't care about the stack, i.e.\r\n\t * method-execution, then the new method for the advice can also be re-lined. We are not doing that presently.\r\n\t */\r\n /* ResolvedType stateTypeX = */\r\n /* LazyMethodGen constructor = */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved.\r\n * This program and the accompanying materials are made available\r\n * under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *     PARC     initial implementation\r\n *     Alexandre Vasseur    support for @AJ aspects\r\n * ******************************************************************/\r\n","ASTRewriteFlattener":"asString getResult reset printModifiers getChildList getChildNode getIntAttribute getBooleanAttribute getAttribute visitList visitList visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit JLS2_INTERNAL result store org.aspectj.org.eclipse.jdt.internal.core.dom.rewrite.ASTRewriteFlattener  convert to a string, but lose any extra space in the string buffer by copying\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  get the element type and count dimensions\r\n  always include this array type\r\n  $NON-NLS-1$\r\n  add empty \"[]\" for each extra array dimension\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  cant flatten, needs source\r\n  cant flatten, needs source\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*package*/\r\n /*\r\n\t * @see ASTVisitor#visit(AnonymousClassDeclaration)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ArrayAccess)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ArrayCreation)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ArrayInitializer)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ArrayType)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(AssertStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(Assignment)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(Block)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(BooleanLiteral)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(BreakStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(CastExpression)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(CatchClause)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(CharacterLiteral)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ClassInstanceCreation)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(CompilationUnit)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ConditionalExpression)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ConstructorInvocation)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ContinueStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(DoStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(EmptyStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ExpressionStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(FieldAccess)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(FieldDeclaration)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ForStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(IfStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ImportDeclaration)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(InfixExpression)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(InstanceofExpression)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(Initializer)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(Javadoc)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(LabeledStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(MethodDeclaration)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(MethodInvocation)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(NullLiteral)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(NumberLiteral)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(PackageDeclaration)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ParenthesizedExpression)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(PostfixExpression)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(PrefixExpression)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(PrimitiveType)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(QualifiedName)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ReturnStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SimpleName)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SimpleType)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SingleVariableDeclaration)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(StringLiteral)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SuperConstructorInvocation)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SuperFieldAccess)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SuperMethodInvocation)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SwitchCase)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SwitchStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SynchronizedStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ThisExpression)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ThrowStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(TryStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(TypeDeclaration)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(TypeDeclarationStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(TypeLiteral)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(VariableDeclarationExpression)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(VariableDeclarationFragment)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(VariableDeclarationStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(WhileStatement)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.BlockComment)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.LineComment)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.MemberRef)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.MethodRef)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.MethodRefParameter)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.TagElement)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.TextElement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(AnnotationTypeDeclaration)\r\n\t * @since 3.0\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(AnnotationTypeMemberDeclaration)\r\n\t * @since 3.0\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(EnhancedForStatement)\r\n\t * @since 3.0\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(EnumConstantDeclaration)\r\n\t * @since 3.0\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(EnumDeclaration)\r\n\t * @since 3.0\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(MarkerAnnotation)\r\n\t * @since 3.0\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(MemberValuePair)\r\n\t * @since 3.0\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(Modifier)\r\n\t * @since 3.0\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(NormalAnnotation)\r\n\t * @since 3.0\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ParameterizedType)\r\n\t * @since 3.0\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(QualifiedType)\r\n\t * @since 3.0\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.SingleMemberAnnotation)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.TypeParameter)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.WildcardType)\r\n\t */\r\n","AspectJBuilder":"build getBatchImageBuilder getIncrementalImageBuilder getAdapter createBuildNotifier initWorldAndWeaver setLintProperties acceptResult getIntermediateResults handleMessage isIgnoring dontIgnore ignore getOutputClassFileName getBinarySourcesForThisWeave myWeaver myBcelWorld cpManager unwovenResultCollector fileNameProvider isBatchBuild results project outputLocation org.aspectj.ajdt.internal.core.builder.AspectJBuilder  One builder instance per project (important)\r\n  adapter.\r\n  TODO get aspectj options from project and add into map before...\r\n  update the nameEnvironment each time we compile...\r\n  * an eclipse factory -- create from AjLookupEnvironment, need to hide AjBuildManager field\r\n  AjBuildNotifier ajNotifier = (AjBuildNotifier) notifier;\r\n  * the intermediate result set from the last batch compile\r\n  Collection resultSetForFullWeave =\r\n  itself.\r\n  simply return the default output directory for the project.\r\n  default impl class until the implementation is extended to cope with inpath, injars\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.eclipse.core.internal.events.InternalBuilder#build(int, java.util.Map, org.eclipse.core.runtime.IProgressMonitor)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.eclipse.jdt.internal.compiler.ICompilerAdapterFactory#getAdapter(org.eclipse.jdt.internal.compiler.Compiler)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.eclipse.jdt.internal.core.builder.JavaBuilder#createBuildNotifier(org.eclipse.core.runtime.IProgressMonitor,\r\n\t * org.eclipse.core.resources.IProject)\r\n\t */\r\n /*\r\n\t\t * (non-Javadoc)\r\n\t\t * \r\n\t\t * @seeorg.aspectj.ajdt.internal.compiler.IIntermediateResultsRequestor#acceptResult(org.aspectj.ajdt.internal.compiler.\r\n\t\t * InterimCompilationResult)\r\n\t\t */\r\n /*\r\n\t\t * (non-Javadoc)\r\n\t\t * \r\n\t\t * @see org.aspectj.bridge.IMessageHandler#handleMessage(org.aspectj.bridge.IMessage)\r\n\t\t */\r\n /*\r\n\t\t * (non-Javadoc)\r\n\t\t * \r\n\t\t * @see org.aspectj.bridge.IMessageHandler#isIgnoring(org.aspectj.bridge.IMessage.Kind)\r\n\t\t */\r\n /*\r\n\t\t * (non-Javadoc)\r\n\t\t * \r\n\t\t * @see org.aspectj.ajdt.internal.compiler.IOutputClassFileNameProvider#getOutputClassFileName(char[],\r\n\t\t * org.eclipse.jdt.internal.compiler.CompilationResult)\r\n\t\t */\r\n /*\r\n\t\t * (non-Javadoc)\r\n\t\t * \r\n\t\t * @see org.aspectj.ajdt.internal.compiler.IBinarySourceProvider#getBinarySourcesForThisWeave()\r\n\t\t */\r\n","JavaElementRequestor":"acceptField acceptInitializer acceptMemberType acceptMethod acceptPackageFragment acceptType getFields getInitializers getMemberTypes getMethods getPackageFragments getTypes isCanceled reset setCanceled fCanceled fFields fInitializers fMemberTypes fMethods fPackageFragments fTypes fgEmptyFieldArray fgEmptyInitializerArray fgEmptyTypeArray fgEmptyPackageFragmentArray fgEmptyMethodArray org.aspectj.org.eclipse.jdt.internal.core.JavaElementRequestor","AnnotationValue":"stringify whatKindIsThis stringify whatKindIsThis valueKind STRING ENUM_CONSTANT CLASS ANNOTATION ARRAY PRIMITIVE_INT PRIMITIVE_BYTE PRIMITIVE_CHAR PRIMITIVE_DOUBLE PRIMITIVE_FLOAT PRIMITIVE_LONG PRIMITIVE_SHORT PRIMITIVE_BOOLEAN valueKind STRING ENUM_CONSTANT CLASS ANNOTATION ARRAY PRIMITIVE_INT PRIMITIVE_BYTE PRIMITIVE_CHAR PRIMITIVE_DOUBLE PRIMITIVE_FLOAT PRIMITIVE_LONG PRIMITIVE_SHORT PRIMITIVE_BOOLEAN org.aspectj.weaver.AnnotationValue org.aspectj.weaver.AnnotationValue  byte\r\n  char\r\n  double\r\n  float\r\n  int\r\n  long\r\n  short\r\n  boolean\r\n  String\r\n  Enum constant\r\n  Class\r\n  Annotation\r\n  Array\r\n  byte\r\n  char\r\n  double\r\n  float\r\n  int\r\n  long\r\n  short\r\n  boolean\r\n  String\r\n  Enum constant\r\n  Class\r\n  Annotation\r\n  Array\r\n /* *******************************************************************\r\n * Copyright (c) 2006 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement IBM     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2006 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement IBM     initial implementation \r\n * ******************************************************************/\r\n","SelectionOnExplicitConstructorCall":"printStatement resolve org.aspectj.org.eclipse.jdt.internal.codeassist.select.SelectionOnExplicitConstructorCall  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  tolerate some error cases\r\n","TypeFactory":"createParameterizedType createUnresolvedParameterizedType convertSigToType createTypeFromSignature locateMatchingEndBracket locateMatchingEndBracket locateFirstBracket createTypeParams createUnresolvedParameterizedType createParameterizedType createUnresolvedParameterizedType convertSigToType createTypeFromSignature locateMatchingEndBracket locateMatchingEndBracket locateFirstBracket createTypeParams createUnresolvedParameterizedType org.aspectj.weaver.TypeFactory org.aspectj.weaver.TypeFactory  try and find the generic type...\r\n  pType.setSourceContext(aBaseType.getSourceContext());\r\n  could be a primitive\r\n  ? super ...\r\n  ? extends ...\r\n  of its parent. In this case it is parameterized but theres no < in the signature.\r\n  signature.lastIndexOf('>');\r\n  if the signature is 'PMyInterface<String>$MyOtherType;' then there are none...\r\n  don't look for $ INSIDE the parameters\r\n  Should be an inner type of a parameterized type - could assert there is a '$' in the signature....\r\n  OPTIMIZE can this be done better?\r\n  the next char might be a [ or a primitive type ref (BCDFIJSZ)\r\n  it is something like [I or [[S\r\n  try and find the generic type...\r\n  pType.setSourceContext(aBaseType.getSourceContext());\r\n  could be a primitive\r\n  ? super ...\r\n  ? extends ...\r\n  of its parent. In this case it is parameterized but theres no < in the signature.\r\n  signature.lastIndexOf('>');\r\n  if the signature is 'PMyInterface<String>$MyOtherType;' then there are none...\r\n  don't look for $ INSIDE the parameters\r\n  Should be an inner type of a parameterized type - could assert there is a '$' in the signature....\r\n  OPTIMIZE can this be done better?\r\n  the next char might be a [ or a primitive type ref (BCDFIJSZ)\r\n  it is something like [I or [[S\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","NumberLiteral":"propertyDescriptors internalStructuralPropertiesForType internalGetSetObjectProperty getNodeType0 clone0 subtreeMatch0 accept0 getToken setToken internalSetToken memSize treeSize isValidJavaStatement source TOKEN_PROPERTY PROPERTY_DESCRIPTORS tokenValue source org.aspectj.org.eclipse.jdt.core.dom.NumberLiteral org.aspectj.org.eclipse.jdt.internal.compiler.ast.NumberLiteral  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  update internalSetToken(String) if this is changed\r\n  $NON-NLS-1$  $NON-NLS-1$ /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * This method is a copy of setToken(String) that doesn't do any validation.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","IErrorHandlingPolicy":"proceedOnErrors stopOnFirstError org.aspectj.org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy","ModelUpdater":"addToParentInfo close elementAdded elementChanged elementRemoved processJavaDelta removeFromParentInfo traverseDelta projectsToUpdate org.aspectj.org.eclipse.jdt.internal.core.ModelUpdater  and it appears empty.\r\n  when a project is created, it does not yet have a java nature\r\n  when a root is added, and is on the classpath, the project must be updated\r\n  get rid of package fragment cache\r\n  get rid of package fragment cache\r\n  traverse delta\r\n  update package fragment roots of projects that were affected\r\n  filter out working copies that are not primary (we don't want to add","InstructionList":"isEmpty findHandle findHandle findHandle getInstructionsAsArray findHandle findHandle append append append append append append append append append insert insert insert insert insert insert insert insert insert move move remove delete delete delete findInstruction1 findInstruction2 contains contains setPositions setPositions getByteCode getInstructions toString toString iterator getInstructionHandles getInstructionPositions copy replaceConstantPool clear dispose getStart getEnd getLength size redirectBranches redirectLocalVariables redirectExceptionHandlers isEmpty findHandle findHandle findHandle getInstructionsAsArray findHandle findHandle append append append append append append append append append insert insert insert insert insert insert insert insert insert move move remove delete delete delete findInstruction1 findInstruction2 contains contains setPositions setPositions getByteCode getInstructions toString toString iterator getInstructionHandles getInstructionPositions copy replaceConstantPool clear dispose getStart getEnd getLength size redirectBranches redirectLocalVariables redirectExceptionHandlers start end length byte_positions ih start end length byte_positions ih org.aspectj.apache.bcel.generic.InstructionList org.aspectj.apache.bcel.generic.InstructionList  number of elements in list\r\n  byte code offsets corresponding to instructions\r\n  Do a binary search since the pos array is ordered\r\n  target > j\r\n  else constrain search area\r\n  found it\r\n  Can't be more than that\r\n  Contains actual length\r\n  Remember byte offset and associate it with the instruction\r\n  Trim to proper size\r\n  Search for target position\r\n  Update target\r\n  Either LOOKUPSWITCH or TABLESWITCH\r\n  Update target\r\n  If it is a Select instruction, update all branch targets\r\n  OPTIMIZE better way of doing this? keep little map from earlier from pos -> instruction handle?\r\n  Update end ...\r\n  Update length\r\n  was end.instruction\r\n  Update length\r\n  Update start ...\r\n  Update length\r\n  Code is identical for this case\r\n  append to start of list\r\n  First and last deleted instruction\r\n  At start of list\r\n  At end of list\r\n  singleton list\r\n  Completely separated from rest of list\r\n  e.g. BranchInstructions release their targets\r\n  target instruction within list?\r\n  Pass 0: Sanity checks\r\n  instruction may be shifted.\r\n  Trim to proper size\r\n  Update position indices of instructions\r\n  Traverse list\r\n  Use clone for shallow copy\r\n  old target\r\n  New target is in hash map\r\n  Either LOOKUPSWITCH or TABLESWITCH\r\n  Update all targets\r\n  Traverse in reverse order, because ih.next is overwritten\r\n  Either LOOKUPSWITCH or TABLESWITCH\r\n  number of elements in list\r\n  byte code offsets corresponding to instructions\r\n  Do a binary search since the pos array is ordered\r\n  target > j\r\n  else constrain search area\r\n  found it\r\n  Can't be more than that\r\n  Contains actual length\r\n  Remember byte offset and associate it with the instruction\r\n  Trim to proper size\r\n  Search for target position\r\n  Update target\r\n  Either LOOKUPSWITCH or TABLESWITCH\r\n  Update target\r\n  If it is a Select instruction, update all branch targets\r\n  OPTIMIZE better way of doing this? keep little map from earlier from pos -> instruction handle?\r\n  Update end ...\r\n  Update length\r\n  was end.instruction\r\n  Update length\r\n  Update start ...\r\n  Update length\r\n  Code is identical for this case\r\n  append to start of list\r\n  First and last deleted instruction\r\n  At start of list\r\n  At end of list\r\n  singleton list\r\n  Completely separated from rest of list\r\n  e.g. BranchInstructions release their targets\r\n  target instruction within list?\r\n  Pass 0: Sanity checks\r\n  instruction may be shifted.\r\n  Trim to proper size\r\n  Update position indices of instructions\r\n  Traverse list\r\n  Use clone for shallow copy\r\n  old target\r\n  New target is in hash map\r\n  Either LOOKUPSWITCH or TABLESWITCH\r\n  Update all targets\r\n  Traverse in reverse order, because ih.next is overwritten\r\n  Either LOOKUPSWITCH or TABLESWITCH\r\n /*\r\n\t\t\t\t * Read one instruction from the byte stream, the byte position is set accordingly.\r\n\t\t\t\t */\r\n /*\r\n\t\t * Pass 1: Create an object for each byte code and append them to the list.\r\n\t\t */\r\n /*\r\n\t\t\t * Get an estimate about how many additional bytes may be added, because BranchInstructions may have variable length\r\n\t\t\t * depending on the target offset (short vs. int) or alignment issues (TABLESWITCH and LOOKUPSWITCH).\r\n\t\t\t */\r\n /*\r\n\t\t * Pass 2: Expand the variable-length (Branch)Instructions depending on the target offset (short or int) and ensure that\r\n\t\t * branch targets are within this list.\r\n\t\t */\r\n /*\r\n\t\t * Pass 3: Update position numbers (which may have changed due to the preceding expansions), like pass 1.\r\n\t\t */\r\n /*\r\n\t\t * Pass 1: Make copies of all instructions, append them to the new list and associate old instruction references with the\r\n\t\t * new ones, i.e., a 1:1 mapping.\r\n\t\t */\r\n /*\r\n\t\t * Pass 2: Update branch targets.\r\n\t\t */\r\n /*\r\n\t\t\t * Causes BranchInstructions to release target and targeters, because it calls dispose() on the contained instruction.\r\n\t\t\t */\r\n /*\r\n\t\t\t\t * Read one instruction from the byte stream, the byte position is set accordingly.\r\n\t\t\t\t */\r\n /*\r\n\t\t * Pass 1: Create an object for each byte code and append them to the list.\r\n\t\t */\r\n /*\r\n\t\t\t * Get an estimate about how many additional bytes may be added, because BranchInstructions may have variable length\r\n\t\t\t * depending on the target offset (short vs. int) or alignment issues (TABLESWITCH and LOOKUPSWITCH).\r\n\t\t\t */\r\n /*\r\n\t\t * Pass 2: Expand the variable-length (Branch)Instructions depending on the target offset (short or int) and ensure that\r\n\t\t * branch targets are within this list.\r\n\t\t */\r\n /*\r\n\t\t * Pass 3: Update position numbers (which may have changed due to the preceding expansions), like pass 1.\r\n\t\t */\r\n /*\r\n\t\t * Pass 1: Make copies of all instructions, append them to the new list and associate old instruction references with the\r\n\t\t * new ones, i.e., a 1:1 mapping.\r\n\t\t */\r\n /*\r\n\t\t * Pass 2: Update branch targets.\r\n\t\t */\r\n /*\r\n\t\t\t * Causes BranchInstructions to release target and targeters, because it calls dispose() on the contained instruction.\r\n\t\t\t */\r\n","SimpleName":"propertyDescriptors internalStructuralPropertiesForType internalGetSetObjectProperty getNodeType0 clone0 subtreeMatch0 accept0 getIdentifier setIdentifier internalSetIdentifier isDeclaration appendName memSize treeSize IDENTIFIER_PROPERTY PROPERTY_DESCRIPTORS MISSING_IDENTIFIER identifier org.aspectj.org.eclipse.jdt.core.dom.SimpleName  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  update internalSetIdentifier if this is changed\r\n  this is the case when there is only one identifier see 87849\r\n  unparented node\r\n  could be the name of the method or constructor\r\n  everything but our missing id costs\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t * @since 3.0\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * This method is a copy of setIdentifier(String) that doesn't do any validation.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on Name.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","Node":"accept accept org.aspectj.apache.bcel.classfile.Node org.aspectj.apache.bcel.classfile.Node","DeclareAtMethodDeclaration":"clone0 subtreeMatch0 accept0 internalModifiersProperty internalModifiers2Property internalJavadocProperty propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty internalPatternNodeProperty internalAnnotationNameProperty JAVADOC_PROPERTY PATTERN_PROPERTY ANNOTATION_NAME_PROPERTY PROPERTY_DESCRIPTORS org.aspectj.org.eclipse.jdt.core.dom.DeclareAtMethodDeclaration  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  allow default implementation to flag the error\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /*\r\n\t * (omit javadoc for this method) Method declared on BodyDeclaration.\r\n\t * \r\n\t * There are no modifiers declared for DeclareErrorDeclaration - therefore\r\n\t * we don't do anything with this\r\n\t */\r\n /*\r\n\t * (omit javadoc for this method) Method declared on BodyDeclaration.\r\n\t * \r\n\t * There are no modifiers declared for DeclareErrorDeclaration - therefore\r\n\t * we don't do anything with this\r\n\t */\r\n /*\r\n\t * (omit javadoc for this method) Method declared on BodyDeclaration.\r\n\t */\r\n /*\r\n\t * (omit javadoc for this method) Method declared on ASTNode.\r\n\t */\r\n /*\r\n\t * (omit javadoc for this method) Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on DeclareAnnotationDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on DeclareAnnotationDeclaration.\r\n\t */\r\n","CommentLine":"adapt append formatLine formatLowerBorder formatUpperBorder getContentPrefix getEndingPrefix getFirst getIndentationReference getLast getParent getSize getStartingPrefix hasAttribute scanLine setAttribute tokenizeLine toString NON_FORMAT_START_PREFIX fAttributes fParent fRanges org.aspectj.org.eclipse.jdt.internal.formatter.comment.CommentLine  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","QualifiedSuperReference":"isSuper isThis printExpression resolveType traverse traverse org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference  $NON-NLS-1$\r\n  error case\r\n","ParameterizedSingleTypeReference":"checkBounds copyDims getParameterizedTypeName getTypeBinding internalResolveType printExpression resolveType resolveType resolveTypeEnclosing traverse traverse typeArguments org.aspectj.org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference  may be null in error cases\r\n  not supported here - combined with resolveType(...)\r\n  handle the error here\r\n  already reported error\r\n  is a shared type reference which was already resolved\r\n  resolving member type (relatively to enclosingType)\r\n  be resilient, still attempt resolving arguments\r\n  if member type\r\n  check generic and arity\r\n  check arity\r\n  check generic\r\n  otherwise will do it in Scope.connectTypeVariables() or generic method resolution\r\n  check argument type compatibility\r\n  array type ?\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n     * No need to check for reference to raw type per construction\r\n     */\r\n","EnclosingMethod":"accept copy getEnclosingClassIndex getEnclosingMethodIndex setEnclosingClassIndex setEnclosingMethodIndex getEnclosingClass getEnclosingMethod dump accept copy getEnclosingClassIndex getEnclosingMethodIndex setEnclosingClassIndex setEnclosingMethodIndex getEnclosingClass getEnclosingMethod dump classIndex methodIndex classIndex methodIndex org.aspectj.apache.bcel.classfile.EnclosingMethod org.aspectj.apache.bcel.classfile.EnclosingMethod  innermost class that encloses the declaration of the current class.\r\n  lexically enclosing method that includes the local  Ctors - and code to read an attribute in.\r\n  Accessors\r\n  innermost class that encloses the declaration of the current class.\r\n  lexically enclosing method that includes the local  Ctors - and code to read an attribute in.\r\n  Accessors\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * ******************************************************************/\r\n","EnhancedForStatement":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getParameter setParameter getExpression setExpression getBody setBody memSize treeSize PARAMETER_PROPERTY EXPRESSION_PROPERTY BODY_PROPERTY PROPERTY_DESCRIPTORS parameter expression body org.aspectj.org.eclipse.jdt.core.dom.EnhancedForStatement  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  lazy init must be thread-safe for readers\r\n  lazy init must be thread-safe for readers\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","TargetLostException":"getTargets getTargets targets targets org.aspectj.apache.bcel.generic.TargetLostException org.aspectj.apache.bcel.generic.TargetLostException  OPTIMIZE make unchecked, or get rid of it!\r\n  OPTIMIZE make unchecked, or get rid of it!\r\n","DOMNode":"addChild appendContents appendContentsOfChildren appendFragmentedContents basicAddChild becomeDetailed canHaveChildren clone cloneSharingDocument fragment getCharacters getChild getChildren getContents getDetailedNode getDocument getEndPosition getFactory getFirstChild getInsertionPosition getMask getName getNameContents getNextNode getParent getParentEndDeclaration getPreviousNode getRoot getStartPosition insertSibling isAllowableChild isContentMergableWith isDetailed isFragmented isNameAltered isSignatureEqual localizeContents newDOMNode normalize normalizeEndPosition normalizeStartPosition offset offsetRange rangeCopy remove setMask setName setNameAltered setSourceRangeEnd setStartPosition shareContents toString fFirstChild fLastChild fNextNode fParent fPreviousNode fIsFragmented fName fNameRange fDocument fSourceRange fStateMask fInsertionPosition MASK_FIELD_HAS_INITIALIZER MASK_FIELD_IS_VARIABLE_DECLARATOR MASK_FIELD_TYPE_ALTERED MASK_NAME_ALTERED MASK_HAS_BODY MASK_HAS_COMMENT MASK_IS_CONSTRUCTOR MASK_TYPE_IS_CLASS MASK_TYPE_HAS_SUPERCLASS MASK_TYPE_HAS_INTERFACES MASK_RETURN_TYPE_ALTERED MASK_DETAILED_SOURCE_INDEXES org.aspectj.org.eclipse.jdt.internal.core.jdom.DOMNode  if the node is a constructor, it must also be fragmented to update the constructor's name\r\n  verify child may be added\r\n  before adding it to the tree\r\n  this is the first and only child\r\n  add the child last\r\n  create a new buffer with all my contents and children contents\r\n  clone my children\r\n  verify sibling may be added\r\n  before inserting it into the tree\r\n  insert the node\r\n  if the node is a constructor, it must also be fragmented to update the constructor's name\r\n  Set the children's position\r\n  this node's end position is just before the start of the next node\r\n  to the end of the enclosing node\r\n  parent is a type\r\n  link siblings\r\n  fix parent's pointers\r\n  remove myself\r\n /* NOTE: To test if the child is an ancestor of this node, we\r\n\t * need only test if the root of this node is the child (the child\r\n\t * is already a root since we have just guarenteed it has no parent).\r\n\t */\r\n /* NOTE: To test if the sibling is an ancestor of this node, we\r\n\t * need only test if the root of this node is the child (the sibling\r\n\t * is already a root since we have just guaranteed it has no parent).\r\n\t */\r\n","IStackMapAttribute":"getNumberOfEntries getStackMapFrame org.aspectj.org.eclipse.jdt.core.util.IStackMapAttribute","SwingTreeViewNode":"getStructureNode getIcon add add remove getChildren getKind getRelationshipName toString serialVersionUID relationshipName programElement icon kind org.aspectj.ajde.ui.swing.SwingTreeViewNode  import org.aspectj.ajde.ui.IStructureViewNode.Kind;\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","DefaultMessageHandler":"handleMessage isIgnoring dontIgnore ignore handleMessage isIgnoring dontIgnore ignore isVerbose isDebug showWeaveInfo showWarn isVerbose isDebug showWeaveInfo showWarn org.aspectj.weaver.loadtime.DefaultMessageHandler org.aspectj.weaver.loadtime.DefaultMessageHandler /*\r\n    \t\t * TODO maw We ship this class but don't use or document it. Changed\r\n    \t\t * to use stderr instead of stdout to allow improvements to LTW tests.\r\n    \t\t * Currently many pass whether or not LTW occurs because they are\r\n    \t\t * already woven. Some changed to check for appropriate weaving messages\r\n    \t\t * as well as absence of warnings or errors. \r\n    \t\t */\r\n /*\r\n    \t\t * TODO maw We ship this class but don't use or document it. Changed\r\n    \t\t * to use stderr instead of stdout to allow improvements to LTW tests.\r\n    \t\t * Currently many pass whether or not LTW occurs because they are\r\n    \t\t * already woven. Some changed to check for appropriate weaving messages\r\n    \t\t * as well as absence of warnings or errors. \r\n    \t\t */\r\n","SimpleElementValueGen":"getValueByte getValueChar getValueLong getValueFloat getValueDouble getValueBoolean getValueShort getElementValue getIndex getValueString getValueInt stringifyValue dump getValueByte getValueChar getValueLong getValueFloat getValueDouble getValueBoolean getValueShort getElementValue getIndex getValueString getValueInt stringifyValue dump idx idx org.aspectj.apache.bcel.classfile.annotation.SimpleElementValueGen org.aspectj.apache.bcel.classfile.annotation.SimpleElementValueGen  For 'class' this points to the class entry in the cpGen\r\n  cpool.getConstant(SimpleElementValuevalue.getIndex())\r\n  Whatever kind of value it is, return it as a string\r\n  u1 kind of value\r\n  For 'class' this points to the class entry in the cpGen\r\n  cpool.getConstant(SimpleElementValuevalue.getIndex())\r\n  Whatever kind of value it is, return it as a string\r\n  u1 kind of value\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement -     initial implementation {date}\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement -     initial implementation {date}\r\n * ******************************************************************/\r\n","ClassQueue":"enqueue dequeue empty toString enqueue dequeue empty toString vec vec org.aspectj.apache.bcel.util.ClassQueue org.aspectj.apache.bcel.util.ClassQueue /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n","TypeReferencePattern":"decodeIndexKey getBlankPattern getIndexKey getIndexCategories hasNextQuery matchesDecodedKey resetQuery print qualification simpleName currentCategory segmentsSize segments currentSegment CATEGORIES org.aspectj.org.eclipse.jdt.internal.core.search.matching.TypeReferencePattern  always resolve (in case of a simple name reference being a potential match)\r\n  store type signatures and arguments\r\n  Optimization, eg. type reference is 'org.aspectj.org.eclipse.jdt.core.*'\r\n  redundant (eg. in 'org.aspectj.org.eclipse.jdt.core.*' 'org.eclipse' is used all the time)\r\n  index key is not encoded so query results all match\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* Optimization: case where simpleName == null */\r\n /*\r\n\t * Instanciate a type reference pattern with additional information for generics search\r\n\t */\r\n /*\r\n\t * Instanciate a type reference pattern with additional information for generics search\r\n\t */\r\n /* walk the segments from end to start as it will find less potential references using 'lang' than 'java' */\r\n","CodeFormatterVisitor":"acceptProblem buildFragments buildFragments checkChunkStart commentStartsBlock computeMergedMemberDeclarations computeMergedMemberDeclarations dumpBinaryExpression dumpEqualityExpression failedToFormat format format format format format format format format format format format formatAnonymousTypeDeclaration formatBlock formatCascadingMessageSends formatClassBodyDeclarations formatEmptyTypeDeclaration formatGuardClauseBlock formatLeftCurlyBrace formatLocalDeclaration formatMessageSend formatMethodArguments formatEnumConstantArguments formatNecessaryEmptyStatement formatOpeningBrace formatStatements formatThrowsClause formatTypeMembers formatTypeOpeningBraceForEnumConstant formatTypeOpeningBrace getDimensions hasComments isNextToken isClosingGenericToken isGuardClause isMultipleLocalDeclaration isPartOfMultipleLocalDeclaration manageClosingParenthesizedExpression manageOpeningParenthesizedExpression visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit declarations DEBUG NO_MODIFIERS SINGLETYPEREFERENCE_EXPECTEDTOKENS CLOSING_GENERICS_EXPECTEDTOKENS chunkKind lastLocalDeclarationSourceStart localScanner preferences scribe org.aspectj.org.eclipse.jdt.internal.formatter.CodeFormatterVisitor  we need to check if the previous merged node is a field declaration\r\n  need to check we need to create a multiple field declaration\r\n  we create a multi field declaration\r\n  we merge the current node\r\n  first node\r\n  next member is a type\r\n  find next type if any\r\n  next member is a method\r\n  find next method if any\r\n  filter out enum constants\r\n  find next field if any\r\n  next member is a field\r\n  find next field if any\r\n  the next character is a minus (unary operator)\r\n  $NON-NLS-1$\r\n  a new line has been inserted by printTrailingComment()\r\n  the next character is a minus (unary operator)\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  reset the scribe\r\n  $NON-NLS-1$\r\n  reset the scribe\r\n  $NON-NLS-1$\r\n  reset the scribe\r\n  $NON-NLS-1$\r\n  reset the scribe\r\n  $NON-NLS-1$\r\n  reset the scribe\r\n  $NON-NLS-1$\r\n  see 158267\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  implements token is first fragment\r\n  $NON-NLS-1$\r\n  we don't want to indent enum constants when splitting to a new line\r\n  selector\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  selector\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  selector\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  throws is the first token\r\n  $NON-NLS-1$\r\n  select the last alignment\r\n  realign to the proper value\r\n  90\r\n  $NON-NLS-1$\r\n  we don't need to use an alignment\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  fake new line to handle empty lines before package declaration or import declarations\r\n  dump the package keyword\r\n  OperatorIds.UNSIGNED_RIGHT_SHIFT :\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  see 158267\r\n  no method body\r\n  field is an enum constant\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  see 158267\r\n  no method body\r\n  used for the new line on wrap style of formatting\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  a new line has been inserted by printTrailingComment()\r\n /*\r\n\t * Set of expected tokens type for a single type reference.\r\n\t * This array needs to be SORTED.\r\n\t */\r\n /*nls*/\r\n /*sourceLevel*/\r\n /*taskTags*/\r\n /*taskPriorities*/\r\n /*\r\n\t\t * Field type\r\n\t\t */\r\n /*\r\n\t\t * Field name\r\n\t\t */\r\n /*\r\n\t\t * Check for extra dimensions\r\n\t\t */\r\n /*\r\n\t\t * Field initialization\r\n\t\t */\r\n /*\r\n\t\t\t\t\t * Field name\r\n\t\t\t\t\t */\r\n /*\r\n\t\t\t\t\t * Check for extra dimensions\r\n\t\t\t\t\t */\r\n /*\r\n\t\t\t\t\t * Field initialization\r\n\t\t\t\t\t */\r\n /*\r\n         * Print comments to get proper line number\r\n         */\r\n /*\r\n\t\t * Type name\r\n\t\t */\r\n /* \r\n\t\t * Superclass \r\n\t\t */\r\n /* \r\n\t\t * Super Interfaces \r\n\t\t */\r\n /*\r\n\t\t * Type body\r\n\t\t */\r\n /*\r\n\t\t * Type body\r\n\t\t */\r\n /*\r\n\t * Merged traversal of member (types, fields, methods)\r\n\t */\r\n /*\r\n         * deal with (quite unexpected) comments right before lcurly\r\n         */\r\n /*\r\n\t\t\t * Print the argument name\r\n\t\t \t*/\r\n /*\r\n\t\t\t * Argument type \r\n\t\t\t */\r\n /*\r\n\t\t\t * Print the argument name\r\n\t\t \t*/\r\n /*\r\n\t\t * Check for extra dimensions\r\n\t\t */\r\n /*\r\n\t\t\t * Print the method name\r\n\t\t\t */\r\n /* \r\n\t\t\t\t\t * We need to check that the next statement is a local declaration\r\n\t\t\t\t\t */\r\n /*\r\n\t * Merged traversal of member (types, fields, methods)\r\n\t */\r\n /*\r\n         * Print comments to get proper line number\r\n         */\r\n /*\r\n\t\t * Print the method return type\r\n\t\t */\r\n /*\r\n\t\t * Print the method name\r\n\t\t */\r\n /*\r\n\t\t * Check for extra dimensions\r\n\t\t */\r\n /*\r\n\t\t * Argument type \r\n\t\t */\r\n /*\r\n\t\t\t * Print the argument name\r\n\t\t\t */\r\n /*\r\n\t\t * Check for extra dimensions\r\n\t\t */\r\n /* \r\n\t\t * Package declaration\r\n\t\t */\r\n /*\r\n\t\t * Import statements\r\n\t\t */\r\n /*\r\n\t\t * Type declarations\r\n\t\t */\r\n /*\r\n\t\t * Print the operator\r\n\t\t */\r\n /*\r\n         * Print comments to get proper line number\r\n         */\r\n /*\r\n\t\t * Print the method name\r\n\t\t */\r\n /*\r\n\t\t\t * Method body\r\n\t\t\t */\r\n /*\r\n\t\t\t * This is an empty statement\r\n\t\t\t */\r\n /*\r\n\t\t\t\t * This is an empty statement\r\n\t\t\t\t */\r\n /*\r\n         * Print comments to get proper line number\r\n         */\r\n /*\r\n\t\t\t * Type body\r\n\t\t\t */\r\n /*\r\n\t\t\t * This is an empty statement\r\n\t\t\t */\r\n /*\r\n\t\t\t\t * This is an empty statement\r\n\t\t\t\t */\r\n /*\r\n\t\t\t * This is an empty statement\r\n\t\t\t */\r\n /*\r\n\t\t\t\t * This is an empty statement\r\n\t\t\t\t */\r\n /* \r\n\t\t\t\t\t * Need a specific formatting for guard clauses\r\n\t\t\t\t\t * guard clauses are block with a single return or throw\r\n\t\t\t\t\t * statement\r\n\t\t\t\t\t */\r\n /*\r\n         * Print comments to get proper line number\r\n         */\r\n /*\r\n\t\t * Print the method return type\r\n\t\t */\r\n /*\r\n\t\t * Print the method name\r\n\t\t */\r\n /*\r\n\t\t * Check for extra dimensions\r\n\t\t */\r\n /*\r\n\t\t\t * Method body\r\n\t\t\t */\r\n /*\r\n\t\t * Print the semi-colon\r\n\t\t */\r\n /*\r\n\t\t * Type body\r\n\t\t */\r\n /*\r\n\t\t\t\t\t\t * Print the semi-colon\r\n\t\t\t\t\t\t */\r\n /*\r\n\t\t\t\t\t\t\t * Print the semi-colon\r\n\t\t\t\t\t\t\t */\r\n /*\r\n\t\t\t\t\t\t\t\t * Print the semi-colon\r\n\t\t\t\t\t\t\t\t */\r\n /* \r\n\t\t\t\t\t\t * We need to check that the next statement is a local declaration\r\n\t\t\t\t\t\t */\r\n /*\r\n\t\t\t\t\t * Print the semi-colon\r\n\t\t\t\t\t */\r\n /*\r\n\t\t * Print the semi-colon\r\n\t\t */\r\n /*\r\n\t\t * Print the operator\r\n\t\t */\r\n /*\r\n\t\t\t * This is an empty statement\r\n\t\t\t */\r\n /*\r\n\t\t\t\t * This is an empty statement\r\n\t\t\t\t */\r\n /*\r\n   <extension\r\n         id=\"org.aspectj.org.eclipse.jdt.core.newformatter.codeformatter\"\r\n         name=\"org.aspectj.org.eclipse.jdt.core.newformatter.codeformatter\"\r\n         point=\"org.aspectj.org.eclipse.jdt.core.codeFormatter\">\r\n      <codeFormatter\r\n            class=\"org.aspectj.org.eclipse.jdt.internal.formatter.CodeFormatterVisitor\">\r\n      </codeFormatter>\r\n   </extension>\r\n*/\r\n","PointcutExpression":"asString setMatchingContext couldMatchJoinPointsInType mayNeedDynamicTest matchesMethodExecution matchesConstructorExecution matchesStaticInitialization matchesAdviceExecution matchesInitialization matchesPreInitialization matchesMethodCall matchesMethodCall matchesConstructorCall matchesConstructorCall matchesHandler matchesHandler matchesFieldSet matchesFieldSet matchesFieldGet matchesFieldGet getPointcutExpression asString setMatchingContext couldMatchJoinPointsInType mayNeedDynamicTest matchesMethodExecution matchesConstructorExecution matchesStaticInitialization matchesAdviceExecution matchesInitialization matchesPreInitialization matchesMethodCall matchesMethodCall matchesConstructorCall matchesConstructorCall matchesHandler matchesHandler matchesFieldSet matchesFieldSet matchesFieldGet matchesFieldGet getPointcutExpression org.aspectj.lang.reflect.PointcutExpression org.aspectj.weaver.tools.PointcutExpression org.aspectj.lang.reflect.PointcutExpression org.aspectj.weaver.tools.PointcutExpression /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","JarPackageFragmentInfo":"getNonJavaResources org.aspectj.org.eclipse.jdt.internal.core.JarPackageFragmentInfo","Code":"accept dump getAttributes getLineNumberTable getLocalVariableTable getCode getExceptionTable getMaxLocals getMaxStack getInternalLength calculateLength setAttributes setCode setExceptionTable setMaxLocals setMaxStack toString toString copy getCodeString accept dump getAttributes getLineNumberTable getLocalVariableTable getCode getExceptionTable getMaxLocals getMaxStack getInternalLength calculateLength setAttributes setCode setExceptionTable setMaxLocals setMaxStack toString toString copy getCodeString maxStack maxLocals code exceptionTable attributes NO_EXCEPTIONS maxStack maxLocals code exceptionTable attributes NO_EXCEPTIONS org.aspectj.apache.bcel.classfile.Code org.aspectj.apache.bcel.classfile.Code  Maximum size of stack used by this method\r\n  Number of local variables\r\n  Actual byte code\r\n  Initialize with some default values which will be overwritten later\r\n  Read byte code\r\n  Read all attributes, eg: LineNumberTable, LocalVariableTable\r\n  Overwrites length!\r\n  Adjust length\r\n  Maximum size of stack used by this method\r\n  Number of local variables\r\n  Actual byte code\r\n  Initialize with some default values which will be overwritten later\r\n  Read byte code\r\n  Read all attributes, eg: LineNumberTable, LocalVariableTable\r\n  Overwrites length!\r\n  Adjust length\r\n /* Read exception table that contains all regions where an exception\r\n     * handler is active, i.e., a try { ... } catch() block.\r\n     */\r\n /* Adjust length, because of setAttributes in this(), s.b.  length\r\n     * is incorrect, because it didn't take the internal attributes\r\n     * into account yet! Very subtle bug, fixed in 3.1.1.\r\n     */\r\n /*max_stack*/\r\n /*max_locals*/\r\n /*code length*/\r\n /*byte-code*/\r\n /*exception-table length*/\r\n /* exception table */\r\n /* Read exception table that contains all regions where an exception\r\n     * handler is active, i.e., a try { ... } catch() block.\r\n     */\r\n /* Adjust length, because of setAttributes in this(), s.b.  length\r\n     * is incorrect, because it didn't take the internal attributes\r\n     * into account yet! Very subtle bug, fixed in 3.1.1.\r\n     */\r\n /*max_stack*/\r\n /*max_locals*/\r\n /*code length*/\r\n /*byte-code*/\r\n /*exception-table length*/\r\n /* exception table */\r\n","StackMapFrame":"getFrameType addLocal addStackItem addStackItem clone numberOfDiffentStackItems numberOfDifferentLocals getNumberOfLocals getOffsetDelta toString printFrame print setTopOfStack initializeReceiver removeLocals putLocal replaceWithElementType getIndexOfDifferentLocals equals mergeLocals sizeInBytes getFrameType getLocals getNumberOfLocals getNumberOfStackItems getOffsetDelta getStackItems USED SAME_FRAME CHOP_FRAME APPEND_FRAME SAME_FRAME_EXTENDED FULL_FRAME SAME_LOCALS_1_STACK_ITEMS SAME_LOCALS_1_STACK_ITEMS_EXTENDED pc numberOfStackItems numberOfLocals localIndex locals stackItems numberOfDifferentLocals tagBits EMPTY_LOCALS_OR_STACK_ITEMS readOffset frameType numberOfLocals numberOfStackItems locals stackItems offsetDelta org.aspectj.org.eclipse.jdt.internal.compiler.codegen.StackMapFrame org.aspectj.org.eclipse.jdt.internal.core.util.StackMapFrame  need to see if prevLocals matches with currentLocals\r\n  next entry  is null\r\n  next entry  is null\r\n  locals at the same location are not equals - this has to be a full frame\r\n  the index must be the same\r\n  process remaining current locals\r\n  next entry  is null\r\n  process possible remaining prev locals\r\n  next entry  is null\r\n  need to check if there is a hole in the prev locals\r\n  chop frame if no hole and prevNumberOfLocals <= 3\r\n  append if no hole and currentNumberOfLocals <= 3\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   check the previous slot\r\n  SAME_LOCALS_1_STACK_ITEM_EXTENDED\r\n  CHOP\r\n  SAME_FRAME_EXTENDED\r\n  APPEND\r\n  FULL_FRAME\r\n  SAME_LOCALS_1_STACK_ITEM\r\n  SAME_FRAME\r\n","EclipseShadow":"getIWorld getEnclosingType getSourceLocation getEnclosingCodeSignature getThisVar getTargetVar getArgVar getThisJoinPointVar getThisJoinPointStaticPartVar getThisEnclosingJoinPointStaticPartVar getArgAnnotationVar getKindedAnnotationVar getTargetAnnotationVar getThisAnnotationVar getWithinAnnotationVar getWithinCodeAnnotationVar makeShadow world astNode context org.aspectj.ajdt.internal.compiler.lookup.EclipseShadow  XXX need to fill this in ASAP\r\n  ??? these should be ignored, they don't have shadows\r\n  super calls don't have shadows\r\n  XXX make sure we're getting the correct declaring type at call-site\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","HierarchyWalker":"preProcess postProcess process preProcess postProcess process org.aspectj.asm.HierarchyWalker org.aspectj.asm.HierarchyWalker /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n * ******************************************************************/\r\n","Initializer":"propertyDescriptors internalStructuralPropertiesForType internalGetSetIntProperty internalGetSetChildProperty internalGetChildListProperty internalJavadocProperty internalModifiers2Property internalModifiersProperty getNodeType0 clone0 subtreeMatch0 accept0 getBody setBody memSize treeSize analyseCode generateCode getKind isStatic parseStatements printStatement resolve traverse equals getElementType getHandleMemento getHandleMementoDelimiter hashCode readableName rename getNameRange getPrimaryElement toStringInfo JAVADOC_PROPERTY MODIFIERS_PROPERTY MODIFIERS2_PROPERTY BODY_PROPERTY PROPERTY_DESCRIPTORS_2_0 PROPERTY_DESCRIPTORS_3_0 body block lastVisibleFieldID bodyStart bodyEnd org.aspectj.org.eclipse.jdt.core.dom.Initializer org.aspectj.org.eclipse.jdt.internal.compiler.ast.Initializer org.aspectj.org.eclipse.jdt.internal.core.Initializer  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  lazy init must be thread-safe for readers\r\n  fill up the method body with statement\r\n  $NON-NLS-1$\r\n  0 is not valid: this first occurrence is occurrence 1.\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t * @since 3.0\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /*\r\n * @see JavaElement#getPrimaryElement(boolean)\r\n */\r\n /* package */\r\n","ASTRewriteAnalyzer":"getASTRewriteAnalyzer getAnalyzerVisitor getScanner getContent getLineInformation getExtendedRange getExtendedOffset getExtendedEnd getCopySourceEdit getChangeKind hasChildrenChanges isChanged isCollapsed isInsertBoundToPrevious getEditGroup getEvent getEditGroup getOriginalValue getNewValue addEdit getLineDelimiter createIndentString getIndentOfLine getIndentAtOffset doTextInsert addEditGroup doTextRemove doTextRemoveAndVisit doVisit doVisit doVisitList voidVisit voidVisit voidVisitList doVisitUnchangedChildren doTextReplace doTextCopy changeNotSupported getOriginalNode getNewNode getSeparatorString getInitialIndent getNodeIndent getStartOfNextNode getEndOfNode rewriteList insertAfterSeparator rewriteList rewriteRequiredNode rewriteNode rewriteJavadoc rewriteBodyNode rewriteOptionalQualifier getInitialIndent getSeparatorString getNode getNewLines countEmptyLines rewriteParagraphList rewriteOptionalTypeParameters isAllOfKind rewriteNodeList rewriteMethodBody rewriteExtraDimensions rewriteExtraDimensions getPosAfterLeftBrace getIndent doTextInsert needsNewLineForLineComment getCurrentLine rewriteModifiers getSeparatorString rewriteModifiers2 replaceOperation rewriteOperation postVisit preVisit doCopySourcePreVisit doCopySourcePostVisit visit visit rewriteReturnType visit visit visit visit visit visit getElementType getDimensions visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit ensureSpaceAfterReplace ensureSpaceBeforeReplace visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit getNodeIndent visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit findTagNameEnd visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit handleException AJ_ASTREWRITEANALYZER_FACTORY astRewriteAnalyzerFactory JLS2_INTERNAL currentEdit eventStore tokenScanner sourceCopyInfoToEdit sourceCopyEndNodes content lineInfo formatter nodeInfos extendedSourceRangeComputer lineCommentEndOffsets contantSeparator startPos list DEFAULT_SPACING initialIndent separatorLines annotationSeparation org.aspectj.org.eclipse.jdt.internal.core.dom.rewrite.ASTRewriteAnalyzer  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  used from inner classes\r\n  shared scanner\r\n  add a line delimiter\r\n  only one line delimiter per line comment required\r\n  bug fix for 95839: problem with inserting at the end of a line comment\r\n  $NON-NLS-1$\r\n  first node is insert\r\n  only inserts\r\n  all removed, set back to start so the keyword is removed as well\r\n  is unchanged\r\n  replaced or unchanged\r\n  no updates needed while nodes are unchanged\r\n  start of next\r\n  last node or next nodes are all inserts\r\n  start of next\r\n  remove node\r\n  remove separator\r\n  remove separator\r\n  remove node\r\n  insert separator\r\n  EXISTING && insert before separator\r\n  insert node\r\n  insert separator\r\n  if there is a prefix, remove the prefix as well\r\n  if there is a prefix, remove the prefix as well\r\n  prefix contains a new line: update the indent to the one used in the prefix\r\n  $NON-NLS-1$\r\n  adjust on next element\r\n  all removed: set start to left bracket\r\n  $NON-NLS-1$\r\n  set pos to '>'\r\n  list contained some type -> parse after closing bracket\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  markers.size can change!\r\n  insert until the marker's begin\r\n  replace with a placeholder\r\n  continue to insert after the replaced string\r\n  replace with a copy  continue to insert after the replaced string\r\n  need to split and create 2 edits as tracking node can surround replaced node.\r\n  add again for end position\r\n  copied code ends with a line comment, but doesn't contain the new line\r\n  next non-comment token\r\n  include comments\r\n  update pos\r\n  $NON-NLS-1$   see bug 165654\r\n  remove copy source edits\r\n  modifiers & class  $NON-NLS-1$   name\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  superclass\r\n  extended interfaces\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   startPos : find position after left brace of type, be aware that bracket might be missing\r\n  weakness in the AST: return type can exist, even if missing in source\r\n  difficult cases: return type insert or remove\r\n  use the start offset of the method name to insert\r\n  see bug 84049: can't use extended offset\r\n  remove up to the method name\r\n  insert\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  method name\r\n  $NON-NLS-1$   $NON-NLS-1$   parameters\r\n  number of total brackets\r\n  changed arraytype can have different dimension or type name\r\n  is replaced type\r\n  dimension node with expressions\r\n  insert new dimension\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  offset on first opening brace\r\n  insert pos\r\n  always include this array type\r\n  $NON-NLS-1$   space between break and label\r\n  catch (Exception) Block\r\n  after 'new'\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   insert pos\r\n  expression ? thenExpression : elseExpression\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   space between continue and label\r\n  do statement while expression\r\n  body\r\n  no modification possible\r\n  expression\r\n  expression.name\r\n  expression\r\n  name\r\n  { Modifier } Type VariableDeclarationFragment { ',' VariableDeclarationFragment } ';'\r\n  $NON-NLS-1$   position after opening parent\r\n  $NON-NLS-1$   position after first semicolon\r\n  $NON-NLS-1$   body\r\n  statement\r\n  after the closing parent\r\n  else keyword\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  instanceof\r\n  bug 103970\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   eval position after opening parent\r\n  no modification possible\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  insert pos\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   eval position after opening parent\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   eval position after opening parent\r\n  dont allow switching from case to default or back. New statements should be created.\r\n  same code as FieldDeclaration\r\n  $NON-NLS-1$   insert pos\r\n  same code as FieldDeclaration\r\n  $NON-NLS-1$   body\r\n  $NON-NLS-1$   eval position after opening parent\r\n  $NON-NLS-1$\r\n  eval position after name\r\n  $NON-NLS-1$  body\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  insert pos\r\n  'pos' can be before brace\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  type Modifier.ModifierKeyword\r\n  $NON-NLS-1$   eval position after opening parent\r\n  $NON-NLS-1$   eval position after opening parent\r\n  $NON-NLS-1$   pos after question mark\r\n  $NON-NLS-1$\r\n /*package*/\r\n /*\r\n\t * endpos can be -1 -> use the end pos of the body\r\n\t */\r\n /*\r\n\t * Next token is a left brace. Returns the offset after the brace. For incomplete code, return the start offset.  \r\n\t */\r\n /* (non-Javadoc)\r\n\t\t * @see org.aspectj.org.eclipse.jdt.internal.core.dom.rewrite.ASTRewriteAnalyzer.ListRewriter#getSeparatorString(int)\r\n\t\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#postVisit(ASTNode)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#preVisit(ASTNode)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(CompilationUnit)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(TypeDeclaration)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(MethodDeclaration)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(Block)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(ReturnStatement)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(AnonymousClassDeclaration)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(ArrayAccess)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(ArrayCreation)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(ArrayInitializer)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(ArrayType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(AssertStatement)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(Assignment)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(BooleanLiteral)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(BreakStatement)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(CastExpression)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(CatchClause)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(CharacterLiteral)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(ClassInstanceCreation)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(ConditionalExpression)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(ConstructorInvocation)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(ContinueStatement)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(DoStatement)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(EmptyStatement)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(ExpressionStatement)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(FieldAccess)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(FieldDeclaration)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(ForStatement)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(IfStatement)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(ImportDeclaration)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(InfixExpression)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(Initializer)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(InstanceofExpression)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(Javadoc)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(LabeledStatement)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(MethodInvocation)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(NullLiteral)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(NumberLiteral)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(PackageDeclaration)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(ParenthesizedExpression)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(PostfixExpression)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(PrefixExpression)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(PrimitiveType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(QualifiedName)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(SimpleName)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(SimpleType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(SingleVariableDeclaration)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(StringLiteral)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(SuperConstructorInvocation)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(SuperFieldAccess)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(SuperMethodInvocation)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(SwitchCase)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(SwitchStatement)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(SynchronizedStatement)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(ThisExpression)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(ThrowStatement)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(TryStatement)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(TypeDeclarationStatement)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(TypeLiteral)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(VariableDeclarationExpression)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(VariableDeclarationFragment)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(VariableDeclarationStatement)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(WhileStatement)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.MemberRef)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.MethodRef)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.MethodRefParameter)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.TagElement)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.TextElement)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.AnnotationTypeDeclaration)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.AnnotationTypeMemberDeclaration)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.EnhancedForStatement)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.EnumConstantDeclaration)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.EnumDeclaration)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.MarkerAnnotation)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.MemberValuePair)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.Modifier)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.NormalAnnotation)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.ParameterizedType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.QualifiedType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.SingleMemberAnnotation)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.TypeParameter)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.core.dom.WildcardType)\r\n\t */\r\n","TypePatternImpl":"asString toString asString toString typePattern typePattern org.aspectj.internal.lang.reflect.TypePatternImpl org.aspectj.internal.lang.reflect.TypePatternImpl /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.TypePattern#asString()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.TypePattern#asString()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","PrefixExpression":"toString toOperator propertyDescriptors internalStructuralPropertiesForType internalGetSetObjectProperty internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getOperator setOperator getOperand setOperand memSize treeSize operatorToString printExpressionNoParenthesis restrainUsageToNumericTypes traverse token INCREMENT DECREMENT PLUS MINUS COMPLEMENT NOT CODES OPERATOR_PROPERTY OPERAND_PROPERTY PROPERTY_DESCRIPTORS operator operand org.aspectj.org.eclipse.jdt.core.dom.PrefixExpression org.aspectj.org.eclipse.jdt.internal.compiler.ast.PrefixExpression  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  treat Operator as free\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","JavaModel":"buildStructure contains copy createElementInfo delete equals getElementType flushExternalFileCache getHandleFromMemento getHandleMemento getHandleMementoDelimiter getJavaProject getJavaProject getJavaProjects getNonJavaResources getPath getResource getUnderlyingResource getWorkspace move refreshExternalArchives rename runOperation toStringInfo getTarget getTargetAsExternalFile isFile getFile existingExternalFiles existingExternalConfirmedFiles org.aspectj.org.eclipse.jdt.internal.core.JavaModel  determine my children\r\n  file or folder\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  (case of a workspace rooted at d:\\ )\r\n  lookup - inside the container\r\n  (see http:  lookup - outside the container\r\n  $NON-NLS-1$   cache external file\r\n /*throws JavaModelException*/\r\n /*\r\n * @see IJavaModel\r\n */\r\n /*\r\n * @see JavaElement\r\n */\r\n /*\r\n * @see IJavaElement\r\n */\r\n /*\r\n * @see IJavaElement\r\n */\r\n","AdviceDeclaration":"generateInfoAttributes makeAttribute resolveStatements getDeclaredParameterCount generateProceedMethod generateCode determineExtraArgumentFlags resize addAtAspectJAnnotations buildArgNameRepresentation postParse checkAndSetModifiers addTjpArguments makeFinalArgument extendArgumentsLength printBody printReturnType propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty internalGetChildListProperty internalJavadocProperty getNodeType0 getPointcut setPointcut parameters thrownExceptions getBody setBody memSize treeSize internalModifiersProperty internalModifiers2Property pointcutDesignator baseArgumentCount extraArgument kind extraArgumentFlags proceedMethodBinding proceedCalls proceedInInners proceedCallSignatures formalsUnchangedToProceed declaredExceptions JAVADOC_PROPERTY PARAMETERS_PROPERTY POINTCUT_PROPERTY THROWN_EXCEPTIONS_PROPERTY BODY_PROPERTY PROPERTY_DESCRIPTORS_2_0 PROPERTY_DESCRIPTORS_3_0 parameters pointcut thrownExceptions optionalBody org.aspectj.ajdt.internal.compiler.ast.AdviceDeclaration org.aspectj.org.eclipse.jdt.core.dom.AdviceDeclaration  set during parsing\r\n  referenced by IfPseudoToken.makeArguments\r\n  set during parsing, referenced by Proceed\r\n  set during parsing, referenced by Proceed and AsmElementFormatter\r\n  set during this.resolveStaments, referenced by Proceed\r\n  populated during Proceed.findEnclosingAround\r\n  override\r\n  !!! safety\r\n  upperScope);\r\n  XXX set these correctly\r\n  System.err.println(\"proceed in inner: \" + call);\r\n  proceedInInners so that we won't try to inline this body\r\n  if we have proceed in inners we won't ever be inlined so the code below is unneeded\r\n  override\r\n  this only works before code generation\r\n  called by Proceed.resolveType\r\n  push the closure\r\n  call run\r\n  override\r\n  override, Called by ClassScope.postParse\r\n  called by IfPseudoToken\r\n  XXX encode start and end location\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  ajh02: should add one like ADVICE_DECLARATION or something\r\n  a MethodDeclaration may occur in a Block - must check cycles\r\n  ajh02: stub. I don't know what this is meant to do\r\n  ajh02: stub method. I don't know what this does\r\n  ajh02: stub method. I don't know what this does\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t * @since 3.0\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","ClasspathAttribute":"equals getName getValue hashCode toString name value org.aspectj.org.eclipse.jdt.internal.core.ClasspathAttribute  $NON-NLS-1$\r\n","CompilerConfigurationChangeFlags":"NO_CHANGES PROJECTSOURCEFILES_CHANGED JAVAOPTIONS_CHANGED ASPECTPATH_CHANGED CLASSPATH_CHANGED INPATH_CHANGED NONSTANDARDOPTIONS_CHANGED OUTJAR_CHANGED PROJECTSOURCERESOURCES_CHANGED OUTPUTDESTINATIONS_CHANGED INJARS_CHANGED EVERYTHING org.aspectj.ajdt.internal.core.builder.CompilerConfigurationChangeFlags  deprecated, not in use any more\r\n","BasicType":"getType equals getType equals org.aspectj.apache.bcel.generic.BasicType org.aspectj.apache.bcel.generic.BasicType /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n","Attribute":"dump readAttribute getName getLength getNameIndex getTag getConstantPool clone copy toString accept dump readAttribute getName getLength getNameIndex getTag getConstantPool clone copy toString accept NoAttributes tag nameIndex length constantPool NoAttributes tag nameIndex length constantPool org.aspectj.apache.bcel.classfile.Attribute org.aspectj.apache.bcel.classfile.Attribute  Tag to distinguish subclasses\r\n  Points to attribute name in constant pool\r\n  Content length of attribute field\r\n  Unknown attribute\r\n  Compare strings to find known attribute\r\n  Never occurs\r\n  Tag to distinguish subclasses\r\n  Points to attribute name in constant pool\r\n  Content length of attribute field\r\n  Unknown attribute\r\n  Compare strings to find known attribute\r\n  Never occurs\r\n","SourceLocationImpl":"getWithinType getFileName getLine getColumn toString getWithinType getFileName getLine getColumn toString getWithinType getFileName getLine getColumn toString withinType fileName line withinType fileName line withinType fileName line org.aspectj.runtime.reflect.SourceLocationImpl org.aspectj.runtime.reflect.SourceLocationImpl org.aspectj.runtime.reflect.SourceLocationImpl /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","CharArrayBuffer":"append append append append getContents toString fBuffer DEFAULT_BUFFER_SIZE fEnd fSize fRanges org.aspectj.org.eclipse.jdt.internal.core.util.CharArrayBuffer  determine the size of the array\r\n  copy the results\r\n","CompletionOnQualifiedTypeReference":"aboutToResolve copyDims getTypeBinding isClass isInterface isException isSuperType printExpression K_TYPE K_CLASS K_INTERFACE K_EXCEPTION kind completionIdentifier org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnQualifiedTypeReference  step up from the ClassScope\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n * No expansion of the completion reference into an array one\r\n */\r\n","TypeParameterLocator":"match match matchContainer matchTypeParameter referenceType resolveLevel resolveLevel toString pattern org.aspectj.org.eclipse.jdt.internal.core.search.matching.TypeParameterLocator  Type parameter cannot be qualified\r\n  $NON-NLS-1$\r\n /*\r\n\t * Verify whether a type reference matches name pattern.\r\n\t * Type parameter references (ie. type arguments) are compiler type reference nodes\r\n\t */\r\n /*\r\n\t * Verify whether a type parameter matches name pattern.\r\n\t */\r\n /*\r\n\t * While searching for references, need to match all containers as we can have references in javadoc comments.\r\n\t * Otherwise, only class or method container can declare type parameters.\r\n\t */\r\n /*\r\n\t * Verify that a type variable binding match pattern infos.\r\n\t * For types, only look at declaring member name.\r\n\t * For methods, also look at declaring class and parameters type names\r\n\t */\r\n /*\r\n\t * Resolve level for a possible matching node.\r\n\t * Only type references while searching references and type parameters\r\n\t * while searching declarations are valid.\r\n\t */\r\n /*\r\n\t * Resolve level for a binding.\r\n\t * Only type variable bindings are valid.\r\n\t */\r\n","IElementHandleProvider":"createHandleIdentifier createHandleIdentifier createHandleIdentifier getFileForHandle getLineNumberForHandle getOffSetForHandle dependsOnLocation initialize createHandleIdentifier createHandleIdentifier createHandleIdentifier getFileForHandle getLineNumberForHandle getOffSetForHandle dependsOnLocation initialize org.aspectj.asm.IElementHandleProvider org.aspectj.asm.IElementHandleProvider /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n * ******************************************************************/\r\n","FieldOrMethod":"setAttributes dump getAttributes getConstantPool getNameIndex getSignatureIndex getName getSignature getDeclaredSignature copy_ getAnnotations getGenericSignature getSignature getName getClassName getClassType getLoadClassType setAttributes dump getAttributes getConstantPool getNameIndex getSignatureIndex getName getSignature getDeclaredSignature copy_ getAnnotations getGenericSignature getSignature getName getClassName getClassType getLoadClassType nameIndex signatureIndex attributes cpool name signature annotations signatureAttributeString searchedForSignatureAttribute signature name classname nameIndex signatureIndex attributes cpool name signature annotations signatureAttributeString searchedForSignatureAttribute signature name classname org.aspectj.apache.bcel.classfile.FieldOrMethod org.aspectj.apache.bcel.generic.FieldOrMethod org.aspectj.apache.bcel.classfile.FieldOrMethod org.aspectj.apache.bcel.generic.FieldOrMethod  lazily initialized\r\n  lazily initialized\r\n  lazily initialized\r\n  Find attributes that contain annotation data\r\n  remain there.\r\n  private boolean dontKnowSignature=true;\r\n  private boolean dontKnowName =true;\r\n  private boolean dontKnowClassname =true;\r\n  lazily initialized\r\n  lazily initialized\r\n  lazily initialized\r\n  Find attributes that contain annotation data\r\n  remain there.\r\n  private boolean dontKnowSignature=true;\r\n  private boolean dontKnowName =true;\r\n  private boolean dontKnowClassname =true;\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n","AspectJElementHierarchy":"getElement getRoot setRoot addToFileMap removeFromFileMap setFileMap findInFileMap getFileMapEntrySet isValid findElementForSignature findElementForLabel findElementForType findMatchingPackages findClassInNodes findElementForSourceFile findElementForSourceLine findElementForSourceLine findElementForOffSet createFileStructureNode findNodeForSourceLineHelper matches hasMoreSpecificChild getConfigFile setConfigFile findElementForHandle findElementForHandleOrCreate findElementForHandle cache flushTypeMap flushHandleMap flushFileMap updateHandleMap getFilename getCanonicalFilePath getElement getRoot setRoot addToFileMap removeFromFileMap setFileMap findInFileMap getFileMapEntrySet isValid findElementForSignature findElementForLabel findElementForType findMatchingPackages findClassInNodes findElementForSourceFile findElementForSourceLine findElementForSourceLine findElementForOffSet createFileStructureNode findNodeForSourceLineHelper matches hasMoreSpecificChild getConfigFile setConfigFile findElementForHandle findElementForHandleOrCreate findElementForHandle cache flushTypeMap flushHandleMap flushFileMap updateHandleMap getFilename getCanonicalFilePath serialVersionUID root configFile fileMap handleMap typeMap serialVersionUID root configFile fileMap handleMap typeMap org.aspectj.asm.internal.AspectJElementHierarchy org.aspectj.asm.internal.AspectJElementHierarchy  Build a cache key and check the cache\r\n  this searches each file for a class\r\n  The children might be source folders or packages\r\n  default package\r\n  thing to return in the list\r\n  dealing with source folders\r\n  findFileNode(filePath, model);\r\n  SourceFilePath might have originated on windows on linux...\r\n  '!' is used like in URLs \"c:  we are a binary aspect in the default package\r\n  fileNode.setSourceLocation();\r\n  );\r\n  try the cache first...\r\n  findElementForHandle() to mirror behaviour before pr141730\r\n  it must be down here if it is anywhere\r\n  Only delete the entries we need to from the handle map - for performance reasons\r\n  TODO rename this method ... it does more than just the handle map\r\n  Build a cache key and check the cache\r\n  this searches each file for a class\r\n  The children might be source folders or packages\r\n  default package\r\n  thing to return in the list\r\n  dealing with source folders\r\n  findFileNode(filePath, model);\r\n  SourceFilePath might have originated on windows on linux...\r\n  '!' is used like in URLs \"c:  we are a binary aspect in the default package\r\n  fileNode.setSourceLocation();\r\n  );\r\n  try the cache first...\r\n  findElementForHandle() to mirror behaviour before pr141730\r\n  it must be down here if it is anywhere\r\n  Only delete the entries we need to from the handle map - for performance reasons\r\n  TODO rename this method ... it does more than just the handle map\r\n /* IProgramElement */\r\n /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n *     Andy Clement    Extensions for better IDE representation\r\n * ******************************************************************/\r\n /* IProgramElement */\r\n /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n *     Andy Clement    Extensions for better IDE representation\r\n * ******************************************************************/\r\n","ClassLoaderRepository":"getBootClassLoader processQueue get put entrySet clear size remove storeClassAsReference storeClass removeClass findClass findClassLocal findClassShared toURL loadClass report reportStats reset loadClass clear getBootClassLoader processQueue get put entrySet clear size remove storeClassAsReference storeClass removeClass findClass findClassLocal findClassShared toURL loadClass report reportStats reset loadClass clear bootClassLoader loaderRef localCache sharedCache nameMap useSharedCache cacheHitsShared missSharedEvicted timeManipulatingURLs timeSpentLoading classesLoadedCount misses cacheHitsLocal missLocalEvicted map recordMiss rq key bootClassLoader loaderRef localCache sharedCache nameMap useSharedCache cacheHitsShared missSharedEvicted timeManipulatingURLs timeSpentLoading classesLoadedCount misses cacheHitsLocal missLocalEvicted map recordMiss rq key org.aspectj.apache.bcel.util.ClassLoaderRepository org.aspectj.apache.bcel.util.ClassLoaderRepository  Choice of cache...\r\n  For fast translation of the classname *intentionally not static*\r\n  Misses in shared cache access due to reference GC\r\n  Misses in local cache access due to reference GC\r\n  only interested in recording miss stats sometimes\r\n  it got GC'd\r\n  Can track back to its key\r\n  can't risk setting repository, we'll get in a pickle!\r\n  translate to a URL\r\n  Look in the appropriate cache\r\n  Didn't find it in either cache\r\n  Load it\r\n  Cache it\r\n  Choice of cache...\r\n  For fast translation of the classname *intentionally not static*\r\n  Misses in shared cache access due to reference GC\r\n  Misses in local cache access due to reference GC\r\n  only interested in recording miss stats sometimes\r\n  it got GC'd\r\n  Can track back to its key\r\n  can't risk setting repository, we'll get in a pickle!\r\n  translate to a URL\r\n  Look in the appropriate cache\r\n  Didn't find it in either cache\r\n  Load it\r\n  Cache it\r\n /*<URL,SoftRef(JavaClass)>*/\r\n /*<URL,JavaClass>*/\r\n /*<String,URL>*/\r\n /*<URL,SoftRef(JavaClass)>*/\r\n /*<URL,JavaClass>*/\r\n /*<String,URL>*/\r\n","TypeLiteral":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getType setType memSize treeSize TYPE_PROPERTY PROPERTY_DESCRIPTORS type org.aspectj.org.eclipse.jdt.core.dom.TypeLiteral  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  lazy init must be thread-safe for readers\r\n  treat Operator as free\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","ConditionalFlowInfo":"addInitializationsFrom addPotentialInitializationsFrom asNegatedCondition copy initsWhenFalse initsWhenTrue isDefinitelyAssigned isDefinitelyAssigned isDefinitelyNonNull isDefinitelyNull isDefinitelyUnknown isPotentiallyAssigned isPotentiallyAssigned isPotentiallyNonNull isPotentiallyNull isPotentiallyUnknown isProtectedNonNull isProtectedNull markAsComparedEqualToNonNull markAsComparedEqualToNull markAsDefinitelyAssigned markAsDefinitelyAssigned markAsDefinitelyNonNull markAsDefinitelyNull markAsDefinitelyUnknown setReachMode mergedWith nullInfoLessUnconditionalCopy toString safeInitsWhenTrue unconditionalCopy unconditionalFieldLessCopy unconditionalInits unconditionalInitsWithoutSideEffect initsWhenTrue initsWhenFalse org.aspectj.org.eclipse.jdt.internal.compiler.flow.ConditionalFlowInfo  $NON-NLS-1$   operation for UnconditionalFlowInfo\r\n","IDOMNode":"addChild canHaveChildren clone getCharacters getChild getChildren getContents getFirstChild getJavaElement getName getNextNode getNodeType getParent getPreviousNode insertSibling isAllowableChild isSignatureEqual remove setName COMPILATION_UNIT PACKAGE IMPORT TYPE FIELD METHOD INITIALIZER org.aspectj.org.eclipse.jdt.core.jdom.IDOMNode","ImportContainer":"equals getElementType getHandleFromMemento getHandleMementoDelimiter getImport getPrimaryElement getSourceRange readableName toString toStringInfo org.aspectj.org.eclipse.jdt.internal.core.ImportContainer    make sure to copy the string (so that it doesn't hold on the underlying char[] that might be much bigger than necessary)\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n * @see JavaElement\r\n */\r\n /*\r\n * @see JavaElement#getPrimaryElement(boolean)\r\n */\r\n","StringSet":"add clear includes rehash toString values elementSize threshold org.aspectj.org.eclipse.jdt.internal.core.builder.StringSet  to avoid using Enumerations, walk the individual values skipping nulls\r\n  number of elements in the table\r\n  size represents the expected number of elements\r\n  did not add it since it already existed\r\n  assumes the threshold is never equal to the size of the table\r\n  double the number of expected elements\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","ICorrectionRequestor":"acceptClass acceptField acceptInterface acceptLocalVariable acceptMethod acceptPackage org.aspectj.org.eclipse.jdt.core.ICorrectionRequestor","ContinueStatement":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getLabel setLabel memSize treeSize analyseCode printStatement traverse LABEL_PROPERTY PROPERTY_DESCRIPTORS optionalLabel org.aspectj.org.eclipse.jdt.core.dom.ContinueStatement org.aspectj.org.eclipse.jdt.internal.compiler.ast.ContinueStatement  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  lookup the label, this should answer the returnContext\r\n  pretend it did not continue since no actual target\r\n  pretend it did not continue since no actual target\r\n  grow\r\n  only record continue info once accumulated through subroutines, and only against target context\r\n  collect inits\r\n  resize subroutines\r\n  $NON-NLS-1$\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","Statement":"getLeadingComment setLeadingComment copyLeadingComment memSize analyseCode branchChainTo complainIfUnreachable generateArguments generateCode isEmptyBlock isValidJavaStatement print printStatement resolve resolveCase optionalLeadingComment org.aspectj.org.eclipse.jdt.core.dom.Statement org.aspectj.org.eclipse.jdt.internal.compiler.ast.Statement  but we protect them nevertheless\r\n  keep going for fake reachable\r\n  Report an error if necessary\r\n  standard generation for method arguments\r\n  foo(1), foo(1, null), foo(1, 2), foo(1, 2, 3, 4) & foo(1, new int[] {1, 2})\r\n  parameterType has to be an array type\r\n  generate code for an empty array of parameterType\r\n  create a mono-dimensional array\r\n  right number of arguments - could be inexact - pass argument as is\r\n  need to gen elements into an array, then gen each remaining element into created array\r\n  create a mono-dimensional array\r\n  foo(1, new int[]{2, 3}) or foo(1, null) --> last arg is passed as-is\r\n  need to gen elements into an array, then gen each remaining element into created array\r\n  create a mono-dimensional array\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","Declare":"read resolve parameterizeWith isAdviceLike getNameSuffix setDeclaringType getDeclaringType read resolve parameterizeWith isAdviceLike getNameSuffix setDeclaringType getDeclaringType ERROR_OR_WARNING PARENTS SOFT DOMINATES ANNOTATION declaringType ERROR_OR_WARNING PARENTS SOFT DOMINATES ANNOTATION declaringType org.aspectj.weaver.patterns.Declare org.aspectj.weaver.patterns.Declare  set when reading declare from aspect\r\n  set when reading declare from aspect\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","ResolvedSourceMethod":"getKey isResolved toStringInfo unresolved uniqueKey org.aspectj.org.eclipse.jdt.internal.core.ResolvedSourceMethod  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n\t * See class comments.\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.core.SourceMethod#getKey()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.IMethod#isResolved()\r\n\t */\r\n","ExactTypePattern":"isArray couldEverMatchSameTypesAs matchesExactly matchesTypeVariable matchesExactly getType matchesInstanceof equals hashCode write read readTypePattern150 readTypePatternOldStyle toString resolveBindings parameterizeWith accept isArray couldEverMatchSameTypesAs matchesExactly matchesTypeVariable matchesExactly getType matchesInstanceof equals hashCode write read readTypePattern150 readTypePatternOldStyle toString resolveBindings parameterizeWith accept type primitiveTypesMap boxedPrimitivesMap boxedTypesMap EXACT_VERSION type primitiveTypesMap boxedPrimitivesMap boxedTypesMap EXACT_VERSION org.aspectj.weaver.patterns.ExactTypePattern org.aspectj.weaver.patterns.ExactTypePattern  false is necessary but not sufficient\r\n  was this method previously coded to return false *on purpose* ??  pr124808\r\n  in our world, Object is assignable from anything\r\n  fix for PR 64262 - shouldn't try to coerce primitives\r\n  true if (matchType instanceof this.type)\r\n  rev if changed\r\n  false is necessary but not sufficient\r\n  was this method previously coded to return false *on purpose* ??  pr124808\r\n  in our world, Object is assignable from anything\r\n  fix for PR 64262 - shouldn't try to coerce primitives\r\n  true if (matchType instanceof this.type)\r\n  rev if changed\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.TypePattern#couldEverMatchSameTypesAs(org.aspectj.weaver.patterns.TypePattern)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.TypePattern#couldEverMatchSameTypesAs(org.aspectj.weaver.patterns.TypePattern)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","InvokeInstruction":"toString consumeStack produceStack getType getMethodName getReturnType getArgumentTypes toString consumeStack produceStack getType getMethodName getReturnType getArgumentTypes org.aspectj.apache.bcel.generic.InvokeInstruction org.aspectj.apache.bcel.generic.InvokeInstruction /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n","PatternNode":"getNodeType0 memSize getStart getEnd getSourceContext getFileName setLocation copyLocationFrom getSourceLocation write writeLocation readLocation accept traverse getStart getEnd getSourceContext getFileName setLocation copyLocationFrom getSourceLocation write writeLocation readLocation accept traverse start end sourceContext start end sourceContext org.aspectj.org.eclipse.jdt.core.dom.PatternNode org.aspectj.weaver.patterns.PatternNode org.aspectj.weaver.patterns.PatternNode  should make a PATTERN_NODE type constant\r\n  stub method\r\n  System.err.println(\"no context: \" + this);\r\n  System.out.println(\"get context: \" + this + \" is \" + sourceContext);\r\n  System.err.println(\"no context: \" + this);\r\n  System.out.println(\"get context: \" + this + \" is \" + sourceContext);\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","IAnnotationBinding":"getAllMemberValuePairs getAnnotationType getDeclaredMemberValuePairs getName org.aspectj.org.eclipse.jdt.core.dom.IAnnotationBinding","IWorkingCopy":"commit destroy findSharedWorkingCopy getOriginal getOriginalElement findElements findPrimaryType getSharedWorkingCopy getWorkingCopy getWorkingCopy isBasedOn isWorkingCopy reconcile reconcile restore org.aspectj.org.eclipse.jdt.core.IWorkingCopy","BinaryField":"equals getConstant getFlags getElementType getHandleMementoDelimiter getKey getTypeSignature isEnumConstant isResolved resolved toStringInfo getAttachedJavadoc org.aspectj.org.eclipse.jdt.internal.core.BinaryField  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n * Constructs a handle to the field with the given name in the specified type. \r\n */\r\n /*\r\n * @see IField\r\n */\r\n /*\r\n * @see IMember\r\n */\r\n /*\r\n * @see IJavaElement\r\n */\r\n /*\r\n * @see JavaElement#getHandleMemento()\r\n */\r\n /*\r\n * @see IField\r\n */\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.core.IField#isEnumConstant()\r\n */\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.core.IField#isResolved()\r\n */\r\n /*\r\n * @private Debugging purposes\r\n */\r\n /* package */\r\n","InterTypeConstructorDeclaration":"getParameterTypes getGenericParameterTypes getExceptionTypes parseStatements getPrefix resolve raiseNoFieldInitializersWarning suppressingNoExplicitConstructorCall makePreMethod build makeAttribute generateCode getShadowKindForBody getParameterTypes getGenericParameterTypes getExceptionTypes SUPPRESSAJWARNINGS NOEXPLICITCONSTRUCTORCALL preMethod explicitConstructorCall org.aspectj.lang.reflect.InterTypeConstructorDeclaration org.aspectj.ajdt.internal.compiler.ast.InterTypeConstructorDeclaration org.aspectj.lang.reflect.InterTypeConstructorDeclaration  after annotations have been resolved...\r\n  reset calls.  This is SAFE\r\n  newParent);\r\n  If it is null then we are going to report something else is wrong with this code!\r\n  Error message output in isTargetAnnotation\r\n  Error message output in isTargetEnum\r\n  We encountered a problem building the scope, don't continue - error already reported\r\n  This signature represents what we want consumers of the targetted type to 'see'\r\n  classFile.codeStream.generateAttributes &= ~ClassFileConstants.ATTR_VARS;\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","JavaProjectElementInfo":"addSuperPackageNames computeNonJavaResources getProjectCache getNonJavaResources initializePackageNames isClasspathEntryOrOutputLocation newNameLookup resetCaches setNonJavaResources NO_ROOTS allPkgFragmentRootsCache allPkgFragmentsCache pkgFragmentsCaches rootToResolvedEntries nonJavaResources projectCache org.aspectj.org.eclipse.jdt.internal.core.JavaProjectElementInfo  determine if src == project and  ignore a jar file on the classpath\r\n  ignore .java file if src == project\r\n  ignore .class file if bin == project\r\n  resize\r\n  else add non java resource\r\n  ignore non-excluded folders on the classpath or that correspond to an output location\r\n  resize\r\n  else add non java resource\r\n  project does not exist: cannot happen since this is the info of the project\r\n  compute fragment cache\r\n  root doesn't exist: ignore\r\n  retrieve package fragments  cache from the root's project\r\n  project doesn't exit\r\n  retrieve package fragments cache from this project\r\n  see https:  are also in the map\r\n /*\r\n\t\t * A cache of all package fragment roots of this project.\r\n\t\t */\r\n /*\r\n\t\t * A cache of all package fragments in this project.\r\n\t\t * (a map from String[] (the package name) to IPackageFragmentRoot[] (the package fragment roots that contain a package fragment with this name))\r\n\t\t */\r\n /*\r\n\t\t * A cache of package fragments for each package fragment root of this project\r\n\t\t * (a map from IPackageFragmentRoot to a set of String[] (the package name))\r\n\t\t */\r\n /*\r\n\t * Adds the given name and its super names to the given set\r\n\t * (e.g. for {\"a\", \"b\", \"c\"}, adds {\"a\", \"b\", \"c\"}, {\"a\", \"b\"}, and {\"a\"})\r\n\t */\r\n /*\r\n\t * Returns whether the given path is a classpath entry or an output location.\r\n\t */\r\n /*\r\n\t * Creates a new name lookup for this project info. \r\n\t * The given project is assumed to be the handle of this info.\r\n\t * This name lookup first looks in the given working copies.\r\n\t */\r\n /*\r\n\t * Reset the package fragment roots and package fragment caches\r\n\t */\r\n /* package */\r\n","AnnotatedElement":"hasAnnotation getAnnotationTypes getAnnotationOfType hasAnnotation getAnnotationTypes getAnnotationOfType org.aspectj.weaver.AnnotatedElement org.aspectj.weaver.AnnotatedElement /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","SelectionOnSingleNameReference":"resolveType printExpression org.aspectj.org.eclipse.jdt.internal.codeassist.select.SelectionOnSingleNameReference  it can be a package, type, member type, local variable or field\r\n  tolerate some error cases\r\n  tolerate some error cases\r\n  $NON-NLS-1$\r\n","RecoveredImport":"parseTree sourceEnd toString updatedImportReference updateParseTree updateSourceEndIfNecessary importReference org.aspectj.org.eclipse.jdt.internal.compiler.parser.RecoveredImport  $NON-NLS-1$\r\n /* \r\n * Answer the associated parsed structure\r\n */\r\n /*\r\n * Answer the very source end of the corresponding parse node\r\n */\r\n /*\r\n * Update the declarationSourceEnd of the corresponding parse node\r\n */\r\n","IMember":"getCategories getClassFile getCompilationUnit getDeclaringType getFlags getJavadocRange getNameRange getOccurrenceCount getTypeRoot getType isBinary org.aspectj.org.eclipse.jdt.core.IMember","PackageFragmentRootInfo":"computeFolderNonJavaResources computeNonJavaResources getNonJavaResources getRootKind getSourceMapper isClasspathEntry setNonJavaResources setRootKind setSourceMapper sourceMapper fRootKind fNonJavaResources org.aspectj.org.eclipse.jdt.internal.core.PackageFragmentRootInfo  ignore .java files that are not excluded\r\n  ignore .class files\r\n  ignore .zip or .jar file on classpath\r\n  ignore valid packages or excluded folders that correspond to a nested pkg fragment root\r\n  resize\r\n  is actually the package fragment root)\r\n","JarPackageFragment":"computeChildren computeNonJavaResources containsJavaResources createCompilationUnit createElementInfo generateInfos getClassFiles getCompilationUnits getCorrespondingResource getNonJavaResources isReadOnly storedNonJavaResources org.aspectj.org.eclipse.jdt.internal.core.JarPackageFragment  map from IPath to IJarEntryResource\r\n  map from IPath to ArrayList<IJarEntryResource>\r\n  all parents are already registered\r\n  consider that a .java file is not a non-java resource (see bug 12246 Packages view shows .class and .java files when JAR has source)\r\n  not used for JarPackageFragments: info is created when jar is opened\r\n  Open my jar: this creates all the pkg infos\r\n  We don't want to show non java resources of the default package (see PR #1G58NB8)\r\n /* package */\r\n /*\r\n * @see JavaElement#generateInfos\r\n */\r\n","IndentManipulation":"isIndentChar isLineDelimiterChar measureIndentUnits measureIndentInSpaces extractIndentString trimIndent changeIndent getChangeIndentEdits indexOfIndent getTabWidth getIndentWidth getIntValue org.aspectj.org.eclipse.jdt.core.formatter.IndentManipulation  Assert.isTrue(false, \"Line does not have requested number of indents\");\r\n  remove the tab\r\n  and add the missing spaces\r\n  can not happen\r\n  no new line after last line\r\n  no indent for first line (contained in the formatted string)\r\n  $NON-NLS-1$\r\n /*\r\n\t * Returns the index where the indent of the given size ends.\r\n\t * Returns <code>-1<code> if the line isn't prefixed with an indent of\r\n\t * the given number of indents.\r\n\t */\r\n","JavaElementInfo":"addChild clone getChildren removeChild setChildren children NO_NON_JAVA_RESOURCES org.aspectj.org.eclipse.jdt.internal.core.JavaElementInfo  already included\r\n /* package */\r\n","JavaSearchParticipant":"beginSearching doneSearching getDescription getDocument indexDocument locateMatches selectIndexes indexSelector org.aspectj.org.eclipse.jdt.internal.core.search.JavaSearchParticipant  $NON-NLS-1$\r\n  in case the document was already indexed\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.search.SearchParticipant#beginSearching()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.search.SearchParticipant#doneSearching()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.search.SearchParticipant#getName()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.search.SearchParticipant#getDocument(String)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.search.SearchParticipant#indexDocument(SearchDocument)\r\n\t */\r\n /* eliminating false matches and locating them */\r\n /* (non-Javadoc)\r\n\t * @see SearchParticipant#locateMatches(SearchDocument[], SearchPattern, IJavaSearchScope, SearchRequestor, IProgressMonitor)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.search.SearchParticipant#selectIndexes(org.aspectj.org.eclipse.jdt.core.search.SearchQuery, org.aspectj.org.eclipse.jdt.core.search.SearchContext)\r\n\t */\r\n","IJob":"belongsTo cancel ensureReadyToRun execute ForceImmediate CancelIfNotReady WaitUntilReady FAILED COMPLETE org.aspectj.org.eclipse.jdt.internal.core.search.processing.IJob /* Waiting policies */\r\n /* Job's result */\r\n","SimpleNameVector":"add addAll copyInto contains elementAt remove removeAll size toString INITIAL_SIZE size maxSize elements org.aspectj.org.eclipse.jdt.internal.compiler.util.SimpleNameVector  knows that size starts <= maxSize\r\n  assume no more elements will be added\r\n  shift the remaining elements down one spot\r\n  assumes only one occurrence of the element exists\r\n  $NON-NLS-1$\r\n","DefaultProblemFactory":"createProblem keyFromID getLocale setLocale getLocalizedMessage localizedMessage loadMessageTemplates messageTemplates locale DEFAULT_LOCALE_TEMPLATES DOUBLE_QUOTES SINGLE_QUOTE org.aspectj.org.eclipse.jdt.internal.compiler.problem.DefaultProblemFactory  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  keys are offsetted by one in table, since it cannot handle 0 key\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  for compatibility with MessageFormat which eliminates double quotes in original message\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  see https:  $NON-NLS-1$\r\n  $NON-NLS-1$","PackageReferenceMatch":"org.aspectj.org.eclipse.jdt.core.search.PackageReferenceMatch","ClasspathEntry":"combineAccessRules combineWith combine decodeExtraAttributes decodeAccessRules decodePatterns decodeUnknownNode decodeUnknownNode fullExclusionPatternChars fullInclusionPatternChars elementEncode encodeExtraAttributes encodeAccessRules encodeAccessRule encodeUnknownChildren elementDecode getChildAttributes removeAttribute removeNode encodePatterns equals equalAttributes equalPatterns getAccessRules getAccessRuleSet getContentKind getEntryKind getExclusionPatterns getExtraAttributes getMessageTemplates getInclusionPatterns getOutputLocation getPath getSourceAttachmentPath getSourceAttachmentRootPath hashCode isExported isOptional kindFromString kindToString getAccessRules toString rootID getResolvedEntry validateClasspath validateClasspathEntry TAG_CLASSPATH TAG_CLASSPATHENTRY TAG_OUTPUT TAG_KIND TAG_PATH TAG_SOURCEPATH TAG_ROOTPATH TAG_EXPORTED TAG_INCLUDING TAG_EXCLUDING TAG_ATTRIBUTES TAG_ATTRIBUTE TAG_ATTRIBUTE_NAME TAG_ATTRIBUTE_VALUE TAG_COMBINE_ACCESS_RULES TAG_ACCESS_RULES TAG_ACCESS_RULE TAG_PATTERN TAG_ACCESSIBLE TAG_NON_ACCESSIBLE TAG_DISCOURAGED TAG_IGNORE_IF_BETTER entryKind contentKind path inclusionPatterns fullInclusionPatternChars exclusionPatterns fullExclusionPatternChars UNINIT_PATTERNS combineAccessRules rootID accessRuleSet attributes children INCLUDE_ALL EXCLUDE_NONE NO_EXTRA_ATTRIBUTES NO_ACCESS_RULES sourceAttachmentPath sourceAttachmentRootPath specificOutputLocation K_OUTPUT isExported extraAttributes org.aspectj.org.eclipse.jdt.internal.core.ClasspathEntry  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  duplicate container entry for tagging it as exported\r\n  no need to clone\r\n  concat access rules\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  see https:  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  translate to project relative from absolute (unless a device path)\r\n  translate to project relative from absolute\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  unknown attributes\r\n  access rule set is null if no access rules\r\n  $NON-NLS-1$\r\n  ensure path is absolute\r\n  source attachment info (optional)\r\n  $NON-NLS-1$\r\n  inclusion patterns (optional)\r\n  exclusion patterns (optional)\r\n  access rules (optional)\r\n  backward compatibility\r\n  $NON-NLS-1$\r\n  extra attributes (optional)\r\n  custom output location\r\n  unknown attributes\r\n  unknown children\r\n  recreate the CP entry\r\n  inclusion patterns\r\n  exclusion patterns\r\n  source attachment\r\n  source attachment root\r\n  specific output folder\r\n  must be an entry in this project or specify another project\r\n  an invalid source folder\r\n  another project\r\n  this project\r\n  source attachment\r\n  source attachment root\r\n  custom output location\r\n  no access rules\r\n  no accessible files to combine\r\n    since IPath.equals is specified to ignore trailing separators\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$\r\n  can be remote source entry when reconciling\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  backward compatibility   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  tolerate null path, it will be reset to default\r\n  retrieve resolved classpath\r\n  for error reporting purpose\r\n  ensure custom output is in project\r\n  already found\r\n  check exact match\r\n  accumulate all outputs, will check nesting once all available (to handle ordering issues)\r\n  output before complaining\r\n  check nesting\r\n  check nesting across output locations\r\n  allow custom output nesting in project's output if all source entries have a custom output\r\n  if no source and no lib folder, then allowed\r\n  Build some common strings for status message\r\n  complain if duplicate path\r\n  complain if self-referring project entry\r\n  tolerate nesting output in src if src==prj\r\n  no further check if entry coincidates with project or output location\r\n  $NON-NLS-1$\r\n  allow nesting source entries in each other as long as the outer entry excludes the inner one\r\n  prevent nesting output location inside entry unless enclosing is a source entry which explicitly exclude the output location\r\n  prevent nesting entry inside output location - when distinct from project or a source folder\r\n  check all entries\r\n  Build some common strings for status message\r\n  36465 - for 2.0 backward compatibility, only check specific output locations (the default can still coincidate)\r\n  Build some common strings for status message\r\n  if (output == null) output = projectOutputLocation;   first complain about missing exclusion pattern\r\n  Build some common strings for status message\r\n  Validate extra attributes\r\n  don't create a marker if initialization is in progress (case of cp initialization batching)\r\n  container retrieval is performing validation check on container entry kinds.\r\n  container entry check\r\n  see bug https:  get validation status\r\n  return deprecation status if any\r\n  variable entry check\r\n  internal binary folder\r\n  library entry check\r\n  project entry check\r\n  project source folder\r\n  Validate extra attributes\r\n /*\r\n\t * Default inclusion pattern set\r\n\t */\r\n /*\r\n\t * Default exclusion pattern set\r\n\t */\r\n /*\r\n\t * Default extra attributes\r\n\t */\r\n /*\r\n\t * Default access rules\r\n\t */\r\n /*\r\n\t * The extra attributes\r\n\t */\r\n /*don't insert tab*/\r\n /*don't insert new line*/\r\n /*don't insert tab*/\r\n /*don't insert tab*/\r\n /*\r\n\t * Returns a char based representation of the exclusions patterns full path.\r\n\t */\r\n /*\r\n\t * Returns a char based representation of the exclusions patterns full path.\r\n\t */\r\n /*\r\n\t * Backward compatibility: only accessible and non-accessible files are suported.\r\n\t */\r\n /* validate output location */\r\n /*no check for default output*/\r\n","QualifiedTypeDeclarationPattern":"decodeIndexKey getBlankPattern matchesDecodedKey print qualification packagePattern packageIndex org.aspectj.org.eclipse.jdt.internal.core.search.matching.QualifiedTypeDeclarationPattern  Continue key read by the end to decode modifiers\r\n  Retrieve enclosing type names\r\n  position of ending slash\r\n  check type suffix\r\n  check name\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","IStateListener":"detectedClassChangeInThisDir aboutToCompareClasspaths pathChangeDetected detectedAspectDeleted buildSuccessful recordDecision recordInformation org.aspectj.ajdt.internal.core.builder.IStateListener","OR_OR_Expression":"analyseCode generateCode generateOptimizedBoolean isCompactableOperation traverse rightInitStateIndex mergedInitStateIndex org.aspectj.org.eclipse.jdt.internal.compiler.ast.OR_OR_Expression  (x || y) || !z, if passing the left info to the right, it would be swapped by the !\r\n  (x || y) || !z, if passing the left info to the right, it would be swapped by the !\r\n  merging two true initInfos for such a negative case: if ((t && (b = t)) || f) r = b;   inlined value\r\n  <expr>|| false --> <expr>\r\n  <expr> || true --> true\r\n  no need to generate right operand\r\n  <expr> || false --> <expr>\r\n  no need to generate right operand\r\n  need value, e.g. if (a == 1 || ((b = 2) > 0)) {} -> shouldn't initialize 'b' if a==1\r\n  implicit falling through the TRUE case\r\n  implicit falling through the FALSE case\r\n  no need to generate right operand\r\n  need value, e.g. if (a == 1 || ((b = 2) > 0)) {} -> shouldn't initialize 'b' if a==1\r\n  default case\r\n  dedicated treatment for the ||\r\n /*\r\n\t\t * improving code gen for such a case: boolean b = i < 0 || true since\r\n\t\t * the label has never been used, we have the inlined value on the\r\n\t\t * stack.\r\n\t\t */\r\n","PointcutPrimitive":"CALL EXECUTION GET SET INITIALIZATION PRE_INITIALIZATION STATIC_INITIALIZATION HANDLER ADVICE_EXECUTION WITHIN WITHIN_CODE CFLOW CFLOW_BELOW IF THIS TARGET ARGS REFERENCE AT_ANNOTATION AT_THIS AT_TARGET AT_ARGS AT_WITHIN AT_WITHINCODE CALL EXECUTION GET SET INITIALIZATION PRE_INITIALIZATION STATIC_INITIALIZATION HANDLER ADVICE_EXECUTION WITHIN WITHIN_CODE CFLOW CFLOW_BELOW IF THIS TARGET ARGS REFERENCE AT_ANNOTATION AT_THIS AT_TARGET AT_ARGS AT_WITHIN AT_WITHINCODE org.aspectj.weaver.tools.PointcutPrimitive org.aspectj.weaver.tools.PointcutPrimitive /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","TABLESWITCH":"dump dump org.aspectj.apache.bcel.generic.TABLESWITCH org.aspectj.apache.bcel.generic.TABLESWITCH  Alignment remainder assumed 0 here, until dump time\r\n  Alignment remainder assumed 0 here, until dump time\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n","MethodScope":"checkAndSetModifiersForConstructor checkAndSetModifiersForMethod computeLocalVariablePositions createMethod findField isInsideConstructor isInsideInitializer isInsideInitializerOrConstructor problemReporter recordInitializationStates referenceMethod referenceType basicToString referenceContext isStatic isConstructorCall initializedField lastVisibleFieldID analysisIndex isPropagatingInnerClassEmulation lastIndex definiteInits extraDefiniteInits insideTypeAnnotation extraSyntheticArguments org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodScope  method modifier or initializer one\r\n  fields used during name resolution\r\n  the field being initialized\r\n  the ID of the last field which got declared\r\n  for setting flow-analysis id\r\n  for local variables table attributes\r\n  annotation support\r\n  inner-emulation\r\n  certain flags are propagated from declaring class onto constructor\r\n  propagate public  default constructor is implicitly private in enum\r\n  after this point, tests on the 16 bits reserved.\r\n  check for abnormal modifiers\r\n  must check the parse node explicitly\r\n  must check the parse node explicitly\r\n  enum constructor is implicitly private\r\n  check for incompatible modifiers in the visibility bits, isolate the visibility bits\r\n  need to keep the less restrictive so disable Protected  after this point, tests on the 16 bits reserved.\r\n  set the requested modifiers for a method in an interface  check for abnormal modifiers\r\n  check for incompatible modifiers in the visibility bits, isolate the visibility bits\r\n  need to keep the less restrictive so disable Protected  check for modifiers incompatible with abstract modifier\r\n  native methods cannot also be tagged as strictfp\r\n  static members are only authorized in a static member or top level type\r\n  manage arguments\r\n  done with arguments\r\n  declaration is reachable\r\n  do not report fake used variable\r\n  record user-defined argument for attribute generation\r\n  assign variable position\r\n  no more than 255 words of arguments\r\n  check for too many arguments  no more than 255 words of arguments\r\n  sneak in extra argument before other local variables\r\n  is necessary to ensure error reporting\r\n  interface or annotation type\r\n  do not construct type variables if source < 1.5\r\n  answer the error field\r\n  static fields are always accessible\r\n  closest match\r\n  look to see if the field is the first binding\r\n  closest match\r\n  only true when the field is the fieldbinding at the beginning of name's tokens\r\n  need a resize\r\n  add a new entry\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* Spec : 8.4.3 & 9.4\r\n\t */\r\n /* Spec : 8.4.3 & 9.4\r\n\t */\r\n /* Compute variable positions in scopes given an initial position offset\r\n\t * ignoring unused local variables.\r\n\t * \r\n\t * Deal with arguments here, locals and subscopes are processed in BlockScope method\r\n\t */\r\n /* Error management:\r\n\t * \t\tkeep null for all the errors that prevent the method to be created\r\n\t * \t\totherwise return a correct method binding (but without the element\r\n\t *\t\tthat caused the problem) : ie : Incorrect thrown exception\r\n\t */\r\n /* Overridden to detect the error case inside an explicit constructor call:\r\n\t\r\n\tclass X {\r\n\t\tint i;\r\n\t\tX myX;\r\n\t\tX(X x) {\r\n\t\t\tthis(i, myX.i, x.i); // same for super calls... only the first 2 field accesses are errors\r\n\t\t}\r\n\t}\r\n\t*/\r\n /* Answer the problem reporter to use for raising new problems.\r\n\t *\r\n\t * Note that as a side-effect, this updates the current reference context\r\n\t * (unit, type or method) in case the problem handler decides it is necessary\r\n\t * to abort.\r\n\t */\r\n /* Answer the reference method of this scope, or null if initialization scoope.\r\n\t*/\r\n /* Answer the reference type of this scope.\r\n\t*\r\n\t* It is the nearest enclosing type of this scope.\r\n\t*/\r\n","TypeNameMatchRequestorWrapper":"acceptType createTypeFromJar createTypeFromPath requestor scope handleFactory lastPkgFragmentRootPath lastPkgFragmentRoot packageHandles org.aspectj.org.eclipse.jdt.internal.core.search.TypeNameMatchRequestorWrapper  scope is needed to retrieve project path for external resource\r\n  in case of IJavaSearchScope defined by clients, use an HandleFactory instead\r\n  Optimization: cache package fragment root handle and package handles\r\n  create handle\r\n  Optimization: cache package fragment root handle and package handles\r\n  create handle\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.internal.core.search.IRestrictedAccessTypeRequestor#acceptType(int, char[], char[], char[][], java.lang.String, org.aspectj.org.eclipse.jdt.internal.compiler.env.AccessRestriction)\r\n */\r\n","AddAtAspectJAnnotationsVisitor":"visit visit visit visit org.aspectj.ajdt.internal.compiler.ast.AddAtAspectJAnnotationsVisitor /* *******************************************************************\r\n * Copyright (c) 2005 IBM Corporation Ltd\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Adrian Colyer  initial implementation \r\n * ******************************************************************/\r\n","IntLiteralMinValue":"computeConstant CharValue MIN_VALUE org.aspectj.org.eclipse.jdt.internal.compiler.ast.IntLiteralMinValue","CompletionContext":"isInJavadoc isInJavadocText isInJavadocFormalReference getExpectedTypesSignatures getExpectedTypesKeys getToken getTokenKind getTokenStart getTokenEnd getOffset toString TOKEN_KIND_UNKNOWN TOKEN_KIND_NAME TOKEN_KIND_STRING_LITERAL org.aspectj.org.eclipse.jdt.core.CompletionContext  TODO (david) https:  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","InstructionByte":"dump toString getTypecode getType dump toString getTypecode getType theByte theByte org.aspectj.apache.bcel.generic.InstructionByte org.aspectj.apache.bcel.generic.InstructionByte /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n","Not":"accept getBody toString equals hashCode accept getBody toString equals hashCode test test org.aspectj.weaver.ast.Not org.aspectj.weaver.ast.Not /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","UnlockSignature":"org.aspectj.lang.reflect.UnlockSignature org.aspectj.lang.reflect.UnlockSignature org.aspectj.lang.reflect.UnlockSignature","CompilationUnitElementInfo":"addAnnotationPositions getSourceLength getSourceRange setSourceLength sourceLength timestamp annotationPositions org.aspectj.org.eclipse.jdt.internal.core.CompilationUnitElementInfo /*\r\n\t * The positions of annotations for each element in this compilation unit.\r\n\t * A map from IJavaElement to long[]\r\n\t */\r\n","MethodVerifier15":"areMethodsCompatible areParametersEqual areReturnTypesCompatible areTypesEqual canSkipInheritedMethods canSkipInheritedMethods checkConcreteInheritedMethod checkForBridgeMethod checkForNameClash checkInheritedMethods checkInheritedMethods checkInheritedReturnTypes checkMethods checkTypeVariableMethods computeSubstituteMethod detectInheritedNameClash detectNameClash doesMethodOverride doesSubstituteMethodOverride hasGenericParameter doTypeVariablesClash findSuperinterfaceCollisions isInterfaceMethodImplemented isUnsafeReturnTypeOverride reportIncompatibleReturnTypeError verify org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier15  with parameterized parameters for backwards compatibility, need a more complex check\r\n  raw mode does not apply if the method defines its own type variables\r\n  otherwise we have a mismatch check backwards\r\n  switch to all raw mode\r\n  no remaining parameter can be a Parameterized type (if one has been converted then all RAW types must be converted)\r\n  all raw mode for remaining parameters (if any)\r\n  need to consider X<?> and X<? extends Object> as the same 'type'\r\n  all other type bindings are identical\r\n  already know one is not null\r\n  so the parameters are equal and the return type is compatible b  see 81618 - type variable from inherited method\r\n  check whether bridge method is already defined above for interface methods\r\n  so the parameters are equal and the return type is compatible b  see 81618 - type variable from inherited method\r\n  problemReporter(currentMethod).unsafeReturnTypeOverride(currentMethod, originalInherited, this.type);\r\n  only check inherited methods that are different & come from separate inheritance paths\r\n  skip it if otherInheritedMethod is defined by a subtype of inheritedMethod's declaringClass\r\n  check up the hierarchy for skipped inherited methods\r\n  no match\r\n  no chance that another inherited method's bridge method can collide\r\n  now start with its superclass\r\n  skip it if inheritedMethod is defined by a subtype of otherInheritedMethod declaringClass\r\n  sent from checkMethods() to compare 2 inherited methods that are not 'equal'\r\n  if a single concrete method 'implements' the abstract methods, then do not report a duplicate error\r\n  if a concrete method exists, keep it, otherwise keep the first method\r\n  no need to continue since only 1 inherited method is left\r\n  its possible in 1.5 that A is compatible with B & C, but B is not compatible with C\r\n  do not complain since the super interface already got blamed\r\n  check to see if this is just a warning, if so report it & skip to next method\r\n  abstract classes must check every method against each other\r\n  have a single concrete superclass so only check overridden methods\r\n  handle the common case\r\n  &&\r\n  cannot null out inherited methods\r\n  New AspectJ Hack - cant be permanent, but need to think over right solution\r\n  pass in the length of matching\r\n  clear the contents of the matching methods\r\n  cannot null out inherited methods\r\n  pass in the length of matching\r\n  clear the previous contents of the matching methods\r\n  clear the previous contents of the matching methods\r\n  do not want to find it again\r\n  All inherited methods do NOT have the same vmSignature\r\n  no match\r\n  due to hierarchy & compatibility checks, we need to ensure these 2 methods are resolved\r\n  no match JLS 8.4.2\r\n  not a match\r\n  both are null\r\n  not a match\r\n  not a match\r\n  not a match\r\n  TODO (kent) another place where we expect the superinterfaces to be in the exact same order\r\n  for the above case, we do not want to answer the substitute method since its not a match\r\n  can be the same as inherited\r\n  but method cannot have a \"generic-enabled\" parameter type\r\n  since substituteMethod has substituted type variables, method cannot have a generic signature AND no variables -> its a name clash if it does\r\n  if method has its own variables, then substituteMethod failed bounds check in computeSubstituteMethod()\r\n  if it does not then a name clash error is likely\r\n  may be only the return type that is generic, need to check parameters\r\n  one has type variables and substituteTwo did not pass bounds check in computeSubstituteMethod()\r\n  hierarchy is consistent so no collisions are possible\r\n  must hold onto ParameterizedMethod to see if a bridge method is necessary\r\n  keep around to produce bridge methods\r\n  caveat: returns false if a method is implemented that needs a bridge method\r\n  JLS 3 �8.4.5: more are accepted, with an unchecked conversion\r\n  must verify bounds if the variable has more than 1\r\n","MemberSignature":"org.aspectj.lang.reflect.MemberSignature org.aspectj.lang.reflect.MemberSignature org.aspectj.lang.reflect.MemberSignature /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","Region":"add contains getAncestors getElements remove removeAllChildren toString fRootElements org.aspectj.org.eclipse.jdt.internal.core.Region  \"new\" element added to region\r\n  an ancestor is already included\r\n  walk the current root hierarchy\r\n  $NON-NLS-1$\r\n","AbstractMethodDeclaration":"abort analyseCode bindArguments bindThrownExceptions compilationResult generateCode generateCode checkArgumentsSize hasErrors isAbstract isAnnotationMethod isClinit isConstructor isDefaultConstructor isInitializationMethod isMethod isNative isStatic parseStatements print printBody printReturnType resolve resolveJavadoc resolveStatements tagAsHavingErrors traverse typeParameters finishResolveTypes postParse generateInfoAttributes ensureScopeSetup scope selector declarationSourceStart declarationSourceEnd modifiers modifiersSourceStart annotations arguments thrownExceptions statements explicitDeclarations binding ignoreFurtherInvestigation javadoc bodyStart bodyEnd compilationResult org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration  which is always the name of the class.....parsing do extra work to fill it up while it do not have to....\r\n  by default arguments in abstract  skip problem case\r\n  qualified type reference\r\n  single type reference\r\n  reset wideMode to false\r\n  handle methods with invalid signature or duplicates\r\n  method is known to have errors, dump a problem method\r\n  produce a problem method accounting for this fatal error\r\n  request wide mode\r\n  restart method generation\r\n  a branch target required a goto_w, restart code gen in wide mode.\r\n  a fatal error was detected during code generation, need to restart code gen if possible\r\n  regular code generation\r\n  AspectJ Extension - moved to helper method (code was: classFile.generateMethodInfoAttribute(this.binding);)\r\n  initialize local positions\r\n  arguments initialization for local variable debug attributes\r\n  local variable attributes\r\n  if a problem got reported during code gen, then trigger problem method creation\r\n  an abstact method or a native method cannot be static\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  ========= abort on fatal error =============\r\n  check @Deprecated annotation presence\r\n /*\r\n\t *\tWe cause the compilation task to abort to a given extent.\r\n\t */\r\n","IHierarchyListener":"elementsUpdated elementsUpdated org.aspectj.asm.IHierarchyListener org.aspectj.asm.IHierarchyListener /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n * ******************************************************************/\r\n","JavaModelException":"getException getJavaModelStatus isDoesNotExist printStackTrace printStackTrace toString serialVersionUID nestedCoreException org.aspectj.org.eclipse.jdt.core.JavaModelException  backward compatible\r\n  See bug 13492 Should handle JavaModelExceptions that contains CoreException more gracefully\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n * Returns a printable representation of this exception suitable for debugging\r\n * purposes only.\r\n */\r\n","DoStatement":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getExpression setExpression getBody setBody memSize treeSize analyseCode generateCode printStatement resolve traverse EXPRESSION_PROPERTY BODY_PROPERTY PROPERTY_DESCRIPTORS expression body condition action breakLabel continueLabel mergedInitStateIndex org.aspectj.org.eclipse.jdt.core.dom.DoStatement org.aspectj.org.eclipse.jdt.internal.compiler.ast.DoStatement  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  lazy init must be thread-safe for readers\r\n  for local variables table attributes\r\n  remember useful empty statement\r\n  code generation can be optimized when no need to continue in the loop\r\n  or catch blocks\r\n  recover upstream null info\r\n  never consider opt false case for DO loop, since break can always occur (47776)\r\n  end of loop\r\n  labels management\r\n  generate action\r\n  continue label (135602)\r\n  generate condition\r\n  May loose some local variable initializations : affecting the local variable attributes\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* Reset reach mode, to address following scenario.\r\n\t *   final blank;\r\n\t *   do { if (true) break; else blank = 0; } while(false);\r\n\t *   blank = 1; // may be initialized already \r\n\t */\r\n","SourceElementRequestorAdapter":"acceptConstructorReference acceptFieldReference acceptImport acceptLineSeparatorPositions acceptMethodReference acceptPackage acceptProblem acceptTypeReference acceptTypeReference acceptUnknownReference acceptUnknownReference enterCompilationUnit enterConstructor enterField enterInitializer enterMethod enterType exitCompilationUnit exitConstructor exitField exitInitializer exitMethod exitType org.aspectj.org.eclipse.jdt.internal.compiler.SourceElementRequestorAdapter","AdviceSignatureImpl":"getReturnType createToString toAdviceName getAdvice getReturnType createToString toAdviceName getAdvice getReturnType createToString toAdviceName getAdvice returnType adviceMethod returnType adviceMethod returnType adviceMethod org.aspectj.runtime.reflect.AdviceSignatureImpl org.aspectj.runtime.reflect.AdviceSignatureImpl org.aspectj.runtime.reflect.AdviceSignatureImpl  buf.append(sm.makeModifiersString(getModifiers()));\r\n  nothing we can do, caller will see null\r\n  buf.append(sm.makeModifiersString(getModifiers()));\r\n  nothing we can do, caller will see null\r\n  buf.append(sm.makeModifiersString(getModifiers()));\r\n  nothing we can do, caller will see null\r\n /* name is consistent with reflection API  \r\n    before and after always return Void.TYPE\r\n    (some around also return Void.Type)      */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.runtime.reflect.MemberSignatureImpl#createAccessibleObject()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* name is consistent with reflection API  \r\n    before and after always return Void.TYPE\r\n    (some around also return Void.Type)      */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.runtime.reflect.MemberSignatureImpl#createAccessibleObject()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* name is consistent with reflection API  \r\n    before and after always return Void.TYPE\r\n    (some around also return Void.Type)      */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.runtime.reflect.MemberSignatureImpl#createAccessibleObject()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","TextElement":"propertyDescriptors internalStructuralPropertiesForType internalGetSetObjectProperty getNodeType0 clone0 subtreeMatch0 accept0 getText setText memSize treeSize TEXT_PROPERTY PROPERTY_DESCRIPTORS text org.aspectj.org.eclipse.jdt.core.dom.TextElement  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  $NON-NLS-1$\r\n  everything but our empty string costs\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","AsmRelationshipUtils":"genDeclareMessage genPointcutDetails genDeclareMessage genPointcutDetails DECLARE_PRECEDENCE DECLARE_SOFT DECLARE_PARENTS DECLARE_WARNING DECLARE_ERROR DECLARE_UNKNONWN POINTCUT_ABSTRACT POINTCUT_ANONYMOUS DOUBLE_DOTS MAX_MESSAGE_LENGTH DEC_LABEL DECLARE_PRECEDENCE DECLARE_SOFT DECLARE_PARENTS DECLARE_WARNING DECLARE_ERROR DECLARE_UNKNONWN POINTCUT_ABSTRACT POINTCUT_ANONYMOUS DOUBLE_DOTS MAX_MESSAGE_LENGTH DEC_LABEL org.aspectj.weaver.AsmRelationshipUtils org.aspectj.weaver.AsmRelationshipUtils  public static final String UNDEFINED=\"<undefined>\";\r\n  public static final String UNDEFINED=\"<undefined>\";\r\n","CompletionOnFieldType":"printStatement isLocalVariable org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnFieldType","ISourceType":"getDeclarationSourceEnd getDeclarationSourceStart getEnclosingType getFields getInterfaceNames getMemberTypes getMethods getName getNameSourceEnd getNameSourceStart getSuperclassName getTypeParameterBounds getTypeParameterNames org.aspectj.org.eclipse.jdt.internal.compiler.env.ISourceType","IScope":"lookupType getWorld getEnclosingType getMessageHandler lookupFormal getFormal getFormalCount getImportedPrefixes getImportedNames message message message lookupType getWorld getEnclosingType getMessageHandler lookupFormal getFormal getFormalCount getImportedPrefixes getImportedNames message message message org.aspectj.weaver.patterns.IScope org.aspectj.weaver.patterns.IScope  these next three are used to create {@link BindingTypePattern} objects.\r\n  these next three are used to create {@link BindingTypePattern} objects.\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","NoSuchPointcutException":"getName getName serialVersionUID name serialVersionUID name org.aspectj.lang.reflect.NoSuchPointcutException org.aspectj.lang.reflect.NoSuchPointcutException /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","MoveResourceElementsOperation":"getMainTaskName isMove org.aspectj.org.eclipse.jdt.internal.core.MoveResourceElementsOperation","LockSignatureImpl":"createToString getParameterType createToString getParameterType createToString getParameterType parameterType parameterType parameterType org.aspectj.runtime.reflect.LockSignatureImpl org.aspectj.runtime.reflect.LockSignatureImpl org.aspectj.runtime.reflect.LockSignatureImpl","PrivilegedHandler":"getPrivilegedAccessField getPrivilegedAccessMethod notePrivilegedTypeAccess checkWeaveAccess getMembers inAspect accessors org.aspectj.ajdt.internal.compiler.lookup.PrivilegedHandler  Thread.dumpStack();\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","HashtableOfType":"containsKey get put rehash size toString keyTable valueTable elementSize threshold org.aspectj.org.eclipse.jdt.internal.compiler.util.HashtableOfType  to avoid using Enumerations, walk the individual tables skipping nulls\r\n  number of elements in the table\r\n  size represents the expected number of elements\r\n  assumes the threshold is never equal to the size of the table\r\n  double the number of expected elements\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","PatternSearchJob":"belongsTo cancel ensureReadyToRun execute getIndexes search toString pattern scope participant requestor areIndexesReady executionTime org.aspectj.org.eclipse.jdt.internal.core.search.PatternSearchJob  may trigger some index recreation\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$  acquire the in-memory indexes on the fly\r\n  may trigger some index recreation work\r\n  only need containerPath if the index must be built\r\n  sanity check\r\n  only consider indexes which are ready\r\n  index got deleted since acquired\r\n  finished reading\r\n  ask permission to read\r\n  $NON-NLS-1$\r\n /*reuse index file*/\r\n","HierarchyResolver":"accept accept accept findSuperClass findSuperInterfaces fixSupertypeBindings remember remember rememberAllTypes rememberWithMemberTypes reportHierarchy reset resolve resolve setEnvironment setFocusType subOrSuperOfFocus subTypeOfType worked focusType superTypesOnly hasMissingSuperClass lookupEnvironment options builder typeBindings typeIndex typeModels org.aspectj.org.eclipse.jdt.internal.core.hierarchy.HierarchyResolver  create a problem handler with the 'exit after all problems' handling policy\r\n  System.out.println(\"Cannot accept compilation units inside the HierarchyResolver.\");\r\n  with a member type (e.g. p.A$B))\r\n  build corresponding compilation unit\r\n  ignore secondary types, to improve laziness\r\n  need member types\r\n  no need for field initialization\r\n  build bindings\r\n  check whether subclass of Object due to broken hierarchy (as opposed to explicitly extending it)\r\n  note: this could be Map$Entry\r\n  if anonymous type\r\n  if anonymous type\r\n  find the end of simple name\r\n  find the start of simple name\r\n  case of binary inner type -> take the last part\r\n  ensure that the binding corresponds to the interface defined by the user\r\n  allow subsequent call to superclass() to succeed so that we don't have to catch AbortCompilation everywhere\r\n  allow subsequent call to superInterfaces() to succeed so that we don't have to catch AbortCompilation everywhere\r\n  check for interfaceBindings being null (see https:  simple super class name\r\n  simple super interface names\r\n  cannot happen since element is open\r\n  source type\r\n  anonymous or local type\r\n  top level or member type\r\n  binary type\r\n  set focus type binding\r\n  be resilient and fix super type bindings\r\n  java.lang.Object treated at the end\r\n  ignore types outside of hierarchy\r\n  do not connect interfaces to Object\r\n  add java.lang.Object only if the super class is not missing\r\n  We still need to add superclasses and superinterfaces bindings (see https:  fault in its hierarchy...\r\n  ignore this exception for now since it typically means we cannot find java.lang.Object\r\n  build type bindings\r\n  cache binary type binding\r\n  create binary type from file\r\n  create binary type from info\r\n  contains a potential subtype as a local or anonymous type?\r\n  case of hierarchy on region\r\n  build parsed unit\r\n  create parsed unit from file\r\n  create parsed unit from source element infos\r\n  empty cu: no need to parse (see https:  fault in its hierarchy...\r\n  classpath problem for this type: don't try to resolve (see https:  NB: no-op if method bodies have been already parsed\r\n  (see https:  complete type bindings (ie. connect super types)\r\n  remember type bindings\r\n  (see https:  accept all types (case of hierarchy in a region)\r\n  if (superclass != null && superclass.id == TypeIds.T_JavaLangObject && subType.isHierarchyInconsistent()) return false;\r\n /*\r\n * Creates the super class handle of the given type.\r\n * Returns null if the type has no super class.\r\n * Adds the simple name to the hierarchy missing types if the class is not found and returns null.\r\n */\r\n /*\r\n * Returns the handles of the super interfaces of the given type.\r\n * Adds the simple name to the hierarchy missing types if an interface is not found (but don't put null in the returned array)\r\n */\r\n /*\r\n * Remembers all type bindings defined in the given parsed unit, adding local/anonymous types if specified.\r\n */\r\n /*\r\n * Reports the hierarchy from the remembered bindings.\r\n * Note that 'binaryTypeBinding' is null if focus type is a source type.\r\n */\r\n /*don't need field and method (bug 125067)*/\r\n /*don't need field and method (bug 125067)*/\r\n /*\r\n * Set the focus type (ie. the type that this resolver is computing the hierarch for.\r\n * Returns the binding of this focus type or null if it could not be found.\r\n */\r\n","MissingBinaryTypeBinding":"problemId setMissingSuperclass org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MissingBinaryTypeBinding  [java][util][Map$Entry]\r\n  will be fixed up using #setMissingSuperclass(...)\r\n","IDependent":"getFileName JAR_FILE_ENTRY_SEPARATOR org.aspectj.org.eclipse.jdt.internal.compiler.env.IDependent","DeclareAnnotationImpl":"getDeclaringType getKind getSignaturePattern getTypePattern getAnnotation getAnnotationAsText toString getDeclaringType getKind getSignaturePattern getTypePattern getAnnotation getAnnotationAsText toString theAnnotation annText declaringType kind typePattern signaturePattern theAnnotation annText declaringType kind typePattern signaturePattern org.aspectj.internal.lang.reflect.DeclareAnnotationImpl org.aspectj.internal.lang.reflect.DeclareAnnotationImpl /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareAnnotation#getDeclaringType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareAnnotation#getKind()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareAnnotation#getSignaturePattern()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareAnnotation#getTypePattern()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareAnnotation#getAnnotation()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareAnnotation#getDeclaringType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareAnnotation#getKind()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareAnnotation#getSignaturePattern()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareAnnotation#getTypePattern()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareAnnotation#getAnnotation()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","LRUCacheEnumerator":"hasMoreElements nextElement fElementQueue fValue fNext org.aspectj.org.eclipse.jdt.internal.core.LRUCacheEnumerator","IJavaModelStatusConstants":"INVALID_CP_CONTAINER_ENTRY CP_CONTAINER_PATH_UNBOUND INVALID_CLASSPATH CP_VARIABLE_PATH_UNBOUND CORE_EXCEPTION INVALID_ELEMENT_TYPES NO_ELEMENTS_TO_PROCESS ELEMENT_DOES_NOT_EXIST NULL_PATH PATH_OUTSIDE_PROJECT RELATIVE_PATH DEVICE_PATH NULL_STRING READ_ONLY NAME_COLLISION INVALID_DESTINATION INVALID_PATH INDEX_OUT_OF_BOUNDS UPDATE_CONFLICT NULL_NAME INVALID_NAME INVALID_CONTENTS IO_EXCEPTION DOM_EXCEPTION TARGET_EXCEPTION BUILDER_INITIALIZATION_ERROR BUILDER_SERIALIZATION_ERROR EVALUATION_ERROR INVALID_SIBLING INVALID_RESOURCE INVALID_RESOURCE_TYPE INVALID_PROJECT INVALID_PACKAGE NO_LOCAL_CONTENTS INVALID_CLASSPATH_FILE_FORMAT CLASSPATH_CYCLE DISABLED_CP_EXCLUSION_PATTERNS DISABLED_CP_MULTIPLE_OUTPUT_LOCATIONS INCOMPATIBLE_JDK_LEVEL COMPILER_FAILURE ELEMENT_NOT_ON_CLASSPATH CANNOT_RETRIEVE_ATTACHED_JAVADOC UNKNOWN_JAVADOC_FORMAT DEPRECATED_VARIABLE org.aspectj.org.eclipse.jdt.core.IJavaModelStatusConstants","AjASTFactory":"getAST org.aspectj.ajdt.core.dom.AjASTFactory","ISourceMethod":"getDeclarationSourceEnd getDeclarationSourceStart getExceptionTypeNames getNameSourceEnd getNameSourceStart getReturnTypeName getTypeParameterNames getTypeParameterBounds org.aspectj.org.eclipse.jdt.internal.compiler.env.ISourceMethod","VariablesInfo":"indexOf varNamed variables variableCount packageName className classFiles org.aspectj.org.eclipse.jdt.internal.eval.VariablesInfo","ArrayCreation":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty internalGetChildListProperty getNodeType0 clone0 subtreeMatch0 accept0 getType setType dimensions getInitializer setInitializer memSize treeSize TYPE_PROPERTY DIMENSIONS_PROPERTY INITIALIZER_PROPERTY PROPERTY_DESCRIPTORS arrayType dimensions optionalInitializer org.aspectj.org.eclipse.jdt.core.dom.ArrayCreation  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  an ArrayCreation cannot occur inside a ArrayType - cycles not possible\r\n  must check cycles\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","ImportDeclarationElementInfo":"org.aspectj.org.eclipse.jdt.internal.core.ImportDeclarationElementInfo","ByteCodeVisitorAdapter":"_aaload _aastore _aconst_null _aload_0 _aload_1 _aload_2 _aload_3 _aload _anewarray _areturn _arraylength _astore_0 _astore_1 _astore_2 _astore_3 _astore _athrow _baload _bastore _bipush _caload _castore _checkcast _d2f _d2i _d2l _dadd _daload _dastore _dcmpg _dcmpl _dconst_0 _dconst_1 _ddiv _dload_0 _dload_1 _dload_2 _dload_3 _dload _dmul _dneg _drem _dreturn _dstore_0 _dstore_1 _dstore_2 _dstore_3 _dstore _dsub _dup_x1 _dup_x2 _dup _dup2_x1 _dup2_x2 _dup2 _f2d _f2i _f2l _fadd _faload _fastore _fcmpg _fcmpl _fconst_0 _fconst_1 _fconst_2 _fdiv _fload_0 _fload_1 _fload_2 _fload_3 _fload _fmul _fneg _frem _freturn _fstore_0 _fstore_1 _fstore_2 _fstore_3 _fstore _fsub _getfield _getstatic _goto_w _goto _i2b _i2c _i2d _i2f _i2l _i2s _iadd _iaload _iand _iastore _iconst_0 _iconst_1 _iconst_2 _iconst_3 _iconst_4 _iconst_5 _iconst_m1 _idiv _if_acmpeq _if_acmpne _if_icmpeq _if_icmpge _if_icmpgt _if_icmple _if_icmplt _if_icmpne _ifeq _ifge _ifgt _ifle _iflt _ifne _ifnonnull _ifnull _iinc _iload_0 _iload_1 _iload_2 _iload_3 _iload _imul _ineg _instanceof _invokeinterface _invokespecial _invokestatic _invokevirtual _ior _irem _ireturn _ishl _ishr _istore_0 _istore_1 _istore_2 _istore_3 _istore _isub _iushr _ixor _jsr_w _jsr _l2d _l2f _l2i _ladd _laload _land _lastore _lcmp _lconst_0 _lconst_1 _ldc_w _ldc _ldc2_w _ldiv _lload_0 _lload_1 _lload_2 _lload_3 _lload _lmul _lneg _lookupswitch _lor _lrem _lreturn _lshl _lshr _lstore_0 _lstore_1 _lstore_2 _lstore_3 _lstore _lsub _lushr _lxor _monitorenter _monitorexit _multianewarray _new _newarray _nop _pop _pop2 _putfield _putstatic _ret _return _saload _sastore _sipush _swap _tableswitch _wide _wide _breakpoint _impdep1 _impdep2 org.aspectj.org.eclipse.jdt.core.util.ByteCodeVisitorAdapter","ProblemSeverities":"Ignore Warning Error AbortCompilation AbortCompilationUnit AbortType AbortMethod Abort Optional SecondaryError Fatal org.aspectj.org.eclipse.jdt.internal.compiler.problem.ProblemSeverities  during handling only\r\n  during handling only\r\n  when bit is set: problem is error, if not it is a warning\r\n  2r11110\r\n  when bit is set: problem was configurable\r\n  when bit is set: problem was either a mandatory error, or an optional+treatOptionalErrorAsFatal\r\n","CreateCompilationUnitOperation":"executeOperation getCompilationUnit getSchedulingRule verify fName fSource org.aspectj.org.eclipse.jdt.internal.core.CreateCompilationUnitOperation  get folder encoding as file is not accessible\r\n  update the contents of the existing unit if fForce is true\r\n","BindingComparator":"isEqual isEqual isEqual isEqual isEqual isEqual isEqual isEqual isEqual isEqual org.aspectj.org.eclipse.jdt.core.dom.BindingComparator  see https:","IExceptionTableEntry":"getStartPC getEndPC getHandlerPC getCatchTypeIndex getCatchType org.aspectj.org.eclipse.jdt.core.util.IExceptionTableEntry","EmptyStatement":"propertyDescriptors internalStructuralPropertiesForType getNodeType0 clone0 subtreeMatch0 accept0 treeSize analyseCode complainIfUnreachable generateCode printStatement resolve traverse PROPERTY_DESCRIPTORS org.aspectj.org.eclipse.jdt.core.dom.EmptyStatement org.aspectj.org.eclipse.jdt.internal.compiler.ast.EmptyStatement  dispatch to correct overloaded match method\r\n  before 1.4, empty statements are tolerated anywhere\r\n  Report an error if necessary\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","AnnotationPointcut":"getAnnotationTypePattern couldMatchKinds parameterizeWith fastMatch matchInternal findMethod resolveBindings concretize1 findResidueInternal getBindingAnnotationTypePatterns getBindingTypePatterns write read equals hashCode buildDeclarationText toString accept getAnnotationTypePattern couldMatchKinds parameterizeWith fastMatch matchInternal findMethod resolveBindings concretize1 findResidueInternal getBindingAnnotationTypePatterns getBindingTypePatterns write read equals hashCode buildDeclarationText toString accept annotationTypePattern declarationText annotationTypePattern declarationText org.aspectj.weaver.patterns.AnnotationPointcut org.aspectj.weaver.patterns.AnnotationPointcut  FIXME asc should include supers with getInterTypeMungersIncludingSupers ?\r\n  FIXME asc perf cache the result of discovering the member that contains the real annotations\r\n  \"]    pointcut is at [\"+getSourceLocation()+\"]\");\r\n  exit quickly, error will prevent weaving\r\n  reflective (ReflectionShadow) access to types?\r\n  BindingAnnotationTypePattern) {\r\n  FIXME asc should include supers with getInterTypeMungersIncludingSupers ?\r\n  FIXME asc perf cache the result of discovering the member that contains the real annotations\r\n  \"]    pointcut is at [\"+getSourceLocation()+\"]\");\r\n  exit quickly, error will prevent weaving\r\n  reflective (ReflectionShadow) access to types?\r\n  BindingAnnotationTypePattern) {\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.Pointcut#fastMatch(org.aspectj.weaver.patterns.FastMatchInfo)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.Pointcut#match(org.aspectj.weaver.Shadow)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.Pointcut#resolveBindings(org.aspectj.weaver.patterns.IScope,\r\n\t * org.aspectj.weaver.patterns.Bindings)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.Pointcut#concretize1(org.aspectj.weaver.ResolvedType, org.aspectj.weaver.IntMap)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingAnnotationTypePatterns()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingTypePatterns()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PatternNode#write(java.io.DataOutputStream)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.Pointcut#fastMatch(org.aspectj.weaver.patterns.FastMatchInfo)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.Pointcut#match(org.aspectj.weaver.Shadow)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.Pointcut#resolveBindings(org.aspectj.weaver.patterns.IScope,\r\n\t * org.aspectj.weaver.patterns.Bindings)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.Pointcut#concretize1(org.aspectj.weaver.ResolvedType, org.aspectj.weaver.IntMap)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingAnnotationTypePatterns()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingTypePatterns()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PatternNode#write(java.io.DataOutputStream)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","IType":"codeComplete codeComplete codeComplete codeComplete createField createInitializer createMethod createType findMethods getChildrenForCategory getElementName getField getFields getFullyQualifiedName getFullyQualifiedName getFullyQualifiedParameterizedName getInitializer getInitializers getKey getMethod getMethods getPackageFragment getSuperclassName getSuperclassTypeSignature getSuperInterfaceTypeSignatures getSuperInterfaceNames getTypeParameterSignatures getTypeParameters getType getTypeParameter getTypeQualifiedName getTypeQualifiedName getTypes isAnonymous isClass isEnum isInterface isAnnotation isLocal isMember isResolved loadTypeHierachy newSupertypeHierarchy newSupertypeHierarchy newSupertypeHierarchy newSupertypeHierarchy newTypeHierarchy newTypeHierarchy newTypeHierarchy newTypeHierarchy newTypeHierarchy newTypeHierarchy resolveType resolveType org.aspectj.org.eclipse.jdt.core.IType","QualifiedNameSet":"add rehash toString qualifiedNames elementSize threshold org.aspectj.org.eclipse.jdt.internal.core.builder.QualifiedNameSet  to avoid using Enumerations, walk the individual values skipping nulls\r\n  number of elements in the table\r\n  size represents the expected number of elements\r\n  assumes the threshold is never equal to the size of the table\r\n  double the number of expected elements\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","CrosscuttingMembersSet":"addOrReplaceAspect addOrReplaceAspect addOrReplaceDescendantsOf addAdviceLikeDeclares deleteAspect containsAspect addFixedCrosscuttingMembers clearCaches getShadowMungers getTypeMungers getLateTypeMungers getDeclareSofts getDeclareParents getDeclareAnnotationOnTypes getDeclareAnnotationOnFields getDeclareAnnotationOnMethods getDeclareDominates findAspectDeclaringParents reset hasChangedSinceLastReset recordNecessaryCheck verify addOrReplaceAspect addOrReplaceAspect addOrReplaceDescendantsOf addAdviceLikeDeclares deleteAspect containsAspect addFixedCrosscuttingMembers clearCaches getShadowMungers getTypeMungers getLateTypeMungers getDeclareSofts getDeclareParents getDeclareAnnotationOnTypes getDeclareAnnotationOnFields getDeclareAnnotationOnMethods getDeclareDominates findAspectDeclaringParents reset hasChangedSinceLastReset recordNecessaryCheck verify members shadowMungers typeMungers lateTypeMungers declareSofts declareParents declareAnnotationOnTypes declareAnnotationOnFields declareAnnotationOnMethods declareDominates changedSinceLastReset verificationList trace members shadowMungers typeMungers lateTypeMungers declareSofts declareParents declareAnnotationOnTypes declareAnnotationOnFields declareAnnotationOnMethods declareDominates changedSinceLastReset verificationList trace org.aspectj.weaver.CrosscuttingMembersSet org.aspectj.weaver.CrosscuttingMembersSet  FIXME AV - ? we may need a sequencedHashMap there to ensure source based precedence for @AJ advice\r\n  includes ctors\r\n  List of things to be verified once the type system is 'complete'\r\n  sourcelocation for the shadowMunger which we need to pick up\r\n  we might have sub-aspects that need to re-collect their crosscutting members from us\r\n  System.err.println(\"Looking at descendants of \"+aspectType.getName());\r\n  XXX only for testing\r\n  DECAT Merge multiple together\r\n  FIXME AV - ? we may need a sequencedHashMap there to ensure source based precedence for @AJ advice\r\n  includes ctors\r\n  List of things to be verified once the type system is 'complete'\r\n  sourcelocation for the shadowMunger which we need to pick up\r\n  we might have sub-aspects that need to re-collect their crosscutting members from us\r\n  System.err.println(\"Looking at descendants of \"+aspectType.getName());\r\n  XXX only for testing\r\n  DECAT Merge multiple together\r\n /* ResolvedType (the aspect) > CrosscuttingMembers */\r\n /*IVerificationRequired*/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* ResolvedType (the aspect) > CrosscuttingMembers */\r\n /*IVerificationRequired*/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","CrosscuttingMembers":"addConcreteShadowMunger addShadowMungers addShadowMunger addTypeMungers addTypeMunger addLateTypeMungers addLateTypeMunger addDeclares addDeclare exposeTypes exposeType addPrivilegedAccesses addPrivilegedAccess getCflowEntries replaceWith equivalent rewritePointcutInMunger setPerClause getDeclareDominates getDeclareParents getDeclareSofts getShadowMungers getTypeMungers getLateTypeMungers getDeclareAnnotationOnTypes getDeclareAnnotationOnFields getDeclareAnnotationOnMethods getCflowBelowFields getCflowFields clearCaches addConcreteShadowMunger addShadowMungers addShadowMunger addTypeMungers addTypeMunger addLateTypeMungers addLateTypeMunger addDeclares addDeclare exposeTypes exposeType addPrivilegedAccesses addPrivilegedAccess getCflowEntries replaceWith equivalent rewritePointcutInMunger setPerClause getDeclareDominates getDeclareParents getDeclareSofts getShadowMungers getTypeMungers getLateTypeMungers getDeclareAnnotationOnTypes getDeclareAnnotationOnFields getDeclareAnnotationOnMethods getCflowBelowFields getCflowFields clearCaches inAspect world perClause shadowMungers typeMungers lateTypeMungers declareParents declareSofts declareDominates declareAnnotationsOnType declareAnnotationsOnField declareAnnotationsOnMethods shouldConcretizeIfNeeded cflowFields cflowBelowFields inAspect world perClause shadowMungers typeMungers lateTypeMungers declareParents declareSofts declareDominates declareAnnotationsOnType declareAnnotationsOnField declareAnnotationsOnMethods shouldConcretizeIfNeeded cflowFields cflowBelowFields org.aspectj.weaver.CrosscuttingMembers org.aspectj.weaver.CrosscuttingMembers  These are like declare parents type mungers\r\n  includes ctors\r\n  assert m is concrete\r\n  we don't do mungers for abstract aspects\r\n  return;   FIXME asc perf Possible Improvement. Investigate why this is called twice in a weave ?\r\n  Ordered so that during concretization we can check the related munger\r\n  this is not extensible, oh well\r\n  Check we haven't already got a munger for this:\r\n  dont need to bother\r\n  System.err.println(\"add priv access: \" + member);\r\n  bug 129163: use set equality rather than list equality\r\n  methods allow\r\n  methods allow\r\n  or not a particular shadowMunger has matched something.\r\n  which will force a full build - bug 134541\r\n  of shadowMungers\r\n  }\r\n  DECAT for when attempting to replace an aspect\r\n  *sigh* dirty fix for dirty hacky implementation pr149305\r\n  These are like declare parents type mungers\r\n  includes ctors\r\n  assert m is concrete\r\n  we don't do mungers for abstract aspects\r\n  return;   FIXME asc perf Possible Improvement. Investigate why this is called twice in a weave ?\r\n  Ordered so that during concretization we can check the related munger\r\n  this is not extensible, oh well\r\n  Check we haven't already got a munger for this:\r\n  dont need to bother\r\n  System.err.println(\"add priv access: \" + member);\r\n  bug 129163: use set equality rather than list equality\r\n  methods allow\r\n  methods allow\r\n  or not a particular shadowMunger has matched something.\r\n  which will force a full build - bug 134541\r\n  of shadowMungers\r\n  }\r\n  DECAT for when attempting to replace an aspect\r\n  *sigh* dirty fix for dirty hacky implementation pr149305\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","UnresolvedReferenceBinding":"addWrapper debugName resolve setResolvedType toString resolvedType wrappers org.aspectj.org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding  reasonable guess\r\n  when the ParameterizedType for Unresolved B is created with args B<T>.M, the Unresolved B is resolved before the wrapper is added\r\n  create a proxy for the missing BinaryType\r\n  already resolved\r\n  targetType may be a source or binary type\r\n  otherwise we could create 2 : 1 for this unresolved type & 1 for the resolved type\r\n  $NON-NLS-1$ ","Ajc10":"setVerbose setVersion setNocomments setEmacssym setUsejavac setPreprocess setWorkingdir setDestdir setOptimize setClasspath createClasspath setClasspathref setBootclasspath createBootclasspath setBootclasspathref setExtdirs createExtdirs setArgfile setArgfiles setEncoding setSource setLenient setStrict setPorting setX setThreads setDumpstack setInternalclasspath createInternalclasspath setInternalclasspathref setSrcdir createSrc createSrcdir setFork setFailonerror setMaxmemory setJvmarg createJvmarg setNosymbols setDebug setDeprecation setTarget setDepend setIncludeantruntime setIncludejavaruntime ignore backdoorSetFile reset setif execute render spoon check VALID_XOPTIONS source14 ignoredOptions cmd vmcmd threads destdir workingdir internalclasspath classpath bootclasspath extdirs srcdir argfiles fork failonerror verbose encoding source org.aspectj.tools.ant.taskdefs.Ajc10  protected boolean version;\r\n  javac-also eajc-also docDone\r\n  let the compiler handle it\r\n  ajc-only not-eajc docDone\r\n  ajc-only  eajc-also docDone\r\n  ajc-only not-eajc docDone\r\n  ajc-only not-eajc docDone\r\n  ajc-only not-eajc ocDone\r\n  javac-also eajc-also  docDone\r\n  javac-also ignored docDone\r\n  javac-also eajc-also docDone\r\n  javac-also docDone\r\n  javac-also docDone\r\n  XXX may jury-rig\r\n  XXX may jury-rig\r\n  XXX may jury-rig\r\n  javac-also not-eajc docDone\r\n  javac-also not-eajc docDone\r\n  ajc-only eajc-also docDone\r\n  ajc-only eajc-also docDone\r\n  ignore(\"encoding\");\r\n  javac-also (Ant 1.4) eajc-also docDone\r\n  ajc-only not-eajc docDone\r\n  ajc-only not-eajc docDone\r\n  ajc-only not-eajc docDone\r\n  ajc-only eajc-also docDone\r\n  ajc-old docDone ignored\r\n  ------------------------- vestigial\r\n  ajc-old\r\n  ajc-taskdef only\r\n  ajc-taskdef only\r\n  ajc-taskdef only\r\n  javac-also eajc-also docDone\r\n  javac-also eajc-also docDone\r\n  javac-also eajc-also docDone\r\n  ajc-only not-eajc docDone\r\n  javac-also docDone\r\n  ajc-taskdef only docDone\r\n  XXX fork\r\n  XXX fork\r\n  todo remove?\r\n  ------------------------- javac task compatibility\r\n  todo: changed from -debug\r\n  XXX eajc: also \"warn:deprecation\"\r\n  todo: ajc accepts but doesn't use - pass in?\r\n  ------------------------- javac task compatibility - ignored\r\n  javac-also ignored docDone\r\n  javac-also ignored docDone\r\n  javac-also ignored docDone\r\n  version = false;\r\n  }\r\n  todo: ignore any srcdir if any argfiles and no explicit includes\r\n  int result = (fork || (internalclasspath != null)) ? fork() : spoon();\r\n  see throw above\r\n  if (version) version(null);\r\n  check for \"just quit -- message printed already\"\r\n  t.printStackTrace();   XXX avoid rendering if not verbosely logging?\r\n /* *******************************************************************\r\n * Copyright (c) 2000-2001 Xerox Corporation. \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","IWeaveRequestor":"acceptResult processingReweavableState addingTypeMungers weavingAspects weavingClasses weaveCompleted acceptResult processingReweavableState addingTypeMungers weavingAspects weavingClasses weaveCompleted org.aspectj.weaver.IWeaveRequestor org.aspectj.weaver.IWeaveRequestor  various notifications to the requestor about our progress...\r\n  various notifications to the requestor about our progress...\r\n /*\r\n\t * A class file resulting from a weave (yes, even though the type name\r\n\t * says \"unwoven\"...).\r\n\t */\r\n /*\r\n\t * A class file resulting from a weave (yes, even though the type name\r\n\t * says \"unwoven\"...).\r\n\t */\r\n","UnwovenClassFile":"getFilename makeInnerFileName getBytes getJavaClass writeUnchangedBytes writeWovenBytes writeChildClasses writeChildClassFile deleteAllChildClasses deleteChildClassFile unchanged getClassNameAsChars getClassName toString equals hashCode toString setClassNameAsChars getFilename makeInnerFileName getBytes getJavaClass writeUnchangedBytes writeWovenBytes writeChildClasses writeChildClassFile deleteAllChildClasses deleteChildClassFile unchanged getClassNameAsChars getClassName toString equals hashCode toString setClassNameAsChars filename charfilename bytes writtenChildClasses className name bytes filename charfilename bytes writtenChildClasses className name bytes org.aspectj.weaver.bcel.UnwovenClassFile org.aspectj.weaver.bcel.UnwovenClassFile  protected byte[] writtenBytes = null;\r\n  strip the .class\r\n  if (bytes == null) bytes = javaClass.getBytes();\r\n  Thread.currentThread().dumpStack();\r\n  XXX this is an important optimization\r\n  ??? how much that will affect performance\r\n  XXX is this right\r\n  OPTIMIZE quicker way to determine name??? surely?\r\n  it back on!\r\n  protected byte[] writtenBytes = null;\r\n  strip the .class\r\n  if (bytes == null) bytes = javaClass.getBytes();\r\n  Thread.currentThread().dumpStack();\r\n  XXX this is an important optimization\r\n  ??? how much that will affect performance\r\n  XXX is this right\r\n  OPTIMIZE quicker way to determine name??? surely?\r\n  it back on!\r\n /* ChildClass */\r\n /* private */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* ChildClass */\r\n /* private */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","DOMType":"addSuperInterface appendMemberBodyContents appendMemberDeclarationContents appendSimpleContents canHaveChildren getCloseBodyPosition getDetailedNode getInsertionPosition getJavaElement getMemberDeclarationStartPosition getNodeType getOpenBodyEnd getSuperclass getSuperInterfaces isAllowableChild isClass newDOMNode normalize normalizeEndPosition offset setClass setCloseBodyRangeEnd setCloseBodyRangeStart setName setOpenBodyRangeEnd setOpenBodyRangeStart setSuperclass setSuperInterfaces setTypeKeyword shareContents toString getTypeParameters isEnum isAnnotation setEnum setAnnotation setTypeParameters fTypeKeyword fTypeRange fSuperclass fSuperclassRange fExtendsRange fImplementsRange fInterfaces fInterfacesRange fOpenBodyRange fCloseBodyRange fSuperInterfaces fTypeParameters fIsEnum fIsAnnotation org.aspectj.org.eclipse.jdt.internal.core.jdom.DOMType  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  append eveything before my name\r\n  append my name\r\n  append everything after my name and before my first child\r\n  append my children\r\n  append from my last child to my end\r\n  See PR 1GELSDQ: ITPJUI:WINNT - JDOM: IType.createMethod does not insert nicely for inner types\r\n  Note: creating local  perform final changes to the open and close body ranges\r\n  look for the open body\r\n  this node's end position is just before the start of the next node\r\n  to the end of the enclosing node\r\n  parent is a type\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  enums are always classes with no superclass\r\n  annotation types are always interface with no superclass or superinterfaces\r\n /* package */\r\n","IndexAllProject":"equals execute hashCode updatedIndexState toString project org.aspectj.org.eclipse.jdt.internal.core.search.indexing.IndexAllProject  nothing to do\r\n  $NON-NLS-1$   $NON-NLS-1$   free read lock\r\n  Get source folder entries. Libraries are done as a separate job\r\n  Do not create marker while getting raw classpath (see bug 41859)\r\n  ensure a job exists to index it as a binary folder\r\n  nothing to index but want to save an empty index file so its not 'rebuilt' when part of a search request\r\n  index got deleted since acquired\r\n  ask permission to read\r\n  all file names   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  collect output locations if source is project (see http:  Do not create marker while getting output location (see bug 41859)\r\n  if there are inclusion patterns then we must walk the children\r\n  request to save index when all cus have been indexed... also sets state to SAVED_STATE\r\n  $NON-NLS-1$\r\n /*reuse index file*/\r\n /*reuse index file*/\r\n","SecondaryTypeDeclarationPattern":"getBlankPattern print queryIn SECONDARY_PATTERN_KEY org.aspectj.org.eclipse.jdt.internal.core.search.matching.SecondaryTypeDeclarationPattern  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.internal.core.search.matching.TypeDeclarationPattern#queryIn(org.aspectj.org.eclipse.jdt.internal.core.index.Index)\r\n */\r\n","PossibleMatchSet":"add getPossibleMatches reset rootsToPossibleMatches elementCount org.aspectj.org.eclipse.jdt.internal.core.search.matching.PossibleMatchSet","NoAspectBoundException":"getCause getCause getCause cause cause cause org.aspectj.lang.NoAspectBoundException org.aspectj.lang.NoAspectBoundException org.aspectj.lang.NoAspectBoundException /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","PinpointingMessageHandler":"handleMessage isIgnoring dontIgnore ignore getMessage getKind isError isWarning isDebug isInfo isAbort isTaskTag isFailed getDeclared getID getSourceStart getSourceEnd getThrown getSourceLocation getDetails getExtraSourceLocations getMessage handleMessage isIgnoring dontIgnore ignore getMessage getKind isError isWarning isDebug isInfo isAbort isTaskTag isFailed getDeclared getID getSourceStart getSourceEnd getThrown getSourceLocation getDetails getExtraSourceLocations getMessage delegate delegate message serialVersionUID delegate delegate message serialVersionUID org.aspectj.bridge.context.PinpointingMessageHandler org.aspectj.bridge.context.PinpointingMessageHandler /* (non-Javadoc)\r\n\t * @see org.aspectj.bridge.IMessageHandler#handleMessage(org.aspectj.bridge.IMessage)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.bridge.IMessageHandler#isIgnoring(org.aspectj.bridge.IMessage.Kind)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.bridge.IMessageHandler#dontIgnore(org.aspectj.bridge.IMessage.Kind)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.bridge.IMessageHandler#ignore(org.aspectj.bridge.IMessage.Kind)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.bridge.IMessageHandler#handleMessage(org.aspectj.bridge.IMessage)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.bridge.IMessageHandler#isIgnoring(org.aspectj.bridge.IMessage.Kind)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.bridge.IMessageHandler#dontIgnore(org.aspectj.bridge.IMessage.Kind)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.bridge.IMessageHandler#ignore(org.aspectj.bridge.IMessage.Kind)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","StringLiteral":"propertyDescriptors internalStructuralPropertiesForType internalGetSetObjectProperty getNodeType0 clone0 subtreeMatch0 accept0 getEscapedValue setEscapedValue internalSetEscapedValue getLiteralValue setLiteralValue memSize treeSize computeConstant extendWith extendWith extendsWith generateCode literalType printExpression source traverse ESCAPED_VALUE_PROPERTY PROPERTY_DESCRIPTORS escapedValue source lineNumber org.aspectj.org.eclipse.jdt.core.dom.StringLiteral org.aspectj.org.eclipse.jdt.internal.compiler.ast.StringLiteral  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  $NON-NLS-1$\r\n  update internalSetEscapedValue(String) if this is changed\r\n  $NON-NLS-1$  $NON-NLS-1$  opening delimiter   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  closing delimiter   line number is 1 based\r\n  add the lit source to mine, just as if it was mine\r\n  add the lit source to mine, just as if it was mine\r\n  handle some special char.....\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  take care not to display the escape as a potential real char\r\n  $NON-NLS-1$\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * This method is a copy of setEscapedValue(String) that doesn't do any validation.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","AssertStatement":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getExpression setExpression getMessage setMessage memSize treeSize analyseCode generateCode resolve traverse manageSyntheticAccessIfNecessary printStatement EXPRESSION_PROPERTY MESSAGE_PROPERTY PROPERTY_DESCRIPTORS expression optionalMessageExpression assertExpression exceptionArgument preAssertInitStateIndex assertionSyntheticFieldBinding org.aspectj.org.eclipse.jdt.core.dom.AssertStatement org.aspectj.org.eclipse.jdt.internal.compiler.ast.AssertStatement  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  an AssertStatement may occur inside an Expression - must check cycles\r\n  an AsertStatement may occur inside an Expression - must check cycles\r\n  for local variable attribute\r\n  only gets evaluated when escaping - results are not taken into account\r\n  add the assert support in the clinit\r\n  if assertions are enabled, the following code will be unreachable\r\n  May loose some local variable initializations : affecting the local variable attributes\r\n  May loose some local variable initializations : affecting the local variable attributes\r\n  AspectJ Extension - for inter-type declarations\r\n  find <clinit> and enable assertion support\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","HierarchyBinaryType":"getEnclosingTypeName getFields getFileName getGenericSignature getInterfaceNames getMemberTypes getMethods getModifiers getName getSourceName getSuperclassName isAnonymous isBinaryType isLocal isMember recordSuperType toString getAnnotations sourceFileName getTagBits modifiers sourceName name enclosingTypeName superclass superInterfaces typeParameterSignatures genericSignature org.aspectj.org.eclipse.jdt.internal.core.hierarchy.HierarchyBinaryType  rebuild A$B name\r\n  $NON-NLS-1$\r\n  index did not record this information (since unused for hierarchies)\r\n  index did not record this information (since unused for hierarchies)\r\n  index did not record this information (since unused for hierarchies)\r\n  index encoding of p.A$B was B  this is an artifact used for being able to query them only.\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  TODO (jerome) please verify that we don't need the tagbits for the receiver\r\n","ConstantInterfaceMethodref":"accept accept org.aspectj.apache.bcel.classfile.ConstantInterfaceMethodref org.aspectj.apache.bcel.classfile.ConstantInterfaceMethodref","ClassPath":"getSystemClassPath toString hashCode equals getPathComponents getClassPath getInputStream getInputStream getClassFile getClassFile getBytes getBytes getPath getPath getClassFile getInputStream getPath getBase getTime getSize getClassFile toString getClassFile getSystemClassPath toString hashCode equals getPathComponents getClassPath getInputStream getInputStream getClassFile getClassFile getBytes getBytes getPath getPath getClassFile getInputStream getPath getBase getTime getSize getClassFile toString getClassFile SYSTEM_CLASS_PATH paths class_path dir zip SYSTEM_CLASS_PATH paths class_path dir zip org.aspectj.apache.bcel.util.ClassPath org.aspectj.apache.bcel.util.ClassPath","NameConvertor":"convertFromSignature getFullyQualifiedTypeName createShortName getTypeName convertFromSignature getFullyQualifiedTypeName createShortName getTypeName BOOLEAN BYTE CHAR DOUBLE FLOAT INT LONG SHORT ARRAY RESOLVED UNRESOLVED PARAMETERIZED BOOLEAN_NAME BYTE_NAME CHAR_NAME DOUBLE_NAME FLOAT_NAME INT_NAME LONG_NAME SHORT_NAME SQUARE_BRACKETS GREATER_THAN LESS_THAN COMMA BACKSLASH_LESSTHAN SEMICOLON BOOLEAN BYTE CHAR DOUBLE FLOAT INT LONG SHORT ARRAY RESOLVED UNRESOLVED PARAMETERIZED BOOLEAN_NAME BYTE_NAME CHAR_NAME DOUBLE_NAME FLOAT_NAME INT_NAME LONG_NAME SHORT_NAME SQUARE_BRACKETS GREATER_THAN LESS_THAN COMMA BACKSLASH_LESSTHAN SEMICOLON org.aspectj.asm.internal.NameConvertor org.aspectj.asm.internal.NameConvertor  we have something like '>;'\r\n  we have something like 'Ljava  we have something like 'Ljava  we have something like 'Ljava  middle of a '<...>'\r\n  the '<' back.\r\n  the first part\r\n  close the generic signature\r\n  we have something like '>;'\r\n  we have something like 'Ljava  we have something like 'Ljava  we have something like 'Ljava  so add the ';' back\r\n  the '<' back.\r\n  the first part\r\n  close the generic signature\r\n  we have something like '>;'\r\n  we have something like 'Ljava  we have something like 'Ljava  we have something like 'Ljava  middle of a '<...>'\r\n  the '<' back.\r\n  the first part\r\n  close the generic signature\r\n  we have something like '>;'\r\n  we have something like 'Ljava  we have something like 'Ljava  we have something like 'Ljava  so add the ';' back\r\n  the '<' back.\r\n  the first part\r\n  close the generic signature\r\n","CompletionRequestorWrapper":"accept completionFailure getParameterPackages getParameterTypes DECODE_SIGNATURE requestor org.aspectj.org.eclipse.jdt.internal.codeassist.CompletionRequestorWrapper","StackMapEntry":"dump toString setByteCodeOffset getByteCodeOffset setNumberOfLocals getNumberOfLocals setTypesOfLocals getTypesOfLocals setNumberOfStackItems getNumberOfStackItems setTypesOfStackItems getTypesOfStackItems copy accept getConstantPool setConstantPool dump toString setByteCodeOffset getByteCodeOffset setNumberOfLocals getNumberOfLocals setTypesOfLocals getTypesOfLocals setNumberOfStackItems getNumberOfStackItems setTypesOfStackItems getTypesOfStackItems copy accept getConstantPool setConstantPool byte_code_offset number_of_locals types_of_locals number_of_stack_items types_of_stack_items constant_pool byte_code_offset number_of_locals types_of_locals number_of_stack_items types_of_stack_items constant_pool org.aspectj.apache.bcel.classfile.StackMapEntry org.aspectj.apache.bcel.classfile.StackMapEntry","SelectionOnSingleTypeReference":"aboutToResolve getTypeBinding printExpression resolveTypeEnclosing org.aspectj.org.eclipse.jdt.internal.codeassist.select.SelectionOnSingleTypeReference  step up from the ClassScope\r\n  it can be a package, type or member type\r\n  $NON-NLS-1$\r\n  tolerate some error cases\r\n /*\r\n * Selection node build by the parser in any case it was intending to\r\n * reduce a type reference containing the selection identifier as a single\r\n * name reference.\r\n * e.g.\r\n *\r\n *\tclass X extends [start]Object[end]\r\n *\r\n *\t---> class X extends <SelectOnType:Object>\r\n *\r\n */\r\n","CancelableProblemFactory":"createProblem monitor org.aspectj.org.eclipse.jdt.internal.core.CancelableProblemFactory /*silent*/\r\n","ShouldNotImplement":"serialVersionUID org.aspectj.org.eclipse.jdt.internal.compiler.problem.ShouldNotImplement  backward compatible\r\n /*\r\n * Special unchecked exception type used \r\n * to denote implementation that should never be reached.\r\n *\r\n *\t(internal only)\r\n */\r\n","MethodRef":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty internalGetChildListProperty getNodeType0 clone0 subtreeMatch0 accept0 getQualifier setQualifier getName setName parameters resolveBinding memSize treeSize QUALIFIER_PROPERTY NAME_PROPERTY PARAMETERS_PROPERTY PROPERTY_DESCRIPTORS optionalQualifier methodName parameters org.aspectj.org.eclipse.jdt.core.dom.MethodRef  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","MethodSignatureImpl":"getReturnType createToString getMethod getReturnType createToString getMethod getReturnType createToString getMethod method returnType method returnType method returnType org.aspectj.runtime.reflect.MethodSignatureImpl org.aspectj.runtime.reflect.MethodSignatureImpl org.aspectj.runtime.reflect.MethodSignatureImpl  nothing we can do, user will see null return\r\n  nothing we can do, user will see null return\r\n  nothing we can do, user will see null return\r\n /* name is consistent with reflection API */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.MemberSignature#getAccessibleObject()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* name is consistent with reflection API */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.MemberSignature#getAccessibleObject()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* name is consistent with reflection API */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.MemberSignature#getAccessibleObject()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","IClassFileAttribute":"getAttributeNameIndex getAttributeName getAttributeLength org.aspectj.org.eclipse.jdt.core.util.IClassFileAttribute","PackageDeclarationMatch":"org.aspectj.org.eclipse.jdt.core.search.PackageDeclarationMatch","SourceContextImpl":"configureFromAttribute setSourceFileName getSourceFile tidy getOffset makeSourceLocation makeSourceLocation makeSourceLocation makeSourceLocation getOffset tidy configureFromAttribute setSourceFileName getSourceFile tidy getOffset makeSourceLocation makeSourceLocation makeSourceLocation makeSourceLocation getOffset tidy lineBreaks sfname UNKNOWN_SOURCE_CONTEXT lineBreaks sfname UNKNOWN_SOURCE_CONTEXT org.aspectj.weaver.SourceContextImpl org.aspectj.weaver.SourceContextImpl  private AbstractReferenceTypeDelegate delegate;\r\n  this.delegate = delegate;\r\n  this.delegate.setSourcefilename(name);\r\n  ??? have more info\r\n  1st char of given line is next char after previous end of line\r\n  private AbstractReferenceTypeDelegate delegate;\r\n  this.delegate = delegate;\r\n  this.delegate.setSourcefilename(name);\r\n  ??? have more info\r\n  1st char of given line is next char after previous end of line\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","InterTypeMethodDeclaration":"getName getReturnType getGenericReturnType getParameterTypes getGenericParameterTypes getTypeParameters getExceptionTypes parseStatements getPrefix isFinal analyseCode resolve resolveStatements build makeAttribute generateCode generateDispatchMethod getShadowKindForBody checkAndSetModifiersForMethod getOnType setOnType clone0 accept0 getName getReturnType getGenericReturnType getParameterTypes getGenericParameterTypes getTypeParameters getExceptionTypes onType org.aspectj.lang.reflect.InterTypeMethodDeclaration org.aspectj.ajdt.internal.compiler.ast.InterTypeMethodDeclaration org.aspectj.org.eclipse.jdt.core.dom.InterTypeMethodDeclaration org.aspectj.lang.reflect.InterTypeMethodDeclaration  the method HAS a body --> abstract native modifiers are forbiden\r\n  to do it for args...\r\n  Work out the real method binding that we can use for comparison\r\n  Go up the hierarchy, looking for something we override\r\n  return types compatible? (allow for covariance)\r\n  superclass of object is null\r\n  If we couldn't find something we override, report the error\r\n  Need to verify\r\n  check @Override annotation - based on MethodDeclaration.resolveStatements() @Override processing\r\n  Check the target for ITD is not an interface\r\n  has already been reported.\r\n  return null;\r\n  Error message output in isTargetAnnotation\r\n  Error message output in isTargetEnum\r\n  We encountered a problem building the scope, don't continue - error already reported\r\n  referred to in the parameters  System.err.println(\"no code for \" + this);\r\n  this makes the interMethodBody\r\n  annotations on the ITD declaration get put on this method\r\n  damage the attributes generated for the dispatch binding.\r\n  TypeBinding type;\r\n  for reported problems, we want the user to see the declared selector\r\n  after this point, tests on the 16 bits reserved.\r\n  check for abnormal modifiers\r\n  check for incompatible modifiers in the visibility bits, isolate the visibility bits\r\n  need to keep the less restrictive so disable Protected  check for modifiers incompatible with abstract modifier\r\n  native methods cannot also be tagged as strictfp\r\n  static members are only authorized in a static member or top level type\r\n  restore the true selector now that any problems have been reported\r\n  XXX this code is copied from MethodScope, with a few adjustments for ITDs...\r\n  visit children in normal left to right reading order\r\n  n.b. visit return type even for constructors\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","ResourceCompilationUnit":"getContents file org.aspectj.org.eclipse.jdt.internal.core.util.ResourceCompilationUnit  answer the cached source\r\n  otherwise retrieve it\r\n /*no contents*/\r\n","IMemberValuePairBinding":"getName getMethodBinding getValue isDefault org.aspectj.org.eclipse.jdt.core.dom.IMemberValuePairBinding","ArrayReference":"analyseAssignment analyseCode generateAssignment generateCode generateCompoundAssignment generatePostIncrement nullStatus printExpression resolveType traverse receiver position org.aspectj.org.eclipse.jdt.internal.compiler.ast.ArrayReference  TODO (maxime) optimization: unconditionalInits is applied to all existing calls\r\n  ((type[])null)[0]\r\n  ((type[])null)[0]\r\n  conversion only generated if unboxing\r\n  Generating code for the potential runtime type checking\r\n  ((type[])null)[0]\r\n  promote the array reference to the suitable operation type\r\n  prefix operation\r\n  generate the increment value (will by itself  be promoted to the operation value)\r\n  perform the operation\r\n  cast the value back to the array reference type\r\n  ((type[])null)[0]\r\n  no cast check for ((type[])null)[0]\r\n  will check later on\r\n","LOOKUPSWITCH":"dump dump org.aspectj.apache.bcel.generic.LOOKUPSWITCH org.aspectj.apache.bcel.generic.LOOKUPSWITCH  Alignment remainer assumed 0 here, until dump time\r\n  npairs\r\n  match-offset pairs\r\n  reads padding\r\n  Alignment remainer assumed 0 here, until dump time\r\n  npairs\r\n  match-offset pairs\r\n  reads padding\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n","ReflectionFastMatchInfo":"getMatchingContext getMatchingContext context context org.aspectj.weaver.reflect.ReflectionFastMatchInfo org.aspectj.weaver.reflect.ReflectionFastMatchInfo /* *******************************************************************\r\n * Copyright (c) 2006 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2006 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","IHasSourceLocation":"getSourceContext getSourceLocation getSourceContext getSourceLocation org.aspectj.weaver.IHasSourceLocation org.aspectj.weaver.IHasSourceLocation /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","ICompilationUnitLocator":"fromIFile org.aspectj.org.eclipse.jdt.internal.core.builder.ICompilationUnitLocator","ConcreteTypeMunger":"getMunger getAspectType getSignature getWorld getSourceLocation matches getMatchingSyntheticMember compareTo fallbackCompareTo isTargetTypeParameterized parameterizedFor isLateMunger parameterizeWith existsToSupportShadowMunging getMunger getAspectType getSignature getWorld getSourceLocation matches getMatchingSyntheticMember compareTo fallbackCompareTo isTargetTypeParameterized parameterizedFor isLateMunger parameterizeWith existsToSupportShadowMunging munger aspectType munger aspectType org.aspectj.weaver.ConcreteTypeMunger org.aspectj.weaver.ConcreteTypeMunger  XXX\r\n  ConcreteTypeMunger o = (ConcreteTypeMunger) other;\r\n  XXX\r\n  ConcreteTypeMunger o = (ConcreteTypeMunger) other;\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","Type":"getSignature getType getSize toString getMethodSignature getType getTypeInternal getReturnType getArgumentTypes getArgumentSizes getTypeSize getType getSignature getSignature getType getConsumed isPrimitiveType isSimpleType isArrayType isParameterizedType isQualifiedType isWildcardType resolveBinding getSignature getType getSize toString getMethodSignature getType getTypeInternal getReturnType getArgumentTypes getArgumentSizes getTypeSize getType getSignature getSignature getType getConsumed type signature VOID BOOLEAN INT SHORT BYTE LONG DOUBLE FLOAT CHAR OBJECT STRING OBJECT_ARRAY STRING_ARRAY STRINGBUFFER STRINGBUILDER THROWABLE CLASS INTEGER EXCEPTION LIST ITERATOR NO_ARGS NULL UNKNOWN STRINGARRAY1 STRINGARRAY2 STRINGARRAY3 STRINGARRAY4 STRINGARRAY5 STRINGARRAY6 STRINGARRAY7 commonTypes t consumed type signature VOID BOOLEAN INT SHORT BYTE LONG DOUBLE FLOAT CHAR OBJECT STRING OBJECT_ARRAY STRING_ARRAY STRINGBUFFER STRINGBUILDER THROWABLE CLASS INTEGER EXCEPTION LIST ITERATOR NO_ARGS NULL UNKNOWN STRINGARRAY1 STRINGARRAY2 STRINGARRAY3 STRINGARRAY4 STRINGARRAY5 STRINGARRAY6 STRINGARRAY7 commonTypes t consumed org.aspectj.apache.bcel.generic.Type org.aspectj.org.eclipse.jdt.core.dom.Type org.aspectj.apache.bcel.generic.Type  signature for the type\r\n  generics awareness\r\n  Look for closing ';'\r\n  ObjectType doesn't currently store parameterized info\r\n  Recurse, but just once, if the signature is ok\r\n  Look for closing ';'\r\n  generics awareness\r\n  ObjectType doesn't currently store parameterized info\r\n  Recurse, but just once, if the signature is ok\r\n  Should never occur\r\n  Read return type after `)'\r\n  Should never occur\r\n  Read all declarations between for `(' and `)'\r\n  current string position\r\n  update position\r\n  OPTIMIZE crap impl\r\n  current string position\r\n  Should never occur\r\n  Look for closing ';'\r\n  generics awareness\r\n  type == T_REFERENCE\r\n  \"Real\" class\r\n  avoid clone\r\n  avoid clone\r\n  signature for the type\r\n  generics awareness\r\n  Look for closing ';'\r\n  ObjectType doesn't currently store parameterized info\r\n  Recurse, but just once, if the signature is ok\r\n  Look for closing ';'\r\n  generics awareness\r\n  ObjectType doesn't currently store parameterized info\r\n  Recurse, but just once, if the signature is ok\r\n  Should never occur\r\n  Read return type after `)'\r\n  Should never occur\r\n  Read all declarations between for `(' and `)'\r\n  current string position\r\n  update position\r\n  OPTIMIZE crap impl\r\n  current string position\r\n  Should never occur\r\n  Look for closing ';'\r\n  generics awareness\r\n  type == T_REFERENCE\r\n  \"Real\" class\r\n  avoid clone\r\n  avoid clone\r\n /* Predefined constants */\r\n /* That's an amazingly easy case, because getName() returns\r\n     * the signature. That's what we would have liked anyway.\r\n     */\r\n /* Predefined constants */\r\n /* That's an amazingly easy case, because getName() returns\r\n     * the signature. That's what we would have liked anyway.\r\n     */\r\n","StructureViewManager":"elementsUpdated fireNavigateBackAction fireNavigateForwardAction fireNavigationAction fireNavigationAction navigationAction refreshView getDefaultViewProperties getAvailableRelations createGlobalView createViewForSourceFile deleteView setDefaultFileView getDefaultFileView treeViewBuilder historyModel structureViews defaultFileView DEFAULT_VIEW_PROPERTIES AVAILABLE_RELATIONS VIEW_LISTENER org.aspectj.ajde.ui.StructureViewManager  navigating to node: \" + node + \", recordHistory: \" + recordHistory\r\n  creating view for file:\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation\r\n *     Helen Hawkins  Converted to new interface (bug 148190) \r\n * ******************************************************************/\r\n","AjCompilerAdapter":"beforeCompiling beforeProcessing beforeResolving afterResolving beforeAnalysing afterAnalysing beforeGenerating afterGenerating afterCompiling afterProcessing acceptResult getBinarySourcesFrom notifyRequestor weave afterDietParsing getResultsPendingWeave compiler weaver eWorld isBatchCompile reportedErrors isXTerminateAfterCompilation proceedOnError inJava5Mode noAtAspectJAnnotationProcessing intermediateResultsRequestor progressListener outputFileNameProvider binarySourceProvider weaverMessageHandler binarySourceSetForFullWeave processingToken resolvingToken analysingToken generatingToken incrementalCompilationState resultsPendingWeave org.aspectj.ajdt.internal.compiler.AjCompilerAdapter  Do we need to reset the message handler or create a new one? (This saves a ton of memory lost on incremental compiles...)\r\n  Don't wrap AbortCompilation exceptions!\r\n  which will then then log it as a compiler problem.\r\n  not great ... but one more check before we continue, see pr132314\r\n  notification happens as weave progresses...\r\n  no point weaving... just tell the requestor we're done\r\n  Map is fileName |-> List<UnwovenClassFile>\r\n  XXX - see bugs 57432,58679 - final parameter on next call should be \"compiler.options.maxProblemsPerUnit\"\r\n  ensure weaver state is set up correctly\r\n  force full recompilation from source\r\n  ???: is this the right point for this? After weaving has finished clear the caches.\r\n  }\r\n /* fileName |-> List<UnwovenClassFile> */\r\n /*InterimResult*/\r\n /* fileName |-> List<UnwovenClassFile> */\r\n /*\r\n\t * Called from the weaverAdapter once it has finished weaving the class files\r\n\t * associated with a given compilation result.\r\n\t */\r\n","TypeVector":"add addAll contains copy elementAt elements find remove removeAll toString INITIAL_SIZE size maxSize elements NoElements org.aspectj.org.eclipse.jdt.internal.core.TypeVector  when an element is added, it assumes that the length is > 0\r\n  knows that size starts <= maxSize\r\n  assume no more elements will be added\r\n  do not resize to 0 if empty since may add more elements later\r\n  shift the remaining elements down one spot\r\n  assumes only one occurrence of the element exists\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","ImportRewriteAnalyzer":"getSpacesBetweenImportGroups addPreferenceOrderHolders getQualifier getFullName addExistingImports setFilterImplicitImports setFindAmbiguousImports initialize isBetterMatch sameMatchLenTest getCommonPrefixLength getCharAt findBestMatch isImplicitImport addImport removeImport getIndexAfterStatics sortIn evaluateReplaceRange getResultingEdits removeAndInsertNew findInBuffer evaluateStarImportConflicts getNewImportString getFirstTypeBeginPos getPackageStatementEndPos toString getElementName compareTo getSimpleName isOnDemand isStatic isNew isComment getSourceRange createOnPlaceholderEntry isStatic compareTo sortIn add find remove removeAllNew getImportAt hasStarImport getNumberOfImports getName getGroupID setGroupID isSameGroup getLast isComment isDefaultPackage toString getCreatedImports getCreatedStaticImports compilationUnit packageEntries importsCreated staticImportsCreated replaceRange importOnDemandThreshold staticImportOnDemandThreshold filterImplicitImports findAmbiguousImports flags F_NEEDS_LEADING_DELIM F_NEEDS_TRAILING_DELIM JAVA_LANG newName bestName bestMatchLen foundTypes elementName sourceRange isStatic name importEntries group isStatic org.aspectj.org.eclipse.jdt.internal.core.dom.rewrite.ImportRewriteAnalyzer  $NON-NLS-1$\r\n  !restoreExistingImports;\r\n  normal import group\r\n  static import group\r\n  remember last entry\r\n  find an existing package entry that matches most\r\n  fill in not-assigned categories, keep partial order\r\n  all new: copy the elements\r\n  $NON-NLS-1$\r\n  if next import is on a different line, modify the end position to the next line begin offset\r\n  create a comment package entry for this\r\n  add a comment entry for spacing between imports\r\n  curr has longer match\r\n  duplicate entry and complete match\r\n  determine the order and return true if currName is closer to newName\r\n  -> (c > b)\r\n  keep curr and best together, new should be ahead of both\r\n  n > b  && n > c\r\n  -> (n - c) < (b - n)\r\n  -> (c < b)\r\n  keep curr and best together, new should be before both\r\n  n < b  && n < c\r\n  -> (c - n) < (n - b)\r\n  perfect fit, use entry\r\n  find the matching group\r\n  $NON-NLS-1$\r\n  find the best match with the same group\r\n  create a new package entry\r\n  insert after best match\r\n  insert ahead of best match\r\n  no extended range for first: bug 121428\r\n  new import container\r\n  add a space between two different groups by looking at the two adjacent imports\r\n  $NON-NLS-1$\r\n  new entry\r\n  no changes\r\n  new import container\r\n  found\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  insert a line after after package statement\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  exists already\r\n  can not star import default package\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*ImportDeclaration*/\r\n /* package */\r\n /* package */\r\n /*String*/\r\n /*<char[][]>*/\r\n /*<char[][]>*/\r\n /*&& (onDemandConflicts == null || onDemandConflicts.contains(curr.getSimpleName()))*/\r\n /*\r\n\t * Internal element for the import structure: A container for imports\r\n\t * of all types from the same package\r\n\t */\r\n","TypeHierarchy":"initializeRegions addAllCheckingDuplicates addInterface addRootClass addSubtype addTypeHierarchyChangedListener bytesToFlags cacheFlags cacheSuperclass cacheSuperInterfaces checkCanceled compute contains elementChanged exists fireChange flagsToBytes getAllClasses getAllInterfaces getAllSubtypes getAllSubtypesForType getAllSubtypesForType0 getAllSuperclasses getAllSuperInterfaces getAllSuperInterfaces0 getAllSupertypes getAllSupertypes0 getAllTypes getCachedFlags getExtendingInterfaces getExtendingInterfaces0 getImplementingClasses getImplementingClasses0 getRootClasses getRootInterfaces getSubclasses getSubtypes getSubtypesForType getSuperclass getSuperInterfaces getSupertypes getType growAndAddToArray growAndAddToArray hasFineGrainChanges hasSubtypeNamed hasTypeNamed includesTypeOrSupertype initialize isAffected isAffectedByChildren isAffectedByJavaModel isAffectedByJavaProject isAffectedByPackageFragment isAffectedByPackageFragmentRoot isAffectedByOpenable isInterface javaProject readUntil readUntil load packageRegionContainsSamePackageFragment refresh removeTypeHierarchyChangedListener store subtypesIncludeSupertypeOf toString toString hasSupertype worked DEBUG VERSION SEPARATOR1 SEPARATOR2 SEPARATOR3 SEPARATOR4 COMPUTE_SUBTYPES CLASS INTERFACE COMPUTED_FOR ROOT NO_FLAGS SIZE project focusType workingCopies classToSuperclass typeToSuperInterfaces typeToSubtypes typeFlags rootClasses interfaces missingTypes NO_TYPE progressMonitor changeListeners files packageRegion projectRegion computeSubtypes scope needsRefresh changeCollector org.aspectj.org.eclipse.jdt.internal.core.hierarchy.TypeHierarchy  SEPARATOR\r\n  general info\r\n  type info\r\n  cst\r\n  unsure the focus type is unresolved (see https:  register with JavaCore to get Java element delta on first listener added\r\n  add listener only if it is not already present\r\n  classes\r\n  root classes\r\n  interfaces\r\n  type hierarchy change has already been fired\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  clone so that a listener cannot have a side-effect on this list when being notified\r\n  $NON-NLS-1$\r\n  check type\r\n  check superclass\r\n  check superinterfaces\r\n  affected in the same way\r\n  affected in the same way\r\n  if the added project is on the classpath, then the hierarchy has changed\r\n  if the hierarchy's project is on the added project classpath, then the hierarchy has changed\r\n  then the type hierarchy has changed\r\n  introduce new types, changing the hierarchy\r\n  is a change if the package fragment contains types in this hierarchy\r\n  look at the files in the package fragment\r\n  check if the root is in the classpath of one of the projects of this hierarchy\r\n  the the type hierarchy has changed\r\n  changes to working copies are batched\r\n  read project\r\n  read missing type\r\n  read flags\r\n  read info\r\n  read types\r\n  read super type\r\n  read super class\r\n  read super interface\r\n  read super interface\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$   deregister from JavaCore on last listener removed\r\n  compute types in hierarchy\r\n  save version of the hierarchy format\r\n  save general info\r\n  save project\r\n  save missing types\r\n  n bytes\r\n  save types\r\n  save superclasses\r\n  save superinterfaces\r\n  look for superclass\r\n  $NON-NLS-1$\r\n  look for super interfaces\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n\t * The working copies that take precedence over original compilation units\r\n\t */\r\n /*\r\n\t * A map from Openables to ArrayLists of ITypes\r\n\t */\r\n /*\r\n\t * Whether this hierarchy needs refresh\r\n\t */\r\n /*\r\n\t * Collects changes to types\r\n\t */\r\n /*\r\n * Whether fine-grained deltas where collected and affects this hierarchy.\r\n */\r\n","CancelableNameEnvironment":"checkCanceled findPackages findType findType findTypes monitor org.aspectj.org.eclipse.jdt.internal.core.CancelableNameEnvironment  $NON-NLS-1$\r\n /*silent*/\r\n","AbortException":"borrowPorter returnPorter extractMessage getIMessage isPorter getThrown setIMessage getMessage printStackTrace printStackTrace printStackTrace isSilent setIsSilent borrowPorter returnPorter extractMessage getIMessage isPorter getThrown setIMessage getMessage printStackTrace printStackTrace printStackTrace isSilent setIsSilent serialVersionUID isSilent NO_MESSAGE_TEXT porters message isPorter serialVersionUID isSilent NO_MESSAGE_TEXT porters message isPorter org.aspectj.bridge.AbortException org.aspectj.bridge.AbortException  XXX move porters out, handle proxy better\r\n  better than nothing\r\n  Always print\r\n  XXX move porters out, handle proxy better\r\n  XXX move porters out, handle proxy better\r\n  better than nothing\r\n  Always print\r\n  XXX move porters out, handle proxy better\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","AjcCompilerAdapter":"setJavac execute ajc org.aspectj.tools.ant.taskdefs.AjcCompilerAdapter  XXX unsupported\r\n  XXX unsupported\r\n  XXX unsupported\r\n  XXX unsupported\r\n  XXX unsupported\r\n  enforce one-shot\r\n /* *******************************************************************\r\n * Copyright (c) 2000-2001 Xerox Corporation. \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","TypeParameter":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty internalGetChildListProperty getNodeType0 clone0 subtreeMatch0 accept0 getName resolveBinding setName typeBounds memSize treeSize getKind checkBounds internalResolve resolve resolve printStatement generateCode traverse traverse equals generateInfos getBounds getDeclaringMember getElementName getElementType getHandleMementoDelimiter getNameRange getSourceRange getClassFile toStringName NAME_PROPERTY TYPE_BOUNDS_PROPERTY PROPERTY_DESCRIPTORS typeVariableName typeBounds binding bounds NO_TYPE_PARAMETERS name org.aspectj.org.eclipse.jdt.core.dom.TypeParameter org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeParameter org.aspectj.org.eclipse.jdt.internal.core.TypeParameter  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  treat Code as free\r\n  detect variable  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  ensure the class file's buffer is open so that source ranges are computed\r\n  ensure the class file's buffer is open so that source ranges are computed\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.AstNode#print(int, java.lang.StringBuffer)\r\n\t */\r\n /*\r\n\t * @see JavaElement#generateInfos\r\n\t */\r\n /*\r\n\t * @see ISourceReference\r\n\t */\r\n","MethodInvocation":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty internalGetChildListProperty getNodeType0 clone0 subtreeMatch0 accept0 getExpression isResolvedTypeInferredFromExpectedType setExpression typeArguments getName setName arguments resolveMethodBinding memSize treeSize EXPRESSION_PROPERTY TYPE_ARGUMENTS_PROPERTY NAME_PROPERTY ARGUMENTS_PROPERTY PROPERTY_DESCRIPTORS_2_0 PROPERTY_DESCRIPTORS_3_0 optionalExpression typeArguments methodName arguments org.aspectj.org.eclipse.jdt.core.dom.MethodInvocation  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  more efficient than just calling unsupportedIn2() to check\r\n  lazy init must be thread-safe for readers\r\n  treat Code as free\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","FileFinder":"find find0 org.aspectj.org.eclipse.jdt.internal.compiler.batch.FileFinder","SuperMethodInvocation":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty internalGetChildListProperty getNodeType0 clone0 subtreeMatch0 accept0 getQualifier isResolvedTypeInferredFromExpectedType setQualifier typeArguments getName setName arguments resolveMethodBinding memSize treeSize QUALIFIER_PROPERTY TYPE_ARGUMENTS_PROPERTY NAME_PROPERTY ARGUMENTS_PROPERTY PROPERTY_DESCRIPTORS_2_0 PROPERTY_DESCRIPTORS_3_0 optionalQualifier typeArguments methodName arguments org.aspectj.org.eclipse.jdt.core.dom.SuperMethodInvocation  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  more efficient than just calling unsupportedIn2() to check\r\n  lazy init must be thread-safe for readers\r\n  treat Code as free\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","CompletionOnJavadocMessageSend":"addCompletionFlags completeAnException completeInText completeBaseTypes completeFormalReference getCompletionFlags printExpression completionFlags separatorPosition org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnJavadocMessageSend  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.JavadocMessageSend#printExpression(int, java.lang.StringBuffer)\r\n\t */\r\n","SignatureImpl":"createToString toString toString toShortString toLongString getModifiers getName getDeclaringType getDeclaringTypeName fullTypeName stripPackageName shortTypeName addFullTypeNames addShortTypeNames addTypeArray setLookupClassLoader getLookupClassLoader extractString extractInt extractType extractStrings extractTypes setUseCache getUseCache get set get set array makeCache createToString toString toString toShortString toLongString getModifiers getName getDeclaringType getDeclaringTypeName fullTypeName stripPackageName shortTypeName addFullTypeNames addShortTypeNames addTypeArray setLookupClassLoader getLookupClassLoader extractString extractInt extractType extractStrings extractTypes setUseCache getUseCache get set get set array makeCache createToString toString toString toShortString toLongString getModifiers getName getDeclaringType getDeclaringTypeName fullTypeName stripPackageName shortTypeName addFullTypeNames addShortTypeNames addTypeArray setLookupClassLoader getLookupClassLoader extractString extractInt extractType extractStrings extractTypes setUseCache getUseCache get set get set array makeCache useCache modifiers name declaringTypeName declaringType stringCache stringRep lookupClassLoader SEP EMPTY_STRING_ARRAY EMPTY_CLASS_ARRAY INNER_SEP toStringCacheRef useCache modifiers name declaringTypeName declaringType stringCache stringRep lookupClassLoader SEP EMPTY_STRING_ARRAY EMPTY_CLASS_ARRAY INNER_SEP toStringCacheRef useCache modifiers name declaringTypeName declaringType stringCache stringRep lookupClassLoader SEP EMPTY_STRING_ARRAY EMPTY_CLASS_ARRAY INNER_SEP toStringCacheRef org.aspectj.runtime.reflect.SignatureImpl org.aspectj.runtime.reflect.SignatureImpl org.aspectj.runtime.reflect.SignatureImpl  lazy version\r\n  separate implementation so we don't need SoftReference to hold the field...\r\n  lazy version\r\n  separate implementation so we don't need SoftReference to hold the field...\r\n  lazy version\r\n  separate implementation so we don't need SoftReference to hold the field...\r\n /* Use a soft cache for the short, middle and long String representations */\r\n /*\r\n\t * Used for testing\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* Use a soft cache for the short, middle and long String representations */\r\n /*\r\n\t * Used for testing\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* Use a soft cache for the short, middle and long String representations */\r\n /*\r\n\t * Used for testing\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","ArrayType":"getBasicType getElementType getDimensions hashCode equals propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getComponentType setComponentType getElementType getDimensions memSize treeSize getBasicType getElementType getDimensions hashCode equals dimensions basic_type COMPONENT_TYPE_PROPERTY PROPERTY_DESCRIPTORS componentType dimensions basic_type org.aspectj.apache.bcel.generic.ArrayType org.aspectj.org.eclipse.jdt.core.dom.ArrayType org.aspectj.apache.bcel.generic.ArrayType  Basic type or reference\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  lazy init must be thread-safe for readers\r\n  always include this array type\r\n  Basic type or reference\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n","ThisExpression":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getQualifier setQualifier memSize treeSize QUALIFIER_PROPERTY PROPERTY_DESCRIPTORS optionalQualifier org.aspectj.org.eclipse.jdt.core.dom.ThisExpression  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  treat Operator as free\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","NestedTypeBinding":"addSyntheticArgument addSyntheticArgument addSyntheticArgumentAndField addSyntheticArgumentAndField computeSyntheticArgumentSlotSizes enclosingType getSyntheticArgument syntheticEnclosingInstances syntheticEnclosingInstanceTypes syntheticOuterLocalVariables updateInnerEmulationDependents getSyntheticArgument enclosingType enclosingInstances outerLocalVariables enclosingInstancesSlotSize outerLocalVariablesSlotSize org.aspectj.org.eclipse.jdt.internal.compiler.lookup.NestedTypeBinding  amount of slots used by synthetic enclosing instances\r\n  amount of slots used by synthetic outer local variables\r\n  already exists\r\n  must search backwards\r\n  System.out.println(\"Adding synth arg for local var: \" + new String(actualOuterLocalVariable.name) + \" to: \" + new String(this.readableName()));\r\n  already exists\r\n  System.out.println(\"Adding synth arg for enclosing type: \" + new String(enclosingType.readableName()) + \" to: \" + new String(this.readableName()));\r\n  insert enclosing instances first, followed by the outerLocals\r\n  shift by 1 to leave room for aload0==this\r\n  no more than 255 words of arguments\r\n  reset, outer local are not positionned yet, since will be appended to user arguments\r\n  do NOT position the outerlocal synthetic arg yet,  since will be appended to user arguments\r\n  is null if no outer local variables are known\r\n  is null if no enclosing instances are required\r\n  is null if no outer locals are required\r\n  is null if no enclosing instances are known\r\n  exact match\r\n  class S extends T { class N extends M {}} --> need to use S as a default enclosing instance for the super constructor call in N().\r\n /* Add a new synthetic argument for <actualOuterLocalVariable>.\r\n\t* Answer the new argument or the existing argument if one already existed.\r\n\t*/\r\n /* Add a new synthetic argument for <enclosingType>.\r\n\t* Answer the new argument or the existing argument if one already existed.\r\n\t*/\r\n /* Add a new synthetic argument and field for <actualOuterLocalVariable>.\r\n\t* Answer the new argument or the existing argument if one already existed.\r\n\t*/\r\n /* Add a new synthetic argument and field for <enclosingType>.\r\n\t* Answer the new argument or the existing argument if one already existed.\r\n\t*/\r\n /* Answer the receiver's enclosing type... null if the receiver is a top level type.\r\n\t*/\r\n /* Answer the synthetic argument for <actualOuterLocalVariable> or null if one does not exist.\r\n\t*/\r\n /*\r\n\t * Trigger the dependency mechanism forcing the innerclass emulation\r\n\t * to be propagated to all dependent source types.\r\n\t */\r\n /* Answer the synthetic argument for <targetEnclosingType> or null if one does not exist.\r\n\t*/\r\n","TagElement":"propertyDescriptors internalStructuralPropertiesForType internalGetSetObjectProperty internalGetChildListProperty getNodeType0 clone0 subtreeMatch0 accept0 getTagName setTagName fragments isNested memSize treeSize TAG_NAME_PROPERTY FRAGMENTS_PROPERTY PROPERTY_DESCRIPTORS TAG_AUTHOR TAG_CODE TAG_DEPRECATED TAG_DOCROOT TAG_EXCEPTION TAG_INHERITDOC TAG_LINK TAG_LINKPLAIN TAG_LITERAL TAG_PARAM TAG_RETURN TAG_SEE TAG_SERIAL TAG_SERIALDATA TAG_SERIALFIELD TAG_SINCE TAG_THROWS TAG_VALUE TAG_VERSION optionalTagName fragments org.aspectj.org.eclipse.jdt.core.dom.TagElement  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","ArrayTypeReference":"dimensions getParameterizedTypeName getTypeBinding printExpression traverse traverse dimensions originalSourceEnd org.aspectj.org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","PerThisOrTargetPointcutVisitor":"getPerTypePointcut visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit getPerTypePointcut visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit MAYBE m_isTarget m_fromAspectType MAYBE m_isTarget m_fromAspectType org.aspectj.weaver.patterns.PerThisOrTargetPointcutVisitor org.aspectj.weaver.patterns.PerThisOrTargetPointcutVisitor  pertarget(.. && !within(Foo)) => true as well !\r\n  pertarget(.. && !withincode(* Foo.do())) => true as well !\r\n  FIXME AV - can we optimize ? perthis(@withincode(Foo)) = hasmethod(..)\r\n  TODO AV - can we do better ?\r\n  see for example pr114054\r\n  perthis(@target(Foo))\r\n  perthis(target(Foo)) => maybe\r\n  the parser here..\r\n  TODO AV - we do like a deep copy by parsing it again.. quite dirty, would need a clean deep copy\r\n  TODO AV - see dirty replace from $ to . here as inner classes are with $ instead (#108488)\r\n  this should not happen since concretize will fails but just in case..\r\n  quiet unexpected since a KindedPointcut but do as if...\r\n  while I use back parsing for check purpose.\r\n  pertarget(.. && !within(Foo)) => true as well !\r\n  pertarget(.. && !withincode(* Foo.do())) => true as well !\r\n  FIXME AV - can we optimize ? perthis(@withincode(Foo)) = hasmethod(..)\r\n  TODO AV - can we do better ?\r\n  see for example pr114054\r\n  perthis(@target(Foo))\r\n  perthis(target(Foo)) => maybe\r\n  the parser here..\r\n  TODO AV - we do like a deep copy by parsing it again.. quite dirty, would need a clean deep copy\r\n  TODO AV - see dirty replace from $ to . here as inner classes are with $ instead (#108488)\r\n  this should not happen since concretize will fails but just in case..\r\n  quiet unexpected since a KindedPointcut but do as if...\r\n  while I use back parsing for check purpose.\r\n","DeclareErrorDeclaration":"clone0 subtreeMatch0 accept0 internalModifiersProperty internalModifiers2Property internalJavadocProperty propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getPointcut setPointcut getMessage setMessage JAVADOC_PROPERTY POINTCUT_PROPERTY MESSAGE_PROPERTY PROPERTY_DESCRIPTORS_2_0 PROPERTY_DESCRIPTORS_3_0 pointcut message org.aspectj.org.eclipse.jdt.core.dom.DeclareErrorDeclaration  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  allow default implementation to flag the error\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t * \r\n\t * There are no modifiers declared for DeclareErrorDeclaration - \r\n\t * therefore we don't do anything with this\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t * \r\n\t * There are no modifiers declared for DeclareErrorDeclaration - \r\n\t * therefore we don't do anything with this\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","CharLiteral":"computeConstant computeValue generateCode literalType traverse value org.aspectj.org.eclipse.jdt.internal.compiler.ast.CharLiteral  octal (well-formed: ended by a ' )\r\n","ArrayQualifiedTypeReference":"dimensions getParameterizedTypeName getTypeBinding printExpression traverse traverse dimensions org.aspectj.org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","ChangeCollector":"addAffectedChildren addChange addChange addChange addChange addChange addTypeAddition addTypeChange addTypeRemoval getAllTypesFromElement getAllTypesFromHierarchy hasSuperTypeChange hasVisibilityChange needsRefresh toString changes hierarchy org.aspectj.org.eclipse.jdt.internal.core.hierarchy.ChangeCollector  REMOVED then ADDED\r\n  ADDED then REMOVED\r\n  REMOVED then ADDED\r\n  ADDED then REMOVED\r\n  check whether the type addition affects the hierarchy\r\n  REMOVED then ADDED\r\n  check whether the type change affects the hierarchy\r\n  CHANGED then CHANGED\r\n  super types and visibility are back to the ones in the existing hierarchy\r\n  check whether the type removal affects the hierarchy\r\n  ADDED then REMOVED\r\n  CHANGED then REMOVED\r\n  check super class\r\n  check super interfaces\r\n /*\r\n\t * A table from ITypes to TypeDeltas\r\n\t */\r\n /*\r\n\t * Adds the children of the given delta to the list of changes.\r\n\t */\r\n /*\r\n\t * Adds the given delta on a compilation unit to the list of changes.\r\n\t */\r\n /*\r\n\t * Adds a change for the given member (a method, a field or an initializer) and the types it defines.\r\n\t */\r\n /*\r\n\t * Adds a change for the given type and the types it defines.\r\n\t */\r\n /*\r\n\t * Returns all types defined in the given element excluding the given element.\r\n\t */\r\n /*\r\n\t * Returns all types in the existing hierarchy that have the given element as a parent.\r\n\t */\r\n /*\r\n\t * Whether the hierarchy needs refresh according to the changes collected so far.\r\n\t */\r\n /*\r\n * Collects changes (reported through fine-grained deltas) that can affect a type hierarchy.\r\n */\r\n","RecoveredStatement":"parseTree sourceEnd toString updatedStatement updateParseTree updateSourceEndIfNecessary statement org.aspectj.org.eclipse.jdt.internal.compiler.parser.RecoveredStatement  $NON-NLS-1$\r\n /* \r\n * Answer the associated parsed structure\r\n */\r\n /*\r\n * Answer the very source end of the corresponding parse node\r\n */\r\n /*\r\n * Update the declarationSourceEnd of the corresponding parse node\r\n */\r\n","SwitchFlowContext":"breakLabel individualToString isBreakable recordBreakFrom breakLabel initsOnBreak org.aspectj.org.eclipse.jdt.internal.compiler.flow.SwitchFlowContext  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","ClasspathAccessRule":"toProblemId getPattern getKind org.aspectj.org.eclipse.jdt.internal.core.ClasspathAccessRule","AfterThrowingAdviceDeclaration":"propertyDescriptors internalGetSetChildProperty getThrowing setThrowing clone0 treeSize accept0 throwingJAVADOC_PROPERTY throwingPARAMETERS_PROPERTY throwingPOINTCUT_PROPERTY throwingTHROWN_EXCEPTIONS_PROPERTY throwingBODY_PROPERTY throwingPROPERTY_DESCRIPTORS_2_0 throwingPROPERTY_DESCRIPTORS_3_0 throwingTHROWING_PROPERTY throwing org.aspectj.org.eclipse.jdt.core.dom.AfterThrowingAdviceDeclaration  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  visit children in normal left to right reading order\r\n","InsideSubRoutineFlowContext":"individualToString initsOnReturn isNonReturningContext recordReturnFrom subroutine initsOnReturn org.aspectj.org.eclipse.jdt.internal.compiler.flow.InsideSubRoutineFlowContext  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","DoubleConstant":"fromValue byteValue charValue doubleValue floatValue intValue longValue shortValue stringValue toString typeID value org.aspectj.org.eclipse.jdt.internal.compiler.impl.DoubleConstant  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","AbortFormatting":"nestedException serialVersionUID org.aspectj.org.eclipse.jdt.internal.formatter.AbortFormatting  backward compatible\r\n","HierarchyType":"getFileName getModifiers isBinaryType typeHandle name modifiers superclassName superInterfaceNames org.aspectj.org.eclipse.jdt.internal.core.hierarchy.HierarchyType","ClassGen":"unpackAnnotations getJavaClass addInterface removeInterface getMajor setMajor setMinor getMinor addAttribute addAnnotation addMethod addEmptyConstructor addField containsField containsField containsMethod removeAttribute removeAnnotation removeMethod replaceMethod replaceField removeField getClassName getSuperclassName getFileName setClassName setSuperclassName getMethods setMethods setFields setMethodAt getMethodAt getInterfaceNames getInterfaces getFields getAttributes getAnnotations getConstantPool setConstantPool setClassNameIndex setSuperclassNameIndex getSuperclassNameIndex getClassNameIndex clone isAnnotation isEnum getSUID compare compare compare hasAttribute getAttribute unpackAnnotations getJavaClass addInterface removeInterface getMajor setMajor setMinor getMinor addAttribute addAnnotation addMethod addEmptyConstructor addField containsField containsField containsMethod removeAttribute removeAnnotation removeMethod replaceMethod replaceField removeField getClassName getSuperclassName getFileName setClassName setSuperclassName getMethods setMethods setFields setMethodAt getMethodAt getInterfaceNames getInterfaces getFields getAttributes getAnnotations getConstantPool setConstantPool setClassNameIndex setSuperclassNameIndex getSuperclassNameIndex getClassNameIndex clone isAnnotation isEnum getSUID compare compare compare hasAttribute getAttribute class_name super_class_name file_name class_name_index superclass_name_index major minor cp field_vec method_vec attributesList interface_vec annotation_vec class_name super_class_name file_name class_name_index superclass_name_index major minor cp field_vec method_vec attributesList interface_vec annotation_vec org.aspectj.apache.bcel.generic.ClassGen org.aspectj.apache.bcel.generic.ClassGen  Put everything needed by default into the constant pool and the vectors\r\n  J5TODO: Could make unpacking lazy, done on first reference\r\n  Dont add attributes for annotations as those will have been unpacked\r\n  Attribute[] attrs = attributes.getAttributes();\r\n  OPTIMIZE sort out this mangling of arrays and collections\r\n  TODO: Sometime later, trash any attributes called 'RuntimeVisibleAnnotations' or 'RuntimeInvisibleAnnotations'\r\n  Must be last since the above calls may still add something to it\r\n  Push `this'\r\n  J5TODO: Should we make calling unpackAnnotations() lazy and put it in here?\r\n  1. classname\r\n  2. classmodifiers: ACC_PUBLIC, ACC_FINAL, ACC_INTERFACE, and ACC_ABSTRACT\r\n  if an interface then abstract is only set if it has methods\r\n  3. ordered list of interfaces\r\n  ACC_TRANSIENT)\r\n  now used for methods\r\n  3. The descriptor of the method, ()V.\r\n  ACC_NATIVE, ACC_ABSTRACT and ACC_STRICT\r\n  <init>\r\n  6. sorted non-private constructors\r\n  7. sorted non-private methods\r\n  use the bytes we have\r\n  (long)(sha[6]&0xff) << 48 | (long)(sha[7]&0xff) << 56);\r\n  can ignore the name...\r\n  Put everything needed by default into the constant pool and the vectors\r\n  J5TODO: Could make unpacking lazy, done on first reference\r\n  Dont add attributes for annotations as those will have been unpacked\r\n  Attribute[] attrs = attributes.getAttributes();\r\n  OPTIMIZE sort out this mangling of arrays and collections\r\n  TODO: Sometime later, trash any attributes called 'RuntimeVisibleAnnotations' or 'RuntimeInvisibleAnnotations'\r\n  Must be last since the above calls may still add something to it\r\n  Push `this'\r\n  J5TODO: Should we make calling unpackAnnotations() lazy and put it in here?\r\n  1. classname\r\n  2. classmodifiers: ACC_PUBLIC, ACC_FINAL, ACC_INTERFACE, and ACC_ABSTRACT\r\n  if an interface then abstract is only set if it has methods\r\n  3. ordered list of interfaces\r\n  ACC_TRANSIENT)\r\n  now used for methods\r\n  3. The descriptor of the method, ()V.\r\n  ACC_NATIVE, ACC_ABSTRACT and ACC_STRICT\r\n  <init>\r\n  6. sorted non-private constructors\r\n  7. sorted non-private methods\r\n  use the bytes we have\r\n  (long)(sha[6]&0xff) << 48 | (long)(sha[7]&0xff) << 56);\r\n  can ignore the name...\r\n /*AnnotationGen*/\r\n /*AnnotationGen*/\r\n","ReconcileContext":"getAST3 getASTLevel isResolvingBindings getDelta getProblems getWorkingCopy resetAST putProblems operation workingCopy org.aspectj.org.eclipse.jdt.core.compiler.ReconcileContext  create AST (optionally resolving bindings)\r\n","ArrayReferenceType":"getDeclaredFields getDeclaredMethods getDeclaredInterfaces getAnnotationOfType getAnnotations getAnnotationTypes getDeclaredPointcuts hasAnnotation getSuperclass isAssignableFrom isAssignableFrom isCoerceableFrom getModifiers getComponentType getResolvedComponentType getSourceContext getTypeVariables isAnnotation isAnonymous isAnnotationStyleAspect isAspect isPrimitiveType isSimpleType isRawType isGenericType isParameterizedType isTypeVariableReference isGenericWildcard isEnum isNested isClass canAnnotationTargetType getAnnotationTargetKinds isAnnotationWithRuntimeRetention getDeclaredFields getDeclaredMethods getDeclaredInterfaces getAnnotationOfType getAnnotations getAnnotationTypes getDeclaredPointcuts hasAnnotation getSuperclass isAssignableFrom isAssignableFrom isCoerceableFrom getModifiers getComponentType getResolvedComponentType getSourceContext getTypeVariables isAnnotation isAnonymous isAnnotationStyleAspect isAspect isPrimitiveType isSimpleType isRawType isGenericType isParameterizedType isTypeVariableReference isGenericWildcard isEnum isNested isClass canAnnotationTargetType getAnnotationTargetKinds isAnnotationWithRuntimeRetention componentType componentType org.aspectj.weaver.ArrayReferenceType org.aspectj.weaver.ArrayReferenceType  return new ResolvedMember[]{cloneMethod};\r\n  return new ResolvedMember[]{cloneMethod};\r\n /* *******************************************************************\r\n * Copyright (c) 2008 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2008 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement     initial implementation \r\n * ******************************************************************/\r\n","InnerClasses":"accept dump getInnerClasses setInnerClasses toString copy accept dump getInnerClasses setInnerClasses toString copy inner_classes number_of_classes inner_classes number_of_classes org.aspectj.apache.bcel.classfile.InnerClasses org.aspectj.apache.bcel.classfile.InnerClasses","WorkQueue":"add addAll clear finished isCompiled isWaiting toString needsCompileList compiledList org.aspectj.org.eclipse.jdt.internal.core.builder.WorkQueue  $NON-NLS-1$\r\n","SingleNameReference":"analyseAssignment analyseCode analyseCode checkFieldAccess computeConversion generateAssignment generateCode generateCompoundAssignment generateCompoundAssignment generatePostIncrement generateReceiver genericTypeArguments localVariableBinding manageEnclosingInstanceAccessIfNecessary manageSyntheticAccessIfNecessary nullStatus postConversionType printExpression reportError resolveType traverse traverse unboundReferenceErrorName READ WRITE token syntheticAccessors genericCast org.aspectj.org.eclipse.jdt.internal.compiler.ast.SingleNameReference  [0]=read accessor [1]=write accessor\r\n  reading a field\r\n  reading a local variable\r\n  check if assigning a final blank field\r\n  check the variable part is initialized if blank final\r\n  compound assignment extra work\r\n  assigning to a field\r\n  enum constant body\r\n  check if accessing enum static field in initializer\r\n  inside a context where allowed\r\n  check if assigning a final field\r\n  assigning to a local variable\r\n  for local variable debug attributes\r\n  tolerate assignment to final local in unreachable code (45674)\r\n  reading a field\r\n  enum constant body\r\n  check if accessing enum static field in initializer\r\n  check if reading a final blank field\r\n  reading a local variable\r\n  clear bits\r\n  must check for the static status....\r\n  AspectJ Extension - new guard (ajc_aroundClosure does this) ??\r\n  unboxing: checkcast before conversion\r\n  extra cast needed if method return type is type variable\r\n  set the generic cast after the fact, once the type expectation is fully known (no need for strict cast)\r\n  i = i + value, then use the variable on the right hand side, since it has the correct implicit conversion\r\n  only commutative operations\r\n  exclude non constant expressions, since could have side-effect\r\n  exclude string concatenation which would occur backwards\r\n  i = value + i, then use the variable on the right hand side, since it has the correct implicit conversion\r\n  optimizing assignment like: i = i + 1 or i = 1 + i\r\n  assigning to a field\r\n  need a receiver?\r\n  no need for generic cast as value got dupped\r\n  assigning to a local variable\r\n  implicit conversion\r\n  assigning an unused local to a constant value = no actual assignment is necessary\r\n  arrayLoc = null\r\n  arrayLoc = (type[])null\r\n  26903, need extra cast to store null in array local var\r\n  normal local assignment (since cannot store in outer local which are final locations)\r\n  for local variable debug attributes\r\n  implicit conversion\r\n  reading a field\r\n  directly use inlined value for constant fields\r\n  if no valueRequired, optimize out entire gen\r\n  managing enclosing instance access\r\n  managing private access\r\n  if no valueRequired, still need possible side-effects of <clinit> invocation, if field belongs to different class\r\n  if no valueRequired, optimize out entire gen\r\n  managing private access\r\n  reading a local\r\n  if no valueRequired, optimize out entire gen\r\n  regular local variable read\r\n  outer local can be reached either through a synthetic arg or a synthetic field\r\n  outer local?\r\n  type\r\n  required cast must occur even if no value is required\r\n  conversion only generated if unboxing\r\n  assigning to a field\r\n  assigning to a local variable (cannot assign to outer local)\r\n  only for integral types\r\n  16 bits value\r\n  using incr bytecode if possible\r\n  perform the actual compound operation\r\n  For example: o = o + \"\";   no need for generic cast on previous #getfield since using Object string buffer methods.\r\n  promote the array reference to the suitable operation type\r\n  prefix operation\r\n  generate the increment value (will by itself  be promoted to the operation value)\r\n  perform the operation\r\n  cast the value back to the array reference type\r\n  assigning to a field\r\n  no need for generic cast as value got dupped\r\n  assigning to a local variable\r\n  store the result back into the variable\r\n  assigning to a field\r\n  Stack:  [owner][old field value]  ---> [old field value][owner][old field value]\r\n  no need for generic cast\r\n  assigning to a local variable\r\n  using incr bytecode if possible\r\n  reading a field\r\n  reading a local variable\r\n  If inlinable field, forget the access emulation, the code gen will directly target it\r\n  If inlinable field, forget the access emulation, the code gen will directly target it\r\n  AspectJ Extension\r\n  private access\r\n  implicit protected access\r\n  AspectJ Extension\r\n  AspectJ Extension\r\n  array.length\r\n  no change for Object fields\r\n  field was visible in inter-type scope and is not on actualReceiverType, don't muck about with it\r\n  AspectJ Extension for inter-type scopes\r\n  and not from Object or implicit static field access.\r\n  constant expression cannot be null\r\n  reading a field\r\n  reading a local variable\r\n  never get there\r\n  =====error cases=======\r\n  =========only variable============\r\n  ====both variable and type============\r\n  clear bits\r\n  perform capture conversion if read access\r\n  a field\r\n  perform capture conversion if read access\r\n  clear bits\r\n  ========only type==============\r\n  deprecated test\r\n  error scenarii\r\n /* avoid double diagnostic */\r\n /*only exact match*/\r\n /* Even though the value may not be required, we force it to be produced, and discard it later\r\n\t\t\t\t\t\ton if it was actually not necessary, so as to provide the same behavior as JDK1.2beta3.\t*/\r\n /*only exact match*/\r\n /*\r\n\t * Regular API for compound assignment, relies on the fact that there is only one reference to the\r\n\t * variable, which carries both synthetic read/write accessors.\r\n\t * The APIs with an extra argument is used whenever there are two references to the same variable which\r\n\t * are optimized in one access: e.g \"a = a + 1\" optimized into \"a++\".\r\n\t */\r\n /*only exact match*/\r\n /*\r\n\t * The APIs with an extra argument is used whenever there are two references to the same variable which\r\n\t * are optimized in one access: e.g \"a = a + 1\" optimized into \"a++\".\r\n\t */\r\n /*only exact match*/\r\n","CompilationUnitResolver":"add accept beginToCompile createBinding convert getCompilerOptions getHandlingPolicy getRequestor initializeParser process handleInternalException handleInternalException parse parse resolve resolve resolve removeUnresolvedBindings removeUnresolvedBindings resolve reportBinding resolve resolve resolve worked list length requestedSources requestedKeys bindingTables hasCompilationAborted monitor bindings org.aspectj.org.eclipse.jdt.core.dom.CompilationUnitResolver  (case of processing a source that was not known by beginToCompile (e.g. when asking to createBinding))\r\n  walks the source units\r\n  no longer hold onto the unit\r\n  diet parsing for large collection of units\r\n  initial type binding creation\r\n  walk the binding keys\r\n  Skipping it will speed up performance because the call will open jars. (theodora)\r\n  package binding or base type binding\r\n  binary binding\r\n  binding resolution\r\n  $NON-NLS-1$\r\n  new code:\r\n  End AspectJ Extension\r\n  new code:\r\n  End AspectJ Extension\r\n  stop if there are some errors\r\n  passes the initial set of files to the batch oracle (to avoid finding more than once the same units when case insensitive match)\r\n  don't resolve a second time the same unit (this would create the same binding twice)\r\n  $NON-NLS-1$\r\n  if initial diet parse did not work, no need to dig into method bodies.\r\n  real parse of the method....\r\n  convert AST\r\n  accept AST\r\n  if initial diet parse did not work, no need to dig into method bodies.\r\n  real parse of the method....\r\n  the position is out of range. There is no need to search for a node.\r\n  project doesn't exist -> simple parse without resolving\r\n  don't hold a reference to this external object\r\n  don't hold a reference to this external object\r\n  1 for beginToCompile, 1 for resolve\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$   don't hold a reference to this external object\r\n  don't hold a reference to this external object\r\n  no existing compilation unit declaration\r\n  method verification\r\n  analyze code\r\n  generate code\r\n  see https:  $NON-NLS-1$   $NON-NLS-1$   a map from ICompilationUnit to int[] (positions in elements)\r\n  a map from String (binding key) to int (position in elements)\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  binary member\r\n  source member\r\n  TODO (jerome) optimize to visit the AST only once\r\n  $NON-NLS-1$\r\n  temporararily connect ourselves to the ASTResolver - must disconnect when done\r\n  rethrow\r\n  rethrow\r\n  disconnect ourselves from ast requestor\r\n  cleanup remaining units\r\n  cleanup compilation unit result\r\n  this.process(...) is optimized to not process already known units\r\n  requested AST\r\n  convert AST\r\n  new code:\r\n  End AspectJ Extension\r\n  new code:\r\n  End AspectJ Extension\r\n  pass it to requestor\r\n  requested binding\r\n  remove at the end so that we don't resolve twice if a source and a key for the same file name have been requested\r\n  release reference to processed unit declaration\r\n  process all units (some more could be injected in the loop by the lookup environment)\r\n  remaining binding keys\r\n  pass it to requestor\r\n  rethrow\r\n  rethrow\r\n  initial type binding creation\r\n  binding resolution\r\n  will request a full parse\r\n  process all units (some more could be injected in the loop by the lookup environment)\r\n  no-op if method bodies have already been parsed\r\n  fault in fields & methods\r\n  verify inherited methods\r\n  type checking\r\n  flow analysis\r\n  code generation\r\n  release reference to processed unit declaration\r\n /* A list of int */\r\n /*\r\n\t * The sources that were requested.\r\n\t * Map from file name (char[]) to ICompilationUnit.\r\n\t */\r\n /*\r\n\t * The binding keys that were requested.\r\n\t * Map from file name (char[]) to BindingKey (or ArrayList if multiple keys in the same file).\r\n\t */\r\n /*\r\n\t * Add additional source types\r\n\t */\r\n /*no owner*/\r\n /*\r\n\t *  Low-level API performing the actual compilation\r\n\t */\r\n /*\r\n\t * Answer the component to which will be handed back compilation results from the compiler\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.Compiler#initializeParser()\r\n\t */\r\n /*\r\n\t * Compiler crash recovery in case of unexpected runtime exceptions\r\n\t */\r\n /*\r\n\t * Compiler recovery in case of internal AbortCompilation event\r\n\t */\r\n /*don't resolve binding*/\r\n /*no owner needed*/\r\n /*no binding table needed*/\r\n /* flags */\r\n /*\r\n\t * When unit result is about to be accepted, removed back pointers\r\n\t * to unresolved bindings\r\n\t */\r\n /* no existing compilation unit declaration*/\r\n /*no node searcher*/\r\n /*\r\n\t * Internal API used to resolve a given compilation unit. Can run a subset of the compilation process\r\n\t */\r\n /*no node searcher*/\r\n /*\r\n\t * Internal API used to resolve a given compilation unit. Can run a subset of the compilation process\r\n\t */\r\n","CodeAttribute":"getAttributes getAttributesCount getBytecodes getCodeLength getExceptionTable getExceptionTableLength getLineNumberAttribute getLocalVariableAttribute getMaxLocals getMaxStack traverse NO_EXCEPTION_TABLE attributes attributesCount bytecodes classFileBytes codeLength codeOffset constantPool exceptionTableEntries exceptionTableLength lineNumberAttribute localVariableAttribute maxLocals maxStack org.aspectj.org.eclipse.jdt.internal.core.util.CodeAttribute  faster than % 4\r\n","IRequestor":"acceptClassFiles acceptProblem org.aspectj.org.eclipse.jdt.internal.eval.IRequestor","ICodeFormatter":"format org.aspectj.org.eclipse.jdt.core.ICodeFormatter","CharArrayCache":"clear containsKey get hashCodeChar putIfAbsent put rehash remove returnKeyFor size toString keyTable valueTable elementSize threshold org.aspectj.org.eclipse.jdt.internal.compiler.codegen.CharArrayCache  to avoid using Enumerations, walk the individual tables skipping nulls\r\n  number of elements in the table\r\n  faster than float operation\r\n  faster than modulo\r\n  faster than modulo\r\n  number of characters skipped\r\n  faster than modulo\r\n  assumes the threshold is never equal to the size of the table\r\n  negative when added (value is assumed to be > 0)\r\n  faster than modulo\r\n  assumes the threshold is never equal to the size of the table\r\n  faster than modulo\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","PointcutParser":"getAllSupportedPointcutPrimitives getPointcutParserSupportingAllPrimitivesAndUsingContextClassloaderForResolution getPointcutParserSupportingSpecifiedPrimitivesAndUsingContextClassloaderForResolution getPointcutParserSupportingAllPrimitivesAndUsingSpecifiedClassloaderForResolution getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution setWorld setClassLoader setLintProperties setLintProperties registerPointcutDesignatorHandler createPointcutParameter parsePointcutExpression parsePointcutExpression resolvePointcutExpression concretizePointcutExpression parseTypePattern getWorld getSupportedPrimitives setCustomMessageHandler buildResolutionScope toUnresolvedType validateAgainstSupportedPrimitives validateKindedPointcut buildUserMessageFromParserException getAllSupportedPointcutPrimitives getPointcutParserSupportingAllPrimitivesAndUsingContextClassloaderForResolution getPointcutParserSupportingSpecifiedPrimitivesAndUsingContextClassloaderForResolution getPointcutParserSupportingAllPrimitivesAndUsingSpecifiedClassloaderForResolution getPointcutParserSupportingSpecifiedPrimitivesAndUsingSpecifiedClassLoaderForResolution setWorld setClassLoader setLintProperties setLintProperties registerPointcutDesignatorHandler createPointcutParameter parsePointcutExpression parsePointcutExpression resolvePointcutExpression concretizePointcutExpression parseTypePattern getWorld getSupportedPrimitives setCustomMessageHandler buildResolutionScope toUnresolvedType validateAgainstSupportedPrimitives validateKindedPointcut buildUserMessageFromParserException world classLoaderReference supportedPrimitives pointcutDesignators world classLoaderReference supportedPrimitives pointcutDesignators org.aspectj.weaver.tools.PointcutParser org.aspectj.weaver.tools.PointcutParser  again, because we have now followed any ref'd pcuts\r\n  always ok...\r\n  deliberate fall-through\r\n  again, because we have now followed any ref'd pcuts\r\n  always ok...\r\n  deliberate fall-through\r\n /*<PointcutPrimitives>*/\r\n /* for testing */\r\n /* for testing */\r\n /*<PointcutPrimitives>*/\r\n /* for testing */\r\n /* for testing */\r\n","WeavingClassLoader":"getAspectURLs getAspectURLs org.aspectj.weaver.tools.WeavingClassLoader org.aspectj.weaver.tools.WeavingClassLoader /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Matthew Webster, Adrian Colyer, \r\n *     Martin Lippert     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Matthew Webster, Adrian Colyer, \r\n *     Martin Lippert     initial implementation \r\n * ******************************************************************/\r\n","AsmHierarchyBuilder":"buildStructureForCompilationUnit internalBuild findOrCreateChildSourceFolder genAddToNode visit endVisit visit endVisit visit endVisit genSourceSignature visit addUsesPointcutRelationsForNode getPointcutDeclaration genNamedPointcuts addAllNamed genSourceSignature genBytecodeInfo endVisit visit endVisit genSourceSignature visit endVisit generateJavadocComment genSourceSignature visit endVisit genSourceSignature visit makeLocation getStartLine getEndLine getEndLine getEndLine getEndLine formatter shouldAddUsesPointcut buildConfig stack currCompilationResult filename lineseps inInitializer org.aspectj.ajdt.internal.core.builder.AsmHierarchyBuilder  until we do it in the same way as other relationships.\r\n  clear reference since this structure is\r\n  anchored in static\r\n  -- create node to add\r\n  AMC - use the source start and end from the compilation unit decl\r\n  -- remove duplicates before adding (XXX use them instead?)\r\n  -- add and traverse\r\n  -- update file map (XXX do this before traversal?)\r\n  Check if already there\r\n  note packages themselves have no source location\r\n  Creating the char[][] needed for ImportReference\r\n  ProgramElement\r\n  Add Element to Imports of Current Class\r\n  @AJ support\r\n  @AJ support\r\n  ??? share impl with visit(TypeDeclaration, ..) ?\r\n  use the number after the $\r\n  Create a name something like 'new Runnable() {..}'\r\n  @AJ support\r\n  when creating the structure model\r\n  will set the\r\n  name\r\n  and instead get \"void\".\r\n  TODO: add return type test\r\n  Append Type Parameters if any\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  bad type name\r\n  }\r\n  could set static here, but for\r\n  could set static here, but for\r\n  private\r\n  set it here instead\r\n  create Source signature for import\r\n  value\r\n  boolean completed = false;\r\n  found *  preceeding a javadoc comment in this block\r\n  looking for '  the \",\" or \";\" has to be\r\n  the sourceSignature\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  a little weird but does the job\r\n  bad type name\r\n  Fix to enable us to anchor things from ctor nodes\r\n  Append Type Parameters if any\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  new ArrayList());\r\n  AMC - different strategies based on node kind\r\n  found a valid end line for this node...\r\n  ??? handle non-existant files\r\n  (TypeDeclaration)n);\r\n  hierarchy!!\r\n  hierarchy!!\r\n  hierarchy!!\r\n  hierarchy!!\r\n  hierarchy!!\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved.\r\n * This program and the accompanying materials are made available\r\n * under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *     PARC     initial implementation\r\n *     Mik Kersten\trevisions, added additional relationships\r\n *     Alexandre Vasseur        support for @AJ style\r\n * ******************************************************************/\r\n","CommentFormatterUtil":"evaluateFormatterEdit format2 createDocument log org.aspectj.org.eclipse.jdt.internal.formatter.comment.CommentFormatterUtil  bug in the formatter\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$  $NON-NLS-1$\r\n  deleted positions: set to end of remove\r\n  $NON-NLS-1$  $NON-NLS-1$\r\n","IHtmlTagDelimiters":"HTML_CLOSE_PREFIX HTML_TAG_POSTFIX HTML_TAG_PREFIX org.aspectj.org.eclipse.jdt.internal.formatter.comment.IHtmlTagDelimiters  $NON-NLS-1$\r\n","InterTypeFieldDeclarationImpl":"getName getType getGenericType toString getName getType getGenericType toString name type genericType name type genericType org.aspectj.internal.lang.reflect.InterTypeFieldDeclarationImpl org.aspectj.internal.lang.reflect.InterTypeFieldDeclarationImpl /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeFieldDeclaration#getName()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeFieldDeclaration#getType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeFieldDeclaration#getGenericType()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeFieldDeclaration#getName()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeFieldDeclaration#getType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeFieldDeclaration#getGenericType()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","InterTypeMethodDeclarationImpl":"getName getReturnType getGenericReturnType getParameterTypes getGenericParameterTypes getTypeParameters getExceptionTypes toString getName getReturnType getGenericReturnType getParameterTypes getGenericParameterTypes getTypeParameters getExceptionTypes toString name baseMethod parameterAdjustmentFactor parameterTypes genericParameterTypes returnType genericReturnType exceptionTypes name baseMethod parameterAdjustmentFactor parameterTypes genericParameterTypes returnType genericReturnType exceptionTypes org.aspectj.internal.lang.reflect.InterTypeMethodDeclarationImpl org.aspectj.internal.lang.reflect.InterTypeMethodDeclarationImpl  no of fake params at start of baseMethod\r\n  no of fake params at start of baseMethod\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeMethodDeclaration#getName()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeMethodDeclaration#getReturnType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeMethodDeclaration#getGenericReturnType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeMethodDeclaration#getParameters()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeMethodDeclaration#getGenericParameters()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeMethodDeclaration#getTypeParameters()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeMethodDeclaration#getName()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeMethodDeclaration#getReturnType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeMethodDeclaration#getGenericReturnType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeMethodDeclaration#getParameters()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeMethodDeclaration#getGenericParameters()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeMethodDeclaration#getTypeParameters()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","AbstractStateListener":"detectedClassChangeInThisDir aboutToCompareClasspaths pathChangeDetected detectedAspectDeleted buildSuccessful recordDecision recordInformation org.aspectj.ajdt.internal.core.builder.AbstractStateListener","NewParentTypeMunger":"write getNewParent equals hashCode write getNewParent equals hashCode newParent hashCode newParent hashCode org.aspectj.weaver.NewParentTypeMunger org.aspectj.weaver.NewParentTypeMunger /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","StatefulNameEnvironment":"addAllPackageNames cleanup findType findType findType isPackage classesFromName inflatedClassFilesCache packageNames state baseEnvironment org.aspectj.ajdt.internal.core.builder.StatefulNameEnvironment  import java.util.HashMap;\r\n  pr133532 - ask the state for the type first\r\n  !!! seems to match FileSystem behavior\r\n  see above...\r\n  System.out.println(\"from cache: \" + name);\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","MethodInfoWithAnnotations":"getAnnotations initialize reset toStringContent annotations org.aspectj.org.eclipse.jdt.internal.compiler.classfmt.MethodInfoWithAnnotations","InterTypeDeclarationImpl":"getDeclaringType getTargetType getModifiers getDeclaringType getTargetType getModifiers declaringType targetTypeName targetType modifiers declaringType targetTypeName targetType modifiers org.aspectj.internal.lang.reflect.InterTypeDeclarationImpl org.aspectj.internal.lang.reflect.InterTypeDeclarationImpl /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeDeclaration#getDeclaringType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeDeclaration#getTargetType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeDeclaration#getModifiers()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeDeclaration#getDeclaringType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeDeclaration#getTargetType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeDeclaration#getModifiers()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","ReferenceCollection":"addDependencies includes includes includes internQualifiedNames internQualifiedNames internSimpleNames internSimpleNames qualifiedNameReferences simpleNameReferences WellKnownQualifiedNames WellKnownSimpleNames EmptyQualifiedNames EmptySimpleNames MaxQualifiedNames InternedQualifiedNames MaxSimpleNames InternedSimpleNames org.aspectj.org.eclipse.jdt.internal.core.builder.ReferenceCollection  contains no simple names as in just 'a' which is kept in simpleNameReferences instead\r\n  AspectJ Extension - raised visibility\r\n  but could always take 'p1.p2.p3.X' and make all qualified names 'p1' 'p1.p2' 'p1.p2.p3' 'p1.p2.p3.X', then intern\r\n  qualifiedTypeName is a well known name\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  if either collection of names is null, it means it contained a well known name so we know it already has a match\r\n  AspectJ Extension - raised visibility\r\n  default package\r\n  NOTE: These collections are sorted by length\r\n  each array contains qualified char[][], one for size 2, 3, 4, 5, 6, 7 & the rest\r\n  each array contains simple char[], one for size 1 to 29 & the rest\r\n  AspectJ Extension\r\n  all remaining well known names are shorter\r\n  InternedQualifiedNames[6] is for size 7\r\n  AspectJ Extension\r\n  AspectJ Extension\r\n  all remaining well known names are shorter\r\n  InternedSimpleNames[29] is for size 29\r\n  AspectJ Extension\r\n  AspectJ Extension increased member visibilities for AspectJ\r\n","BuildConfigNode":"toString getChildren addChild addChild removeChild compareTo getName getSourceLocation setSourceLocation getMessage setMessage getParent setParent setName getResourcePath setResourcePath isValidResource isActive setActive toString isDeclareKind readResolve getBuildConfigNodeKind parent name kind children message sourceLocation resourcePath isActive serialVersionUID FILE_JAVA FILE_ASPECTJ FILE_LST ERROR DIRECTORY ALL name nextOrdinal ordinal org.aspectj.ajde.ui.BuildConfigNode  children.listIterator() should support remove() operation\r\n  The 4 declarations below are necessary for serialization\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","CFlowCounter":"inc dec isValid getThreadLocalStackFactory getThreadLocalStackFactoryFor11 selectFactoryForVMVersion getSystemPropertyWithoutSecurityException getThreadStackFactoryClassName inc dec isValid getThreadLocalStackFactory getThreadLocalStackFactoryFor11 selectFactoryForVMVersion getSystemPropertyWithoutSecurityException getThreadStackFactoryClassName inc dec isValid getThreadLocalStackFactory getThreadLocalStackFactoryFor11 selectFactoryForVMVersion getSystemPropertyWithoutSecurityException getThreadStackFactoryClassName tsFactory flowHeightHandler tsFactory flowHeightHandler tsFactory flowHeightHandler org.aspectj.runtime.internal.CFlowCounter org.aspectj.runtime.internal.CFlowCounter org.aspectj.runtime.internal.CFlowCounter  Java 1.2 is version 46.0 and above\r\n  System.err.println(\"Trying to use thread local implementation? \"+useThreadLocalImplementation);\r\n  For debug ...\r\n  Java 1.2 is version 46.0 and above\r\n  System.err.println(\"Trying to use thread local implementation? \"+useThreadLocalImplementation);\r\n  For debug ...\r\n  Java 1.2 is version 46.0 and above\r\n  System.err.println(\"Trying to use thread local implementation? \"+useThreadLocalImplementation);\r\n  For debug ...\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * ******************************************************************/\r\n","CompletionOnJavadocSingleTypeReference":"addCompletionFlags completeAnException completeInText completeBaseTypes completeFormalReference getCompletionFlags printExpression completionFlags org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnJavadocSingleTypeReference  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.SingleTypeReference#printExpression(int, java.lang.StringBuffer)\r\n\t */\r\n","Lint":"setAll setAll setFromProperties loadDefaultProperties setFromProperties setFromProperties allKinds getLintKind suppressKinds clearAllSuppressions clearSuppressions getMessageKind fromKey setSuppressed isEnabled isSupressed getName getKind setKind signal signal setAll setAll setFromProperties loadDefaultProperties setFromProperties setFromProperties allKinds getLintKind suppressKinds clearAllSuppressions clearSuppressions getMessageKind fromKey setSuppressed isEnabled isSupressed getName getKind setKind signal signal kinds world invalidAbsoluteTypeName invalidWildcardTypeName unresolvableMember typeNotExposedToWeaver shadowNotInStructure unmatchedSuperTypeInCall unmatchedTargetKind canNotImplementLazyTjp multipleAdviceStoppingLazyTjp needsSerialVersionUIDField serialVersionUIDBroken noInterfaceCtorJoinpoint noJoinpointsForBridgeMethods enumAsTargetForDecpIgnored annotationAsTargetForDecpIgnored cantMatchArrayTypeOnVarargs adviceDidNotMatch invalidTargetForAnnotation elementAlreadyAnnotated runtimeExceptionNotSoftened uncheckedArgument uncheckedAdviceConversion noGuardForLazyTjp noExplicitConstructorCall aspectExcludedByConfiguration unorderedAdviceAtShadow swallowedExceptionInCatchBlock calculatingSerialVersionUID cantFindType cantFindTypeAffectingJoinPointMatch advisingSynchronizedMethods mustWeaveXmlDefinedAspects trace name message kind isSupressed kinds world invalidAbsoluteTypeName invalidWildcardTypeName unresolvableMember typeNotExposedToWeaver shadowNotInStructure unmatchedSuperTypeInCall unmatchedTargetKind canNotImplementLazyTjp multipleAdviceStoppingLazyTjp needsSerialVersionUIDField serialVersionUIDBroken noInterfaceCtorJoinpoint noJoinpointsForBridgeMethods enumAsTargetForDecpIgnored annotationAsTargetForDecpIgnored cantMatchArrayTypeOnVarargs adviceDidNotMatch invalidTargetForAnnotation elementAlreadyAnnotated runtimeExceptionNotSoftened uncheckedArgument uncheckedAdviceConversion noGuardForLazyTjp noExplicitConstructorCall aspectExcludedByConfiguration unorderedAdviceAtShadow swallowedExceptionInCatchBlock calculatingSerialVersionUID cantFindType cantFindTypeAffectingJoinPointMatch advisingSynchronizedMethods mustWeaveXmlDefinedAspects trace name message kind isSupressed org.aspectj.weaver.Lint org.aspectj.weaver.Lint  allows a user to control their severity (for e.g. ltw or binary weaving)\r\n  temporarily suppress the given lint messages\r\n  remove any suppression of lint warnings in place\r\n  by SuppressAjWarnings\r\n  can't suppress errors!\r\n  allows a user to control their severity (for e.g. ltw or binary weaving)\r\n  temporarily suppress the given lint messages\r\n  remove any suppression of lint warnings in place\r\n  by SuppressAjWarnings\r\n  can't suppress errors!\r\n /* private */\r\n /* private */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* private */\r\n /* private */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","ClasspathDirectory":"directoryList doesFileExist findClass findClass findTypeNames initialize isPackage reset toString normalizedPath getPath cleanup directoryList doesFileExist equals findClass getProjectRelativePath isExcluded isOutputFolder isPackage reset toString debugPathString normalizedPath path directoryCache missingPackageHolder mode encoding binaryFolder isOutputFolder directoryCache missingPackageHolder accessRuleSet org.aspectj.org.eclipse.jdt.internal.compiler.batch.ClasspathDirectory org.aspectj.org.eclipse.jdt.internal.core.builder.ClasspathDirectory  ability to only consider one kind of files (source vs. binaries), by default use both\r\n  only useful if referenced in the source path\r\n  package exists in another classpath directory or jar\r\n  walk the qualifiedPackageName backwards looking for an uppercase character before the '  most common case\r\n  most common case\r\n  most common case\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  includes .class files for a single directory\r\n  package exists in another classpath directory or jar\r\n  this is a case-sensitive check\r\n  add exclusion pattern check here if we want to hide .class files\r\n  most common case\r\n  most common case\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","Util":"displayString bytesToChar getFileByteContent getFileCharContent getInputStreamAsByteArray getInputStreamAsCharArray getLineNumber getZipEntryByteContent isArchiveFileName isClassFileName isClassFileName isExcluded isJavaFileName isJavaFileName isAjFileName searchColumnNumber toBoolean toString toString compareTo compare arrayConcat checkTypeSignature combineHashCodes compare compare concat concat concatWith concatWith concat convertTypeSignature defaultJavaExtension editedString endsWithIgnoreCase equalArrays equalArraysOrNull equalArraysOrNull equalArraysOrNullSortFirst equalArraysOrNullSortFirst equalOrNull equalsIgnoreJavaLikeExtension extractLastName extractParameterTypes extractReturnType findFirstClassFile findLineSeparator getAttribute getAttribute getAttribute getAttribute getJavaLikeExtensions getJdkLevel getNameWithoutJavaLikeExtension getLineSeparator getLineSeparator getParameterCount getProblemArgumentsForMarker getProblemArgumentsFromMarker getResourceContentsAsByteArray getResourceContentsAsCharArray getResourceContentsAsCharArray getSignature getSourceAttachmentProperty getSourceAttachmentPropertyName setSourceAttachmentProperty getDeclaringTypeSignature getFullyQualifiedName getTrimmedSimpleNames indexOfEnclosingPath indexOfJavaLikeExtension indexOfMatchingPath indexOfNestedPath isAttributeSupported isReadOnly isReadOnlySupported isExcluded isExcluded isExcluded isValidClassFileName isValidCompilationUnitName isValidFolderNameForPackage isValidMethodSignature isValidTypeSignature localTypeName log newClassFileReader normalizeCRs normalizeCRs packageName prefixLength prefixLength quickSort quickSort quickSort quickSort quickSort relativePath resetJavaLikeExtensions splitOn setReadOnly sort sort sort sort sort sortCopy sortCopy sortCopy sortCopy startsWithIgnoreCase matchesWithIgnoreCase toCharArrays toCompoundChars toLocalFile toString toString toStrings appendArrayTypeSignature appendClassTypeSignature appendTypeSignature toString typeParameterSignatures typeSignature validateMethodSignature validateTypeSignature verbose verbose isJavaLikeFileName isJavaLikeFileName scanTypeSignature scanBaseTypeSignature scanArrayTypeSignature scanCaptureTypeSignature scanTypeVariableSignature scanIdentifier scanClassTypeSignature scanTypeBoundSignature scanTypeArgumentSignatures scanTypeArgumentSignature getAllTypeArguments splitTypeLevelsSignature toAnchor toAnchor appendTypeSignatureForAnchor appendTypeArgumentSignatureForAnchor appendCaptureTypeSignatureForAnchor appendArrayTypeSignatureForAnchor appendClassTypeSignatureForAnchor scanGenericEnd isExecutingOnJava5 DEFAULT_READING_SIZE UTF_8 LINE_SEPARATOR EMPTY_STRING EMPTY_INT_ARRAY ARGUMENTS_DELIMITER EMPTY_ARGUMENT JAVA_LIKE_EXTENSIONS ENABLE_JAVA_LIKE_EXTENSIONS BOOLEAN BYTE CHAR DOUBLE FLOAT INT LONG SHORT VOID INIT org.aspectj.org.eclipse.jdt.internal.compiler.util.Util org.aspectj.org.eclipse.jdt.internal.core.util.Util org.aspectj.tools.ajdoc.Util  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  We record first the read size. In this case len is the actual read size.\r\n  read at least 8K\r\n  resize contents if needed\r\n  read as many bytes as possible\r\n  remember length of contents\r\n  resize contents if necessary\r\n  encoding is not supported\r\n  best guess\r\n  reading beyond known length\r\n  read at least 8K\r\n  resize contents if needed\r\n  coming from totalRead==length\r\n  until known length is met, reuse same array sized eagerly\r\n  read as many chars as possible\r\n  Do not keep first character for UTF-8 BOM encoding\r\n  if BOM char then skip\r\n  resize contents if necessary\r\n  $NON-NLS-1$\r\n  try to match as ZIP file\r\n  try to match as JAR file\r\n  trailing slash -> adds '**' for free (see http:  never included\r\n  AspectJ Extension\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  array of void is not allowed\r\n  Must have at least one character between L and ;\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  return false if the string is smaller than the end.\r\n  not the same in lower case.\r\n  where the first part is always the same (e.g. org.aspectj.org.eclipse.jdt)\r\n  only need to sort if more than two items\r\n  only need to sort if more than two items\r\n  find the first line separator\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   not found\r\n  content types derived from java content type should be included (https:  note that javaContentType.isKindOf(javaContentType) == true\r\n  note that file extensions contains \"java\" as it is defined in JDT Core's plugin.xml\r\n  ensure that \"java\" is first\r\n  TODO (jerome) reenable once JDT UI supports other file extensions (see https:  root is a jar file or a zip file\r\n  only internal classfolders are allowed\r\n  line delimiter in given text\r\n  line delimiter in project preference\r\n  line delimiter in workspace preference\r\n  system line delimiter\r\n  search in this buffer's contents first\r\n  search in the given text\r\n  default to system line separator\r\n  $NON-NLS-1$\r\n  Get encoding from file\r\n  do not use any encoding\r\n  workaround https:  local file\r\n  non local file\r\n  Get resource contents\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  not supported on this platform for this resource\r\n  ensure that folders are only excluded if all of their children are excluded\r\n  Void is not allowed as a parameter type.\r\n  (see https:  we need to prevent NegativeArraySizeException\r\n  lineStart by one and not by two.\r\n  $NON-NLS-1$\r\n  compute length\r\n  add the separator lengths\r\n  append all but the last segment, with separators\r\n  append the last segment\r\n  not supported on this platform for this resource\r\n  $NON-NLS-1$\r\n  non local file system\r\n  need a minimum 2 char\r\n  need a minimum 2 char\r\n  all done\r\n  erase package prefix\r\n  $NON-NLS-1$\r\n  it can be either an array signature or a type signature\r\n  selector\r\n  parameters\r\n  $NON-NLS-1$\r\n  return type\r\n  $NON-NLS-1$\r\n  need a minimum 1 char\r\n  need a minimum 1 char\r\n  $NON-NLS-1$\r\n  need a minimum 2 char\r\n  need a minimum 2 char\r\n  need a minimum 2 char\r\n  need a minimum 3 chars \"Tx;\"\r\n  must start in \"T\"\r\n  need a minimum 1 char\r\n  need a minimum 3 chars \"Lx;\"\r\n  must start in \"L\" or \"Q\"\r\n  all done\r\n  need a minimum 1 char for wildcard\r\n  need a minimum 3 chars \"+[I\"\r\n  must start in \"+  need a minimum 2 char \"<>\"\r\n  need a minimum 1 char\r\n  In case of IJavaElement signature, replace '$' by '.'\r\n  Init counters and arrays\r\n  int[] lengthes = new int [10];\r\n  Scan each signature character\r\n  Resize signatures array\r\n  selector\r\n  parameters\r\n  need a minimum 1 char\r\n  a var args is an array type\r\n  need a minimum 1 char\r\n  need a minimum 2 char\r\n  need a minimum 2 char\r\n  need a minimum 2 char\r\n  need a minimum 3 chars \"Lx;\"\r\n  must start in \"L\" or \"Q\"\r\n  all done\r\n  once we hit type arguments there are no more package prefixes\r\n /* TODO (philippe) should consider promoting it to CharOperation\r\n\t * Returns whether the given resource path matches one of the inclusion/exclusion\r\n\t * patterns.\r\n\t * NOTE: should not be asked directly using pkg root pathes\r\n\t * @see IClasspathEntry#getInclusionPatterns\r\n\t * @see IClasspathEntry#getExclusionPatterns\r\n\t */\r\n /* AspectJ Extension false */\r\n /* AspectJ Extension false */\r\n /*\r\n\t * Returns the default java extension (\".java\").\r\n\t * To be used when the extension is not known.\r\n\t */\r\n /*\r\n\t * Returns whether the given file name equals to the given string ignoring the java like extension\r\n\t * of the file name.\r\n\t * Returns false if it is not a java like file name.\r\n\t */\r\n /*\r\n\t * Returns the signature of the given type.\r\n\t */\r\n /*\r\n\t * Returns the source attachment property for this package fragment root's path\r\n\t */\r\n /*\r\n\t * Returns the declaring type signature of the element represented by the given binding key.\r\n\t * Returns the signature of the element if it is a type.\r\n\t * \r\n\t * @return the declaring type signature\r\n\t */\r\n /*\r\n\t * Appends to the given buffer the fully qualified name (as it appears in the source) of the given type\r\n\t */\r\n /*\r\n\t * Returns the index of the most specific argument paths which is strictly enclosing the path to check\r\n\t */\r\n /*\r\n\t * Returns the index of the Java like extension of the given file name\r\n\t * or -1 if it doesn't end with a known Java like extension. \r\n\t * Note this is the index of the '.' even if it is not considered part of the extension.\r\n\t */\r\n /*\r\n\t * Returns the index of the first argument paths which is equal to the path to check\r\n\t */\r\n /*\r\n\t * Returns the index of the first argument paths which is strictly nested inside the path to check\r\n\t */\r\n /*\r\n\t * Returns whether the given java element is exluded from its root's classpath.\r\n\t * It doesn't check whether the root itself is on the classpath or not\r\n\t */\r\n /*\r\n\t * Returns whether the given resource path matches one of the inclusion/exclusion\r\n\t * patterns.\r\n\t * NOTE: should not be asked directly using pkg root pathes\r\n\t * @see IClasspathEntry#getInclusionPatterns\r\n\t * @see IClasspathEntry#getExclusionPatterns\r\n\t */\r\n /*\r\n\t * Returns whether the given resource matches one of the exclusion patterns.\r\n\t * NOTE: should not be asked directly using pkg root pathes\r\n\t * @see IClasspathEntry#getExclusionPatterns\r\n\t */\r\n /*\r\n\t * Returns the simple name of a local type from the given binary type name.\r\n\t * The last '$' is at lastDollar. The last character of the type name is at end-1.\r\n\t */\r\n /*\r\n\t * Add a log entry\r\n\t */\r\n /*\r\n\t * Resets the list of Java-like extensions after a change in content-type.\r\n\t */\r\n /*\r\n\t * Returns whether the given compound name starts with the given prefix.\r\n\t * Returns true if the n first elements of the prefix are equals and the last element of the \r\n\t * prefix is a prefix of the corresponding element in the compound name.\r\n\t */\r\n /*\r\n\t * Returns whether the given compound name matches the given pattern.\r\n\t */\r\n /*\r\n\t * Converts the given URI to a local file. Use the existing file if the uri is on the local file system.\r\n\t * Otherwise fetch it.\r\n\t * Returns null if unable to fetch it.\r\n\t */\r\n /*\r\n\t * Converts a char[][] to String[].\r\n\t */\r\n /*\r\n\t * Returns the unresolved type parameter signatures of the given method\r\n\t * e.g. {\"QString;\", \"[int\", \"[[Qjava.util.Vector;\"}\r\n\t */\r\n /*\r\n\t * Returns the unresolved type signature of the given type reference, \r\n\t * e.g. \"QString;\", \"[int\", \"[[Qjava.util.Vector;\"\r\n\t */\r\n /*\r\n\t * Can throw IllegalArgumentException or ArrayIndexOutOfBoundsException \r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n * ******************************************************************/\r\n","ElementCache":"close ensureSpaceLimit newInstance resetSpaceLimit spaceLimitParent org.aspectj.org.eclipse.jdt.internal.core.ElementCache  We must close an entire JarPackageFragmentRoot at once.\r\n  ensure the children can be put without closing other elements\r\n  remove overflow\r\n /*\r\n * Ensures that there is enough room for adding the given number of children.\r\n * If the space limit must be increased, record the parent that needed this space limit.\r\n */\r\n /*\r\n * Returns a new instance of the receiver.\r\n */\r\n /*\r\n * If the given parent was the one that increased the space limit, reset\r\n * the space limit to the given default value.\r\n */\r\n","IntegerCache":"clear containsKey hash put putIfAbsent rehash size toString keyTable valueTable elementSize threshold org.aspectj.org.eclipse.jdt.internal.compiler.codegen.IntegerCache  assumes the threshold is never equal to the size of the table\r\n  assumes the threshold is never equal to the size of the table\r\n  negative when added, assumes value is > 0\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","IIntermediateResultsRequestor":"acceptResult org.aspectj.ajdt.internal.compiler.IIntermediateResultsRequestor","LazyMethodGen":"calculateMaxLocals hasDeclaredLineNumberInfo getDeclarationLineNumber getDeclarationOffset addAnnotation hasAnnotation initialize unpackHandlers getOutermostExceptionStart getOutermostExceptionEnd ensureAllLineNumberSetup allocateLocal allocateLocal getMethod markAsChanged toString toShortString toLongString print print printAspectAttributes run assignLabels print printRangeString getRangeString printDepth printLabel printInstruction pad getLocalVariableTag getLineNumber isStatic isAbstract isBridgeMethod addExceptionHandler getAccessFlags getAccessFlagsWithoutSynchronized isSynchronized setAccessFlags getArgumentTypes getEnclosingClass getMaxLocals getName getGenericReturnTypeSignature getReturnType setMaxLocals getBody getBodyForPrint hasBody getAttributes getDeclaredExceptions getClassName pack forceSyntheticForAjcMagicMembers inAspect makeSynthetic packBody optimizedPackBody addLocalVariables addExceptionHandlers handleBranchInstruction jumpForward handleBranchInstruction handleRangeInstruction copyAllInstructionsExceptRangeInstructionsInto remap insertHandler isPrivate isProtected isDefault isPublic assertGoodBody assertGoodBody assertGoodHandle assertGoodBranchInstruction assertInBody assertGoodRangeHandle assertGoodRange assertRangeHandle assertTargetedBy assertTargets getRangeAndAssertExactlyOne assertGoodTargeter isAdviceMethod isAjSynthetic isSynthetic getSourceLocation getEffectiveSignature setEffectiveSignature getSignature getParameterSignature getMemberView forcePublic getCanInline setCanInline addAttribute toTraceString calculateMaxLocals hasDeclaredLineNumberInfo getDeclarationLineNumber getDeclarationOffset addAnnotation hasAnnotation initialize unpackHandlers getOutermostExceptionStart getOutermostExceptionEnd ensureAllLineNumberSetup allocateLocal allocateLocal getMethod markAsChanged toString toShortString toLongString print print printAspectAttributes run assignLabels print printRangeString getRangeString printDepth printLabel printInstruction pad getLocalVariableTag getLineNumber isStatic isAbstract isBridgeMethod addExceptionHandler getAccessFlags getAccessFlagsWithoutSynchronized isSynchronized setAccessFlags getArgumentTypes getEnclosingClass getMaxLocals getName getGenericReturnTypeSignature getReturnType setMaxLocals getBody getBodyForPrint hasBody getAttributes getDeclaredExceptions getClassName pack forceSyntheticForAjcMagicMembers inAspect makeSynthetic packBody optimizedPackBody addLocalVariables addExceptionHandlers handleBranchInstruction jumpForward handleBranchInstruction handleRangeInstruction copyAllInstructionsExceptRangeInstructionsInto remap insertHandler isPrivate isProtected isDefault isPublic assertGoodBody assertGoodBody assertGoodHandle assertGoodBranchInstruction assertInBody assertGoodRangeHandle assertGoodRange assertRangeHandle assertTargetedBy assertTargets getRangeAndAssertExactlyOne assertGoodTargeter isAdviceMethod isAjSynthetic isSynthetic getSourceLocation getEffectiveSignature setEffectiveSignature getSignature getParameterSignature getMemberView forcePublic getCanInline setCanInline addAttribute toTraceString ACC_SYNTHETIC accessFlags returnType name argumentTypes declaredExceptions body attributes newAnnotations enclosingClass memberView effectiveSignature highestLineNumber wasPackedOptimally fromFilename maxLocals canInline isSynthetic matchedShadows definingType savedMethod labelMap body out pool BODY_INDENT CODE_INDENT start end ACC_SYNTHETIC accessFlags returnType name argumentTypes declaredExceptions body attributes newAnnotations enclosingClass memberView effectiveSignature highestLineNumber wasPackedOptimally fromFilename maxLocals canInline isSynthetic matchedShadows definingType savedMethod labelMap body out pool BODY_INDENT CODE_INDENT start end org.aspectj.weaver.bcel.LazyMethodGen org.aspectj.weaver.bcel.LazyMethodGen  private final String[] argumentNames;\r\n  leaving null for abstracts\r\n  this is the type of the interface the method is technically on\r\n  ??? should be okay, since constructed ones\r\n  aren't woven into\r\n  this.argumentNames = Utility.makeArgNames(paramTypes.length);\r\n  TODO we could check for @Around advice as well\r\n  inline state will be garbaged due to reweavable impl\r\n  TODO we could check for @Around advice as well\r\n  inline state will be garbaged due to reweavable impl\r\n  initialization\r\n  m);\r\n  TODO we could check for @Around advice as well\r\n  inline state will be garbaged due to reweavable impl\r\n  If member view is null, we manage them in newAnnotations\r\n  Check local annotations first\r\n  this.annotations = gen.getAnnotations();\r\n  body = new InstructionList(savedMethod.getCode().getCode());\r\n  if (len > 0) hasExceptionHandlers = true;\r\n  this doesn't necessarily handle overlapping correctly!!!\r\n  also removes from target\r\n  also removes from target\r\n  also removes from target\r\n  ??? this relies on gentle treatment of\r\n  infrastructure deal with this rather than crashing.\r\n  XXX assuming exactly one\r\n  killNops();\r\n  boolean hasPendingTargeters = false;\r\n  targeters\r\n  assert isRangeHandle(h);\r\n  ;\r\n  label assignment\r\n  actual instructions\r\n  r.getEnd()) continue;\r\n  inst;\r\n  killNops();\r\n  getArgumentNames(),\r\n  getArgumentNames(),\r\n  getArgumentNames(),\r\n  getArgumentNames(),\r\n  getArgumentNames(),\r\n  the modifier flag\r\n  map from localvariabletag to instruction handle\r\n  assert map.get(ih) == jh\r\n  and store up info for local variables\r\n  targeters[k];\r\n  If we do know about it - update its end position\r\n  now continue\r\n  didn't copy across\r\n  just increment ih.\r\n  produced\r\n  If we do know about it - update its end position\r\n  start\r\n  nowhere?\r\n  exceptionList\r\n  now add exception handlers\r\n  produced\r\n  now add local variables\r\n  if so, just continue.\r\n  we already have a var starting at this tag with this slot\r\n  now add exception handlers\r\n  old\r\n  New target is in hash map\r\n  Either LOOKUPSWITCH or TABLESWITCH\r\n  Update all targets\r\n  old target\r\n  Either LOOKUPSWITCH or TABLESWITCH\r\n  we're a range instruction\r\n  order is important, insert handlers in order of start\r\n  System.err.println(\"er \" + er);\r\n  }\r\n  int rreal = r.getRealStart().getPosition();\r\n  Old implementation, simply: l.add(0,fresh);\r\n  we have reached the end\r\n  only enable for debugging, consider using cheaper\r\n  definingType.getNameAsIdentifier\r\n  only to be enabled for debugging\r\n  if (memberView == null) return null;\r\n  private final String[] argumentNames;\r\n  leaving null for abstracts\r\n  this is the type of the interface the method is technically on\r\n  ??? should be okay, since constructed ones\r\n  aren't woven into\r\n  this.argumentNames = Utility.makeArgNames(paramTypes.length);\r\n  TODO we could check for @Around advice as well\r\n  inline state will be garbaged due to reweavable impl\r\n  TODO we could check for @Around advice as well\r\n  inline state will be garbaged due to reweavable impl\r\n  initialization\r\n  m);\r\n  TODO we could check for @Around advice as well\r\n  inline state will be garbaged due to reweavable impl\r\n  If member view is null, we manage them in newAnnotations\r\n  Check local annotations first\r\n  this.annotations = gen.getAnnotations();\r\n  body = new InstructionList(savedMethod.getCode().getCode());\r\n  if (len > 0) hasExceptionHandlers = true;\r\n  this doesn't necessarily handle overlapping correctly!!!\r\n  also removes from target\r\n  also removes from target\r\n  also removes from target\r\n  ??? this relies on gentle treatment of\r\n  infrastructure deal with this rather than crashing.\r\n  XXX assuming exactly one\r\n  killNops();\r\n  boolean hasPendingTargeters = false;\r\n  targeters\r\n  assert isRangeHandle(h);\r\n  ;\r\n  label assignment\r\n  actual instructions\r\n  r.getEnd()) continue;\r\n  inst;\r\n  killNops();\r\n  getArgumentNames(),\r\n  getArgumentNames(),\r\n  getArgumentNames(),\r\n  getArgumentNames(),\r\n  getArgumentNames(),\r\n  the modifier flag\r\n  map from localvariabletag to instruction handle\r\n  assert map.get(ih) == jh\r\n  and store up info for local variables\r\n  targeters[k];\r\n  If we do know about it - update its end position\r\n  now continue\r\n  didn't copy across\r\n  just increment ih.\r\n  produced\r\n  If we do know about it - update its end position\r\n  start\r\n  nowhere?\r\n  exceptionList\r\n  now add exception handlers\r\n  produced\r\n  now add local variables\r\n  if so, just continue.\r\n  we already have a var starting at this tag with this slot\r\n  now add exception handlers\r\n  old\r\n  New target is in hash map\r\n  Either LOOKUPSWITCH or TABLESWITCH\r\n  Update all targets\r\n  old target\r\n  Either LOOKUPSWITCH or TABLESWITCH\r\n  we're a range instruction\r\n  order is important, insert handlers in order of start\r\n  System.err.println(\"er \" + er);\r\n  }\r\n  int rreal = r.getRealStart().getPosition();\r\n  Old implementation, simply: l.add(0,fresh);\r\n  we have reached the end\r\n  only enable for debugging, consider using cheaper\r\n  definingType.getNameAsIdentifier\r\n  only to be enabled for debugging\r\n  if (memberView == null) return null;\r\n /* ShadowMungers */\r\n /* Attribute */\r\n /*\r\n\t\t * Update branch targets and insert various attributes. Insert our exceptionHandlers into a sorted list, so they can be\r\n\t\t * added in order later.\r\n\t\t */\r\n /*\r\n\t * Optimized packing that does a 'local packing' of the code rather than building a brand new method and packing into it. Only\r\n\t * usable when the packing is going to be done just once.\r\n\t */\r\n /*\r\n\t * Make copies of all instructions, append them to the new list and associate old instruction references with the new ones,\r\n\t * i.e., a 1:1 mapping.\r\n\t */\r\n /* private */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* ShadowMungers */\r\n /* Attribute */\r\n /*\r\n\t\t * Update branch targets and insert various attributes. Insert our exceptionHandlers into a sorted list, so they can be\r\n\t\t * added in order later.\r\n\t\t */\r\n /*\r\n\t * Optimized packing that does a 'local packing' of the code rather than building a brand new method and packing into it. Only\r\n\t * usable when the packing is going to be done just once.\r\n\t */\r\n /*\r\n\t * Make copies of all instructions, append them to the new list and associate old instruction references with the new ones,\r\n\t * i.e., a 1:1 mapping.\r\n\t */\r\n /* private */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","CompletionOnJavadocAllocationExpression":"addCompletionFlags completeAnException completeInText completeBaseTypes completeFormalReference getCompletionFlags printExpression completionFlags separatorPosition org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnJavadocAllocationExpression  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.AllocationExpression#printExpression(int, java.lang.StringBuffer)\r\n\t */\r\n","Wildcard":"getParameterizedTypeName getTypeName internalResolveType printExpression resolveType resolveType resolveTypeArgument resolveTypeArgument traverse traverse UNBOUND EXTENDS SUPER bound kind org.aspectj.org.eclipse.jdt.internal.compiler.ast.Wildcard  SUPER\r\n  SUPER\r\n  SUPER\r\n  only invoked for improving resilience when unable to bind generic type from parameterized reference\r\n  only invoked for improving resilience when unable to bind generic type from parameterized reference\r\n /*no extra bound*/\r\n","ConstantLong":"accept dump getBytes setBytes toString getConstantValue accept dump getBytes setBytes toString getConstantValue bytes bytes org.aspectj.apache.bcel.classfile.ConstantLong org.aspectj.apache.bcel.classfile.ConstantLong","WorkingCopyOwner":"setPrimaryBufferProvider createBuffer getProblemRequestor newWorkingCopy newWorkingCopy org.aspectj.org.eclipse.jdt.core.WorkingCopyOwner","InnerClassInfo":"getEnclosingTypeName getModifiers getName getSourceName toString initialize innerClassNameIndex outerClassNameIndex innerNameIndex innerClassName outerClassName innerName accessFlags readInnerClassName readOuterClassName readInnerName org.aspectj.org.eclipse.jdt.internal.compiler.classfmt.InnerClassInfo  read outer class name\r\n  read access flag\r\n  read the inner class name\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","SelectionOnFieldType":"printStatement org.aspectj.org.eclipse.jdt.internal.codeassist.select.SelectionOnFieldType","CallExpr":"accept getArgs getMethod getType accept getArgs getMethod getType method args returnType method args returnType org.aspectj.weaver.ast.CallExpr org.aspectj.weaver.ast.CallExpr  assert m.return value is boolean\r\n  yes, stored in method as well, but that one isn't resolved\r\n  assert m.return value is boolean\r\n  yes, stored in method as well, but that one isn't resolved\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","Aspects14":"aspectOf aspectOf aspectOf hasAspect hasAspect hasAspect getSingletonOrThreadAspectOf getPerObjectAspectOf getPerTypeWithinAspectOf checkAspectOf getSingletonOrThreadHasAspect getPerObjectHasAspect getPerTypeWithinHasAspect checkHasAspect aspectOf aspectOf aspectOf hasAspect hasAspect hasAspect getSingletonOrThreadAspectOf getPerObjectAspectOf getPerTypeWithinAspectOf checkAspectOf getSingletonOrThreadHasAspect getPerObjectHasAspect getPerTypeWithinHasAspect checkHasAspect aspectOf aspectOf aspectOf hasAspect hasAspect hasAspect getSingletonOrThreadAspectOf getPerObjectAspectOf getPerTypeWithinAspectOf checkAspectOf getSingletonOrThreadHasAspect getPerObjectHasAspect getPerTypeWithinHasAspect checkHasAspect EMPTY_CLASS_ARRAY PEROBJECT_CLASS_ARRAY PERTYPEWITHIN_CLASS_ARRAY EMPTY_OBJECT_ARRAY ASPECTOF HASASPECT EMPTY_CLASS_ARRAY PEROBJECT_CLASS_ARRAY PERTYPEWITHIN_CLASS_ARRAY EMPTY_OBJECT_ARRAY ASPECTOF HASASPECT EMPTY_CLASS_ARRAY PEROBJECT_CLASS_ARRAY PERTYPEWITHIN_CLASS_ARRAY EMPTY_OBJECT_ARRAY ASPECTOF HASASPECT org.aspectj.lang.Aspects14 org.aspectj.lang.Aspects14 org.aspectj.lang.Aspects14  e.getCause());\r\n  e.getCause());\r\n  e.getCause());\r\n  e.getCause());\r\n  e.getCause());\r\n  e.getCause());\r\n  e.getCause());\r\n  e.getCause());\r\n  e.getCause());\r\n","StringToType":"commaSeparatedListToTypeArray stringToType makeParameterizedType commaSeparatedListToTypeArray stringToType makeParameterizedType org.aspectj.internal.lang.reflect.StringToType org.aspectj.internal.lang.reflect.StringToType  outer:\r\n  could be a type variable\r\n  outer:\r\n  could be a type variable\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","ArrayElementValueGen":"getElementValuesArray getElementValuesArraySize getElementValue dump stringifyValue addElement getElementValuesArray getElementValuesArraySize getElementValue dump stringifyValue addElement NO_VALUES evalues NO_VALUES evalues org.aspectj.apache.bcel.classfile.annotation.ArrayElementValueGen org.aspectj.apache.bcel.classfile.annotation.ArrayElementValueGen  J5TODO: Should we make this an array or a list?  A list would be easier to modify ...\r\n  u1 type of value (ARRAY == '[')\r\n  J5TODO: Should we make this an array or a list?  A list would be easier to modify ...\r\n  u1 type of value (ARRAY == '[')\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement -     initial implementation {date}\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement -     initial implementation {date}\r\n * ******************************************************************/\r\n","RecoveredTypeBinding":"createArrayType getBinaryName getBound getComponentType getDeclaredFields getDeclaredMethods getDeclaredModifiers getDeclaredTypes getDeclaringClass getDeclaringMethod getDimensions getElementType getErasure getInterfaces getModifiers getName getInternalName getPackage getQualifiedName getReferenceBinding getSuperclass getTypeArguments getTypeBounds getTypeDeclaration getTypeParameters getWildcard isAnnotation isAnonymous isArray isAssignmentCompatible isCapture isCastCompatible isClass isEnum isFromSource isGenericType isInterface isLocal isMember isNested isNullType isParameterizedType isPrimitive isRawType isSubTypeCompatible isTopLevel isTypeVariable isUpperbound isWildcardType getAnnotations getJavaElement getKey getKind isDeprecated isEqualTo isRecovered isSynthetic getTypeNameFrom getType variableDeclaration currentType resolver dimensions innerTypeBinding typeArguments binding org.aspectj.org.eclipse.jdt.core.dom.RecoveredTypeBinding  includes capture scenario\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  since recovered binding are not unique isEqualTo is required\r\n  $NON-NLS-1$\r\n  since recovered binding are not unique isEqualTo is required\r\n  $NON-NLS-1$\r\n  since recovered binding are not unique isEqualTo is required\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  this is a variable declaration fragment\r\n  should not happen\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#createArrayType(int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getBinaryName()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getBound()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getComponentType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getDeclaredFields()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getDeclaredMethods()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getDeclaredModifiers()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getDeclaredTypes()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getDeclaringClass()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getDeclaringMethod()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getDimensions()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getElementType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getErasure()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getInterfaces()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getModifiers()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getName()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getPackage()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getQualifiedName()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getSuperclass()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getTypeArguments()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getTypeBounds()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getTypeDeclaration()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getTypeParameters()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#getWildcard()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isAnnotation()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isAnonymous()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isArray()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isAssignmentCompatible(org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isCapture()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isCastCompatible(org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isClass()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isEnum()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isFromSource()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isGenericType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isInterface()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isLocal()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isMember()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isNested()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isNullType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isParameterizedType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isPrimitive()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isRawType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isSubTypeCompatible(org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isTopLevel()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isTypeVariable()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isUpperbound()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding#isWildcardType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.IBinding#getAnnotations()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.IBinding#getJavaElement()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.IBinding#getKey()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.IBinding#getKind()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.IBinding#isDeprecated()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.IBinding#isEqualTo(org.aspectj.org.eclipse.jdt.core.dom.IBinding)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.IBinding#isRecovered()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.IBinding#isSynthetic()\r\n\t */\r\n","HashtableOfObjectToInt":"clone containsKey get keysToArray put removeKey rehash size toString keyTable valueTable elementSize threshold org.aspectj.org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToInt  to avoid using Enumerations, walk the individual tables skipping nulls\r\n  number of elements in the table\r\n  size represents the expected number of elements\r\n  assumes the threshold is never equal to the size of the table\r\n  double the number of expected elements\r\n  $NON-NLS-1$\r\n  $NON-NLS-2$ ","UnresolvedReferenceNameFinder":"acceptName acceptName find find findAfter findAfter findBefore findBefore initPotentialNamesTables popParent pushParent getEnclosingDeclaration visit visit visit visit visit visit visit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit indexOfFisrtNameAfter indexOfNextName removeNameAt endVisitPreserved endVisitRemoved removeLocals removeFields MAX_LINE_COUNT FAKE_BLOCKS_COUNT requestor completionEngine parser completionScanner parentsPtr parents potentialVariableNamesPtr potentialVariableNames potentialVariableNameStarts acceptedNames org.aspectj.org.eclipse.jdt.internal.codeassist.UnresolvedReferenceNameFinder  the null check is added to fix bug https:  accept result\r\n  reinitialize completion scanner to be usable as a normal scanner\r\n  compute location of the end of the current block\r\n  reinitialize completion scanner to be usable as a normal scanner\r\n  there is no potential names\r\n  remove null and discouragedNames\r\n  there is no potential names\r\n  no next index or next index is after 'right'\r\n  mid and right are at the same index, we must move 'left'\r\n  'left' is empty or 'left' is before the position\r\n","IDOMFactory":"createCompilationUnit createCompilationUnit createCompilationUnit createField createField createImport createImport createInitializer createInitializer createMethod createMethod createPackage createPackage createType createClass createInterface createType org.aspectj.org.eclipse.jdt.core.jdom.IDOMFactory","AjASTVisitor":"endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit visit visit endVisit visit endVisit visit endVisit visit endVisit visit endVisit visit visit endVisit endVisit visit endVisit visit endVisit visit endVisit visit endVisit visit endVisit visit endVisit visit endVisit visit endVisit visit endVisit visit endVisit visit endVisit visit visit visit visit visit visit visit visit visit visit endVisit visit endVisit visit endVisit org.aspectj.org.eclipse.jdt.core.dom.AjASTVisitor  ajh02: method added\r\n  ajh02: method added\r\n  ajh02: method added\r\n","DeclareParentsDeclaration":"clone0 subtreeMatch0 accept0 internalModifiersProperty internalModifiers2Property internalJavadocProperty propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty internalGetSetBooleanProperty internalGetChildListProperty parentTypePatterns getChildTypePattern setChildTypePattern isExtends setExtends JAVADOC_PROPERTY CHILD_TYPE_PATTERN_PROPERTY IS_EXTENDS_PROPERTY PARENTS_TYPE_PATTERNS_LIST_PROPERTY PROPERTY_DESCRIPTORS_2_0 PROPERTY_DESCRIPTORS_3_0 isExtends childTypePattern parentTypePatterns org.aspectj.org.eclipse.jdt.core.dom.DeclareParentsDeclaration  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t * \r\n\t * There are no modifiers declared for DeclareErrorDeclaration - \r\n\t * therefore we don't do anything with this\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t * \r\n\t * There are no modifiers declared for DeclareErrorDeclaration - \r\n\t * therefore we don't do anything with this\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","SuperFieldAccess":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getQualifier setQualifier getName resolveFieldBinding setName memSize treeSize QUALIFIER_PROPERTY NAME_PROPERTY PROPERTY_DESCRIPTORS optionalQualifier fieldName org.aspectj.org.eclipse.jdt.core.dom.SuperFieldAccess  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  treat Code as free\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","Method":"accept setAttributes getCode getExceptionTable getLocalVariableTable getLineNumberTable toString copy getReturnType getArgumentTypes ensureParameterAnnotationsUnpacked getAnnotationsOnParameter getParameterAnnotations accept setAttributes getCode getExceptionTable getLocalVariableTable getLineNumberTable toString copy getReturnType getArgumentTypes ensureParameterAnnotationsUnpacked getAnnotationsOnParameter getParameterAnnotations NO_PARAMETER_ANNOTATIONS NO_ANNOTATIONS NoMethods parameterAnnotationsOutOfDate unpackedParameterAnnotations NO_PARAMETER_ANNOTATIONS NO_ANNOTATIONS NoMethods parameterAnnotationsOutOfDate unpackedParameterAnnotations org.aspectj.apache.bcel.classfile.Method org.aspectj.apache.bcel.classfile.Method  CUSTARD mutable or not?\r\n  Short cuts to constant pool\r\n  Get name and signature from constant pool\r\n  Find attributes that contain annotation data\r\n  Build a list of annotation arrays, one per argument\r\n  CUSTARD mutable or not?\r\n  Short cuts to constant pool\r\n  Get name and signature from constant pool\r\n  Find attributes that contain annotation data\r\n  Build a list of annotation arrays, one per argument\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n","JavaBuilder":"getProblemsFor getTasksFor buildStarting buildFinished removeProblemsFor removeTasksFor removeProblemsAndTasksFor readState writeState build createBuildNotifier buildAll getBatchImageBuilder buildDeltas getIncrementalImageBuilder clean cleanup clearLastState filterExtraResource findDeltas getLastState getRequiredProjects hasBuildpathErrors hasClasspathChanged hasJavaBuilder hasStructuralDelta initializeBuilder isClasspathBroken isWorthBuilding mustPropagateStructuralChanges printLocations recordNewState toString currentProject javaProject workspaceRoot participants nameEnvironment binaryLocationsPerProject lastState notifier extraResourceFileFilters extraResourceFolderFilters SOURCE_ID DEBUG builtProjects org.aspectj.org.eclipse.jdt.internal.core.builder.JavaBuilder  AspectJ Extension - made protected\r\n  maps a project to its binary resources (output folders, class folders, zip  AspectJ Extension - made public\r\n  AspectJ Extension - made protected\r\n  $NON-NLS-1$\r\n  delete managed markers\r\n  delete managed markers\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  AspectJ Extension - use factory, was 'new BuildNotifier(monitor,currentProject)'\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  do not log this exception since its thrown to handle aborted compiles because of missing source files\r\n  make this the only problem for this project\r\n  If the build failed, clear the previously built state, forcing a full build next time.\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  double check that a jar file didn't get replaced in a binary project\r\n  if there is no source to compile & no classpath changes then we are done\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  the user may be trying something\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  AspectJ Extension\r\n  $NON-NLS-1$\r\n  AspectJ Extension - use factory, was 'new BatchImageBuilder(this,true)'\r\n  AspectJ Extension\r\n  $NON-NLS-1$\r\n  clear the previously built state so if the build fails, a full build will occur next time\r\n  AspectJ Extension - use factory, was 'new IncrementalImageBuilder(this)'\r\n  $NON-NLS-1$\r\n  AspectJ Extension\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  project has no source folders and can be skipped\r\n  see if we can skip its delta\r\n  can ignore output folder since project was not structurally changed\r\n  project has no structural changes in its output folders\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  missing projects are considered too\r\n  except if entry is optional\r\n  some binary resources on the class path can come from projects that are not included in the project references\r\n  checks source & output folders\r\n  added new empty source folder\r\n  $NON-NLS-1$   added new empty source folder\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  handle case when currentProject has only .class file folders and  either a .class file folder or a zip  some calls just need the nameEnvironment initialized so skip the rest\r\n  cache the known participants for this project\r\n  Flush the existing external files cache if this is the beginning of a build cycle\r\n  $NON-NLS-1$\r\n  remove all compilation problems\r\n  Abort build only if there are classpath errors\r\n  except for projects involved in a 'warning' cycle (see below)\r\n  The prereq project has no build state: if this prereq project has a 'warning' cycle marker then allow build (see bug id 23357)\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  make this the only problem for this project\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  state.dump();\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* Return the list of projects for which it requires a resource delta. This builder's project\r\n* is implicitly included and need not be specified. Builders must re-specify the list\r\n* of interesting projects every time they are run as this is not carried forward\r\n* beyond the next build. Missing projects should be specified but will be ignored until\r\n* they are added to the workspace.\r\n*/\r\n /*\r\n * Instruct the build manager that this project is involved in a cycle and\r\n * needs to propagate structural changes to the other projects in the cycle.\r\n */\r\n","Disassembler":"appendModifier decodeModifiers decodeModifiers decodeModifiersForField decodeModifiersForFieldForWorkingCopy decodeModifiersForInnerClasses decodeModifiersForMethod decodeModifiersForType escapeString decodeStringValue decodeStringValue disassemble disassemble disassemble disassemble disassemble disassemble disassemble disassembleEnumConstructor disassemble disassemble disassemble disassembleGenericSignature isJavaLangObject isVarArgs disassemble disassemble disassemble disassemble disassemble disassembleEnumConstants disassemble disassemble disassemble disassemble disassemble disassemble disassemble disassemble disassembleAsModifier disassembleAsModifier disassembleAsModifier disassembleAsModifier disassembleAsModifier disassembleAsModifier disassembleTypeMembers getConstructorArgumentsForEnum dumpTab dumpNewLineWithTabs getDescription getEnclosingMethodAttribute getAttribute getParameterNames getLocalIndex getEntryFor getSignatureForField isDeprecated isSynthetic checkMode isCompact returnClassName writeNewLine ANY_EXCEPTION VERSION_UNKNOWN org.aspectj.org.eclipse.jdt.internal.core.util.Disassembler  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  case IModifierConstants.ACC_BRIDGE :\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$  $NON-NLS-1$  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$  disassemble compact version of annotations\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  object\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  boolean\r\n  $NON-NLS-1$\r\n  disassemble compact version of annotations\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  put the annotation default attribute if needed\r\n  $NON-NLS-1$\r\n  object\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  boolean\r\n  $NON-NLS-1$\r\n  incomplete initialization. We cannot go further.\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  disassemble compact version of annotations\r\n  search the right entry\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  we print the simple class name\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  extract the name\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  check if this is java.lang.Object\r\n  check the presence of the unspecified Varargs attribute\r\n  disassemble each frame\r\n  SAME_LOCALS_1_STACK_ITEM_EXTENDED\r\n  CHOP\r\n  SAME_FRAME_EXTENDED\r\n  APPEND\r\n  FULL_FRAME\r\n  SAME_LOCALS_1_STACK_ITEM\r\n  SAME_FRAME\r\n  disassemble each frame\r\n  FULL_FRAME\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  disassemble compact version of annotations\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  insert default value for corresponding argument types\r\n  disassemble compact version of annotations\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$  $NON-NLS-1$  $NON-NLS-1$  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  length check for resilience\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$  $NON-NLS-1$  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$  $NON-NLS-1$\r\n  check if the code attribute has debug info for this method\r\n","NullLiteral":"propertyDescriptors internalStructuralPropertiesForType getNodeType0 clone0 subtreeMatch0 accept0 memSize treeSize computeConstant generateCode literalType nullStatus reusableJSRTarget source traverse PROPERTY_DESCRIPTORS source org.aspectj.org.eclipse.jdt.core.dom.NullLiteral org.aspectj.org.eclipse.jdt.internal.compiler.ast.NullLiteral  dispatch to correct overloaded match method\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","QualifiedNameReference":"analyseAssignment analyseCode analyseCode checkFieldAccess checkNPE computeConversion generateAssignment generateCode generateCompoundAssignment generatePostIncrement generateReadSequence generateReceiver genericTypeArguments getCodegenBinding getGenericCast getOtherFieldBindings manageEnclosingInstanceAccessIfNecessary manageSyntheticAccessIfNecessary nullStatus optimizedBooleanConstant postConversionType printExpression reportError resolveType setCodegenBinding setFieldIndex setGenericCast setSyntheticAccessor traverse traverse unboundReferenceErrorName tokens sourcePositions otherBindings otherCodegenBindings otherDepths indexOfFirstFieldBinding syntheticWriteAccessor syntheticReadAccessors genericCast otherGenericCasts org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference  points (into tokens) for the first token that corresponds to first FieldBinding\r\n  determine the rank until which we now we do not need any actual value for the field access\r\n  reading a field\r\n  was an implicit reference to the first field binding\r\n  enum constant body\r\n  check if accessing enum static field in initializer\r\n  the last field binding is only assigned\r\n  check if final blank field\r\n  first binding is a local variable\r\n  all intermediate field accesses are read accesses\r\n  pretend it got assigned\r\n  in a context where it can be assigned?\r\n  the last field access is a write access\r\n  equivalent to valuesRequired[maxOtherBindings]\r\n  determine the rank until which we now we do not need any actual value for the field access\r\n  reading a field\r\n  was an implicit reference to the first field binding\r\n  enum constant body\r\n  check if accessing enum static field in initializer\r\n  check if reading a final blank field\r\n  reading a local variable\r\n  check for forward references\r\n  clear bits\r\n  from thereon it is set\r\n  analysing assignments\r\n  set the generic cast after the fact, once the type expectation is fully known (no need for strict cast)\r\n  unboxing: checkcast before conversion\r\n  extra cast needed if method return type has type variable\r\n  equivalent to valuesRequired[maxOtherBindings]\r\n  could be dup: next.next.next\r\n  perform null check\r\n  conversion only generated if unboxing\r\n  array length\r\n  could occur if !valueRequired but compliance >= 1.4\r\n  inline the last field constant\r\n  perform the actual compound operation\r\n  promote the array reference to the suitable operation type\r\n  prefix operation\r\n  generate the increment value (will by itself  be promoted to the operation value)\r\n  perform the operation\r\n  cast the value back to the array reference type\r\n  actual assignment\r\n  Stack:  [owner][old field value]  ---> [old field value][owner][old field value]\r\n  duplicate the old field value\r\n  determine the rank until which we now we do not need any actual value for the field access\r\n  if first field is actually constant, we can inline it\r\n  reading the first local variable\r\n  no value needed\r\n  regular local variable read\r\n  outer local can be reached either through a synthetic arg or a synthetic field\r\n  outer local?\r\n  only the last field binding is a write access\r\n  perform null check\r\n  if no valueRequired, still need possible side-effects of <clinit> invocation, if field belongs to different class\r\n  perform null check\r\n  get the matching codegenBinding\r\n  get the matching generic cast\r\n  At this point restrictiveFlag may ONLY have two potential value : FIELD LOCAL (i.e cast <<(VariableBinding) binding>> is valid)\r\n  indirect static reference ?\r\n  accessing to a field using a type as \"receiver\" is allowed only with static field\r\n  the field is the first token of the qualified reference....\r\n  must check for the static status....\r\n  only last field is actually a write access if any\r\n  restrictiveFlag == FIELD\r\n  perform capture conversion if read access\r\n  allocation of the fieldBindings array\tand its respective constants\r\n  fill the first constant (the one of the binding)\r\n  save first depth, since will be updated by visibility checks of other bindings\r\n  could not resolve type prior to this point\r\n  flush previous depth if any\r\n  don't fill other constants slots...\r\n  handle indirect inheritance thru variable secondary bound\r\n  type cannot be base-type even in boxing case\r\n  set generic cast of for previous field (if any)\r\n  only last field is actually a write access if any\r\n  constant propagation can only be performed as long as the previous one is a constant too.\r\n  static field accessed through receiver? legal but unoptimal (optional warning)\r\n  indirect static reference ?\r\n  iteration on each field\r\n  perform capture conversion if read access\r\n  If inlinable field, forget the access emulation, the code gen will directly target it\r\n  AspectJ Extension\r\n  index == 0 denotes the first fieldBinding, index > 0 denotes one of the 'otherBindings', index < 0 denotes a write access (to last binding)\r\n  if field from parameterized type got found, use the original field at codegen time\r\n  implicit protected access\r\n  private access\r\n  array.length\r\n  no change for Object fields\r\n  and not from Object or implicit static field access.\r\n  reading a field\r\n  reading a local variable\r\n  fall thru\r\n  already done it!   invocationType();  ============only variable===========\r\n  clear bits\r\n  check for forward references\r\n  clear bits\r\n  clear bits\r\n  =============only type ==============\r\n  scope.problemReporter().deprecatedType(type, this);\r\n  ========error cases===============\r\n  set the matching codegenBinding and generic cast\r\n  set the matching codegenBinding and generic cast\r\n  write-access ?\r\n  set the matching synthetic accessor\r\n /*write-access*/\r\n /*only exact match*/\r\n /*\r\n * Generate code for all bindings (local and fields) excluding the last one, which may then be generated code\r\n * for a read or write access.\r\n */\r\n","EclipseAnnotationConvertor":"convertEclipseAnnotation generateAnnotation generateElementValue generateElementValueForConstantExpression generateElementValueForNonConstantExpression org.aspectj.ajdt.internal.compiler.lookup.EclipseAnnotationConvertor  testcase!\r\n  long bs = (eclipseAnnotation.bits & TagBits.AnnotationRetentionMASK);\r\n  this is a marker annotation (no member value pairs)\r\n  this is a single member annotation (one member value)\r\n  is this just a marker annotation?\r\n  class type\r\n  ,\r\n  array type\r\n  not yet used...\r\n /* *******************************************************************\r\n * Copyright (c) 2006 Contributors\r\n * All rights reserved.\r\n * This program and the accompanying materials are made available\r\n * under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *     Andy Clement                 initial implementation\r\n * ******************************************************************/\r\n","SelectionOnParameterizedSingleTypeReference":"resolveType resolveType printExpression org.aspectj.org.eclipse.jdt.internal.codeassist.select.SelectionOnParameterizedSingleTypeReference  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","WeaverMessageHandler":"resetCompiler setCurrentResult handleMessage isIgnoring dontIgnore ignore getStartPos getEndPos findReferenceContextFor buildSeeAlsoProblems sink currentlyWeaving compiler org.aspectj.ajdt.internal.compiler.WeaverMessageHandler  we only care about warnings and errors here...\r\n  case (By calling sink.handleMessage()) - this ensures we don't put out bogus source context info.\r\n  we're not an EclipseSourceLocation we're a SourceLocation.\r\n  must be a problem found during completeTypeBindings phase of begin to compile\r\n  XXX this is ok for ajc, will have to do better for AJDT in time...\r\n  Stick more info in supplementary message info\r\n  Remember if this message was due to a deow\r\n","Proceed":"resolveType findEnclosingAround inInner org.aspectj.ajdt.internal.compiler.ast.Proceed  ??? this could in theory be done by the parser, but that appears to be hard\r\n  binding.returnType;\r\n  binding.returnType;\r\n  checkInvocationArguments(scope, this.receiver, this.actualReceiverType, this.binding, this.arguments, argumentTypes, argsContainCast, this);\r\n  pr 53981 only match \"bare\" calls to proceed\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n *               2004 contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation\r\n *     IBM      ongoing maintenance \r\n * ******************************************************************/\r\n","CompletionOnAnnotationOfType":"print potentialAnnotatedNode isParameter org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnAnnotationOfType  'isParameter' is set to true in this case.\r\n","ParameterAnnotation":"sizeInBytes getAnnotations getAnnotationsNumber NO_ENTRIES annotationsNumber annotations readOffset org.aspectj.org.eclipse.jdt.internal.core.util.ParameterAnnotation /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IParameterAnnotation#getAnnotations()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IParameterAnnotation#getAnnotationsNumber()\r\n\t */\r\n","Deprecated":"accept dump getBytes setBytes toString copy accept dump getBytes setBytes toString copy bytes bytes org.aspectj.apache.bcel.classfile.Deprecated org.aspectj.apache.bcel.classfile.Deprecated","ForeachStatement":"analyseCode generateCode printStatement resolve traverse elementVariable elementVariableImplicitWidening collection action kind ARRAY RAW_ITERABLE GENERIC_ITERABLE iteratorReceiverType collectionElementType breakLabel continueLabel scope indexVariable collectionVariable maxVariable SecretIndexVariableName SecretCollectionVariableName SecretMaxVariableName postCollectionInitStateIndex mergedInitStateIndex org.aspectj.org.eclipse.jdt.internal.compiler.ast.ForeachStatement  set the kind of foreach\r\n  possible kinds of iterating behavior\r\n  loop labels\r\n  secret variables for codegen\r\n  to store the collection expression value\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  initialize break and continue labels\r\n  process the element variable and collection\r\n  element variable will be assigned when iterating\r\n  process the action\r\n  code generation can be optimized when no need to continue in the loop\r\n  TODO (maxime) no need to test when false: can optimize (same for action being unreachable above)\r\n  element variable is not used\r\n  end of loop\r\n  recover upstream null info\r\n  int length = (collectionVariable = [collection]).length;\r\n  $NON-NLS-1$\r\n  declaringClass.iterator();\r\n  generate the initializations\r\n  label management\r\n  jump over the actionBlock\r\n  generate the condition (swapped for optimizing)\r\n  collectionVariable is already on execution stack\r\n  generate the loop action\r\n  no continue, thus simply hardcode offset 0\r\n  generate the loop action\r\n  generate the condition\r\n  generate the condition\r\n  generate the increments for next iteration\r\n  AspectJ Extension - 155763 - do it here\r\n  continuation point\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  block\r\n  use the scope that will hold the init declarations\r\n  collection expression can see itemVariable\r\n  handle indirect inheritance thru variable secondary bound\r\n  for(Object o : Iterable)\r\n  no conversion needed as only for reference types\r\n  for (T t : Iterable<T>) - in case used inside Iterable itself\r\n  for(E e : Iterable<E>)\r\n  per construction can only be one\r\n  use primitive type in implicit conversion\r\n  no conversion needed as only for reference types\r\n  for(E e : E[])\r\n  in case we need to do a conversion\r\n  use primitive type in implicit conversion\r\n  allocate #index secret variable (of type int)\r\n  not inlinable\r\n  allocate #max secret variable\r\n  not inlinable\r\n  add #array secret variable (of collection type)\r\n  not inlinable\r\n  allocate #index secret variable (of type Iterator)\r\n  not inlinable\r\n","IAccessRule":"getPattern getKind ignoreIfBetter K_ACCESSIBLE K_NON_ACCESSIBLE K_DISCOURAGED IGNORE_IF_BETTER org.aspectj.org.eclipse.jdt.core.IAccessRule","InitializerSignature":"getInitializer getInitializer getInitializer org.aspectj.lang.reflect.InitializerSignature org.aspectj.lang.reflect.InitializerSignature org.aspectj.lang.reflect.InitializerSignature /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC),\r\n *               2006 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC),\r\n *               2006 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC),\r\n *               2006 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","CompletionOnMemberAccess":"printExpression resolveType isInsideAnnotation org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnMemberAccess  $NON-NLS-1$\r\n","MethodReferenceMatch":"isConstructor isSynthetic isSuperInvocation constructor synthetic superInvocation org.aspectj.org.eclipse.jdt.core.search.MethodReferenceMatch","MethodDeclaration":"propertyDescriptors internalStructuralPropertiesForType internalGetSetIntProperty internalGetSetBooleanProperty internalGetSetChildProperty internalGetChildListProperty internalJavadocProperty internalModifiers2Property internalModifiersProperty getNodeType0 clone0 subtreeMatch0 accept0 isConstructor setConstructor typeParameters getName setName parameters isVarargs thrownExceptions getReturnType internalGetReturnType setReturnType internalSetReturnType getReturnType2 setReturnType2 getExtraDimensions setExtraDimensions getBody setBody resolveBinding memSize treeSize analyseCode isMethod parseStatements printReturnType resolveStatements traverse typeParameters JAVADOC_PROPERTY MODIFIERS_PROPERTY MODIFIERS2_PROPERTY CONSTRUCTOR_PROPERTY NAME_PROPERTY RETURN_TYPE_PROPERTY RETURN_TYPE2_PROPERTY EXTRA_DIMENSIONS_PROPERTY TYPE_PARAMETERS_PROPERTY PARAMETERS_PROPERTY THROWN_EXCEPTIONS_PROPERTY BODY_PROPERTY PROPERTY_DESCRIPTORS_2_0 PROPERTY_DESCRIPTORS_3_0 isConstructor methodName parameters returnType returnType2Initialized typeParameters extraArrayDimensions thrownExceptions optionalBody returnType typeParameters org.aspectj.org.eclipse.jdt.core.dom.MethodDeclaration org.aspectj.org.eclipse.jdt.internal.compiler.ast.MethodDeclaration  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  AspectJ extension - made protected instead of private\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  n.b. visit return type even for constructors\r\n  more efficient than just calling unsupportedIn2() to check\r\n  lazy init must be thread-safe for readers\r\n  more efficient than just calling unsupportedIn2() to check\r\n  lazy init must be thread-safe for readers\r\n  lazy init must be thread-safe for readers\r\n  a MethodDeclaration may occur in a Block - must check cycles\r\n  starting of the code analysis for methods\r\n  skip enum implicit methods\r\n  may be in a non necessary <clinit> for innerclass with static final constant fields\r\n  tag parameters as being set\r\n  propagate to statements\r\n  check for missing returning path\r\n  check unreachable catch blocks\r\n  fill up the method body with statement\r\n  ========= abort on fatal error =============\r\n  check if method with constructor name\r\n  check @Override annotation\r\n  actually overrides, but did not claim to do so\r\n  no static method is considered overriding\r\n  in 1.6 and above, also tolerate implementing interface method\r\n  claims to override, and doesn't actually do so\r\n  the method HAS a body --> abstract native modifiers are forbiden\r\n  native methods may have a semicolon body\r\n  by grammatical construction, interface methods are always abstract\r\n  TagBits.OverridingMethodWithSupercall is set during the resolveStatements() call\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t * @since 3.0\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /*package*/\r\n /*package*/\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","DeclarationOfReferencedMethodsPattern":"enclosingElement knownMethods org.aspectj.org.eclipse.jdt.internal.core.search.matching.DeclarationOfReferencedMethodsPattern","InitializerSignatureImpl":"getName createToString getInitializer getName createToString getInitializer getName createToString getInitializer constructor constructor constructor org.aspectj.runtime.reflect.InitializerSignatureImpl org.aspectj.runtime.reflect.InitializerSignatureImpl org.aspectj.runtime.reflect.InitializerSignatureImpl  nothing we can do, caller will see null\r\n  nothing we can do, caller will see null\r\n  nothing we can do, caller will see null\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.runtime.reflect.MemberSignatureImpl#createAccessibleObject()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.runtime.reflect.MemberSignatureImpl#createAccessibleObject()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.runtime.reflect.MemberSignatureImpl#createAccessibleObject()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","NLSTag":"toString start end lineNumber index org.aspectj.org.eclipse.jdt.internal.compiler.parser.NLSTag  $NON-NLS-1$","CatchClauseSignatureImpl":"getParameterType getParameterName createToString getParameterType getParameterName createToString getParameterType getParameterName createToString parameterType parameterName parameterType parameterName parameterType parameterName org.aspectj.runtime.reflect.CatchClauseSignatureImpl org.aspectj.runtime.reflect.CatchClauseSignatureImpl org.aspectj.runtime.reflect.CatchClauseSignatureImpl /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","PointcutWizard":"serialVersionUID jPanel1 jPanel2 jPanel4 jLabel1 borderLayout1 borderLayout2 borderLayout3 jLabel4 jPanel3 jCheckBox5 jCheckBox4 jCheckBox3 jCheckBox2 jCheckBox1 cancel_button ok_button jPanel5 org.aspectj.ajde.ui.swing.PointcutWizard  import java.awt.event.ActionEvent;\r\n  this.signatures = signatures;\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","CFlowStack":"getThreadStack push pushInstance push pop peek get peekInstance peekCFlow peekTopCFlow isValid getThreadLocalStackFactory getThreadLocalStackFactoryFor11 selectFactoryForVMVersion getSystemPropertyWithoutSecurityException getThreadStackFactoryClassName getThreadStack push pushInstance push pop peek get peekInstance peekCFlow peekTopCFlow isValid getThreadLocalStackFactory getThreadLocalStackFactoryFor11 selectFactoryForVMVersion getSystemPropertyWithoutSecurityException getThreadStackFactoryClassName getThreadStack push pushInstance push pop peek get peekInstance peekCFlow peekTopCFlow isValid getThreadLocalStackFactory getThreadLocalStackFactoryFor11 selectFactoryForVMVersion getSystemPropertyWithoutSecurityException getThreadStackFactoryClassName tsFactory stackProxy tsFactory stackProxy tsFactory stackProxy org.aspectj.runtime.internal.CFlowStack org.aspectj.runtime.internal.CFlowStack org.aspectj.runtime.internal.CFlowStack  XXX dangerous, try to remove\r\n  Java 1.2 is version 46.0 and above\r\n  System.err.println(\"Trying to use thread local implementation? \"+useThreadLocalImplementation);\r\n  For debug ...\r\n  XXX dangerous, try to remove\r\n  Java 1.2 is version 46.0 and above\r\n  System.err.println(\"Trying to use thread local implementation? \"+useThreadLocalImplementation);\r\n  For debug ...\r\n  XXX dangerous, try to remove\r\n  Java 1.2 is version 46.0 and above\r\n  System.err.println(\"Trying to use thread local implementation? \"+useThreadLocalImplementation);\r\n  For debug ...\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","DeclareErrorOrWarning":"getDeclaringType getPointcutExpression getMessage isError toString equals hashCode accept write read isError getMessage getPointcut resolve parameterizeWith isAdviceLike getNameSuffix getName getDeclaringType getPointcutExpression getMessage isError toString equals hashCode accept write read isError getMessage getPointcut resolve parameterizeWith isAdviceLike getNameSuffix getName isError pointcut message isError pointcut message org.aspectj.lang.reflect.DeclareErrorOrWarning org.aspectj.weaver.patterns.DeclareErrorOrWarning org.aspectj.lang.reflect.DeclareErrorOrWarning org.aspectj.weaver.patterns.DeclareErrorOrWarning /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","HashtableOfPackage":"containsKey get put rehash size toString keyTable valueTable elementSize threshold org.aspectj.org.eclipse.jdt.internal.compiler.util.HashtableOfPackage  to avoid using Enumerations, walk the individual tables skipping nulls\r\n  number of elements in the table\r\n  usually not very large\r\n  size represents the expected number of elements\r\n  assumes the threshold is never equal to the size of the table\r\n  double the number of expected elements\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","Utils":"isSuppressing isSuppressing org.aspectj.weaver.Utils org.aspectj.weaver.Utils  2. there are values specified (i.e. @SuppressAjWarnings(\"A\") or @SuppressAjWarnings({\"A\",\"B\"})\r\n  Slightly lazy, just doing a string indexof\r\n  Go through the annotation types on the advice\r\n  2. there are values specified (i.e. @SuppressAjWarnings(\"A\") or @SuppressAjWarnings({\"A\",\"B\"})\r\n  Slightly lazy, just doing a string indexof\r\n  Go through the annotation types on the advice\r\n /* *******************************************************************\r\n * Copyright (c) 2008 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2008 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","IClasspathContainer":"getClasspathEntries getDescription getKind getPath K_APPLICATION K_SYSTEM K_DEFAULT_SYSTEM org.aspectj.org.eclipse.jdt.core.IClasspathContainer","PointcutEvaluationExpenseComparator":"compare getScore compare getScore MATCHES_NOTHING WITHIN ATWITHIN STATICINIT ADVICEEXECUTION HANDLER GET_OR_SET WITHINCODE ATWITHINCODE EXE_INIT_PREINIT CALL ANNOTATION THIS_OR_TARGET AT_THIS_OR_TARGET ARGS AT_ARGS CFLOW IF OTHER MATCHES_NOTHING WITHIN ATWITHIN STATICINIT ADVICEEXECUTION HANDLER GET_OR_SET WITHINCODE ATWITHINCODE EXE_INIT_PREINIT CALL ANNOTATION THIS_OR_TARGET AT_THIS_OR_TARGET ARGS AT_ARGS CFLOW IF OTHER org.aspectj.weaver.patterns.PointcutEvaluationExpenseComparator org.aspectj.weaver.patterns.PointcutEvaluationExpenseComparator  important property for a well-defined comparator\r\n  sort by hashCode\r\n  a higher score means a more expensive evaluation\r\n  important property for a well-defined comparator\r\n  sort by hashCode\r\n  a higher score means a more expensive evaluation\r\n /*not allowed if ne*/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /*not allowed if ne*/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","ASTMatcher":"safeSubtreeListMatch safeSubtreeMatch safeEquals match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match compareDeprecatedComment match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match match matchDocTags org.aspectj.org.eclipse.jdt.core.dom.ASTMatcher  N.B. call subtreeMatch even node1==node2!=null\r\n  node type added in JLS3 - ignore old JLS2-style modifiers\r\n  node type added in JLS3 - ignore old JLS2-style modifiers\r\n  be careful not to trigger lazy creation of extended operand lists\r\n  n.b. compare type parameters even for constructors\r\n  n.b. compare return type even for constructors\r\n","CharacterLiteral":"propertyDescriptors internalStructuralPropertiesForType internalGetSetObjectProperty getNodeType0 clone0 subtreeMatch0 accept0 getEscapedValue setEscapedValue internalSetEscapedValue charValue setCharValue memSize treeSize ESCAPED_VALUE_PROPERTY PROPERTY_DESCRIPTORS escapedValue org.aspectj.org.eclipse.jdt.core.dom.CharacterLiteral  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  check setInternalEscapedValue(String) if this method is changed\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  octal (well-formed: ended by a ' )\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  opening delimiter\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  closing delimiter\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * This method is a copy of setEscapedValue(String) that doesn't do any validation.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","DefaultPointcut":"getDetail setDetail propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty clone0 subtreeMatch0 accept0 treeSize detail org.aspectj.org.eclipse.jdt.core.dom.DefaultPointcut  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  boolean visitChildren =\r\n","ExceptionLabel":"place placeEnd placeStart toString ranges count exceptionType org.aspectj.org.eclipse.jdt.internal.compiler.codegen.ExceptionLabel  incremented each time placeStart or placeEnd is called\r\n  register the handler inside the codeStream then normal place\r\n  $NON-NLS-1$   discard empty exception handler\r\n  reopen current handler\r\n  only need to grow on even additions (i.e. placeStart only)\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","IClasspathEntry":"combineAccessRules getAccessRules getContentKind getEntryKind getExclusionPatterns getExtraAttributes getInclusionPatterns getOutputLocation getPath getSourceAttachmentPath getSourceAttachmentRootPath isExported getResolvedEntry CPE_LIBRARY CPE_PROJECT CPE_SOURCE CPE_VARIABLE CPE_CONTAINER org.aspectj.org.eclipse.jdt.core.IClasspathEntry","ClasspathChange":"addClasspathDeltas classpathContains collectAllSubfolders determineAffectedPackageFragments equals generateDelta getSourceAttachmentDeltaFlag hashCode requestIndexing toString NO_DELTA HAS_DELTA HAS_PROJECT_CHANGE project oldRawClasspath oldOutputLocation oldResolvedClasspath org.aspectj.org.eclipse.jdt.internal.core.ClasspathChange  check custom outputs\r\n  check inclusion patterns\r\n  since IPath.equals is specified to ignore trailing separators\r\n  check exclusion patterns\r\n  since IPath.equals is specified to ignore trailing separators\r\n  see if this will cause any package fragments to be affected\r\n  only changes if it actually existed\r\n  now the output location becomes a package fragment - along with any subfolders\r\n  the delta processor will create an ADDED project delta, and index the project\r\n  project no longer exist\r\n  get new info\r\n  use synchronized block to ensure consistency\r\n  check if raw classpath has changed\r\n  if no changes to resolved classpath, nothing more to do\r\n  close cached info\r\n  remote project changes\r\n  reordering of the classpath\r\n  check source attachment\r\n  force detach source on jar package fragment roots (source will be lazily computed when needed)\r\n  force detach source on jar package fragment roots (source will be lazily computed when needed)\r\n  remote project changes\r\n  use old root if any (could be none if entry wasn't bound)\r\n  inside original project\r\n  don't check existency\r\n  don't retrieve exported roots\r\n  remote project changes\r\n  see if this will cause any package fragments to be removed\r\n  see if a change in output location will cause any package fragments to be added  project doesn't exist\r\n  remote projects are not indexed in this project\r\n  For a lib folder or a .jar file, remove the corresponding index if not shared.\r\n  if root was not shared\r\n  remote projects are not indexed in this project\r\n  Request indexing\r\n  $NON-NLS-1$\r\n /*\r\n\t * Returns the index of the item in the list if the given list contains the specified entry. If the list does\r\n\t * not contain the entry, -1 is returned.\r\n\t */\r\n /*\r\n\t * Recursively adds all subfolders of <code>folder</code> to the given collection.\r\n\t */\r\n /*\r\n\t * Returns a collection of package fragments that have been added/removed\r\n\t * as the result of changing the output location to/from the given\r\n\t * location. The collection is empty if no package fragments are\r\n\t * affected.\r\n\t */\r\n /*no reverse map*/\r\n /*\r\n\t * Generates a classpath change delta for this classpath change.\r\n\t * Returns whether a delta was generated, and whether project reference have changed.\r\n\t */\r\n /*\r\n\t * Returns the source attachment flag for the delta between the 2 give source paths.\r\n\t * Returns either F_SOURCEATTACHED, F_SOURCEDETACHED, F_SOURCEATTACHED | F_SOURCEDETACHED\r\n\t * or 0 if there is no difference.\r\n\t */\r\n /*\r\n\t * Request the indexing of entries that have been added, and remove the index for removed entries.\r\n\t */\r\n","IBufferChangedListener":"bufferChanged org.aspectj.org.eclipse.jdt.core.IBufferChangedListener","AjIncrementalImageBuilder":"acceptResult org.aspectj.ajdt.internal.core.builder.AjIncrementalImageBuilder /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.ICompilerRequestor#acceptResult(org.eclipse.jdt.internal.compiler.CompilationResult)\r\n\t */\r\n","ConstructorPattern":"createIndexKey decodeIndexKey getBlankPattern getIndexCategories hasConstructorArguments hasConstructorParameters matchesDecodedKey mustResolve queryIn print findDeclarations findReferences declaringQualification declaringSimpleName parameterQualifications parameterSimpleNames parameterCount varargs parametersTypeSignatures parametersTypeArguments constructorParameters constructorArguments REF_CATEGORIES REF_AND_DECL_CATEGORIES DECL_CATEGORIES org.aspectj.org.eclipse.jdt.internal.core.search.matching.ConstructorPattern  Signatures and arguments for generic search\r\n  $NON-NLS-1$\r\n  skip first synthetic parameter\r\n  Set flags\r\n  Get unique key for parameterized constructors\r\n  Store type signature and arguments for declaring type\r\n  store type signatures and arguments for method parameters type\r\n  Store type signatures and arguments for method\r\n  boolean varargs,\r\n  Store type signature and arguments for declaring type\r\n  Store type signatures and arguments for method parameters type\r\n  Store type signatures and arguments for method\r\n  parameter types\r\n  need to check resolved default constructors and explicit constructor calls\r\n  can be null\r\n  do a prefix query with the declaringSimpleName\r\n  do a prefix query with the declaringSimpleName\r\n  else do a pattern query with just the declaringSimpleName\r\n  TODO (frederic) implement regular expression match\r\n  match rule is irrelevant when the key is null\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n * Instanciate a method pattern with signatures for generics search\r\n */\r\n /*\r\n * Instanciate a method pattern with signatures for generics search\r\n */\r\n","NewConstructorTypeMunger":"equals hashCode write readConstructor getExplicitConstructor getSyntheticConstructor setExplicitConstructor getMatchingSyntheticMember check parameterizedFor equals hashCode write readConstructor getExplicitConstructor getSyntheticConstructor setExplicitConstructor getMatchingSyntheticMember check parameterizedFor syntheticConstructor explicitConstructor hashCode syntheticConstructor explicitConstructor hashCode org.aspectj.weaver.NewConstructorTypeMunger org.aspectj.weaver.NewConstructorTypeMunger  reset hashCode so that its recalculated with new value\r\n  For raw and 'normal' parameterized targets  (e.g. Interface, Interface<String>)\r\n  in the original ITD declaration to the ones used in the actual target type declaration.\r\n  reset hashCode so that its recalculated with new value\r\n  For raw and 'normal' parameterized targets  (e.g. Interface, Interface<String>)\r\n  in the original ITD declaration to the ones used in the actual target type declaration.\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","IModelFilter":"processFilelocation wantsHandleIds processFilelocation wantsHandleIds org.aspectj.asm.IModelFilter org.aspectj.asm.IModelFilter /* *******************************************************************\r\n * Copyright (c) 2006 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement IBM     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2006 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement IBM     initial implementation \r\n * ******************************************************************/\r\n","UnresolvedType":"isPrimitiveType isSimpleType isRawType isGenericType isParameterizedType isTypeVariableReference isGenericWildcard getTypekind isArray equals hashCode getSize makeArray forName forNames forGenericType forGenericTypeSignature forGenericTypeVariables forRawTypeName add insert forSignature forSignatures getName getSimpleName getRawName getBaseName getSimpleBaseName getNames getSignature getErasureSignature needsModifiableDelegate setNeedsModifiableDelegate getRawType getOutermostType getComponentType toString toDebugString resolve signatureToName nameToSignature write read writeArray readArray getNameAsIdentifier getPackageNameAsIdentifier getPackageName getTypeParameters getClassName getTypeVariables toString getTypeVariableNamed toTraceString parameterize isPrimitiveType isSimpleType isRawType isGenericType isParameterizedType isTypeVariableReference isGenericWildcard getTypekind isArray equals hashCode getSize makeArray forName forNames forGenericType forGenericTypeSignature forGenericTypeVariables forRawTypeName add insert forSignature forSignatures getName getSimpleName getRawName getBaseName getSimpleBaseName getNames getSignature getErasureSignature needsModifiableDelegate setNeedsModifiableDelegate getRawType getOutermostType getComponentType toString toDebugString resolve signatureToName nameToSignature write read writeArray readArray getNameAsIdentifier getPackageNameAsIdentifier getPackageName getTypeParameters getClassName getTypeVariables toString getTypeVariableNamed toTraceString parameterize NONE OBJECT OBJECTARRAY CLONEABLE SERIALIZABLE THROWABLE RUNTIME_EXCEPTION ERROR AT_INHERITED AT_RETENTION ENUM ANNOTATION JAVA_LANG_CLASS JAVA_LANG_CLASS_ARRAY JAVA_LANG_STRING JAVA_LANG_EXCEPTION JAVA_LANG_REFLECT_METHOD JAVA_LANG_ANNOTATION SUPPRESS_AJ_WARNINGS AT_TARGET SOMETHING ARRAY_WITH_JUST_OBJECT JOINPOINT_STATICPART JOINPOINT_ENCLOSINGSTATICPART MISSING_NAME typeKind signature signatureErasure typeParameters typeVariables needsModifiableDelegate PRIMITIVE SIMPLE RAW GENERIC PARAMETERIZED TYPE_VARIABLE WILDCARD type NONE OBJECT OBJECTARRAY CLONEABLE SERIALIZABLE THROWABLE RUNTIME_EXCEPTION ERROR AT_INHERITED AT_RETENTION ENUM ANNOTATION JAVA_LANG_CLASS JAVA_LANG_CLASS_ARRAY JAVA_LANG_STRING JAVA_LANG_EXCEPTION JAVA_LANG_REFLECT_METHOD JAVA_LANG_ANNOTATION SUPPRESS_AJ_WARNINGS AT_TARGET SOMETHING ARRAY_WITH_JUST_OBJECT JOINPOINT_STATICPART JOINPOINT_ENCLOSINGSTATICPART MISSING_NAME typeKind signature signatureErasure typeParameters typeVariables needsModifiableDelegate PRIMITIVE SIMPLE RAW GENERIC PARAMETERIZED TYPE_VARIABLE WILDCARD type org.aspectj.weaver.UnresolvedType org.aspectj.weaver.UnresolvedType  common types referred to by the weaver\r\n  this doesn't belong here and will get moved to ResolvedType later in the refactoring\r\n  what kind of type am I?\r\n  OPTIMIZE should be no state in here that will damage whether equals() is correct...\r\n  for any reference type, we can get some extra information...\r\n  called from TypeFactory\r\n  OPTIMIZE change users of this to use forSignature, especially for simple cases\r\n  TODO asc generics needs a declared sig\r\n  + \" - \" + getKind();\r\n  it's one of our parameterized type sigs\r\n  Map<String,List<Integer>> -> Ljava  if (signature.charAt(1)=='>') return signatureToName(signature.substring(2));\r\n  check if someone is calling us with something that is a signature already\r\n  not parameterised\r\n  an inner type of a parameterized type that specifies no type parameters of its own.\r\n  a type with NO type parameters  the erasure of a generic type\r\n  a generic type\r\n  a parameterized type\r\n  a type variable\r\n  a generic wildcard type\r\n  OPTIMIZE methods like this just allow callers to be lazy and not ensure they are working with the right (resolved) subtype\r\n  common types referred to by the weaver\r\n  this doesn't belong here and will get moved to ResolvedType later in the refactoring\r\n  what kind of type am I?\r\n  OPTIMIZE should be no state in here that will damage whether equals() is correct...\r\n  for any reference type, we can get some extra information...\r\n  called from TypeFactory\r\n  OPTIMIZE change users of this to use forSignature, especially for simple cases\r\n  TODO asc generics needs a declared sig\r\n  + \" - \" + getKind();\r\n  it's one of our parameterized type sigs\r\n  Map<String,List<Integer>> -> Ljava  if (signature.charAt(1)=='>') return signatureToName(signature.substring(2));\r\n  check if someone is calling us with something that is a signature already\r\n  not parameterised\r\n  an inner type of a parameterized type that specifies no type parameters of its own.\r\n  a type with NO type parameters  the erasure of a generic type\r\n  a generic type\r\n  a parameterized type\r\n  a type variable\r\n  a generic wildcard type\r\n  OPTIMIZE methods like this just allow callers to be lazy and not ensure they are working with the right (resolved) subtype\r\n /* *******************************************************************\r\n * Copyright (c) 2002,2005 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n *     Andy Clement  start of generics upgrade...\r\n *     Adrian Colyer - overhaul\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002,2005 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n *     Andy Clement  start of generics upgrade...\r\n *     Adrian Colyer - overhaul\r\n * ******************************************************************/\r\n","IJavaSearchResultCollector":"aboutToStart accept done getProgressMonitor EXACT_MATCH POTENTIAL_MATCH org.aspectj.org.eclipse.jdt.core.search.IJavaSearchResultCollector","DeclareWarningDeclaration":"clone0 subtreeMatch0 accept0 internalModifiersProperty internalModifiers2Property internalJavadocProperty propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getPointcut setPointcut getMessage setMessage JAVADOC_PROPERTY POINTCUT_PROPERTY MESSAGE_PROPERTY PROPERTY_DESCRIPTORS_2_0 PROPERTY_DESCRIPTORS_3_0 pointcut message org.aspectj.org.eclipse.jdt.core.dom.DeclareWarningDeclaration  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  allow default implementation to flag the error\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t * \r\n\t * There are no modifiers declared for DeclareErrorDeclaration - \r\n\t * therefore we don't do anything with this\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t * \r\n\t * There are no modifiers declared for DeclareErrorDeclaration - \r\n\t * therefore we don't do anything with this\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","TypeIds":"T_undefined T_JavaLangObject T_char T_byte T_short T_boolean T_void T_long T_double T_float T_int T_JavaLangString T_null T_JavaLangClass T_JavaLangStringBuffer T_JavaLangSystem T_JavaLangError T_JavaLangReflectConstructor T_JavaLangThrowable T_JavaLangNoClassDefError T_JavaLangClassNotFoundException T_JavaLangRuntimeException T_JavaLangException T_JavaLangByte T_JavaLangShort T_JavaLangCharacter T_JavaLangInteger T_JavaLangLong T_JavaLangFloat T_JavaLangDouble T_JavaLangBoolean T_JavaLangVoid T_JavaLangAssertionError T_JavaLangCloneable T_JavaIoSerializable T_JavaLangIterable T_JavaUtilIterator T_JavaLangStringBuilder T_JavaLangEnum T_JavaLangIllegalArgumentException T_JavaLangAnnotationAnnotation T_JavaLangDeprecated T_JavaLangAnnotationDocumented T_JavaLangAnnotationInherited T_JavaLangOverride T_JavaLangAnnotationRetention T_JavaLangSuppressWarnings T_JavaLangAnnotationTarget T_JavaLangAnnotationRetentionPolicy T_JavaLangAnnotationElementType T_JavaIoPrintStream T_JavaLangReflectField T_JavaLangReflectMethod T_JavaIoExternalizable T_JavaIoObjectStreamException T_JavaIoException NoId IMPLICIT_CONVERSION_MASK COMPILE_TYPE_MASK Boolean2Int Boolean2String Boolean2Boolean Byte2Byte Byte2Short Byte2Char Byte2Int Byte2Long Byte2Float Byte2Double Byte2String Short2Byte Short2Short Short2Char Short2Int Short2Long Short2Float Short2Double Short2String Char2Byte Char2Short Char2Char Char2Int Char2Long Char2Float Char2Double Char2String Int2Byte Int2Short Int2Char Int2Int Int2Long Int2Float Int2Double Int2String Long2Byte Long2Short Long2Char Long2Int Long2Long Long2Float Long2Double Long2String Float2Byte Float2Short Float2Char Float2Int Float2Long Float2Float Float2Double Float2String Double2Byte Double2Short Double2Char Double2Int Double2Long Double2Float Double2Double Double2String String2String Object2String Null2String Object2Object BOXING UNBOXING org.aspectj.org.eclipse.jdt.internal.compiler.lookup.TypeIds  should not be changed\r\n  well-known exception types\r\n  wrapper types\r\n  1.4 features\r\n  array interfaces\r\n  1.5 features\r\n  implicit conversions: <compileType> to <runtimeType>  (note: booleans are integers at runtime)\r\n","PointcutDeclaration":"getPointcut parseStatements postParse isAtAspectJ addAtAspectJAnnotations getPointcutText buildArgNameRepresentation setGenerateSyntheticPointcutMethod resolve resolvePointcut resolveStatements makeResolvedPointcutDefinition makeAttribute generateCode addVersionAttributeIfNecessary generateInfoAttributes printReturnType printBody getDesignator setDesignator getName setName propertyDescriptors internalStructuralPropertiesForType internalGetSetIntProperty internalGetSetChildProperty internalGetChildListProperty internalJavadocProperty internalModifiersProperty internalModifiers2Property getNodeType0 clone0 subtreeMatch0 accept0 parameters memSize treeSize mangledPrefix pointcutDesignator declaredModifiers declaredName generateSyntheticPointcutMethod world resolvedPointcutDeclaration weaverVersionChars pointcutName NAME_PROPERTY pointcutDesignator DESIGNATOR_PROPERTY PARAMETERS_PROPERTY JAVADOC_PROPERTY MODIFIERS_PROPERTY MODIFIERS2_PROPERTY PROPERTY_DESCRIPTORS_2_0 PROPERTY_DESCRIPTORS_3_0 parameters org.aspectj.ajdt.internal.compiler.ast.PointcutDeclaration org.aspectj.org.eclipse.jdt.core.dom.PointcutDeclaration  if (mangleSelector) {\r\n  check for @Aspect\r\n  has been wrecked by resolution, try to reconstruct from tokens\r\n  coming from an @Pointcut declaration\r\n  now at the 'right' time.\r\n  System.out.println(\"resolved: \" + getPointcut() + \", \" + getPointcut().state);\r\n  ??? might want to\r\n  System.out.println(\"pc: \" + getPointcut() + \", \" + getPointcut().state);\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  lazy init must be thread-safe for readers\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  ajh02: hmmmmmmm.. should make a POINTCUT_DECLARATION thing\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration#printBody(int, java.lang.StringBuffer)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t * @since 3.0\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","MethodLocator":"clear initializePolymorphicSearch isTypeInSuperDeclaringTypeNames isVirtualInvoke match match match match match matchContainer matchLevelAndReportImportRef matchMethod matchOverriddenMethod matchReportReference matchReportReference methodParametersEqualsPattern newDeclarationMatch referenceType reportDeclaration resolveLevel resolveLevel resolveLevel resolveLevelAsSubtype resolveLevelAsSuperInvocation toString pattern isDeclarationOfReferencedMethodsPattern allSuperDeclaringTypeNames methodDeclarationsWithInvalidParam org.aspectj.org.eclipse.jdt.internal.core.search.matching.MethodLocator  extra reference info\r\n  method declarations which parameters verification fail\r\n  $NON-NLS-1$\r\n  With static import, we can have static method reference in import reference\r\n  Verify method name\r\n  Verify parameters types\r\n  (see  bugs https:  Do not return as impossible when source level is at least 1.5\r\n  Verify type arguments (do not reject if pattern has no argument as it can be an erasure match)\r\n  Method declaration may match pattern\r\n  public int match(FieldDeclaration node, MatchingNodeSet nodeSet) - SKIP IT\r\n  public int match(Reference node, MatchingNodeSet nodeSet) - SKIP IT\r\n  need to look almost everywhere to find in javadocs and static import\r\n  int newLevel = resolveLevelForType(this.pattern.returnSimpleName, this.pattern.returnQualification, this.pattern.returnTypeArguments, 0, method.returnType);\r\n  can only be downgraded\r\n  look at return type only if declaring type is not specified\r\n  parameter types\r\n  global verification\r\n  return inaccurate match for ambiguous call (bug 80890)\r\n  newLevel = resolveLevelForType(this.pattern.parameterSimpleNames[i], this.pattern.parameterQualifications[i], this.pattern.parametersTypeArguments[i], 0, argType);\r\n  only compare source name for member type (bug 41018)\r\n  (see  bugs https:  can only be downgraded\r\n  verify each parameter\r\n  matches superclass\r\n  matches interfaces\r\n  finally the match was not possible\r\n  (see bug 70827)\r\n  need exact match to be able to open on type ref\r\n  element that references the method must be included in the enclosing element\r\n  Look if there's a need to special report for parameterized type\r\n  binding has no type params, compatible erasure if pattern does\r\n  Special case for errors\r\n  parameterized generic method\r\n  Update match regarding method type arguments\r\n  Update match regarding declaring class type arguments\r\n  Special case for errors\r\n  impossible match\r\n  Report match\r\n  First see if this reference has already been resolved => report match if validated\r\n  If method parameters verification was not valid, then try to see if method arguments can match a method in hierarchy\r\n  case of a secondary type\r\n  declaring type\r\n  since any declaring class will do\r\n  return the weaker match\r\n  see bug https:  receiver type\r\n  since any declaring class will do\r\n  since this is an ACCURATE_MATCH so return the possibly weaker match\r\n  this is an overridden method => add flavor to returned level\r\n  level got some flavors => return it\r\n  return the weaker match\r\n  if concrete class, then method is overridden\r\n  need to verify if method may be overridden\r\n  this method is already overridden on a super class, current match is impossible\r\n  one method match in hierarchy\r\n  store the fact that the method is overridden\r\n  add flavor to returned level\r\n  matches superclass\r\n  matches interfaces\r\n  if concrete class, then method is overridden\r\n  add flavor to returned level\r\n  already verified before enter into this method (see resolveLevel(MessageSend))\r\n  this branch has been already verified by the test above\r\n  $NON-NLS-1$\r\n /*\r\n * Clear caches\r\n */\r\n /*\r\n * Return whether a type name is in pattern all super declaring types names.\r\n */\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.internal.core.search.matching.PatternLocator#matchLevelAndReportImportRef(org.aspectj.org.eclipse.jdt.internal.compiler.ast.ImportReference, org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Binding, org.aspectj.org.eclipse.jdt.internal.core.search.matching.MatchLocator)\r\n * Accept to report match of static field on static import\r\n */\r\n /*not constructor*/\r\n /*not synthetic*/\r\n /*parameterizedMethodBinding.isRaw ? null :*/\r\n /*\r\n * Return whether method parameters are equals to pattern ones.\r\n */\r\n /*\r\n * Return whether the given type binding or one of its possible super interfaces\r\n * matches a type in the declaring type names hierarchy.\r\n */\r\n","ConstantPoolEntry":"getKind setKind getClassInfoNameIndex getClassIndex getNameAndTypeIndex getStringIndex getStringValue getIntegerValue getFloatValue getDoubleValue getLongValue getNameAndTypeInfoDescriptorIndex getNameAndTypeInfoNameIndex getClassName getFieldName getMethodName getFieldDescriptor getMethodDescriptor getUtf8Value getClassInfoName setClassInfoNameIndex setClassIndex setNameAndTypeIndex setStringIndex setStringValue setIntegerValue setFloatValue setDoubleValue setLongValue getNameAndTypeDescriptorIndex setNameAndTypeDescriptorIndex getNameAndTypeNameIndex setNameAndTypeNameIndex setClassName setFieldName setMethodName setFieldDescriptor setMethodDescriptor setUtf8Value setClassInfoName getUtf8Length setUtf8Length reset kind classInfoNameIndex classIndex nameAndTypeIndex stringIndex stringValue integerValue floatValue doubleValue longValue nameAndTypeDescriptorIndex nameAndTypeNameIndex className fieldName methodName fieldDescriptor methodDescriptor utf8Value utf8Length classInfoName org.aspectj.org.eclipse.jdt.internal.core.util.ConstantPoolEntry","BuildProgressPanel":"setProgressText setConfigFile setProgressBarVal setProgressBarMax getProgressBarMax incrementProgressBarVal finish jbInit cancel_button_actionPerformed isCancelRequested MAX_VAL borderLayout1 cancel_panel cancel_button jPanel2 progress_label configFile_label borderLayout3 jPanel1 compile_progressBar buildIsCancelled org.aspectj.ajde.ui.swing.BuildProgressPanel  private static final long serialVersionUID = -8045879840621749183L;\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation\r\n *     Helen Hawkins  Converted to new interface (bug 148190)  \r\n * ******************************************************************/\r\n","LRUCache":"toString clone fillingRatio flush flush get getCurrentSpace getSpaceLimit keys keysAndValues makeSpace newInstance peek privateAdd privateAddEntry privateRemoveEntry put removeKey setSpaceLimit spaceFor toString toStringContents toStringFillingRation updateTimestamp _fKey _fValue _fTimestamp _fSpace _fPrevious _fNext fCurrentSpace fSpaceLimit fTimestampCounter fEntryTable fEntryQueue fEntryQueueTail DEFAULT_SPACELIMIT fValues fEntry org.aspectj.org.eclipse.jdt.internal.core.util.LRUCache  $NON-NLS-3$   Remember last entry\r\n  Clear it out\r\n  send deletion notifications in LRU order\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* Preserve order of entries by copying from oldest to newest */\r\n /* If entry does not exist, return */\r\n /* if space is already available */\r\n /* if entry is too big for cache */\r\n /* Free up space by removing oldest entries */\r\n /* this is the first and last entry */\r\n /* if this was the first entry */\r\n /* if this was the last entry */\r\n /* Check whether there's an entry in the cache */\r\n","CreateInitializerOperation":"generateElementAST generateResultHandle getMainTaskName rename initializeDefaultPosition numberOfInitializers org.aspectj.org.eclipse.jdt.internal.core.CreateInitializerOperation  update the children to be current\r\n  intializer cannot be renamed\r\n","MarkerAnnotation":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty internalTypeNameProperty getNodeType0 clone0 subtreeMatch0 accept0 memSize treeSize memberValuePairs traverse TYPE_NAME_PROPERTY PROPERTY_DESCRIPTORS org.aspectj.org.eclipse.jdt.core.dom.MarkerAnnotation org.aspectj.org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /*\r\n * Created on 2004-03-11\r\n *\r\n * To change the template for this generated file go to\r\n * Window - Preferences - Java - Code Generation - Code and Comments\r\n */\r\n","BuildContext":"getContents getFile hasAnnotations recordAddedGeneratedFiles recordDeletedGeneratedFiles recordDependencies recordNewProblems org.aspectj.org.eclipse.jdt.core.compiler.BuildContext  only set during processAnnotations\r\n  always make a copy even if currently empty\r\n  always make a copy even if currently empty\r\n  always make a copy even if currently empty\r\n  always make a copy even if currently empty\r\n","ITokenSource":"next peek peek getIndex setIndex getSourceContext next peek peek getIndex setIndex getSourceContext org.aspectj.weaver.patterns.ITokenSource org.aspectj.weaver.patterns.ITokenSource /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","LocalVariableReferenceMatch":"isReadAccess isWriteAccess isReadAccess isWriteAccess org.aspectj.org.eclipse.jdt.core.search.LocalVariableReferenceMatch","ImportReference":"isStatic getImportName print print traverse tokens sourcePositions declarationEnd declarationSourceStart declarationSourceEnd modifiers annotations org.aspectj.org.eclipse.jdt.internal.compiler.ast.ImportReference  each entry is using the code : (start<<32) + end\r\n  doesn't include an potential trailing comment\r\n  1.5 addition for static imports\r\n  $NON-NLS-1$\r\n  annotations are traversed during the compilation unit traversal using a class scope\r\n /* when withOnDemand is false, only the name is printed */\r\n","KnownMessageSend":"manageSyntheticAccessIfNecessary resolveMethodBinding toStringExpression generateCode org.aspectj.ajdt.internal.compiler.ast.KnownMessageSend  System.out.println(\"about to generate: \"  +this + \" args: \" + Arrays.asList(arguments));\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","ConstantValueAttribute":"getConstantValue getConstantValueIndex constantValueIndex constantPoolEntry org.aspectj.org.eclipse.jdt.internal.core.util.ConstantValueAttribute","ISignatureAttribute":"getSignatureIndex getSignature org.aspectj.org.eclipse.jdt.core.util.ISignatureAttribute","AND_AND_Expression":"analyseCode generateCode generateOptimizedBoolean isCompactableOperation traverse rightInitStateIndex mergedInitStateIndex org.aspectj.org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression  be swapped by the !\r\n  swapped by the !\r\n  reset after trueMergedInfo got extracted\r\n  inlined value\r\n  <expr> && false --> false\r\n  <expr> && true --> <expr>\r\n  no need to generate right operand\r\n  <expr> && true --> <expr>\r\n  no need to generate right operand\r\n  need value, e.g. if (a == 1 && ((b = 2) > 0)) {} -> shouldn't initialize 'b' if a!=1\r\n  implicit falling through the TRUE case\r\n  implicit falling through the FALSE case\r\n  no need to generate right operand\r\n  need value, e.g. if (a == 1 && ((b = 2) > 0)) {} -> shouldn't initialize 'b' if a!=1\r\n  default case\r\n  dedicated treatment for the &&\r\n /*\r\n\t\t * improving code gen for such a case: boolean b = i < 0 && false since\r\n\t\t * the label has never been used, we have the inlined value on the\r\n\t\t * stack.\r\n\t\t */\r\n","CombinedBinaryExpression":"analyseCode generateOptimizedStringConcatenation generateOptimizedStringConcatenationCreation printExpressionNoParenthesis resolveType traverse tuneArityMax arity arityMax ARITY_MAX_MAX ARITY_MAX_MIN defaultArityMaxStartingValue referencesTable org.aspectj.org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression  keep implementation in sync with BinaryExpression#analyseCode\r\n  int cursorTypeID;\r\n  reached the leftmost expression\r\n  #generateOptimizedStringConcatenation\r\n  silence warnings\r\n  new: java.lang.StringBuffer\r\n  invokespecial: java.lang.StringBuffer.<init>(Ljava.lang.String;)V\r\n  reached the leftmost expression\r\n  #generateOptimizedStringConcatenationCreation\r\n  OperatorExpression#printExpression\r\n  keep implementation in sync with BinaryExpression#resolveType\r\n  visit returned true, if any\r\n  to hold an indication of the number of uses of a given arityMax in a row\r\n","FileStructureView":"getSourceFile setSourceFile setRootNode getName sourceFilePath org.aspectj.ajde.ui.FileStructureView /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","JavaModelManager":"getClasspathEntries getDescription getKind getPath toString getCompilationParticipants managedMarkerTypes getRegisteredParticipants indexForSourceLevel sortParticipants conflictsWithOutputLocation containerGet containerGetDefaultToPreviousSession containerClone containerIsInitializationInProgress containerAddInitializationInProgress containerPut containerRemove containerPutIfInitializingWithSameEntries verbose_missbehaving_container verbose_missbehaving_container containerRemoveInitializationInProgress containersReset create create create createClassFileFrom createCompilationUnitFrom createJarPackageFragmentRootFrom determineIfOnClasspath rememberExternalLibTimestamps resetResolvedClasspath setClasspath readAndCacheClasspath toString acceptProblem beginReporting endReporting getProblemRequestor getWorkingCopy isActive toString preferenceChange addDeprecatedOptions cacheZipFiles closeZipFile configurePluginDebugOptions createAnnotationProcessorManager discardPerWorkingCopyInfo doneSaving flushZipFiles batchContainerInitializations getClasspathContainer getDeltaProcessor getElementsOutOfSynchWithBuffers getIndexManager getInfo getInstancePreferences getDefaultOptions getDefaultPreferences getJavaModel getJavaModelManager getLastBuiltState getOption getOptions getDefaultOptionsNoInitialization getPerProjectInfo getPerProjectInfoCheckExistence getPerWorkingCopyInfo getPreviousSessionContainer verbose_reentering_project_container_access getPreviousSessionVariable verbose_reentering_variable_access getTemporaryCache getVariableAndContainersFile getRegisteredVariableNames getRegisteredContainerIDs getSerializationFile getUserLibraryManager getWorkingCopies getWorkspaceScope getZipFile hasTemporaryCache initializeAllContainers verbose_batching_containers_initialization initializeContainer verbose_no_container_initializer_found verbose_container_value_after_initialization verbose_container_initialization_failed verbose_container_null_failure_container verbose_container_using_failure_container verbose_triggering_container_initialization verbose_triggering_container_initialization_invocation_trace initializePreferences intern intern getClasspathBeingResolved isClasspathBeingResolved isDeprecatedOption setClasspathBeingResolved loadVariablesAndContainers loadVariablesAndContainers getClasspathEntries getDescription getKind getPath toString load loadAccessRule loadAccessRules loadAttribute loadAttributes loadBoolean loadClasspathEntries loadClasspathEntry loadContainers loadInt loadPath loadPaths loadProjects loadString loadVariables peekAtInfo prepareToSave putInfos putJarTypeInfo readState recreatePersistedContainer recreatePersistedContainer rememberScope removeInfoAndChildren removePerProjectInfo resetProjectOptions resetProjectPreferences doNotUse resetJarTypeCache resetTemporaryCache rollback saveState saveBuiltState saveVariablesAndContainers save saveAccessRule saveAccessRules saveAttribute saveAttributes saveClasspathEntries saveClasspathEntry saveContainers saveInt saveNewId savePath savePaths saveProjects saveString saveVariables traceVariableAndContainers saving secondaryTypeAdding secondaryTypes secondaryTypesMerging secondaryTypesSearching secondaryTypesRemoving secondaryTypesRemoving setBuildOrder setLastBuiltState setOptions startup startIndexing shutdown variableGet variableGetDefaultToPreviousSession variableInitializationInProgress variableNames variablePut variablePreferencesPut variablePutIfInitializingWithSameValue contentTypeChanged cacheToString javaModel variables variablesWithInitializer deprecatedVariables readOnlyVariables previousSessionVariables variableInitializationInProgress containers previousSessionContainers containerInitializationInProgress batchContainerInitializations batchContainerInitializationsProgress containerInitializersCache classpathsBeingResolved workspaceScope stringSymbols charArraySymbols annotationProcessorManagerFactory rootPathToAttachments CP_VARIABLE_PREFERENCES_PREFIX CP_CONTAINER_PREFERENCES_PREFIX CP_ENTRY_IGNORE CP_ENTRY_IGNORE_PATH TRUE VARIABLES_AND_CONTAINERS_FILE_VERSION CPVARIABLE_INITIALIZER_EXTPOINT_ID CPCONTAINER_INITIALIZER_EXTPOINT_ID FORMATTER_EXTPOINT_ID COMPILATION_PARTICIPANT_EXTPOINT_ID ANNOTATION_PROCESSOR_MANAGER_EXTPOINT_ID VARIABLE_INITIALIZATION_IN_PROGRESS CONTAINER_INITIALIZATION_IN_PROGRESS BUFFER_MANAGER_DEBUG INDEX_MANAGER_DEBUG COMPILER_DEBUG JAVAMODEL_DEBUG JAVAMODELCACHE_DEBUG CP_RESOLVE_DEBUG CP_RESOLVE_ADVANCED_DEBUG ZIP_ACCESS_DEBUG DELTA_DEBUG DELTA_DEBUG_VERBOSE HIERARCHY_DEBUG POST_ACTION_DEBUG BUILDER_DEBUG COMPLETION_DEBUG RESOLUTION_DEBUG SELECTION_DEBUG SEARCH_DEBUG SOURCE_MAPPER_DEBUG_VERBOSE COMPLETION_PERF SELECTION_PERF DELTA_LISTENER_PERF VARIABLE_INITIALIZER_PERF CONTAINER_INITIALIZER_PERF RECONCILE_PERF INDEXED_SECONDARY_TYPES PERF_VARIABLE_INITIALIZER PERF_CONTAINER_INITIALIZER NO_WORKING_COPY optionNames optionsCache preferencesLookup PREF_INSTANCE PREF_DEFAULT NO_PARTICIPANTS MAX_SOURCE_LEVEL registeredParticipants managedMarkerTypes compilationParticipants MANAGER cache temporaryCache elementsOutOfSynchWithBuffers deltaState indexManager perProjectInfos perWorkingCopyInfos searchScopes JAVADOC_CACHE_INITIAL_SIZE project savedState triedRead rawClasspath rawClasspathStatus resolvedClasspath unresolvedEntryStatus rootPathToRawEntries rootPathToResolvedEntries outputLocation preferences options secondaryTypes javadocCache useCount problemRequestor workingCopy VERBOSE CP_RESOLVE_VERBOSE CP_RESOLVE_VERBOSE_ADVANCED ZIP_ACCESS_VERBOSE zipFiles userLibraryManager containerPath entries project ARRAY_INCREMENT allClasspathEntries allClasspathEntryCount allPaths allStrings allStringsCount in classpathEntryIds out stringIds org.aspectj.org.eclipse.jdt.internal.core.JavaModelManager  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Preferences\r\n  1.1 to 1.7\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  force extension points to be read\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  add config element in the group it belongs to\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  for all config elements named \"compilationParticipant\"\r\n  for all extensions of this point...\r\n  sort config elements in each group\r\n  create result table\r\n  $NON-NLS-1$\r\n  all other cases including ClassFileConstants.MAJOR_VERSION_1_1\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  in doubt, there is a conflict\r\n  in doubt, there is a conflict\r\n  or if the project's output is not used (in other words, if all source folders have their custom output)\r\n  check initialization in progress first\r\n  discard obsoleted information about previous session\r\n  do not write out intermediate initialization value\r\n  set  optimize only if initializing, otherwise we are in a regular setContainer(...) call\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  reset container value, but leave entry in Map\r\n  walk all projects and find one that have the given folder on its classpath\r\n  not on classpath - make the root its folder, and a default package\r\n  not on classpath - make the root its folder, and a default package\r\n  $NON-NLS-1$  Create a jar package fragment root only if on the classpath\r\n  JAVA file can only live inside SRC folder (on the raw path)\r\n  given we have a resource child of the root, it cannot be a JAR pkg root\r\n  is the file name in the package\r\n  (see https:  allow creation of package fragment if it contains a .java file that is included\r\n  reverse map from a package fragment root's path to the raw entry\r\n  map from a package fragment root's path to the resolved entry\r\n  null out resolved information\r\n  remember old info\r\n  read file entries and update status\r\n  extract out the output location\r\n  store new raw classpath, new output and new status, and null out resolved info\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  need to touch the project to force validation by DeltaProcessor\r\n  $NON-NLS-1$   revert preference value as we will not apply it to JavaCore classpath variable\r\n  unexpected old value => remove variable from set\r\n  singleton: prevent others from creating a new instance\r\n  zip file will be closed by call to flushZipFiles\r\n  $NON-NLS-1$\t  configure performance options\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  outside the perWorkingCopyInfos lock (see bug 50667)\r\n  remove per working copy info\r\n  outside the perWorkingCopyInfos lock (see bug 50667)\r\n  compute the delta if needed and register it if there are changes\r\n  $NON-NLS-1$  (see https:  If modified, also modify the method getDefaultOptionsNoInitialization()\r\n  initialize preferences to their default\r\n  get encoding through resource plugin\r\n  backward compatibility\r\n  If modified, also modify the method getDefaultOptionsNoInitialization()\r\n  $NON-NLS-1$\r\n  should never be requested on non-Java projects\r\n  backward compatibility\r\n  return cached options if already computed\r\n  init\r\n  set options using preferences service lookup\r\n  get encoding through resource plugin\r\n  backward compatibility\r\n  store built map in cache\r\n  return built map\r\n  compiler defaults\r\n  Override some compiler defaults\r\n  $NON-NLS-1$\r\n  JavaCore settings\r\n  Formatter settings\r\n  CodeAssist settings\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Do not modify without modifying getDefaultOptions()\r\n  use the perProjectInfo collection as its own lock\r\n  use the perWorkingCopyInfo collection as its own lock\r\n  break cycle if none found\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  break cycle\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  ensure another library manager was not set while creating the instance above\r\n  note size is > 0 otherwise pathToPerWorkingCopyInfos would be null\r\n  external resource -> it is ok to use toFile()\r\n  internal resource\r\n  $NON-NLS-1$   collect all container paths\r\n  mark container as being initialized\r\n  TODO (frederic) remove following block when JDT  mark container as being initialized\r\n  initialize all containers\r\n  $NON-NLS-1$\r\n  (see https:  $NON-NLS-1$\r\n  clone as the following will have a side effect\r\n  clone as the following will have a side effect\r\n  (see https:  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  create a dummy initializer and get the default failure container\r\n  $NON-NLS-1$\r\n  avoid initialization cycles\r\n  see https:  (see https:  $NON-NLS-1$\r\n  retrieve value (if initialization was successful)\r\n  initializer failed to do its job: redirect to the failure container\r\n  break cycle\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-2$  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Create lookups\r\n  Listen to instance preferences node removal from parent in order to refresh stored one\r\n  Listen to default preferences node removal from parent in order to refresh stored one\r\n  make sure to copy the string (so that it doesn't hold on the underlying char[] that might be much bigger than necessary)\r\n  $NON-NLS-1$\r\n  flush old one\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  backward compatibility, load variables and containers from preferences into cache\r\n  load variables and containers from saved file into cache\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  backward compatibility, load old format\r\n  variables\r\n  containers\r\n  override persisted values for variables which have a registered initializer\r\n  reset variable, but leave its entry in the Map, so it will be part of variable names.\r\n  override persisted values for containers which have a registered initializer\r\n  only get variable from preferences not set to their default\r\n  cleanup old preferences\r\n  recreate container\r\n  cleanup old preferences\r\n  add variable to table\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  String -> IPath\r\n  $NON-NLS-1$\r\n  but still read the container as it is is part of the file format\r\n  $NON-NLS-1$\r\n  remove children\r\n  (theodora)\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  avoid leaking deleted project's persisted container\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$  NB: The value has to be null so as to not create a strong reference on the scope\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$  $NON-NLS-1$\r\n  use the perProjectInfo collection as its own lock\r\n  use the perProjectInfo collection as its own lock\r\n  use the perProjectInfo collection as its own lock\r\n  used by tests to simulate a startup\r\n  passed this point, save actions are non trivial\r\n  save built state\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  variables\r\n  containers\r\n  clone while iterating (see https:  $NON-NLS-1$   (see https:  IClasspathEntry -> int\r\n  Strings -> int\r\n  save all projects if none specified (snapshot or full save)\r\n  remove variables that should not be saved\r\n  don't save classpath variables from the default preferences as there is no delta if they are removed\r\n  TODO (eric) - investigate after 3.3 if variables should be saved for a SNAPSHOT\r\n  (see https:  (see https:  $NON-NLS-1$\r\n  save variable and container values on snapshot  $NON-NLS-1$\r\n  will need delta since this save (see https:  (see https:  (see https:  ignore\r\n  lazy initialized\r\n  save external libs timestamps\r\n  $NON-NLS-1$\r\n  Get or create map to cache secondary types while indexing (can be not synchronized as indexing insure a non-concurrent usage)\r\n  Store the secondary type in temporary cache (these are just handles => no problem to create it now...)\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Return cache if not empty and there's no new secondary types created during indexing\r\n  Perform search request only if secondary types cache is not initialized yet (this will happen only once!)\r\n  => need to know whether the indexing is finished or not\r\n  Indexing is running but caller cannot wait => return current cache\r\n  Wait for the end of indexing or a cancel\r\n  Indexing is finished => merge caches and return result\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Return current cache if there's no indexing cache (double check, this should not happen)\r\n  Merge indexing cache in secondary types one\r\n  Remove all secondary types of indexed file from cache\r\n  Add all indexing file secondary types in given secondary types cache\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Build scope using prereq projects but only source folders\r\n  Search all secondary types on scope\r\n  Build types from paths\r\n  replace stored path with type itself\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Store result in per project info cache if still null or there's still an indexing cache (may have been set by another thread...)\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Clean current cache\r\n  Clean indexing cache if necessary\r\n  $NON-NLS-1$\r\n  skip indexing cache entry if present (!= is intentional)\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  cannot be customized at project level\r\n  remove projects which are already mentionned in java builder order\r\n  create a set for fast check\r\n  add Java ones first\r\n  java projects are built first\r\n  copy previous items in their respective order\r\n  commit the new build order out\r\n  should never be requested on non-Java projects\r\n  no point trying to re-read once using setter\r\n  delete state file to ensure a full build happens if the workspace crashes\r\n  unrecognized option\r\n  skipped, contributed by resource prefs\r\n  persist options\r\n  update cache\r\n  initialize Java model cache\r\n  request state folder creation (workaround 19885)\r\n  Initialize eclipse preferences\r\n  Listen to preference changes\r\n  Listen to content-type changes\r\n  retrieve variable values\r\n  $NON-NLS-1$\r\n  force it to be POST_CHANGE so that the delta processor can handle it\r\n  see https:  see https:  process asap\r\n  Stop listening to content-type changes\r\n  Stop listening to user library changes\r\n  no more indexing\r\n  wait for the initialization job to finish\r\n  check initialization in progress first\r\n  set  see https:  update cache - do not only rely on listener refresh\r\n  discard obsoleted information about previous session\r\n  do not write out intermediate initialization value\r\n /*\r\n\t * A HashSet that contains the IJavaProject whose classpath is being resolved.\r\n\t */\r\n /*\r\n\t * The unique workspace scope\r\n\t */\r\n /*\r\n\t * Pools of symbols used in the Java model.\r\n\t * Used as a replacement for String#intern() that could prevent garbage collection of strings on some VMs.\r\n\t */\r\n /*\r\n\t * Extension used to construct Java 6 annotation processor managers\r\n\t */\r\n /* \r\n\t * Map from a package fragment root's path to a source attachment property (source path + ATTACHMENT_PROPERTY_DELIMITER + source root path)\r\n\t */\r\n /*\r\n\t\t * The registered compilation participants (a table from int (source level) to Object[])\r\n\t\t * The Object array contains first IConfigurationElements when not resolved yet, then\r\n\t\t * it contains CompilationParticipants.\r\n\t\t */\r\n /*\r\n\t\t * 1.1 -> 0\r\n\t\t * 1.2 -> 1\r\n\t\t * ...\r\n\t\t * 1.6 -> 5\r\n\t\t * 1.7 -> 6\r\n\t\t * null -> 0\r\n\t\t */\r\n /*\r\n\t * The given project is being removed. Remove all containers for this project from the cache.\r\n\t */\r\n /*\r\n\t * Temporary cache of newly opened elements\r\n\t */\r\n /*\r\n\t\t * Reads the raw classpath and output location from disk, and remember them.\r\n\t\t * Return the raw classpath, or JavaProject#INVALID_CLASSPATH if unable to read it.\r\n\t\t */\r\n /*\r\n\t * Return a new Java 6 annotation processor manager.  The manager will need to\r\n\t * be configured before it can be used.  Returns null if a manager cannot be\r\n\t * created, ie if the current VM does not support Java 6 annotation processing.\r\n\t */\r\n /*\r\n\t * Discards the per working copy info for the given working copy (making it a compilation unit)\r\n\t * if its use count was 1. Otherwise, just decrement the use count.\r\n\t * If the working copy is primary, computes the delta between its state and the original compilation unit\r\n\t * and register it.\r\n\t * Close the working copy, its buffer and remove it from the shared working copy table.\r\n\t * Ignore if no per-working copy info existed.\r\n\t * NOTE: it must NOT be synchronized as it may interact with the element info cache (if useCount is decremented to 0), see bug 50667.\r\n\t * Returns the new use count (or -1 if it didn't exist).\r\n\t */\r\n /*\r\n\t * Returns the per-project info for the given project. If specified, create the info if the info doesn't exist.\r\n\t */\r\n /*\r\n\t * Returns  the per-project info for the given project.\r\n\t * If the info doesn't exist, check for the project existence and create the info.\r\n\t * @throws JavaModelException if the project doesn't exist.\r\n\t */\r\n /*\r\n\t * Returns the per-working copy info for the given working copy at the given path.\r\n\t * If it doesn't exist and if create, add a new per-working copy info with the given problem requestor.\r\n\t * If recordUsage, increment the per-working copy info's use count.\r\n\t * Returns null if it doesn't exist and not create.\r\n\t */\r\n /*\r\n\t * Returns all the working copies which have the given owner.\r\n\t * Adds the working copies of the primary owner if specified.\r\n\t * Returns null if it has none.\r\n\t */\r\n /*\r\n\t * Returns whether there is a temporary cache for the current thread.\r\n\t */\r\n /*don't take any lock*/\r\n /*\r\n\t * Initialize all container at the same time as the given container.\r\n\t * Return the container for the given path and project.\r\n\t */\r\n /*throws CoreException*/\r\n /*\r\n\t * Puts the infos in the given map (keys are IJavaElements and values are JavaElementInfos)\r\n\t * in the Java model cache in an atomic way.\r\n\t * First checks that the info for the opened element (or one of its ancestors) has not been \r\n\t * added to the cache. If it is the case, another thread has opened the element (or one of\r\n\t * its ancestors). So returns without updating the cache.\r\n\t */\r\n /*\r\n\t * Remember the info for the jar binary type\r\n\t */\r\n /*\r\n\t * Removes all cached info for the given element (including all children)\r\n\t * from the cache.\r\n\t * Returns the info for the given element, or null if it was closed.\r\n\t */\r\n /*\r\n\t * Reset project options stored in info cache.\r\n\t */\r\n /*\r\n\t * Reset project preferences stored in info cache.\r\n\t */\r\n /*\r\n\t * Resets the cache that holds on binary type in jar files\r\n\t */\r\n /*\r\n\t * Resets the temporary cache for newly created elements to null.\r\n\t */\r\n /*\r\n\t * Return secondary types cache merged with new secondary types created while indexing\r\n\t * Note that merge result is directly stored in given parameter map.\r\n\t */\r\n /*\r\n\t * Perform search request to get all secondary types of a given project.\r\n\t * If not waiting for indexes and indexing is running, will return types found in current built indexes...\r\n\t */\r\n /*\r\n\t * Remove from a given cache map all secondary types belonging to a given file.\r\n\t * Note that there can have several secondary types per file...\r\n\t */\r\n /* update spec in JavaCore#addPreProcessingResourceChangedListener(...) if adding more event types */\r\n /*\r\n\t * Returns the set of variable names that are being initialized in the current thread.\r\n\t */\r\n /*\r\n\t * Optimize startup case where 1 variable is initialized at a time with the same value as on shutdown.\r\n\t */\r\n","Field":"accept getConstantValue toString copy getType accept getConstantValue toString copy getType NoFields fieldType NoFields fieldType org.aspectj.apache.bcel.classfile.Field org.aspectj.apache.bcel.classfile.Field  lazily initialized\r\n  Short cuts to constant pool\r\n  Get names from constant pool\r\n  append all attributes that are *not* \"ConstantValue\"\r\n  lazily initialized\r\n  Short cuts to constant pool\r\n  Get names from constant pool\r\n  append all attributes that are *not* \"ConstantValue\"\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n","ICacheEnumeration":"getValue org.aspectj.org.eclipse.jdt.internal.core.util.ICacheEnumeration","EnumAnnotationValue":"getType stringify toString getType stringify toString type value type value org.aspectj.weaver.EnumAnnotationValue org.aspectj.weaver.EnumAnnotationValue /* *******************************************************************\r\n * Copyright (c) 2006 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement IBM     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2006 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement IBM     initial implementation \r\n * ******************************************************************/\r\n","FastMatchInfo":"getKind getType toString getKind getType toString kind type kind type org.aspectj.weaver.patterns.FastMatchInfo org.aspectj.weaver.patterns.FastMatchInfo /* *******************************************************************\r\n * Copyright (c) 2004 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Jim Hugunin     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Jim Hugunin     initial implementation \r\n * ******************************************************************/\r\n","SourceIndexerRequestor":"acceptConstructorReference acceptFieldReference acceptImport acceptLineSeparatorPositions acceptMethodReference acceptPackage acceptProblem acceptTypeReference acceptTypeReference acceptUnknownReference acceptUnknownReference enclosingTypeNames enterAnnotationType enterClass enterCompilationUnit enterConstructor enterEnum enterField enterInitializer enterInterface enterMethod enterType exitCompilationUnit exitConstructor exitField exitInitializer exitMethod exitType getSimpleName popTypeName pushTypeName indexer packageName enclosingTypeNames depth methodDepth org.aspectj.org.eclipse.jdt.internal.core.search.indexing.SourceIndexerRequestor  ?\r\n  add implicit constructor reference to default constructor\r\n  eliminate possible qualifications, given they need to be fully resolved again\r\n  set specific ['0'] value for local and anonymous to be able to filter them\r\n  eliminate possible qualifications, given they need to be fully resolved again\r\n  eliminate possible qualifications, given they need to be fully resolved again\r\n  TODO (jerome) might want to merge the 4 methods\r\n  dump a trace so it can be tracked down\r\n /*\r\n * Rebuild the proper qualification for the current source type:\r\n *\r\n * java.lang.Object ---> null\r\n * java.util.Hashtable$Entry --> [Hashtable]\r\n * x.y.A$B$C --> [A, B]\r\n */\r\n /*\r\n * Returns the unqualified name without parameters from the given type name.\r\n */\r\n","SelectionScanner":"getCurrentIdentifierSource scanIdentifierOrKeyword selectionIdentifier selectionStart selectionEnd org.aspectj.org.eclipse.jdt.internal.codeassist.select.SelectionScanner  no char[] sharing around completionIdentifier, we want it to be unique so as to use identity checks\r\n  check unicode scenario\r\n  convert completed keyword into an identifier\r\n /*\r\n * Scanner aware of a selection range. If finding an identifier which source range is exactly\r\n * the same, then will record it so that the parser can make use of it.\r\n *\r\n * Source positions are zero-based and inclusive.\r\n */\r\n /*comment*/\r\n /*whitespace*/\r\n /*nls*/\r\n /*taskTags*/\r\n /*taskPriorities*/\r\n /*\r\n * In case we actually read a keyword which corresponds to the selected\r\n * range, we pretend we read an identifier.\r\n */\r\n","ThreadStackImpl11":"getThreadStack getThreadStack getThreadStack stacks cached_thread cached_stack change_count COLLECT_AT MIN_COLLECT_AT stacks cached_thread cached_stack change_count COLLECT_AT MIN_COLLECT_AT stacks cached_thread cached_stack change_count COLLECT_AT MIN_COLLECT_AT org.aspectj.runtime.internal.cflowstack.ThreadStackImpl11 org.aspectj.runtime.internal.cflowstack.ThreadStackImpl11 org.aspectj.runtime.internal.cflowstack.ThreadStackImpl11  should be >1 b  should be >1 b  should be >1 b /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * \t\t\t\t\t   Copied from bits of original CFlowStack\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * \t\t\t\t\t   Copied from bits of original CFlowStack\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * \t\t\t\t\t   Copied from bits of original CFlowStack\r\n * ******************************************************************/\r\n","IBinaryField":"getAnnotations getConstant getGenericSignature getName getTagBits getTypeName org.aspectj.org.eclipse.jdt.internal.compiler.env.IBinaryField","CompletionOnJavadoc":"getCompletionFlags addCompletionFlags JAVADOC EXCEPTION TEXT BASE_TYPES ONLY_INLINE_TAG REPLACE_TAG FORMAL_REFERENCE ALL_POSSIBLE_TAGS org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnJavadoc  Bit pattern for javadoc completion flags\r\n","AddJarFileToIndex":"equals hashCode execute updatedIndexState toString resource org.aspectj.org.eclipse.jdt.internal.core.search.indexing.AddJarFileToIndex  external JAR scenario - no resource\r\n  $NON-NLS-1$   MUST reset the IndexManager if a jar file is changed\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$  index got deleted since acquired\r\n  $NON-NLS-1$\t  free write lock\r\n  local file system\r\n  ask permission to write\r\n  $NON-NLS-1$\t  external file -> it is ok to use toFile()\r\n  $NON-NLS-1$\t  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$\r\n  all file names   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  iterate each entry to index it\r\n  a new file was added\r\n  a file was deleted so re-index\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  to ensure its placed into the saved state\r\n  index already existed: recreate it so that we forget about previous entries\r\n  failed to recreate index, see 73330\r\n  $NON-NLS-1$   iterate each entry to index it\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*do not reuse index file*/\r\n /*reuse index file*/\r\n","JDTCompilerAdapter":"execute setupJavacCommand processCompilerArguments checkCompilerArgs createClasspathArgument logAndAddFilesToCompile SEPARATOR_CHARS ADAPTER_PREFIX ADAPTER_ENCODING ADAPTER_ACCESS compilerClass logFileName customDefaultOptions fileEncodings dirEncodings accessRules org.aspectj.org.eclipse.jdt.core.JDTCompilerAdapter  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Otherwise default to the \"srcdir\" value.\r\n  This is done to improve the compatibility to ant 1.5\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  This is done to improve the compatibility to ant 1.5\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  disable all warnings\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  This is done to improve the compatibility to ant 1.5\r\n  $NON-NLS-1$\r\n  check the compiler arguments for anything requiring extra processing\r\n  access rules for the classpath\r\n  file or folder level custom encoding\r\n  use File to translate the string into a path with the correct File.seperator\r\n  end is inclusive, but in the API end is exclusive\r\n  empty path return empty string\r\n  no access rules, can set the path directly\r\n  rule doesn't end with the File.separator, but pathElement might\r\n  otherwise it would match on the first endsWith\r\n  if the path doesn't match, it could be due to a trailing file separatorChar in the rule\r\n  the rules list is [path, rule, path, rule, ...]\r\n  be elements in the classpath not in the access rules or access rules not in the classpath\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  override encodings for their parent directories\r\n  found encoding, remove it from the list to speed things up next time around\r\n  check for file level custom encoding\r\n  check folder level custom encoding\r\n  $NON-NLS-1$\r\n /*\r\n\t\t * Read in the compiler arguments first since we might need to modify\r\n\t\t * the classpath if any access rules were specified\r\n\t\t */\r\n /*\r\n    \t\t\t * Set the bootclasspath for the Eclipse compiler.\r\n    \t\t\t */\r\n /*\r\n         * Eclipse compiler doesn't support -extdirs.\r\n         * It is emulated using the classpath. We add extdirs entries after the \r\n         * bootclasspath.\r\n         */\r\n /*\r\n\t\t * The java runtime is already handled, so we simply want to retrieve the\r\n\t\t * ant runtime and the compile classpath.\r\n\t\t */\r\n /*\r\n\t\t * Handle the nowarn option. If none, then we generate all warnings.\r\n\t\t */\r\n /*\r\n\t\t * destDir option.\r\n\t\t */\r\n /*\r\n\t\t * verbose option\r\n\t\t */\r\n /*\r\n\t\t * failnoerror option\r\n\t\t */\r\n /*\r\n\t\t * target option.\r\n\t\t */\r\n /*\r\n\t\t * source option\r\n\t\t */\r\n /*\r\n\t\t * encoding option\r\n\t\t */\r\n /*\r\n\t\t\t * Add extra argument on the command line\r\n\t\t\t */\r\n /*\r\n\t\t * Eclipse compiler doesn't have a -sourcepath option. This is\r\n\t\t * handled through the javac task that collects all source files in\r\n\t\t * srcdir option.\r\n\t\t */\r\n","UserLibrary":"getEntries isSystemLibrary equals hashCode serialize createFromString toString CURRENT_VERSION TAG_VERSION TAG_USERLIBRARY TAG_SOURCEATTACHMENT TAG_SOURCEATTACHMENTROOT TAG_PATH TAG_ARCHIVE TAG_SYSTEMLIBRARY isSystemLibrary entries org.aspectj.org.eclipse.jdt.internal.core.UserLibrary  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  access rule set is null if no access rules\r\n  write extra attributes if necessary\r\n  write extra attributes and restriction if necessary\r\n  write archive end tag if necessary\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n /*use the workspace line delimiter*/\r\n /*insert tab*/\r\n /*insert tab*/\r\n","EclipseScope":"lookupType computeImports addClassAndParentsToPrefixes getImportedNames getImportedPrefixes lookupFormal getFormal getFormalCount makeSourceLocation getMessageHandler message message message getWorld getEnclosingType scope world enclosingType bindings importedPrefixes importedNames org.aspectj.ajdt.internal.compiler.lookup.EclipseScope  FIXME ??? need reasonable error handling...\r\n  Binding(tokens, bits & RestrictiveFlagMASK, this)\r\n  add any enclosing types to this list\r\n  System.err.println(\"package: \" + packageName);\r\n  XXX wrong behavior for java.util.Map.*\r\n  System.err.println(\"prefixes: \" + Arrays.asList(importedPrefixes));\r\n  XXX add good errors when would bind to extra parameters\r\n  System.out.println(\"message: \" + message + \" loc: \" + makeSourceLocation(location));\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","StackMapFrameCodeStream":"aaload aastore aconst_null addDefinitelyAssignedVariables addVariable aload aload_0 aload_1 aload_2 aload_3 anewarray areturn arraylength astore astore_0 astore_1 astore_2 astore_3 athrow baload bastore bipush caload castore checkcast checkcast d2f d2i d2l dadd daload dastore dcmpg dcmpl dconst_0 dconst_1 ddiv decrStackSize dload dload_0 dload_1 dload_2 dload_3 dmul drem dreturn dstore dstore_0 dstore_1 dstore_2 dstore_3 dsub dup dup_x1 dup_x2 dup2 dup2_x1 dup2_x2 exitUserScope exitUserScope f2d f2i f2l fadd faload fastore fcmpg fcmpl fconst_0 fconst_1 fconst_2 fdiv fload fload_0 fload_1 fload_2 fload_3 fmul frem freturn fstore fstore_0 fstore_1 fstore_2 fstore_3 fsub generateBoxingConversion generateOuterAccess generateUnboxingConversion getBaseTypeValue getfield getLocal getPosition getstatic getTYPE goto_ goto_w i2b i2c i2d i2f i2l i2s iadd iaload iand iastore iconst_0 iconst_1 iconst_2 iconst_3 iconst_4 iconst_5 iconst_m1 idiv if_acmpeq if_acmpne if_icmpeq if_icmpge if_icmpgt if_icmple if_icmplt if_icmpne ifeq ifge ifgt ifle iflt ifne ifnonnull ifnull iload iload_0 iload_1 iload_2 iload_3 imul inlineForwardReferencesFromLabelsTargeting init initializeMaxLocals instance_of invokeAccessibleObjectSetAccessible invokeArrayNewInstance invokeClassForName invokeClassGetDeclaredConstructor invokeClassGetDeclaredField invokeClassGetDeclaredMethod invokeEnumOrdinal invokeinterface invokeJavaLangAssertionErrorConstructor invokeJavaLangAssertionErrorDefaultConstructor invokeJavaLangClassDesiredAssertionStatus invokeJavaLangEnumvalueOf invokeJavaLangEnumValues invokeJavaLangErrorConstructor invokeJavaLangReflectConstructorNewInstance invokeJavaLangReflectFieldGetter invokeJavaLangReflectFieldSetter invokeJavaLangReflectMethodInvoke invokeJavaUtilIteratorHasNext invokeJavaUtilIteratorNext invokeNoClassDefFoundErrorStringConstructor invokeObjectGetClass invokespecial invokestatic invokeStringConcatenationAppendForType invokeStringConcatenationDefaultConstructor invokeStringConcatenationStringConstructor invokeStringConcatenationToString invokeStringValueOf invokeSystemArraycopy invokeThrowableGetMessage invokevirtual ior irem ireturn ishl ishr istore istore_0 istore_1 istore_2 istore_3 isub iushr ixor l2d l2f l2i ladd laload land lastore lcmp lconst_0 lconst_1 ldc ldc ldc ldc2_w ldc2_w ldcForIndex ldiv lload lload_0 lload_1 lload_2 lload_3 lmul lookupswitch lor lrem lreturn lshl lshr lstore lstore_0 lstore_1 lstore_2 lstore_3 lsub lushr lxor monitorenter monitorexit multianewarray new_ newarray newJavaLangAssertionError newJavaLangError newNoClassDefFoundError newStringContatenation newWrapperFor optimizeBranch pop pop2 popStateIndex pushOnStack putfield pushStateIndex putstatic recordExpressionType removeVariable removeNotDefinitelyAssignedVariables storeStackMapFrame return_ saload sastore sipush store swap tableswitch throwAnyException removeStackFrameFor reset writePosition writeWidePosition writePosition currentFrame frames framePositions variablesModificationsPositions stateIndexes stateIndexesCounter org.aspectj.org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream  Check if the local is definitely assigned\r\n  Required to fix 1PR0XVS: LFRE:WINNT - Compiler: variable table for method appears incorrect\r\n  form 4\r\n  form 2\r\n  form 3\r\n  form 1\r\n  left currentScope\r\n  there may be some preserved locals never initialized\r\n  left currentScope\r\n  there may be some preserved locals never initialized\r\n  TODO (philippe) should improve local emulation failure reporting\r\n  need to record a new stack frame at this position\r\n  already inlined\r\n  case label\r\n  we should remove the frame corresponding to otherLabel position in order to prevent unused stack frame\r\n  check was some standards, and no case  take into account enum constructor synthetic name+ordinal\r\n  LongBinding or DoubleBinding\r\n  take into account the synthetic parameters\r\n  invokespecial: java.lang.AssertionError.<init>(typeBindingID)V\r\n  remove the top of stack\r\n  remove the top of stack\r\n  invokevirtual: java.lang.Class.desiredAssertionStatus()Z;\r\n  invokestatic: java.lang.Enum.valueOf(Class,String)\r\n  remove the top of stack\r\n  invokeinterface java.util.Iterator.next()java.lang.Object\r\n  remove the top of stack\r\n  initialize to 0 since we will manually remove 'this'\r\n  enclosing instances\r\n  outer local variables\r\n  remove the top of stack\r\n  invokespecial: java.lang.StringBuffer.<init>()V\r\n  remove the top of stack\r\n  remove argument\r\n  remove the top of stack\r\n  We didn't call it new, because there is a conflit with the new keyword\r\n  in 1.6, string concatenation uses StringBuilder\r\n  new: java.lang.Integer\r\n  new: java.lang.Boolean\r\n  new: java.lang.Byte\r\n  new: java.lang.Character\r\n  new: java.lang.Float\r\n  new: java.lang.Double\r\n  new: java.lang.Short\r\n  new: java.lang.Long\r\n  new: java.lang.Void\r\n  remove the current frame\r\n  resize\r\n  Reference object\r\n /* There are two cases:\r\n                     * 1) there is no initialization interval opened ==> add an opened interval\r\n                     * 2) there is already some initialization intervals but the last one is closed ==> add an opened interval\r\n                     * An opened interval means that the value at localBinding.initializationPCs[localBinding.initializationCount - 1][1]\r\n                     * is equals to -1.\r\n                     * initializationPCs is a collection of pairs of int:\r\n                     * \tfirst value is the startPC and second value is the endPC. -1 one for the last value means that the interval\r\n                     * \tis not closed yet.\r\n                     */\r\n /* There are two cases:\r\n                                 * 1) there is no initialization interval opened ==> add an opened interval\r\n                                 * 2) there is already some initialization intervals but the last one is closed ==> add an opened interval\r\n                                 * An opened interval means that the value at localBinding.initializationPCs[localBinding.initializationCount - 1][1]\r\n                                 * is equals to -1.\r\n                                 * initializationPCs is a collection of pairs of int:\r\n                                 * \tfirst value is the startPC and second value is the endPC. -1 one for the last value means that the interval\r\n                                 * \tis not closed yet.\r\n                                 */\r\n","ParameterizedMethodBinding":"environment isRawSubstitution substitute environment isRawSubstitution substitute instantiateGetClass hasSubstitutedParameters hasSubstitutedReturnType original alwaysNeedsAccessMethod canBeSeenBy getAccessMethod sourceMethod originalMethod org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ParameterizedMethodBinding  at least fix up the declaringElement binding + bound substitution if non static\r\n  copy original type variable to relocate\r\n  check this variable can be substituted given copied variables\r\n  need to substitute old var refs with new ones (double substitution: declaringClass + new type variables)\r\n  could be array type or interface\r\n  typeVar was extending other typeVar which got substituted with interface\r\n  initialize new variable bounds\r\n  error case where exception type variable would have been substituted by a non-reference type (207573)\r\n  at least fix up the declaringElement binding + bound substitution if non static\r\n  copy original type variable to relocate\r\n  check this variable can be substituted given copied variables\r\n  need to substitute old var refs with new ones (double substitution: declaringClass + new type variables)\r\n  could be array type or interface\r\n  typeVar was extending other typeVar which got substituted with interface\r\n  initialize new variable bounds\r\n  error case where exception type variable would have been substituted by a non-reference type (207573)\r\n /*no extra bound*/\r\n","IndexBinaryFolder":"equals execute hashCode updatedIndexState toString folder org.aspectj.org.eclipse.jdt.internal.core.search.indexing.IndexBinaryFolder  nothing to do\r\n  index got deleted since acquired\r\n  $NON-NLS-1$   $NON-NLS-1$   free read lock\r\n  ask permission to read\r\n  all file names   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  request to save index when all class files have been indexed... also sets state to SAVED_STATE\r\n  $NON-NLS-1$\r\n /*reuse index file*/\r\n","HierarchyScope":"add buildResourceVector computeProjectsAndJars computeDependents encloses encloses enclosingProjectsAndJars initialize processDelta refresh toString focusType focusPath owner hierarchy types resourcePaths enclosingProjectsAndJars elements elementCount needsRefresh org.aspectj.org.eclipse.jdt.internal.core.search.HierarchyScope  resource path\r\n  unknown target\r\n  external jar\r\n  internal jar\r\n  type is a project\r\n  type in a jar\r\n  unknown target\r\n  external jar\r\n  internal jar\r\n  add all the project's pkg fragment roots\r\n  add the dependent projects\r\n  add the root\r\n  add all projects that reference this archive and their dependents\r\n  add the project and its binary pkg fragment roots\r\n  add the dependent projects\r\n  clients is responsible for filtering out elements not in the hierarchy (see SearchEngine)\r\n  clients is responsible for filtering out elements not in the hierarchy (see SearchEngine)\r\n  be flexible: look at original element (see bug 14106 Declarations in Hierarchy does not find declarations in hierarchy)\r\n  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n\t * Adds the given resource to this search scope.\r\n\t */\r\n /* (non-Javadoc)\r\n\t * Creates a new hiearchy scope for the given type.\r\n\t */\r\n /*\r\n\t * Computes the paths of projects and jars that the hierarchy on the given type could contain.\r\n\t * This is a super set of the project and jar paths once the hierarchy is computed.\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see IJavaSearchScope#encloses(String)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see IJavaSearchScope#encloses(IJavaElement)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see IJavaSearchScope#enclosingProjectsAndJars()\r\n\t * @deprecated\r\n\t */\r\n /*\r\n\t * @see AbstractSearchScope#processDelta(IJavaElementDelta)\r\n\t */\r\n","Utility":"accessToString accessToString classOrInterface codeToString codeToString codeToString compactClassName compactClassName compactClassName methodSignatureToString methodSignatureToString methodSignatureToString replace signatureToString signatureToString signatureToStringInternal typeOfMethodSignature byteToShort toHexString format fillup convertString getAnnotationAttributes getParameterAnnotationAttributes getResult getConsumedChars typeOfSignature typeOfSignature codeToString pow2 readAjAttributes beautifyLocation createSuperInvoke createInvoke createGet createGetOn createSet createInvoke stringToUTF createInstanceof createInvoke createInvoke makeArgNames appendConversion createConversion createConversion createConstant makeJavaClass arrayToString replaceInstruction deleteInstruction deleteInstruction copyInstruction getSourceLine setSourceLine makePublic pushAndReturnArrayOfVars isConstantPushInstruction isSuppressing getSuppressedWarnings bcelAttribute accessToString accessToString classOrInterface codeToString codeToString codeToString compactClassName compactClassName compactClassName methodSignatureToString methodSignatureToString methodSignatureToString replace signatureToString signatureToString signatureToStringInternal typeOfMethodSignature byteToShort toHexString format fillup convertString getAnnotationAttributes getParameterAnnotationAttributes getResult getConsumedChars typeOfSignature typeOfSignature codeToString pow2 readAjAttributes beautifyLocation createSuperInvoke createInvoke createGet createGetOn createSet createInvoke stringToUTF createInstanceof createInvoke createInvoke makeArgNames appendConversion createConversion createConversion createConstant makeJavaClass arrayToString replaceInstruction deleteInstruction deleteInstruction copyInstruction getSourceLine setSourceLine makePublic pushAndReturnArrayOfVars isConstantPushInstruction isSuppressing getSuppressedWarnings bcelAttribute wide result consumed BYTE CHAR DOUBLE FLOAT INT LONG SHORT BOOLEAN VOID argNames validBoxing testingParseCounter wide result consumed BYTE CHAR DOUBLE FLOAT INT LONG SHORT BOOLEAN VOID argNames validBoxing testingParseCounter org.aspectj.apache.bcel.classfile.Utility org.aspectj.weaver.bcel.Utility org.aspectj.apache.bcel.classfile.Utility org.aspectj.weaver.bcel.Utility  Loop through known flags\r\n  Special case: see comment at top of class...\r\n  Should be sufficient\r\n  Skip `index' lines of code\r\n  Skip `index' lines of code\r\n  Skip `index' lines of code\r\n  Is '  If string starts with 'prefix' and contains no further dots\r\n  \r\n  Should never occur\r\n  Read all declarations between for `(' and `)'\r\n  current string position\r\n  Read return type after `)'\r\n  Tack off the extra \", \"\r\n  May be an empty string\r\n  append prefix\r\n  append replacement\r\n  Skip 'old'.length chars\r\n  While we have something to replace\r\n  append rest of string\r\n  This is the default, read just one char\r\n  Should never occur\r\n  Look for closing `;'\r\n  Jump to the correct ';'\r\n  \"Lblabla;\" `L' and `;' are removed\r\n  FIXME asc going to need a lot more work in here for generics\r\n  Array declaration\r\n  Accumulate []'s\r\n  Count opening brackets and look for optional size argument\r\n  The rest of the string denotes a `<field_type>'\r\n  Just one digit, so prepend 0\r\n  put the annotations in the right output stream\r\n  put the annotations in the right output stream\r\n  Lets do the visible ones\r\n  First goes number of parameters\r\n  Lets do the invisible ones\r\n  First goes number of parameters\r\n  OPTIMIZE looks heavyweight?\r\n  Both cases have a field default_offset in common\r\n  Two address bytes + offset from start of byte stream form the jump target\r\n  32-bit wide jumps\r\n  Index byte references local variable (register)\r\n  Clear flag\r\n  Array of basic type\r\n  Access object  Operands are references to classes in constant pool\r\n  Operands are references to methods in constant pool\r\n  historical, redundant\r\n  Last byte is a reserved space\r\n  Operands are references to items in constant pool\r\n  Array of references\r\n  Multidimensional array of references\r\n  Increment local variable\r\n  Never reached\r\n  private helpers\r\n  first pass, look for version\r\n  'o'rg.aspectj\r\n  encounters a path created on Windows and vice-versa\r\n  XXX don't need the world now\r\n  it's a problem.\r\n  us the method name in the Conversions class\r\n  works\r\n  assert ! fromType.isPrimitive() && ! toType.isPrimitive()\r\n  assert toType.isPrimitive()\r\n  before the call...\r\n  assert fromType.isPrimitive()\r\n  assert toType.equals(UnresolvedType.OBJECT)\r\n  assert fromType.equals(UnresolvedType.OBJECT)\r\n  PR71273\r\n  unboxing\r\n  boxing\r\n  Use clone for shallow copy...\r\n  Create a new targets array that looks just like the existing one\r\n  goforwards) {\r\n  if (goforwards) ih=ih.getNext(); else\r\n  instructions for a line #\r\n  System.err.println(\"no line information available for: \" + ih);\r\n  }\r\n  throughout a method...\r\n  have to be better.\r\n  Go through the annotation types\r\n  or @SuppressAjWarnings({\"A\",\"B\"})\r\n  We know the value is an array value\r\n  We know values in the array are strings\r\n  (1)\r\n  Check for the SuppressAjWarnings annotation\r\n  Loop through known flags\r\n  Special case: see comment at top of class...\r\n  Should be sufficient\r\n  Skip `index' lines of code\r\n  Skip `index' lines of code\r\n  Skip `index' lines of code\r\n  Is '  If string starts with 'prefix' and contains no further dots\r\n  \r\n  Should never occur\r\n  Read all declarations between for `(' and `)'\r\n  current string position\r\n  Read return type after `)'\r\n  Tack off the extra \", \"\r\n  May be an empty string\r\n  append prefix\r\n  append replacement\r\n  Skip 'old'.length chars\r\n  While we have something to replace\r\n  append rest of string\r\n  This is the default, read just one char\r\n  Should never occur\r\n  Look for closing `;'\r\n  Jump to the correct ';'\r\n  \"Lblabla;\" `L' and `;' are removed\r\n  FIXME asc going to need a lot more work in here for generics\r\n  Array declaration\r\n  Accumulate []'s\r\n  Count opening brackets and look for optional size argument\r\n  The rest of the string denotes a `<field_type>'\r\n  Just one digit, so prepend 0\r\n  put the annotations in the right output stream\r\n  put the annotations in the right output stream\r\n  Lets do the visible ones\r\n  First goes number of parameters\r\n  Lets do the invisible ones\r\n  First goes number of parameters\r\n  OPTIMIZE looks heavyweight?\r\n  Both cases have a field default_offset in common\r\n  Two address bytes + offset from start of byte stream form the jump target\r\n  32-bit wide jumps\r\n  Index byte references local variable (register)\r\n  Clear flag\r\n  Array of basic type\r\n  Access object  Operands are references to classes in constant pool\r\n  Operands are references to methods in constant pool\r\n  historical, redundant\r\n  Last byte is a reserved space\r\n  Operands are references to items in constant pool\r\n  Array of references\r\n  Multidimensional array of references\r\n  Increment local variable\r\n  Never reached\r\n  private helpers\r\n  first pass, look for version\r\n  'o'rg.aspectj\r\n  encounters a path created on Windows and vice-versa\r\n  XXX don't need the world now\r\n  it's a problem.\r\n  us the method name in the Conversions class\r\n  works\r\n  assert ! fromType.isPrimitive() && ! toType.isPrimitive()\r\n  assert toType.isPrimitive()\r\n  before the call...\r\n  assert fromType.isPrimitive()\r\n  assert toType.equals(UnresolvedType.OBJECT)\r\n  assert fromType.equals(UnresolvedType.OBJECT)\r\n  PR71273\r\n  unboxing\r\n  boxing\r\n  Use clone for shallow copy...\r\n  Create a new targets array that looks just like the existing one\r\n  goforwards) {\r\n  if (goforwards) ih=ih.getNext(); else\r\n  instructions for a line #\r\n  System.err.println(\"no line information available for: \" + ih);\r\n  }\r\n  throughout a method...\r\n  have to be better.\r\n  Go through the annotation types\r\n  or @SuppressAjWarnings({\"A\",\"B\"})\r\n  We know the value is an array value\r\n  We know values in the array are strings\r\n  (1)\r\n  Check for the SuppressAjWarnings annotation\r\n /* The 'WIDE' instruction is used in the byte code to allow 16-bit wide indices for local \r\n   * variables. This opcode precedes an 'ILOAD', e.g.. The opcode immediately following takes \r\n   * an extra byte which is combined with the following byte to form a 16-bit value.\r\n   */\r\n /*Array of lists, array size depends on #params */\r\n /* Special case: Skip (0-3) padding bytes, i.e., the\r\n     * following bytes are 4-byte-aligned\r\n     */\r\n /* Table switch has variable length arguments.\r\n       */\r\n /* Lookup switch has variable length arguments.\r\n       */\r\n /*\r\n       * Remember wide byte which is used to form a 16-bit address in the\r\n       * following instruction. Relies on that the method is called again with\r\n       * the following opcode.\r\n       */\r\n /*\r\n\t * Ensure we report a nice source location - particular in the case where the source info is missing (binary weave).\r\n\t */\r\n /* Lint.Kind */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* The 'WIDE' instruction is used in the byte code to allow 16-bit wide indices for local \r\n   * variables. This opcode precedes an 'ILOAD', e.g.. The opcode immediately following takes \r\n   * an extra byte which is combined with the following byte to form a 16-bit value.\r\n   */\r\n /*Array of lists, array size depends on #params */\r\n /* Special case: Skip (0-3) padding bytes, i.e., the\r\n     * following bytes are 4-byte-aligned\r\n     */\r\n /* Table switch has variable length arguments.\r\n       */\r\n /* Lookup switch has variable length arguments.\r\n       */\r\n /*\r\n       * Remember wide byte which is used to form a 16-bit address in the\r\n       * following instruction. Relies on that the method is called again with\r\n       * the following opcode.\r\n       */\r\n /*\r\n\t * Ensure we report a nice source location - particular in the case where the source info is missing (binary weave).\r\n\t */\r\n /* Lint.Kind */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","OrPointcut":"getLeft setLeft getRight setRight propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty clone0 subtreeMatch0 accept0 treeSize couldMatchKinds fastMatch matchInternal toString equals hashCode resolveBindings write read findResidueInternal concretize1 parameterizeWith getLeft getRight accept traverse couldMatchKinds fastMatch matchInternal toString equals hashCode resolveBindings write read findResidueInternal concretize1 parameterizeWith getLeft getRight accept traverse left LEFT_PROPERTY right RIGHT_PROPERTY left right couldMatchKinds left right couldMatchKinds org.aspectj.org.eclipse.jdt.core.dom.OrPointcut org.aspectj.weaver.patterns.OrPointcut org.aspectj.weaver.patterns.OrPointcut  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","OrAnnotationTypePattern":"matches matches resolve resolveBindings parameterizeWith accept traverse read write equals hashCode toString getLeft getRight setForParameterAnnotationMatch matches matches resolve resolveBindings parameterizeWith accept traverse read write equals hashCode toString getLeft getRight setForParameterAnnotationMatch left right left right org.aspectj.weaver.patterns.OrAnnotationTypePattern org.aspectj.weaver.patterns.OrAnnotationTypePattern /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.AnnotationTypePattern#resolveBindings(org.aspectj.weaver.patterns.IScope, org.aspectj.weaver.patterns.Bindings, boolean)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.AnnotationTypePattern#resolveBindings(org.aspectj.weaver.patterns.IScope, org.aspectj.weaver.patterns.Bindings, boolean)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","ReturnStatement":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getExpression setExpression memSize treeSize analyseCode generateCode generateReturnBytecode generateStoreSaveValueIfNecessary needValue prepareSaveValueLocation printStatement resolve traverse EXPRESSION_PROPERTY PROPERTY_DESCRIPTORS optionalExpression expression subroutines saveValueVariable initStateIndex org.aspectj.org.eclipse.jdt.core.dom.ReturnStatement org.aspectj.org.eclipse.jdt.internal.compiler.ast.ReturnStatement  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  compute the return sequence (running the finally blocks)\r\n  grow\r\n  collect inits\r\n  closest subroutine secret variable is used\r\n  resize subroutines\r\n  secret local variable for return value (note that this can only occur in a real method)\r\n  no value needed if non-returning subroutine\r\n  generate the expression\r\n  generation of code responsible for invoking the finally blocks in sequence\r\n  output the suitable return bytecode or wrap the value inside a descriptor for doits\r\n  $NON-NLS-1$\r\n  the expression should be null\r\n  needed in case of generic method invocation\r\n  must call before computeConversion() and typeMismatchError()\r\n  narrowing then boxing ?\r\n  autoboxing\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","ProceedVisitor":"computeJoinPointParams isRef isRef endVisit canTreatAsStatic visit replaceEffectivelyStaticRef removeUnusedExtraArguments removeParameter removeParameter removeLocalBinding needsDynamic needsStatic needsStaticEnclosing hasEffectivelyStaticRef thisJoinPointDec thisJoinPointStaticPartDec thisEnclosingJoinPointStaticPartDec thisJoinPointDecLocal thisJoinPointStaticPartDecLocal thisEnclosingJoinPointStaticPartDecLocal replaceEffectivelyStaticRefs method inBlockThatCantRun org.aspectj.ajdt.internal.compiler.ast.ProceedVisitor  walk my body to see what is needed\r\n  replace effectively static refs with thisJoinPointStaticPart\r\n  System.err.println(\"check:  \"+ hasEffectivelyStaticRef + \", \" + needsDynamic);\r\n  System.err.println(\"isRef: \" + expr + \", \" + binding);\r\n  System.err.println(\"has static reg\");\r\n  System.err.println(\"replace static ref\");\r\n  thisJoinPointStaticPartDec;\r\n  TypeBinding[] parameters = method.binding.parameters;\r\n  ??? for performance we should do this in-place\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","SourceMethod":"closing equals getElementType getExceptionTypes getHandleMemento getHandleMementoDelimiter getKey getNumberOfParameters getParameterNames getParameterTypes getTypeParameter getTypeParameters getTypeParameterSignatures getPrimaryElement getRawParameterNames getReturnType getSignature hashCode isConstructor isMainMethod isResolved isSimilar readableName resolved toStringInfo toStringName toStringName parameterTypes org.aspectj.org.eclipse.jdt.internal.core.SourceMethod  Assert.isTrue(name.indexOf('.') == -1);\r\n  happen only if force open is true\r\n  faster than reaching the info\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  remove array from signature\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.core.IMethod#getKey()\r\n */\r\n /*\r\n * @see JavaElement#getPrimaryElement(boolean)\r\n */\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.core.IMethod#isResolved()\r\n */\r\n","BuildConfigModel":"getNodeForPath searchUpPaths getNodeForPathHelper getActiveNodes getActiveNodesHelper getSourceFile setSourceFile getRoot setRoot findNodeForSourceLine findNodeForSourceLineHelper matches hasMoreSpecificChild root sourceFile org.aspectj.ajde.ui.BuildConfigModel /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","DeletePackageFragmentRootOperation":"executeOperation deleteResource updateReferringProjectClasspaths updateProjectClasspath verify updateResourceFlags updateModelFlags org.aspectj.org.eclipse.jdt.internal.core.DeletePackageFragmentRootOperation  remember olds roots\r\n  update classpath if needed\r\n  delete resource\r\n  subtree doesn't contain any nested source folders\r\n  equals if nested source folder\r\n  remember old roots\r\n /*\r\n\t * Deletes the classpath entries equals to the given rootPath from all Java projects.\r\n\t */\r\n /*\r\n\t * Deletes the classpath entries equals to the given rootPath from the given project.\r\n\t */\r\n","TypeSafeEnum":"toString getName getKey write toString getName getKey write key name key name org.aspectj.util.TypeSafeEnum org.aspectj.util.TypeSafeEnum /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","RuntimeAnnotations":"getAnnotations areVisible readAnnotations writeAnnotations inflate isInflated getAnnotations areVisible readAnnotations writeAnnotations inflate isInflated annotations visible inflated annotation_data annotations visible inflated annotation_data org.aspectj.apache.bcel.classfile.annotation.RuntimeAnnotations org.aspectj.apache.bcel.classfile.annotation.RuntimeAnnotations  Keep just a byte stream of the data until someone actually asks for it\r\n  Keep just a byte stream of the data until someone actually asks for it\r\n /*Annotation*/\r\n /*Annotation*/\r\n","IVariableBinding":"isField isEnumConstant isParameter getName getDeclaringClass getType getVariableId getConstantValue getDeclaringMethod getVariableDeclaration org.aspectj.org.eclipse.jdt.core.dom.IVariableBinding","AjcTask":"setupAjc findAspectjtoolsJar isAspectjtoolsjar toString reset ignore validCommaList validCommaList setIncremental setLogCommand setHelp setVersion setXTerminateAfterCompilation setXReweavable setXJoinpoints setCheckRuntimeVersion setXNoWeave setNoWeave setXNotReweavable setXaddSerialVersionUID setXNoInline setShowWeaveInfo setNowarn setDeprecation setWarn setDebug setDebugLevel setEmacssym setCrossrefs setXlintwarnings setXlint setXlintfile setPreserveAllLocals setNoImportError setEncoding setLog setProceedOnError setVerbose setListFileArgs setReferenceInfo setTime setNoExit setFailonerror isForked setFork setMaxmem createJvmarg setTagFile setOutjar setOutxml setOutxmlfile setDestdir setTarget setCompliance setSource setCopyInjars setSourceRootCopyFilter setInpathDirCopyFilter setX setXDoneSignal setMessageHolder setMessageHolderClass setCommandEditor setCommandEditorClass incPath setSourcerootsref setSourceRoots createSourceRoots setXWeaveDir setInjarsref setInpathref setInjars setInpath createInjars createInpath setClasspath setClasspathref createClasspath setBootclasspath setBootclasspathref createBootclasspath setForkclasspath setForkclasspathref createForkclasspath setExtdirs setExtdirsref createExtdirs setAspectpathref setAspectpath createAspectpath setSrcDir createSrc createSrcdir isInIncrementalMode isInIncrementalFileMode setArgfilesref setArgfiles createArgfiles execute quit makeCommand setupOptions zipDirectory verifyOptions executeInSameVM executeInOtherVM execInOtherVM addFlaggedPath addListArgs check doCompletionTasks completeDestdir completeOutjar addFiles addFile readArguments logVerbose isEmpty addFlag addOption addFlagged extractArguments limitTo handleMessage isIgnoring dontIgnore ignore MAX_COMMANDLINE DEFAULT_DESTDIR USAGE_SUBSTRING VALID_XOPTIONS VALID_WARNINGS VALID_DEBUG VALID_XLINT COMMAND_EDITOR_NAME TARGET_INPUTS SOURCE_INPUTS COMPLIANCE_INPUTS COMMAND_EDITOR verbose listFileArgs failonerror fork maxMem logger cmd srcdir injars inpath classpath bootclasspath forkclasspath extdirs aspectpath argfiles ignored sourceRoots xweaveDir xdoneSignal adapterFiles adapterArguments messageHolder commandEditor copyInjars copyInpath sourceRootCopyFilter inpathDirCopyFilter destDir outjar outjarFixedup tmpOutjar executing main executingInOtherVM inIncrementalMode inIncrementalFileMode logCommand javaCmd args index command logger taskLevelVerbose handledMessage org.aspectj.tools.ant.taskdefs.AjcTask  no null checks b  mimic Javac task's behavior in copying resources,\r\n  ajc.setSrcDir(javac.getSrcdir());\r\n  arguments can override the filter, add to paths, override options\r\n  prefix.length();\r\n  prefixLength + infix.length() + suffix.length();\r\n  many now deprecated: reweavable*\r\n  ---------------------------- state and Ant interface thereto\r\n  ------- single entries dumped into cmd\r\n  ------- lists resolved in addListArgs() at execute() time\r\n  ----- added by adapter - integrate better?\r\n  need declare for \"all fields initialized in ...\"\r\n  non-standard default\r\n  used by entries with internal commas\r\n  ----------------\r\n  ajc-only eajc-also docDone\r\n  new special case: allow -Xset:anything\r\n  skip Ant interface?\r\n  ajc-only eajc-also docDone\r\n  when forking, Adapter handles failonerror\r\n  then copy temp jar contents and resources to output jar\r\n  package-private for testing\r\n  XXX remove zip explicitly..\r\n  File result = new File(tempDir,\r\n  HACK: this ignores the Usage message\r\n  try to use javaw instead on windows\r\n  when forking, do completion only at end and when successful\r\n  todo: ignore any srcdir if any argfiles and no explicit includes\r\n  relies on compiler to prune non-source files\r\n  XXXX remove as unused since 1.1.1\r\n  XXX slow, stupid, unmaintainable\r\n  not null or empty\r\n  ignored - will be flagged by setter\r\n  sigh - have to count anyway for now\r\n  adapted from DefaultCompilerAdapter.executeExternalCompile\r\n /* File */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.bridge.IMessageHandler#handleMessage(org.aspectj.bridge.IMessage)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.bridge.IMessageHandler#isIgnoring(org.aspectj.bridge.IMessage.Kind)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.bridge.IMessageHandler#dontIgnore(org.aspectj.bridge.IMessage.Kind)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.bridge.IMessageHandler#ignore(org.aspectj.bridge.IMessage.Kind)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2001-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC)\r\n *               2003-2004 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n *     Wes Isberg     2003-2004 changes\r\n * ******************************************************************/\r\n","TypeNameMatch":"getFullyQualifiedName getModifiers getPackageFragmentRoot getPackageName getSimpleTypeName getType getTypeContainerName getTypeQualifiedName org.aspectj.org.eclipse.jdt.core.search.TypeNameMatch","WeakClassLoaderReference":"getClassLoader equals hashCode getClassLoader equals hashCode hashcode loaderRef hashcode loaderRef org.aspectj.weaver.WeakClassLoaderReference org.aspectj.weaver.WeakClassLoaderReference  Assert instance!=null\r\n  Assert instance!=null\r\n /* *******************************************************************\r\n * Copyright (c) 2008 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2008 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement     initial implementation \r\n * ******************************************************************/\r\n","IGenericMethod":"getModifiers isConstructor getArgumentNames org.aspectj.org.eclipse.jdt.internal.compiler.env.IGenericMethod  We have added AccDeprecated\r\n","IAjTerminalSymbols":"org.aspectj.ajdt.compiler.IAjTerminalSymbols /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","Synthetic":"accept dump getBytes setBytes toString copy accept dump getBytes setBytes toString copy bytes bytes org.aspectj.apache.bcel.classfile.Synthetic org.aspectj.apache.bcel.classfile.Synthetic","ImportRewrite":"findInContext create create findInContext setImportOrder setOnDemandImportThreshold setStaticOnDemandImportThreshold getCompilationUnit getDefaultImportRewriteContext setFilterImplicitImports compareImport findInImports addImportFromSignature addImportFromSignature addImport addImport containsNestedCapture containsNestedCapture normalizeTypeBinding addImport addImport addImport addImport addStaticImport addStaticImport addStaticImport addStaticImport internalAddImport addEntry removeEntry removeImport removeStaticImport getRawName getRawQualifiedName rewriteImports getCreatedImports getCreatedStaticImports getAddedImports getAddedStaticImports getRemovedImports getRemovedStaticImports hasRecordedChanges filterFromList RES_NAME_FOUND RES_NAME_UNKNOWN RES_NAME_CONFLICT KIND_TYPE KIND_STATIC_FIELD KIND_STATIC_METHOD STATIC_PREFIX NORMAL_PREFIX defaultContext compilationUnit astRoot restoreExistingImports existingImports importOrder importOnDemandThreshold staticImportOnDemandThreshold addedImports removedImports createdImports createdStaticImports filterImplicitImports org.aspectj.org.eclipse.jdt.core.dom.rewrite.ImportRewrite  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  might be null\r\n  Initialized on use\r\n  Initialized on use\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  remove the prefix\r\n  $NON-NLS-1$\r\n  see bug 103044\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  bug 95942\r\n  $NON-NLS-1$\r\n  see bug 103044\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  no import\r\n  bug 96942\r\n  see bug 103044\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  reduced AST\r\n /* package */\r\n","AspectClinit":"generateSyntheticCode generatePostSyntheticCode hasPre hasPost initFailureField handlerLabel org.aspectj.ajdt.internal.compiler.ast.AspectClinit  if ((old.bits & ASTNode.NeedFreeReturn)!=0) this.bits |= ASTNode.NeedFreeReturn;\r\n  BcelClassWeaver.isInitFailureHandler()\r\n  Bug #52394\r\n  CHECK THIS...\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","ListRewrite":"getRewriteStore getEvent getParent getLocationInParent remove getASTRewrite replace insertAfter insertBefore insertFirst insertLast insertAt internalInsertAt createTargetNode createCopyTarget createMoveTarget createMoveTarget isInsertBoundToPreviousByDefault getOriginalList getRewrittenList parent childProperty rewriter org.aspectj.org.eclipse.jdt.core.dom.rewrite.ListRewrite  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  revisit: could use list type\r\n  $NON-NLS-1$\r\n /* package*/\r\n /*\r\n\t * Heuristic to decide if a inserted node is bound to previous or the next sibling. \r\n\t */\r\n","TypeNameMatchRequestor":"acceptTypeNameMatch org.aspectj.org.eclipse.jdt.core.search.TypeNameMatchRequestor","InternalCompletionProposal":"createDefaultParameterNames findMethodParameterNames getDeclarationPackageName getDeclarationTypeName getPackageName getTypeName getParameterPackageNames getParameterTypeNames setDeclarationPackageName setDeclarationTypeName setPackageName setTypeName setParameterPackageNames setParameterTypeNames setAccessibility setIsContructor setOriginalSignature NO_ATTACHED_SOURCE ARG ARG0 ARG1 ARG2 ARG3 ARGS1 ARGS2 ARGS3 ARGS4 completionEngine nameLookup declarationPackageName declarationTypeName packageName typeName parameterPackageNames parameterTypeNames originalSignature accessibility isConstructor org.aspectj.org.eclipse.jdt.internal.codeassist.InternalCompletionProposal  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  TODO (david) shouldn't it be NameLookup.ACCEPT_ALL ?\r\n  default parameters name\r\n /* consider secondary types */\r\n /* do NOT wait for indexes */\r\n /*don't check restrictions*/\r\n","JavadocConstants":"ANCHOR_PREFIX_END ANCHOR_PREFIX_START ANCHOR_SUFFIX ANCHOR_SUFFIX_LENGTH CONSTRUCTOR_DETAIL CONSTRUCTOR_SUMMARY FIELD_SUMMARY ENUM_CONSTANT_SUMMARY ANNOTATION_TYPE_REQUIRED_MEMBER_SUMMARY ANNOTATION_TYPE_OPTIONAL_MEMBER_SUMMARY END_OF_CLASS_DATA HTML_EXTENSION INDEX_FILE_NAME METHOD_DETAIL METHOD_SUMMARY NESTED_CLASS_SUMMARY PACKAGE_FILE_NAME START_OF_CLASS_DATA START_OF_CLASS_DATA_LENGTH org.aspectj.org.eclipse.jdt.internal.core.JavadocConstants  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","BcelPerClauseAspectAdder":"munge forceMunge doAggressiveInner doMunge getMatchingSyntheticMember getSignature matches hasPerClauseMembersAlready generatePerClauseMembers generatePerSingletonAspectOfMethod generatePerSingletonHasAspectMethod generatePerSingletonAjcClinitMethod generatePerObjectAspectOfMethod generatePerObjectHasAspectMethod generatePerObjectBindMethod generatePerCflowAspectOfMethod generatePerCflowHasAspectMethod generatePerCflowPushMethod generatePerCflowAjcClinitMethod generatePerTWAspectOfMethod generatePerTWGetWithinTypeNameMethod generatePerTWHasAspectMethod generatePerTWGetInstanceMethod generatePerTWCreateAspectInstanceMethod flagAsSynthetic munge forceMunge doAggressiveInner doMunge getMatchingSyntheticMember getSignature matches hasPerClauseMembersAlready generatePerClauseMembers generatePerSingletonAspectOfMethod generatePerSingletonHasAspectMethod generatePerSingletonAjcClinitMethod generatePerObjectAspectOfMethod generatePerObjectHasAspectMethod generatePerObjectBindMethod generatePerCflowAspectOfMethod generatePerCflowHasAspectMethod generatePerCflowPushMethod generatePerCflowAjcClinitMethod generatePerTWAspectOfMethod generatePerTWGetWithinTypeNameMethod generatePerTWHasAspectMethod generatePerTWGetInstanceMethod generatePerTWCreateAspectInstanceMethod flagAsSynthetic kind hasGeneratedInner kind hasGeneratedInner org.aspectj.weaver.bcel.BcelPerClauseAspectAdder org.aspectj.weaver.bcel.BcelPerClauseAspectAdder  no inner needed\r\n  Only munge the aspect type\r\n  inner class\r\n  not really an inner class of it but that does not matter, we pass back to the LTW\r\n  gets weaved and impl this interface that is still not defined.\r\n  pr237419 - not always going to generate the marker interface\r\n  cannot always do the right thing because may need to eagerly generate ajcMightHaveAspect interface for LTW (says Alex)\r\n  FIXME Alex percflowX is not using this one but AJ code style does generate it so..\r\n  patch <clinit> to delegate to ajc$postClinit at the end\r\n  TODO AV - a bit odd, looks like Bcel alters bytecode and has a IMPDEP1 in its representation\r\n  patch <clinit> to delegate to ajc$preClinit at the beginning\r\n  4: areturn\r\n  Create 'public String getWithinTypeName() { return ajc$withinType;}'\r\n  Class[] for \"getDeclaredMethod\"\r\n  Object for \"invoke\", static method\r\n  Object[] for \"invoke\", no arg\r\n  no inner needed\r\n  Only munge the aspect type\r\n  inner class\r\n  not really an inner class of it but that does not matter, we pass back to the LTW\r\n  gets weaved and impl this interface that is still not defined.\r\n  pr237419 - not always going to generate the marker interface\r\n  cannot always do the right thing because may need to eagerly generate ajcMightHaveAspect interface for LTW (says Alex)\r\n  FIXME Alex percflowX is not using this one but AJ code style does generate it so..\r\n  patch <clinit> to delegate to ajc$postClinit at the end\r\n  TODO AV - a bit odd, looks like Bcel alters bytecode and has a IMPDEP1 in its representation\r\n  patch <clinit> to delegate to ajc$preClinit at the beginning\r\n  4: areturn\r\n  Create 'public String getWithinTypeName() { return ajc$withinType;}'\r\n  Class[] for \"getDeclaredMethod\"\r\n  Object for \"invoke\", static method\r\n  Object[] for \"invoke\", no arg\r\n","InterSuperFixerVisitor":"endVisit endVisit visit endVisit fixReceiver dec onType superType depthCounter world org.aspectj.ajdt.internal.compiler.ast.InterSuperFixerVisitor  Keeps track of whether we are inside any nested local type declarations\r\n  not a parent interface (if one exists)\r\n  Don't mess with super calls down in nested local type declarations (pr90143)\r\n  FIXME ??? note error\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","IntConstant":"fromValue byteValue charValue doubleValue floatValue intValue longValue shortValue stringValue toString typeID value MINUS_FOUR MINUS_THREE MINUS_TWO MINUS_ONE ZERO ONE TWO THREE FOUR FIVE SIX SEVEN EIGHT NINE TEN org.aspectj.org.eclipse.jdt.internal.compiler.impl.IntConstant  implicit cast to return type\r\n  implicit cast to return type\r\n  implicit cast to return type\r\n  spec 15.17.11\r\n  $NON-NLS-1$\r\n","JavadocAllocationExpression":"internalResolveType isSuperAccess resolveType resolveType traverse traverse tagSourceStart tagSourceEnd tagValue memberStart qualification org.aspectj.org.eclipse.jdt.internal.compiler.ast.JavadocAllocationExpression  Propagate the type checking to the arguments, and check if the constructor is defined.\r\n  buffering the arguments' types\r\n  check resolved type\r\n  accept qualified member class constructor reference => see bug https:  First try to search a method instead\r\n  enum constant scenario\r\n  enum constant scenario\r\n","JavaElementDeltaBuilder":"added buildDeltas equals findAdditions findChangesInPositioning findContentChange findDeletions getElementInfo getNewPosition getOldPosition initialize insertPositions isPositionedCorrectly putElementInfo putNewPosition putOldPosition recordElementInfo recordNewPositions removed removeElementInfo toString trimDelta javaElement maxDepth infos oldPositions newPositions delta added removed previous next org.aspectj.org.eclipse.jdt.internal.core.JavaElementDeltaBuilder  it's a fine grained delta\r\n  this is a fine grained but not children affected -> mark as content changed\r\n  mark element as changed\r\n  all categories for this element were removed\r\n  take the union of old and new categories elements (see https:  no longer in the java model.\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","JavaDocLine":"formatUpperBorder getStartingPrefix JAVADOC_START_PREFIX org.aspectj.org.eclipse.jdt.internal.formatter.comment.JavaDocLine  $NON-NLS-1$\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentLine#formatUpperBorder(org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentRange, java.lang.String, int)\r\n\t */\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentLine#getStartingPrefix()\r\n\t */\r\n","ReferencePointcut":"getName setName propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty clone0 subtreeMatch0 accept0 treeSize couldMatchKinds fastMatch matchInternal toString write read resolveBindings postRead findResidueInternal concretize1 parameterizeWith shouldCopyLocationForConcretize equals hashCode accept couldMatchKinds fastMatch matchInternal toString write read resolveBindings postRead findResidueInternal concretize1 parameterizeWith shouldCopyLocationForConcretize equals hashCode accept pointcutName NAME_PROPERTY onType onTypeSymbolic name arguments typeVariableMap concretizing onType onTypeSymbolic name arguments typeVariableMap concretizing org.aspectj.org.eclipse.jdt.core.dom.ReferencePointcut org.aspectj.weaver.patterns.ReferencePointcut org.aspectj.weaver.patterns.ReferencePointcut  $NON-NLS-1$\r\n  lazy init must be thread-safe for readers\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  ??? do either of these match methods make any sense???\r\n  XXX ignores onType\r\n  in this case we've already signalled an error\r\n  make this a static reference\r\n  if we're not a static reference, then do a lookup of outers\r\n  check visibility\r\n  the type parameters presented\r\n  if (onType == null) onType = pointcutDef.getDeclaringType();\r\n  we are allowed to bind to pointcuts which use subtypes as this is type safe\r\n  ??? This is not thread safe, but this class is not designed for multi-threading\r\n  Thread.currentThread().dumpStack();\r\n  in the declaring type\r\n  Thread.currentThread().dumpStack();\r\n  as we don't know about any new parents added via decp.\r\n  the type parameters presented\r\n  and not one in a subtype that happens to have the same name.\r\n  We want to keep the original source location, not the reference location\r\n  XXX needs check that arguments contains no WildTypePatterns\r\n  ??? do either of these match methods make any sense???\r\n  XXX ignores onType\r\n  in this case we've already signalled an error\r\n  make this a static reference\r\n  if we're not a static reference, then do a lookup of outers\r\n  check visibility\r\n  the type parameters presented\r\n  if (onType == null) onType = pointcutDef.getDeclaringType();\r\n  we are allowed to bind to pointcuts which use subtypes as this is type safe\r\n  ??? This is not thread safe, but this class is not designed for multi-threading\r\n  Thread.currentThread().dumpStack();\r\n  in the declaring type\r\n  Thread.currentThread().dumpStack();\r\n  as we don't know about any new parents added via decp.\r\n  the type parameters presented\r\n  and not one in a subtype that happens to have the same name.\r\n  We want to keep the original source location, not the reference location\r\n  XXX needs check that arguments contains no WildTypePatterns\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","FakeAnnotation":"getTypeName getTypeSignature addElementNameValuePair dump getTypeIndex getValues isRuntimeVisible setIsRuntimeVisible toShortString toString getTypeName getTypeSignature addElementNameValuePair dump getTypeIndex getValues isRuntimeVisible setIsRuntimeVisible toShortString toString name sig isRuntimeVisible name sig isRuntimeVisible org.aspectj.weaver.bcel.FakeAnnotation org.aspectj.weaver.bcel.FakeAnnotation","SelectionNodeFound":"binding isDeclaration serialVersionUID org.aspectj.org.eclipse.jdt.internal.codeassist.select.SelectionNodeFound  backward compatible\r\n  we found a problem in the selection node\r\n","CodeSnippetFieldReference":"generateAssignment generateCode generateCompoundAssignment generatePostIncrement manageSyntheticAccessIfNecessary resolveType evaluationContext delegateThis org.aspectj.org.eclipse.jdt.internal.eval.CodeSnippetFieldReference  need a receiver?\r\n  perform null check\r\n  perform null check\r\n  we need a null on the stack to use the reflect emulation\r\n  array length\r\n  used to store the value\r\n  used to retrieve the actual value\r\n  used to store the value\r\n  used to retrieve the actual value\r\n  promote the array reference to the suitable operation type\r\n  prefix operation\r\n  generate the increment value (will by itself  be promoted to the operation value)\r\n  perform the operation\r\n  cast the value back to the array reference type\r\n  field receiver value\r\n  value field receiver value\r\n  promote the array reference to the suitable operation type\r\n  prefix operation\r\n  generate the increment value (will by itself  be promoted to the operation value)\r\n  perform the operation\r\n  cast the value back to the array reference type\r\n  the actual stack is: receiver\r\n  the actual stack is: receiver receiver\r\n  value \t\t\t\t\t\t\t\t\t\t\tstore\r\n  Stack:  [owner][old field value]  ---> [old field value][owner][old field value]\r\n  no need for extra cast if same as first bound anyway\r\n  extra cast needed if field type was type variable\r\n  if field from parameterized type got found, use the original field at codegen time\r\n  NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type\r\n  array.length\r\n  no change for Object fields\r\n  regular receiver reference\r\n  the case receiverType.isArrayType and token = 'length' is handled by the scope API\r\n  if not found then internal error, field should have been found\r\n  check for this.x in static is done in the resolution of the receiver\r\n  TODO need to check if shouldn't be isImplicitThis check (and then removed)\r\n /*\r\n * No need to emulate access to protected fields since not implicitly accessed\r\n */\r\n","IOpcodeMnemonics":"NOP ACONST_NULL ICONST_M1 ICONST_0 ICONST_1 ICONST_2 ICONST_3 ICONST_4 ICONST_5 LCONST_0 LCONST_1 FCONST_0 FCONST_1 FCONST_2 DCONST_0 DCONST_1 BIPUSH SIPUSH LDC LDC_W LDC2_W ILOAD LLOAD FLOAD DLOAD ALOAD ILOAD_0 ILOAD_1 ILOAD_2 ILOAD_3 LLOAD_0 LLOAD_1 LLOAD_2 LLOAD_3 FLOAD_0 FLOAD_1 FLOAD_2 FLOAD_3 DLOAD_0 DLOAD_1 DLOAD_2 DLOAD_3 ALOAD_0 ALOAD_1 ALOAD_2 ALOAD_3 IALOAD LALOAD FALOAD DALOAD AALOAD BALOAD CALOAD SALOAD ISTORE LSTORE FSTORE DSTORE ASTORE ISTORE_0 ISTORE_1 ISTORE_2 ISTORE_3 LSTORE_0 LSTORE_1 LSTORE_2 LSTORE_3 FSTORE_0 FSTORE_1 FSTORE_2 FSTORE_3 DSTORE_0 DSTORE_1 DSTORE_2 DSTORE_3 ASTORE_0 ASTORE_1 ASTORE_2 ASTORE_3 IASTORE LASTORE FASTORE DASTORE AASTORE BASTORE CASTORE SASTORE POP POP2 DUP DUP_X1 DUP_X2 DUP2 DUP2_X1 DUP2_X2 SWAP IADD LADD FADD DADD ISUB LSUB FSUB DSUB IMUL LMUL FMUL DMUL IDIV LDIV FDIV DDIV IREM LREM FREM DREM INEG LNEG FNEG DNEG ISHL LSHL ISHR LSHR IUSHR LUSHR IAND LAND IOR LOR IXOR LXOR IINC I2L I2F I2D L2I L2F L2D F2I F2L F2D D2I D2L D2F I2B I2C I2S LCMP FCMPL FCMPG DCMPL DCMPG IFEQ IFNE IFLT IFGE IFGT IFLE IF_ICMPEQ IF_ICMPNE IF_ICMPLT IF_ICMPGE IF_ICMPGT IF_ICMPLE IF_ACMPEQ IF_ACMPNE GOTO JSR RET TABLESWITCH LOOKUPSWITCH IRETURN LRETURN FRETURN DRETURN ARETURN RETURN GETSTATIC PUTSTATIC GETFIELD PUTFIELD INVOKEVIRTUAL INVOKESPECIAL INVOKESTATIC INVOKEINTERFACE NEW NEWARRAY ANEWARRAY ARRAYLENGTH ATHROW CHECKCAST INSTANCEOF MONITORENTER MONITOREXIT WIDE MULTIANEWARRAY IFNULL IFNONNULL GOTO_W JSR_W BREAKPOINT IMPDEP1 IMPDEP2 org.aspectj.org.eclipse.jdt.core.util.IOpcodeMnemonics","RegionBasedTypeHierarchy":"add initializeRegions compute isAffectedByOpenable javaProject pruneDeadBranches pruneDeadBranches pruneDeadBranches removeType region org.aspectj.org.eclipse.jdt.internal.core.hierarchy.RegionBasedTypeHierarchy  \"new\" element added to region\r\n  (see https:  change to working copy\r\n  if no focus, hierarchy is affected if the element is part of the region\r\n /*\r\n * @see TypeHierarchy#initializeRegions\r\n */\r\n /*\r\n * Returns whether all subtypes of the given type have been pruned.\r\n */\r\n","InitializationFlowContext":"checkInitializerExceptions individualToString recordHandlingException exceptionCount thrownExceptions exceptionThrowers exceptionThrowerFlowInfos org.aspectj.org.eclipse.jdt.internal.compiler.flow.InitializationFlowContext  no exception allowed by default\r\n  $NON-NLS-1$\r\n  even if unreachable code, need to perform unhandled exception diagnosis\r\n","Expression":"resolveConstantExpressionValue resolveTypeBinding resolveBoxing resolveUnboxing isConstantValueRepresentable analyseCode analyseCode checkCastTypesCompatibility checkNPE checkUnsafeCast computeConversion generateCode generateCode generateOptimizedBoolean generateOptimizedStringConcatenation generateOptimizedStringConcatenationCreation getAllInheritedMethods getAllInheritedMethods0 isCompactableOperation isConstantValueOfTypeAssignableToType isTypeReference localVariableBinding markAsNonNull nullStatus optimizedBooleanConstant postConversionType print printExpression printStatement resolve resolveType resolveType resolveTypeExpecting reusableJSRTarget setExpectedType tagAsNeedCheckCast tagAsUnnecessaryCast toTypeReference traverse traverse constant statementEnd implicitConversion resolvedType org.aspectj.org.eclipse.jdt.core.dom.Expression org.aspectj.org.eclipse.jdt.internal.compiler.ast.Expression  constantTypeID == constant.typeID\r\n  boolean\r\n  boolean\r\n  boolean\r\n  boolean\r\n  boolean\r\n  boolean\r\n  boolean\r\n  boolean\r\n  like constant propagation\r\n  boxing - only widening match is allowed\r\n  unboxing - only widening match is allowed\r\n  use the same constant\r\n  null is compatible with every thing\r\n  -----------cast to something which is NOT a base type--------------------------\r\n  identity conversion\r\n  ( ARRAY ) ARRAY\r\n  recurse on array type elements\r\n  ( TYPE_PARAMETER ) ARRAY\r\n  recurse on the type variable upper bound\r\n  ( CLASS  recursively on the type variable upper bound\r\n  intersection type\r\n  recursively on the type variable upper bound\r\n  potential runtime error\r\n  ( ARRAY ) CLASS\r\n  ( TYPE_PARAMETER ) CLASS\r\n  recurse on the type variable upper bound\r\n  ( CLASS ) CLASS\r\n  (String) cst is still a constant\r\n  ( INTERFACE ) CLASS\r\n  unless final a subclass may implement the interface ==> no check at compile time\r\n  ensure there is no collision between both interfaces: i.e. I1 extends List<String>, I2 extends List<Object>\r\n  ( ARRAY ) INTERFACE\r\n  ( INTERFACE ) TYPE_PARAMETER\r\n  recurse on the type variable upper bound\r\n  no runtime error\r\n  ( CLASS ) INTERFACE\r\n  can only be a downcast\r\n  no subclass for castType, thus compile-time check is invalid\r\n  ensure there is no collision between both interfaces: i.e. I1 extends List<String>, I2 extends List<Object>\r\n  ( INTERFACE ) INTERFACE\r\n  pre1.5 semantics - no covariance allowed (even if 1.5 compliant, but 1.4 source)\r\n  ensure there is no collision between both interfaces: i.e. I1 extends List<String>, I2 extends List<Object>\r\n  from thereon it is set\r\n  already set independantly\r\n  Object o = 12;\r\n  or to become an int before boxed into an Integer\r\n  e.g. ? extends String  ==> String (103227)\r\n  implicitConversion may result in i2i which will result in NO code gen\r\n  regular object ref\r\n  actual non-constant code generation\r\n  generate a constant expression\r\n  implicit falling through the TRUE case\r\n  implicit falling through the FALSE case\r\n  constant == true\r\n  branching\r\n  Implicit falling through the TRUE case\r\n  Implicit falling through the FALSE case\r\n  reposition the endPC\r\n  optimize str + \"\"\r\n  append(Object) returns append(valueOf(Object)), which means that the null case is handled by the next case.\r\n  null case is not a constant\r\n  optimize \"\"+<str>\r\n  use current explicit conversion in order to get some new value to compare with current one\r\n  No free assignment conversion from anything but to integral ones.\r\n  (this request some work d be done by the VM on signed numbers)\r\n  this is no more called for now, waiting for inter procedural null reference analysis\r\n  constant expression cannot be null\r\n  $NON-NLS-1$\r\n  by default... subclasses should implement a better TB if required.\r\n  by default... subclasses should implement a better TB if required.\r\n  needed in case of generic method invocation\r\n /*no match*/\r\n /*no match*/\r\n /*no match*/\r\n /*no match*/\r\n /*no match*/\r\n /* Optimized (java) code generation for string concatenations that involve StringBuffer\r\n\t * creation: going through this path means that there is no need for a new StringBuffer\r\n\t * creation, further operands should rather be only appended to the current one.\r\n\t * By default: no optimization.\r\n\t */\r\n /* Optimized (java) code generation for string concatenations that involve StringBuffer\r\n\t * creation: going through this path means that there is no need for a new StringBuffer\r\n\t * creation, further operands should rather be only appended to the current one.\r\n\t */\r\n /* (this.bits & IsNonNull) != 0 || */\r\n","ReferenceContext":"abort compilationResult hasErrors tagAsHavingErrors org.aspectj.org.eclipse.jdt.internal.compiler.impl.ReferenceContext","IJavaElementDelta":"getAddedChildren getAffectedChildren getCompilationUnitAST getChangedChildren getElement getFlags getKind getMovedFromElement getMovedToElement getRemovedChildren getResourceDeltas ADDED REMOVED CHANGED F_CONTENT F_MODIFIERS F_CHILDREN F_MOVED_FROM F_MOVED_TO F_ADDED_TO_CLASSPATH F_REMOVED_FROM_CLASSPATH F_CLASSPATH_REORDER F_REORDER F_OPENED F_CLOSED F_SUPER_TYPES F_SOURCEATTACHED F_SOURCEDETACHED F_FINE_GRAINED F_ARCHIVE_CONTENT_CHANGED F_PRIMARY_WORKING_COPY F_CLASSPATH_CHANGED F_PRIMARY_RESOURCE F_AST_AFFECTED F_CATEGORIES org.aspectj.org.eclipse.jdt.core.IJavaElementDelta","TagBits":"IsArrayType IsBaseType IsNestedType IsMemberType MemberTypeMask IsLocalType LocalTypeMask IsAnonymousType AnonymousTypeMask IsBinaryBinding HasInconsistentHierarchy BeginHierarchyCheck EndHierarchyCheck ContainsNestedTypesInSignature HasParameterAnnotations KnowsDefaultAbstractMethods IsArgument ClearPrivateModifier AreFieldsSorted AreFieldsComplete AreMethodsSorted AreMethodsComplete HasNoMemberTypes HierarchyHasProblems TypeVariablesAreConnected PassedBoundCheck IsBoundParameterizedType HasUnresolvedTypeVariables HasUnresolvedSuperclass HasUnresolvedSuperinterfaces HasUnresolvedEnclosingType HasUnresolvedMemberTypes HasTypeVariable HasDirectWildcard BeginAnnotationCheck EndAnnotationCheck AnnotationResolved DeprecatedAnnotationResolved AnnotationTarget AnnotationForType AnnotationForField AnnotationForMethod AnnotationForParameter AnnotationForConstructor AnnotationForLocalVariable AnnotationForAnnotationType AnnotationForPackage AnnotationTargetMASK AnnotationSourceRetention AnnotationClassRetention AnnotationRuntimeRetention AnnotationRetentionMASK AnnotationDeprecated AnnotationDocumented AnnotationInherited AnnotationOverride AnnotationSuppressWarnings AllStandardAnnotationsMask DefaultValueResolved HasNonPrivateConstructor org.aspectj.org.eclipse.jdt.internal.compiler.lookup.TagBits  Tag bits in the tagBits int of every TypeBinding\r\n  for binary type binding only\r\n  type\r\n  type\r\n  method\r\n  method\r\n  type\r\n  local\r\n  constructor binding\r\n  test bits to see if parts of binary types are faulted\r\n  sorted and all resolved\r\n  sorted and all resolved\r\n  test bit to avoid asking a type for a member type (includes inherited member types)\r\n  test bit to identify if the type's hierarchy is inconsistent\r\n  test bit to identify if the type's type variables have been connected\r\n  set for parameterized type with successfull bound check\r\n  set for parameterized type NOT of the form X<?,?>\r\n  used by BinaryTypeBinding\r\n  set either for type variables (direct) or parameterized types indirectly referencing type variables\r\n  set for parameterized types directly referencing wildcards\r\n  for the annotation cycle hierarchy check used by ClassScope\r\n  9-bits for targets\r\n  @Target({}) only sets this bit\r\n  2-bits for retention (should check (tagBits & RetentionMask) == RuntimeRetention\r\n  marker annotations\r\n  set when type contains non-private constructor(s)\r\n","RuntimeVisibleParameterAnnotationsAttribute":"getParameterAnnotations getParametersNumber NO_ENTRIES parametersNumber parameterAnnotations org.aspectj.org.eclipse.jdt.internal.core.util.RuntimeVisibleParameterAnnotationsAttribute /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IRuntimeVisibleParameterAnnotations#getAnnotations()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IRuntimeVisibleParameterAnnotations#getParametersNumber()\r\n\t */\r\n","IExceptionAttribute":"getExceptionsNumber getExceptionNames getExceptionIndexes org.aspectj.org.eclipse.jdt.core.util.IExceptionAttribute","CompletionOnBrankStatementLabel":"analyseCode resolve printStatement BREAK CONTINUE kind possibleLabels org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnBrankStatementLabel  Is never called\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","AlignmentException":"toString LINE_TOO_LONG ALIGN_TOO_SMALL serialVersionUID reason value relativeDepth org.aspectj.org.eclipse.jdt.internal.formatter.align.AlignmentException  backward compatible\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","SourceField":"equals findNode getConstant getElementType getKey getHandleMementoDelimiter getPrimaryElement getTypeSignature isEnumConstant isResolved resolved toStringInfo org.aspectj.org.eclipse.jdt.internal.core.SourceField  For enum constant declaration, we return the node directly\r\n  not a parsable constant\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  happen only if force open is true\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.core.IField#getKey()\r\n */\r\n /*\r\n * @see JavaElement#getPrimaryElement(boolean)\r\n */\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.core.IField#isEnumConstant()\r\n */\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.core.IField#isResolved()\r\n */\r\n","LocalVariable":"accept dump getConstantPool getLength getName getNameIndex getSignature getSignatureIndex getIndex getStartPC setConstantPool setLength setNameIndex setSignatureIndex setIndex setStartPC toString copy closing createElementInfo equals exists generateInfos getHandleFromMemento getHandleMemento getHandleMementoDelimiter getCorrespondingResource getElementName getElementType getNameRange getPath getResource getSource getSourceRange getTypeSignature getUnderlyingResource hashCode isStructureKnown toStringInfo accept dump getConstantPool getLength getName getNameIndex getSignature getSignatureIndex getIndex getStartPC setConstantPool setLength setNameIndex setSignatureIndex setIndex setStartPC toString copy start_pc length name_index signature_index index constant_pool name declarationSourceStart declarationSourceEnd nameStart nameEnd typeSignature start_pc length name_index signature_index index constant_pool org.aspectj.apache.bcel.classfile.LocalVariable org.aspectj.org.eclipse.jdt.internal.core.LocalVariable org.aspectj.apache.bcel.classfile.LocalVariable  Range in which the variable is valid\r\n  Index in constant pool of variable name\r\n  Index of variable signature\r\n  a local variable has no info\r\n  see https:  $NON-NLS-1$\r\n  Range in which the variable is valid\r\n  Index in constant pool of variable name\r\n  Index of variable signature\r\n /*\r\n\t * @see JavaElement#getHandleMemento(StringBuffer)\r\n\t */\r\n","SoftException":"getWrappedThrowable getCause printStackTrace printStackTrace printStackTrace getWrappedThrowable getCause printStackTrace printStackTrace printStackTrace getWrappedThrowable getCause printStackTrace printStackTrace printStackTrace HAVE_JAVA_14 inner HAVE_JAVA_14 inner HAVE_JAVA_14 inner org.aspectj.lang.SoftException org.aspectj.lang.SoftException org.aspectj.lang.SoftException /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC),\r\n *               2004 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC),\r\n *               2004 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC),\r\n *               2004 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","ISupportsMessageContext":"setMessageContext setMessageContext org.aspectj.weaver.tools.ISupportsMessageContext org.aspectj.weaver.tools.ISupportsMessageContext","SourceElementParser":"pushDeclaringType popDeclaringType peekDeclaringType visit visit record acceptJavadocTypeReference addUnknownRef checkComment classInstanceCreation collectAnnotationPositions consumeAnnotationAsModifier consumeClassInstanceCreationExpressionQualifiedWithTypeArguments consumeAnnotationTypeDeclarationHeaderName consumeClassHeaderName1 consumeClassInstanceCreationExpressionWithTypeArguments consumeConstructorHeaderName consumeConstructorHeaderNameWithTypeParameters consumeEnumConstantWithClassBody consumeEnumConstantNoClassBody consumeEnumHeaderName consumeExitVariableWithInitialization consumeExitVariableWithoutInitialization consumeFieldAccess consumeFormalParameter consumeInterfaceHeaderName1 consumeMemberValuePair consumeMarkerAnnotation consumeMethodHeaderName consumeMethodHeaderNameWithTypeParameters consumeMethodInvocationName consumeMethodInvocationNameWithTypeArguments consumeMethodInvocationPrimary consumeMethodInvocationPrimaryWithTypeArguments consumeMethodInvocationSuper consumeMethodInvocationSuperWithTypeArguments consumeNormalAnnotation consumeSingleMemberAnnotation consumeSingleStaticImportDeclarationName consumeSingleTypeImportDeclarationName consumeStaticImportOnDemandDeclarationName consumeTypeImportOnDemandDeclarationName convertToMethodDeclaration endParse getTypeParameterInfos getTypeReference getUnspecifiedReference getUnspecifiedReferenceOptimized hasDeprecatedAnnotation newImportReference newQualifiedNameReference newSingleNameReference notifySourceElementRequestor notifySourceElementRequestor notifySourceElementRequestor notifySourceElementRequestor notifySourceElementRequestor parseCompilationUnit parseCompilationUnit parseTypeMemberDeclarations parseTypeMemberDeclarations quickSort rememberCategories reset sourceEnd visitIfNeeded visitIfNeeded visitIfNeeded requestor sourceType reportReferenceInfo typeNames superTypeNames nestedTypeIndex localDeclarationVisitor options sourceEnds nodesToCategories useSourceJavadocParser declaringTypes org.aspectj.org.eclipse.jdt.internal.compiler.SourceElementParser  a map from ASTNode to char[][]\r\n  don't visit members as this was done during notifySourceElementRequestor(...)\r\n  don't visit members as this was done during notifySourceElementRequestor(...)\r\n  TODO (jerome) clients are trapping problems either through factory or requestor... is result storing needed?\r\n  To do so, we define the record method of the ProblemReporter\r\n  set specific javadoc parser\r\n  QualifiedNameReference\r\n  This gained 3.7% in the indexing performance test.\r\n  discard obsolete comments while inside methods or fields initializer (see bug 74369)\r\n  eliminate comments located after modifierSourceStart if positionned\r\n  consider all remaining leading comments to be part of current declaration\r\n  non javadoc comment have negative end positions\r\n  stop is one over,\r\n  do not report problem before last parsed comment while recovering code...\r\n  null if check javadoc is not activated\r\n  Report reference info in javadoc comment @throws  Report reference info in javadoc comment @see tags\r\n  not to see the type reference reported in super call to getTypeReference(...)\r\n  accept annotation type reference\r\n  not to see the type reference reported in super call to getTypeReference(...)\r\n  if ast node was pushed on the ast stack\r\n  if ast node was pushed on the ast stack\r\n  not to see the type reference reported in super call to getTypeReference(...)\r\n  if ast node was pushed on the ast stack\r\n  if ast node was pushed on the ast stack\r\n  if ast node was pushed on the ast stack\r\n  we want to include the comma or the semi-colon\r\n  do nothing by default\r\n  FieldAccess ::= 'super' '.' 'Identifier'\r\n  the declarationSourceStart to be set\r\n  if ast node was pushed on the ast stack\r\n  accept annotation type reference\r\n  if ast node was pushed on the ast stack\r\n  if ast node was pushed on the ast stack\r\n  MethodInvocation ::= Name '(' ArgumentListopt ')'\r\n  when the name is only an identifier...we have a message send to \"this\" (implicit)\r\n  MethodInvocation ::= Name '.' TypeArguments 'Identifier' '(' ArgumentListopt ')'\r\n  when the name is only an identifier...we have a message send to \"this\" (implicit)\r\n  MethodInvocation ::= 'super' '.' 'Identifier' '(' ArgumentListopt ')'\r\n  MethodInvocation ::= 'super' '.' TypeArguments 'Identifier' '(' ArgumentListopt ')'\r\n  accept annotation type reference\r\n  SingleTypeImportDeclarationName ::= 'import' 'static' Name\r\n  <-- see comment into modifiersFlag(int)\r\n  this.endPosition is just before the ;\r\n  convert the static import reference to a non-static importe reference\r\n  used to avoid branching back into the regular automaton\r\n  recovery\r\n  => accept unknown ref on identifier\r\n  see bug https:  accept type name\r\n  this.endPosition is just before the ;\r\n  used to avoid branching back into the regular automaton\r\n  recovery\r\n  <-- see comment into modifiersFlag(int)\r\n  this.endPosition is just before the ;\r\n  convert the static import reference to a non-static importe reference\r\n  used to avoid branching back into the regular automaton\r\n  recovery\r\n  this.endPosition is just before the ;\r\n  used to avoid branching back into the regular automaton\r\n  recovery\r\n  Qualified variable reference\r\n  pop the 0\r\n  generic type\r\n  flag for precompiled type reference on base types\r\n  no need to use this position as it is an array\r\n  Qualified variable reference\r\n  sourceStart\r\n  sourceEnd\r\n  single variable reference\r\n  single variable reference\r\n  sourceEnd\r\n  sourceStart\r\n  want to be able to notify the requestor on the created ast node\r\n  range check\r\n  collect the top level ast nodes\r\n  instanceof TypeDeclaration\r\n  notify the nodes in the syntactical order\r\n  range check\r\n  by default no selector end position\r\n  remember deprecation so as to not lose it below\r\n  remember deprecation so as to not lose it below\r\n  range check\r\n  accept constructor reference for enum constant\r\n  use the declaration source end by default\r\n  remember deprecation so as to not lose it below\r\n  regular field\r\n  enum constant\r\n  filter out initializations that are not a constant (simple check)\r\n  fall through next case\r\n  range check\r\n  see PR 3442\r\n  remember deprecation so as to not lose it below\r\n  need a resize\r\n  FIELD\r\n  METHOD\r\n  MEMBER\r\n  no need for field initialization\r\n  reset parser\r\n  the compilationUnitDeclaration should contain exactly one type\r\n  case of enum constant body\r\n /*\r\n *\r\n * INTERNAL USE-ONLY\r\n */\r\n /*\r\n *\r\n * INTERNAL USE-ONLY\r\n */\r\n /*\r\n *\r\n * INTERNAL USE-ONLY\r\n */\r\n /*\r\n *\r\n * INTERNAL USE-ONLY\r\n */\r\n /*\r\n *\r\n * INTERNAL USE-ONLY\r\n */\r\n /* build a Reference on a variable that may be qualified or not\r\n\t * This variable is a type reference and dim will be its dimensions\r\n\t */\r\n /*\r\n * Checks whether one of the annotations is the @Deprecated annotation\r\n * (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=89807)\r\n */\r\n /*\r\n * Update the bodyStart of the corresponding parse node\r\n */\r\n /*\r\n * Update the bodyStart of the corresponding parse node\r\n */\r\n /*\r\n* Update the bodyStart of the corresponding parse node\r\n*/\r\n /* automaton initialization */\r\n /* scanner initialization */\r\n /* unit creation */\r\n /* run automaton */\r\n /* automaton initialization */\r\n /* scanner initialization */\r\n /* unit creation */\r\n /* run automaton */\r\n /*\r\n * Sort the given ast nodes by their positions.\r\n */\r\n","IndexQueryRequestor":"acceptIndexMatch org.aspectj.org.eclipse.jdt.internal.core.search.IndexQueryRequestor  answer false if requesting cancel\r\n","BcelAnnotation":"getTargets hasNameValuePair hasNamedValue stringify isRuntimeVisible getBcelAnnotation getStringFormOfValue getTargets hasNameValuePair hasNamedValue stringify isRuntimeVisible getBcelAnnotation getStringFormOfValue bcelAnnotation bcelAnnotation org.aspectj.weaver.bcel.BcelAnnotation org.aspectj.weaver.bcel.BcelAnnotation /* of String */\r\n /* *******************************************************************\r\n * Copyright (c) 2008 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /* of String */\r\n /* *******************************************************************\r\n * Copyright (c) 2008 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","ResolvedType":"getDirectSupertypes getDeclaredFields getDeclaredMethods getDeclaredInterfaces getDeclaredPointcuts getSuperclass getModifiers isMissing isMissing getAnnotationTypes getAnnotationOfType getResolvedComponentType getWorld equals getFields getMethods getMethodsWithoutIterator addAndRecurse getResolvedTypeParameters lookupField lookupMethod lookupMethodInITDs lookupMember lookupMember lookupResolvedMember matches conflictingSignature getPointcuts findPointcut collectCrosscuttingMembers collectDeclares collectShadowMungers doesNotExposeShadowMungers getPerClause getDeclares getTypeMungers getPrivilegedAccesses isInterface isAbstract isClass isAspect isAnnotationStyleAspect isEnum isAnnotation isAnonymous isNested addAnnotation getAnnotations canAnnotationTargetType getAnnotationTargetKinds isAnnotationWithRuntimeRetention isSynthetic isFinal getMemberParameterizationMap getDeclaredAdvice getDeclaredShadowMungers getDeclaredJavaFields getDeclaredJavaMethods getDeclaredShadowMungersArray filterInJavaVisible getSourceContext resetPrimitives makeArray getSize getModifiers isPrimitiveType hasAnnotation isAssignableFrom isAssignableFrom isCoerceableFrom resolve needsNoConversionFrom getDeclaredFields getDeclaredMethods getDeclaredInterfaces getDeclaredPointcuts getSuperclass getSourceContext getName isMissing hasAnnotation getDeclaredFields getDeclaredMethods getDeclaredInterfaces getDeclaredPointcuts getSuperclass getModifiers isAssignableFrom isAssignableFrom isCoerceableFrom needsNoConversionFrom getSourceContext lookupMemberNoSupers lookupMemberWithSupersAndITDs lookupDirectlyDeclaredMemberNoSupers lookupMemberIncludingITDsOnInterfaces lookupMemberIncludingITDsOnInterfaces getInterTypeMungers getInterTypeParentMungers getInterTypeMungersIncludingSupers getInterTypeParentMungersIncludingSupers collectInterTypeParentMungers collectInterTypeMungers checkInterTypeMungers checkAbstractDeclaration getMungerLocation getDeclaringType isVisible samePackage genericTypeEquals discoverActualOccurrenceOfTypeInHierarchy fillInAnyTypeParameters addInterTypeMunger compareToExistingMembers compareToExistingMembers isDuplicateMemberWithinTargetType checkLegalOverride compareMemberPrecedence isMoreVisible isPackage interTypeConflictError lookupSyntheticMember clearInterTypeMungers isTopmostImplementor getTopmostImplementor getExposedPointcuts addPointcutsResolvingConflicts getSourceLocation isExposedToWeaver getWeaverState getGenericType parameterizedWith parameterize isException isCheckedException isConvertableFrom isAssignableFrom isAssignableFrom isCoerceableFrom needsNoConversionFrom getSignatureForAttribute isParameterizedWithTypeVariable ajMembersNeedParameterization getAjMemberParameterizationMap setBinaryPath getBinaryPath getDirectSupertypes getDeclaredFields getDeclaredMethods getDeclaredInterfaces getDeclaredPointcuts getSuperclass getModifiers isMissing isMissing getAnnotationTypes getAnnotationOfType getResolvedComponentType getWorld equals getFields getMethods getMethodsWithoutIterator addAndRecurse getResolvedTypeParameters lookupField lookupMethod lookupMethodInITDs lookupMember lookupMember lookupResolvedMember matches conflictingSignature getPointcuts findPointcut collectCrosscuttingMembers collectDeclares collectShadowMungers doesNotExposeShadowMungers getPerClause getDeclares getTypeMungers getPrivilegedAccesses isInterface isAbstract isClass isAspect isAnnotationStyleAspect isEnum isAnnotation isAnonymous isNested addAnnotation getAnnotations canAnnotationTargetType getAnnotationTargetKinds isAnnotationWithRuntimeRetention isSynthetic isFinal getMemberParameterizationMap getDeclaredAdvice getDeclaredShadowMungers getDeclaredJavaFields getDeclaredJavaMethods getDeclaredShadowMungersArray filterInJavaVisible getSourceContext resetPrimitives makeArray getSize getModifiers isPrimitiveType hasAnnotation isAssignableFrom isAssignableFrom isCoerceableFrom resolve needsNoConversionFrom getDeclaredFields getDeclaredMethods getDeclaredInterfaces getDeclaredPointcuts getSuperclass getSourceContext getName isMissing hasAnnotation getDeclaredFields getDeclaredMethods getDeclaredInterfaces getDeclaredPointcuts getSuperclass getModifiers isAssignableFrom isAssignableFrom isCoerceableFrom needsNoConversionFrom getSourceContext lookupMemberNoSupers lookupMemberWithSupersAndITDs lookupDirectlyDeclaredMemberNoSupers lookupMemberIncludingITDsOnInterfaces lookupMemberIncludingITDsOnInterfaces getInterTypeMungers getInterTypeParentMungers getInterTypeMungersIncludingSupers getInterTypeParentMungersIncludingSupers collectInterTypeParentMungers collectInterTypeMungers checkInterTypeMungers checkAbstractDeclaration getMungerLocation getDeclaringType isVisible samePackage genericTypeEquals discoverActualOccurrenceOfTypeInHierarchy fillInAnyTypeParameters addInterTypeMunger compareToExistingMembers compareToExistingMembers isDuplicateMemberWithinTargetType checkLegalOverride compareMemberPrecedence isMoreVisible isPackage interTypeConflictError lookupSyntheticMember clearInterTypeMungers isTopmostImplementor getTopmostImplementor getExposedPointcuts addPointcutsResolvingConflicts getSourceLocation isExposedToWeaver getWeaverState getGenericType parameterizedWith parameterize isException isCheckedException isConvertableFrom isAssignableFrom isAssignableFrom isCoerceableFrom needsNoConversionFrom getSignatureForAttribute isParameterizedWithTypeVariable ajMembersNeedParameterization getAjMemberParameterizationMap setBinaryPath getBinaryPath EMPTY_RESOLVED_TYPE_ARRAY PARAMETERIZED_TYPE_IDENTIFIER temporaryAnnotationTypes resolvedTypeParams binaryPath world validBoxing curr crosscuttingMembers NONE BYTE CHAR DOUBLE FLOAT INT LONG SHORT VOID BOOLEAN MISSING size index assignTable noConvertTable interTypeMungers parameterizedWithTypeVariable EMPTY_RESOLVED_TYPE_ARRAY PARAMETERIZED_TYPE_IDENTIFIER temporaryAnnotationTypes resolvedTypeParams binaryPath world validBoxing curr crosscuttingMembers NONE BYTE CHAR DOUBLE FLOAT INT LONG SHORT VOID BOOLEAN MISSING size index assignTable noConvertTable interTypeMungers parameterizedWithTypeVariable org.aspectj.weaver.ResolvedType org.aspectj.weaver.ResolvedType  that may be attached to a type when it used as a parameter\r\n  name maybe)\r\n  'really' missing as some code can continue based solely on the signature\r\n  are equivalent.\r\n  utilities\r\n  Add the\r\n  signature...\r\n  now add all the inter-typed members too\r\n  Recurse if we aren't at\r\n  Go through\r\n  as those are used for @AJ ITD and we precisely want to skip those\r\n  pr171953\r\n  once\r\n  down\r\n  parameterized method (see pr137496)\r\n  ResolvedMember.Missing;\r\n  Check the names\r\n  Check the signatures\r\n  the subsig might be ()LFastCar; - where FastCar is a subclass of Car\r\n  same order as fields\r\n  System.err.println(\"getting for \" + o);\r\n  System.err.println(f);\r\n  System.err.println(\"looking for pointcuts \" + this);\r\n  pr120521\r\n  should we throw an exception here?\r\n  ??? collecting data-structure, shouldn't really be a field\r\n  crosscuttingMembers.addTypeMungers(collectTypeMungers());\r\n  crosscuttingMembers.addLateTypeMungers(getLateTypeMungers());\r\n  collectDeclares());\r\n  ret.addAll(getDeclares());\r\n  System.out.println(\"super: \" + ty + \", \" + );\r\n  typeVariableMap));\r\n  update to use the parameterized signature...\r\n  null)\r\n  ---- types\r\n  B\r\n  C\r\n  D\r\n  F\r\n  I\r\n  J\r\n  S\r\n  V\r\n  Z\r\n  B\r\n  C\r\n  D\r\n  F\r\n  I\r\n  J\r\n  S\r\n  V\r\n  Z\r\n  }\r\n  Member.CONSTRUCTOR\r\n  try interfaces then, but only ITDs now...\r\n  Rule\r\n  If the rules above are broken, return right now\r\n  Rule 1\r\n  allow for classes starting '$' (pr120474)\r\n  package-visible\r\n  need to tailor this munger instance for the particular target...\r\n  Retrieve the generic type\r\n  Ensure all parts of the member are\r\n  resolved\r\n  (it will be either RAW or PARAMETERIZED)\r\n  for generic types ;)\r\n  if (!actualTarget.isRawType())\r\n  is discovered and the tvar is collapsed to a bound?\r\n  possibly changed when type parms filled\r\n  \" with \" + interTypeMungers);\r\n  System.err.println(\"    is visible\");\r\n  the new munger dominates the existing one\r\n  the existing munger dominates the new munger\r\n  System.err.println(\"       compare: \" + c);\r\n  existingMunger);\r\n  now compare to existingMungers\r\n  signature for the ITD so it can be retrieved.\r\n  don't worry about clashing with bridge methods\r\n  could do with a rewrite !\r\n  more work.\r\n  from the same aspect\r\n  munger dominates existingMember\r\n  ??? might need list of these overridden abstracts\r\n  existingMember dominates munger\r\n  System.err.println(\"   c: \" + c);\r\n  existingMember);\r\n  }\r\n  ??? returning too soon\r\n  now have to test that itdMember is visible from targetType\r\n  must be in same package to be visible then...\r\n  type..., and both visible in that type.\r\n  within the target type.\r\n  \" overrides \" + parent.getDeclaringType());\r\n  Look at the generic types when doing this comparison\r\n  In 1.5 mode, allow for covariance on return type\r\n  \" more visible \" + parent.getModifiers());\r\n  check declared exceptions\r\n  System.err.println(\"checking: \" + childExceptions[i]);\r\n  java rules. clone goes against these...\r\n  System.err.println(\"conflict at \" + m2.getSourceLocation());\r\n  System.err.println(\"   found: \" + ret);\r\n  System.err.println(\"lookup \" + member + \" in \" + interTypeMungers);\r\n  Handling members for the new array join point\r\n  we don't know anything about supertype, and it can't\r\n  check that I'm truly the topmost implementor\r\n  be exposed to weaver\r\n  Check if my super class is an implementor?\r\n  \" in \" + this.isAbstract());\r\n  give them a nicer message\r\n  System.err.println(\"adding: \" + toAdd);\r\n  throw new IllegalStateException(\r\n  );\r\n  version from ResolvedTypeX\r\n  isnt\r\n  Assume if this is being called that it is for a\r\n  if there are no type parameters then we cant be...\r\n  getDeclaringElementKind()!=TypeVariable.TYPE\r\n  MAYBE means we haven't worked it out yet...\r\n  consider...\r\n  that may be attached to a type when it used as a parameter\r\n  name maybe)\r\n  'really' missing as some code can continue based solely on the signature\r\n  are equivalent.\r\n  utilities\r\n  Add the\r\n  signature...\r\n  now add all the inter-typed members too\r\n  Recurse if we aren't at\r\n  Go through\r\n  as those are used for @AJ ITD and we precisely want to skip those\r\n  pr171953\r\n  once\r\n  down\r\n  parameterized method (see pr137496)\r\n  ResolvedMember.Missing;\r\n  Check the names\r\n  Check the signatures\r\n  the subsig might be ()LFastCar; - where FastCar is a subclass of Car\r\n  same order as fields\r\n  System.err.println(\"getting for \" + o);\r\n  System.err.println(f);\r\n  System.err.println(\"looking for pointcuts \" + this);\r\n  pr120521\r\n  should we throw an exception here?\r\n  ??? collecting data-structure, shouldn't really be a field\r\n  crosscuttingMembers.addTypeMungers(collectTypeMungers());\r\n  crosscuttingMembers.addLateTypeMungers(getLateTypeMungers());\r\n  collectDeclares());\r\n  ret.addAll(getDeclares());\r\n  System.out.println(\"super: \" + ty + \", \" + );\r\n  typeVariableMap));\r\n  update to use the parameterized signature...\r\n  null)\r\n  ---- types\r\n  B\r\n  C\r\n  D\r\n  F\r\n  I\r\n  J\r\n  S\r\n  V\r\n  Z\r\n  B\r\n  C\r\n  D\r\n  F\r\n  I\r\n  J\r\n  S\r\n  V\r\n  Z\r\n  }\r\n  Member.CONSTRUCTOR\r\n  try interfaces then, but only ITDs now...\r\n  Rule\r\n  If the rules above are broken, return right now\r\n  Rule 1\r\n  allow for classes starting '$' (pr120474)\r\n  package-visible\r\n  need to tailor this munger instance for the particular target...\r\n  Retrieve the generic type\r\n  Ensure all parts of the member are\r\n  resolved\r\n  (it will be either RAW or PARAMETERIZED)\r\n  for generic types ;)\r\n  if (!actualTarget.isRawType())\r\n  is discovered and the tvar is collapsed to a bound?\r\n  possibly changed when type parms filled\r\n  \" with \" + interTypeMungers);\r\n  System.err.println(\"    is visible\");\r\n  the new munger dominates the existing one\r\n  the existing munger dominates the new munger\r\n  System.err.println(\"       compare: \" + c);\r\n  existingMunger);\r\n  now compare to existingMungers\r\n  signature for the ITD so it can be retrieved.\r\n  don't worry about clashing with bridge methods\r\n  could do with a rewrite !\r\n  more work.\r\n  from the same aspect\r\n  munger dominates existingMember\r\n  ??? might need list of these overridden abstracts\r\n  existingMember dominates munger\r\n  System.err.println(\"   c: \" + c);\r\n  existingMember);\r\n  }\r\n  ??? returning too soon\r\n  now have to test that itdMember is visible from targetType\r\n  must be in same package to be visible then...\r\n  type..., and both visible in that type.\r\n  within the target type.\r\n  \" overrides \" + parent.getDeclaringType());\r\n  Look at the generic types when doing this comparison\r\n  In 1.5 mode, allow for covariance on return type\r\n  \" more visible \" + parent.getModifiers());\r\n  check declared exceptions\r\n  System.err.println(\"checking: \" + childExceptions[i]);\r\n  java rules. clone goes against these...\r\n  System.err.println(\"conflict at \" + m2.getSourceLocation());\r\n  System.err.println(\"   found: \" + ret);\r\n  System.err.println(\"lookup \" + member + \" in \" + interTypeMungers);\r\n  Handling members for the new array join point\r\n  we don't know anything about supertype, and it can't\r\n  check that I'm truly the topmost implementor\r\n  be exposed to weaver\r\n  Check if my super class is an implementor?\r\n  \" in \" + this.isAbstract());\r\n  give them a nicer message\r\n  System.err.println(\"adding: \" + toAdd);\r\n  throw new IllegalStateException(\r\n  );\r\n  version from ResolvedTypeX\r\n  isnt\r\n  Assume if this is being called that it is for a\r\n  if there are no type parameters then we cant be...\r\n  getDeclaringElementKind()!=TypeVariable.TYPE\r\n  MAYBE means we haven't worked it out yet...\r\n  consider...\r\n /* Type variable name -> UnresolvedType */\r\n /* private package */\r\n /* private package protected */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n *     Alexandre Vasseur    @AspectJ ITDs\r\n * ******************************************************************/\r\n /* Type variable name -> UnresolvedType */\r\n /* private package */\r\n /* private package protected */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n *     Alexandre Vasseur    @AspectJ ITDs\r\n * ******************************************************************/\r\n","NotAnnotationTypePattern":"matches matches resolve resolveBindings parameterizeWith write read equals hashCode toString getNegatedPattern accept traverse setForParameterAnnotationMatch matches matches resolve resolveBindings parameterizeWith write read equals hashCode toString getNegatedPattern accept traverse setForParameterAnnotationMatch negatedPattern negatedPattern org.aspectj.weaver.patterns.NotAnnotationTypePattern org.aspectj.weaver.patterns.NotAnnotationTypePattern /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.AnnotationTypePattern#matches(org.aspectj.weaver.AnnotatedElement)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.AnnotationTypePattern#resolve(org.aspectj.weaver.World)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.AnnotationTypePattern#resolveBindings(org.aspectj.weaver.patterns.IScope, org.aspectj.weaver.patterns.Bindings, boolean)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.PatternNode#write(java.io.DataOutputStream)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.AnnotationTypePattern#matches(org.aspectj.weaver.AnnotatedElement)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.AnnotationTypePattern#resolve(org.aspectj.weaver.World)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.AnnotationTypePattern#resolveBindings(org.aspectj.weaver.patterns.IScope, org.aspectj.weaver.patterns.Bindings, boolean)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.PatternNode#write(java.io.DataOutputStream)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","ParserException":"getLocation getLocation token token org.aspectj.weaver.patterns.ParserException org.aspectj.weaver.patterns.ParserException /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","BcelClassWeaver":"weave fastMatchShadowMungers canMatch initializeSuperInitializerMap addSuperInitializer addInitializer compareTo fallbackCompareTo addDispatchTarget addLazyMethodGen addOrReplaceLazyMethodGen alreadyDefined signaturesMatch makeBridgeMethod createBridgeMethod weave isOverriding isVisibilityOverride checkForOverride calculateAnyRequiredBridgeMethods weaveDeclareAtMethodCtor reportMethodCtorWeavingMessage getMatchingSubset getITDSubset locateAnnotationHolderForFieldMunger locateAnnotationHolderForMethodCtorMunger weaveAtFieldRepeatedly weaveAtMethodOnITDSRepeatedly dontAddTwice weaveDeclareAtField checkUnusedDeclareAtTypes reportFieldAnnotationWeavingMessage doesAlreadyHaveAnnotation doesAlreadyHaveAnnotation findAspectsForMungers inlineSelfConstructors positionAndImplement positionInitializationShadow isThisCall inlineMethod transformSynchronizedMethod genInlineInstructions genArgumentStores getCalledMethod weaveInAddedMethods findSuperOrThisCall match matchInit shouldWeaveBody genInitInstructions match isInitFailureHandler matchSetInstruction matchGetInstruction findResolvedMemberNamed fixAnnotationsForResolvedMember matchInvokeInstruction match implement getLazyClassGen getShadowMungers getWorld setReweavableMode getReweavableMode toString weave fastMatchShadowMungers canMatch initializeSuperInitializerMap addSuperInitializer addInitializer compareTo fallbackCompareTo addDispatchTarget addLazyMethodGen addOrReplaceLazyMethodGen alreadyDefined signaturesMatch makeBridgeMethod createBridgeMethod weave isOverriding isVisibilityOverride checkForOverride calculateAnyRequiredBridgeMethods weaveDeclareAtMethodCtor reportMethodCtorWeavingMessage getMatchingSubset getITDSubset locateAnnotationHolderForFieldMunger locateAnnotationHolderForMethodCtorMunger weaveAtFieldRepeatedly weaveAtMethodOnITDSRepeatedly dontAddTwice weaveDeclareAtField checkUnusedDeclareAtTypes reportFieldAnnotationWeavingMessage doesAlreadyHaveAnnotation doesAlreadyHaveAnnotation findAspectsForMungers inlineSelfConstructors positionAndImplement positionInitializationShadow isThisCall inlineMethod transformSynchronizedMethod genInlineInstructions genArgumentStores getCalledMethod weaveInAddedMethods findSuperOrThisCall match matchInit shouldWeaveBody genInitInstructions match isInitFailureHandler matchSetInstruction matchGetInstruction findResolvedMemberNamed fixAnnotationsForResolvedMember matchInvokeInstruction match implement getLazyClassGen getShadowMungers getWorld setReweavableMode getReweavableMode toString trace clazz shadowMungers typeMungers lateTypeMungers ty world cpg fact addedLazyMethodGens addedDispatchTargets inReweavableMode addedSuperInitializersAsList addedSuperInitializers addedThisInitializers addedClassInitializers mapToAnnotations initializationShadows perKindShadowMungers canMatchBodyShadows onType list checkedXsetForLowLevelContextCapturing captureLowLevelContext trace clazz shadowMungers typeMungers lateTypeMungers ty world cpg fact addedLazyMethodGens addedDispatchTargets inReweavableMode addedSuperInitializersAsList addedSuperInitializers addedThisInitializers addedClassInitializers mapToAnnotations initializationShadows perKindShadowMungers canMatchBodyShadows onType list checkedXsetForLowLevelContextCapturing captureLowLevelContext org.aspectj.weaver.bcel.BcelClassWeaver org.aspectj.weaver.bcel.BcelClassWeaver  clazz.print();\r\n  alias of clazz.getType()\r\n  alias of ty.getWorld()\r\n  alias of clazz.getConstantPoolGen()\r\n  alias of clazz.getFactory();\r\n  Static setting across BcelClassWeavers\r\n  List<IfaceInitList>\r\n  Interface ->\r\n  List<NewFieldMunger>\r\n  List<NewFieldMunger\r\n  assert world == clazz.getType().getWorld()\r\n  private boolean canMatchInitialization = false;\r\n  XXX this is being called, but the result doesn't seem to be being used\r\n  mg is existing's subtype and dominates existing\r\n  existing is mg's subtype and dominates mg\r\n  this means existing was introduced on the class itself\r\n  remove abstract modifier\r\n  ret.makeSynthetic();\r\n  The\r\n  signature as the one in the supertype\r\n  we want to \"touch\" all aspects\r\n  ???System.err.println(\"surprising: \" + o);\r\n  start by munging all typeMungers\r\n  Weave special half type  don't forget to sort addedThisInitialiers according to dominates\r\n  this is in just as bad taste as NOPs\r\n  and it also possibly adds to {@link #initializationShadows}.\r\n  that affected this type\r\n  now we weave all but the initialization shadows\r\n  \"Recursive constructor invocation\"\r\n  if we matched any initialization shadows, we inline and weave\r\n  now proceed with late type mungers\r\n  FIXME asc are these potentially affected\r\n  finally, if we changed, we add in the introduced methods.\r\n  tidyup, reduce ongoing memory usage of BcelMethods that hang around\r\n  we can't be overriding a static method\r\n  Check if we can be an override...\r\n  we can't be overriding a private method\r\n  names dont match (this will also skip <init> and\r\n  check same number of parameters\r\n  <clinit> too)\r\n  Look at erasures of parameters (List<String> erased is List)\r\n  for covariance...\r\n  check for covariance\r\n  we just can't tell !\r\n  used when looking\r\n  the\r\n  check\r\n  EclipseTypeMunger ... do I need to worry about that?\r\n  just double check... the caller should have already\r\n  dont bother if we're an interface\r\n  verified this\r\n  set if we build any bridge methods\r\n  So what methods do we have right now in this class?\r\n  have already been created, we don't want to do it twice!\r\n  e.g.\r\n  This is the local method that we *might* have to bridge to\r\n  Doh!\r\n  ignore static methods\r\n  if (bridgeToCandidate.isAbstract()) continue;\r\n  Skip constructors and static initializers\r\n  Let's take a look at the superclass\r\n  pr\r\n  237419\r\n  look at the next method\r\n  Check superinterfaces\r\n  pr\r\n  237419\r\n  look at the next method\r\n  Now go through all the methods in this type\r\n  nothing to do\r\n  deal with ITDs\r\n  ITDs...\r\n  deal with all the other methods...\r\n  nothing to do\r\n  Single first pass\r\n  an annotation is\r\n  the annotation is already there\r\n  skip this one...\r\n  getMethod());\r\n  against it\r\n  lets have another go\r\n  the annotation is already there\r\n  skip this one...\r\n  (),true);\r\n  getMethod());\r\n  against it\r\n  Multiple secondary passes\r\n  dont\r\n  .\r\n  TAG: WeavingMessage\r\n  FIXME asc refactor this to neaten it up\r\n  an annotation is specified\r\n  skip this one...\r\n  skip this one...\r\n  an annotation is specified\r\n  skip this one...\r\n  skip this one...\r\n  twice!\r\n  nothing to do\r\n  nothing more to do\r\n  new\r\n  Single first pass\r\n  an annotation is\r\n  the annotation is already there\r\n  .getFieldAsIs());\r\n  against it\r\n  go through all the declare @field statements\r\n  lets have another go\r\n  the annotation is already there\r\n  skip this one...\r\n  below code is for recursive things\r\n  .getFieldAsIs());\r\n  against it\r\n  Multiple secondary passes\r\n  ]);\r\n  Quickly check if an ITD meets supplies the 'missing' member\r\n  Error if an exact type pattern was specified\r\n  TAG: WeavingMessage\r\n  Mungers in effect on that shadow\r\n  s.getEnclosingMethod().print();\r\n  assert s.getKind() == Shadow.Initialization\r\n  be an ALOAD_0) to just before the call to super\r\n  this also sets up the initial environment\r\n  synchronizedMethod.getName());\r\n  TRANSFORMING NON STATIC METHOD\r\n  ALOAD_0, DUP, ASTORE_<n>, MONITORENTER\r\n  so lets build that:\r\n  search for 'returns' and make them to the aload_<n>,monitorexit\r\n  !walker.equals(body.getEnd())) {\r\n  );\r\n  classType,slotForThis));\r\n  monitorexit block\r\n  move it\r\n  what kinds are there?\r\n  now the magic, putting the finally block around the code\r\n  now we can put the\r\n  monitorenter stuff on\r\n  8 13 20 Class java  ? should be the real type ? String or\r\n  something?\r\n  31: athrow\r\n  start of catch block\r\n  so lets build that:\r\n  aload_<n>,monitorexit\r\n  !walker.equals(body.getEnd())) {\r\n  element);\r\n  classType,slotForThis));\r\n  the monitorexit block\r\n  move it\r\n  what kinds are there?\r\n  now the magic, putting the finally block around the code\r\n  now we can put the\r\n  4: monitorenter\r\n  so lets build that:\r\n  aload_<n>,monitorexit\r\n  classType,slotForThis));\r\n  the monitorexit block\r\n  move it\r\n  what kinds are there?\r\n  now the magic, putting the finally block around the code\r\n  now we can put the\r\n  monitorenter stuff on\r\n  LDC can handle class literals in Java5 and above *sigh*\r\n  STATIC METHOD TRANSFORMATION\r\n  a computation leak... we're testing this LOTS of times. Sigh.\r\n  OPTIMIZE optimize this stuff?\r\n  IndexedInstruction indexed = (IndexedInstruction) fresh;\r\n  fix frame instructions\r\n  second pass: retarget branch instructions, copy ranges and tags\r\n  retarget branches\r\n  writing ret back to front because we're popping.\r\n  clinitShadow =\r\n  this check actually prevents field-exec jps\r\n  .isAjSynthetic()) {\r\n  we want to match ajsynthetic constructors...\r\n  XXX the enclosing join point is wrong for things before ignoreMe.\r\n  we don't walk bodies of things where it's a wrong constructor thingie\r\n  walk the body\r\n  insert code in place\r\n  now we add our initialization code\r\n  now add interface inits\r\n  in groups where at least one initialization jp matched. Future work.\r\n  assert t.getHandler() == ih\r\n  that were aimed at the INVOKESTATIC\r\n  certain targeters really.\r\n  Exception handlers (pr230817)\r\n  if (canMatch(Shadow.Monitoring)) {\r\n  NEWARRAY arrayInstruction = (NEWARRAY)i;\r\n  ANEWARRAY arrayInstruction = (ANEWARRAY)i;\r\n  we are private\r\n  shadow.\r\n  in the handler we created in AspectClinit.generatePostSyntheticCode()\r\n  synthetic fields are never join points\r\n  Fix for bug 172107 (similar the \"get\" fix for bug 109728)\r\n  sets of synthetics aren't join points in 1.1\r\n  not a join point according to 1.0.6 and 1.1.\r\n  we can't find the field, so it's not a join point.\r\n  synthetic fields are never join points\r\n  sets of synthetics aren't join points in 1.1\r\n  we can't find the field, so it's not a join point.\r\n  above stuff is OK\r\n  AMC temp guard for M4\r\n  world.resolve(realthing);\r\n  AMC temp guard for M4\r\n  FIXME asc shouldnt really rely on string names !\r\n  System.err.println(method + \", declaredSig: \" +declaredSig);\r\n  effectiveSig);\r\n  abracadabra\r\n  created...\r\n  'ifs()'\r\n  System.err.println(\"match: \" + shadow);\r\n  int ii =\r\n  collect reweavable info\r\n  clazz.print();\r\n  alias of clazz.getType()\r\n  alias of ty.getWorld()\r\n  alias of clazz.getConstantPoolGen()\r\n  alias of clazz.getFactory();\r\n  Static setting across BcelClassWeavers\r\n  List<IfaceInitList>\r\n  Interface ->\r\n  List<NewFieldMunger>\r\n  List<NewFieldMunger\r\n  assert world == clazz.getType().getWorld()\r\n  private boolean canMatchInitialization = false;\r\n  XXX this is being called, but the result doesn't seem to be being used\r\n  mg is existing's subtype and dominates existing\r\n  existing is mg's subtype and dominates mg\r\n  this means existing was introduced on the class itself\r\n  remove abstract modifier\r\n  ret.makeSynthetic();\r\n  The\r\n  signature as the one in the supertype\r\n  we want to \"touch\" all aspects\r\n  ???System.err.println(\"surprising: \" + o);\r\n  start by munging all typeMungers\r\n  Weave special half type  don't forget to sort addedThisInitialiers according to dominates\r\n  this is in just as bad taste as NOPs\r\n  and it also possibly adds to {@link #initializationShadows}.\r\n  that affected this type\r\n  now we weave all but the initialization shadows\r\n  \"Recursive constructor invocation\"\r\n  if we matched any initialization shadows, we inline and weave\r\n  now proceed with late type mungers\r\n  FIXME asc are these potentially affected\r\n  finally, if we changed, we add in the introduced methods.\r\n  tidyup, reduce ongoing memory usage of BcelMethods that hang around\r\n  we can't be overriding a static method\r\n  Check if we can be an override...\r\n  we can't be overriding a private method\r\n  names dont match (this will also skip <init> and\r\n  check same number of parameters\r\n  <clinit> too)\r\n  Look at erasures of parameters (List<String> erased is List)\r\n  for covariance...\r\n  check for covariance\r\n  we just can't tell !\r\n  used when looking\r\n  the\r\n  check\r\n  EclipseTypeMunger ... do I need to worry about that?\r\n  just double check... the caller should have already\r\n  dont bother if we're an interface\r\n  verified this\r\n  set if we build any bridge methods\r\n  So what methods do we have right now in this class?\r\n  have already been created, we don't want to do it twice!\r\n  e.g.\r\n  This is the local method that we *might* have to bridge to\r\n  Doh!\r\n  ignore static methods\r\n  if (bridgeToCandidate.isAbstract()) continue;\r\n  Skip constructors and static initializers\r\n  Let's take a look at the superclass\r\n  pr\r\n  237419\r\n  look at the next method\r\n  Check superinterfaces\r\n  pr\r\n  237419\r\n  look at the next method\r\n  Now go through all the methods in this type\r\n  nothing to do\r\n  deal with ITDs\r\n  ITDs...\r\n  deal with all the other methods...\r\n  nothing to do\r\n  Single first pass\r\n  an annotation is\r\n  the annotation is already there\r\n  skip this one...\r\n  getMethod());\r\n  against it\r\n  lets have another go\r\n  the annotation is already there\r\n  skip this one...\r\n  (),true);\r\n  getMethod());\r\n  against it\r\n  Multiple secondary passes\r\n  dont\r\n  .\r\n  TAG: WeavingMessage\r\n  FIXME asc refactor this to neaten it up\r\n  an annotation is specified\r\n  skip this one...\r\n  skip this one...\r\n  an annotation is specified\r\n  skip this one...\r\n  skip this one...\r\n  twice!\r\n  nothing to do\r\n  nothing more to do\r\n  new\r\n  Single first pass\r\n  an annotation is\r\n  the annotation is already there\r\n  .getFieldAsIs());\r\n  against it\r\n  go through all the declare @field statements\r\n  lets have another go\r\n  the annotation is already there\r\n  skip this one...\r\n  below code is for recursive things\r\n  .getFieldAsIs());\r\n  against it\r\n  Multiple secondary passes\r\n  ]);\r\n  Quickly check if an ITD meets supplies the 'missing' member\r\n  Error if an exact type pattern was specified\r\n  TAG: WeavingMessage\r\n  Mungers in effect on that shadow\r\n  s.getEnclosingMethod().print();\r\n  assert s.getKind() == Shadow.Initialization\r\n  be an ALOAD_0) to just before the call to super\r\n  this also sets up the initial environment\r\n  synchronizedMethod.getName());\r\n  TRANSFORMING NON STATIC METHOD\r\n  ALOAD_0, DUP, ASTORE_<n>, MONITORENTER\r\n  so lets build that:\r\n  search for 'returns' and make them to the aload_<n>,monitorexit\r\n  !walker.equals(body.getEnd())) {\r\n  );\r\n  classType,slotForThis));\r\n  monitorexit block\r\n  move it\r\n  what kinds are there?\r\n  now the magic, putting the finally block around the code\r\n  now we can put the\r\n  monitorenter stuff on\r\n  8 13 20 Class java  ? should be the real type ? String or\r\n  something?\r\n  31: athrow\r\n  start of catch block\r\n  so lets build that:\r\n  aload_<n>,monitorexit\r\n  !walker.equals(body.getEnd())) {\r\n  element);\r\n  classType,slotForThis));\r\n  the monitorexit block\r\n  move it\r\n  what kinds are there?\r\n  now the magic, putting the finally block around the code\r\n  now we can put the\r\n  4: monitorenter\r\n  so lets build that:\r\n  aload_<n>,monitorexit\r\n  classType,slotForThis));\r\n  the monitorexit block\r\n  move it\r\n  what kinds are there?\r\n  now the magic, putting the finally block around the code\r\n  now we can put the\r\n  monitorenter stuff on\r\n  LDC can handle class literals in Java5 and above *sigh*\r\n  STATIC METHOD TRANSFORMATION\r\n  a computation leak... we're testing this LOTS of times. Sigh.\r\n  OPTIMIZE optimize this stuff?\r\n  IndexedInstruction indexed = (IndexedInstruction) fresh;\r\n  fix frame instructions\r\n  second pass: retarget branch instructions, copy ranges and tags\r\n  retarget branches\r\n  writing ret back to front because we're popping.\r\n  clinitShadow =\r\n  this check actually prevents field-exec jps\r\n  .isAjSynthetic()) {\r\n  we want to match ajsynthetic constructors...\r\n  XXX the enclosing join point is wrong for things before ignoreMe.\r\n  we don't walk bodies of things where it's a wrong constructor thingie\r\n  walk the body\r\n  insert code in place\r\n  now we add our initialization code\r\n  now add interface inits\r\n  in groups where at least one initialization jp matched. Future work.\r\n  assert t.getHandler() == ih\r\n  that were aimed at the INVOKESTATIC\r\n  certain targeters really.\r\n  Exception handlers (pr230817)\r\n  if (canMatch(Shadow.Monitoring)) {\r\n  NEWARRAY arrayInstruction = (NEWARRAY)i;\r\n  ANEWARRAY arrayInstruction = (ANEWARRAY)i;\r\n  we are private\r\n  shadow.\r\n  in the handler we created in AspectClinit.generatePostSyntheticCode()\r\n  synthetic fields are never join points\r\n  Fix for bug 172107 (similar the \"get\" fix for bug 109728)\r\n  sets of synthetics aren't join points in 1.1\r\n  not a join point according to 1.0.6 and 1.1.\r\n  we can't find the field, so it's not a join point.\r\n  synthetic fields are never join points\r\n  sets of synthetics aren't join points in 1.1\r\n  we can't find the field, so it's not a join point.\r\n  above stuff is OK\r\n  AMC temp guard for M4\r\n  world.resolve(realthing);\r\n  AMC temp guard for M4\r\n  FIXME asc shouldnt really rely on string names !\r\n  System.err.println(method + \", declaredSig: \" +declaredSig);\r\n  effectiveSig);\r\n  abracadabra\r\n  created...\r\n  'ifs()'\r\n  System.err.println(\"match: \" + shadow);\r\n  int ii =\r\n  collect reweavable info\r\n /*\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * BRIDGE = 0x00000040\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t */\r\n /*\r\n\t\t\t\t\t\t\t\t\t\t * NATIVE = 0x00000100 - need to clear it\r\n\t\t\t\t\t\t\t\t\t\t */\r\n /* LazyMethodGen */\r\n /* AnnotationGen */\r\n /*\r\n\t\t * Implementation notes:\r\n\t\t * \r\n\t\t * We allocate two slots for every tempvar so we don't screw up longs and doubles which may share space. This could be\r\n\t\t * conservatively avoided (no reference to a long/double instruction, don't do it) or packed later. Right now we don't\r\n\t\t * bother to pack.\r\n\t\t * \r\n\t\t * Allocate a new var for each formal param of the inlined. Fill with stack contents. Then copy the inlined instructions in\r\n\t\t * with the appropriate remap table. Any framelocs used by locals in inlined are reallocated to top of frame,\r\n\t\t */\r\n /* ==finally */\r\n /* ==finally */\r\n /* ==finally */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /*\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * BRIDGE = 0x00000040\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t */\r\n /*\r\n\t\t\t\t\t\t\t\t\t\t * NATIVE = 0x00000100 - need to clear it\r\n\t\t\t\t\t\t\t\t\t\t */\r\n /* LazyMethodGen */\r\n /* AnnotationGen */\r\n /*\r\n\t\t * Implementation notes:\r\n\t\t * \r\n\t\t * We allocate two slots for every tempvar so we don't screw up longs and doubles which may share space. This could be\r\n\t\t * conservatively avoided (no reference to a long/double instruction, don't do it) or packed later. Right now we don't\r\n\t\t * bother to pack.\r\n\t\t * \r\n\t\t * Allocate a new var for each formal param of the inlined. Fill with stack contents. Then copy the inlined instructions in\r\n\t\t * with the appropriate remap table. Any framelocs used by locals in inlined are reallocated to top of frame,\r\n\t\t */\r\n /* ==finally */\r\n /* ==finally */\r\n /* ==finally */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","DefaultCodeFormatterConstants":"createAlignmentValue getEclipse21Settings getEclipseDefaultSettings getForceWrapping getIndentStyle getJavaConventionsSettings getWrappingStyle setForceWrapping setIndentStyle setWrappingStyle END_OF_LINE FALSE FORMATTER_ALIGN_TYPE_MEMBERS_ON_COLUMNS FORMATTER_ALIGNMENT_FOR_ARGUMENTS_IN_ALLOCATION_EXPRESSION FORMATTER_ALIGNMENT_FOR_ARGUMENTS_IN_ENUM_CONSTANT FORMATTER_ALIGNMENT_FOR_ARGUMENTS_IN_EXPLICIT_CONSTRUCTOR_CALL FORMATTER_ALIGNMENT_FOR_ARGUMENTS_IN_METHOD_INVOCATION FORMATTER_ALIGNMENT_FOR_ARGUMENTS_IN_QUALIFIED_ALLOCATION_EXPRESSION FORMATTER_ALIGNMENT_FOR_ASSIGNMENT FORMATTER_ALIGNMENT_FOR_BINARY_EXPRESSION FORMATTER_ALIGNMENT_FOR_COMPACT_IF FORMATTER_ALIGNMENT_FOR_CONDITIONAL_EXPRESSION FORMATTER_ALIGNMENT_FOR_ENUM_CONSTANTS FORMATTER_ALIGNMENT_FOR_EXPRESSIONS_IN_ARRAY_INITIALIZER FORMATTER_ALIGNMENT_FOR_MULTIPLE_FIELDS FORMATTER_ALIGNMENT_FOR_PARAMETERS_IN_CONSTRUCTOR_DECLARATION FORMATTER_ALIGNMENT_FOR_PARAMETERS_IN_METHOD_DECLARATION FORMATTER_ALIGNMENT_FOR_SELECTOR_IN_METHOD_INVOCATION FORMATTER_ALIGNMENT_FOR_SUPERCLASS_IN_TYPE_DECLARATION FORMATTER_ALIGNMENT_FOR_SUPERINTERFACES_IN_ENUM_DECLARATION FORMATTER_ALIGNMENT_FOR_SUPERINTERFACES_IN_TYPE_DECLARATION FORMATTER_ALIGNMENT_FOR_THROWS_CLAUSE_IN_CONSTRUCTOR_DECLARATION FORMATTER_ALIGNMENT_FOR_THROWS_CLAUSE_IN_METHOD_DECLARATION FORMATTER_BLANK_LINES_AFTER_IMPORTS FORMATTER_BLANK_LINES_AFTER_PACKAGE FORMATTER_BLANK_LINES_AT_BEGINNING_OF_METHOD_BODY FORMATTER_BLANK_LINES_BEFORE_FIELD FORMATTER_BLANK_LINES_BEFORE_FIRST_CLASS_BODY_DECLARATION FORMATTER_BLANK_LINES_BEFORE_IMPORTS FORMATTER_BLANK_LINES_BEFORE_MEMBER_TYPE FORMATTER_BLANK_LINES_BEFORE_METHOD FORMATTER_BLANK_LINES_BEFORE_NEW_CHUNK FORMATTER_BLANK_LINES_BEFORE_PACKAGE FORMATTER_BLANK_LINES_BETWEEN_IMPORT_GROUPS FORMATTER_BLANK_LINES_BETWEEN_TYPE_DECLARATIONS FORMATTER_BRACE_POSITION_FOR_ANNOTATION_TYPE_DECLARATION FORMATTER_BRACE_POSITION_FOR_ANONYMOUS_TYPE_DECLARATION FORMATTER_BRACE_POSITION_FOR_ARRAY_INITIALIZER FORMATTER_BRACE_POSITION_FOR_BLOCK FORMATTER_BRACE_POSITION_FOR_BLOCK_IN_CASE FORMATTER_BRACE_POSITION_FOR_CONSTRUCTOR_DECLARATION FORMATTER_BRACE_POSITION_FOR_ENUM_CONSTANT FORMATTER_BRACE_POSITION_FOR_ENUM_DECLARATION FORMATTER_BRACE_POSITION_FOR_METHOD_DECLARATION FORMATTER_BRACE_POSITION_FOR_SWITCH FORMATTER_BRACE_POSITION_FOR_TYPE_DECLARATION FORMATTER_COMMENT_CLEAR_BLANK_LINES FORMATTER_COMMENT_CLEAR_BLANK_LINES_IN_JAVADOC_COMMENT FORMATTER_COMMENT_CLEAR_BLANK_LINES_IN_BLOCK_COMMENT FORMATTER_COMMENT_FORMAT FORMATTER_COMMENT_FORMAT_LINE_COMMENT FORMATTER_COMMENT_FORMAT_BLOCK_COMMENT FORMATTER_COMMENT_FORMAT_JAVADOC_COMMENT FORMATTER_COMMENT_FORMAT_HEADER FORMATTER_COMMENT_FORMAT_HTML FORMATTER_COMMENT_FORMAT_SOURCE FORMATTER_COMMENT_INDENT_PARAMETER_DESCRIPTION FORMATTER_COMMENT_INDENT_ROOT_TAGS FORMATTER_COMMENT_INSERT_EMPTY_LINE_BEFORE_ROOT_TAGS FORMATTER_COMMENT_INSERT_NEW_LINE_FOR_PARAMETER FORMATTER_COMMENT_LINE_LENGTH FORMATTER_COMPACT_ELSE_IF FORMATTER_CONTINUATION_INDENTATION FORMATTER_CONTINUATION_INDENTATION_FOR_ARRAY_INITIALIZER FORMATTER_INDENT_BODY_DECLARATIONS_COMPARE_TO_ANNOTATION_DECLARATION_HEADER FORMATTER_INDENT_BODY_DECLARATIONS_COMPARE_TO_ENUM_CONSTANT_HEADER FORMATTER_INDENT_BODY_DECLARATIONS_COMPARE_TO_ENUM_DECLARATION_HEADER FORMATTER_INDENT_BODY_DECLARATIONS_COMPARE_TO_TYPE_HEADER FORMATTER_INDENT_BREAKS_COMPARE_TO_CASES FORMATTER_INDENT_EMPTY_LINES FORMATTER_INDENT_STATEMENTS_COMPARE_TO_BLOCK FORMATTER_INDENT_STATEMENTS_COMPARE_TO_BODY FORMATTER_INDENT_SWITCHSTATEMENTS_COMPARE_TO_CASES FORMATTER_INDENT_SWITCHSTATEMENTS_COMPARE_TO_SWITCH FORMATTER_INDENTATION_SIZE FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION FORMATTER_INSERT_NEW_LINE_AFTER_OPENING_BRACE_IN_ARRAY_INITIALIZER FORMATTER_INSERT_NEW_LINE_AT_END_OF_FILE_IF_MISSING FORMATTER_INSERT_NEW_LINE_BEFORE_CATCH_IN_TRY_STATEMENT FORMATTER_INSERT_NEW_LINE_BEFORE_CLOSING_BRACE_IN_ARRAY_INITIALIZER FORMATTER_INSERT_NEW_LINE_BEFORE_ELSE_IN_IF_STATEMENT FORMATTER_INSERT_NEW_LINE_BEFORE_FINALLY_IN_TRY_STATEMENT FORMATTER_INSERT_NEW_LINE_BEFORE_WHILE_IN_DO_STATEMENT FORMATTER_INSERT_NEW_LINE_IN_EMPTY_ANNOTATION_DECLARATION FORMATTER_INSERT_NEW_LINE_IN_EMPTY_ANONYMOUS_TYPE_DECLARATION FORMATTER_INSERT_NEW_LINE_IN_EMPTY_BLOCK FORMATTER_INSERT_NEW_LINE_IN_EMPTY_ENUM_CONSTANT FORMATTER_INSERT_NEW_LINE_IN_EMPTY_ENUM_DECLARATION FORMATTER_INSERT_NEW_LINE_IN_EMPTY_METHOD_BODY FORMATTER_INSERT_NEW_LINE_IN_EMPTY_TYPE_DECLARATION FORMATTER_INSERT_SPACE_AFTER_AND_IN_TYPE_PARAMETER FORMATTER_INSERT_SPACE_AFTER_ASSIGNMENT_OPERATOR FORMATTER_INSERT_SPACE_AFTER_AT_IN_ANNOTATION FORMATTER_INSERT_SPACE_AFTER_AT_IN_ANNOTATION_TYPE_DECLARATION FORMATTER_INSERT_SPACE_AFTER_BINARY_OPERATOR FORMATTER_INSERT_SPACE_AFTER_CLOSING_ANGLE_BRACKET_IN_TYPE_ARGUMENTS FORMATTER_INSERT_SPACE_AFTER_CLOSING_ANGLE_BRACKET_IN_TYPE_PARAMETERS FORMATTER_INSERT_SPACE_AFTER_CLOSING_BRACE_IN_BLOCK FORMATTER_INSERT_SPACE_AFTER_CLOSING_PAREN_IN_CAST FORMATTER_INSERT_SPACE_AFTER_COLON_IN_ASSERT FORMATTER_INSERT_SPACE_AFTER_COLON_IN_CASE FORMATTER_INSERT_SPACE_AFTER_COLON_IN_CONDITIONAL FORMATTER_INSERT_SPACE_AFTER_COLON_IN_FOR FORMATTER_INSERT_SPACE_AFTER_COLON_IN_LABELED_STATEMENT FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ALLOCATION_EXPRESSION FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ANNOTATION FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ARRAY_INITIALIZER FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_CONSTRUCTOR_DECLARATION_PARAMETERS FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_CONSTRUCTOR_DECLARATION_THROWS FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ENUM_CONSTANT_ARGUMENTS FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ENUM_DECLARATIONS FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_EXPLICIT_CONSTRUCTOR_CALL_ARGUMENTS FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FOR_INCREMENTS FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FOR_INITS FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_METHOD_DECLARATION_PARAMETERS FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_METHOD_DECLARATION_THROWS FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_METHOD_INVOCATION_ARGUMENTS FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_LOCAL_DECLARATIONS FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_PARAMETERIZED_TYPE_REFERENCE FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_SUPERINTERFACES FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_TYPE_ARGUMENTS FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_TYPE_PARAMETERS FORMATTER_INSERT_SPACE_AFTER_ELLIPSIS FORMATTER_INSERT_SPACE_AFTER_OPENING_ANGLE_BRACKET_IN_PARAMETERIZED_TYPE_REFERENCE FORMATTER_INSERT_SPACE_AFTER_OPENING_ANGLE_BRACKET_IN_TYPE_ARGUMENTS FORMATTER_INSERT_SPACE_AFTER_OPENING_ANGLE_BRACKET_IN_TYPE_PARAMETERS FORMATTER_INSERT_SPACE_AFTER_OPENING_BRACE_IN_ARRAY_INITIALIZER FORMATTER_INSERT_SPACE_AFTER_OPENING_BRACKET_IN_ARRAY_ALLOCATION_EXPRESSION FORMATTER_INSERT_SPACE_AFTER_OPENING_BRACKET_IN_ARRAY_REFERENCE FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_ANNOTATION FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_CAST FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_CATCH FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_CONSTRUCTOR_DECLARATION FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_ENUM_CONSTANT FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_FOR FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_IF FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_METHOD_DECLARATION FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_METHOD_INVOCATION FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_PARENTHESIZED_EXPRESSION FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_SWITCH FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_SYNCHRONIZED FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_WHILE FORMATTER_INSERT_SPACE_AFTER_POSTFIX_OPERATOR FORMATTER_INSERT_SPACE_AFTER_PREFIX_OPERATOR FORMATTER_INSERT_SPACE_AFTER_QUESTION_IN_CONDITIONAL FORMATTER_INSERT_SPACE_AFTER_QUESTION_IN_WILDCARD FORMATTER_INSERT_SPACE_AFTER_SEMICOLON_IN_FOR FORMATTER_INSERT_SPACE_AFTER_UNARY_OPERATOR FORMATTER_INSERT_SPACE_BEFORE_AND_IN_TYPE_PARAMETER FORMATTER_INSERT_SPACE_BEFORE_ASSIGNMENT_OPERATOR FORMATTER_INSERT_SPACE_BEFORE_AT_IN_ANNOTATION_TYPE_DECLARATION FORMATTER_INSERT_SPACE_BEFORE_BINARY_OPERATOR FORMATTER_INSERT_SPACE_BEFORE_CLOSING_ANGLE_BRACKET_IN_PARAMETERIZED_TYPE_REFERENCE FORMATTER_INSERT_SPACE_BEFORE_CLOSING_ANGLE_BRACKET_IN_TYPE_ARGUMENTS FORMATTER_INSERT_SPACE_BEFORE_CLOSING_ANGLE_BRACKET_IN_TYPE_PARAMETERS FORMATTER_INSERT_SPACE_BEFORE_CLOSING_BRACE_IN_ARRAY_INITIALIZER FORMATTER_INSERT_SPACE_BEFORE_CLOSING_BRACKET_IN_ARRAY_ALLOCATION_EXPRESSION FORMATTER_INSERT_SPACE_BEFORE_CLOSING_BRACKET_IN_ARRAY_REFERENCE FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_ANNOTATION FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_CAST FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_CATCH FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_CONSTRUCTOR_DECLARATION FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_ENUM_CONSTANT FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_FOR FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_IF FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_METHOD_DECLARATION FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_METHOD_INVOCATION FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_PARENTHESIZED_EXPRESSION FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_SWITCH FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_SYNCHRONIZED FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_WHILE FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_ASSERT FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_CASE FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_CONDITIONAL FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_DEFAULT FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_FOR FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_LABELED_STATEMENT FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ALLOCATION_EXPRESSION FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ANNOTATION FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ARRAY_INITIALIZER FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_CONSTRUCTOR_DECLARATION_PARAMETERS FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_CONSTRUCTOR_DECLARATION_THROWS FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ENUM_CONSTANT_ARGUMENTS FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ENUM_DECLARATIONS FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_EXPLICIT_CONSTRUCTOR_CALL_ARGUMENTS FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FOR_INCREMENTS FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FOR_INITS FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_METHOD_DECLARATION_PARAMETERS FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_METHOD_DECLARATION_THROWS FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_METHOD_INVOCATION_ARGUMENTS FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_LOCAL_DECLARATIONS FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_PARAMETERIZED_TYPE_REFERENCE FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_SUPERINTERFACES FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_TYPE_ARGUMENTS FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_TYPE_PARAMETERS FORMATTER_INSERT_SPACE_BEFORE_ELLIPSIS FORMATTER_INSERT_SPACE_BEFORE_OPENING_ANGLE_BRACKET_IN_PARAMETERIZED_TYPE_REFERENCE FORMATTER_INSERT_SPACE_BEFORE_OPENING_ANGLE_BRACKET_IN_TYPE_ARGUMENTS FORMATTER_INSERT_SPACE_BEFORE_OPENING_ANGLE_BRACKET_IN_TYPE_PARAMETERS FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_ANNOTATION_TYPE_DECLARATION FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_ANONYMOUS_TYPE_DECLARATION FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_ARRAY_INITIALIZER FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_BLOCK FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_CONSTRUCTOR_DECLARATION FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_ENUM_CONSTANT FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_ENUM_DECLARATION FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_METHOD_DECLARATION FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_SWITCH FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_TYPE_DECLARATION FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACKET_IN_ARRAY_ALLOCATION_EXPRESSION FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACKET_IN_ARRAY_REFERENCE FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACKET_IN_ARRAY_TYPE_REFERENCE FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_ANNOTATION FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_ANNOTATION_TYPE_MEMBER_DECLARATION FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_CATCH FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_CONSTRUCTOR_DECLARATION FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_ENUM_CONSTANT FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_FOR FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_IF FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_METHOD_DECLARATION FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_METHOD_INVOCATION FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_PARENTHESIZED_EXPRESSION FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_SWITCH FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_SYNCHRONIZED FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_WHILE FORMATTER_INSERT_SPACE_BEFORE_PARENTHESIZED_EXPRESSION_IN_RETURN FORMATTER_INSERT_SPACE_BEFORE_PARENTHESIZED_EXPRESSION_IN_THROW FORMATTER_INSERT_SPACE_BEFORE_POSTFIX_OPERATOR FORMATTER_INSERT_SPACE_BEFORE_PREFIX_OPERATOR FORMATTER_INSERT_SPACE_BEFORE_QUESTION_IN_CONDITIONAL FORMATTER_INSERT_SPACE_BEFORE_QUESTION_IN_WILDCARD FORMATTER_INSERT_SPACE_BEFORE_SEMICOLON FORMATTER_INSERT_SPACE_BEFORE_SEMICOLON_IN_FOR FORMATTER_INSERT_SPACE_BEFORE_UNARY_OPERATOR FORMATTER_INSERT_SPACE_BETWEEN_BRACKETS_IN_ARRAY_TYPE_REFERENCE FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_BRACES_IN_ARRAY_INITIALIZER FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_BRACKETS_IN_ARRAY_ALLOCATION_EXPRESSION FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_ANNOTATION_TYPE_MEMBER_DECLARATION FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_CONSTRUCTOR_DECLARATION FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_ENUM_CONSTANT FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_METHOD_DECLARATION FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_METHOD_INVOCATION FORMATTER_KEEP_ELSE_STATEMENT_ON_SAME_LINE FORMATTER_KEEP_EMPTY_ARRAY_INITIALIZER_ON_ONE_LINE FORMATTER_KEEP_GUARDIAN_CLAUSE_ON_ONE_LINE FORMATTER_KEEP_SIMPLE_IF_ON_ONE_LINE FORMATTER_KEEP_THEN_STATEMENT_ON_SAME_LINE FORMATTER_LINE_SPLIT FORMATTER_NEVER_INDENT_BLOCK_COMMENTS_ON_FIRST_COLUMN FORMATTER_NEVER_INDENT_LINE_COMMENTS_ON_FIRST_COLUMN FORMATTER_NUMBER_OF_EMPTY_LINES_TO_PRESERVE FORMATTER_PUT_EMPTY_STATEMENT_ON_NEW_LINE FORMATTER_TAB_CHAR FORMATTER_TAB_SIZE FORMATTER_USE_TABS_ONLY_FOR_LEADING_INDENTATIONS FORMATTER_WRAP_BEFORE_BINARY_OPERATOR INDENT_BY_ONE INDENT_DEFAULT INDENT_ON_COLUMN MIXED NEXT_LINE NEXT_LINE_ON_WRAP NEXT_LINE_SHIFTED TRUE WRAP_COMPACT WRAP_COMPACT_FIRST_BREAK WRAP_NEXT_PER_LINE WRAP_NEXT_SHIFTED WRAP_NO_SPLIT WRAP_ONE_PER_LINE WRONG_ARGUMENT org.aspectj.org.eclipse.jdt.core.formatter.DefaultCodeFormatterConstants  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  clear existing force bit\r\n  clear existing indent bits\r\n  clear existing split bits\r\n /*\r\n\t * Private constants. Not in javadoc\r\n\t */\r\n","CompletionOnFieldName":"printStatement resolve FAKENAMESUFFIX realName org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnFieldName  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","ClassFileMatchLocator":"convertClassFileFormat checkDeclaringType checkParameters checkTypeName locateMatches matchBinary matchConstructor matchField matchMethod matchSuperTypeReference matchTypeDeclaration org.aspectj.org.eclipse.jdt.internal.core.search.matching.ClassFileMatchLocator  NOTE: if case insensitive then simpleName & qualification are assumed to be lowercase\r\n  check class definition\r\n  filter out element not in hierarchy scope\r\n  no need to check binary info since resolve was successful\r\n  report as a potential match if binary info matches the pattern\r\n  only relevant when finding declarations\r\n  only relevant when finding declarations\r\n  only relevant when finding declarations\r\n  look at return type only if declaring type is not specified\r\n  nothing\r\n","ThisJoinPointVisitor":"computeJoinPointParams isRef isRef endVisit canTreatAsStatic visit replaceEffectivelyStaticRef getEquivalentStaticBinding removeUnusedExtraArguments removeParameter removeParameter removeLocalBinding needsDynamic needsStatic needsStaticEnclosing hasEffectivelyStaticRef thisJoinPointDec thisJoinPointStaticPartDec thisEnclosingJoinPointStaticPartDec thisJoinPointDecLocal thisJoinPointStaticPartDecLocal thisEnclosingJoinPointStaticPartDecLocal replaceEffectivelyStaticRefs method inBlockThatCantRun org.aspectj.ajdt.internal.compiler.ast.ThisJoinPointVisitor  walk my body to see what is needed\r\n  replace effectively static refs with thisJoinPointStaticPart\r\n  System.err.println(\"check:  \"+ hasEffectivelyStaticRef + \", \" + needsDynamic);\r\n  System.err.println(\"check ref: \" + ref + \" is \" + System.identityHashCode(ref));\r\n  System.err.println(\"has static reg\");\r\n  Don't continue if the call binding is null, as we are going to report an error about this line of code!\r\n  thisJoinPointStaticPartDec;\r\n  TypeBinding[] parameters = method.binding.parameters;\r\n  ??? for performance we should do this in-place\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","CompilerWrapper":"main hasErrors getErrors INSTANCE org.aspectj.tools.ajdoc.CompilerWrapper /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n * ******************************************************************/\r\n","IRuntimeVisibleAnnotationsAttribute":"getAnnotationsNumber getAnnotations org.aspectj.org.eclipse.jdt.core.util.IRuntimeVisibleAnnotationsAttribute","ResolvedMemberImpl":"getJoinPointSignatures shouldWalkUpHierarchyFor accumulateTypesInBetween accumulateMembersMatching isVisibleTo getModifiers getModifiers getExceptions getExceptions getAssociatedShadowMunger isAjSynthetic setAjSynthetic hasAnnotations hasAnnotation getAnnotationTypes getAnnotationDefaultValue getAnnotations setAnnotationTypes getParameterAnnotationTypes getParameterAnnotations addAnnotation isBridgeMethod isVarargsMethod setVarargsMethod isSynthetic write getSignatureForAttribute getGenericSignature writeArray readResolvedMember readResolvedMemberArray resolve getSourceContext getParameterNames setParameterNames getParameterNames getEffectiveSignature getSourceLocation getEnd getSourceContext getStart setPosition setDeclaringType setSourceContext isAbstract isPublic isProtected isNative isDefault isVisible setCheckedExceptions setAnnotatedElsewhere isAnnotatedElsewhere getGenericReturnType getGenericParameterTypes parameterizedWith parameterizedWith parameterizedWith setTypeVariables getTypeVariables parameterize parameterize hasBackingGenericMember getBackingGenericMember resetName resetKind resetModifiers resetReturnTypeToObjectArray withSubstituteDeclaringType matches getParameterSigWithBoundsRemoved getParameterSignatureErased getSignatureErased appendSigWithTypeVarBoundsRemoved toDebugString toGenericString isCompatibleWith equalTypes getTypeVariableNamed evictWeavingState getAnnotationOfType isEquivalentTo getJoinPointSignatures shouldWalkUpHierarchyFor accumulateTypesInBetween accumulateMembersMatching isVisibleTo getModifiers getModifiers getExceptions getExceptions getAssociatedShadowMunger isAjSynthetic setAjSynthetic hasAnnotations hasAnnotation getAnnotationTypes getAnnotationDefaultValue getAnnotations setAnnotationTypes getParameterAnnotationTypes getParameterAnnotations addAnnotation isBridgeMethod isVarargsMethod setVarargsMethod isSynthetic write getSignatureForAttribute getGenericSignature writeArray readResolvedMember readResolvedMemberArray resolve getSourceContext getParameterNames setParameterNames getParameterNames getEffectiveSignature getSourceLocation getEnd getSourceContext getStart setPosition setDeclaringType setSourceContext isAbstract isPublic isProtected isNative isDefault isVisible setCheckedExceptions setAnnotatedElsewhere isAnnotatedElsewhere getGenericReturnType getGenericParameterTypes parameterizedWith parameterizedWith parameterizedWith setTypeVariables getTypeVariables parameterize parameterize hasBackingGenericMember getBackingGenericMember resetName resetKind resetModifiers resetReturnTypeToObjectArray withSubstituteDeclaringType matches getParameterSigWithBoundsRemoved getParameterSignatureErased getSignatureErased appendSigWithTypeVarBoundsRemoved toDebugString toGenericString isCompatibleWith equalTypes getTypeVariableNamed evictWeavingState getAnnotationOfType isEquivalentTo parameterNames checkedExceptions backingGenericMember annotationTypes parameterAnnotationTypes isAnnotatedElsewhere isAjSynthetic typeVariables start end sourceContext myParameterSignatureWithBoundsRemoved myParameterSignatureErasure showParameterNames parameterNames checkedExceptions backingGenericMember annotationTypes parameterAnnotationTypes isAnnotatedElsewhere isAjSynthetic typeVariables start end sourceContext myParameterSignatureWithBoundsRemoved myParameterSignatureErasure showParameterNames org.aspectj.weaver.ResolvedMemberImpl org.aspectj.weaver.ResolvedMemberImpl  this field is not\r\n  serialized.\r\n  generic methods have type variables\r\n  these three fields hold the source location of this member\r\n  XXX deprecate this in favor of the constructor below\r\n  first defining type\r\n  focus on one problem at a time...\r\n  member.\r\n  an ITD...\r\n  typesAlreadyVisited.add(declaringType);\r\n  ??? true or false?\r\n  this type - BcelField  this type - BcelField  it?\r\n  do we know better?\r\n  Write out any type variables...\r\n  need\r\n  make sure all the pieces of a resolvedmember really are resolved\r\n  something different to world.resolve(member)\r\n  System.err.println(\"no context: \" + this);\r\n  System.out.println(\"get context: \" + this + \" is \" + sourceContext);\r\n  isParameterized && <-- might need this bit...\r\n  type variables to their first bound.\r\n  the same value as the type variables real name.\r\n  }\r\n  The component type might be a type variable (pr150095)\r\n  if (aType!=null) {  }\r\n  if the type variable comes from the method (and\r\n  private boolean calculatedMyErasure = false;\r\n  try erasure\r\n  comparison.\r\n  pr204505\r\n  comparison.\r\n  modifiers\r\n  remove synthetic (added in the ASM case but\r\n  remove interface (added in the BCEL case but\r\n  not in the BCEL case...)\r\n  remove deprecated (added in the ASM case\r\n  not in the ASM case...)\r\n  but not in the BCEL case...)\r\n  type variables\r\n  'declaring' type\r\n  name\r\n  parameter signature if a method\r\n  string (for testing purposes)\r\n  Check locally...\r\n  check the declaring type!\r\n  this field is not\r\n  serialized.\r\n  generic methods have type variables\r\n  these three fields hold the source location of this member\r\n  XXX deprecate this in favor of the constructor below\r\n  first defining type\r\n  focus on one problem at a time...\r\n  member.\r\n  an ITD...\r\n  typesAlreadyVisited.add(declaringType);\r\n  ??? true or false?\r\n  this type - BcelField  this type - BcelField  it?\r\n  do we know better?\r\n  Write out any type variables...\r\n  need\r\n  make sure all the pieces of a resolvedmember really are resolved\r\n  something different to world.resolve(member)\r\n  System.err.println(\"no context: \" + this);\r\n  System.out.println(\"get context: \" + this + \" is \" + sourceContext);\r\n  isParameterized && <-- might need this bit...\r\n  type variables to their first bound.\r\n  the same value as the type variables real name.\r\n  }\r\n  The component type might be a type variable (pr150095)\r\n  if (aType!=null) {  }\r\n  if the type variable comes from the method (and\r\n  private boolean calculatedMyErasure = false;\r\n  try erasure\r\n  comparison.\r\n  pr204505\r\n  comparison.\r\n  modifiers\r\n  remove synthetic (added in the ASM case but\r\n  remove interface (added in the BCEL case but\r\n  not in the BCEL case...)\r\n  remove deprecated (added in the ASM case\r\n  not in the ASM case...)\r\n  but not in the BCEL case...)\r\n  type variables\r\n  'declaring' type\r\n  name\r\n  parameter signature if a method\r\n  string (for testing purposes)\r\n  Check locally...\r\n  check the declaring type!\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","IWeavingContext":"getResources getBundleIdFromURL getClassLoaderName getClassLoader getFile getId isLocallyDefined getDefinitions getResources getBundleIdFromURL getClassLoaderName getClassLoader getFile getId isLocallyDefined getDefinitions org.aspectj.weaver.loadtime.IWeavingContext org.aspectj.weaver.loadtime.IWeavingContext","IFieldInfo":"getConstantValueAttribute getAccessFlags getName getNameIndex getDescriptor getDescriptorIndex hasConstantValueAttribute isSynthetic isDeprecated getAttributeCount getAttributes org.aspectj.org.eclipse.jdt.core.util.IFieldInfo","ElementValueGen":"getElementValueType stringifyValue dump readElementValue getConstantPool copy getElementValueType stringifyValue dump readElementValue getConstantPool copy type cpGen STRING ENUM_CONSTANT CLASS ANNOTATION ARRAY PRIMITIVE_INT PRIMITIVE_BYTE PRIMITIVE_CHAR PRIMITIVE_DOUBLE PRIMITIVE_FLOAT PRIMITIVE_LONG PRIMITIVE_SHORT PRIMITIVE_BOOLEAN type cpGen STRING ENUM_CONSTANT CLASS ANNOTATION ARRAY PRIMITIVE_INT PRIMITIVE_BYTE PRIMITIVE_CHAR PRIMITIVE_DOUBLE PRIMITIVE_FLOAT PRIMITIVE_LONG PRIMITIVE_SHORT PRIMITIVE_BOOLEAN org.aspectj.apache.bcel.classfile.annotation.ElementValueGen org.aspectj.apache.bcel.classfile.annotation.ElementValueGen  byte\r\n  char\r\n  double\r\n  float\r\n  int\r\n  long\r\n  short\r\n  boolean\r\n  String\r\n  Enum constant\r\n  Class\r\n  Annotation\r\n  FIXME should this be true here? or should it be the value for the containing annotation?\r\n  Array\r\n  byte\r\n  char\r\n  double\r\n  float\r\n  int\r\n  long\r\n  short\r\n  boolean\r\n  String\r\n  Enum constant\r\n  Annotation\r\n  Array\r\n  Class\r\n  byte\r\n  char\r\n  double\r\n  float\r\n  int\r\n  long\r\n  short\r\n  boolean\r\n  String\r\n  Enum constant\r\n  Class\r\n  Annotation\r\n  FIXME should this be true here? or should it be the value for the containing annotation?\r\n  Array\r\n  byte\r\n  char\r\n  double\r\n  float\r\n  int\r\n  long\r\n  short\r\n  boolean\r\n  String\r\n  Enum constant\r\n  Annotation\r\n  Array\r\n  Class\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement -     initial implementation {date}\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement -     initial implementation {date}\r\n * ******************************************************************/\r\n","CodeSnippetQualifiedNameReference":"checkFieldAccess generateAssignment generateCode generateCompoundAssignment generatePostIncrement generateReadSequence generateReceiver getOtherFieldBindings getReceiverType manageSyntheticAccessIfNecessary reportError resolveTypeVisibility evaluationContext delegateThis org.aspectj.org.eclipse.jdt.internal.eval.CodeSnippetQualifiedNameReference  clear bits\r\n  the last field access is a write access\r\n  perform null check\r\n  inline the last field constant\r\n  array length\r\n  perform the actual compound operation\r\n  promote the array reference to the suitable operation type\r\n  prefix operation\r\n  generate the increment value (will by itself  be promoted to the operation value)\r\n  perform the operation\r\n  cast the value back to the array reference type\r\n  field receiver value\r\n  value field receiver value\r\n  perform the actual compound operation\r\n  promote the array reference to the suitable operation type\r\n  prefix operation\r\n  generate the increment value (will by itself  be promoted to the operation value)\r\n  perform the operation\r\n  cast the value back to the array reference type\r\n  actual assignment\r\n  Stack:  [owner][old field value]  ---> [old field value][owner][old field value]\r\n  duplicate the old field value\r\n  determine the rank until which we now we do not need any actual value for the field access\r\n  if first field is actually constant, we can inline it\r\n  not yet supported\r\n  reading the first local variable\r\n  no value needed\r\n  regular local variable read\r\n  outer local can be reached either through a synthetic arg or a synthetic field\r\n  outer local?\r\n  perform null check\r\n  perform null check\r\n  only the last field binding is a write access\r\n  delegated field access\r\n  accessing to a field using a type as \"receiver\" is allowed only with static field\r\n  the field is the first token of the qualified reference....\r\n  must check for the static status....\r\n  only last field is actually a write access if any\r\n  restrictiveFlag == FIELD\r\n  allocation of the fieldBindings array\tand its respective constants\r\n  fill the first constant (the one of the binding)\r\n  could not resolve type prior to this point\r\n  try to retrieve the field as private field\r\n  don't fill other constants slots...\r\n  if not found then internal error, field should have been found\r\n  don't fill other constants slots...\r\n  only last field is actually a write access if any\r\n  constant propagation can only be performed as long as the previous one is a constant too.\r\n  iteration on each field\r\n  NOTE: from target 1.2 on, field's declaring class is touched if any different from receiver type\r\n  write-access?\r\n  array.length\r\n  no change for Object fields\r\n  write-access?\r\n  and not from Object or implicit static field access.\r\n  if not found then internal error, field should have been found\r\n  will not support innerclass emulation inside delegate\r\n  manage the access to a private field of the enclosing type\r\n  clear bits\r\n  ========error cases===============\r\n /*only exact match*/\r\n /*\r\n * Generate code for all bindings (local and fields) excluding the last one, which may then be generated code\r\n * for a read or write access.\r\n */\r\n","AjProblemReporter":"unhandledException isPointcutDeclaration isIntertypeDeclaration abstractMethodCannotBeOverridden inheritedMethodReducesVisibility staticAndInstanceConflict abstractMethodMustBeImplemented disallowedTargetForAnnotation overridesPackageDefaultMethod handle javadocMissingParamTag abstractMethodInAbstractClass itdMethodMustOverride methodMustOverride typesAsString visibilityConflict unusedPrivateType unusedPrivateMethod caseExpressionMustBeConstant unusedArgument finalMethodCannotBeOverridden duplicateInheritedMethods createProblem getMessage getArguments getID getMessage getOriginatingFileName getSourceEnd getSourceLineNumber getSourceStart isError isWarning setSourceEnd setSourceLineNumber setSourceStart setSeeAlsoProblems seeAlso setSupplementaryMessageInfo getSupplementaryMessageInfo duplicateMethodInType DUMP_STACK factory delegate message org.aspectj.ajdt.internal.compiler.problem.AjProblemReporter  PR 72157 - calls to super   This means it must either be the same type or a subtype\r\n  System.err.println(\"matched callSite: \" + callSite + \" with \" + d);\r\n  System.err.println(\"matched enclosingExec: \" + enclosingExec + \" with \" + d);\r\n  ??? is this always correct\r\n  abstractMethod.declaringClass);\r\n  If the type is anonymous, look at its supertype\r\n  if either of the MethodBinding is an ITD, we have already reported it.\r\n  if this is a PointcutDeclaration then there is no error\r\n  when there is a problem with an ITD not being implemented, it will be reported elsewhere\r\n  ??? think through how this could go wrong\r\n  ??? be sure this is always right\r\n  abstractMethod.declaringClass);\r\n  If the type is anonymous, look at its supertype\r\n  whether it overrides the foo method from class C\r\n  could be forward reference\r\n  if the annotation's recipient is an ITD, it might be allowed after all...\r\n  not our special case, report the problem...\r\n  PR71076\r\n  This will already have been reported, see: PointcutDeclaration.postParse()\r\n  ignore ajc$ methods\r\n  affects other code in the problem reporter that looks through ITDs...\r\n  we aren't interested in other kinds of munger\r\n  match, so dont need to report a problem!\r\n  report the error...\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  DONT WORRY if its ITDs since the error will be reported another way...\r\n  don't output unused type warnings for aspects!\r\n  don't output unused warnings for pointcuts...\r\n  don't warn if this is an aj synthetic arg\r\n  If the unused argument is in a pointcut, don't report the problem (for now... pr148219)\r\n  pinpoint info, don't do it twice...\r\n  this is an ITD clash and will be reported in another way by AspectJ (173602)\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see\r\n\t * org.aspectj.org.eclipse.jdt.internal.compiler.problem.ProblemReporter#disallowedTargetForAnnotation(org.aspectj.org.eclipse\r\n\t * .jdt.internal.compiler.ast.Annotation)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","ConstantClass":"accept dump getNameIndex setNameIndex getConstantValue getBytes toString accept dump getNameIndex setNameIndex getConstantValue getBytes toString name_index name_index org.aspectj.apache.bcel.classfile.ConstantClass org.aspectj.apache.bcel.classfile.ConstantClass  Identical to ConstantString except for the name\r\n  Identical to ConstantString except for the name\r\n","ParameterizedFieldBinding":"constant original setConstant canBeSeenBy alwaysNeedsAccessMethod getAccessMethod originalField org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ParameterizedFieldBinding  no subst for static field\r\n  enum constant get paramType as its type\r\n","ConstantCP":"dump getClassIndex getNameAndTypeIndex setClassIndex getClass setNameAndTypeIndex toString dump getClassIndex getNameAndTypeIndex setClassIndex getClass setNameAndTypeIndex toString class_index name_and_type_index class_index name_and_type_index org.aspectj.apache.bcel.classfile.ConstantCP org.aspectj.apache.bcel.classfile.ConstantCP /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n","MessageHandler":"init init clearMessages handleMessage isIgnoring ignore dontIgnore hasAnyMessage numMessages getUnmodifiableListView getMessages getErrors getWarnings setInterceptor toString init init clearMessages handleMessage isIgnoring ignore dontIgnore hasAnyMessage numMessages getUnmodifiableListView getMessages getErrors getWarnings setInterceptor toString messages ignoring handleMessageResult interceptor messages ignoring handleMessageResult interceptor org.aspectj.bridge.MessageHandler org.aspectj.bridge.MessageHandler  Off by default, need to explicitly be enabled (see -showWeaveInfo)\r\n  XXX sync\r\n  Off by default, need to explicitly be enabled (see -showWeaveInfo)\r\n  XXX sync\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","Constant":"accept dump getTag toString copy clone readConstant booleanValue byteValue castTo charValue computeConstantOperation computeConstantOperation computeConstantOperationAND computeConstantOperationAND_AND computeConstantOperationDIVIDE computeConstantOperationEQUAL_EQUAL computeConstantOperationGREATER computeConstantOperationGREATER_EQUAL computeConstantOperationLEFT_SHIFT computeConstantOperationLESS computeConstantOperationLESS_EQUAL computeConstantOperationMINUS computeConstantOperationMULTIPLY computeConstantOperationOR computeConstantOperationOR_OR computeConstantOperationPLUS computeConstantOperationREMAINDER computeConstantOperationRIGHT_SHIFT computeConstantOperationUNSIGNED_RIGHT_SHIFT computeConstantOperationXOR doubleValue floatValue hasSameValue intValue longValue shortValue stringValue toString typeID typeName accept dump getTag toString copy clone readConstant tag NotAConstant tag org.aspectj.apache.bcel.classfile.Constant org.aspectj.org.eclipse.jdt.internal.compiler.impl.Constant org.aspectj.apache.bcel.classfile.Constant  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  case (T_byte<<4)+T_undefined  \t : return NotAConstant;\r\n  case (T_byte<<4)+T_Object  \t \t : return NotAConstant;\r\n  case (T_byte<<4)+T_boolean  \t : return NotAConstant;\r\n  case (T_long<<4)+T_undefined  \t : return NotAConstant;\r\n  case (T_long<<4)+T_Object  \t\t : return NotAConstant;\r\n  case (T_long<<4)+T_boolean  \t : return NotAConstant;\r\n  case (T_short<<4)+T_undefined  \t : return NotAConstant;\r\n  case (T_short<<4)+T_Object  \t : return NotAConstant;\r\n  case (T_short<<4)+T_boolean \t : return NotAConstant;\r\n  case (T_String<<4)+T_void  \t\t : return NotAConstant;\r\n  case (T_double<<4)+T_undefined  \t: return NotAConstant;\r\n  case (T_double<<4)+T_Object  \t\t: return NotAConstant;\r\n  case (T_double<<4)+T_boolean  \t\t: return NotAConstant;\r\n  case (T_float<<4)+T_undefined  \t : return NotAConstant;\r\n  case (T_float<<4)+T_Object  \t : return NotAConstant;\r\n  case (T_float<<4)+T_boolean \t : return NotAConstant;\r\n  case (T_boolean<<4)+T_float  \t\t\t : return NotAConstant;\r\n  case (T_char<<4)+T_undefined  \t : return NotAConstant;\r\n  case (T_char<<4)+T_Object  \t\t : return NotAConstant;\r\n  case (T_char<<4)+T_boolean  \t : return NotAConstant;\r\n  case (T_int<<4)+T_undefined  \t : return NotAConstant;\r\n  case (T_int<<4)+T_Object  \t\t : return NotAConstant;\r\n  case (T_int<<4)+T_boolean  \t \t : return NotAConstant;\r\n  $NON-NLS-1$\r\n  the two special -9223372036854775808L and -2147483648 are inlined at parseTime\r\n  positive and negative 0....\r\n  default case\r\n  positive and negative 0....\r\n  default case\r\n  get to be compared, it is an equal on the vale which is done\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* In fact this tag is redundant since we can distinguish different\r\n   * `Constant' objects by their type, i.e., via `instanceof'. In some\r\n   * places we will use the tag for switch()es anyway.\r\n   *\r\n   * First, we want match the specification as closely as possible. Second we\r\n   * need the tag as an index to select the corresponding class name from the \r\n   * `CONSTANT_NAMES' array.\r\n   */\r\n /* In fact this tag is redundant since we can distinguish different\r\n   * `Constant' objects by their type, i.e., via `instanceof'. In some\r\n   * places we will use the tag for switch()es anyway.\r\n   *\r\n   * First, we want match the specification as closely as possible. Second we\r\n   * need the tag as an index to select the corresponding class name from the \r\n   * `CONSTANT_NAMES' array.\r\n   */\r\n","CodeSnippetMessageSend":"generateCode manageSyntheticAccessIfNecessary resolveType evaluationContext delegateThis org.aspectj.org.eclipse.jdt.internal.eval.CodeSnippetMessageSend  generate receiver  not supported yet\r\n  outer access ?\r\n  we need an object on the stack which is ignored for the method invocation\r\n  generate arguments\r\n  remove the null from the stack\r\n  convert the return value to the appropriate type for primitive types\r\n  generate receiver  outer method can be reached through emulation\r\n  emulation was not possible (should not happen per construction)\r\n  outer access ?\r\n  generate arguments\r\n  actual message invocation\r\n  required cast must occur even if no value is required\r\n  conversion only generated if unboxing\r\n  implicit conversion if necessary\r\n  highlight selector\r\n  if method from parameterized type got found, use the original method at codegen time\r\n  no need for extra cast if same as first bound anyway\r\n  extra cast needed if method return type was type variable\r\n  no change for Object methods\r\n  and not from Object or implicit static method call.\r\n  will check later on\r\n  due to change of declaring class with receiver type, only identity cast should be notified\r\n  typeChecks all arguments\r\n  resolve type arguments (for generic constructor call)\r\n  will check for null after args are resolved\r\n  typeChecks all arguments\r\n  will check later on\r\n  record any selector match, for clients who may still need hint about possible method match\r\n  base type cannot receive any message\r\n  really bad error ....\r\n  if not found then internal error, field should have been found\r\n  really bad error ....\r\n  compute generic cast if necessary\r\n  handle indirect inheritance thru variable secondary bound\r\n  the \"receiver\" must not be a type, in other words, a NameReference that the TC has bound to a Type\r\n  -------message send that are known to fail at compile time-----------\r\n  from 1.5 compliance on, array#clone() returns the array type (but binding still shows Object)\r\n /*only exact match*/\r\n","DefaultClassLoaderReference":"getClassLoader getClassLoader loader loader org.aspectj.apache.bcel.util.DefaultClassLoaderReference org.aspectj.apache.bcel.util.DefaultClassLoaderReference /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n","BcelObjectType":"setJavaClass initializeFromJavaclass isInterface isEnum isAnnotation isAnonymous isNested getModifiers getSuperclass getWorld getDeclaredInterfaces getDeclaredMethods getDeclaredFields getTypeVariables getTypeMungers getDeclares getPrivilegedAccesses getDeclaredPointcuts isAspect isAnnotationStyleAspect ensureAspectJAttributesUnpacked processAttributes resolveAnnotationDeclares getPerClause getJavaClass ensureDelegateConsistent resetState finishedWith getWeaverState setWeaverState printWackyStuff getLazyClassGen isSynthetic getWeaverVersionAttribute addParent getAnnotationTypes getAnnotations hasAnnotation addAnnotation isAnnotationWithRuntimeRetention getRetentionPolicy canAnnotationTargetType getAnnotationTargetKinds ensureAnnotationsUnpacked getDeclaredGenericSignature ensureGenericSignatureUnpacked getAllFormals getOuterClass ensureGenericInfoProcessed isGeneric toString evictWeavingState weavingCompleted addPointcutDefinition hasBeenWoven setJavaClass initializeFromJavaclass isInterface isEnum isAnnotation isAnonymous isNested getModifiers getSuperclass getWorld getDeclaredInterfaces getDeclaredMethods getDeclaredFields getTypeVariables getTypeMungers getDeclares getPrivilegedAccesses getDeclaredPointcuts isAspect isAnnotationStyleAspect ensureAspectJAttributesUnpacked processAttributes resolveAnnotationDeclares getPerClause getJavaClass ensureDelegateConsistent resetState finishedWith getWeaverState setWeaverState printWackyStuff getLazyClassGen isSynthetic getWeaverVersionAttribute addParent getAnnotationTypes getAnnotations hasAnnotation addAnnotation isAnnotationWithRuntimeRetention getRetentionPolicy canAnnotationTargetType getAnnotationTargetKinds ensureAnnotationsUnpacked getDeclaredGenericSignature ensureGenericSignatureUnpacked getAllFormals getOuterClass ensureGenericInfoProcessed isGeneric toString evictWeavingState weavingCompleted addPointcutDefinition hasBeenWoven javaClass lazyClassGen modifiers className superclassSignature superclassName interfaceSignatures fields methods annotationTypes annotations typeVars retentionPolicy annotationTargetKinds wvInfo pointcuts privilegedAccess weaverState perClause typeMungers declares formalsForResolution declaredSignature hasBeenWoven isGenericType isInterface isEnum isAnnotation isAnonymous isNested isObject isAnnotationStyleAspect isCodeStyleAspect bitflag DISCOVERED_ANNOTATION_RETENTION_POLICY UNPACKED_GENERIC_SIGNATURE UNPACKED_AJATTRIBUTES DISCOVERED_ANNOTATION_TARGET_KINDS DISCOVERED_DECLARED_SIGNATURE DISCOVERED_WHETHER_ANNOTATION_STYLE DAMAGED NO_INTERFACE_SIGS javaClass lazyClassGen modifiers className superclassSignature superclassName interfaceSignatures fields methods annotationTypes annotations typeVars retentionPolicy annotationTargetKinds wvInfo pointcuts privilegedAccess weaverState perClause typeMungers declares formalsForResolution declaredSignature hasBeenWoven isGenericType isInterface isEnum isAnnotation isAnonymous isNested isObject isAnnotationStyleAspect isCodeStyleAspect bitflag DISCOVERED_ANNOTATION_RETENTION_POLICY UNPACKED_GENERIC_SIGNATURE UNPACKED_AJATTRIBUTES DISCOVERED_ANNOTATION_TARGET_KINDS DISCOVERED_DECLARED_SIGNATURE DISCOVERED_WHETHER_ANNOTATION_STYLE DAMAGED NO_INTERFACE_SIGS org.aspectj.weaver.bcel.BcelObjectType org.aspectj.weaver.bcel.BcelObjectType  set lazily if it's an aspect\r\n  Aspect related stuff (pointcuts *could* be in a java class)\r\n  set upon construction\r\n  set upon construction\r\n  not redundant with field\r\n  discovery bits\r\n  see note(1)\r\n  below\r\n  see note(2) below\r\n  @AJ pc refs annotation in class hierarchy\r\n  the only class in Java-1.4 with no superclasses\r\n  }\r\n  ------------------ construction and initialization\r\n  repeat initialization\r\n  Java related\r\n  cachedGenericClassTypeSignature\r\n  getGenericClassTypeSignature();\r\n  this is a development bug, so fail fast with good info\r\n  Aspect related\r\n  Pass in empty list that can store things for readAj5 to process\r\n  we can finally process the aspect and its associated perclause...\r\n  Set the weaver\r\n  System.err.println(\"unpacking: \" + this + \" and \" + a);\r\n  might want to reweave multiple times\r\n  System.err.println(\"creating lazy class gen for: \" + this);\r\n  this.getJavaClass().getSuperclassName );\r\n  evil mutator - adding state not stored in the java class\r\n  null means we have no idea\r\n  null means we have no idea or the\r\n  @Target annotation hasn't been used\r\n  proceeding with resolution.\r\n  development bug, fail fast with good info\r\n  development bug, fail fast with good info\r\n  getResolvedTypeX().getWorld());\r\n  ResolvedType[cSig.superInterfaceSignatures.length];\r\n  update resolved typex to point at generic type not raw type.\r\n  );\r\n  Can't chuck all this away\r\n  Force retrieval of any lazy information\r\n  later.\r\n  discard expensive bytecode array containing reweavable info\r\n  for testing\r\n  set lazily if it's an aspect\r\n  Aspect related stuff (pointcuts *could* be in a java class)\r\n  set upon construction\r\n  set upon construction\r\n  not redundant with field\r\n  discovery bits\r\n  see note(1)\r\n  below\r\n  see note(2) below\r\n  @AJ pc refs annotation in class hierarchy\r\n  the only class in Java-1.4 with no superclasses\r\n  }\r\n  ------------------ construction and initialization\r\n  repeat initialization\r\n  Java related\r\n  cachedGenericClassTypeSignature\r\n  getGenericClassTypeSignature();\r\n  this is a development bug, so fail fast with good info\r\n  Aspect related\r\n  Pass in empty list that can store things for readAj5 to process\r\n  we can finally process the aspect and its associated perclause...\r\n  Set the weaver\r\n  System.err.println(\"unpacking: \" + this + \" and \" + a);\r\n  might want to reweave multiple times\r\n  System.err.println(\"creating lazy class gen for: \" + this);\r\n  this.getJavaClass().getSuperclassName );\r\n  evil mutator - adding state not stored in the java class\r\n  null means we have no idea\r\n  null means we have no idea or the\r\n  @Target annotation hasn't been used\r\n  proceeding with resolution.\r\n  development bug, fail fast with good info\r\n  development bug, fail fast with good info\r\n  getResolvedTypeX().getWorld());\r\n  ResolvedType[cSig.superInterfaceSignatures.length];\r\n  update resolved typex to point at generic type not raw type.\r\n  );\r\n  Can't chuck all this away\r\n  Force retrieval of any lazy information\r\n  later.\r\n  discard expensive bytecode array containing reweavable info\r\n  for testing\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n *     RonBodkin/AndyClement optimizations for memory consumption/speed\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n *     RonBodkin/AndyClement optimizations for memory consumption/speed\r\n * ******************************************************************/\r\n","Iterators":"get filter dupFilter array mapOver recur append append1 snoc one get filter dupFilter array mapOver recur append append1 snoc one seen fresh peek i len delegate delegate last1 avail seen fresh peek i len delegate delegate last1 avail org.aspectj.weaver.Iterators org.aspectj.weaver.Iterators  should have weak ptrs?\r\n  garbage collection\r\n  should have weak ptrs?\r\n  garbage collection\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","IImportContainer":"getImport org.aspectj.org.eclipse.jdt.core.IImportContainer","IntMap":"pushEnclosingDefinition popEnclosingDefinitition peekEnclosingDefinition directlyInAdvice getEnclosingAdvice setEnclosingAdvice getAdviceSignature getConcreteAspect setConcreteAspect copyContext put get hasKey idMap toString pushEnclosingDefinition popEnclosingDefinitition peekEnclosingDefinition directlyInAdvice getEnclosingAdvice setEnclosingAdvice getAdviceSignature getConcreteAspect setConcreteAspect copyContext put get hasKey idMap toString concreteAspect enclosingAdvice enclosingDefinition MISSING map concreteAspect enclosingAdvice enclosingDefinition MISSING map org.aspectj.weaver.IntMap org.aspectj.weaver.IntMap  XXX begin hack to avoid a signature refactoring in Pointcut\r\n  ??? better expansion function\r\n  XXX begin hack to avoid a signature refactoring in Pointcut\r\n  ??? better expansion function\r\n /* ResolvedPointcutDefinition */\r\n /* assert (val >= 0 && key >= 0) */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* ResolvedPointcutDefinition */\r\n /* assert (val >= 0 && key >= 0) */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","VariableDeclaration":"internalExtraDimensionsProperty getExtraDimensionsProperty internalInitializerProperty getInitializerProperty internalNameProperty getNameProperty getName setName getExtraDimensions setExtraDimensions getInitializer setInitializer resolveBinding org.aspectj.org.eclipse.jdt.core.dom.VariableDeclaration","EclipseSourceType":"eclipseWorld isAspect isAnonymous isNested getOuterClass isAnnotationStyleAspect getPointcutStringFromAnnotationStylePointcut isAnnotationStylePointcut getWeaverState getSuperclass getDeclaredInterfaces fillDeclaredMembers makeResolvedPointcutDefinition buildFormalAdviceBindingsFrom getDeclaredFields getDeclaredMethods getDeclaredPointcuts getModifiers toString checkPointcutDeclarations isInterface isEnum isAnnotation addAnnotation isAnnotationWithRuntimeRetention getRetentionPolicy canAnnotationTargetType getAnnotationTargetKinds hasAnnotation getAnnotations convertEclipseAnnotation generateAnnotation generateElementValue generateElementValueForNonConstantExpression getAnnotationTypes getPerClause getPerClauseForTypeDeclaration determinePerClause lookupPerClauseKind getDeclares getPrivilegedAccesses getTypeMungers doesNotExposeShadowMungers getDeclaredGenericSignature isGeneric getTypeVariables typeParameter2TypeVariable ensureDelegateConsistent pointcutSig aspectSig declaredPointcuts declaredMethods declaredFields declares typeMungers factory binding declaration unit annotationsResolved resolvedAnnotations discoveredAnnotationTargetKinds annotationTargetKinds annotations NO_ANNOTATION_TYPES joinPoint joinPointStaticPart joinPointEnclosingStaticPart proceedingJoinPoint ACC_ANNOTATION ACC_ENUM org.aspectj.ajdt.internal.compiler.lookup.EclipseSourceType  XXX happens if we do this very early from\r\n  an @Pointcut in a code-style aspect\r\n  empty pointcut expression\r\n  XXX happens if we do this very early from\r\n  an @Pointcut in a code-style aspect\r\n  XXX what about java.lang.Object\r\n  the important side-effect of this call is to make\r\n  sure bindings are completed\r\n  pr229829\r\n  consider pointcuts defined via annotations\r\n  weaving\r\n  these are handled in a separate pass\r\n  these are handled in a separate pass\r\n  there is another error that has caused this...\r\n  means...\r\n  maybeGetExtraArgName();\r\n  only return the real Java modifiers, not the extra eclipse ones\r\n  reasonably\r\n  ??? this is an odd\r\n  XXX make sure this is applied to classes and interfaces\r\n  supports 1.5\r\n  yet. Not sure if this method will be called in practice...\r\n  null means we have no idea or the\r\n  return targetKind;\r\n  Make sure they are resolved\r\n  which will result in a separate error message.\r\n  only do this once\r\n  forces resolution and sets resolvedAnnotations\r\n  testcase!\r\n  long bs = (eclipseAnnotation.bits & TagBits.AnnotationRetentionMASK);\r\n  this is something else...\r\n  this is a single member annotation (one member value)\r\n  is this just a marker annotation?\r\n  class type\r\n  ,\r\n  array type\r\n  Make sure they are resolved\r\n  new ResolvedType[0];\r\n  at least try to get the right perclause\r\n  (that's really a hack - AV)\r\n  at this stage of compilation is not worth the trouble\r\n  fallback strategy just to\r\n  it is an @Aspect(...something...)\r\n  TODO\r\n  ?\r\n  it is an @Aspect(...something...)\r\n  TODO\r\n  ?\r\n  aspect\r\n  if no super aspect, we have a @Aspect() means singleton\r\n  found @Aspect(...)\r\n  no @Aspect annotation at all (not as aspect)\r\n  fallback strategy just to avoid NPE\r\n  XXX need to handle this too\r\n  value, else null\r\n  code style\r\n  attributes\r\n  adapted from AspectDeclaration\r\n  XXX what about lower binding?\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved.\r\n * This program and the accompanying materials are made available\r\n * under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *     PARC                 initial implementation\r\n *     Alexandre Vasseur    support for @AJ perClause\r\n * ******************************************************************/\r\n","ASTRecoveryPropagator":"endVisit visit visitNode endVisitNode flagNodeWithInsertedTokens flagNodesWithInsertedTokensAtEnd flagNodesWithInsertedTokensInside markIncludedProblems endVisit endVisit NOTHING endingTokens problems usedOrIrrelevantProblems data blockDepth lastEnd insertedTokensKind insertedTokensPosition insertedTokensFlagged removedTokensFlagged replacedTokensFlagged stack org.aspectj.org.eclipse.jdt.core.dom.ASTRecoveryPropagator  visit Javadoc.tags() as well\r\n  is inside diet part of the ast\r\n  unparent the expression to add it in the expression stateemnt\r\n","JavaSearchPattern":"getBlankPattern getMatchMode isCamelCase isCaseSensitive isErasureMatch isEquivalentMatch extractMethodArguments getTypeArguments hasSignatures hasTypeArguments hasTypeParameters matchDifferentTypeSuffixes print setTypeArguments storeTypeSignaturesAndArguments toString isCaseSensitive isCamelCase matchMode matchCompatibility MATCH_MODE_MASK MATCH_COMPATIBILITY_MASK typeSignatures typeArguments flags HAS_TYPE_ARGUMENTS org.aspectj.org.eclipse.jdt.internal.core.search.matching.JavaSearchPattern  Signatures and arguments for parameterized types search\r\n  see bug https:  Parameterized method\r\n  Default behavior is to match suffixes\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  update flags\r\n  Scan hierachy to store type arguments at each level\r\n  Store type arguments if any\r\n /*\r\n\t * Whether this pattern is case sensitive.\r\n\t */\r\n /*\r\n\t * Whether this pattern is camel case.\r\n\t */\r\n /*\r\n\t * Extract method arguments using unique key for parameterized methods\r\n\t * and type parameters for non-generic ones.\r\n\t */\r\n /*\r\n\t * Extract and store type signatures and arguments using unique key for parameterized types\r\n\t * and type parameters for non-generic ones\r\n\t */\r\n","IProblemFactory":"createProblem getLocale getLocalizedMessage org.aspectj.org.eclipse.jdt.internal.compiler.IProblemFactory  shorter versions of the problemArguments\r\n","SimpleSet":"add addIfNotIncluded asArray clear clone includes remove rehash toString values elementSize threshold org.aspectj.org.eclipse.jdt.internal.compiler.util.SimpleSet  to avoid using Enumerations, walk the individual values skipping nulls\r\n  number of elements in the table\r\n  size is the expected number of elements\r\n  assumes the threshold is never equal to the size of the table\r\n  already existed\r\n  assumes the threshold is never equal to the size of the table\r\n  only needed if a possible collision existed\r\n  double the number of expected elements\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","IPackageFragment":"containsJavaResources createCompilationUnit getClassFile getClassFiles getCompilationUnit getCompilationUnits getCompilationUnits getElementName getKind getNonJavaResources hasSubpackages isDefaultPackage DEFAULT_PACKAGE_NAME org.aspectj.org.eclipse.jdt.core.IPackageFragment  $NON-NLS-1$\r\n","CompilationAndWeavingContext":"reset setMultiThreaded registerFormatter getCurrentContext enteringPhase leavingPhase resetForThread getContextStack nextToken getFormatter getData toString formatEntry reset setMultiThreaded registerFormatter getCurrentContext enteringPhase leavingPhase resetForThread getContextStack nextToken getFormatter getData toString formatEntry nextTokenId BATCH_BUILD INCREMENTAL_BUILD PROCESSING_COMPILATION_UNIT RESOLVING_COMPILATION_UNIT ANALYSING_COMPILATION_UNIT GENERATING_UNWOVEN_CODE_FOR_COMPILATION_UNIT COMPLETING_TYPE_BINDINGS PROCESSING_DECLARE_PARENTS CHECK_AND_SET_IMPORTS CONNECTING_TYPE_HIERARCHY BUILDING_FIELDS_AND_METHODS COLLECTING_ITDS_AND_DECLARES PROCESSING_DECLARE_ANNOTATIONS WEAVING_INTERTYPE_DECLARATIONS RESOLVING_POINTCUT_DECLARATIONS ADDING_DECLARE_WARNINGS_AND_ERRORS VALIDATING_AT_ASPECTJ_ANNOTATIONS ACCESS_FOR_INLINE ADDING_AT_ASPECTJ_ANNOTATIONS FIXING_SUPER_CALLS_IN_ITDS FIXING_SUPER_CALLS OPTIMIZING_THIS_JOIN_POINT_CALLS WEAVING PROCESSING_REWEAVABLE_STATE PROCESSING_TYPE_MUNGERS WEAVING_ASPECTS WEAVING_CLASSES WEAVING_TYPE MATCHING_SHADOW IMPLEMENTING_ON_SHADOW MATCHING_POINTCUT MUNGING_WITH PROCESSING_ATASPECTJTYPE_MUNGERS_ONLY PHASE_NAMES contextMap contextStack formatterMap defaultFormatter multiThreaded tokenId contextToken phaseId dataRef nextTokenId BATCH_BUILD INCREMENTAL_BUILD PROCESSING_COMPILATION_UNIT RESOLVING_COMPILATION_UNIT ANALYSING_COMPILATION_UNIT GENERATING_UNWOVEN_CODE_FOR_COMPILATION_UNIT COMPLETING_TYPE_BINDINGS PROCESSING_DECLARE_PARENTS CHECK_AND_SET_IMPORTS CONNECTING_TYPE_HIERARCHY BUILDING_FIELDS_AND_METHODS COLLECTING_ITDS_AND_DECLARES PROCESSING_DECLARE_ANNOTATIONS WEAVING_INTERTYPE_DECLARATIONS RESOLVING_POINTCUT_DECLARATIONS ADDING_DECLARE_WARNINGS_AND_ERRORS VALIDATING_AT_ASPECTJ_ANNOTATIONS ACCESS_FOR_INLINE ADDING_AT_ASPECTJ_ANNOTATIONS FIXING_SUPER_CALLS_IN_ITDS FIXING_SUPER_CALLS OPTIMIZING_THIS_JOIN_POINT_CALLS WEAVING PROCESSING_REWEAVABLE_STATE PROCESSING_TYPE_MUNGERS WEAVING_ASPECTS WEAVING_CLASSES WEAVING_TYPE MATCHING_SHADOW IMPLEMENTING_ON_SHADOW MATCHING_POINTCUT MUNGING_WITH PROCESSING_ATASPECTJTYPE_MUNGERS_ONLY PHASE_NAMES contextMap contextStack formatterMap defaultFormatter multiThreaded tokenId contextToken phaseId dataRef org.aspectj.bridge.context.CompilationAndWeavingContext org.aspectj.bridge.context.CompilationAndWeavingContext  \"FRONT END\"\r\n  phase names\r\n  context stacks, one per thread\r\n  single thread mode stack\r\n  formatters, by phase id\r\n  dumb data structure\r\n  don't lose vital info because of bad toString\r\n  \"FRONT END\"\r\n  phase names\r\n  context stacks, one per thread\r\n  single thread mode stack\r\n  formatters, by phase id\r\n  dumb data structure\r\n  don't lose vital info because of bad toString\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","DeclareErrorOrWarningImpl":"getDeclaringType getPointcutExpression getMessage isError toString getDeclaringType getPointcutExpression getMessage isError toString pc msg isError declaringType pc msg isError declaringType org.aspectj.internal.lang.reflect.DeclareErrorOrWarningImpl org.aspectj.internal.lang.reflect.DeclareErrorOrWarningImpl /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareErrorOrWarning#getPointcutExpression()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareErrorOrWarning#getMessage()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareErrorOrWarning#isError()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareErrorOrWarning#getPointcutExpression()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareErrorOrWarning#getMessage()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareErrorOrWarning#isError()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","AnnotationAnnotationValue":"getAnnotation stringify toString getAnnotation stringify toString value value org.aspectj.weaver.AnnotationAnnotationValue org.aspectj.weaver.AnnotationAnnotationValue /* *******************************************************************\r\n * Copyright (c) 2006 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement IBM     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2006 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement IBM     initial implementation \r\n * ******************************************************************/\r\n","CompoundNameVector":"add addAll contains elementAt remove removeAll toString INITIAL_SIZE size maxSize elements org.aspectj.org.eclipse.jdt.internal.compiler.util.CompoundNameVector  knows that size starts <= maxSize\r\n  assume no more elements will be added\r\n  shift the remaining elements down one spot\r\n  assumes only one occurrence of the element exists\r\n  $NON-NLS-1$\r\n","Trace":"enter enter exit exit exit event event debug info warn warn error error fatal fatal enter enter exit exit event isTraceEnabled setTraceEnabled enter enter exit exit exit event event debug info warn warn error error fatal fatal enter enter exit exit event isTraceEnabled setTraceEnabled org.aspectj.weaver.tools.Trace org.aspectj.weaver.tools.Trace /*\r\n\t * Convenience methods\r\n\t */\r\n /*\r\n\t * Convenience methods\r\n\t */\r\n","LocalVariableTypeTableEntry":"getStartPC getLength getNameIndex getSignatureIndex getIndex getName getSignature startPC length nameIndex signatureIndex name signature index org.aspectj.org.eclipse.jdt.internal.core.util.LocalVariableTypeTableEntry","PerClauseKind":"/* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","ElementValuePair":"getValue getName getMethodBinding getValue setMethodBinding setValue name value binding org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ElementValuePair  literals would hit this case.\r\n  something that isn't a compile time constant.\r\n  lazily set after annotation type was resolved\r\n  can be modified after the initialization if holding an unresolved ref\r\n","ThreadCounterImpl11":"getThreadCounter inc dec isNotZero getThreadCounter inc dec isNotZero getThreadCounter inc dec isNotZero counters cached_thread cached_counter change_count COLLECT_AT MIN_COLLECT_AT value counters cached_thread cached_counter change_count COLLECT_AT MIN_COLLECT_AT value counters cached_thread cached_counter change_count COLLECT_AT MIN_COLLECT_AT value org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11 org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11 org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11  should be >1 b  should be >1 b  should be >1 b /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * \t\t\t\t\t   Copied from bits of original CFlowStack\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * \t\t\t\t\t   Copied from bits of original CFlowStack\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * \t\t\t\t\t   Copied from bits of original CFlowStack\r\n * ******************************************************************/\r\n","DeferredResolvedPointcutDefinition":"org.aspectj.weaver.reflect.DeferredResolvedPointcutDefinition org.aspectj.weaver.reflect.DeferredResolvedPointcutDefinition /* *******************************************************************\r\n * Copyright (c) 2006 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer          Initial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2006 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer          Initial implementation\r\n * ******************************************************************/\r\n","NameLookup":"ignoreIfBetter isBetter acceptType findAllTypes findCompilationUnit findCompilationUnit findPackageFragment findPackageFragments findPackageFragments findSecondaryType findType findType getViolatedRestriction findType findType findType findType findType getMemberType isPackage nameMatches nameMatches seekPackageFragments seekTypes seekTypesInBinaryPackage seekTypesInSourcePackage seekTypesInType seekTypesInTopLevelType seekTypesInWorkingCopies type restriction ACCEPT_CLASSES ACCEPT_INTERFACES ACCEPT_ENUMS ACCEPT_ANNOTATIONS ACCEPT_ALL VERBOSE NO_TYPES packageFragmentRoots packageFragments rootToResolvedEntries typesInWorkingCopies timeSpentInSeekTypesInSourcePackage timeSpentInSeekTypesInBinaryPackage org.aspectj.org.eclipse.jdt.internal.core.NameLookup  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  clone tables as we're adding packages from working copies\r\n  add root of package fragment to cache\r\n  are also in the map\r\n  $NON-NLS-1$   no flags or all flags, always accepted\r\n  the class is not present, do not accept.\r\n  case IGenericType.ANNOTATION_TYPE :\r\n  the root is not present, continue;\r\n  default package in a default root\r\n  + 1 is for the File.separatorChar\r\n  the package fragment root is not present;\r\n  external jar\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Look for concerned package fragments\r\n  Try to find type in package fragments list\r\n  remember suggestion and keep looking\r\n  no better answer was found\r\n  If type was not found, try to find it as secondary in source folders\r\n  reverse map always contains resolved CP entry\r\n  TODO (philippe) improve char[] <-> String conversions to avoid performing them on the fly\r\n  Return first found (ignore duplicates).\r\n  partial matches are used in completion mode, thus case insensitive mode\r\n  partial matches are used in completion mode, thus case insensitive mode\r\n  look in working copies first\r\n  look in model\r\n  the package is not present\r\n  the type name of the inner type\r\n  MatchName will never have the extension \".class\" and the elementName always will.\r\n  not an anonymous type\r\n  exact match\r\n  accept type checks for existence\r\n  since an exact match was requested, no other matching type can exist\r\n  the enclosing type is not present\r\n  all types where deleted -> type is hidden\r\n  return the first one\r\n  don't continue with compilation unit\r\n /*\r\n\t\t * Returns whether this answer is better than the other awswer.\r\n\t\t * (accessible is better than discouraged, which is better than\r\n\t\t * non-accessible)\r\n\t\t */\r\n /*\r\n\t * Accept flag for all kinds of types\r\n\t */\r\n /*\r\n * TODO (jerome) this code should rather use the package fragment map to find the candidate package, then\r\n * check if the respective enclosing root maps to the one on this given IPath.\r\n */\r\n /*\r\n\t * Find secondary type for a project.\r\n\t */\r\n /* consider secondary types */\r\n /* do NOT wait for indexes */\r\n /*consider secondary types*/\r\n /*wait for indexes*/\r\n /*\t\tif (VERBOSE) {\r\n\t\t\tUtil.verbose(\" SEEKING PACKAGE FRAGMENTS\");  //$NON-NLS-1$\r\n\t\t\tUtil.verbose(\" -> name: \" + name);  //$NON-NLS-1$\r\n\t\t\tUtil.verbose(\" -> partial match:\" + partialMatch);  //$NON-NLS-1$\r\n\t\t}\r\n*/\r\n /*\t\tif (VERBOSE) {\r\n\t\t\tUtil.verbose(\" SEEKING TYPES\");  //$NON-NLS-1$\r\n\t\t\tUtil.verbose(\" -> name: \" + name);  //$NON-NLS-1$\r\n\t\t\tUtil.verbose(\" -> pkg: \" + ((JavaElement) pkg).toStringWithAncestors());  //$NON-NLS-1$\r\n\t\t\tUtil.verbose(\" -> partial match:\" + partialMatch);  //$NON-NLS-1$\r\n\t\t}\r\n*/\r\n /*ignore case*/\r\n /*\r\n\t * Seeks the type with the given name in the map of types with precedence (coming from working copies)\r\n\t * Return whether a type has been found.\r\n\t */\r\n","CachedIndexEntry":"signature index org.aspectj.org.eclipse.jdt.internal.compiler.codegen.CachedIndexEntry","MemberValuePairBinding":"appendValue buildDOMValue getAnnotations getJavaElement getKey getKind getMethodBinding getModifiers getName getValue init internalName isDefault isDeprecated isEqualTo isRecovered isSynthetic toString NoPair NoValue EmptyArray internalPair value bindingResolver org.aspectj.org.eclipse.jdt.core.dom.MemberValuePairBinding  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  TODO when implementing, update spec in IBinding\r\n  $NON-NLS-1$\r\n /*\r\n\t * (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.IBinding#isRecovered()\r\n\t */\r\n","PointcutDesignatorHandlerBasedPointcut":"getPointcutKind fastMatch couldMatchKinds matchInternal resolveBindings concretize1 findResidueInternal parameterizeWith write accept getPointcutKind fastMatch couldMatchKinds matchInternal resolveBindings concretize1 findResidueInternal parameterizeWith write accept matcher world matcher world org.aspectj.weaver.internal.tools.PointcutDesignatorHandlerBasedPointcut org.aspectj.weaver.internal.tools.PointcutDesignatorHandlerBasedPointcut  could be more efficient here!\r\n  no-op?\r\n  could be more efficient here!\r\n  no-op?\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#getPointcutKind()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#fastMatch(org.aspectj.weaver.patterns.FastMatchInfo)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#couldMatchKinds()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#matchInternal(org.aspectj.weaver.Shadow)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#resolveBindings(org.aspectj.weaver.patterns.IScope, org.aspectj.weaver.patterns.Bindings)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#concretize1(org.aspectj.weaver.ResolvedType, org.aspectj.weaver.ResolvedType, org.aspectj.weaver.IntMap)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#findResidueInternal(org.aspectj.weaver.Shadow, org.aspectj.weaver.patterns.ExposedState)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#parameterizeWith(java.util.Map)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.PatternNode#write(java.io.DataOutputStream)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.PatternNode#accept(org.aspectj.weaver.patterns.PatternNodeVisitor, java.lang.Object)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#getPointcutKind()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#fastMatch(org.aspectj.weaver.patterns.FastMatchInfo)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#couldMatchKinds()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#matchInternal(org.aspectj.weaver.Shadow)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#resolveBindings(org.aspectj.weaver.patterns.IScope, org.aspectj.weaver.patterns.Bindings)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#concretize1(org.aspectj.weaver.ResolvedType, org.aspectj.weaver.ResolvedType, org.aspectj.weaver.IntMap)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#findResidueInternal(org.aspectj.weaver.Shadow, org.aspectj.weaver.patterns.ExposedState)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#parameterizeWith(java.util.Map)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.PatternNode#write(java.io.DataOutputStream)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.PatternNode#accept(org.aspectj.weaver.patterns.PatternNodeVisitor, java.lang.Object)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","ITestVisitor":"visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit org.aspectj.weaver.ast.ITestVisitor org.aspectj.weaver.ast.ITestVisitor /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","AnnotationTypePattern":"matches matches fastMatches remapAdviceFormals resolve parameterizeWith isAny resolveBindings read setForParameterAnnotationMatch isForParameterAnnotationMatch matches matches write resolve toString accept parameterizeWith matches matches fastMatches remapAdviceFormals resolve parameterizeWith isAny resolveBindings read setForParameterAnnotationMatch isForParameterAnnotationMatch matches matches write resolve toString accept parameterizeWith ANY ELLIPSIS NONE isForParameterAnnotationMatch EXACT BINDING NOT OR AND ELLIPSIS_KEY ANY_KEY WILD EXACTFIELD BINDINGFIELD ANY ELLIPSIS NONE isForParameterAnnotationMatch EXACT BINDING NOT OR AND ELLIPSIS_KEY ANY_KEY WILD EXACTFIELD BINDINGFIELD org.aspectj.weaver.patterns.AnnotationTypePattern org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern org.aspectj.weaver.patterns.AnnotationTypePattern org.aspectj.weaver.patterns.EllipsisAnnotationTypePattern /*name -> ResolvedType*/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /*name -> ResolvedType*/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","RecoveredVariableBinding":"getConstantValue getDeclaringClass getDeclaringMethod getName getType getVariableDeclaration getVariableId isEnumConstant isField isParameter getAnnotations getJavaElement getKey getKind getModifiers isDeprecated isEqualTo isRecovered isSynthetic variableDeclaration resolver org.aspectj.org.eclipse.jdt.core.dom.RecoveredVariableBinding  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","UserLibraryManager":"getUserLibrary getUserLibraryNames initialize preferenceChange removeUserLibrary setUserLibrary CP_USERLIBRARY_PREFERENCES_PREFIX userLibraries org.aspectj.org.eclipse.jdt.internal.core.UserLibraryManager  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$   find affected projects\r\n  decode user library\r\n  update user libraries map\r\n  update affected projects\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  sends out a PreferenceChangeEvent (see preferenceChange(...))\r\n  $NON-NLS-1$\r\n /*\r\n\t * Gets the library for a given name or <code>null</code> if no such library exists.\r\n\t */\r\n /*\r\n\t * Returns the names of all defined user libraries. The corresponding classpath container path\r\n\t * is the name appended to the CONTAINER_ID.  \r\n\t */\r\n","AjTypeDeclaration":"clone0 internalGetSetBooleanProperty propertyDescriptors isAspect setAspect getPointcuts getSuperInterfaceNames getTypeParameters ASPECT_PROPERTY ajPROPERTY_DESCRIPTORS_2_0 ajPROPERTY_DESCRIPTORS_3_0 isAspect org.aspectj.org.eclipse.jdt.core.dom.AjTypeDeclaration  $NON-NLS-1$\r\n  Need to fix up the property lists created during the super's static initializer\r\n  Need to fix up the property lists created during the super's static initializer\r\n  allow default implementation to flag the error\r\n  ajh02: method added, currently returning none :-  ajh02: 0 bodyDeclarations :- /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","Unknown":"accept dump getBytes getName setBytes toString copy accept dump getBytes getName setBytes toString copy bytes name bytes name org.aspectj.apache.bcel.classfile.Unknown org.aspectj.apache.bcel.classfile.Unknown","LineNumberTag":"getLineNumber toString equals hashCode getLineNumber toString equals hashCode lineNumber lineNumber org.aspectj.apache.bcel.generic.LineNumberTag org.aspectj.apache.bcel.generic.LineNumberTag /* *******************************************************************\r\n * Copyright (c) 2002 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC         initial implementation \r\n *   Andy Clement   pushed down into bcel module\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC         initial implementation \r\n *   Andy Clement   pushed down into bcel module\r\n * ******************************************************************/\r\n","AjcMemberMaker":"ajcPreClinitMethod ajcPostClinitMethod noAspectBoundExceptionInit noAspectBoundExceptionInit2 noAspectBoundExceptionInitWithCause perCflowPush perCflowField perSingletonField initFailureCauseField perObjectField perTypeWithinField perTypeWithinWithinTypeField isSerializableAspect perObjectBind perTypeWithinGetInstance perTypeWithinGetWithinTypeNameMethod perTypeWithinCreateAspectInstance perObjectInterfaceType perObjectInterfaceGet perObjectInterfaceSet perTypeWithinLocalAspectOf perSingletonAspectOfMethod perSingletonHasAspectMethod perCflowAspectOfMethod perCflowHasAspectMethod perObjectAspectOfMethod perObjectHasAspectMethod perTypeWithinAspectOfMethod perTypeWithinHasAspectMethod privilegedAccessMethodForMethod privilegedAccessMethodForFieldGet privilegedAccessMethodForFieldSet superAccessMethod inlineAccessMethodForMethod inlineAccessMethodForFieldGet inlineAccessMethodForFieldSet cflowStackPeekInstance cflowStackPushInstance cflowStackIsValid cflowStackInit aroundClosurePreInitializationField aroundClosurePreInitializationGetter preIntroducedConstructor postIntroducedConstructor itdAtDeclareParentsField interConstructor interFieldInitializer makePublicNonFinal interFieldSetDispatcher interFieldGetDispatcher interFieldClassField interFieldInterfaceField interFieldInterfaceSetter interFieldInterfaceGetter interMethod bridgerToInterMethod interMethodDispatcher interMethodBody addCookieTo toObjectConversionMethod interfaceConstructor ajcPreClinitMethod ajcPostClinitMethod noAspectBoundExceptionInit noAspectBoundExceptionInit2 noAspectBoundExceptionInitWithCause perCflowPush perCflowField perSingletonField initFailureCauseField perObjectField perTypeWithinField perTypeWithinWithinTypeField isSerializableAspect perObjectBind perTypeWithinGetInstance perTypeWithinGetWithinTypeNameMethod perTypeWithinCreateAspectInstance perObjectInterfaceType perObjectInterfaceGet perObjectInterfaceSet perTypeWithinLocalAspectOf perSingletonAspectOfMethod perSingletonHasAspectMethod perCflowAspectOfMethod perCflowHasAspectMethod perObjectAspectOfMethod perObjectHasAspectMethod perTypeWithinAspectOfMethod perTypeWithinHasAspectMethod privilegedAccessMethodForMethod privilegedAccessMethodForFieldGet privilegedAccessMethodForFieldSet superAccessMethod inlineAccessMethodForMethod inlineAccessMethodForFieldGet inlineAccessMethodForFieldSet cflowStackPeekInstance cflowStackPushInstance cflowStackIsValid cflowStackInit aroundClosurePreInitializationField aroundClosurePreInitializationGetter preIntroducedConstructor postIntroducedConstructor itdAtDeclareParentsField interConstructor interFieldInitializer makePublicNonFinal interFieldSetDispatcher interFieldGetDispatcher interFieldClassField interFieldInterfaceField interFieldInterfaceSetter interFieldInterfaceGetter interMethod bridgerToInterMethod interMethodDispatcher interMethodBody addCookieTo toObjectConversionMethod interfaceConstructor PUBLIC_STATIC_FINAL PRIVATE_STATIC PUBLIC_STATIC VISIBILITY CFLOW_STACK_TYPE AROUND_CLOSURE_TYPE CONVERSIONS_TYPE NO_ASPECT_BOUND_EXCEPTION ASPECT_ANNOTATION BEFORE_ANNOTATION AROUND_ANNOTATION AFTERRETURNING_ANNOTATION AFTERTHROWING_ANNOTATION AFTER_ANNOTATION POINTCUT_ANNOTATION DECLAREERROR_ANNOTATION DECLAREWARNING_ANNOTATION DECLAREPRECEDENCE_ANNOTATION DECLAREPARENTS_ANNOTATION TYPEX_JOINPOINT TYPEX_PROCEEDINGJOINPOINT TYPEX_STATICJOINPOINT TYPEX_ENCLOSINGSTATICJOINPOINT PUBLIC_STATIC_FINAL PRIVATE_STATIC PUBLIC_STATIC VISIBILITY CFLOW_STACK_TYPE AROUND_CLOSURE_TYPE CONVERSIONS_TYPE NO_ASPECT_BOUND_EXCEPTION ASPECT_ANNOTATION BEFORE_ANNOTATION AROUND_ANNOTATION AFTERRETURNING_ANNOTATION AFTERTHROWING_ANNOTATION AFTER_ANNOTATION POINTCUT_ANNOTATION DECLAREERROR_ANNOTATION DECLAREWARNING_ANNOTATION DECLAREPRECEDENCE_ANNOTATION DECLAREPARENTS_ANNOTATION TYPEX_JOINPOINT TYPEX_PROCEEDINGJOINPOINT TYPEX_STATICJOINPOINT TYPEX_ENCLOSINGSTATICJOINPOINT org.aspectj.weaver.AjcMemberMaker org.aspectj.weaver.AjcMemberMaker  PTWIMPL ResolvedMember for aspect instance field, declared in matched type\r\n  (holds typename for which aspect instance exists)\r\n  return value\r\n  return value\r\n  return value\r\n  return value\r\n  return value\r\n  private static a.X ajc$getInstance(java.lang.Class)\r\n  PTWIMPL ResolvedMember for getInstance() method, declared in aspect\r\n  return value\r\n  public String getWithinTypeName()\r\n  PTWIMPL ResolvedMember for getWithinTypeName() method\r\n  return value\r\n  return value\r\n  return value\r\n  return value\r\n  return value\r\n  public static a.X ajc$createAspectInstance(java.lang.String)\r\n  perTypeWithinInterfaceType(aspectType),\r\n  perTypeWithinInterfaceType(aspectType),\r\n  perTypeWithinInterfaceType(aspectType),\r\n  PTWIMPL ResolvedMember for localAspectOf() method, declared in matched type\r\n  PTWIMPL ResolvedMember for aspectOf(), declared in aspect\r\n  PTWIMPL ResolvedMember for hasAspect(), declared in aspect\r\n  Modifier.PUBLIC | (field.isStatic()\r\n  Modifier.PUBLIC | (field.isStatic()\r\n  Modifier.PUBLIC | (field.isStatic()\r\n  ? Modifier.STATIC : 0),\r\n  Modifier.PUBLIC | (field.isStatic()\r\n  Modifier.PUBLIC | (field.isStatic()\r\n  Modifier.PUBLIC | (field.isStatic()\r\n  Modifier.PUBLIC | (field.isStatic()\r\n  ? Modifier.STATIC : 0),\r\n  Modifier.PUBLIC | (field.isStatic()\r\n  ??? can eclipse handle a transform this weird without putting synthetics into the mix\r\n  ??? what about privileged and super access\r\n  ???Modifier.PUBLIC | (method.isStatic() ? Modifier.STATIC : 0),\r\n  Modifier.PUBLIC | (field.isStatic() ?\r\n  Modifier.PUBLIC | (field.isStatic() ?\r\n  Modifier.PUBLIC | (field.isStatic() ?\r\n  Modifier.STATIC : 0),\r\n  Modifier.PUBLIC | (field.isStatic() ?\r\n  Modifier.PUBLIC | (field.isStatic() ?\r\n  Modifier.PUBLIC | (field.isStatic() ?\r\n  Modifier.PUBLIC | (field.isStatic() ?\r\n  Modifier.STATIC : 0),\r\n  Modifier.PUBLIC | (field.isStatic() ?\r\n  {\r\n  System.out.println(\"ret: \" + ret + \" mods: \" + Modifier.toString(modifiers));\r\n  AMC next two lines should not be needed when sig for generic type is changed\r\n  -- common types we use. Note: Java 5 dependand types are refered to as String\r\n  PTWIMPL ResolvedMember for aspect instance field, declared in matched type\r\n  (holds typename for which aspect instance exists)\r\n  return value\r\n  return value\r\n  return value\r\n  return value\r\n  return value\r\n  private static a.X ajc$getInstance(java.lang.Class)\r\n  PTWIMPL ResolvedMember for getInstance() method, declared in aspect\r\n  return value\r\n  public String getWithinTypeName()\r\n  PTWIMPL ResolvedMember for getWithinTypeName() method\r\n  return value\r\n  return value\r\n  return value\r\n  return value\r\n  return value\r\n  public static a.X ajc$createAspectInstance(java.lang.String)\r\n  perTypeWithinInterfaceType(aspectType),\r\n  perTypeWithinInterfaceType(aspectType),\r\n  perTypeWithinInterfaceType(aspectType),\r\n  PTWIMPL ResolvedMember for localAspectOf() method, declared in matched type\r\n  PTWIMPL ResolvedMember for aspectOf(), declared in aspect\r\n  PTWIMPL ResolvedMember for hasAspect(), declared in aspect\r\n  Modifier.PUBLIC | (field.isStatic()\r\n  Modifier.PUBLIC | (field.isStatic()\r\n  Modifier.PUBLIC | (field.isStatic()\r\n  ? Modifier.STATIC : 0),\r\n  Modifier.PUBLIC | (field.isStatic()\r\n  Modifier.PUBLIC | (field.isStatic()\r\n  Modifier.PUBLIC | (field.isStatic()\r\n  Modifier.PUBLIC | (field.isStatic()\r\n  ? Modifier.STATIC : 0),\r\n  Modifier.PUBLIC | (field.isStatic()\r\n  ??? can eclipse handle a transform this weird without putting synthetics into the mix\r\n  ??? what about privileged and super access\r\n  ???Modifier.PUBLIC | (method.isStatic() ? Modifier.STATIC : 0),\r\n  Modifier.PUBLIC | (field.isStatic() ?\r\n  Modifier.PUBLIC | (field.isStatic() ?\r\n  Modifier.PUBLIC | (field.isStatic() ?\r\n  Modifier.STATIC : 0),\r\n  Modifier.PUBLIC | (field.isStatic() ?\r\n  Modifier.PUBLIC | (field.isStatic() ?\r\n  Modifier.PUBLIC | (field.isStatic() ?\r\n  Modifier.PUBLIC | (field.isStatic() ?\r\n  Modifier.STATIC : 0),\r\n  Modifier.PUBLIC | (field.isStatic() ?\r\n  {\r\n  System.out.println(\"ret: \" + ret + \" mods: \" + Modifier.toString(modifiers));\r\n  AMC next two lines should not be needed when sig for generic type is changed\r\n  -- common types we use. Note: Java 5 dependand types are refered to as String\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","AjMethodDeclaration":"addAttribute generateInfoAttributes generateInfoAttributes addDeclarationStartLineAttribute attributes org.aspectj.ajdt.internal.compiler.ast.AjMethodDeclaration  used by @AspectJ visitor to add pointcut attribute to @Advice\r\n  add extra attributes into list then call 2-arg version of generateInfoAttributes...\r\n","ICompilationUnit":"becomeWorkingCopy becomeWorkingCopy commitWorkingCopy createImport createImport createPackageDeclaration createType discardWorkingCopy findElements findWorkingCopy getAllTypes getImport getImportContainer getImports getPrimary getOwner getPackageDeclaration getPackageDeclarations getType getTypes getWorkingCopy getWorkingCopy hasResourceChanged isWorkingCopy reconcile reconcile reconcile restore getContents getMainTypeName getPackageName NO_AST FORCE_PROBLEM_DETECTION ENABLE_STATEMENTS_RECOVERY ENABLE_BINDINGS_RECOVERY org.aspectj.org.eclipse.jdt.core.ICompilationUnit org.aspectj.org.eclipse.jdt.internal.compiler.env.ICompilationUnit","ConstructorSignature":"getConstructor getConstructor getConstructor org.aspectj.lang.reflect.ConstructorSignature org.aspectj.lang.reflect.ConstructorSignature org.aspectj.lang.reflect.ConstructorSignature /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","AdditionalTypeCollection":"definedTypeNames org.aspectj.org.eclipse.jdt.internal.core.builder.AdditionalTypeCollection  do not bother interning member type names (ie. 'A$M')\r\n","PerObjectInterfaceTypeMunger":"equals hashCode getTestTypePattern write getInterfaceType getTestPointcut matches isLateMunger equals hashCode getTestTypePattern write getInterfaceType getTestPointcut matches isLateMunger interfaceType testPointcut lazyTestTypePattern hashCode interfaceType testPointcut lazyTestTypePattern hashCode org.aspectj.weaver.PerObjectInterfaceTypeMunger org.aspectj.weaver.PerObjectInterfaceTypeMunger  reset hashCode so that its recalculated with the new lazyTestTypePattern\r\n  reset hashCode so that its recalculated with the new lazyTestTypePattern\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved.\r\n * This program and the accompanying materials are made available\r\n * under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *     PARC                 initial implementation\r\n *     Alexandre Vasseur    rearchitected for #75442 finer grained matching\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved.\r\n * This program and the accompanying materials are made available\r\n * under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *     PARC                 initial implementation\r\n *     Alexandre Vasseur    rearchitected for #75442 finer grained matching\r\n * ******************************************************************/\r\n","Ajc2":"hasExcludes hasIncludes setThreads getThreads setNocomments getNocomments setNosymbols getNosymbols setPreprocess getPreprocess setWorkingdir getWorkingdir setArgfiles createArgfile getArgfiles setFile getFile toString createInclude createExclude setIncludes setExcludes getAdapterClass execute executeAfterPrepare prepare useDefaultSrcdir scanDir expandArgfile ADAPTER_CLASS threads nocomments nosymbols preprocess workingdir argfiles haveExcludes haveIncludes file org.aspectj.tools.ant.taskdefs.Ajc2  Save the old build.compiler property\r\n  If oldBuildCompiler is null try to resolve it\r\n  Set the new adapter\r\n  Reset to the old compiler\r\n  If we caught an exception executing throw it\r\n  Add the files listed in the argfiles to the includes\r\n  Otherwise we want to add all .java files to the compileList\r\n  If we do this, we need to re-read files from the directory scanner\r\n  Add the new included files\r\n  This is the same behavior found in Javac\r\n  All paths are relative to the parent\r\n  Sanity check\r\n  Read the file\r\n  Skip blank lines\r\n  Allow '#' and '  Source file\r\n  Another argfile\r\n  If there are stars we'll try to resolve the file here\r\n  Argument\r\n /* *******************************************************************\r\n * Copyright (c) 2000-2001 Xerox Corporation. \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","ResolvedBinaryField":"getKey isResolved toStringInfo unresolved uniqueKey org.aspectj.org.eclipse.jdt.internal.core.ResolvedBinaryField  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n\t * See class comments.\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.core.BinaryField#getKey()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.IField#isResolved()\r\n\t */\r\n","ClasspathContainerInitializer":"initialize canUpdateClasspathContainer requestClasspathContainerUpdate getDescription getFailureContainer getComparisonID getAccessRulesStatus getAttributeStatus getSourceAttachmentStatus ATTRIBUTE_NOT_SUPPORTED ATTRIBUTE_READ_ONLY org.aspectj.org.eclipse.jdt.core.ClasspathContainerInitializer  By default, classpath container initializers do not accept updating containers\r\n  By default, a container path is the only available description\r\n  but this may be refined by other container initializer implementations.\r\n","Parser":"createProceed createAspect setPrivileged setPerClauseFrom setDominatesPatternFrom createPseudoTokensFrom createMethodDeclaration createConstructorDeclaration createPointcutDeclaration createAroundAdviceDeclaration createAfterAdviceDeclaration createBeforeAdviceDeclaration createPointcutDesignator setPointcutDesignatorOnAdvice setPointcutDesignatorOnPointcut setExtraArgument isAfterAdvice setAfterThrowingAdviceKind setAfterReturningAdviceKind createDeclareDeclaration createDeclareAnnotationDeclaration createInterTypeFieldDeclaration createInterTypeMethodDeclaration createInterTypeConstructorDeclaration setSelector setDeclaredModifiers setInitialization setOnType createPseudoToken createIfPseudoToken setLiteralKind shouldTryToRecover initialize initialize initializeScanner println printStack printStack printStack printStack display createMethodDeclaration createConstructorDeclaration consumeMethodInvocationName consumeToken consumeAspectDeclaration consumeAspectHeader consumeAspectHeaderName consumeAspectHeaderNameWithTypeParameters eatIdentifier consumeAspectHeaderRest consumePointcutDeclaration getCurrentTokenStart consumeEmptyPointcutDeclaration consumePointcutHeader consumeAroundDeclaration consumeAroundHeader consumeAroundHeaderName consumePointcutDesignatorOnAdvice consumePointcutDesignatorOnDeclaration consumeBasicAdviceDeclaration consumeBasicAdviceHeader consumeBasicAdviceHeaderName consumeExtraParameterWithFormal consumeExtraParameterNoFormal consumeClassBodyDeclarationInAspect consumeDeclareDeclaration consumeDeclareAnnotation consumeDeclareAnnotationHeader consumeDeclareHeader consumeInterTypeFieldHeader consumeExitITDVariableWithoutInitializer consumeExitITDVariableWithInitializer consumeInterTypeFieldDeclaration consumeInterTypeMethodDeclaration consumeInterTypeMethodHeader consumeInterTypeConstructorDeclaration consumeInterTypeConstructorHeader consumeInterTypeMethodHeaderName consumeInterTypeConstructorHeaderName consumePseudoToken consumePseudoToken consumePseudoTokenIdentifier consumePseudoTokenIf consumePseudoTokenLiteral consumePseudoTokenModifier consumePseudoTokenPrimitiveType consumePseudoTokens consumeRule popPointcutDesignator popPseudoTokens swapAstStack consumeInterTypeFieldHeaderIllegallyAttemptingToUseATypePattern consumeInterTypeConstructorHeaderNameIllegallyUsingTypePattern consumeInterTypeMethodHeaderNameIllegallyUsingTypePattern consumeAroundHeaderNameMissingReturnType consumeBadHeader consumeSimpleAssertStatement convertTypeParametersToSingleTypeReferences shouldTryToRecover pushOnAspectIntStack ASPECTJ_DECLARATION_FACTORY declarationFactory aspectIntPtr aspectIntStack AJ_DEBUG org.aspectj.org.eclipse.jdt.internal.compiler.parser.Parser  positions , dimensions , .... (int stacks)\r\n  *************New display debugging method\r\n  ************** Overriding behavior for standard Java rules\r\n  pseudo keyword\r\n    pseudo keyword\r\n  pseudo keyword\r\n  pseudo keyword\r\n  pseudo keyword\r\n  pseudo keyword\r\n  pseudo keyword\r\n  AspectDeclaration ::= AspectHeader AspectBody\r\n  ************New AspectJ rules\r\n  AspectHeader ::= AspectHeaderName ClassHeaderExtendsopt ClassHeaderImplementsopt AspectHeaderRest\r\n  (isPrivileged == true) -> AspectHeaderName ::= Modifiersopt 'privileged' Modifiersopt 'aspect' 'Identifier'\r\n  Record that the block has a declaration for local types\r\n  highlight the name of the type\r\n  it is only used for the ClassLiteralAccess positions.\r\n  remove the end position of the class token\r\n  pop the aspect pseudo-token\r\n  eat the privileged\r\n  int start = (int) (pos >>> 32);\r\n  handle modifiers, only without privileged for now\r\n  consume annotations\r\n  will be updated when reading super-interfaces\r\n  recovery\r\n  Grab the javadoc\r\n  consume type parameters\r\n  is recovering\r\n  AspectHeaderRest ::= AspectHeaderRestStart PseudoTokens\r\n  AspectJ extension - accessor method for the currentTokenStart\r\n  AspectJ extension - set up some positions, required by AST support\r\n  the name\r\n  int sourceEnd = (int) pos;\r\n  Grab the javadoc\r\n  pop the 'pointcut' keyword\r\n  modifiers\r\n  consume annotations\r\n  AroundDeclaration ::= AroundHeader MethodBody\r\n  skip the name of the advice\r\n  but put in a placeholder name\r\n  modifiers\r\n  consume annotations\r\n  Grab the javadoc\r\n  BasicAdviceDeclaration ::= BasicAdviceHeader MethodBody\r\n  BasicAdviceHeader ::= BasicAdviceHeaderName MethodHeaderParameters ExtraParamopt MethodHeaderThrowsClauseopt ':' PseudoTokens\r\n  skip the name of the advice\r\n  but give a placeholder selector name\r\n  modifiers\r\n  consume annotations\r\n  Grab the javadoc\r\n  println(\"parsed declare: \" + declare);\r\n  there should only ever be one for us...\r\n  name\r\n  declare\r\n  name\r\n  declare\r\n  int extendedDimension = this.intStack[this.intPtr--];    Grab the javadoc\r\n  consume annotations\r\n  source end position of the initialization expression\r\n  InterTypeMethodHeaderName ::= Modifiersopt Type OnType '.' JavaIdentifier '('\r\n  identifier\r\n  onType\r\n  type\r\n  consume method type parameters\r\n  modifiers\r\n  highlight starts at selector start\r\n  Grab the javadoc\r\n  consume annotations\r\n  || md.modifiers != 0\r\n  recovery\r\n  InterTypeConstructorHeaderName ::= Modifiersopt Name '.' 'new' '('\r\n  onType\r\n  pop new info\r\n  getTypeReference(intStack[intPtr--]);\r\n  consume type parameters\r\n  modifiers\r\n  consume annotations\r\n  md.sourceStart = (int) (selectorSource >>> 32);\r\n  lastCheckPoint = md.bodyStart;\r\n  == scanner.getLineNumber(md.sourceStart))\r\n  recovery\r\n  this.display();\r\n  int modifier = modifiers;\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  set to true to consume a method with a body\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  set to false to consume a method without body\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  set to true to consume a method with a body\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  set to false to consume a method without body\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  set to true to consume a method with a body\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  set to true to consume a method with a body\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  set to false to consume a method without body\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  This method is part of an automatic generation : do NOT edit-modify\r\n  arguments\r\n  reset listLength after having read all parameters\r\n  make the best of what we did get\r\n  '+.'\r\n  '+.'\r\n  '+.'\r\n  make the best of what we did get\r\n  '+.'\r\n  '+.'\r\n  '+.'\r\n  make the best of what we did get\r\n  '+.'\r\n  '+.'\r\n  '+.'\r\n  we read... modifiersopt QualifiedName LPAREN FormalParameterListopt RPAREN\r\n  don't try to recover if we're parsing AspectJ constructs\r\n  AspectJ Extension - this whole class is an AspectJ extension to the parser\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.TheOriginalJDTParserClass#initialize()\r\n\t */\r\n /*comment*/\r\n /*whitespace*/\r\n /*nls*/\r\n /*sourceLevel*/\r\n /*taskTags*/\r\n /*taskPriorities*/\r\n /* *******************************************************************\r\n * Copyright (c) 2002,2003 Palo Alto Research Center, Incorporated (PARC).\r\n *               2004, contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Common Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/cpl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation\r\n *     Adrian Colyer refactored for use in org.aspectj.org.eclipse.jdt.core package \r\n * ******************************************************************/\r\n","AnnotationElementValueGen":"dump stringifyValue getElementValue getAnnotation dump stringifyValue getElementValue getAnnotation a a org.aspectj.apache.bcel.classfile.annotation.AnnotationElementValueGen org.aspectj.apache.bcel.classfile.annotation.AnnotationElementValueGen  For annotation element values, this is the annotation\r\n  u1 type of value (ANNOTATION == '@')\r\n  For annotation element values, this is the annotation\r\n  u1 type of value (ANNOTATION == '@')\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement -     initial implementation {date}\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement -     initial implementation {date}\r\n * ******************************************************************/\r\n","ResolvedBinaryType":"getFullyQualifiedParameterizedName getKey isResolved toStringInfo unresolved uniqueKey org.aspectj.org.eclipse.jdt.internal.core.ResolvedBinaryType  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n\t * See class comments.\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.core.BinaryType#getKey()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.core.BinaryType#isResolved()\r\n\t */\r\n","JoinPointSignatureIterator":"reset hasNext next remove addSignaturesUpToFirstDefiningMember accumulateTypesInBetween shouldWalkUpHierarchy findSignaturesFromSupertypes isVisibleTo warnOnMissingType reset hasNext next remove addSignaturesUpToFirstDefiningMember accumulateTypesInBetween shouldWalkUpHierarchy findSignaturesFromSupertypes isVisibleTo warnOnMissingType signaturesOfMember firstDefiningMember firstDefiningType world discoveredSignatures additionalSignatures discoveredSignaturesIterator superTypeIterator visitedSuperTypes yetToBeProcessedSuperMembers iteratingOverDiscoveredSignatures couldBeFurtherAsYetUndiscoveredSignatures member type signaturesOfMember firstDefiningMember firstDefiningType world discoveredSignatures additionalSignatures discoveredSignaturesIterator superTypeIterator visitedSuperTypes yetToBeProcessedSuperMembers iteratingOverDiscoveredSignatures couldBeFurtherAsYetUndiscoveredSignatures member type org.aspectj.weaver.JoinPointSignatureIterator org.aspectj.weaver.JoinPointSignatureIterator  new ArrayList();\r\n  first defining type\r\n  Aha, this must be the array constructor call join point - a 'special'...\r\n  focus on one problem at a time...\r\n  we haven't looked in this type yet\r\n  issue a warning, stop looking for join point signatures in this line\r\n  declaring type can be unresolved if the member can from an ITD...\r\n  for next time we are reset\r\n  for this time\r\n  for next time we are reset\r\n  for this time\r\n  if this was a parameterized type, look in the generic type that backs it too\r\n  which it should be...\r\n  new ArrayList();\r\n  first defining type\r\n  Aha, this must be the array constructor call join point - a 'special'...\r\n  focus on one problem at a time...\r\n  we haven't looked in this type yet\r\n  issue a warning, stop looking for join point signatures in this line\r\n  declaring type can be unresolved if the member can from an ITD...\r\n  for next time we are reset\r\n  for this time\r\n  for next time we are reset\r\n  for this time\r\n  if this was a parameterized type, look in the generic type that backs it too\r\n  which it should be...\r\n /*JoinPointSignature*/\r\n /*SearchPair*/\r\n /* (non-Javadoc)\r\n\t * @see java.util.Iterator#hasNext()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.util.Iterator#next()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.util.Iterator#remove()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /*JoinPointSignature*/\r\n /*SearchPair*/\r\n /* (non-Javadoc)\r\n\t * @see java.util.Iterator#hasNext()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.util.Iterator#next()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.util.Iterator#remove()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","RecordedParsingInformation":"updateRecordedParsingInformation problems problemsCount lineEnds commentPositions org.aspectj.org.eclipse.jdt.internal.core.util.RecordedParsingInformation","MatchingNodeSet":"addMatch addPossibleMatch addTrustedMatch addTrustedMatch hasPossibleNodes matchingNodes removePossibleMatch removeTrustedMatch toString matchingNodes matchingNodesKeys EXACT_MATCH POTENTIAL_MATCH ERASURE_MATCH mustResolve possibleMatchingNodesSet possibleMatchingNodesKeys org.aspectj.org.eclipse.jdt.internal.core.search.matching.MatchingNodeSet  node -> accuracy\r\n  sourceRange -> node\r\n  see http:  add node to set\r\n  see http:  map node to its accuracy level\r\n  sort nodes by source starts\r\n  TODO (jerome) should show both tables\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","RuntimeInvisibleParameterAnnotations":"accept copy accept copy org.aspectj.apache.bcel.classfile.annotation.RuntimeInvisibleParameterAnnotations org.aspectj.apache.bcel.classfile.annotation.RuntimeInvisibleParameterAnnotations","RecoveredUnit":"add add add add parseTree sourceEnd toString updatedCompilationUnitDeclaration updateParseTree updateSourceEndIfNecessary unitDeclaration imports importCount types typeCount org.aspectj.org.eclipse.jdt.internal.compiler.parser.RecoveredUnit  reset position\r\n  reset position\r\n  the } of the last type can be considered as the end of an initializer\r\n  ignore\r\n  reset position\r\n  reset position\r\n  ignore\r\n  add it to the last type\r\n  reopen type\r\n  reopen type\r\n  reopen type\r\n  expect one closing brace\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  may need to update the declarationSourceEnd of the last type\r\n  filter out local types (12454)\r\n /* attach it to last type - if any */\r\n /*\r\n *\tRecord a method declaration: should be attached to last type\r\n */\r\n /* attach it to last type - if any */\r\n /*\r\n *\tRecord a field declaration: should be attached to last type\r\n */\r\n /* if import not finished, then import becomes current */\r\n /* if type not finished, then type becomes current */\r\n /* \r\n * Answer the associated parsed structure\r\n */\r\n /*\r\n * Answer the very source end of the corresponding parse node\r\n */\r\n /* update imports */\r\n /* update types */\r\n /*\r\n * Update the sourceEnd of the corresponding parse node\r\n */\r\n","HandleProviderDelimiter":"getDelimiter getDelimiter getDelimiter getDelimiter JAVAPROJECT PACKAGEFRAGMENT FIELD METHOD INITIALIZER COMPILATIONUNIT CLASSFILE TYPE IMPORTDECLARATION COUNT ESCAPE PACKAGEFRAGMENTROOT PACKAGEDECLARATION LOCALVARIABLE TYPE_PARAMETER ASPECT_CU ADVICE ASPECT_TYPE CODEELEMENT ITD DECLARE POINTCUT empty delim JAVAPROJECT PACKAGEFRAGMENT FIELD METHOD INITIALIZER COMPILATIONUNIT CLASSFILE TYPE IMPORTDECLARATION COUNT ESCAPE PACKAGEFRAGMENTROOT PACKAGEDECLARATION LOCALVARIABLE TYPE_PARAMETER ASPECT_CU ADVICE ASPECT_TYPE CODEELEMENT ITD DECLARE POINTCUT empty delim org.aspectj.asm.internal.HandleProviderDelimiter org.aspectj.asm.internal.HandleProviderDelimiter  taken from JavaElement\r\n  these below are not currently used because no iprogramelement.kind equivalent\r\n  AspectJ specific ones\r\n  taken from JavaElement\r\n  these below are not currently used because no iprogramelement.kind equivalent\r\n  AspectJ specific ones\r\n","MemberValuePair":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getName resolveMemberValuePairBinding setName getValue setValue memSize treeSize print resolveTypeExpecting traverse NAME_PROPERTY VALUE_PROPERTY PROPERTY_DESCRIPTORS name value name value binding compilerElementPair org.aspectj.org.eclipse.jdt.core.dom.MemberValuePair org.aspectj.org.eclipse.jdt.internal.compiler.ast.MemberValuePair  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  lazy init must be thread-safe for readers\r\n  $NON-NLS-1$\r\n  fault tolerance: keep resolving\r\n  needed in case of generic method invocation\r\n  no need to pursue\r\n  may allow to proceed to find more errors at once\r\n  fault-tolerance\r\n  check annotation type and also reject null literal\r\n  annotation methods can only return base types, String, Class, enum type, annotation types and arrays of these\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode#print(int, java.lang.StringBuffer)\r\n\t */\r\n","JavaSearchScope":"addEnclosingProjectOrJar add add add add encloses indexOf indexOf encloses encloses enclosingProjectsAndJars getPath getAccessRuleSet initialize normalize processDelta packageFragmentRoot rehash toString elements projectPaths projectIndexes containerPaths relativePaths isPkgPath pathRestrictions pathsCount threshold enclosingProjectsAndJars NOT_ENCLOSED org.aspectj.org.eclipse.jdt.internal.core.search.JavaSearchScope  container paths projects\r\n  Indexes of projects in list\r\n  path to the container (e.g.   path relative to the container (e.g. x  in the case of packages, matches must be direct children of the folder\r\n  Source folder are implicitly exported.\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  a workspace sope should be used\r\n  $NON-NLS-1$\r\n  for working copies, get resource container full path\r\n  remember sub-cu (or sub-class file) java elements\r\n  normalize containerPath and relativePath\r\n  store project in separated list to minimize memory footprint\r\n  assumes the threshold is never equal to the size of the table\r\n  internal or external jar (case 3, 4, or 5)\r\n  resource in workspace (case 1 or 2)\r\n  fallback to sequentially looking at all known paths\r\n  use the hash to get faster comparison\r\n  normalize given path as it can come from outside\r\n  or if the given path path is the folder path (see bug 13919 Declaration for package not found if scope is not project)\r\n  external or internal jar\r\n  resource in workspace\r\n  this search scope does not enclose given path\r\n  size represents the expected number of elements\r\n  null to optimize case where no access rules are used\r\n  TODO (jerome) this compares String and IPath !\r\n  resource in workspace (case 1 or 2)\r\n  internal or external jar (case 3, 4, or 5)\r\n  double the number of expected elements\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*not a package*/\r\n /*not a package*/\r\n /*not a package*/\r\n /*not a package*/\r\n /*not a package*/\r\n /*package*/\r\n /*package*/\r\n /*not a package*/\r\n /* \r\n * E.g.\r\n * \r\n * 1. /P/src/pkg/X.java\r\n * 2. /P/src/pkg\r\n * 3. /P/lib.jar|org.aspectj.org.eclipse.jdt/core/IJavaElement.class\r\n * 4. /home/mylib.jar|x/y/z/X.class\r\n * 5. c:\\temp\\mylib.jar|x/y/Y.class\r\n * \r\n * @see IJavaSearchScope#encloses(String)\r\n */\r\n /*\r\n * Returns whether the enclosing path encloses the given path (or is equal to it)\r\n */\r\n /* (non-Javadoc)\r\n * @see IJavaSearchScope#encloses(IJavaElement)\r\n */\r\n /* (non-Javadoc)\r\n * @see IJavaSearchScope#enclosingProjectsAndJars()\r\n */\r\n /*\r\n * Removes trailing slashes from the given path\r\n */\r\n /*\r\n * @see AbstractSearchScope#processDelta(IJavaElementDelta)\r\n */\r\n","SelectionRequestor":"acceptBinaryMethod acceptBinaryMethod acceptType acceptError acceptField acceptLocalField acceptLocalMethod acceptLocalType acceptLocalTypeParameter acceptLocalMethodTypeParameter acceptLocalVariable acceptMethod acceptPackage acceptSourceMethod acceptMethodDeclaration acceptTypeParameter acceptMethodTypeParameter addElement areTypeParametersCompatible findLocalElement getElements resolveType resolveTypeByLocation nameLookup openable elements elementIndex handleFactory org.aspectj.org.eclipse.jdt.internal.core.SelectionRequestor  no range was actually found, but a method was originally given -> default constructor\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  only one method is possible\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  it's a default constructor\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  findLocalElement() cannot find local variable\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  need to add a paramater for constructor in binary type\r\n  fix for 1FWFT6Q\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  no match was actually found, but a method was originally given -> default constructor\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  if no matches, nothing to report\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  if there is only one match, we've got it\r\n  more than one match - must match simple parameter types\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  only one method is possible\r\n  no match was actually found\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  iterate type lookup in each package fragment\r\n  look inside the type in which we are resolving in\r\n  TODO (david) post 3.0 should remove isOpen check, and investigate reusing ICompilationUnit#getElementAt. may need to optimize #getElementAt to remove recursions\r\n  iterate type lookup in each package fragment\r\n  look inside the type in which we are resolving in\r\n /*\r\n\t * The name lookup facility used to resolve packages\r\n\t */\r\n /*\r\n\t * The compilation unit or class file we are resolving in\r\n\t */\r\n /*\r\n\t * The collection of resolved elements.\r\n\t */\r\n /*\r\n * Adds the given element to the list of resolved elements.\r\n */\r\n /*\r\n * findLocalElement() cannot find local variable\r\n */\r\n","QualifiedTypeReference":"copyDims findNextTypeBinding getLastToken getTypeBinding getTypeName printExpression traverse traverse tokens sourcePositions org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference  warning : the new type ref has a null binding\r\n  not found\r\n  cannot select from a type variable\r\n  must connect hierarchy to find inherited member types\r\n","LineNumberGen":"containsTarget updateTarget getLineNumber setInstruction clone getInstruction setSourceLine getSourceLine containsTarget updateTarget getLineNumber setInstruction clone getInstruction setSourceLine getSourceLine ih src_line ih src_line org.aspectj.apache.bcel.generic.LineNumberGen org.aspectj.apache.bcel.generic.LineNumberGen","EnumConstantSignature":"getTypeName getEnumConstantName toString typeName constName org.aspectj.org.eclipse.jdt.internal.compiler.env.EnumConstantSignature","CodeExceptionGen":"getCodeException setStartPC setEndPC setHandlerPC updateTarget containsTarget setCatchType getCatchType getStartPC getEndPC getHandlerPC toString clone getCodeException setStartPC setEndPC setHandlerPC updateTarget containsTarget setCatchType getCatchType getStartPC getEndPC getHandlerPC toString clone start_pc end_pc handler_pc catch_type start_pc end_pc handler_pc catch_type org.aspectj.apache.bcel.generic.CodeExceptionGen org.aspectj.apache.bcel.generic.CodeExceptionGen /* Set start of handler \r\n   * @param start_pc Start of handled region (inclusive)\r\n   */\r\n /* Set end of handler \r\n   * @param end_pc End of handled region (inclusive)\r\n   */\r\n /* Set handler code\r\n   * @param handler_pc Start of handler\r\n   */\r\n /* Set start of handler \r\n   * @param start_pc Start of handled region (inclusive)\r\n   */\r\n /* Set end of handler \r\n   * @param end_pc End of handled region (inclusive)\r\n   */\r\n /* Set handler code\r\n   * @param handler_pc Start of handler\r\n   */\r\n","ClassLiteralAccess":"analyseCode generateCode printExpression resolveType traverse type targetType syntheticField org.aspectj.org.eclipse.jdt.internal.compiler.ast.ClassLiteralAccess  no need to worry about raw type usage\r\n  AspectJ Extension - was .enclosingSourceType()\r\n  see https:  in interface case, no caching occurs, since cannot make a cache field for interface\r\n  $NON-NLS-1$\r\n  Integer.class --> Class<Integer>, perform boxing of base types (int.class --> Class<Integer>)\r\n","HierarchyBuilder":"build buildSupertypes connect getHandle getType lookupBinaryHandle worked createCompilationUnitFromPath createInfoFromClassFile createInfoFromClassFileInJar hierarchy nameLookup hierarchyResolver infoToHandle focusQualifiedName org.aspectj.org.eclipse.jdt.internal.core.hierarchy.HierarchyBuilder  get generic type from focus type\r\n  we cannot create the hierarchy\r\n  a sub or super type of the focus type.\r\n  Add focus if not already in (case of a type with no explicit super type)\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  now do the caching\r\n  record flags\r\n  optimization: remember the handle for next call (case of java.io.Serializable that a lot of classes implement)\r\n  if it's null, it's from outside the region, so do lookup\r\n  case IGenericType.ANNOTATION :\r\n /*\r\n\t * The dot-separated fully qualified name of the focus type, or null of none.\r\n\t */\r\n /*\r\n\t\t * Temporary workaround for 1G2O5WK: ITPJCORE:WINNT - NullPointerException when selecting \"Show in Type Hierarchy\" for a inner class\r\n\t\t */\r\n /* consider secondary types */\r\n /* do NOT wait for indexes */\r\n /*don't check restrictions*/\r\n","TypePatternMatcherImpl":"matches matches pattern world pattern world org.aspectj.weaver.internal.tools.TypePatternMatcherImpl org.aspectj.weaver.internal.tools.TypePatternMatcherImpl /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","SingleVariableDeclaration":"propertyDescriptors internalExtraDimensionsProperty internalInitializerProperty internalNameProperty internalStructuralPropertiesForType internalGetSetIntProperty internalGetSetBooleanProperty internalGetSetChildProperty internalGetChildListProperty getNodeType0 clone0 subtreeMatch0 accept0 modifiers getModifiers setModifiers internalSetModifiers getName setName getType setType isVarargs setVarargs getExtraDimensions setExtraDimensions getInitializer setInitializer memSize treeSize MODIFIERS_PROPERTY MODIFIERS2_PROPERTY NAME_PROPERTY TYPE_PROPERTY VARARGS_PROPERTY EXTRA_DIMENSIONS_PROPERTY INITIALIZER_PROPERTY PROPERTY_DESCRIPTORS_2_0 PROPERTY_DESCRIPTORS_3_0 modifiers modifierFlags variableName type variableArity extraArrayDimensions optionalInitializer org.aspectj.org.eclipse.jdt.core.dom.SingleVariableDeclaration  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  more efficient than just calling unsupportedIn2() to check\r\n  but this would require tracking changes to this.modifiers\r\n  JLS2 behavior - bona fide property\r\n  more efficient than checking getAST().API_LEVEL\r\n  lazy init must be thread-safe for readers\r\n  lazy init must be thread-safe for readers\r\n  more efficient than just calling unsupportedIn2() to check\r\n  more efficient than just calling unsupportedIn2() to check\r\n  must check cycles\r\n  treat Operator as free\r\n /* (omit javadoc for this method)\r\n\t * Method declared on VariableDeclaration.\r\n\t * @since 3.1\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on VariableDeclaration.\r\n\t * @since 3.1\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on VariableDeclaration.\r\n\t * @since 3.1\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /*package*/\r\n /* (omit javadoc for this method)\r\n\t * Method declared on VariableDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on VariableDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on VariableDeclaration.\r\n\t * @since 2.1\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on VariableDeclaration.\r\n\t * @since 2.1\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on VariableDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on VariableDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","ContextToken":"org.aspectj.bridge.context.ContextToken org.aspectj.bridge.context.ContextToken /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","JavadocArraySingleTypeReference":"reportInvalidType reportDeprecatedType traverse traverse org.aspectj.org.eclipse.jdt.internal.compiler.ast.JavadocArraySingleTypeReference /* (non-Javadoc)\r\n\t * Redefine to capture javadoc specific signatures\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode#traverse(org.aspectj.org.eclipse.jdt.internal.compiler.ASTVisitor, org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BlockScope)\r\n\t */\r\n","NamingConventions":"acceptNameWithPrefixAndSuffix acceptNameWithPrefix acceptNameWithSuffix acceptNameWithoutPrefixAndSuffix getResults removePrefixAndSuffix removePrefixAndSuffixForArgumentName removePrefixAndSuffixForArgumentName removePrefixAndSuffixForFieldName removePrefixAndSuffixForFieldName removePrefixAndSuffixForLocalVariableName removePrefixAndSuffixForLocalVariableName suggestArgumentNames suggestArgumentNames suggestFieldNames suggestFieldNames suggestLocalVariableNames suggestLocalVariableNames suggestGetterName suggestGetterName suggestSetterName suggestSetterName suggestAccessorName suggestNewName convertCharsToString convertStringToChars GETTER_BOOL_NAME GETTER_NAME SETTER_NAME SIZE firstPrefixAndFirstSuffixResults firstPrefixAndFirstSuffixResultsCount firstPrefixAndSuffixResults firstPrefixAndSuffixResultsCount prefixAndFirstSuffixResults prefixAndFirstSuffixResultsCount prefixAndSuffixResults prefixAndSuffixResultsCount firstPrefixResults firstPrefixResultsCount prefixResults prefixResultsCount firstSuffixResults firstSuffixResultsCount suffixResults suffixResultsCount otherResults otherResultsCount org.aspectj.org.eclipse.jdt.core.NamingConventions  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  for acceptNameWithPrefixAndSuffix\r\n  for acceptNameWithPrefix\r\n  for acceptNameWithSuffix\r\n  for acceptNameWithoutPrefixAndSuffix\r\n  remove longer prefix\r\n  remove longer suffix\r\n","ASTVisitor":"preVisit postVisit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit acceptProblem endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visitDocTags org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor org.aspectj.org.eclipse.jdt.internal.compiler.ASTVisitor  visit tag elements inside doc comments only if requested\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n  do nothing by default, keep traversing\r\n","ClassFileWorkingCopy":"commitWorkingCopy getBuffer getContents getPath getPrimaryElement getResource openBuffer toStringName classFile org.aspectj.org.eclipse.jdt.internal.core.ClassFileWorkingCopy  create buffer\r\n  Disassemble\r\n  $NON-NLS-1$\r\n  set the buffer source\r\n  add buffer to buffer cache\r\n  listen to buffer changes\r\n","ConstantPool":"getSize getConstant getConstant copy getConstantString constantToString escape constantToString accept getConstantPool dump getConstantUtf8 getConstantString_CONSTANTClass getLength toString lookupInteger lookupUtf8 lookupClass addUtf8 addInteger addArrayClass addClass addClass adjustSize addFieldref lookupFieldref addNameAndType lookupNameAndType addFloat lookupFloat addDouble lookupDouble addLong lookupString addString lookupLong addConstant addMethodref addInterfaceMethodref lookupInterfaceMethodref lookupMethodref getFinalConstantPool initialize dumpBytes literalIndex literalIndex literalIndex literalIndex literalIndex literalIndex literalIndex literalIndex literalIndex literalIndexForType literalIndexForType literalIndexForMethod literalIndexForMethod literalIndexForNameAndType literalIndexForField literalIndexForLdc putInNameAndTypeCacheIfAbsent putInCacheIfAbsent resetForClinit resizePoolContents writeU1 writeU2 reset decodeEntry getConstantPoolCount getEntryKind getUtf8ValueAt getSize getConstant getConstant copy getConstantString constantToString escape constantToString accept getConstantPool dump getConstantUtf8 getConstantString_CONSTANTClass getLength toString lookupInteger lookupUtf8 lookupClass addUtf8 addInteger addArrayClass addClass addClass adjustSize addFieldref lookupFieldref addNameAndType lookupNameAndType addFloat lookupFloat addDouble lookupDouble addLong lookupString addString lookupLong addConstant addMethodref addInterfaceMethodref lookupInterfaceMethodref lookupMethodref getFinalConstantPool pool poolSize utf8Cache methodCache fieldCache DOUBLE_INITIAL_SIZE FLOAT_INITIAL_SIZE INT_INITIAL_SIZE LONG_INITIAL_SIZE UTF8_INITIAL_SIZE STRING_INITIAL_SIZE METHODS_AND_FIELDS_INITIAL_SIZE CLASS_INITIAL_SIZE NAMEANDTYPE_INITIAL_SIZE CONSTANTPOOL_INITIAL_SIZE CONSTANTPOOL_GROW_SIZE doubleCache floatCache intCache longCache UTF8Cache stringCache methodsAndFieldsCache classCache nameAndTypeCacheForFieldsAndMethods poolContent currentIndex currentOffset classFile Append ARRAY_NEWINSTANCE_NAME ARRAY_NEWINSTANCE_SIGNATURE ArrayCopy ArrayCopySignature ArrayJavaLangClassConstantPoolName ArrayJavaLangObjectConstantPoolName booleanBooleanSignature BooleanConstrSignature BOOLEANVALUE_BOOLEAN_METHOD_NAME BOOLEANVALUE_BOOLEAN_METHOD_SIGNATURE byteByteSignature ByteConstrSignature BYTEVALUE_BYTE_METHOD_NAME BYTEVALUE_BYTE_METHOD_SIGNATURE charCharacterSignature CharConstrSignature CHARVALUE_CHARACTER_METHOD_NAME CHARVALUE_CHARACTER_METHOD_SIGNATURE Clinit DefaultConstructorSignature ClinitSignature DesiredAssertionStatus DesiredAssertionStatusSignature DoubleConstrSignature doubleDoubleSignature DOUBLEVALUE_DOUBLE_METHOD_NAME DOUBLEVALUE_DOUBLE_METHOD_SIGNATURE Exit ExitIntSignature FloatConstrSignature floatFloatSignature FLOATVALUE_FLOAT_METHOD_NAME FLOATVALUE_FLOAT_METHOD_SIGNATURE ForName ForNameSignature GET_BOOLEAN_METHOD_NAME GET_BOOLEAN_METHOD_SIGNATURE GET_BYTE_METHOD_NAME GET_BYTE_METHOD_SIGNATURE GET_CHAR_METHOD_NAME GET_CHAR_METHOD_SIGNATURE GET_DOUBLE_METHOD_NAME GET_DOUBLE_METHOD_SIGNATURE GET_FLOAT_METHOD_NAME GET_FLOAT_METHOD_SIGNATURE GET_INT_METHOD_NAME GET_INT_METHOD_SIGNATURE GET_LONG_METHOD_NAME GET_LONG_METHOD_SIGNATURE GET_OBJECT_METHOD_NAME GET_OBJECT_METHOD_SIGNATURE GET_SHORT_METHOD_NAME GET_SHORT_METHOD_SIGNATURE GetClass GetClassSignature GetComponentType GetComponentTypeSignature GetConstructor GetConstructorSignature GETDECLAREDCONSTRUCTOR_NAME GETDECLAREDCONSTRUCTOR_SIGNATURE GETDECLAREDFIELD_NAME GETDECLAREDFIELD_SIGNATURE GETDECLAREDMETHOD_NAME GETDECLAREDMETHOD_SIGNATURE GetMessage GetMessageSignature HasNext HasNextSignature Init IntConstrSignature Intern InternSignature IntIntegerSignature INTVALUE_INTEGER_METHOD_NAME INTVALUE_INTEGER_METHOD_SIGNATURE INVOKE_METHOD_METHOD_NAME INVOKE_METHOD_METHOD_SIGNATURE JAVA_LANG_REFLECT_ACCESSIBLEOBJECT JAVA_LANG_REFLECT_ARRAY JavaIoPrintStreamSignature JavaLangAssertionErrorConstantPoolName JavaLangBooleanConstantPoolName JavaLangByteConstantPoolName JavaLangCharacterConstantPoolName JavaLangClassConstantPoolName JavaLangClassNotFoundExceptionConstantPoolName JavaLangClassSignature JavaLangDoubleConstantPoolName JavaLangEnumConstantPoolName JavaLangErrorConstantPoolName JavaLangExceptionConstantPoolName JavaLangFloatConstantPoolName JavaLangIntegerConstantPoolName JavaLangLongConstantPoolName JavaLangNoClassDefFoundErrorConstantPoolName JavaLangNoSuchFieldErrorConstantPoolName JavaLangObjectConstantPoolName JAVALANGREFLECTACCESSIBLEOBJECT_CONSTANTPOOLNAME JAVALANGREFLECTARRAY_CONSTANTPOOLNAME JavaLangReflectConstructorConstantPoolName JavaLangReflectConstructorNewInstanceSignature JAVALANGREFLECTFIELD_CONSTANTPOOLNAME JAVALANGREFLECTMETHOD_CONSTANTPOOLNAME JavaLangShortConstantPoolName JavaLangStringBufferConstantPoolName JavaLangStringBuilderConstantPoolName JavaLangStringConstantPoolName JavaLangStringSignature JavaLangObjectSignature JavaLangSystemConstantPoolName JavaLangThrowableConstantPoolName JavaLangVoidConstantPoolName JavaUtilIteratorConstantPoolName LongConstrSignature longLongSignature LONGVALUE_LONG_METHOD_NAME LONGVALUE_LONG_METHOD_SIGNATURE NewInstance NewInstanceSignature Next NextSignature ObjectConstrSignature ObjectSignature Ordinal OrdinalSignature Out SET_BOOLEAN_METHOD_NAME SET_BOOLEAN_METHOD_SIGNATURE SET_BYTE_METHOD_NAME SET_BYTE_METHOD_SIGNATURE SET_CHAR_METHOD_NAME SET_CHAR_METHOD_SIGNATURE SET_DOUBLE_METHOD_NAME SET_DOUBLE_METHOD_SIGNATURE SET_FLOAT_METHOD_NAME SET_FLOAT_METHOD_SIGNATURE SET_INT_METHOD_NAME SET_INT_METHOD_SIGNATURE SET_LONG_METHOD_NAME SET_LONG_METHOD_SIGNATURE SET_OBJECT_METHOD_NAME SET_OBJECT_METHOD_SIGNATURE SET_SHORT_METHOD_NAME SET_SHORT_METHOD_SIGNATURE SETACCESSIBLE_NAME SETACCESSIBLE_SIGNATURE ShortConstrSignature shortShortSignature SHORTVALUE_SHORT_METHOD_NAME SHORTVALUE_SHORT_METHOD_SIGNATURE StringBufferAppendBooleanSignature StringBufferAppendCharSignature StringBufferAppendDoubleSignature StringBufferAppendFloatSignature StringBufferAppendIntSignature StringBufferAppendLongSignature StringBufferAppendObjectSignature StringBufferAppendStringSignature StringBuilderAppendBooleanSignature StringBuilderAppendCharSignature StringBuilderAppendDoubleSignature StringBuilderAppendFloatSignature StringBuilderAppendIntSignature StringBuilderAppendLongSignature StringBuilderAppendObjectSignature StringBuilderAppendStringSignature StringConstructorSignature This ToString ToStringSignature TYPE ValueOf ValueOfBooleanSignature ValueOfCharSignature ValueOfDoubleSignature ValueOfFloatSignature ValueOfIntSignature ValueOfLongSignature ValueOfObjectSignature ValueOfStringClassSignature JAVA_LANG_ANNOTATION_DOCUMENTED JAVA_LANG_ANNOTATION_ELEMENTTYPE JAVA_LANG_ANNOTATION_RETENTION JAVA_LANG_ANNOTATION_RETENTIONPOLICY JAVA_LANG_ANNOTATION_TARGET JAVA_LANG_DEPRECATED JAVA_LANG_ANNOTATION_INHERITED constantPoolCount constantPoolOffset classFileBytes pool poolSize utf8Cache methodCache fieldCache org.aspectj.apache.bcel.classfile.ConstantPool org.aspectj.org.eclipse.jdt.internal.compiler.codegen.ConstantPool org.aspectj.org.eclipse.jdt.internal.core.util.ConstantPool org.aspectj.apache.bcel.classfile.ConstantPool  number of entries in the pool (could be < pool.length as the array is resized in 'chunks')\r\n  pool[0] is unused by the compiler and may be used freely by the implementation\r\n  if (c == null) throw new ClassFormatException(\"Constant pool at index \" + index + \" is null.\");\r\n  use the correct size\r\n  OPTIMIZE remove the difference - use the an interface and same index methods for string ref id\r\n  Finally get the string from the constant pool\r\n  Never reached\r\n  TEMPORARY, DONT LIKE PASSING THIS DATA OUT!\r\n  someone about to do something in here!\r\n  check the class\r\n  check the name and type\r\n  not this one\r\n  not this one\r\n  OPTIMIZE indicate it should be cached!\r\n  Never reached\r\n  Never reached\r\n  Already in CP\r\n  OPTIMIZE should put it in the cache now\r\n  check the name and type\r\n  not this one\r\n  check the class\r\n  check the name and type\r\n  not this one\r\n  create it the exact size we need\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  currentOffset is initialized to 0 by default\r\n  The entry doesn't exit yet\r\n  Write the tag first\r\n  enough space to write the length\r\n  add in once the whole byte array\r\n  Write the tag first\r\n  Then the size of the stringName array\r\n  enough space to write the length\r\n  In that case we only need 2 bytes\r\n  0xC0 = 1100 0000\r\n  0x80 = 1000 0000\r\n  we need 3 bytes\r\n  0xE0 = 1110 0000\r\n  0x80 = 1000 0000\r\n  0x80 = 1000 0000\r\n  we only need one byte: ASCII table\r\n  we use savedCurrentOffset to do that\r\n  The entry doesn't exit yet\r\n  Write the tag first\r\n  Then the string index\r\n  the first index into the long table\r\n  If it is null, initialize it, otherwise use it\r\n  a double needs an extra place into the constant pool\r\n  First add the tag\r\n  Then add the 8 bytes representing the double\r\n  Retrieve the index from the cache\r\n  If it is null, initialize it, otherwise use it\r\n  First add the tag\r\n  Then add the 4 bytes representing the float\r\n  Retrieve the index from the cache\r\n  If it is null, initialize it, otherwise use it\r\n  First add the tag\r\n  Then add the 4 bytes representing the int\r\n  the first index into the long table\r\n  If it is null, initialize it, otherwise use it\r\n  long value need an extra place into thwe constant pool\r\n  First add the tag\r\n  Then add the 8 bytes representing the long\r\n  The entry doesn't exit yet\r\n  Write the tag first\r\n  Then the string index\r\n  The entry doesn't exit yet\r\n  Then the name index\r\n  it doesn't exist yet\r\n  First add the tag\r\n  The entry doesn't exit yet\r\n  doesn't exist yet\r\n  First add the tag\r\n  The entry doesn't exit yet\r\n  Write the tag first\r\n  Then the string index\r\n  The entry doesn't exit yet\r\n  Write the tag first\r\n  Then the size of the stringName array\r\n  enough space to write the length\r\n  enough space to write the length\r\n  In that case we only need 2 bytes\r\n  0xC0 = 1100 0000\r\n  0x80 = 1000 0000\r\n  we need 3 bytes\r\n  enough space to write the length\r\n  0xE0 = 1110 0000\r\n  0x80 = 1000 0000\r\n  0x80 = 1000 0000\r\n  we only need one byte: ASCII table\r\n  enough space to write the length\r\n  adding a second entry\r\n  adding a second entry\r\n  number of entries in the pool (could be < pool.length as the array is resized in 'chunks')\r\n  pool[0] is unused by the compiler and may be used freely by the implementation\r\n  if (c == null) throw new ClassFormatException(\"Constant pool at index \" + index + \" is null.\");\r\n  use the correct size\r\n  OPTIMIZE remove the difference - use the an interface and same index methods for string ref id\r\n  Finally get the string from the constant pool\r\n  Never reached\r\n  TEMPORARY, DONT LIKE PASSING THIS DATA OUT!\r\n  someone about to do something in here!\r\n  check the class\r\n  check the name and type\r\n  not this one\r\n  not this one\r\n  OPTIMIZE indicate it should be cached!\r\n  Never reached\r\n  Never reached\r\n  Already in CP\r\n  OPTIMIZE should put it in the cache now\r\n  check the name and type\r\n  not this one\r\n  check the class\r\n  check the name and type\r\n  not this one\r\n  create it the exact size we need\r\n /*\r\n * This method returns the index into the constantPool corresponding to the type descriptor \r\n * corresponding to a type constant pool name\r\n * binding must not be an array type.\r\n */\r\n","WeaveMessage":"constructWeavingMessage constructWeavingMessage getAspectname getAffectedtypename getMessage constructWeavingMessage constructWeavingMessage getAspectname getAffectedtypename getMessage WEAVEMESSAGE_DECLAREPARENTSIMPLEMENTS WEAVEMESSAGE_ITD WEAVEMESSAGE_ADVISES WEAVEMESSAGE_DECLAREPARENTSEXTENDS WEAVEMESSAGE_SOFTENS WEAVEMESSAGE_ANNOTATES affectedtypename aspectname message WEAVEMESSAGE_DECLAREPARENTSIMPLEMENTS WEAVEMESSAGE_ITD WEAVEMESSAGE_ADVISES WEAVEMESSAGE_DECLAREPARENTSEXTENDS WEAVEMESSAGE_SOFTENS WEAVEMESSAGE_ANNOTATES affectedtypename aspectname message org.aspectj.bridge.WeaveMessage org.aspectj.bridge.WeaveMessage  %7 is information like \"[with runtime test]\"\r\n  private ctor - use the static factory method\r\n  private int id;\r\n  this.id = id;\r\n  %7 is information like \"[with runtime test]\"\r\n  private ctor - use the static factory method\r\n  private int id;\r\n  this.id = id;\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement IBM     initial implementation 30-May-2004\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement IBM     initial implementation 30-May-2004\r\n * ******************************************************************/\r\n","SimpleAnnotationValue":"setValueString setValueByte setValueChar setValueInt stringify toString setValueString setValueByte setValueChar setValueInt stringify toString theByte theChar theInt theString theDouble theFloat theLong theShort theBoolean theByte theChar theInt theString theDouble theFloat theLong theShort theBoolean org.aspectj.weaver.SimpleAnnotationValue org.aspectj.weaver.SimpleAnnotationValue  byte\r\n  char\r\n  double\r\n  float\r\n  int\r\n  long\r\n  short\r\n  boolean\r\n  String\r\n  byte\r\n  char\r\n  double\r\n  float\r\n  int\r\n  long\r\n  short\r\n  boolean\r\n  String\r\n /* *******************************************************************\r\n * Copyright (c) 2006 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement IBM     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2006 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement IBM     initial implementation \r\n * ******************************************************************/\r\n","WithinCodeAnnotationPointcut":"getAnnotationTypePattern couldMatchKinds parameterizeWith fastMatch matchInternal resolveBindings concretize1 findResidueInternal getBindingAnnotationTypePatterns getBindingTypePatterns write read equals hashCode buildDeclarationText toString accept getAnnotationTypePattern couldMatchKinds parameterizeWith fastMatch matchInternal resolveBindings concretize1 findResidueInternal getBindingAnnotationTypePatterns getBindingTypePatterns write read equals hashCode buildDeclarationText toString accept annotationTypePattern declarationText matchedShadowKinds annotationTypePattern declarationText matchedShadowKinds org.aspectj.weaver.patterns.WithinCodeAnnotationPointcut org.aspectj.weaver.patterns.WithinCodeAnnotationPointcut  if we weren't going to find the annotation\r\n  if we weren't going to find the annotation\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#fastMatch(org.aspectj.weaver.patterns.FastMatchInfo)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#match(org.aspectj.weaver.Shadow)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#resolveBindings(org.aspectj.weaver.patterns.IScope, org.aspectj.weaver.patterns.Bindings)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#concretize1(org.aspectj.weaver.ResolvedType, org.aspectj.weaver.IntMap)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#findResidue(org.aspectj.weaver.Shadow, org.aspectj.weaver.patterns.ExposedState)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingAnnotationTypePatterns()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingTypePatterns()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.PatternNode#write(java.io.DataOutputStream)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#fastMatch(org.aspectj.weaver.patterns.FastMatchInfo)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#match(org.aspectj.weaver.Shadow)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#resolveBindings(org.aspectj.weaver.patterns.IScope, org.aspectj.weaver.patterns.Bindings)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#concretize1(org.aspectj.weaver.ResolvedType, org.aspectj.weaver.IntMap)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#findResidue(org.aspectj.weaver.Shadow, org.aspectj.weaver.patterns.ExposedState)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingAnnotationTypePatterns()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingTypePatterns()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.PatternNode#write(java.io.DataOutputStream)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","BcelWorld":"makeDefaultClasspath getPathEntries ensureRepositorySetup getClassLoaderRepositoryFor addPath makeBcelType makeBcelTypes makeBcelTypesAsClassNames fromBcel fromBcel resolve resolveDelegate buildBcelDelegate lookupJavaClass addSourceObjectType deleteSourceObjectType makeFieldJoinPointSignature makeJoinPointSignatureFromMethod makeJoinPointSignatureForMonitorEnter makeJoinPointSignatureForMonitorExit makeJoinPointSignatureForArrayConstruction makeJoinPointSignatureForMethodInvocation toString createAdviceMunger concreteTypeMunger makeCflowStackFieldAdder makeCflowCounterFieldAdder makePerClauseAspect getBcelObjectType tidyUp findClass loadClass storeClass removeClass loadClass clear validateType applyDeclareParents applyDeclareAtType checkTargetOK weaveInterTypeDeclarations makeDefaultClasspath getPathEntries ensureRepositorySetup getClassLoaderRepositoryFor addPath makeBcelType makeBcelTypes makeBcelTypesAsClassNames fromBcel fromBcel resolve resolveDelegate buildBcelDelegate lookupJavaClass addSourceObjectType deleteSourceObjectType makeFieldJoinPointSignature makeJoinPointSignatureFromMethod makeJoinPointSignatureForMonitorEnter makeJoinPointSignatureForMonitorExit makeJoinPointSignatureForArrayConstruction makeJoinPointSignatureForMethodInvocation toString createAdviceMunger concreteTypeMunger makeCflowStackFieldAdder makeCflowCounterFieldAdder makePerClauseAspect getBcelObjectType tidyUp findClass loadClass storeClass removeClass loadClass clear validateType applyDeclareParents applyDeclareAtType checkTargetOK weaveInterTypeDeclarations classPath delegate loaderRef trace classPath delegate loaderRef trace org.aspectj.weaver.bcel.BcelWorld org.aspectj.weaver.bcel.BcelWorld  System.err.println(\"classpath: \" + classPath);\r\n  this.aspectPath = new ClassPathManager(aspectPath, handler);\r\n  Tell BCEL to use us for resolving any classes\r\n  Tell BCEL to use us for resolving any classes\r\n  what on earth is it then? See pr 112243\r\n  NEWARRAY arrayInstruction = (NEWARRAY)i;\r\n  ANEWARRAY arrayInstruction = (ANEWARRAY)i;\r\n  we found it\r\n  look for the method there\r\n  see #104212\r\n  buf.append(shadowMungerMap);\r\n  sourceContext);\r\n  is possible\r\n  We haven't heard of it yet\r\n  cant need resetting\r\n  BcelTypeMunger.mungeNewParent()\r\n  System.err.println(\"need to do declare parents for: \" + onType);\r\n  already has it\r\n  check the annotation is suitable for the target\r\n  modified the type\r\n  First pass - apply all decp mungers\r\n  Still first pass - apply all dec @type mungers\r\n  weaving.\r\n  System.err.println(\"classpath: \" + classPath);\r\n  this.aspectPath = new ClassPathManager(aspectPath, handler);\r\n  Tell BCEL to use us for resolving any classes\r\n  Tell BCEL to use us for resolving any classes\r\n  what on earth is it then? See pr 112243\r\n  NEWARRAY arrayInstruction = (NEWARRAY)i;\r\n  ANEWARRAY arrayInstruction = (ANEWARRAY)i;\r\n  we found it\r\n  look for the method there\r\n  see #104212\r\n  buf.append(shadowMungerMap);\r\n  sourceContext);\r\n  is possible\r\n  We haven't heard of it yet\r\n  cant need resetting\r\n  BcelTypeMunger.mungeNewParent()\r\n  System.err.println(\"need to do declare parents for: \" + onType);\r\n  already has it\r\n  check the annotation is suitable for the target\r\n  modified the type\r\n  First pass - apply all decp mungers\r\n  Still first pass - apply all dec @type mungers\r\n  weaving.\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved.\r\n * This program and the accompanying materials are made available\r\n * under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *     PARC     initial implementation\r\n *     Alexandre Vasseur    perClause support for @AJ aspects\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved.\r\n * This program and the accompanying materials are made available\r\n * under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *     PARC     initial implementation\r\n *     Alexandre Vasseur    perClause support for @AJ aspects\r\n * ******************************************************************/\r\n","GlobalViewProperties":"setGranularity getGranularity setHierarchy getHierarchy getName granularity hierarchy org.aspectj.ajde.ui.GlobalViewProperties /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","CompilationUnitStructureRequestor":"acceptImport acceptLineSeparatorPositions acceptPackage acceptProblem addToChildren convertTypeNamesToSigs enterCompilationUnit enterConstructor enterField enterInitializer enterMethod enterType enterTypeParameter exitCompilationUnit exitConstructor exitField exitInitializer exitMember exitMethod exitType resolveDuplicates setChildren unit unitInfo importContainerInfo newElements infoStack children handleStack referenceCount hasSyntaxErrors parser NO_BYTES fieldRefCache messageRefCache typeRefCache unknownRefCache org.aspectj.org.eclipse.jdt.internal.core.CompilationUnitStructureRequestor  Should not happen\r\n  create the import container and its info\r\n  Should not happen\r\n  Should not happen\r\n  Should not happen\r\n  translate nulls to empty arrays\r\n  Should not happen\r\n  NB: occurenceCount is computed in resolveDuplicates\r\n  NB: occurenceCount is computed in resolveDuplicates\r\n  set import container children\r\n  set children\r\n  determine if there were any parsing errors\r\n  remember initializer source if field is a constant\r\n  remember default value of annotation method\r\n /*\r\n\t * Map from JavaElementInfo to of ArrayList of IJavaElement representing the children \r\n\t * of the given info.\r\n\t */\r\n /*\r\n\t * The parser this requestor is using.\r\n\t */\r\n /*\r\n * Table of line separator position. This table is passed once at the end\r\n * of the parse action, so as to allow computation of normalized ranges.\r\n *\r\n * A line separator might corresponds to several characters in the source,\r\n * \r\n */\r\n /* default */\r\n","AjdeCoreBuildNotifierAdapter":"setProgress setText isCancelledRequested setCancelledRequested progressMonitor org.aspectj.ajde.core.internal.AjdeCoreBuildNotifierAdapter /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation\r\n *     Helen Hawkins  converted to new interface (pr148190) \r\n * ******************************************************************/\r\n","WildcardBinding":"kind boundCheck canBeInstantiated collectSubstitutes computeUniqueKey constantPoolName debugName erasure genericTypeSignature hashCode initialize isSuperclassOf isIntersectionType isUnboundWildcard isWildcard readableName resolve shortReadableName signature sourceName superclass superInterfaces superInterfaces2 swapUnresolved toString typeVariable genericType rank bound otherBounds genericSignature boundKind superclass superInterfaces typeVariable environment org.aspectj.org.eclipse.jdt.internal.compiler.lookup.WildcardBinding  when unbound denotes the corresponding type variable (so as to retrieve its bound lazily)\r\n  only positionned by lub computations (if so, #bound is also set) and associated to EXTENDS mode\r\n  corresponding variable\r\n  treat wildcard as public\r\n  cleared in resolve()\r\n  check other bounds (lub scenario)\r\n  ? super Exception   ok for:  IOException, since it would be ok for (Exception)ioException\r\n  cannot be asked per construction\r\n  A << F\r\n  F={?}\r\n  }\r\n  F={? extends U}\r\n  A=V << F={? extends U} ---> V << U\r\n  A={?} << F={? extends U}  --> 0\r\n  A={? extends V} << F={? extends U} ---> V << U\r\n  A={? super V} << F={? extends U} ---> 0\r\n  F={? super U}\r\n  A=V << F={? super U} ---> V >> U\r\n  A={?} << F={? super U}  --> 0\r\n  A={? extends V} << F={? super U} ---> 0\r\n  A={? super V} << F={? super U} ---> 0\r\n  A == F\r\n  F={?}\r\n  }\r\n  F={? extends U}\r\n  A={?} == F={? extends U}  --> 0\r\n  A={? extends V} == F={? extends U} ---> V == U\r\n  A={? super V} == F={? extends U} ---> 0\r\n  F={? super U}\r\n  A={?} == F={? super U}  --> 0\r\n  A={? extends V} == F={? super U} ---> 0\r\n  A={? super V} == F={? super U} ---> 0\r\n  A >> F\r\n  F={?}\r\n  }\r\n  F={? extends U}\r\n  A={?} >> F={? extends U}  --> 0\r\n  A={? extends V} >> F={? extends U} ---> V >> U\r\n  A={? super V} >> F={? extends U} ---> 0\r\n  F={? super U}\r\n  A={?} >> F={? super U}  --> 0\r\n  A={? extends V} >> F={? super U} ---> 0\r\n  A={? super V} >> F={? super U} ---> V >> U\r\n  SUPER\r\n  use first explicit bound to improve stackmap\r\n  intersection type\r\n  SUPER\r\n  array bound\r\n  SUPER\r\n  SUPER\r\n  SUPER | UNBOUND\r\n  original methods or type erasures (which cannot denote wildcards at first level)\r\n  SUPER\r\n  augment super interfaces with the wildcard bound\r\n  make bound first\r\n  augment super interfaces with the wildcard otherBounds (interfaces per construction)\r\n  augment super interfaces with the wildcard otherBounds (interfaces per construction)\r\n  no raw conversion\r\n  SUPER\r\n /*\r\n\t * genericTypeKey *|+|- [boundKey]\r\n\t * p.X<T> { X<?> ... } --> Lp/X<TT;>;*\r\n\t */\r\n /* (non-Javadoc)\r\n     * @see org.aspectj.org.eclipse.jdt.internal.compiler.lookup.TypeBinding#erasure()\r\n     */\r\n /* (non-Javadoc)\r\n     * @see org.aspectj.org.eclipse.jdt.internal.compiler.lookup.TypeBinding#signature()\r\n     */\r\n /* (non-Javadoc)\r\n     * @see org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Binding#readableName()\r\n     */\r\n /* (non-Javadoc)\r\n     * @see org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Binding#shortReadableName()\r\n     */\r\n /* (non-Javadoc)\r\n     * @see org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding#sourceName()\r\n     */\r\n /* (non-Javadoc)\r\n     * @see org.aspectj.org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding#superclass()\r\n     */\r\n /* (non-Javadoc)\r\n     * @see org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding#superInterfaces()\r\n     */\r\n /*\r\n * A wildcard acts as an argument for parameterized types, allowing to\r\n * abstract parameterized types, e.g. List<String> is not compatible with List<Object>, \r\n * but compatible with List<?>.\r\n */\r\n","CaseStatement":"analyseCode printStatement generateCode resolve resolveCase traverse constantExpression targetLabel org.aspectj.org.eclipse.jdt.internal.compiler.ast.CaseStatement  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  record entering in a switch case block\r\n  remember the default case into the associated switch statement\r\n  on error the last default will be the selected one ...\r\n  add into the collection of cases of the associated switch statement\r\n  tag constant name with enum type for privileged access to its members\r\n  narrowing then boxing ?\r\n  autoboxing\r\n  constantExpression.computeConversion(scope, caseType, switchExpressionType); - do not report boxing  (ordinal value + 1) zero should not be returned see bug 141810\r\n","SourceType":"closing codeComplete codeComplete codeComplete codeComplete createField createInitializer createMethod createType equals findMethods getChildrenForCategory getDeclaringType getElementType getField getFields getFullyQualifiedName getFullyQualifiedName getFullyQualifiedParameterizedName getHandleFromMemento getInitializer getInitializers getKey getMethod getMethods getPackageFragment getPrimaryElement getSuperclassName getSuperclassTypeSignature getSuperInterfaceNames getSuperInterfaceTypeSignatures getTypeParameters getTypeParameterSignatures getType getTypeParameter getTypeQualifiedName getTypeQualifiedName getTypes isAnonymous isClass isEnum isInterface isAnnotation isLocal isMember isResolved loadTypeHierachy loadTypeHierachy newSupertypeHierarchy newSupertypeHierarchy newSupertypeHierarchy newSupertypeHierarchy newTypeHierarchy newTypeHierarchy newTypeHierarchy newTypeHierarchy newTypeHierarchy newTypeHierarchy resolved resolveType resolveType toStringInfo answers org.aspectj.org.eclipse.jdt.internal.core.SourceType  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$   if type doesn't exist, no matching method can exist\r\n  exception thrown only when showing parameters\r\n  backward compatible with 3.0 mementos\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  happen only if force open is true\r\n  should not happen\r\n  exception thrown only when showing parameters\r\n  annotation is interface too\r\n  TODO monitor should be passed to TypeHierarchy.load(...)\r\n  grow\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n * @see IType\r\n */\r\n /*\r\n * @see IType#getFullyQualifiedParameterizedName()\r\n */\r\n /*\r\n * @see JavaElement\r\n */\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.core.IType#getKey()\r\n */\r\n /*\r\n * @see JavaElement#getPrimaryElement(boolean)\r\n */\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.core.IType#isResolved()\r\n */\r\n /*\r\n * @see IType#newSupertypeHierarchy(ICompilationUnit[], IProgressMonitor)\r\n */\r\n /*\r\n * @see IType#newTypeHierarchy(ICompilationUnit[], IProgressMonitor)\r\n */\r\n","ExtendedStringLiteral":"extendWith extendWith printExpression traverse org.aspectj.org.eclipse.jdt.internal.compiler.ast.ExtendedStringLiteral  update the source\r\n  position at the end of all literals\r\n  uddate the source\r\n  position at the end of all literals\r\n  $NON-NLS-1$\r\n","CompletionOnArgumentName":"bind print resolve FAKENAMESUFFIX realName isCatchArgument org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnArgumentName  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","EnumConstantDeclaration":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty internalGetChildListProperty internalJavadocProperty internalModifiers2Property internalModifiersProperty getNodeType0 clone0 subtreeMatch0 accept0 getName setName arguments getAnonymousClassDeclaration setAnonymousClassDeclaration resolveConstructorBinding resolveVariable memSize treeSize JAVADOC_PROPERTY MODIFIERS2_PROPERTY NAME_PROPERTY ARGUMENTS_PROPERTY ANONYMOUS_CLASS_DECLARATION_PROPERTY PROPERTY_DESCRIPTORS constantName arguments optionalAnonymousClassDeclaration org.aspectj.org.eclipse.jdt.core.dom.EnumConstantDeclaration  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  this property will not be asked for (node type did not exist in JLS2)\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","InitializerElementInfo":"org.aspectj.org.eclipse.jdt.internal.core.InitializerElementInfo","Ajde":"init showOptionsFrame isInitialized currConfigChanged configsListUpdated runInSameVM runInNewVM showWarningMessage runBuildInSameThread runBuildInDifferentThread run getDefault getViewManager getRootFrame getOptionsFrame getIdeUIAdapter getEditorAdapter getBuildConfigEditor getFileStructurePanel getIconRegistry getStructureViewManager getStructureSearchManager getBuildConfigManager getCompilerConfig getMessageHandler getBuildProgressMonitor getCompilerForConfigFile INSTANCE viewManager ideUIAdapter buildConfigEditor iconRegistry runtimeProperties initialized optionsFrame rootFrame fileStructurePanel editorAdapter structureViewManager structureSearchManager configurationManager compilerConfig uiBuildMsgHandler buildProgressMonitor compiler STRUCTURE_UPDATE_CONFIG_LISTENER mainClass classpath args valid rootFrame compiler buildFresh org.aspectj.ajde.Ajde  all to do with building....\r\n  error already handled\r\n  error already handled\r\n  setup to run asynchronously, pipe streams through, and report errors\r\n  no errors\r\n  handle errors\r\n  now run the process\r\n  XXX really run arbitrary handler in constructor? hmm.\r\n  list\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation\r\n *     Helen Hawkins  Converted to new interface (bug 148190) \r\n *******************************************************************/\r\n","Literal":"analyseCode computeConstant literalType printExpression resolveType source accept toString accept toString noTest val TRUE FALSE noTest val TRUE FALSE org.aspectj.org.eclipse.jdt.internal.compiler.ast.Literal org.aspectj.weaver.ast.Literal org.aspectj.weaver.ast.Literal  compute the real value, which must range its type's range\r\n  in case of error, constant did remain null\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","ASTHolderCUInfo":"astLevel resolveBindings reconcileFlags problems ast org.aspectj.org.eclipse.jdt.internal.core.ASTHolderCUInfo","DeclarePrecedence":"getDeclaringType getPrecedenceOrder accept parameterizeWith toString equals hashCode write read resolve getPatterns matchingIndex compare isAdviceLike getNameSuffix getDeclaringType getPrecedenceOrder accept parameterizeWith toString equals hashCode write read resolve getPatterns matchingIndex compare isAdviceLike getNameSuffix patterns patterns org.aspectj.lang.reflect.DeclarePrecedence org.aspectj.weaver.patterns.DeclarePrecedence org.aspectj.lang.reflect.DeclarePrecedence org.aspectj.weaver.patterns.DeclarePrecedence  Cannot do a dec prec specifying a non-aspect types unless suffixed with a '+'\r\n  Cannot do a dec prec specifying a non-aspect types unless suffixed with a '+'\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","ISourceRange":"getLength getOffset org.aspectj.org.eclipse.jdt.core.ISourceRange","VerboseElementCache":"makeSpace put beingAdded name org.aspectj.org.eclipse.jdt.internal.core.VerboseElementCache  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n","AjTypeConstants":"getJoinPointType getJoinPointStaticPartType getAroundClosureType getConversionsType getConversionMethodToObject getConversionMethodFromObject ORG ASPECTJ RUNTIME LANG INTERNAL ORG_ASPECTJ_LANG_JOINPOINT ORG_ASPECTJ_LANG_JOINPOINT_STATICPART ORG_ASPECTJ_RUNTIME_INTERNAL_AROUNDCLOSURE ORG_ASPECTJ_RUNTIME_INTERNAL_CONVERSIONS org.aspectj.ajdt.internal.compiler.lookup.AjTypeConstants  Constant compound names\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","PointcutRewriter":"rewrite rewrite isDNF isDNFHelper format distributeNot pullUpDisjunctions not createAndsFor simplifyAnds simplifyAnd sortOrs removeNothings collectAndNodes collectOrNodes isNot isAnd isOr rewrite rewrite isDNF isDNFHelper format distributeNot pullUpDisjunctions not createAndsFor simplifyAnds simplifyAnd sortOrs removeNothings collectAndNodes collectOrNodes isNot isAnd isOr WATCH_PROGRESS WATCH_PROGRESS org.aspectj.weaver.patterns.PointcutRewriter org.aspectj.weaver.patterns.PointcutRewriter  checkPC(result);\r\n  checkPC(result);\r\n  checkPC(result);\r\n  checkPC(result);\r\n  checkPC(result);\r\n  checkPC(result);\r\n  s=s.replaceAll(\"if.true.\",\"N\");\r\n  !(X || Y) => !X && !Y\r\n  !(X && Y) => !X || !Y\r\n  !!X => X\r\n  !(X || Y) => !X && !Y\r\n  dive into left and right here...\r\n  (A || B) && (C || D) => (A && C) || (A && D) || (B && C) || (B && D)\r\n  A && (B || C) => (A && B) || (A && C)\r\n  (A || B) && C => (A && C) || (B && C)\r\n  (A || B) && C => (A && C) || (B && C)\r\n  dumb case\r\n  recursion exit case\r\n  otherwise ...\r\n  !!X => X\r\n  - the result is written out with the least expensive branch leftmost\r\n  If it can't match anything, the whole AND can't match anything\r\n  look for A and !A, or IfFalse\r\n  write out with cheapest on left\r\n  write out with cheapest on left\r\n  checkPC(result);\r\n  checkPC(result);\r\n  checkPC(result);\r\n  checkPC(result);\r\n  checkPC(result);\r\n  checkPC(result);\r\n  s=s.replaceAll(\"if.true.\",\"N\");\r\n  !(X || Y) => !X && !Y\r\n  !(X && Y) => !X || !Y\r\n  !!X => X\r\n  !(X || Y) => !X && !Y\r\n  dive into left and right here...\r\n  (A || B) && (C || D) => (A && C) || (A && D) || (B && C) || (B && D)\r\n  A && (B || C) => (A && B) || (A && C)\r\n  (A || B) && C => (A && C) || (B && C)\r\n  (A || B) && C => (A && C) || (B && C)\r\n  dumb case\r\n  recursion exit case\r\n  otherwise ...\r\n  !!X => X\r\n  - the result is written out with the least expensive branch leftmost\r\n  If it can't match anything, the whole AND can't match anything\r\n  look for A and !A, or IfFalse\r\n  write out with cheapest on left\r\n  write out with cheapest on left\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","InterTypeDeclaration":"getDeclaringType getTargetType getModifiers setOnType setDeclaredModifiers setSelector getPrefix addAtAspectJAnnotations isTargetAnnotation isTargetEnum resolve fixSuperCallsForInterfaceContext build fixSuperCallsInBody resolveOnType resolveTypeParametersForITDOnGenericType checkSpec makeEffectiveSignatureAttribute setMunger generateInfoAttributes getShadowKindForBody getSignature getDeclaredSelector getOnType determineTypeVariableAliases ensureScopeSetup getDeclaringType getTargetType getModifiers onType onTypeBinding munger declaredModifiers declaredSelector typeVariableAliases interTypeScope scopeSetup ACC_ANNOTATION ACC_ENUM org.aspectj.lang.reflect.InterTypeDeclaration org.aspectj.ajdt.internal.compiler.ast.InterTypeDeclaration org.aspectj.lang.reflect.InterTypeDeclaration  so others can see (these differ from the modifiers in the superclass)\r\n  XXXAJ5 - When the compiler is changed, these will exist somewhere in it...\r\n  return the selector prefix for this itd that is to be used before resolution replaces it with a \"proper\" name\r\n  newParent);\r\n  error reported elsewhere.\r\n  might be OK... pr132349\r\n  some extra checks...\r\n  Collapse the parameterized reference to its generic type\r\n  type is not generic.\r\n  typeParameters.length) {   phantom contains the fake ones from the ontype, typeparameters will also include extra things if it is a generic method\r\n  Check they have supplied the right number of type parameters on the ITD target type\r\n  && !(tb instanceof TypeVariableBinding)) {\r\n  check if they used stupid names for type variables\r\n  Can be null in an erroneous program I think\r\n  TODO loses distinction about which level the type variables are at... is that a problem?\r\n  don't do it again\r\n  pr132349\r\n  Check if any of them are not type variables\r\n  to prevent disgusting cascading errors after this problem - lets null out what leads to them (pr105038)\r\n  SingleTypeReference(pref.Quatoken,pos);\r\n  Work out the real base type\r\n  resolve it\r\n  if the real target type used a type variable alias then we can do this OK, but need to switch things around, we want the generic type\r\n  pr203646 - if we have ended up with the raw type, get back to the underlying generic one.\r\n  to prevent disgusting cascading errors after this problem - lets null out what leads to them (pr105038)\r\n  if resolution failed, give up - someone else is going to report an error\r\n  by the AJDT code so we can put out a much nicer message.\r\n  scope.isStatic = Modifier.isStatic(declaredModifiers);\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","CompilationParticipant":"aboutToBuild buildStarting cleanStarting isActive isAnnotationProcessor processAnnotations reconcile READY_FOR_BUILD NEEDS_FULL_BUILD org.aspectj.org.eclipse.jdt.core.compiler.CompilationParticipant","NewFieldTypeMunger":"getInitMethod write readField getMatchingSyntheticMember parameterizedFor parameterizeWith equals hashCode getInitMethod write readField getMatchingSyntheticMember parameterizedFor parameterizeWith equals hashCode org.aspectj.weaver.NewFieldTypeMunger org.aspectj.weaver.NewFieldTypeMunger  ??? might give a field where a method is expected\r\n  For raw and 'normal' parameterized targets  (e.g. Interface, Interface<String>)\r\n  in the original ITD declaration to the ones used in the actual target type declaration.\r\n  ??? might give a field where a method is expected\r\n  For raw and 'normal' parameterized targets  (e.g. Interface, Interface<String>)\r\n  in the original ITD declaration to the ones used in the actual target type declaration.\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","IField":"getConstant getElementName getKey getTypeSignature isEnumConstant isResolved org.aspectj.org.eclipse.jdt.core.IField","ExtraCompilerModifiers":"AccJustFlag AccRestrictedAccess AccFromClassFile AccDefaultAbstract AccDeprecatedImplicitly AccAlternateModifierProblem AccModifierProblem AccSemicolonBody AccUnresolved AccBlankFinal AccIsDefaultConstructor AccLocallyUsed AccVisibilityMASK AccOverriding AccImplementing AccGenericSignature org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ExtraCompilerModifiers  16 lower bits\r\n  bit18 - use by ClassFileConstants.AccAnnotationDefault\r\n  record whether deprecated itself or contained by a deprecated type\r\n  for blank final variables\r\n  for default constructor\r\n  used to diagnose unused private  record fact a method overrides another one\r\n  record fact a method implements another one (it is concrete and overrides an abstract one)\r\n  record fact a type  modifier constant\r\n  TODO (philippe) these should be moved to tagbits\r\n","JavaLangTypeToResolvedTypeConverter":"getWorld fromType fromTypes getWorld fromType fromTypes typeVariablesInProgress world typeVariablesInProgress world org.aspectj.weaver.reflect.JavaLangTypeToResolvedTypeConverter org.aspectj.weaver.reflect.JavaLangTypeToResolvedTypeConverter  Used to prevent recursion - we record what we are working on and return it if asked again *whilst* working on it\r\n  check if we are already working on this type\r\n  record what we are working on, for recursion case\r\n  we have finished working on it\r\n  Used to prevent recursion - we record what we are working on and return it if asked again *whilst* working on it\r\n  check if we are already working on this type\r\n  record what we are working on, for recursion case\r\n  we have finished working on it\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","IMethodInfo":"getDescriptor getDescriptorIndex getAccessFlags getName getNameIndex isClinit isConstructor isSynthetic isDeprecated getCodeAttribute getExceptionAttribute getAttributeCount getAttributes org.aspectj.org.eclipse.jdt.core.util.IMethodInfo","JavadocQualifiedTypeReference":"reportInvalidType reportDeprecatedType traverse traverse internalResolveType resolveType resolveType tagSourceStart tagSourceEnd packageBinding org.aspectj.org.eclipse.jdt.internal.compiler.ast.JavadocQualifiedTypeReference  handle the error here\r\n  is a shared type reference which was already resolved\r\n  already reported error\r\n /* (non-Javadoc)\r\n\t * Redefine to capture javadoc specific signatures\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode#traverse(org.aspectj.org.eclipse.jdt.internal.compiler.ASTVisitor, org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BlockScope)\r\n\t */\r\n /*\r\n\t * We need to modify resolving behavior to handle package references\r\n\t */\r\n","FieldBinding":"kind canBeSeenBy canBeSeenBy computeUniqueKey constant genericSignature getAccessFlags getAnnotationTagBits getAnnotations isDefault isDeprecated isPrivate isUsed isProtected isPublic isStatic isSynthetic isTransient isViewedAsDeprecated isVolatile original setAnnotations sourceField alwaysNeedsAccessMethod getAccessMethod getFieldBindingForLookup getVisibleBinding findPrivilegedBinding declaringClass org.aspectj.org.eclipse.jdt.internal.compiler.lookup.FieldBinding  record binding in declaration\r\n  New AspectJ Extension - null guard\r\n  special API used to change field declaring class for runtime visibility check\r\n  isProtected() or isDefault()\r\n  AspectJ Extension\r\n  static import call\r\n  OR previous assertions are true for one of the enclosing type\r\n  receiverType can be an array binding in one case... see if you can change it\r\n  see 1FMEPDL - return invocationSite.isTypeAccess();\r\n  special tolerance for type variable direct bounds\r\n  AND the invocationType and the declaringClass have a common enclosingType\r\n  isDefault()\r\n  receiverType can be an array binding in one case... see if you can change it\r\n  package could be null for wildcards  AspectJ Extension made non-final for AspectJ\r\n  declaring key\r\n  name\r\n  return type\r\n  compilation units to process. Thus the field is NOT from a BinaryTypeBinbing\r\n  shouldn't occur per construction (paranoid null check)\r\n  shouldn't occur per construction (paranoid null check)\r\n  side effect on binding\r\n  synthetic fields do not have a scope nor any annotations\r\n  AspectJ Extension\r\n  notePrivilegedTypeAccess(this, null);\r\n /*case of length field for an array*/\r\n /*\r\n * declaringUniqueKey dot fieldName ) returnTypeUniqueKey\r\n * p.X { X<T> x} --> Lp/X;.x)p/X<TT;>;\r\n */\r\n","MessageWriter":"handleMessage isIgnoring dontIgnore ignore render handleMessage isIgnoring dontIgnore ignore render writer abortOnFailure writer abortOnFailure org.aspectj.bridge.MessageWriter org.aspectj.bridge.MessageWriter  XXX share MessageHandler implementation in superclass\r\n  XXX share MessageHandler implementation in superclass\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","JavaModelCache":"getInfo getMemoryRatio peekAtInfo putInfo removeInfo resetJarTypeCache toString toStringFillingRation VERBOSE DEFAULT_PROJECT_SIZE DEFAULT_ROOT_SIZE DEFAULT_PKG_SIZE DEFAULT_OPENABLE_SIZE DEFAULT_CHILDREN_SIZE NON_EXISTING_JAR_TYPE_INFO memoryRatio modelInfo projectCache rootCache pkgCache openableCache childrenCache jarTypeCache org.aspectj.org.eclipse.jdt.internal.core.JavaModelCache  average 25552 bytes per project.\r\n  average 2590 bytes per root -> maximum size : 25900*BASE_VALUE bytes\r\n  average 1782 bytes per pkg -> maximum size : 178200*BASE_VALUE bytes\r\n  average 6629 bytes per openable (includes children) -> maximum size : 662900*BASE_VALUE bytes\r\n  average 20 children per openable\r\n  set the size of the caches in function of the maximum amount of memory available\r\n  NB: Don't use a LRUCache for projects as they are constantly reopened (e.g. during delta processing)\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  64MB is the base memory for most JVM\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n\t * The memory ratio that should be applied to the above constants.\r\n\t */\r\n /*\r\n\t * Cache of open binary type (inside a jar) that have a non-open parent\r\n\t */\r\n","TypeNameRequestor":"acceptType org.aspectj.org.eclipse.jdt.core.search.TypeNameRequestor","AjAST":"newAjAST convertCompilationUnit newAspectDeclaration newAjTypeDeclaration newAfterAdviceDeclaration newAfterReturningAdviceDeclaration newAfterThrowingAdviceDeclaration newBeforeAdviceDeclaration newAroundAdviceDeclaration newDeclareAtConstructorDeclaration newDeclareAtFieldDeclaration newDeclareAtMethodDeclaration newDeclareAtTypeDeclaration newDeclareErrorDeclaration newDeclareParentsDeclaration newDeclarePrecedenceDeclaration newDeclareSoftDeclaration newDeclareWarningDeclaration newInterTypeFieldDeclaration newInterTypeMethodDeclaration newPointcutDeclaration newAndPointcut newCflowPointcut newNotPointcut newOrPointcut newPerCflow newPerObject newPerTypeWithin newReferencePointcut newDefaultPointcut newDefaultTypePattern newSignaturePattern org.aspectj.org.eclipse.jdt.core.dom.AjAST  AspectJ extension - use the factory\r\n  create a new AjAst - difference between this method in AjAST and AST\r\n","LocalVariableLocator":"match getLocalVariable matchReportReference matchContainer matchLocalVariable referenceType resolveLevel resolveLevel resolveLevel org.aspectj.org.eclipse.jdt.internal.core.search.matching.LocalVariableLocator  must be a write only access with an initializer\r\n  use the stronger match\r\n","ShadowMatchImpl":"setWithinCode setSubject setWithinType alwaysMatches maybeMatches neverMatches matchesJoinPoint setMatchingContext getPointcutParameters matches visit visit visit visit visit visit visit visit visit setWithinCode setSubject setWithinType alwaysMatches maybeMatches neverMatches matchesJoinPoint setMatchingContext getPointcutParameters matches visit visit visit visit visit visit visit visit visit match state residualTest params withinCode subject withinType matchContext matches test thisObject targetObject args matchContext match state residualTest params withinCode subject withinType matchContext matches test thisObject targetObject args matchContext org.aspectj.weaver.reflect.ShadowMatchImpl org.aspectj.weaver.reflect.ShadowMatchImpl /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.tools.ShadowMatch#setMatchingContext(org.aspectj.weaver.tools.MatchingContext)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.tools.ShadowMatch#setMatchingContext(org.aspectj.weaver.tools.MatchingContext)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","UpdatedMethodBinding":"constantPoolDeclaringClass updatedDeclaringClass org.aspectj.org.eclipse.jdt.internal.compiler.lookup.UpdatedMethodBinding","Options":"parse parse OPTION_15 OPTION_lazyTjp OPTION_noWarn OPTION_noWarnNone OPTION_proceedOnError OPTION_verbose OPTION_debug OPTION_reweavable OPTION_noinline OPTION_addSerialVersionUID OPTION_hasMember OPTION_pinpoint OPTION_showWeaveInfo OPTIONVALUED_messageHandler OPTIONVALUED_Xlintfile OPTIONVALUED_Xlint OPTIONVALUED_joinpoints OPTIONVALUED_Xset java5 lazyTjp hasMember optionalJoinpoints noWarn proceedOnError verbose debug notReWeavable noInline addSerialVersionUID showWeaveInfo pinpoint messageHandler lint lintFile xSet OPTION_15 OPTION_lazyTjp OPTION_noWarn OPTION_noWarnNone OPTION_proceedOnError OPTION_verbose OPTION_debug OPTION_reweavable OPTION_noinline OPTION_addSerialVersionUID OPTION_hasMember OPTION_pinpoint OPTION_showWeaveInfo OPTIONVALUED_messageHandler OPTIONVALUED_Xlintfile OPTIONVALUED_Xlint OPTIONVALUED_joinpoints OPTIONVALUED_Xset java5 lazyTjp hasMember optionalJoinpoints noWarn proceedOnError verbose debug notReWeavable noInline addSerialVersionUID showWeaveInfo pinpoint messageHandler lint lintFile xSet org.aspectj.weaver.loadtime.Options org.aspectj.weaver.loadtime.Options  notReweavable is default for LTW\r\n  the first option wins\r\n  do a first round on the message handler since it will report the options themselves\r\n  configure the other options\r\n  refine message handler configuration\r\n  default to notReweavable for LTW (faster)\r\n  messageHandler = new DefaultMessageHandler();  notReweavable is default for LTW\r\n  the first option wins\r\n  do a first round on the message handler since it will report the options themselves\r\n  configure the other options\r\n  refine message handler configuration\r\n  default to notReweavable for LTW (faster)\r\n  messageHandler = new DefaultMessageHandler();","JRockitAgent":"preProcess empty peek push pop initialValue preProcess empty peek push pop initialValue preProcessor stack preProcessor stack org.aspectj.weaver.loadtime.JRockitAgent org.aspectj.weaver.loadtime.JRockitAgent /*\r\n\t * This is used to implement the recursion protection offered by JVMTI\r\n\t * but not by JRockit JMAPI. I we are called to preProcess a class while\r\n\t * already preProcessing another we will return immediately\r\n\t */\r\n /*\r\n\t * This is used to implement the recursion protection offered by JVMTI\r\n\t * but not by JRockit JMAPI. I we are called to preProcess a class while\r\n\t * already preProcessing another we will return immediately\r\n\t */\r\n","RenameResourceElementsOperation":"getMainTaskName isRename verify org.aspectj.org.eclipse.jdt.internal.core.RenameResourceElementsOperation  these elements are from different parents\r\n","EclipseTypeMunger":"supportsKind toString munge mungeNewMethod mungeNewConstructor mungeNewField shouldTreatAsPublic findOrCreateInterTypeMemberFinder getSourceLocation setSourceLocation getSourceMethod parameterizedFor parameterizeWith targetTypeX sourceMethod world sourceLocation org.aspectj.ajdt.internal.compiler.lookup.EclipseTypeMunger  protected ReferenceBinding targetBinding = null;\r\n  Won't be persisted unless ResolvedTypeMunger.persistSourceLocation is true.\r\n  AMC, needed until generic and raw have distinct sigs...\r\n  might be the topmost implementor of an interface we care about\r\n  so we do need access, and this type could be it...\r\n  drive the JDT MethodVerifier correctly)\r\n  \" with \" + targetTypeX);\r\n  we're munging an interface ITD onto a topmost implementor\r\n  no-one else can provide an implementation\r\n  already have an implementation, so don't do anything\r\n  so that we find methods from our superinterfaces later on...\r\n  retain *only* the visibility modifiers and abstract when putting methods on an interface...\r\n  ??? are in the same package\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","BcelWeaver":"setShadowMungers addLibraryAspect addLibraryJarFile addAspectsFromJarFile addAspectsFromDirectory addIfAspect addDirectoryContents addJarFile needToReweaveWorld addClassFile addClassFile deleteClassFile setIsBatchWeave prepareForWeave addCustomMungers setCustomMungerFactory rewritePointcuts shareEntriesFromMap validateBindings validateOrBranch validateSingleBranch validateSingleBranchRecursion couldEverMatchSameJoinPoints findFirstPointcutIn raiseNegationBindingError raiseAmbiguousBindingError raiseAmbiguityInDisjunctionError raiseUnboundFormalError addManifest getManifest weave weave allWeavingComplete warnOnUnmatchedAdvice weaveParentsFor prepareToProcessReweavableState processReweavableStateIfPresent weaveAndNotify getClassType addParentTypeMungers addNormalTypeMungers getClassFilesFor weaveParentTypeMungers applyDeclareAtType verifyTargetIsOK applyDeclareParents weaveNormalTypeMungers weaveWithoutDump weave weave dumpUnchanged getEntryName dump writeZipEntry fastMatch setReweavableMode isReweavable getWorld tidyUp setShadowMungers addLibraryAspect addLibraryJarFile addAspectsFromJarFile addAspectsFromDirectory addIfAspect addDirectoryContents addJarFile needToReweaveWorld addClassFile addClassFile deleteClassFile setIsBatchWeave prepareForWeave addCustomMungers setCustomMungerFactory rewritePointcuts shareEntriesFromMap validateBindings validateOrBranch validateSingleBranch validateSingleBranchRecursion couldEverMatchSameJoinPoints findFirstPointcutIn raiseNegationBindingError raiseAmbiguousBindingError raiseAmbiguityInDisjunctionError raiseUnboundFormalError addManifest getManifest weave weave allWeavingComplete warnOnUnmatchedAdvice weaveParentsFor prepareToProcessReweavableState processReweavableStateIfPresent weaveAndNotify getClassType addParentTypeMungers addNormalTypeMungers getClassFilesFor weaveParentTypeMungers applyDeclareAtType verifyTargetIsOK applyDeclareParents weaveNormalTypeMungers weaveWithoutDump weave weave dumpUnchanged getEntryName dump writeZipEntry fastMatch setReweavableMode isReweavable getWorld tidyUp CLOSURE_CLASS_PREFIX SYNTHETIC_CLASS_POSTFIX world xcutSet inReweavableMode trace addedClasses deletedTypenames manifest needToReweaveWorld isBatchWeave shadowMungerList typeMungerList lateTypeMungerList declareParentsList zipOutputStream customMungerFactory WEAVER_MANIFEST_VERSION CREATED_BY WEAVER_CREATED_BY lineNo inAspect CLOSURE_CLASS_PREFIX SYNTHETIC_CLASS_POSTFIX world xcutSet inReweavableMode trace addedClasses deletedTypenames manifest needToReweaveWorld isBatchWeave shadowMungerList typeMungerList lateTypeMungerList declareParentsList zipOutputStream customMungerFactory WEAVER_MANIFEST_VERSION CREATED_BY WEAVER_CREATED_BY lineNo inAspect org.aspectj.weaver.bcel.BcelWeaver org.aspectj.weaver.bcel.BcelWeaver  UnwovenClassFile *  private Map resources = new HashMap();   setup by prepareForWeave\r\n  setup by prepareForWeave\r\n  setup by prepareForWeave\r\n  setup by prepareForWeave\r\n  only called for testing\r\n  1 - resolve as is\r\n  fallback on inner class lookup mechanism\r\n  fixedName);\r\n  FIXME AV - better warning upon no such aspect from aop.xml\r\n  Bug 119657 ensure we use the unwoven aspect\r\n  build...\r\n  addition overriding the first\r\n  System.out.println(\"type: \" + type + \" for \" + aspectName);\r\n  ??? buffered\r\n  FIXME ASC performance? of this alternative soln.\r\n  bin  Get a list of all files (i.e. everything that isnt a directory)\r\n  For each file, add it either as a real .class file or as a resource\r\n  System.err.println(\"? addJarFile(\" + inFile + \", \" + outDir + \")\");\r\n  + \"'\");\r\n  Is this a directory we are looking at?\r\n  }\r\n  or we are in trouble...\r\n  \"BCELWeaver: processing class from input directory \"+classFile);\r\n  sourceJavaClasses.remove(typename);\r\n  type.isAspect());\r\n  update mungers\r\n  world.debug(\"shadow mungers=\" + shadowMungerList);\r\n  inconsistent pointcuts could lead to problems\r\n  evaluate the alternative set of formals. pr125699\r\n  text.\r\n  pc identity.\r\n  some things cant be shared...\r\n  same instance (identity)\r\n  primitive pcd\r\n  nothing to check\r\n  cant have problems if you dont match!\r\n  common.\r\n  if each branch binds it in exactly the same way...\r\n  JoinPoint in @AJ style\r\n  we know that numFormals > 0 or else we would not be called\r\n  nots can only appear at leaves in DNF\r\n  each formal must appear exactly once\r\n  look for withins\r\n  look for kinded\r\n  join points can have multiple signatures and so on.\r\n  System.out.println(\"? addManifest() newManifest=\" + newManifest);\r\n  }\r\n  this flushes and closes the acutal file\r\n  Used by some test cases only...\r\n  target of the relationship\r\n  repaired prior to weaving\r\n  ContextToken aspectToken =\r\n  special case for AtAspectJMungerOnly - see #113587\r\n  there *cant* be any reweavable state... (he bravely claimed...)\r\n  clear all state from files we'll be reweaving\r\n  (and this mechanism is applied recursively)\r\n  the eclipse source type) - pr113531\r\n  first weave into aspects\r\n  bug 119882 - see above comment for bug 113531\r\n  string compare is hideous\r\n  then weave into non-aspects\r\n  variation of \"weave\" that sources class files from an external source.\r\n  deow Checkers\r\n  advice)\r\n  element\r\n  example it might be a cflow entry munger.\r\n  put out a warning\r\n  Look at the supertype first\r\n  Then look at the superinterface list\r\n  Now do this type\r\n  and remove it from the list of\r\n  was built are in this world\r\n  are around!\r\n  reporting\r\n  see #104218\r\n  new: reweavable default with clever diff\r\n  WeaverAdapter.removeFromMap() can be fast!\r\n  clazz is null if the classfile was unchanged by weaving...\r\n  First pass - apply all decp mungers\r\n  Still first pass - apply all dec @type mungers\r\n  }\r\n  check the annotation is suitable for the target\r\n  TAG: WeavingMessage\r\n  BcelTypeMunger.mungeNewParent()\r\n  System.err.println(\"need to do declare parents for: \" + onType);\r\n  exposed for ClassLoader dynamic weaving\r\n  non-private for testing\r\n  Don't touch synthetic classes\r\n  Decide if we need to do actual weaving for this class\r\n  affected by ITDs\r\n  recover from crash whilst producing debug string\r\n  recover from crash whilst producing debug string\r\n  clazz.getWeaverState());\r\n  interface.\r\n  this is very odd return behavior trying to keep everyone happy\r\n  XXX what does bcel's getClassName do for inner names\r\n  ??? get compression scheme\r\n  weaving\r\n  setup by prepareForWeave\r\n  setup by prepareForWeave\r\n  setup by prepareForWeave\r\n  setup by prepareForWeave\r\n  UnwovenClassFile *  private Map resources = new HashMap();   setup by prepareForWeave\r\n  setup by prepareForWeave\r\n  setup by prepareForWeave\r\n  setup by prepareForWeave\r\n  only called for testing\r\n  1 - resolve as is\r\n  fallback on inner class lookup mechanism\r\n  fixedName);\r\n  FIXME AV - better warning upon no such aspect from aop.xml\r\n  Bug 119657 ensure we use the unwoven aspect\r\n  build...\r\n  addition overriding the first\r\n  System.out.println(\"type: \" + type + \" for \" + aspectName);\r\n  ??? buffered\r\n  FIXME ASC performance? of this alternative soln.\r\n  bin  Get a list of all files (i.e. everything that isnt a directory)\r\n  For each file, add it either as a real .class file or as a resource\r\n  System.err.println(\"? addJarFile(\" + inFile + \", \" + outDir + \")\");\r\n  + \"'\");\r\n  Is this a directory we are looking at?\r\n  }\r\n  or we are in trouble...\r\n  \"BCELWeaver: processing class from input directory \"+classFile);\r\n  sourceJavaClasses.remove(typename);\r\n  type.isAspect());\r\n  update mungers\r\n  world.debug(\"shadow mungers=\" + shadowMungerList);\r\n  inconsistent pointcuts could lead to problems\r\n  evaluate the alternative set of formals. pr125699\r\n  text.\r\n  pc identity.\r\n  some things cant be shared...\r\n  same instance (identity)\r\n  primitive pcd\r\n  nothing to check\r\n  cant have problems if you dont match!\r\n  common.\r\n  if each branch binds it in exactly the same way...\r\n  JoinPoint in @AJ style\r\n  we know that numFormals > 0 or else we would not be called\r\n  nots can only appear at leaves in DNF\r\n  each formal must appear exactly once\r\n  look for withins\r\n  look for kinded\r\n  join points can have multiple signatures and so on.\r\n  System.out.println(\"? addManifest() newManifest=\" + newManifest);\r\n  }\r\n  this flushes and closes the acutal file\r\n  Used by some test cases only...\r\n  target of the relationship\r\n  repaired prior to weaving\r\n  ContextToken aspectToken =\r\n  special case for AtAspectJMungerOnly - see #113587\r\n  there *cant* be any reweavable state... (he bravely claimed...)\r\n  clear all state from files we'll be reweaving\r\n  (and this mechanism is applied recursively)\r\n  the eclipse source type) - pr113531\r\n  first weave into aspects\r\n  bug 119882 - see above comment for bug 113531\r\n  string compare is hideous\r\n  then weave into non-aspects\r\n  variation of \"weave\" that sources class files from an external source.\r\n  deow Checkers\r\n  advice)\r\n  element\r\n  example it might be a cflow entry munger.\r\n  put out a warning\r\n  Look at the supertype first\r\n  Then look at the superinterface list\r\n  Now do this type\r\n  and remove it from the list of\r\n  was built are in this world\r\n  are around!\r\n  reporting\r\n  see #104218\r\n  new: reweavable default with clever diff\r\n  WeaverAdapter.removeFromMap() can be fast!\r\n  clazz is null if the classfile was unchanged by weaving...\r\n  First pass - apply all decp mungers\r\n  Still first pass - apply all dec @type mungers\r\n  }\r\n  check the annotation is suitable for the target\r\n  TAG: WeavingMessage\r\n  BcelTypeMunger.mungeNewParent()\r\n  System.err.println(\"need to do declare parents for: \" + onType);\r\n  exposed for ClassLoader dynamic weaving\r\n  non-private for testing\r\n  Don't touch synthetic classes\r\n  Decide if we need to do actual weaving for this class\r\n  affected by ITDs\r\n  recover from crash whilst producing debug string\r\n  recover from crash whilst producing debug string\r\n  clazz.getWeaverState());\r\n  interface.\r\n  this is very odd return behavior trying to keep everyone happy\r\n  XXX what does bcel's getClassName do for inner names\r\n  ??? get compression scheme\r\n  weaving\r\n  setup by prepareForWeave\r\n  setup by prepareForWeave\r\n  setup by prepareForWeave\r\n  setup by prepareForWeave\r\n /* List<UnwovenClassFile> */\r\n /* ShadowMunger */\r\n /* ConcreteTypeMunger */\r\n /* <Pointcut,Pointcut> */\r\n /* ShadowMunger */\r\n /*\r\n\t * Rewrite all of the pointcuts in the world into their most efficient form for subsequent matching. Also ensure that if\r\n\t * pc1.equals(pc2) then pc1 == pc2 (for non-binding pcds) by making references all point to the same instance. Since pointcuts\r\n\t * remember their match decision on the last shadow, this makes matching faster when many pointcuts share common elements, or\r\n\t * even when one single pointcut has one common element (which can be a side-effect of DNF rewriting).\r\n\t */\r\n /* BindingTypePattern */\r\n /* BindingPattern */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved.\r\n * This program and the accompanying materials are made available\r\n * under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *     PARC     initial implementation\r\n *     Alexandre Vasseur    support for @AJ aspects\r\n * ******************************************************************/\r\n /* List<UnwovenClassFile> */\r\n /* ShadowMunger */\r\n /* ConcreteTypeMunger */\r\n /* <Pointcut,Pointcut> */\r\n /* ShadowMunger */\r\n /*\r\n\t * Rewrite all of the pointcuts in the world into their most efficient form for subsequent matching. Also ensure that if\r\n\t * pc1.equals(pc2) then pc1 == pc2 (for non-binding pcds) by making references all point to the same instance. Since pointcuts\r\n\t * remember their match decision on the last shadow, this makes matching faster when many pointcuts share common elements, or\r\n\t * even when one single pointcut has one common element (which can be a side-effect of DNF rewriting).\r\n\t */\r\n /* BindingTypePattern */\r\n /* BindingPattern */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved.\r\n * This program and the accompanying materials are made available\r\n * under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *     PARC     initial implementation\r\n *     Alexandre Vasseur    support for @AJ aspects\r\n * ******************************************************************/\r\n","Shadow":"getIWorld getMungers hasThis getThisType getThisVar hasTarget getTargetType getTargetVar getArgTypes isShadowForArrayConstructionJoinpoint isShadowForMonitor getArgumentTypesForArrayConstructionShadow getGenericArgTypes getArgType getArgCount getEnclosingType getArgVar getThisJoinPointVar getThisJoinPointStaticPartVar getThisEnclosingJoinPointStaticPartVar getKindedAnnotationVar getWithinAnnotationVar getWithinCodeAnnotationVar getThisAnnotationVar getTargetAnnotationVar getArgAnnotationVar getEnclosingCodeSignature getKind getSignature getMatchingSignature setMatchingSignature getResolvedSignature getReturnType howMany toLegalJavaIdentifier argsOnStack allowsExtraction isSet hasHighPriorityExceptions hasReturnValue isEnclosingKind isTargetSameAsThis neverHasTarget neverHasThis getSimpleName read checkMunger checkCanThrow isDeclaredException addMunger implement sortMungers possiblyReportUnorderedAdvice prepareForMungers beautifyLocation reportWeavingMessage areTheSame determineRelKind implementMungers getSourceLocation toString toResolvedString toSet getIWorld getMungers hasThis getThisType getThisVar hasTarget getTargetType getTargetVar getArgTypes isShadowForArrayConstructionJoinpoint isShadowForMonitor getArgumentTypesForArrayConstructionShadow getGenericArgTypes getArgType getArgCount getEnclosingType getArgVar getThisJoinPointVar getThisJoinPointStaticPartVar getThisEnclosingJoinPointStaticPartVar getKindedAnnotationVar getWithinAnnotationVar getWithinCodeAnnotationVar getThisAnnotationVar getTargetAnnotationVar getArgAnnotationVar getEnclosingCodeSignature getKind getSignature getMatchingSignature setMatchingSignature getResolvedSignature getReturnType howMany toLegalJavaIdentifier argsOnStack allowsExtraction isSet hasHighPriorityExceptions hasReturnValue isEnclosingKind isTargetSameAsThis neverHasTarget neverHasThis getSimpleName read checkMunger checkCanThrow isDeclaredException addMunger implement sortMungers possiblyReportUnorderedAdvice prepareForMungers beautifyLocation reportWeavingMessage areTheSame determineRelKind implementMungers getSourceLocation toString toResolvedString toSet nextShadowID kind signature matchingSignature resolvedSignature enclosingShadow mungers shadowId MethodCall ConstructorCall MethodExecution ConstructorExecution FieldGet FieldSet StaticInitialization PreInitialization AdviceExecution Initialization ExceptionHandler SynchronizationLock SynchronizationUnlock MethodCallBit ConstructorCallBit MethodExecutionBit ConstructorExecutionBit FieldGetBit FieldSetBit StaticInitializationBit PreInitializationBit AdviceExecutionBit InitializationBit ExceptionHandlerBit SynchronizationLockBit SynchronizationUnlockBit MAX_SHADOW_KIND SHADOW_KINDS ALL_SHADOW_KINDS_BITS NO_SHADOW_KINDS_BITS bit hasReturnValueFlag isEnclosingKindFlag isTargetSameAsThisFlag neverHasTargetFlag neverHasThisFlag nextShadowID kind signature matchingSignature resolvedSignature enclosingShadow mungers shadowId MethodCall ConstructorCall MethodExecution ConstructorExecution FieldGet FieldSet StaticInitialization PreInitialization AdviceExecution Initialization ExceptionHandler SynchronizationLock SynchronizationUnlock MethodCallBit ConstructorCallBit MethodExecutionBit ConstructorExecutionBit FieldGetBit FieldSetBit StaticInitializationBit PreInitializationBit AdviceExecutionBit InitializationBit ExceptionHandlerBit SynchronizationLockBit SynchronizationUnlockBit MAX_SHADOW_KIND SHADOW_KINDS ALL_SHADOW_KINDS_BITS NO_SHADOW_KINDS_BITS bit hasReturnValueFlag isEnclosingKindFlag isTargetSameAsThisFlag neverHasTargetFlag neverHasThisFlag org.aspectj.weaver.Shadow org.aspectj.weaver.Shadow  easier to spot than zero.   every time we build a shadow, it gets a new id\r\n  ----\r\n  will return the right length array of ints depending on how many dimensions the array has\r\n  annotation variables\r\n  Bits here are 1<<(Kind.getKey()) - and unfortunately keys didn't start at zero so bits here start at 2\r\n  !!! this is false for handlers!\r\n  XXX revisit along with removal of priorities\r\n  XXX much too lenient rules here, need to walk up exception handlers\r\n  from\r\n  from\r\n  ,\r\n  from\r\n  from\r\n  Bunch of code to work out whether to report xlints for advice that isn't ordered at this Joinpoint\r\n  this means that we have circular dependencies\r\n  precedence specified between the two aspects at this shadow.\r\n  Ask the world if it knows about precedence between these\r\n  create to support other features of the language.\r\n  Make sure they are the right type\r\n  Compare every pair of advice mungers\r\n  not quite optimal... but the xlint is ignore by default\r\n  can't use File.getName() as this fails when a Linux box encounters a path created on Windows and vice-versa\r\n  we have been woven by a binary aspect\r\n  only want to add the extra info if we're from a jar file\r\n  if it's a binary file then also want to give the file name\r\n  (e.g. IdWeaveTestCase in the weaver testcases)\r\n  Only report on interesting advice kinds ...\r\n  Don't report it again!\r\n  hmmm, this means some kind of nesting is going on, urgh\r\n  this is the first time through, let's continue...\r\n  woven both exit points\r\n  System.err.println(\"Dont want a message about this: \"+ak);\r\n  What is being applied\r\n  Where is it being applied\r\n  What kind of advice?\r\n  Is a runtime test being stuffed in the code?\r\n  What is being applied\r\n  What is being applied\r\n  TAG: WeavingMessage\r\n  System.err.println(\"munger: \" + munger + \" on \" + this);\r\n  + getSourceLines();\r\n  easier to spot than zero.   every time we build a shadow, it gets a new id\r\n  ----\r\n  will return the right length array of ints depending on how many dimensions the array has\r\n  annotation variables\r\n  Bits here are 1<<(Kind.getKey()) - and unfortunately keys didn't start at zero so bits here start at 2\r\n  !!! this is false for handlers!\r\n  XXX revisit along with removal of priorities\r\n  XXX much too lenient rules here, need to walk up exception handlers\r\n  from\r\n  from\r\n  ,\r\n  from\r\n  from\r\n  Bunch of code to work out whether to report xlints for advice that isn't ordered at this Joinpoint\r\n  this means that we have circular dependencies\r\n  precedence specified between the two aspects at this shadow.\r\n  Ask the world if it knows about precedence between these\r\n  create to support other features of the language.\r\n  Make sure they are the right type\r\n  Compare every pair of advice mungers\r\n  not quite optimal... but the xlint is ignore by default\r\n  can't use File.getName() as this fails when a Linux box encounters a path created on Windows and vice-versa\r\n  we have been woven by a binary aspect\r\n  only want to add the extra info if we're from a jar file\r\n  if it's a binary file then also want to give the file name\r\n  (e.g. IdWeaveTestCase in the weaver testcases)\r\n  Only report on interesting advice kinds ...\r\n  Don't report it again!\r\n  hmmm, this means some kind of nesting is going on, urgh\r\n  this is the first time through, let's continue...\r\n  woven both exit points\r\n  System.err.println(\"Dont want a message about this: \"+ak);\r\n  What is being applied\r\n  Where is it being applied\r\n  What kind of advice?\r\n  Is a runtime test being stuffed in the code?\r\n  What is being applied\r\n  What is being applied\r\n  TAG: WeavingMessage\r\n  System.err.println(\"munger: \" + munger + \" on \" + this);\r\n  + getSourceLines();\r\n /* ShadowMunger */\r\n /*\r\n\t * Ensure we report a nice source location - particular in the case where the source info is missing (binary weave).\r\n\t */\r\n /*\r\n\t * Report a message about the advice weave that has occurred. Some messing about to make it pretty ! This code is just asking\r\n\t * for an NPE to occur ...\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* ShadowMunger */\r\n /*\r\n\t * Ensure we report a nice source location - particular in the case where the source info is missing (binary weave).\r\n\t */\r\n /*\r\n\t * Report a message about the advice weave that has occurred. Some messing about to make it pretty ! This code is just asking\r\n\t * for an NPE to occur ...\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","AjTypeDeclFactory":"createTypeFor org.aspectj.ajdt.core.dom.AjTypeDeclFactory","ProblemPackageBinding":"problemId problemId org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ProblemPackageBinding","CaptureBinding":"computeUniqueKey debugName genericTypeSignature initializeBounds isCapture isEquivalentTo readableName shortReadableName toString lowerBound wildcard captureID sourceType position org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CaptureBinding  treat capture as public\r\n  prevent cyclic capture: given X<T>, capture(X<? extends T> could yield a circular type\r\n  prevent cyclic capture: given X<T>, capture(X<? extends T> could yield a circular type\r\n  no substitution for wildcard bound (only formal bounds from type variables are to be substituted: 104082)\r\n  still need to capture bound supertype as well so as not to expose wildcards to the outside (111208)\r\n  it may occur that the bound is less specific, then consider glb (202404)\r\n  merge wildcard bound into variable superinterfaces using glb\r\n  capture of ? extends X[]\r\n  wildcard\r\n /* information to compute unique binding key */\r\n /*\r\n\t * sourceTypeKey ! wildcardKey position semi-colon\r\n\t * p.X { capture of ? } --> !*123; (Lp/X; in declaring type except if leaf)\r\n\t * p.X { capture of ? extends p.Y } --> !+Lp/Y;123; (Lp/X; in declaring type except if leaf)\r\n\t */\r\n","RelevanceConstants":"R_DEFAULT R_INTERESTING R_CASE R_CAMEL_CASE R_EXACT_NAME R_EXPECTED_TYPE R_EXACT_EXPECTED_TYPE R_INTERFACE R_CLASS R_ENUM R_ANNOTATION R_EXCEPTION R_ENUM_CONSTANT R_ABSTRACT_METHOD R_NON_STATIC R_UNQUALIFIED R_QUALIFIED R_NAME_FIRST_PREFIX R_NAME_PREFIX R_NAME_FIRST_SUFFIX R_NAME_SUFFIX R_NAME_LESS_NEW_CHARACTERS R_METHOD_OVERIDE R_NON_RESTRICTED R_TRUE_OR_FALSE R_INLINE_TAG R_VALUE_TAG R_NON_INHERITED R_NO_PROBLEMS R_RESOLVED R_TARGET org.aspectj.org.eclipse.jdt.internal.codeassist.RelevanceConstants","UserLibraryClasspathContainerInitializer":"canUpdateClasspathContainer getComparisonID getDescription initialize isUserLibraryContainer requestClasspathContainerUpdate verbose_no_user_library_found verbose_not_a_user_library org.aspectj.org.eclipse.jdt.internal.core.UserLibraryClasspathContainerInitializer  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.ClasspathContainerInitializer#canUpdateClasspathContainer(org.eclipse.core.runtime.IPath, org.aspectj.org.eclipse.jdt.core.IJavaProject)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.ClasspathContainerInitializer#getComparisonID(org.eclipse.core.runtime.IPath, org.aspectj.org.eclipse.jdt.core.IJavaProject)\r\n\t */\r\n","ObjectCache":"clear containsKey get hashCode put rehash size toString keyTable valueTable elementSize threshold org.aspectj.org.eclipse.jdt.internal.compiler.codegen.ObjectCache  assumes the threshold is never equal to the size of the table\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","ThrowStatement":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getExpression setExpression memSize treeSize analyseCode generateCode printStatement resolve traverse EXPRESSION_PROPERTY PROPERTY_DESCRIPTORS expression exception exceptionType org.aspectj.org.eclipse.jdt.core.dom.ThrowStatement org.aspectj.org.eclipse.jdt.internal.compiler.ast.ThrowStatement  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  lazy init must be thread-safe for readers\r\n  need to check that exception thrown is actually caught somewhere\r\n  $NON-NLS-1$\r\n  if compliant with 1.4, this problem will not be reported\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","LTWWorld":"getClassLoader resolveDelegate resolveIfBootstrapDelegate resolveReflectionTypeDelegate loadedClass getAnnotationFinder resolve makeConcurrentMap makeConcurrentMapClass isRunMinimalMemory completeBinaryType completeHierarchyForType needsCompletion isLocallyDefined completeNonLocalType storeClass accept getClassLoader resolveDelegate resolveIfBootstrapDelegate resolveReflectionTypeDelegate loadedClass getAnnotationFinder resolve makeConcurrentMap makeConcurrentMapClass isRunMinimalMemory completeBinaryType completeHierarchyForType needsCompletion isLocallyDefined completeNonLocalType storeClass accept annotationFinder weavingContext classLoaderString classLoaderParentString concurrentMapClass ShareBootstrapTypes bootstrapTypes serialVersionUID typeCompletionInProgress typesForCompletion annotationFinder weavingContext classLoaderString classLoaderParentString concurrentMapClass ShareBootstrapTypes bootstrapTypes serialVersionUID typeCompletionInProgress typesForCompletion org.aspectj.weaver.ltw.LTWWorld org.aspectj.weaver.ltw.LTWWorld  use reflection delegates for all bootstrap types\r\n  }\r\n  are queued up\r\n  who knows ?!?\r\n  use reflection delegates for all bootstrap types\r\n  }\r\n  are queued up\r\n  who knows ?!?\r\n /* <String, WeakReference<ReflectionBasedReferenceTypeDelegate>> */\r\n /* (non-Javadoc)\r\n     * @see org.aspectj.weaver.reflect.IReflectionWorld#resolve(java.lang.Class)\r\n     */\r\n /*ResolvedType*/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Ron Bodkin\t\tInitial implementation\r\n * ******************************************************************/\r\n /* <String, WeakReference<ReflectionBasedReferenceTypeDelegate>> */\r\n /* (non-Javadoc)\r\n     * @see org.aspectj.weaver.reflect.IReflectionWorld#resolve(java.lang.Class)\r\n     */\r\n /*ResolvedType*/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Ron Bodkin\t\tInitial implementation\r\n * ******************************************************************/\r\n","JarEntryFile":"clone getContents getChildren isFile toString NO_CHILDREN org.aspectj.org.eclipse.jdt.internal.core.JarEntryFile  avoid leaking ZipFiles\r\n  $NON-NLS-1$\t  $NON-NLS-2$ ","DiagnoseParser":"copy problemReporter reallocateStacks diagnoseParse errorRecovery primaryPhase mergeCandidate checkPrimaryDistance primaryDiagnosis getTermIndex getNtermIndex isBetterSymbol misspell scopeTrial scopeTrialCheck secondaryCheck secondaryPhase misplacementRecovery secondaryRecovery secondaryDiagnosis parseCheck reportError reportError reportPrimaryError reportSecondaryError getNTermTemplate toString DEBUG DEBUG_PARSECHECK STACK_INCREMENT BEFORE_CODE INSERTION_CODE INVALID_CODE SUBSTITUTION_CODE DELETION_CODE MERGE_CODE MISPLACED_CODE SCOPE_CODE SECONDARY_CODE EOF_CODE BUFF_UBOUND BUFF_SIZE MAX_DISTANCE MIN_DISTANCE options lexStream errorToken errorTokenStart currentToken stackLength stateStackTop stack locationStack locationStartStack tempStackTop tempStack prevStackTop prevStack nextStackTop nextStack scopeStackTop scopeIndex scopePosition list buffer NIL stateSeen statePoolTop statePool parser recoveryScanner reportProblem symbol location distance misspellIndex code bufferPosition symbol code distance bufferPosition stackPosition numDeletions symbol recoveryOnNextStack state next org.aspectj.org.eclipse.jdt.internal.compiler.parser.diagnose.DiagnoseParser  private static final int ERROR_CODE = 1;\r\n  \r\n  \r\n  \r\n  \r\n  SHIFT-REDUCE action or SHIFT action ?\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  Parser.terminal_index[lexStream.kind(prevtok)],\r\n  \r\n  \r\n  \r\n  \r\n  next_stack available\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  do not merge the first token\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  reset element\r\n  do not replace the first token\r\n  \r\n  \r\n  \r\n  deletion\r\n  \r\n  deletion\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  adjust top of stack to reflect last goto\r\n  next move is shift or shift-reduce.\r\n  shift-reduce on candidate?\r\n  \r\n  \r\n  \r\n  goto action?\r\n  \r\n  \r\n  }\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  avoid too much recursive call to improve performance\r\n  \r\n  \r\n  \r\n  match?\r\n  state was found\r\n  save\r\n  swap\r\n  restore\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  next_stack not available, initialize ...\r\n  elmt not available\r\n  \r\n  \r\n  \r\n  \r\n  elmt not available\r\n  \r\n  upper bound\r\n  \r\n  upper bound\r\n  \r\n  \r\n  SCOPE_CODE || SECONDARY_CODE\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  same loop as 'process_non_terminal'\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Stack overflow!!!\r\n  shift action\r\n  error action\r\n  accept action\r\n  shift-reduce action\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  reduce action\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  process_non_terminal:\r\n  \r\n  any more symbols to print?\r\n  error start is on the last token start\r\n","CreateTypeOperation":"generateElementAST generateResultHandle getMainTaskName getType verifyNameCollision getASTNodeName rename org.aspectj.org.eclipse.jdt.internal.core.CreateTypeOperation","ThreadStackFactoryImpl11":"getNewThreadStack getNewThreadCounter getNewThreadStack getNewThreadCounter getNewThreadStack getNewThreadCounter org.aspectj.runtime.internal.cflowstack.ThreadStackFactoryImpl11 org.aspectj.runtime.internal.cflowstack.ThreadStackFactoryImpl11 org.aspectj.runtime.internal.cflowstack.ThreadStackFactoryImpl11 /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * ******************************************************************/\r\n","SearchMatch":"getAccuracy getElement getLength getOffset getParticipant getResource getRule isEquivalent isErasure isExact isImplicit isRaw isInsideDocComment setAccuracy setElement setInsideDocComment setImplicit setLength setOffset setParticipant setResource setRule setRaw toString A_ACCURATE A_INACCURATE element length offset accuracy participant resource insideDocComment ALL_GENERIC_FLAVORS rule raw implicit org.aspectj.org.eclipse.jdt.core.search.SearchMatch  store the rule used while reporting the match\r\n  store other necessary information\r\n  reset generic flavors\r\n  accuracy may have also some rule information\r\n  default is outside a doc comment\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (non-javadoc)\r\n\t * @see java.lang.Object#toString()\r\n\t */\r\n","MethodSignature":"getReturnType getMethod getReturnType getMethod getReturnType getMethod org.aspectj.lang.reflect.MethodSignature org.aspectj.lang.reflect.MethodSignature org.aspectj.lang.reflect.MethodSignature /* name is consistent with reflection API */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* name is consistent with reflection API */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* name is consistent with reflection API */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","VariableDeclarationExpression":"propertyDescriptors internalStructuralPropertiesForType internalGetSetIntProperty internalGetSetChildProperty internalGetChildListProperty getNodeType0 clone0 subtreeMatch0 accept0 modifiers getModifiers setModifiers internalSetModifiers getType setType fragments memSize treeSize MODIFIERS_PROPERTY MODIFIERS2_PROPERTY TYPE_PROPERTY FRAGMENTS_PROPERTY PROPERTY_DESCRIPTORS_2_0 PROPERTY_DESCRIPTORS_3_0 modifiers modifierFlags baseType variableDeclarationFragments org.aspectj.org.eclipse.jdt.core.dom.VariableDeclarationExpression  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  more efficient than just calling unsupportedIn2() to check\r\n  but this would require tracking changes to this.modifiers\r\n  JLS2 behavior - bona fide property\r\n  more efficient than checking getAST().API_LEVEL\r\n  lazy init must be thread-safe for readers\r\n  treat Operator as free\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /*package*/\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","StructureSearchManager":"findMatches findMatchesHelper org.aspectj.ajde.ui.StructureSearchManager /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation\r\n *     Helen Hawkins  Converted to new interface (bug 148190) \r\n * ******************************************************************/\r\n","NavigationHistoryModel":"navigateBack navigateForward navigateToNode currNode backHistory forwardHistory org.aspectj.ajde.ui.internal.NavigationHistoryModel /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","SourceRefElement":"closing createElementInfo copy delete equals findNode generateInfos getCompilationUnit getCorrespondingResource getHandleFromMemento getHandleMemento getHandleUpdatingCountFromMemento getOccurrenceCount getOpenableParent getPath getResource getSource getSourceRange getUnderlyingResource hasChildren isStructureKnown move rename toStringName occurrenceCount org.aspectj.org.eclipse.jdt.internal.core.SourceRefElement  not used for source ref elements\r\n  receiver doesn't exist\r\n  structure is always known inside an openable\r\n  $NON-NLS-1$\r\n /*\r\n\t * A count to uniquely identify this element in the case\r\n\t * that a duplicate named element exists. For example, if\r\n\t * there are two fields in a compilation unit with the\r\n\t * same name, the occurrence count is used to distinguish\r\n\t * them.  The occurrence count starts at 1 (thus the first \r\n\t * occurrence is occurrence 1, not occurrence 0).\r\n\t */\r\n /*\r\n * @see JavaElement#generateInfos\r\n */\r\n /*\r\n * @see JavaElement\r\n */\r\n /*\r\n * Update the occurence count of the receiver and creates a Java element handle from the given memento.\r\n * The given working copy owner is used only for compilation unit handles.\r\n */\r\n /*\r\n * @see IMember#getOccurrenceCount()\r\n */\r\n /*\r\n * @see IJavaElement\r\n */\r\n /*\r\n * @see IJavaElement\r\n */\r\n","ILineNumberAttribute":"getLineNumberTableLength getLineNumberTable org.aspectj.org.eclipse.jdt.core.util.ILineNumberAttribute","ReflectionBasedResolvedMemberImpl":"getMember setGenericSignatureInformationProvider getGenericParameterTypes getGenericReturnType isSynthetic isVarargsMethod isBridgeMethod setAnnotationFinder hasAnnotation hasAnnotations getAnnotationTypes getAnnotationOfType getAnnotationDefaultValue getParameterAnnotationTypes unpackAnnotations getMember setGenericSignatureInformationProvider getGenericParameterTypes getGenericReturnType isSynthetic isVarargsMethod isBridgeMethod setAnnotationFinder hasAnnotation hasAnnotations getAnnotationTypes getAnnotationOfType getAnnotationDefaultValue getParameterAnnotationTypes unpackAnnotations annotationFinder gsigInfoProvider reflectMember annotationFinder gsigInfoProvider reflectMember org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ResolvedMemberImpl#getGenericParameterTypes()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ResolvedMemberImpl#getGenericReturnType()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ResolvedMemberImpl#isSynthetic()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ResolvedMemberImpl#isVarargsMethod()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ResolvedMemberImpl#isBridgeMethod()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ResolvedMemberImpl#getGenericParameterTypes()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ResolvedMemberImpl#getGenericReturnType()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ResolvedMemberImpl#isSynthetic()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ResolvedMemberImpl#isVarargsMethod()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ResolvedMemberImpl#isBridgeMethod()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","AnnotationComponent":"getComponentNameIndex getComponentName getComponentValue sizeInBytes componentNameIndex componentName componentValue readOffset org.aspectj.org.eclipse.jdt.internal.core.util.AnnotationComponent /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IAnnotationComponent#getComponentNameIndex()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IAnnotationComponent#getComponentName()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IAnnotationComponent#getComponentValue()\r\n\t */\r\n","PseudoTokens":"parsePointcut checkEof reportError maybeParseDominatesPattern parsePerClause parseDeclare parseAnnotationDeclare postParse print tokenSource tokens endToken org.aspectj.ajdt.internal.compiler.ast.PseudoTokens  XXX this is redundant with the field above\r\n  there is no eof check here\r\n  \r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.ast.ASTNode#print(int, java.lang.StringBuffer)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","UnlockSignatureImpl":"createToString getParameterType createToString getParameterType createToString getParameterType parameterType parameterType parameterType org.aspectj.runtime.reflect.UnlockSignatureImpl org.aspectj.runtime.reflect.UnlockSignatureImpl org.aspectj.runtime.reflect.UnlockSignatureImpl","AndAnnotationTypePattern":"matches matches resolve resolveBindings parameterizeWith read write equals hashCode toString getLeft getRight accept traverse setForParameterAnnotationMatch matches matches resolve resolveBindings parameterizeWith read write equals hashCode toString getLeft getRight accept traverse setForParameterAnnotationMatch left right left right org.aspectj.weaver.patterns.AndAnnotationTypePattern org.aspectj.weaver.patterns.AndAnnotationTypePattern /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.AnnotationTypePattern#resolveBindings(org.aspectj.weaver.patterns.IScope, org.aspectj.weaver.patterns.Bindings, boolean)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.AnnotationTypePattern#resolveBindings(org.aspectj.weaver.patterns.IScope, org.aspectj.weaver.patterns.Bindings, boolean)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","MethodInfo":"createMethod decodeAnnotations decodeMethodAnnotations decodeParamAnnotations compareTo getAnnotations getArgumentNames getDefaultValue getExceptionTypeNames getGenericSignature getMethodDescriptor getModifiers getParameterAnnotations getSelector getTagBits initialize isClinit isConstructor isSynthetic readExceptionAttributes readModifierRelatedAttributes sizeInBytes toString toString toStringContent readCodeAttribute decodeCodeAttribute decodeLocalVariableAttribute getAccessFlags getAttributeCount getAttributes getCodeAttribute getDescriptor getDescriptorIndex getExceptionAttribute getName getNameIndex isAbstract isClinit isConstructor isDeprecated isNative isSynthetic sizeInBytes noException noArgumentNames accessFlags attributeBytes descriptor exceptionNames name signature signatureUtf8Offset tagBits argumentNames argumentNamesIndex accessFlags attributeBytes attributes attributesCount codeAttribute descriptor descriptorIndex exceptionAttribute isDeprecated isSynthetic name nameIndex org.aspectj.org.eclipse.jdt.internal.compiler.classfmt.MethodInfo org.aspectj.org.eclipse.jdt.internal.core.util.MethodInfo  check the name of each attribute\r\n  need to resize\r\n  u2 attribute_name_index + u4 attribute_length + u1 num_parameters\r\n  decode the signature\r\n  read the name\r\n  compute the accessflag. Don't forget the deprecated attribute\r\n  read the name\r\n  Can only match <clinit>\r\n  Can only match <init>\r\n  read the number of exception entries\r\n  place the readOffset at the beginning of the exceptions table\r\n  test added for obfuscated .class file. See 79772\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  resize\r\n  Can only match <clinit>\r\n  Can only match <init>\r\n","HashtableOfObject":"clear clone containsKey get put removeKey rehash size toString keyTable valueTable elementSize threshold org.aspectj.org.eclipse.jdt.internal.compiler.util.HashtableOfObject  to avoid using Enumerations, walk the individual tables skipping nulls\r\n  number of elements in the table\r\n  size represents the expected number of elements\r\n  assumes the threshold is never equal to the size of the table\r\n  double the number of expected elements\r\n  $NON-NLS-1$\r\n  $NON-NLS-2$ ","NameBindingPointcut":"exposeStateForVar getBindingTypePatterns getBindingAnnotationTypePatterns exposeStateForVar getBindingTypePatterns getBindingAnnotationTypePatterns org.aspectj.weaver.patterns.NameBindingPointcut org.aspectj.weaver.patterns.NameBindingPointcut  unchecked warning already issued...\r\n  unchecked warning already issued...\r\n /*<BindingTypePattern>*/\r\n /*<BindingAnnotationTypePattern>*/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /*<BindingTypePattern>*/\r\n /*<BindingAnnotationTypePattern>*/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","Location":"update inputOffset outputLine outputColumn outputIndentationLevel needSpace pendingSpace nlsTagCounter lastLocalDeclarationSourceStart numberOfIndentations lastNumberOfNewLines editsIndex textEdit org.aspectj.org.eclipse.jdt.internal.formatter.Location  chunk management\r\n  edits management\r\n","IClassFile":"becomeWorkingCopy getBytes getType getWorkingCopy isClass isInterface org.aspectj.org.eclipse.jdt.core.IClassFile","ChangeClasspathOperation":"canModifyRoots classpathChanged getSchedulingRule isReadOnly canChangeResources org.aspectj.org.eclipse.jdt.internal.core.ChangeClasspathOperation  changing the classpath can modify roots\r\n  create delta\r\n  ensure indexes are updated\r\n  ensure classpath is validated on next build\r\n  ensure project references are updated on next build\r\n  workaround for https:  since some clients rely on the project references when run inside an IWorkspaceRunnable\r\n  no lock taken while changing classpath\r\n /*\r\n\t * The resolved classpath of the given project may have changed:\r\n\t * - generate a delta\r\n\t * - trigger indexing\r\n\t * - update project references\r\n\t * - create resolved classpath markers\r\n\t */\r\n /*\r\n * Abstract class for operations that change the classpath\r\n */\r\n","TrackedNodePosition":"getStartPosition getLength group node org.aspectj.org.eclipse.jdt.internal.core.dom.rewrite.TrackedNodePosition /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.dom.ITrackedNodePosition#getStartPosition()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.dom.ITrackedNodePosition#getLength()\r\n\t */\r\n","SearchableEnvironmentRequestor":"acceptInitializer acceptPackageFragment acceptType requestor unitToSkip project nameLookup checkAccessRestrictions org.aspectj.org.eclipse.jdt.internal.core.SearchableEnvironmentRequestor  determine associated access restriction\r\n  reverse map always contains resolved CP entry\r\n  TODO (philippe) improve char[] <-> String conversions to avoid performing them on the fly\r\n","CompilationUnitDeclaration":"compare abort analyseCode cleanUp cleanUp checkUnusedImports compilationResult declarationOfType generateCode getFileName getMainTypeName isEmpty isPackageInfo hasErrors print propagateInnerEmulationForAllLocalTypes recordStringLiteral record resolve reportNLSProblems tagAsHavingErrors traverse STRING_LITERAL_COMPARATOR STRING_LITERALS_INCREMENT currentPackage imports types comments ignoreFurtherInvestigation ignoreMethodBodies scope problemReporter compilationResult localTypes localTypeCount isPropagatingInnerClassEmulation javadoc nlsTags stringLiterals stringLiteralsPtr org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration  once pointless to investigate due to errors\r\n  1.5 addition for package-info.java\r\n  by definition of a compilation unit....\r\n  request inner emulation propagation\r\n  local members are already in the list\r\n  recovery is already done\r\n  clear the classFile back pointer to the bindings\r\n  null out the classfile backpointer to a type binding\r\n  null out the type's scope backpointers\r\n  propagate the flag to request problem type creation\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  only propagate for reachable local types\r\n  resolve compilation unit javadoc package if any\r\n  resolve synthetic type declaration\r\n  set empty javadoc to avoid missing warning (see bug https:  resolve annotations if any\r\n  need to iterate both arrays to find non matching elements\r\n  all nls tags have been processed, so remaining string literals are not externalized\r\n  resize string literals\r\n  resolve synthetic type declaration\r\n  resolve javadoc package if any\r\n /*\r\n\t *\tWe cause the compilation task to abort to a given extent.\r\n\t */\r\n /*\r\n\t * Dispatch code analysis AND request saturation of inner emulation\r\n\t */\r\n /*\r\n\t * When unit result is about to be accepted, removed back pointers\r\n\t * to compiler structures.\r\n\t */\r\n /*\r\n\t * Finds the matching type amoung this compilation unit types.\r\n\t * Returns null if no type with this name is found.\r\n\t * The type name is a compound name\r\n\t * eg. if we're looking for X.A.B then a type name would be {X, A, B}\r\n\t */\r\n /*\r\n\t * Force inner local types to update their innerclass emulation\r\n\t */\r\n /*\r\n\t * Keep track of all local types, so as to update their innerclass\r\n\t * emulation later on.\r\n\t */\r\n /*\r\n\t\t\t * resolve javadoc package if any\r\n\t\t\t * we do it now and the javadoc in the fake type won't be resolved\r\n\t\t\t */\r\n","SuppressAjWarnings":"/* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Wes Isberg       initial implementation \r\n *   Andy Clement       fleshed out to match SuppressWarnings\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Wes Isberg       initial implementation \r\n *   Andy Clement       fleshed out to match SuppressWarnings\r\n * ******************************************************************/\r\n","TypeParameterElementInfo":"nameStart nameEnd bounds org.aspectj.org.eclipse.jdt.internal.core.TypeParameterElementInfo /*\r\n\t * The start position of this type parameter's name in the its\r\n\t * openable's buffer.\r\n\t */\r\n /*\r\n\t * The last position of this type parameter name in the its\r\n\t * openable's buffer.\r\n\t */\r\n /*\r\n\t * The bounds names of this type parameter.\r\n\t */\r\n","CascadingMethodInvocationFragmentBuilder":"fragments size visit fragmentsList org.aspectj.org.eclipse.jdt.internal.formatter.CascadingMethodInvocationFragmentBuilder /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ASTVisitor#visit(org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend, org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BlockScope)\r\n\t */\r\n","CreatePackageFragmentOperation":"executeOperation verify pkgName org.aspectj.org.eclipse.jdt.internal.core.CreatePackageFragmentOperation","ICommentAttributes":"COMMENT_BLANKLINE COMMENT_BREAK COMMENT_CLOSE COMMENT_CODE COMMENT_HTML COMMENT_IMMUTABLE COMMENT_NEWLINE COMMENT_OPEN COMMENT_PARAGRAPH COMMENT_PARAMETER COMMENT_ROOT COMMENT_SEPARATOR COMMENT_FIRST_TOKEN COMMENT_STARTS_WITH_RANGE_DELIMITER org.aspectj.org.eclipse.jdt.internal.formatter.comment.ICommentAttributes","CatchClauseSignature":"getParameterType getParameterName getParameterType getParameterName getParameterType getParameterName org.aspectj.lang.reflect.CatchClauseSignature org.aspectj.lang.reflect.CatchClauseSignature org.aspectj.lang.reflect.CatchClauseSignature /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","Buffer":"addBufferChangedListener append append close getChar getCharacters getContents getLength getOwner getText getUnderlyingResource hasUnsavedChanges isClosed isReadOnly moveAndResizeGap notifyChanged removeBufferChangedListener replace replace save setContents setContents setReadOnly toString file flags contents changeListeners owner gapStart gapEnd lock F_HAS_UNSAVED_CHANGES F_IS_READ_ONLY F_IS_CLOSED org.aspectj.org.eclipse.jdt.internal.core.Buffer  notify outside of synchronized block\r\n  ensure that no other thread is adding  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  move gap\r\n  overwrite\r\n  shrink gap\r\n  enlarge the gap\r\n  determine if saving is required\r\n  Get encoding\r\n  Create bytes array\r\n  see bug https:  Set file contents\r\n  use a platform operation to update the resource contents\r\n  the resource no longer has unsaved changes\r\n  after creation by buffer factory\r\n  ignore if buffer is closed (as per spec)\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","EnumElementValueGen":"dump stringifyValue getEnumTypeString getEnumValueString getValueIndex getTypeIndex dump stringifyValue getEnumTypeString getEnumValueString getValueIndex getTypeIndex typeIdx valueIdx typeIdx valueIdx org.aspectj.apache.bcel.classfile.annotation.EnumElementValueGen org.aspectj.apache.bcel.classfile.annotation.EnumElementValueGen  For enum types, these two indices point to the type and value\r\n  was addClass(t);\r\n  was addString(value);\r\n  was addClass(value.getEnumTypeString());\r\n  was addString(value.getEnumValueString());\r\n  u1 type of value (ENUM_CONSTANT == 'e')\r\n  u2\r\n  u2\r\n  return ((ConstantUtf8)getConstantPool().getConstant(cu8.getNameIndex())).getBytes();\r\n  BCELBUG: Should we need to call utility.signatureToString() on the output here?\r\n  For enum types, these two indices point to the type and value\r\n  was addClass(t);\r\n  was addString(value);\r\n  was addClass(value.getEnumTypeString());\r\n  was addString(value.getEnumValueString());\r\n  u1 type of value (ENUM_CONSTANT == 'e')\r\n  u2\r\n  u2\r\n  return ((ConstantUtf8)getConstantPool().getConstant(cu8.getNameIndex())).getBytes();\r\n  BCELBUG: Should we need to call utility.signatureToString() on the output here?\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement -     initial implementation {date}\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement -     initial implementation {date}\r\n * ******************************************************************/\r\n","InnerClassesAttributeEntry":"getAccessFlags getInnerClassName getInnerClassNameIndex getInnerName getInnerNameIndex getOuterClassName getOuterClassNameIndex innerClassNameIndex outerClassNameIndex innerNameIndex innerClassName outerClassName innerName accessFlags org.aspectj.org.eclipse.jdt.internal.core.util.InnerClassesAttributeEntry","DocumentAdapter":"set replace buffer org.aspectj.org.eclipse.jdt.internal.core.DocumentAdapter /*\r\n * Adapts an IBuffer to IDocument\r\n */\r\n","SearchDocument":"addIndexEntry getByteContents getCharContents getEncoding getParticipant getPath removeAllIndexEntries documentPath participant org.aspectj.org.eclipse.jdt.core.search.SearchDocument","BinaryIndexer":"addBinaryStandardAnnotations addBinaryTargetAnnotation addBinaryRetentionAnnotation addBinaryAnnotation addPairValue addTypeReference convertToArrayType convertToArrayType decodeFieldType decodeParameterTypes decodeReturnType extractArgCount extractClassName extractName extractClassReference extractReferenceFromConstantPool extractType indexDocument replace replace BYTE CHAR DOUBLE FLOAT INT LONG SHORT BOOLEAN VOID INIT org.aspectj.org.eclipse.jdt.internal.core.search.indexing.BinaryIndexer  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  skip local type names\r\n  copy it so the original is not modified\r\n  there is no parameter\r\n  resize\r\n  skip first synthetic parameter\r\n  there is no parameter\r\n  synthetic means that parameter type has same signature than given class\r\n  do not verify following parameters\r\n  verify if first parameter is synthetic\r\n  the entry at i has to be a field ref or a method  the entry at i has to be a class ref.\r\n  add reference to the class  add reference to the interface and method name and type\r\n  add a method reference\r\n  get class name and see if it's a local type or not\r\n  add a constructor reference, use class name to extract arg count if it's a local type to remove synthetic parameter\r\n  add reference to the class and method name and type\r\n  add a type reference\r\n  skip over array references\r\n  so that it looks like java.lang.String\r\n  also add a simple reference on each segment of the qualification (see http:  ignore\r\n  $NON-NLS-1$   we remove all entries relative to the boggus document\r\n  $NON-NLS-1$   contents can potentially be null if a IOException occurs while retrieving the contents\r\n  looks like java  need to extract the package name and the simple name\r\n  See PR 1GIR345: ITPJCORE:ALL - Indexer: NegativeArraySizeException\r\n  set specific ['0'] value for local and anonymous to be able to filter them\r\n  type parameters\r\n  eliminate invalid innerclasses (1G4KCF7)\r\n  Look for references in class annotations\r\n  first reference all methods declarations and field declarations\r\n  look for references in method annotations\r\n  look for references in field annotations\r\n  record all references found inside the .class file\r\n /*\r\n\t * Modify the array by replacing all occurences of toBeReplaced with newChar\r\n\t */\r\n /*\r\n\t * Modify the array by replacing all occurences of toBeReplaced with newChar\r\n\t */\r\n","WildcardedUnresolvedType":"getUpperBound getLowerBound isExtends isSuper isUnbound getUpperBound getLowerBound isExtends isSuper isUnbound UNBOUND EXTENDS SUPER QUESTIONMARK boundKind lowerBound upperBound UNBOUND EXTENDS SUPER QUESTIONMARK boundKind lowerBound upperBound org.aspectj.weaver.WildcardedUnresolvedType org.aspectj.weaver.WildcardedUnresolvedType  UNBOUND, EXTENDS, SUPER\r\n  UNBOUND, EXTENDS, SUPER\r\n /* *******************************************************************\r\n * Copyright (c) 2008 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2008 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement     initial implementation \r\n * ******************************************************************/\r\n","DefaultBuildProgressMonitor":"begin setProgressText finish isCancelRequested setProgress PROGRESS_HEADING progressDialog dialog org.aspectj.ajde.ui.swing.DefaultBuildProgressMonitor /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation\r\n *     Helen Hawkins  Converted to new interface (bug 148190)  \r\n * ******************************************************************/\r\n","Conversions":"intObject shortObject byteObject charObject longObject floatObject doubleObject booleanObject voidObject intValue longValue floatValue doubleValue byteValue shortValue charValue booleanValue voidValue intObject shortObject byteObject charObject longObject floatObject doubleObject booleanObject voidObject intValue longValue floatValue doubleValue byteValue shortValue charValue booleanValue voidValue intObject shortObject byteObject charObject longObject floatObject doubleObject booleanObject voidObject intValue longValue floatValue doubleValue byteValue shortValue charValue booleanValue voidValue org.aspectj.runtime.internal.Conversions org.aspectj.runtime.internal.Conversions org.aspectj.runtime.internal.Conversions  Can't make instances of me\r\n  we might want to keep a cache of small integers around\r\n  !!! this may be an error in the future\r\n  Can't make instances of me\r\n  we might want to keep a cache of small integers around\r\n  !!! this may be an error in the future\r\n  Can't make instances of me\r\n  we might want to keep a cache of small integers around\r\n  !!! this may be an error in the future\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","BlockScope":"addAnonymousType addLocalType addLocalVariable addSubscope allowBlankFinalFieldAssignment basicToString checkAndSetModifiersForVariable computeLocalVariablePositions emulateOuterAccess findLocalType findLocalVariableDeclarations findVariable getBinding getBinding getEmulationPath getEmulationPath isDuplicateLocalVariable maxShiftedOffset needBlankFinalFieldInitializationCheck problemReporter propagateInnerEmulation referenceType scopeIndex startIndex toString toString locals localIndex startIndex offset maxOffset shiftScopes subscopes subscopeCount enclosingCase EmulationPathToImplicitThis NoEnclosingInstanceInConstructorCall NoEnclosingInstanceInStaticContext org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BlockScope  Local variable management\r\n  position for next variable\r\n  start position in this scope - for ordering scopes vs. variables\r\n  for variable allocation throughout scopes\r\n  for variable allocation throughout scopes\r\n  collisions of secret variables (return address, save value).\r\n  need access from code assist\r\n  need access from code assist\r\n  from 1.4 on, local types should not be accessed across switch case blocks (52221)\r\n  insert local in scope\r\n  update local variable binding\r\n  inside initializer\r\n  inside constructor or clinit\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  local variable init\r\n  scope init\r\n  if no local at all, will be locals[ilocal]==null\r\n  check if variable is actually used, and may force it to be preserved\r\n  unused (and non secret) local\r\n  do not report unused catch arguments\r\n  do not report fake used variable\r\n  force it to be preserved in the generated code\r\n  could be optimized out, but does need to preserve unread variables ?\r\n  not generated\r\n  record user-defined local variables for attribute generation\r\n  assign variable position\r\n  no more than 65535 words of locals\r\n  allocate variable\r\n  consider subscope first\r\n  iterate scopes and variables in parallel\r\n  no need to further emulate as already inserted (val$this$0)\r\n  do nothing for member types, pre emulation was performed already\r\n  must also add a synthetic field if we're not inside a constructor\r\n  from 1.4 on, local types should not be accessed across switch case blocks (52221)\r\n  local variable init\r\n  scope init\r\n  if no local at all, will be locals[ilocal]==null\r\n  consider subscope first\r\n  do not dive in nested types\r\n  iterate scopes and variables in parallel\r\n  lookup backward to reach latest additions first\r\n  and we do not know that its package was also added (can happen with CompilationParticipants)\r\n  must be a type if its the last name, otherwise we have no idea if its a package or type\r\n  It is illegal to request a PACKAGE from this method.\r\n  know binding is now a ReferenceBinding\r\n  binding is now a field\r\n  binding is a ReferenceBinding\r\n  was looking for a field and found a field\r\n  was looking for a type and found a type\r\n  handle the case when a field or type was asked for but we resolved the compoundName to a type or field\r\n  must be a type if its the last name, otherwise we have no idea if its a package or type\r\n  binding is now a field\r\n  Added for code assist... NOT Public API\r\n  identity check\r\n  use synthetic constructor arguments if possible\r\n  use a synthetic field then\r\n  implicit this is good enough\r\n  use 'this' if possible\r\n  no emulation from within non-inner types\r\n  reject allocation and super constructor call\r\n  use synthetic constructor arguments if possible\r\n  use a direct synthetic field then\r\n  probably at least 2 of them\r\n  done?\r\n  append inside the path\r\n  private access emulation is necessary since synthetic field is private\r\n  loop in enclosing context, until reaching the field declaring context\r\n  inside initializer\r\n  found some non-initializer context\r\n  found the field context, no need to check any further\r\n  need to filter out the one that could match a supplied enclosing instance\r\n  start position in this scope - for ordering scopes vs. variables\r\n  $NON-NLS-1$\r\n /* Create the class scope & binding for the anonymous type.\r\n */\r\n /* Create the class scope & binding for the local type.\r\n */\r\n /* Insert a local variable into a given scope, updating its position\r\n * and checking there are not too many locals or arguments allocated.\r\n */\r\n /* Answer true if the receiver is suitable for assigning final blank fields.\r\n *\r\n * in other words, it is inside an initializer, a constructor or a clinit \r\n */\r\n /* Compute variable positions in scopes given an initial position offset\r\n * ignoring unused local variables.\r\n * \r\n * No argument is expected here (ilocal is the first non-argument local of the outermost scope)\r\n * Arguments are managed by the MethodScope method\r\n */\r\n /*\r\n *\tRecord the suitable binding denoting a synthetic field or constructor argument,\r\n * mapping to the actual outer local variable in the scope context.\r\n * Note that this may not need any effect, in case the outer local variable does not\r\n * need to be emulated and can directly be used as is (using its back pointer to its\r\n * declaring scope).\r\n */\r\n /* Note that it must never produce a direct access to the targetEnclosingType,\r\n * but instead a field sequence (this$2.this$1.this$0) so as to handle such a test case:\r\n *\r\n * class XX {\r\n *\tvoid foo() {\r\n *\t\tclass A {\r\n *\t\t\tclass B {\r\n *\t\t\t\tclass C {\r\n *\t\t\t\t\tboolean foo() {\r\n *\t\t\t\t\t\treturn (Object) A.this == (Object) B.this;\r\n *\t\t\t\t\t}\r\n *\t\t\t\t}\r\n *\t\t\t}\r\n *\t\t}\r\n *\t\tnew A().new B().new C();\r\n *\t}\r\n * }\r\n * where we only want to deal with ONE enclosing instance for C (could not figure out an A for C)\r\n */\r\n /* API\r\n * flag is a mask of the following values VARIABLE (= FIELD or LOCAL), TYPE.\r\n * Only bindings corresponding to the mask will be answered.\r\n *\r\n *\tif the VARIABLE mask is set then\r\n *\t\tIf the first name provided is a field (or local) then the field (or local) is answered\r\n *\t\tOtherwise, package names and type names are consumed until a field is found.\r\n *\t\tIn this case, the field is answered.\r\n *\r\n *\tif the TYPE mask is set,\r\n *\t\tpackage names and type names are consumed until the end of the input.\r\n *\t\tOnly if all of the input is consumed is the type answered\r\n *\r\n *\tAll other conditions are errors, and a problem binding is returned.\r\n *\t\r\n *\tNOTE: If a problem binding is returned, senders should extract the compound name\r\n *\tfrom the binding & not assume the problem applies to the entire compoundName.\r\n *\r\n *\tThe VARIABLE mask has precedence over the TYPE mask.\r\n *\r\n *\tInvocationSite implements\r\n *\t\tisSuperAccess(); this is used to determine if the discovered field is visible.\r\n *\t\tsetFieldIndex(int); this is used to record the number of names that were consumed.\r\n *\r\n *\tFor example, getBinding({\"foo\",\"y\",\"q\", VARIABLE, site) will answer\r\n *\tthe binding for the field or local named \"foo\" (or an error binding if none exists).\r\n *\tIn addition, setFieldIndex(1) will be sent to the invocation site.\r\n *\tIf a type named \"foo\" exists, it will not be detected (and an error binding will be answered)\r\n *\r\n *\tIMPORTANT NOTE: This method is written under the assumption that compoundName is longer than length 1.\r\n */\r\n /*val$this$0*/\r\n /*\r\n * This retrieves the argument that maps to an enclosing instance of the suitable type,\r\n * \tif not found then answers nil -- do not create one\r\n *\t\r\n *\t\t#implicitThis\t\t  \t \t\t\t: the implicit this will be ok\r\n *\t\t#((arg) this$n)\t\t\t\t\t\t: available as a constructor arg\r\n * \t\t#((arg) this$n ... this$p) \t\t\t: available as as a constructor arg + a sequence of fields\r\n * \t\t#((fieldDescr) this$n ... this$p) \t: available as a sequence of fields\r\n * \t\tnil \t\t \t\t\t\t\t\t\t\t\t\t\t: not found\r\n *\r\n * \tNote that this algorithm should answer the shortest possible sequence when\r\n * \t\tshortcuts are available:\r\n * \t\t\t\tthis$0 . this$0 . this$0\r\n * \t\tinstead of\r\n * \t\t\t\tthis$2 . this$1 . this$0 . this$1 . this$0\r\n * \t\tthus the code generation will be more compact and runtime faster\r\n */\r\n /*\r\n * This retrieves the argument that maps to an enclosing instance of the suitable type,\r\n * \tif not found then answers nil -- do not create one\r\n *\r\n *\t\t#implicitThis\t\t  \t \t\t\t\t\t\t\t\t\t\t\t:  the implicit this will be ok\r\n *\t\t#((arg) this$n)\t\t\t\t\t\t\t\t\t\t\t\t\t: available as a constructor arg\r\n * \t#((arg) this$n access$m... access$p) \t\t: available as as a constructor arg + a sequence of synthetic accessors to synthetic fields\r\n * \t#((fieldDescr) this$n access#m... access$p)\t: available as a first synthetic field + a sequence of synthetic accessors to synthetic fields\r\n * \tnull \t\t \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: not found\r\n *\tjls 15.9.2 + http://www.ergnosis.com/java-spec-report/java-language/jls-8.8.5.1-d.html\r\n */\r\n /* Answer true if the variable name already exists within the receiver's scope.\r\n */\r\n /* Answer the problem reporter to use for raising new problems.\r\n *\r\n * Note that as a side-effect, this updates the current reference context\r\n * (unit, type or method) in case the problem handler decides it is necessary\r\n * to abort.\r\n */\r\n /*\r\n * Code responsible to request some more emulation work inside the invocation type, so as to supply\r\n * correct synthetic arguments to any allocation of the target type.\r\n */\r\n /* Answer the reference type of this scope.\r\n *\r\n * It is the nearest enclosing type of this scope.\r\n */\r\n /*\r\n * Answer the index of this scope relatively to its parent.\r\n * For method scope, answers -1 (not a classScope relative position)\r\n */\r\n","ExposedState":"isFullySetUp set get size getAspectInstance setAspectInstance toString setErroneousVar isErroneousVar isFullySetUp set get size getAspectInstance setAspectInstance toString setErroneousVar isErroneousVar vars erroneousVars aspectInstance expectedVarTypes vars erroneousVars aspectInstance expectedVarTypes org.aspectj.weaver.patterns.ExposedState org.aspectj.weaver.patterns.ExposedState  enables us to check that binding is occurring with the *right* types\r\n  XXX there maybe something about target for non-static sigs\r\n  throw new BCException(\"Expected type \"+expectedVarTypes[i]+\" in slot \"+i+\" but attempt to put \"+var.getType()+\" into it\");\r\n  check the type is OK if we can... these are the same rules as in matchesInstanceOf() processing\r\n  prevents us blowing up in later code gen.\r\n  enables us to check that binding is occurring with the *right* types\r\n  XXX there maybe something about target for non-static sigs\r\n  throw new BCException(\"Expected type \"+expectedVarTypes[i]+\" in slot \"+i+\" but attempt to put \"+var.getType()+\" into it\");\r\n  check the type is OK if we can... these are the same rules as in matchesInstanceOf() processing\r\n  prevents us blowing up in later code gen.\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","DoubleLiteral":"computeConstant generateCode literalType traverse value org.aspectj.org.eclipse.jdt.internal.compiler.ast.DoubleLiteral  error: the number is too large to represent\r\n  error: the number is too small to represent\r\n  being rejected by 1.4 libraries where Double.valueOf(...) doesn't handle hex decimal floats\r\n  error: the number is too large to represent\r\n  1.0e-5000d is non-zero, but underflows to 0\r\n  no exponent - mantissa is all zero\r\n  error: the number is too small to represent\r\n  it is welled formated so just test against '0' and potential . D d\r\n","BinaryMethod":"equals getExceptionTypes getElementType getFlags getHandleMemento getHandleMementoDelimiter getKey getNumberOfParameters getParameterNames splitParameters getParameterTypes getTypeParameter getTypeParameters getTypeParameterSignatures getRawParameterNames getRawParameterNames getReturnType getReturnType getSignature hashCode isConstructor isMainMethod isResolved isSimilar readableName resolved toStringInfo toStringName toStringName getAttachedJavadoc extractJavadoc parameterTypes parameterNames exceptionTypes returnType javadoc org.aspectj.org.eclipse.jdt.internal.core.BinaryMethod  Assert.isTrue(name.indexOf('.') == -1);\r\n  1G01HRY: ITPJCORE:WINNT - method.getExceptionType not in correct format\r\n  force source mapping if not already done\r\n  map source and try to find parameter names\r\n  if parameter names exist, convert parameter names to String array\r\n  try to see if we can retrieve the names from the attached javadoc\r\n  don't try to look for javadoc for synthetic methods\r\n  let's see if we can retrieve them from the debug infos\r\n  need to extract the part relative to the binary method since javadoc contains the javadoc for the declaring type\r\n  default value\r\n  don't try to fetch the values\r\n  this call has a side-effect on the per project info cache\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  let's see if we can retrieve them from the debug infos\r\n  if still no parameter names, produce fake ones\r\n  we have generic types as one of the parameter types\r\n  happens only for constructors with synthetic enclosing type in the signature\r\n  $NON-NLS-1$\r\n  faster than reaching the info\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  remove array from signature\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  might need to remove a part of the signature corresponding to the synthetic argument\r\n  method without javadoc\r\n  find bottom\r\n /*\r\n * @see IMethod\r\n */\r\n /*\r\n * @see IJavaElement\r\n */\r\n /*\r\n * @see IMember\r\n */\r\n /*\r\n * @see JavaElement#getHandleMemento(StringBuffer)\r\n */\r\n /*\r\n * @see JavaElement#getHandleMemento()\r\n */\r\n /*\r\n * @see IMethod\r\n */\r\n /*\r\n\t\t\t * The declaring type is not in the cache yet. The thread wil retrieve the javadoc contents\r\n\t\t\t */\r\n /*\r\n * @see IMethod\r\n * Look for source attachment information to retrieve the actual parameter names as stated in source.\r\n */\r\n /*\r\n * @see IMethod\r\n */\r\n /*\r\n * @see IMethod\r\n */\r\n /*\r\n * @see IMethod\r\n */\r\n /*\r\n * @see IMethod\r\n */\r\n /*\r\n * @see IMethod#isMainMethod()\r\n */\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.core.IMethod#isResolved()\r\n */\r\n /*\r\n * @see IMethod#isSimilar(IMethod)\r\n */\r\n /*\r\n * @private Debugging purposes\r\n */\r\n /* package */\r\n","PackageReferenceLocator":"isDeclaringPackageFragment match match match matchLevel matchLevelForTokens matchLevelAndReportImportRef matchReportImportRef matchReportReference referenceType resolveLevel resolveLevel resolveLevel toString pattern org.aspectj.org.eclipse.jdt.internal.core.search.matching.PackageReferenceLocator  ensure to not do any side effect on file name (see https:  unit doesn't live in selected package\r\n  classfile doesn't live in selected package\r\n  }\r\n  by default, do not eliminate\r\n  check that referenced type is actually defined in this package fragment\r\n  interested in ImportReference\r\n  interested in QualifiedNameReference\r\n  public int match(MessageSend node, MatchingNodeSet nodeSet) - SKIP IT\r\n  interested in QualifiedTypeReference only\r\n  public int match(TypeDeclaration node, MatchingNodeSet nodeSet) - SKIP IT\r\n  $NON-NLS-1$\r\n  TODO (frederic) implement regular expression match\r\n  verify that in this case binding is static and use declaring class for fields\r\n  reading a field\r\n  =============only type ==============\r\n  ============unbound cases===========\r\n  (see bug https:  if (node instanceof ImportReference) - Not called when resolve is true, see MatchingNodeSet.reportMatching(unit)\r\n  check that type is located inside this instance of a package fragment\r\n  reading a field\r\n  must be at least p1.A.x\r\n  reading a local variable\r\n  no package match in it\r\n  =============only type ==============\r\n  ============unbound cases===========\r\n  index of last bound token is one before the pb token\r\n  must be at least p1.A.x\r\n  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.internal.core.search.matching.PatternLocator#matchLevelAndReportImportRef(org.aspectj.org.eclipse.jdt.internal.compiler.ast.ImportReference, org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Binding, org.aspectj.org.eclipse.jdt.internal.core.search.matching.MatchLocator)\r\n */\r\n /*no binding*/\r\n","LstBuildConfigFileParser":"showWarning parseImportedConfigFile showError getImportedFiles getProblemEntries importedFiles problemEntries org.aspectj.ajde.internal.LstBuildConfigFileParser /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","PartialOrder":"compareTo fallbackCompareTo hasNoSmallerObjects removeSmallerObject addDirectedLinks toString addNewPartialComparable removeFromGraph sort compareTo fallbackCompareTo toString main compareTo fallbackCompareTo hasNoSmallerObjects removeSmallerObject addDirectedLinks toString addNewPartialComparable removeFromGraph sort compareTo fallbackCompareTo toString main object smallerObjects biggerObjects s object smallerObjects biggerObjects s org.aspectj.util.PartialOrder org.aspectj.util.PartialOrder  +smallerObjects+biggerObjects;\r\n  ??? smaller ones\r\n  lists of size 0 or 1 don't need any sorting\r\n  objects.size());\r\n  List ret = new ArrayList(objects.size());\r\n  System.out.println(so);\r\n  +smallerObjects+biggerObjects;\r\n  ??? smaller ones\r\n  lists of size 0 or 1 don't need any sorting\r\n  objects.size());\r\n  List ret = new ArrayList(objects.size());\r\n  System.out.println(so);\r\n /*SortObject*/\r\n /*SortObject*/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /*SortObject*/\r\n /*SortObject*/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","CompletionJavadoc":"getCompletionNode internalResolve print resolve resolve resolve missingParamTags missingTypeParameterTags completionNode org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionJavadoc  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Verify if there's some possible param tag\r\n  Store all method arguments if there's no @param in javadoc\r\n  Look for missing arguments\r\n  do not count first occurence of param name reference\r\n  Verify if there's any type parameter to tag\r\n  Look for missing type parameter\r\n  do not count first occurence of param nmae reference\r\n  Store all type parameters if there's no @param in javadoc\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode#print(int, java.lang.StringBuffer)\r\n\t */\r\n /*\r\n\t * Look for missing method @param tags\r\n\t */\r\n /*\r\n\t * Look for missing type parameters @param tags\r\n\t */\r\n","ajcDeclareEoW":"/* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","AjConstructorDeclaration":"generateInfoAttributes addDeclarationStartLineAttribute org.aspectj.ajdt.internal.compiler.ast.AjConstructorDeclaration  add extra attributes into list then call 2-arg version of generateInfoAttributes...\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration#generateInfoAttributes(org.eclipse.jdt.internal.compiler.ClassFile)\r\n\t */\r\n","SourceConstructorInfo":"isAnnotationMethod isConstructor getReturnTypeName setReturnType RETURN_TYPE_NAME org.aspectj.org.eclipse.jdt.internal.core.SourceConstructorInfo  a constructor cannot be an annotation method\r\n /*\r\n * Element info for constructor from source.\r\n */\r\n","CountingMessageHandler":"makeCountingMessageHandler handleMessage isIgnoring dontIgnore ignore toString numMessages hasErrors numMessages increment reset makeCountingMessageHandler handleMessage isIgnoring dontIgnore ignore toString numMessages hasErrors numMessages increment reset delegate proxy counters count delegate proxy counters count org.aspectj.bridge.CountingMessageHandler org.aspectj.bridge.CountingMessageHandler /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","ajcITD":"/* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","NodeSearcher":"visit visit visit visit visit visit found enclosingType position org.aspectj.org.eclipse.jdt.core.dom.NodeSearcher","ConstantInteger":"accept dump getBytes setBytes toString getConstantValue accept dump getBytes setBytes toString getConstantValue bytes bytes org.aspectj.apache.bcel.classfile.ConstantInteger org.aspectj.apache.bcel.classfile.ConstantInteger","PerSingleton":"accept couldMatchKinds fastMatch matchInternal resolveBindings parameterizeWith findResidueInternal concretize write readPerClause getKind toString toDeclarationString equals hashCode accept couldMatchKinds fastMatch matchInternal resolveBindings parameterizeWith findResidueInternal concretize write readPerClause getKind toString toDeclarationString equals hashCode perSingletonAspectOfMethod perSingletonAspectOfMethod org.aspectj.weaver.patterns.PerSingleton org.aspectj.weaver.patterns.PerSingleton  Build this just once\r\n  if (!Ajc5MemberMaker.isSlowAspect(inAspect)) {\r\n  aspect before we are bound\r\n  pr149560\r\n  dig: \"can't be Serializable  ATAJ: add a munger to add the aspectOf(..) to the @AJ aspects\r\n  ATAJ inline around advice support\r\n  Build this just once\r\n  if (!Ajc5MemberMaker.isSlowAspect(inAspect)) {\r\n  aspect before we are bound\r\n  pr149560\r\n  dig: \"can't be Serializable  ATAJ: add a munger to add the aspectOf(..) to the @AJ aspects\r\n  ATAJ inline around advice support\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","PointcutImpl":"getPointcutExpression getName getModifiers getParameterTypes getDeclaringType getParameterNames splitOnComma toString getPointcutExpression getName getModifiers getParameterTypes getDeclaringType getParameterNames splitOnComma toString name pc baseMethod declaringType parameterNames name pc baseMethod declaringType parameterNames org.aspectj.internal.lang.reflect.PointcutImpl org.aspectj.internal.lang.reflect.PointcutImpl /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.Pointcut#getPointcutExpression()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.Pointcut#getPointcutExpression()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","ExactAnnotationFieldTypePattern":"resolveBindings write read accept equals hashCode fastMatches getAnnotationType getAnnotationValues getResolvedAnnotationType matches matches matchesRuntimeType parameterizeWith resolve toString resolveBindings write read accept equals hashCode fastMatches getAnnotationType getAnnotationValues getResolvedAnnotationType matches matches matchesRuntimeType parameterizeWith resolve toString annotationType field annotationType field org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern org.aspectj.weaver.patterns.ExactAnnotationFieldTypePattern  resolve the annotation type, let's quit now\r\n  May not be directly found if in a package, so go looking if that is the case:\r\n  Check that the formal is bound to a type that is represented by one field in the annotation type\r\n  resolve the annotation type, let's quit now\r\n  May not be directly found if in a package, so go looking if that is the case:\r\n  Check that the formal is bound to a type that is represented by one field in the annotation type\r\n /* *******************************************************************\r\n * Copyright (c) 2008 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2008 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement     initial implementation \r\n * ******************************************************************/\r\n","AdviceImpl":"getDeclaringType getGenericParameterTypes getParameterTypes getExceptionTypes getKind getName getPointcutExpression toString getDeclaringType getGenericParameterTypes getParameterTypes getExceptionTypes getKind getName getPointcutExpression toString AJC_INTERNAL kind adviceMethod pointcutExpression hasExtraParam genericParameterTypes parameterTypes exceptionTypes AJC_INTERNAL kind adviceMethod pointcutExpression hasExtraParam genericParameterTypes parameterTypes exceptionTypes org.aspectj.internal.lang.reflect.AdviceImpl org.aspectj.internal.lang.reflect.AdviceImpl  no-op\r\n  no-op\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","AnnotationTypeDeclaration":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty internalGetChildListProperty internalJavadocProperty internalModifiers2Property internalModifiersProperty internalNameProperty internalBodyDeclarationsProperty getNodeType0 clone0 subtreeMatch0 accept0 internalResolveBinding memSize treeSize JAVADOC_PROPERTY MODIFIERS2_PROPERTY NAME_PROPERTY BODY_DECLARATIONS_PROPERTY PROPERTY_DESCRIPTORS org.aspectj.org.eclipse.jdt.core.dom.AnnotationTypeDeclaration  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  this property will not be asked for (node type did not exist in JLS2)\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on AbstractTypeDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on AbstractTypeDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on AsbtractTypeDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","AccessRuleSet":"equals getAccessRules getViolatedRestriction toString toString accessRules messageTemplates MESSAGE_TEMPLATES_LENGTH org.aspectj.org.eclipse.jdt.internal.compiler.env.AccessRuleSet  $NON-NLS-1$   guard\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*case sensitive*/\r\n","ReflectionWorld":"makeAnnotationFinderIfAny getClassLoader getAnnotationFinder resolve resolve resolveDelegate createAdviceMunger makeCflowStackFieldAdder makeCflowCounterFieldAdder makePerClauseAspect concreteTypeMunger handleMessage isIgnoring dontIgnore ignore makeAnnotationFinderIfAny getClassLoader getAnnotationFinder resolve resolve resolveDelegate createAdviceMunger makeCflowStackFieldAdder makeCflowCounterFieldAdder makePerClauseAspect concreteTypeMunger handleMessage isIgnoring dontIgnore ignore classLoaderReference annotationFinder serialVersionUID classLoaderReference annotationFinder serialVersionUID org.aspectj.weaver.reflect.ReflectionWorld org.aspectj.weaver.reflect.ReflectionWorld  not so good\r\n  classes that represent arrays return a class name that is the signature of the array type, ho-hum...\r\n  not so good\r\n  classes that represent arrays return a class name that is the signature of the array type, ho-hum...\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.reflect.IReflectionWorld#resolve(java.lang.Class)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.World#resolveDelegate(org.aspectj.weaver.ReferenceType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.World#createAdviceMunger(org.aspectj.weaver.AjAttribute.AdviceAttribute, org.aspectj.weaver.patterns.Pointcut, org.aspectj.weaver.Member)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.World#makeCflowStackFieldAdder(org.aspectj.weaver.ResolvedMember)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.World#makeCflowCounterFieldAdder(org.aspectj.weaver.ResolvedMember)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.World#makePerClauseAspect(org.aspectj.weaver.ResolvedType, org.aspectj.weaver.patterns.PerClause.Kind)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.World#concreteTypeMunger(org.aspectj.weaver.ResolvedTypeMunger, org.aspectj.weaver.ResolvedType)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.reflect.IReflectionWorld#resolve(java.lang.Class)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.World#resolveDelegate(org.aspectj.weaver.ReferenceType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.World#createAdviceMunger(org.aspectj.weaver.AjAttribute.AdviceAttribute, org.aspectj.weaver.patterns.Pointcut, org.aspectj.weaver.Member)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.World#makeCflowStackFieldAdder(org.aspectj.weaver.ResolvedMember)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.World#makeCflowCounterFieldAdder(org.aspectj.weaver.ResolvedMember)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.World#makePerClauseAspect(org.aspectj.weaver.ResolvedType, org.aspectj.weaver.patterns.PerClause.Kind)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.World#concreteTypeMunger(org.aspectj.weaver.ResolvedTypeMunger, org.aspectj.weaver.ResolvedType)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","SignaturePatternImpl":"asString toString asString toString sigPattern sigPattern org.aspectj.internal.lang.reflect.SignaturePatternImpl org.aspectj.internal.lang.reflect.SignaturePatternImpl /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.SignaturePattern#asString()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.SignaturePattern#asString()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","JavaOptions":"getDefaultJavaOptions isValidJvmVersion isValidPreserveAllLocalsOption isIgnoreOrWarning isGenerateOrNot COMPLIANCE_LEVEL SOURCE_COMPATIBILITY_LEVEL TARGET_COMPATIBILITY_LEVEL VERSION_13 VERSION_14 VERSION_15 VERSION_16 CHARACTER_ENCODING PRESERVE_ALL_LOCALS PRESERVE OPTIMIZE WARN_METHOD_WITH_CONSTRUCTOR_NAME WARN_OVERRIDING_PACKAGE_DEFAULT_METHOD WARN_DEPRECATION WARN_HIDDEN_CATCH_BLOCKS WARN_UNUSED_LOCALS WARN_UNUSED_PARAMETER WARN_UNUSED_IMPORTS WARN_SYNTHETIC_ACCESS WARN_ASSERT_IDENITIFIER WARN_NON_NLS IGNORE WARNING DEBUG_SOURCE DEBUG_LINES DEBUG_VARS GENERATE DO_NOT_GENERATE defaultOptionsMap org.aspectj.ajde.core.JavaOptions  Version constants\r\n  by default will use the platform default encoding\r\n  indicates if unused  Warning constants\r\n  warning option constants\r\n  Debug constants\r\n  Debug option constants\r\n","DoubleCache":"clear containsKey put putIfAbsent toString keyTable valueTable elementSize org.aspectj.org.eclipse.jdt.internal.compiler.codegen.DoubleCache  resize\r\n  resize\r\n  negative when added, assumes value is > 0\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","OrPattern":"findIndexMatches getBlankPattern isErasureMatch isPolymorphicSearch hasSignatures toString patterns matchCompatibility org.aspectj.org.eclipse.jdt.internal.core.search.matching.OrPattern  Store erasure match\r\n  per construction, OR pattern can only be used with a PathCollector (which already gather results using a set)\r\n  $NON-NLS-1$\r\n","Tag":"containsTarget updateTarget copy containsTarget updateTarget copy org.aspectj.apache.bcel.generic.Tag org.aspectj.apache.bcel.generic.Tag  ---- from InstructionTargeter\r\n  ---- from InstructionTargeter\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n *   Andy Clement   pushed down into bcel module\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n *   Andy Clement   pushed down into bcel module\r\n * ******************************************************************/\r\n","TypeDeclaration":"createTypeFor getTypeDeclaration propertyDescriptors internalStructuralPropertiesForType internalGetSetIntProperty internalGetSetBooleanProperty internalGetSetChildProperty internalGetChildListProperty internalJavadocProperty internalModifiers2Property internalModifiersProperty internalNameProperty internalBodyDeclarationsProperty getNodeType0 clone0 subtreeMatch0 accept0 isInterface setInterface typeParameters getSuperclass internalGetSuperclass getSuperclassType setSuperclass internalSetSuperclass setSuperclassType superInterfaces internalSuperInterfaces superInterfaceTypes getFields getMethods getTypes internalResolveBinding memSize treeSize abort addClinit addMissingAbstractMethodFor analyseCode analyseCode analyseCode analyseCode checkConstructors compilationResult createDefaultConstructor createDefaultConstructorWithBinding declarationOf declarationOf declarationOf declarationOfType generateCode generateAttributes rememberAnnotations generateCode generateCode generateCode hasErrors internalAnalyseCode kind manageEnclosingInstanceAccessIfNecessary manageEnclosingInstanceAccessIfNecessary needClassInitMethod parseMethod print printBody printHeader printStatement resolve resolve resolve resolve tagAsHavingErrors traverse traverse traverse updateMaxFieldCount isSecondary AJ_TYPE_DECLARATION_FACTORY declarationFactory JAVADOC_PROPERTY MODIFIERS_PROPERTY MODIFIERS2_PROPERTY INTERFACE_PROPERTY NAME_PROPERTY SUPERCLASS_PROPERTY SUPER_INTERFACES_PROPERTY SUPERCLASS_TYPE_PROPERTY SUPER_INTERFACE_TYPES_PROPERTY TYPE_PARAMETERS_PROPERTY BODY_DECLARATIONS_PROPERTY PROPERTY_DESCRIPTORS_2_0 PROPERTY_DESCRIPTORS_3_0 isInterface typeParameters optionalSuperclassName superInterfaceNames optionalSuperclassType superInterfaceTypes CLASS_DECL INTERFACE_DECL ENUM_DECL ANNOTATION_TYPE_DECL modifiers modifiersSourceStart annotations originalAnnotations name superclass superInterfaces fields methods memberTypes binding scope initializerScope staticInitializerScope ignoreFurtherInvestigation maxFieldCount declarationSourceStart declarationSourceEnd bodyStart bodyEnd compilationResult missingAbstractMethods javadoc allocation enclosingType enumValuesSyntheticfield typeParameters org.aspectj.org.eclipse.jdt.core.dom.TypeDeclaration org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeDeclaration  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  AspectJ extension, modified not to be private or final\r\n  AspectJ extension, modified not to be private or final\r\n  AspectJ Extension, was private, now protected\r\n  AspectJ Extension, was private, now protected\r\n  AspectJ Extension, was private, now protected\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  more efficient than just calling unsupportedIn2() to check\r\n  more efficient than just calling supportedOnlyIn2() to check\r\n  more efficient than just calling unsupportedIn2() to check\r\n  Type decl kinds\r\n  AspectJ Extension\r\n  doesn't include the trailing comment if any.\r\n  for anonymous only\r\n  for member types only\r\n  for enum\r\n  1.5 support\r\n  clinit is added in first location, so as to minimize the use of ldcw (big consumer of constant inits)\r\n  see comment on needClassInitMethod\r\n  the constructor\r\n  $NON-NLS-1$\r\n  adding the constructor in the methods list\r\n  methodDeclaration\r\n  arguments bindings\r\n  exceptions\r\n  declaringClass\r\n  ============BINDING UPDATE==========================\r\n  propagate down the max field count\r\n  propagate down the max field count\r\n  propagate down the max field count\r\n  convert it into a method with 'null' as its return type\r\n  report the problem and continue the parsing\r\n  report the problem and continue the parsing\r\n  unless an explicit constructor call was supplied\r\n  changed to a method\r\n  the constructor\r\n  SourceIndexer2.buildTypeDeclaration(TypeDeclaration,char[]) method\r\n  the super call inside the constructor\r\n  adding the constructor in the methods list: rank is not critical since bindings will be sorted\r\n  $NON-NLS-1$\r\n  the constructor\r\n  no maining\r\n  the super call inside the constructor\r\n  adding the constructor in the methods list\r\n  ============BINDING UPDATE==========================\r\n  methodDeclaration\r\n  arguments bindings\r\n  exceptions\r\n  declaringClass\r\n  trigger sorting\r\n  need to resort, since could be valid methods ahead (140643) - DOM needs eager sorting\r\n  anonymous type constructor creation: rank is important since bindings already got sorted\r\n  create the result for a compiled type\r\n  generate all fiels\r\n  generate all methods\r\n  generate all synthetic and abstract methods\r\n  trigger problem type generation for code gen errors\r\n  AspectJ Extension - moved to helper method, was 'classFile.addAttributes();'\r\n  finalize the compiled type result\r\n  AspectJ Extension\r\n  remember already called...\r\n  just so we don't do this again\r\n  remember the current set of annotations on the type for use when writing the class file out (see pr91859)\r\n  tolerate them all, and record them\r\n  branch, since the previous initializer already got the blame.\r\n  tolerate them all, and record them\r\n  branch, since the previous initializer already got the blame.\r\n  reset reach mode in case initializers did abrupt completely\r\n  regular method\r\n  constructor\r\n  <clinit>\r\n  enable enum support ?\r\n  if (nestedEnclosing.findSuperTypeErasingTo(nestedEnclosing.enclosingType()) == null) {   }\r\n  add superclass enclosing instance arg for anonymous types (if necessary)\r\n  always need a <clinit> when assertions are present\r\n  fields are implicitly statics\r\n  even if no enum constants, need to set $VALUES array\r\n  TODO (philippe) shouldn't it check whether field is initializer or has some initial value ?\r\n  need to test the modifier directly while there is no binding yet\r\n  connect method bodies\r\n  members\r\n  methods\r\n  initializers\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  check @Deprecated annotation\r\n  see https:  private void readObject(java.io.ObjectInputStream out) throws IOException\r\n  generics (and non static generic members) cannot extend Throwable\r\n  still discover secondary errors\r\n  check enum abstract methods\r\n  check extends  if the type is package-info, the javadoc was resolved as part of the compilation unit javadoc\r\n  Resolve javadoc\r\n  check collision scenarii\r\n  hiding sibling\r\n  collision with enclosing type\r\n  dup in same method\r\n  need to build its scope first and proceed with binding's creation\r\n  remember local types binding for innerclass emulation propagation\r\n  binding is not set if the receiver could not be created\r\n  remember local types binding for innerclass emulation propagation\r\n  top level : scope are already created\r\n  error scenario\r\n  down\r\n  up\r\n /*final*/\r\n /*final*/\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t * @since 3.0\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /*final*/\r\n /*final*/\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on AbstractTypeDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on AbstractTypeDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /*package*/\r\n /*package*/\r\n /*package*/\r\n /* (omit javadoc for this method)\r\n\t * Method declared on AsbtractTypeDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /*\r\n *\tWe cause the compilation task to abort to a given extent.\r\n */\r\n /*type ref*/\r\n /*\r\n * INTERNAL USE ONLY - Creates a fake method declaration for the corresponding binding.\r\n * It is used to report errors for missing abstract methods.\r\n */\r\n /*type ref*/\r\n /*}*/\r\n /*}*/\r\n /* \r\n * Access emulation for a local type\r\n * force to emulation of access to direct enclosing instance.\r\n * By using the initializer scope, we actually only request an argument emulation, the\r\n * field is not added until actually used. However we will force allocations to be qualified\r\n * with an enclosing instance.\r\n * 15.9.2\r\n */\r\n","ResolvedTypeMunger":"setSourceLocation getSourceLocation matches toString read readSuperMethodsCalled writeSuperMethodsCalled readSourceLocation writeSourceLocation write getKind read toString setSuperMethodsCalled getSuperMethodsCalled getSignature getMatchingSyntheticMember changesPublicSignature needsAccessToTopmostImplementor readInTypeAliases writeOutTypeAliases getTypeVariableAliases hasTypeVariableAliases sharesTypeVariablesWithGenericType parameterizedFor setDeclaredSignature getDeclaredSignature isLateMunger existsToSupportShadowMunging parameterizeWith setSourceLocation getSourceLocation matches toString read readSuperMethodsCalled writeSuperMethodsCalled readSourceLocation writeSourceLocation write getKind read toString setSuperMethodsCalled getSuperMethodsCalled getSignature getMatchingSyntheticMember changesPublicSignature needsAccessToTopmostImplementor readInTypeAliases writeOutTypeAliases getTypeVariableAliases hasTypeVariableAliases sharesTypeVariablesWithGenericType parameterizedFor setDeclaredSignature getDeclaredSignature isLateMunger existsToSupportShadowMunging parameterizeWith kind signature declaredSignature typeVariableAliases superMethodsCalled location Field Method Constructor PerObjectInterface PrivilegedAccess Parent PerTypeWithinInterface AnnotationOnType MethodDelegate FieldHost SUPER_DISPATCH_NAME kind signature declaredSignature typeVariableAliases superMethodsCalled location Field Method Constructor PerObjectInterface PrivilegedAccess Parent PerTypeWithinInterface AnnotationOnType MethodDelegate FieldHost SUPER_DISPATCH_NAME org.aspectj.weaver.ResolvedTypeMunger org.aspectj.weaver.ResolvedTypeMunger  might need serializing the class file for binary weaving.\r\n  Lost during serialize  to munge, then this is ok...\r\n  System.err.println(\"matching: \" + this + \" to \" + matchType + \" onType = \" + onType);\r\n  Location persistence for type mungers was added after 1.2.1 was shipped...\r\n  This exception occurs if processing an 'old style' file where the\r\n  (but I thought that was just an EOFException?)\r\n  occur on the next line and we ignore it.\r\n  oos.writeObject(location);\r\n  TODO we may want something for fieldhost ?\r\n  not serialized, only created during concretization of aspects\r\n  PTWIMPL not serialized, used during\r\n  not serialized\r\n  serialized, @AJ ITDs\r\n  serialized, @AJ ITDs\r\n  Write any type variable aliases\r\n  might need serializing the class file for binary weaving.\r\n  Lost during serialize  to munge, then this is ok...\r\n  System.err.println(\"matching: \" + this + \" to \" + matchType + \" onType = \" + onType);\r\n  Location persistence for type mungers was added after 1.2.1 was shipped...\r\n  This exception occurs if processing an 'old style' file where the\r\n  (but I thought that was just an EOFException?)\r\n  occur on the next line and we ignore it.\r\n  oos.writeObject(location);\r\n  TODO we may want something for fieldhost ?\r\n  not serialized, only created during concretization of aspects\r\n  PTWIMPL not serialized, used during\r\n  not serialized\r\n  serialized, @AJ ITDs\r\n  serialized, @AJ ITDs\r\n  Write any type variable aliases\r\n /* String */\r\n /* resolvedMembers */\r\n /* private */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation\r\n *     Alexandre Vasseur    @AspectJ ITDs\r\n * ******************************************************************/\r\n /* String */\r\n /* resolvedMembers */\r\n /* private */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation\r\n *     Alexandre Vasseur    @AspectJ ITDs\r\n * ******************************************************************/\r\n","InstructionSelect":"getTargetOffset updatePosition dump toString setTarget updateTarget containsTarget dispose equals hashCode getMatchs getIndices getTargets getLength getTargetOffset updatePosition dump toString setTarget updateTarget containsTarget dispose equals hashCode getMatchs getIndices getTargets getLength match indices targets fixedLength matchLength padding length match indices targets fixedLength matchLength padding length org.aspectj.apache.bcel.generic.InstructionSelect org.aspectj.apache.bcel.generic.InstructionSelect  matches, i.e., case 1: ...\r\n  target offsets\r\n  target objects in instruction list\r\n  fixed length defined by subclasses\r\n  number of cases\r\n  number of pad bytes for alignment\r\n  Additional offset caused by\r\n  Update length\r\n  Write default target offset\r\n  Compute number of pad bytes\r\n  LOOKUPSWITCH)\r\n  matches, i.e., case 1: ...\r\n  target offsets\r\n  target objects in instruction list\r\n  fixed length defined by subclasses\r\n  number of cases\r\n  number of pad bytes for alignment\r\n  Additional offset caused by\r\n  Update length\r\n  Write default target offset\r\n  Compute number of pad bytes\r\n  LOOKUPSWITCH)\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /*\r\n\t\t * Alignment on 4-byte-boundary, + 1, because of tag byte.\r\n\t\t */\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /*\r\n\t\t * Alignment on 4-byte-boundary, + 1, because of tag byte.\r\n\t\t */\r\n","IClassFileDisassembler":"disassemble disassemble DETAILED DEFAULT org.aspectj.org.eclipse.jdt.core.util.IClassFileDisassembler","IJavaDocTagConstants":"JAVADOC_BREAK_TAGS JAVADOC_SINGLE_BREAK_TAG JAVADOC_CODE_TAGS JAVADOC_IMMUTABLE_TAGS JAVADOC_NEWLINE_TAGS JAVADOC_PARAM_TAGS JAVADOC_SEPARATOR_TAGS JAVADOC_TAG_PREFIX LINK_TAG_POSTFIX LINK_TAG_PREFIX_STRING LINK_TAG_PREFIX COMMENT_ROOT_TAGS COMMENT_TAG_PREFIX org.aspectj.org.eclipse.jdt.internal.formatter.comment.IJavaDocTagConstants  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","ConstantString":"accept dump getStringIndex setStringIndex toString getConstantValue getBytes accept dump getStringIndex setStringIndex toString getConstantValue getBytes string_index string_index org.aspectj.apache.bcel.classfile.ConstantString org.aspectj.apache.bcel.classfile.ConstantString  Identical to ConstantClass except for this name\r\n  Identical to ConstantClass except for this name\r\n","SubRoutineStatement":"reenterAllExceptionHandlers enterAnyExceptionHandler enterDeclaredExceptionHandlers exitAnyExceptionHandler exitDeclaredExceptionHandlers generateSubRoutineInvocation isSubRoutineEscaping placeAllAnyExceptionHandler anyExceptionLabel org.aspectj.org.eclipse.jdt.internal.compiler.ast.SubRoutineStatement","VariableLocator":"match match matchReference toString pattern org.aspectj.org.eclipse.jdt.internal.core.search.matching.VariableLocator  for example, the fieldRef to 'this.x' in the statement this.x = x; is not considered a readAccess\r\n  already checked the lhs in match(Reference...) before we reached here\r\n  interested in Assignment\r\n  interested in NameReference & its subtypes\r\n  in the case of the assigment of a qualified name reference, the match must be on the last token\r\n  $NON-NLS-1$\r\n","IfMethodDeclaration":"parseStatements generateInfoAttributes resolveStatements ifPointcut org.aspectj.ajdt.internal.compiler.ast.IfMethodDeclaration  import org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope;\r\n  XXX this is where we should remove unavailable args if we're in a cflow\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","HashtableOfIntValues":"clone containsKey get put removeKey rehash size toString NO_VALUE keyTable valueTable elementSize threshold org.aspectj.org.eclipse.jdt.internal.compiler.util.HashtableOfIntValues  to avoid using Enumerations, walk the individual tables skipping nulls\r\n  number of elements in the table\r\n  size represents the expected number of elements\r\n  assumes the threshold is never equal to the size of the table\r\n  double the number of expected elements\r\n  $NON-NLS-1$\r\n  $NON-NLS-2$ ","CompletionJavadocParser":"checkDeprecation commentParse createArgumentReference createFieldReference createMethodReference createTypeReference possibleTags getCompletionJavadoc getCompletionParser initLevelTags parseArguments parseParam parseReference parseTag parseThrows pushParamName pushText readToken syntaxRecoverQualifiedName syntaxRecoverArgumentType syntaxRecoverEmptyArgumentType updateDocComment verifySpaceOrEndComment INLINE_ALL_TAGS_LENGTH BLOCK_ALL_TAGS_LENGTH levelTags levelTagsLength cursorLocation completionNode pushText allPossibleTags org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionJavadocParser  Initialize lengthes for block and inline tags tables\r\n  Level tags are array of inline  Completion specific info\r\n  $NON-NLS-1$\r\n  Create argument as we may need it after\r\n  See if completion location is in argument\r\n  completion cursor is between first and last stacked identifiers\r\n  or it's a completion on empty token\r\n  $NON-NLS-1$\r\n  completion cursor is between first and last stacked identifiers\r\n  or it's a completion on empty token\r\n  or it's a completion just after the member separator with an identifier after the cursor\r\n  $NON-NLS-1$\r\n  may be > 0 for inner class constructor reference\r\n  completion cursor is between first and last stacked identifiers\r\n  or it's a completion on empty token\r\n  or it's a completion just after the member separator with an identifier after the cursor\r\n  $NON-NLS-1$\r\n  Need to create type ref in case it was needed by members\r\n  completion cursor is between first and last stacked identifiers\r\n  or it's a completion on empty token\r\n  Qualified Type ref\r\n  Single Type ref\r\n  $NON-NLS-1$\r\n  Init block tags\r\n  Init inline tags\r\n  should be 2 for (Type,Type,...) or 3 for (Type arg,Type arg,...)\r\n  assume that there won't be more than 20 dimensions...\r\n  May be aborted by specialized parser\r\n  Read argument type reference\r\n  verify position\r\n  Read possible additional type info\r\n  ellipsis declaration\r\n  array declaration\r\n  Read argument name\r\n  verify that no argument name is declared\r\n  verify position\r\n  verify that all arguments name are declared\r\n  Verify token position\r\n  Read separator or end arguments declaration\r\n  Create new argument\r\n  May be aborted by specialized parser\r\n  Create new argument\r\n  May be aborted by specialized parser\r\n  Parse arguments declaration if method reference\r\n  Something wrong happened => Invalid input\r\n  See if expression is concerned by completion\r\n  completion cursor is between first and last stacked identifiers\r\n  or it's a completion on empty token\r\n  $NON-NLS-1$\r\n  completion cursor is between first and last stacked identifiers\r\n  or it's a completion on empty token\r\n  $NON-NLS-1$\r\n  See if expression is concerned by completion\r\n  Get reference tokens\r\n  @see ...#member\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Reset position to avoid missing tokens when new line was encountered\r\n  Scanner is looping on empty token => read it...\r\n  special case of completion just before the dot.\r\n  $NON-NLS-1$\r\n  Filter empty token\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  if we're on completion location do not verify end...\r\n /*\r\n\t * Do not parse comment if completion location is not included.\r\n\t */\r\n /*\r\n\t * Replace stored Javadoc node with specific completion one.\r\n\t */\r\n /*\r\n\t * Create argument expression. If it includes completion location, create and store completion node.\r\n\t */\r\n /*\r\n\t * Create field reference. If it includes completion location, create and store completion node.\r\n\t */\r\n /*\r\n\t * Verify if method identifier positions include completion location.\r\n\t * If so, create method reference and store it.\r\n\t * Otherwise return null as we do not need this reference.\r\n\t */\r\n /*\r\n\t * Create type reference. If it includes completion location, create and store completion node.\r\n\t */\r\n /*\r\n\t * Get possible tags for a given prefix.\r\n\t */\r\n /*\r\n\t * Init tags arrays for current source level.\r\n\t */\r\n /*\r\n\t * Parse argument in @see tag method reference\r\n\t */\r\n /* (non-Javadoc)\r\n\t\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser#parseReference()\r\n\t\t */\r\n /*(non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser#parseTag(int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser#parseThrows()\r\n\t */\r\n /*\r\n\t * Push param name reference. If it includes completion location, create and store completion node.\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser#readToken()\r\n\t */\r\n /* \r\n\t * Recover syntax on invalid qualified name.\r\n\t */\r\n /* \r\n\t * Recover syntax on type argument in invalid method/constructor reference\r\n\t */\r\n /*\r\n\t * Recover syntax on empty type argument in invalid method/constructor reference\r\n\t */\r\n /*\r\n\t * Store completion node into doc comment.\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser#verifySpaceOrEndComment()\r\n\t */\r\n","SuperReference":"implicitSuperConstructorCall isImplicitThis isSuper isThis printExpression resolveType traverse org.aspectj.org.eclipse.jdt.internal.compiler.ast.SuperReference  $NON-NLS-1$\r\n","InstructionFactory":"createInvoke createInvoke createALOAD createASTORE createConstant createFieldAccess createThis createReturn createPop createDup createDup_2 createDup_1 createStore createLoad createArrayLoad createArrayStore createCast createGetField createGetStatic createPutField createPutStatic createCheckCast createInstanceOf createNew createNew createNewArray createNull createBranchInstruction setClassGen getClassGen setConstantPool getConstantPool PUSH PUSH PUSH PUSH PUSH PUSH PUSH PUSH PUSH PUSH createInvoke createInvoke createALOAD createASTORE createConstant createFieldAccess createThis createReturn createPop createDup createDup_2 createDup_1 createStore createLoad createArrayLoad createArrayStore createCast createGetField createGetStatic createPutField createPutStatic createCheckCast createInstanceOf createNew createNew createNewArray createNull createBranchInstruction setClassGen getClassGen setConstantPool getConstantPool PUSH PUSH PUSH PUSH PUSH PUSH PUSH PUSH PUSH PUSH cg cp shortNames cg cp shortNames org.aspectj.apache.bcel.generic.InstructionFactory org.aspectj.apache.bcel.generic.InstructionFactory  Count size of arguments\r\n  Count size of arguments\r\n  Count size of arguments\r\n  Count size of arguments\r\n  OPTIMIZE callers should use the PUSH methods where possible if they know the types\r\n  Use BIPUSH\r\n  Use SIPUSH\r\n  If everything fails create a Constant pool entry\r\n  Create a Constant pool entry\r\n  Create a Constant pool entry\r\n  Create a Constant pool entry\r\n  Count size of arguments\r\n  Count size of arguments\r\n  Count size of arguments\r\n  Count size of arguments\r\n  OPTIMIZE callers should use the PUSH methods where possible if they know the types\r\n  Use BIPUSH\r\n  Use SIPUSH\r\n  If everything fails create a Constant pool entry\r\n  Create a Constant pool entry\r\n  Create a Constant pool entry\r\n  Create a Constant pool entry\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n","StackMapType":"setType getType setIndex getIndex dump hasIndex printIndex toString copy getConstantPool setConstantPool setType getType setIndex getIndex dump hasIndex printIndex toString copy getConstantPool setConstantPool type index constant_pool type index constant_pool org.aspectj.apache.bcel.classfile.StackMapType org.aspectj.apache.bcel.classfile.StackMapType  Index to CONSTANT_Class or offset\r\n  Index to CONSTANT_Class or offset\r\n","CreateElementInCUOperation":"apply checkCanceled createAfter createBefore executeOperation getChildPropertyDescriptor generateElementAST generateNewCompilationUnitAST generateResultHandle generateResultHandles getCompilationUnit getMainAmountOfWork getMainTaskName getSchedulingRule initializeDefaultPosition insertASTNode parse setAlteredName setRelativePosition verify cuAST INSERT_LAST INSERT_AFTER INSERT_BEFORE insertionPolicy anchorElement creationOccurred org.aspectj.org.eclipse.jdt.internal.core.CreateElementInCUOperation  a change has really occurred\r\n  if unit is working copy, then save will have already fired the delta\r\n  case of an empty import list: the anchor element is the top level type and cannot be used in insertBefore as it is not the same type\r\n  case of an empty import list: the anchor element is the top level type and cannot be used in insertAfter as it is not the same type\r\n  ensure cu is consistent (noop if already consistent)\r\n  create an AST for the compilation unit\r\n /*\r\n\t * Returns the property descriptor for the element being created.\r\n\t */\r\n /*\r\n\t * Returns an AST node for the element being created.\r\n\t */\r\n /*\r\n\t * Generates a new AST for this operation and applies it to the given cu\r\n\t */\r\n","CodeSnippetToCuMapper":"buildCUSource getCompletionRequestor getCUSource getEvaluationType getImport getSelectionRequestor cuSource lineNumberOffset startPosOffset codeSnippet snippetPackageName snippetImports snippetClassName snippetVarClassName snippetDeclaringTypeName localVarNames localVarTypeNames localVarModifiers org.aspectj.org.eclipse.jdt.internal.eval.CodeSnippetToCuMapper  Internal fields\r\n  Mapping of external local variables\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  package declaration\r\n  import declarations\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  super class is either a global variable class or the CodeSnippet class\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  val$this\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  val$...\r\n  add some storage location for local variable persisted state\r\n  $NON-NLS-1$\r\n  http:  end of class declaration\r\n  store result\r\n  Remove completion on generated class name or generated global variable class name\r\n  Remove completion on generated method\r\n  check package declaration\r\n  check imports\r\n  + 1 to skip the class declaration line\r\n  check generated fields\r\n  + 1 to skip the method declaration line\r\n  check code snippet\r\n  default\r\n","ProblemReporter":"getIrritant getProblemCategory abortDueToInternalError abortDueToInternalError abstractMethodCannotBeOverridden abstractMethodInAbstractClass abstractMethodMustBeImplemented abstractMethodNeedingNoBody alreadyDefinedLabel annotationCannotOverrideMethod annotationCircularity annotationMembersCannotHaveParameters annotationMembersCannotHaveTypeParameters annotationTypeDeclarationCannotHaveConstructor annotationTypeDeclarationCannotHaveSuperclass annotationTypeDeclarationCannotHaveSuperinterfaces annotationTypeUsedAsSuperinterface annotationValueMustBeAnnotation annotationValueMustBeArrayInitializer annotationValueMustBeClassLiteral annotationValueMustBeConstant anonymousClassCannotExtendFinalClass argumentTypeCannotBeVoid argumentTypeCannotBeVoidArray arrayConstantsOnlyInArrayInitializers assignmentHasNoEffect assignmentHasNoEffect attemptToReturnNonVoidExpression attemptToReturnVoidValue autoboxing boundCannotBeArray boundMustBeAnInterface bytecodeExceeds64KLimit bytecodeExceeds64KLimit cannotAllocateVoidArray cannotAssignToFinalField cannotAssignToFinalLocal cannotAssignToFinalOuterLocal cannotDefineDimensionsAndInitializer cannotDireclyInvokeAbstractMethod cannotExtendEnum cannotImportPackage cannotInstantiate cannotInvokeSuperConstructorInEnum cannotReadSource cannotReferToNonFinalOuterLocal cannotReturnInInitializer cannotThrowNull cannotThrowType cannotUseQualifiedEnumConstantInCaseLabel cannotUseSuperInCodeSnippet cannotUseSuperInJavaLangObject caseExpressionMustBeConstant classExtendFinalClass codeSnippetMissingClass codeSnippetMissingMethod computeSeverity conditionalArgumentsIncompatibleTypes conflictingImport constantOutOfFormat constantOutOfRange corruptedSignature deprecatedField deprecatedMethod deprecatedType disallowedTargetForAnnotation duplicateAnnotation duplicateAnnotationValue duplicateBounds duplicateCase duplicateDefaultCase duplicateEnumSpecialMethod duplicateFieldInType duplicateImport duplicateInheritedMethods duplicateInitializationOfBlankFinalField duplicateInitializationOfFinalLocal duplicateMethodInType duplicateModifierForField duplicateModifierForMethod duplicateModifierForType duplicateModifierForVariable duplicateNestedType duplicateSuperinterface duplicateTargetInTargetAnnotation duplicateTypeParameterInType duplicateTypes emptyControlFlowStatement enumAbstractMethodMustBeImplemented enumConstantsCannotBeSurroundedByParenthesis enumStaticFieldUsedDuringInitialization enumSwitchCannotTargetField errorNoMethodFor errorThisSuperInStatic expressionShouldBeAVariable fieldHiding fieldsOrThisBeforeConstructorInvocation finallyMustCompleteNormally finalMethodCannotBeOverridden finalVariableBound forbiddenReference forbiddenReference forbiddenReference forwardReference forwardTypeVariableReference genericTypeCannotExtendThrowable handle handle handle hiddenCatchBlock hierarchyCircularity hierarchyHasProblems illegalAbstractModifierCombinationForMethod illegalAccessFromTypeVariable illegalClassLiteralForTypeVariable illegalExtendedDimensions illegalExtendedDimensions illegalGenericArray illegalInstanceOfGenericType illegalLocalTypeDeclaration illegalModifierCombinationFinalAbstractForClass illegalModifierCombinationFinalVolatileForField illegalModifierForAnnotationField illegalModifierForAnnotationMember illegalModifierForAnnotationMemberType illegalModifierForAnnotationType illegalModifierForClass illegalModifierForEnum illegalModifierForEnumConstant illegalModifierForEnumConstructor illegalModifierForField illegalModifierForInterface illegalModifierForInterfaceField illegalModifierForInterfaceMethod illegalModifierForLocalClass illegalModifierForLocalEnum illegalModifierForMemberClass illegalModifierForMemberEnum illegalModifierForMemberInterface illegalModifierForMethod illegalModifierForVariable illegalPrimitiveOrArrayTypeForEnclosingInstance illegalQualifiedParameterizedTypeAllocation illegalStaticModifierForMemberType illegalUsageOfQualifiedTypeReference illegalVararg illegalVisibilityModifierCombinationForField illegalVisibilityModifierCombinationForMemberType illegalVisibilityModifierCombinationForMethod illegalVisibilityModifierForInterfaceMemberType illegalVoidExpression importProblem incompatibleExceptionInThrowsClause incompatibleReturnType incorrectArityForParameterizedType incorrectLocationForNonEmptyDimension incorrectSwitchType indirectAccessToStaticField indirectAccessToStaticMethod inheritedMethodReducesVisibility inheritedMethodsHaveIncompatibleReturnTypes inheritedMethodsHaveIncompatibleReturnTypes inheritedMethodsHaveNameClash initializerMustCompleteNormally innerTypesCannotDeclareStaticInitializers interfaceCannotHaveConstructors interfaceCannotHaveInitializers invalidAnnotationMemberType invalidBreak invalidConstructor invalidContinue invalidEnclosingType invalidExplicitConstructorCall invalidExpressionAsStatement invalidField invalidField invalidField invalidFileNameForPackageAnnotations invalidMethod invalidNullToSynchronize invalidOperator invalidOperator invalidOperator invalidParameterizedExceptionType invalidParenthesizedExpression invalidType invalidTypeForCollection invalidTypeReference invalidTypeToSynchronize invalidTypeVariableAsException invalidUnaryExpression invalidUsageOfAnnotation invalidUsageOfAnnotationDeclarations invalidUsageOfEnumDeclarations invalidUsageOfForeachStatements invalidUsageOfStaticImports invalidUsageOfTypeArguments invalidUsageOfTypeParameters invalidUsageOfVarargs illegalUsageOfWildcard isClassPathCorrect isIdentifier isKeyword isLiteral isRecoveredName isRecoveredName javadocAmbiguousMethodReference javadocDeprecatedField javadocDeprecatedMethod javadocDeprecatedType javadocDuplicatedParamTag javadocDuplicatedReturnTag javadocDuplicatedTag javadocDuplicatedThrowsClassName javadocEmptyReturnTag javadocErrorNoMethodFor javadocHiddenReference javadocInvalidConstructor javadocInvalidField javadocInvalidMemberTypeQualification javadocInvalidMethod javadocInvalidParamTagName javadocInvalidParamTypeParameter javadocInvalidReference javadocInvalidSeeReferenceArgs javadocInvalidSeeUrlReference javadocInvalidTag javadocInvalidThrowsClass javadocInvalidThrowsClassName javadocInvalidType javadocInvalidValueReference javadocMalformedSeeReference javadocMissing javadocMissingHashCharacter javadocMissingIdentifier javadocMissingParamName javadocMissingParamTag javadocMissingReference javadocMissingReturnTag javadocMissingThrowsClassName javadocMissingThrowsTag javadocUndeclaredParamTagName javadocUnexpectedTag javadocUnexpectedText javadocUnterminatedInlineTag javadocVisibility javadocVisibilityArgument localVariableHiding localVariableNonNullComparedToNull localVariableNullComparedToNonNull localVariableNullInstanceof localVariableNullReference localVariablePotentialNullReference localVariableRedundantCheckOnNonNull localVariableRedundantCheckOnNull localVariableRedundantNullAssignment methodMustOverride methodNameClash methodNeedBody methodNeedingNoBody methodWithConstructorName missingDeprecatedAnnotationForField missingDeprecatedAnnotationForMethod missingDeprecatedAnnotationForType missingEnumConstantCase missingOverrideAnnotation missingReturnType missingSemiColon missingSerialVersion missingValueForAnnotationMember mustDefineDimensionsOrInitializer mustSpecifyPackage mustUseAStaticMethod nativeMethodsCannotBeStrictfp needImplementation needToEmulateFieldAccess needToEmulateMethodAccess noAdditionalBoundAfterTypeVariable nodeSourceEnd nodeSourceEnd nodeSourceStart noMoreAvailableSpaceForArgument noMoreAvailableSpaceForConstant noMoreAvailableSpaceForLocal noMoreAvailableSpaceInConstantPool nonExternalizedStringLiteral nonGenericTypeCannotBeParameterized nonGenericTypeCannotBeParameterized nonStaticAccessToStaticField nonStaticAccessToStaticMethod nonStaticContextForEnumMemberType noSuchEnclosingInstance notCompatibleTypesError notCompatibleTypesError notCompatibleTypesErrorInForeach objectCannotBeGeneric objectCannotHaveSuperTypes objectMustBeClass operatorOnlyValidOnNumericType overridesDeprecatedMethod overridesMethodWithoutSuperInvocation overridesPackageDefaultMethod packageCollidesWithType packageIsNotExpectedPackage parameterAssignment parameterBoundAsString parameterizedMemberTypeMissingArguments parseError parseErrorDeleteToken parseErrorDeleteTokens parseErrorInsertAfterToken parseErrorInsertBeforeToken parseErrorInsertToComplete parseErrorInsertToCompletePhrase parseErrorInsertToCompleteScope parseErrorInvalidToken parseErrorMergeTokens parseErrorMisplacedConstruct parseErrorNoSuggestion parseErrorNoSuggestionForTokens parseErrorReplaceToken parseErrorReplaceTokens parseErrorUnexpectedEnd possibleAccidentalBooleanAssignment possibleFallThroughCase publicClassMustMatchFileName rawMemberTypeCannotBeParameterized rawTypeReference recursiveConstructorInvocation redefineArgument redefineLocal referenceMustBeArrayTypeAt reset retrieveClosingAngleBracketPosition retrieveEndingPositionAfterOpeningParenthesis retrieveStartingPositionAfterOpeningParenthesis returnTypeCannotBeVoidArray scannerError shouldReturn signalNoImplicitStringConversionForCharArrayExpression staticAndInstanceConflict staticFieldAccessToNonStaticVariable staticInheritedMethodConflicts staticMemberOfParameterizedType stringConstantIsExceedingUtf8Limit superclassMustBeAClass superfluousSemicolon superinterfaceMustBeAnInterface superinterfacesCollide superTypeCannotUseWildcard syntaxError task tooManyDimensions tooManyFields tooManyMethods typeCastError typeCollidesWithEnclosingType typeCollidesWithPackage typeHiding typeHiding typeHiding typeMismatchError typeMismatchError typesAsString undefinedAnnotationValue undefinedLabel undefinedTypeVariableSignature undocumentedEmptyBlock swallowedException unexpectedStaticModifierForField unexpectedStaticModifierForMethod unhandledException unhandledWarningToken uninitializedBlankFinalField uninitializedLocalVariable unmatchedBracket unnecessaryCast unnecessaryElse unnecessaryEnclosingInstanceSpecification unnecessaryInstanceof unnecessaryNLSTags unqualifiedFieldAccess unreachableCatchBlock unreachableCode unresolvableReference unsafeCast unsafeGenericArrayForVarargs unsafeRawFieldAssignment unsafeRawGenericMethodInvocation unsafeRawInvocation unsafeReturnTypeOverride unsafeTypeConversion unusedArgument unusedDeclaredThrownException unusedImport unusedLabel unusedLocalVariable unusedPrivateConstructor unusedPrivateField unusedPrivateMethod unusedPrivateType useAssertAsAnIdentifier useEnumAsAnIdentifier varargsArgumentNeedCast varargsConflict variableTypeCannotBeVoid variableTypeCannotBeVoidArray visibilityConflict wildcardAssignment wildcardInvocation wrongSequenceOfExceptionTypesError signalError referenceContext positionScanner org.aspectj.org.eclipse.jdt.internal.compiler.problem.ProblemReporter  fatal problems even if optional are all falling into same category (not irritant based)\r\n  TODO may want to improve\r\n  categorize fatal problems per ID\r\n  %1 must be abstract since it cannot override the inherited package-private abstract method %2\r\n  8.4.3 - Every non-abstract subclass of an abstract type, A, must provide a concrete implementation of all of A's methods.\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  specific encoding issue\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  look for the first digit that is incorrect\r\n  numeric literals do not need scope to reach type\r\n  $NON-NLS-1$   numeric literals do not need scope to reach type\r\n  1G828DN - no type ref for synthetic arguments\r\n  chech it occurs in parameters (the bit is set for return type | params | thrown exceptions\r\n  report the problem against the type not the entire compilation unit\r\n  8.4.3 - Every non-abstract subclass of an abstract type, A, must provide a concrete implementation of all of A's methods.\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-2$   do not report unused serialVersionUID field\r\n  do not report unused serialPersistentFields field\r\n  8.4.3.3 - Final methods cannot be overridden or hidden.\r\n  distinct from msg arg for quickfix purpose\r\n  distinct from msg arg for quickfix purpose\r\n  distinct from msg arg for quickfix purpose\r\n  distinct from msg arg for quickfix purpose\r\n  this problem has a message template extracted from the access restriction rule\r\n  as arguments\r\n  reference context.\r\n  as arguments\r\n  can only happen when java.lang.Object is busted\r\n  9.4.4 - The type of exception in the throws clause is incompatible.\r\n  interface inheriting Object protected method\r\n  9.4.4 - The type of exception in the throws clause is incompatible.\r\n  interface inheriting Object protected method\r\n  not reached since aborted above\r\n  The inherited method %1 cannot hide the public abstract method in %2\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  9.4.2 - The return type from the method is incompatible with the declaration.\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  9.4.2 - The return type from the method is incompatible with the declaration.\r\n  default...\r\n  remove extra info from the end\r\n  0\r\n  want to fail to see why we were here...\r\n  default\r\n  1\r\n  2\r\n  3\r\n  0\r\n  want to fail to see why we were here...\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  cannot occur in javadoc comments\r\n  0\r\n  want to fail to see why we were here...\r\n  0\r\n  want to fail to see why we were here...\r\n  0\r\n  want to fail to see why we were here...\r\n  default...\r\n  cannot occur in javadoc comments\r\n  remove extra info from the end\r\n  0\r\n  want to fail to see why we were here...\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  default\r\n  0\r\n  want to fail to see why we were here...\r\n  must be before instanceof ArrayQualifiedTypeReference\r\n  1G828DN - no type ref for synthetic arguments\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  default...\r\n  remove extra info from the end\r\n  0\r\n  want to fail to see why we were here...\r\n  0\r\n  want to fail to see why we were here...\r\n  report issue\r\n  set problem id\r\n  default...\r\n  remove extra info from the end\r\n  0\r\n  want to fail to see why we were here...\r\n  report issue\r\n  default\r\n  0\r\n  want to fail to see why we were here...\r\n  tolerate emulation for enum constructors, which can only be made private\r\n  binary case\r\n  22 = No enclosing instance of the type {0} is accessible in scope\r\n  21 = No enclosing instance of type {0} is accessible. Must qualify the allocation with an enclosing instance of type {0} (e.g. x.new A() where x is an instance of {0}).\r\n  20 = No enclosing instance of type {0} is accessible to invoke the super constructor. Must define a constructor and explicitly qualify its super constructor invocation with an instance of {0} (e.g. x.super() where x is an instance of {0}).\r\n  28 = No enclosing instance of type {0} is available due to some intermediate constructor invocation\r\n  $NON-NLS-1$\r\n  should never be a qualified name reference\r\n  $NON-NLS-1$\r\n  binary case\r\n  this is the current -invalid- token position\r\n  this is the current -invalid- token position\r\n  no suggestion available\r\n  build a list of probable right tokens\r\n  $NON-NLS-1$\r\n  this is the current -invalid- token position\r\n  extract the literal when it's a literal\r\n  this is the current -invalid- token position\r\n  as long as we consider fake reachable as reachable, better keep 'possible' in the name\r\n  report the problem against the type not the entire compilation unit\r\n  binary case\r\n  better locate the error message\r\n  better locate the error message\r\n  special treatment for recognized errors....\r\n  this is the current -invalid- token position\r\n  8.4.6.4 - If a class inherits more than one method with the same signature an instance (non-abstract) method cannot override a static method.\r\n  8.4.6.4 - If a class inherits more than one method with the same signature a static (non-abstract) method cannot hide an instance method.\r\n  8.4.6.4 - If a class inherits more than one method with the same signature it is an error for one to be static (non-abstract) and the other abstract.\r\n  binary case\r\n  report the problem against the type not the entire compilation unit\r\n  type parameter of generic method\r\n  binary case\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  can only occur inside binaries\r\n  AspectJ Extension\r\n  End AspectJ Extension\r\n  The generic constructor {0}({1}) of type {2} is applied to non-parameterized type arguments ({3})\r\n  do not report unused serialVersionUID field\r\n  do not report unused serialPersistentFields field\r\n  no report for serialization support 'void readObject(ObjectInputStream)'\r\n  no report for serialization support 'void writeObject(ObjectOutputStream)'\r\n  no report for serialization support 'Object readResolve()'\r\n  no report for serialization support 'Object writeReplace()'\r\n  8.4.6.3 - The access modifier of an overiding method must provide at least as much access as the overriden method.\r\n  ??? would like IProblem.Unknown\r\n /* AspectJ Extension */\r\n /*\r\n\t\t * Javadoc tags resolved references errors\r\n\t\t */\r\n /*\r\n\t\t * Javadoc invalid tags due to deprecated references\r\n\t\t */\r\n /*\r\n\t\t * Javadoc invalid tags due to non-visible references\r\n\t\t */\r\n /*\r\n * Given the current configuration, answers which category the problem\r\n * falls into:\r\n *\t\tProblemSeverities.Error | ProblemSeverities.Warning | ProblemSeverities.Ignore\r\n * when different from Ignore, severity can be coupled with ProblemSeverities.Optional\r\n * to indicate that this problem is configurable through options\r\n */\r\n /* to highlight modifiers use:\r\n\tthis.handle(\r\n\t\tnew Problem(\r\n\t\t\tDuplicateModifierForField,\r\n\t\t\tnew String[] {new String(fieldDecl.name)},\r\n\t\t\tfieldDecl.modifiers.sourceStart,\r\n\t\t\tfieldDecl.modifiers.sourceEnd));\r\n*/\r\n /* also need to check that the searchedType is the receiver type\r\n\t\t\tif (searchedType.isHierarchyInconsistent())\r\n\t\t\t\tseverity = SecondaryError;\r\n*/\r\n /* also need to check that the searchedType is the receiver type\r\n\t\t\tif (searchedType.isHierarchyInconsistent())\r\n\t\t\t\tseverity = SecondaryError;\r\n*/\r\n /*\r\n * Similar implementation than invalidField(FieldReference...)\r\n * Note that following problem id cannot occur for Javadoc:\r\n * \t- NonStaticReferenceInStaticContext :\r\n * \t- NonStaticReferenceInConstructorInvocation :\r\n * \t- ReceiverTypeNotVisible :\r\n */\r\n /*\r\n * Similar implementation than invalidMethod(MessageSend...)\r\n * Note that following problem id cannot occur for Javadoc:\r\n * \t- NonStaticReferenceInStaticContext :\r\n * \t- NonStaticReferenceInConstructorInvocation :\r\n * \t- ReceiverTypeNotVisible :\r\n */\r\n /*if (location instanceof ArrayTypeReference) {\r\n\t\tArrayTypeReference arrayTypeReference = (ArrayTypeReference) location;\r\n\t\tif (arrayTypeReference.token != null && arrayTypeReference.token.length == 0) return;\r\n\t\tend = arrayTypeReference.originalSourceEnd;\r\n\t}*/\r\n /* also need to check that the searchedType is the receiver type\r\n\tif (binding instanceof ProblemBinding) {\r\n\t\tProblemBinding problem = (ProblemBinding) binding;\r\n\t\tif (problem.searchType != null && problem.searchType.isHierarchyInconsistent())\r\n\t\t\tseverity = SecondaryError;\r\n\t}\r\n*/\r\n","ThreadStack":"getThreadStack getThreadStack getThreadStack org.aspectj.runtime.internal.cflowstack.ThreadStack org.aspectj.runtime.internal.cflowstack.ThreadStack org.aspectj.runtime.internal.cflowstack.ThreadStack /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * ******************************************************************/\r\n","AnonymousClassDeclaration":"propertyDescriptors internalStructuralPropertiesForType internalGetChildListProperty getNodeType0 clone0 subtreeMatch0 accept0 bodyDeclarations resolveBinding memSize treeSize BODY_DECLARATIONS_PROPERTY PROPERTY_DESCRIPTORS bodyDeclarations org.aspectj.org.eclipse.jdt.core.dom.AnonymousClassDeclaration  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  treat Code as free\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","CopyResourceElementsOperation":"initializeASTParser collectResourcesOfInterest createNeededPackageFragments getDeltaFor getMainTaskName prepareDeltas processCompilationUnitResource processDeltas processElement processElements processPackageFragmentResource saveContent updateContent updatePackageStatement updateReadOnlyPackageFragmentsForCopy updateReadOnlyPackageFragmentsForMove updateTypeName verify verify createdElements deltasPerProject parser org.aspectj.org.eclipse.jdt.internal.core.CopyResourceElementsOperation  Gather non-java resources\r\n  create deepest folder only if not a move (folder will be moved in processPackageFragmentResource)\r\n  all but the last one are side effect packages\r\n  null if unchanged\r\n  store encoding (fix bug 66898)\r\n  can be an IFolder or an IProject\r\n  see http:  abort\r\n  we can remove it\r\n  ensure the in-memory buffer for the dest CU is closed\r\n  update new resource content\r\n  register the correct change deltas\r\n  the main type has been renamed\r\n  if new pkg fragment exists, it is an override\r\n  check if there are no sub-packages\r\n  check if destination is not included in source\r\n  we need to delete this resource if this operation wants to override existing resources\r\n  we need to delete this resource if this operation wants to override existing resources\r\n  we need to delete this resource if this operation wants to override existing resources\r\n  process the leaf resources\r\n  TODO Revisit once bug 43044 is fixed\r\n  Process resources\r\n  if package has been renamed, update the compilation units\r\n  we only consider potential compilation units\r\n  Update package statement in compilation unit if needed\r\n  Discard empty old package (if still empty after the rename)\r\n  in case of a copy\r\n  in case of a copy\r\n  check if source is included in destination\r\n  delete recursively empty folders\r\n  workaround for bug https:  fix bug 66898\r\n  version control yet\r\n  ensure cu is consistent (noop if already consistent)\r\n  nothing to change\r\n  create new package statement\r\n  rename package statement\r\n  remove existing package statement\r\n  the source folder will be deleted anyway (move operation)\r\n  update main type name\r\n  rename type\r\n  rename constructors\r\n /* keep history */\r\n","BrowserViewManager":"getBrowserPanel extractAndInsertSignatures browserPanel DECLARATION_VIEW CROSSCUTTING_VIEW INHERITANCE_VIEW DECLARATION_VIEW_PROPERTIES CROSSCUTTING_VIEW_PROPERTIES INHERITANCE_VIEW_PROPERTIES org.aspectj.ajde.ui.swing.BrowserViewManager /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation\r\n *     Helen Hawkins  Converted to new interface (bug 148190)  \r\n * ******************************************************************/\r\n","JavaElement":"close closing createElementInfo equals escapeMementoName exists findNode generateInfos getAncestor getChildren getChildrenOfType getClassFile getCompilationUnit getElementInfo getElementInfo getElementName getHandleFromMemento getHandleFromMemento getHandleIdentifier getHandleMemento getHandleMemento getHandleMementoDelimiter getJavaModel getJavaProject getOpenable getOpenableParent getParent getPrimaryElement getPrimaryElement getSourceElementAt getSourceMapper getSchedulingRule hasChildren hashCode isAncestorOf isReadOnly newNotPresentException newJavaModelException openWhenClosed readableName resolved unresolved tabString toDebugString toString toString toStringWithAncestors toStringWithAncestors toStringAncestors toStringChildren toStringInfo toStringInfo toStringName getJavadocBaseLocation getRealClasspathEntry getLibraryJavadocLocation getAttachedJavadoc getIndexOf getURLContents CLOSING_DOUBLE_QUOTE CHARSET CONTENT_TYPE CONTENT JEM_ESCAPE JEM_JAVAPROJECT JEM_PACKAGEFRAGMENTROOT JEM_PACKAGEFRAGMENT JEM_FIELD JEM_METHOD JEM_INITIALIZER JEM_COMPILATIONUNIT JEM_CLASSFILE JEM_TYPE JEM_PACKAGEDECLARATION JEM_IMPORTDECLARATION JEM_COUNT JEM_LOCALVARIABLE JEM_TYPE_PARAMETER parent NO_ELEMENTS NO_INFO path org.aspectj.org.eclipse.jdt.internal.core.JavaElement  Java model parent is null\r\n  assume instanceof check is done in subclass\r\n  works only inside a compilation unit\r\n  $NON-NLS-1$\r\n  should not happen\r\n  check muti-declaration case (see https:  check name range\r\n  position in field's type: use first field\r\n  also see https:  close only the openable's buffer (see https:  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  return the real entry\r\n  not found\r\n  $NON-NLS-1$\r\n  https:  $NON-NLS-1$\r\n  platform encoding is used\r\n /*\r\n\t * Returns a new element info for this element.\r\n\t */\r\n /*\r\n\t * Creates a Java element handle from the given memento.\r\n\t * The given token is the current delimiter indicating the type of the next token(s).\r\n\t * The given working copy owner is used only for compilation unit handles.\r\n\t */\r\n /*\r\n\t * Creates a Java element handle from the given memento.\r\n\t * The given working copy owner is used only for compilation unit handles.\r\n\t */\r\n /*\r\n\t * @see IJavaElement\r\n\t */\r\n /*\r\n\t * @see IJavaElement#getPrimaryElement()\r\n\t */\r\n /*\r\n\t * Returns the primary element. If checkOwner, and the cu owner is primary,\r\n\t * return this element.\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.IJavaElement#getSchedulingRule()\r\n\t */\r\n /*\r\n\t * Opens an <code>Openable</code> that is known to be closed (no check for <code>isOpen()</code>).\r\n\t * Returns the created element info.\r\n\t */\r\n /*\r\n\t * @see IJavaElement#getAttachedJavadoc(IProgressMonitor)\r\n\t */\r\n /*\r\n\t * We don't use getContentEncoding() on the URL connection, because it might leave open streams behind.\r\n\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=117890 \r\n\t */\r\n","AnnotationTypeMemberDeclaration":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty internalGetChildListProperty internalJavadocProperty internalModifiers2Property internalModifiersProperty getNodeType0 clone0 subtreeMatch0 accept0 getName setName getType setType getDefault setDefault resolveBinding memSize treeSize JAVADOC_PROPERTY MODIFIERS2_PROPERTY NAME_PROPERTY TYPE_PROPERTY DEFAULT_PROPERTY PROPERTY_DESCRIPTORS memberName memberType optionalDefaultValue org.aspectj.org.eclipse.jdt.core.dom.AnnotationTypeMemberDeclaration  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  this property will not be asked for (node type did not exist in JLS2)\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  lazy init must be thread-safe for readers\r\n  a AnnotationTypeMemberDeclaration may occur inside an Expression - must check cycles\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","StructureViewNodeFactory":"createNode createNode createLink createRelationship createDeclaration acceptNode iconRegistry org.aspectj.ajde.ui.StructureViewNodeFactory  once under clinit field-set nodes and once under the field declaration.\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","DOMMethod":"addException addParameter appendMemberBodyContents appendMemberDeclarationContents appendSimpleContents getBody getConstructorName getDetailedNode getExceptions generateFlags getJavaElement getMemberDeclarationStartPosition getName getNodeType getParameterNames getParameterTypes getReturnType getReturnTypeContents hasTrailingArrayQualifier isConstructor isReturnTypeAltered isSignatureEqual newDOMNode offset setBody setBodyRangeEnd setConstructor setExceptions setName setParameters setReturnType setReturnTypeAltered setSourceRangeEnd shareContents toString setDefault getDefault getTypeParameters setTypeParameters fReturnType fReturnTypeRange fParameterList fParameterRange fExceptionList fExceptionRange fBody fBodyRange fParameterNames fParameterTypes fExceptions fTypeParameters fDefaultValue org.aspectj.org.eclipse.jdt.internal.core.jdom.DOMMethod  add space before body\r\n  $NON-NLS-1$\r\n  add 'throws' keyword\r\n  add list and space before body\r\n  add space before body\r\n  add exception list\r\n  append eveything before my name\r\n  append my name\r\n  append everything after my name\r\n  If there is no parent use the original name\r\n  translate parameter types to signatures\r\n  the other method has no parameters\r\n  this method has parameters\r\n  the methods have a different number of parameters\r\n  the other method has no parameters either\r\n  this method has no parameters\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  TODO (jerome) - add implementation support for 1.5 features\r\n","Block":"propertyDescriptors internalStructuralPropertiesForType internalGetChildListProperty getNodeType0 clone0 subtreeMatch0 accept0 statements memSize treeSize analyseCode generateCode isEmptyBlock printBody printStatement resolve resolveUsing traverse branchChainTo STATEMENTS_PROPERTY PROPERTY_DESCRIPTORS statements statements explicitDeclarations scope org.aspectj.org.eclipse.jdt.core.dom.Block org.aspectj.org.eclipse.jdt.internal.compiler.ast.Block  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  the number of explicit declaration , used to create scope\r\n  empty block\r\n  was really associated with its own scope\r\n  for local variable debug attributes\r\n  $NON-NLS-1$\r\n  this optimized resolve(...) is sent only on none empty blocks\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","CastExpression":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getType setType getExpression setExpression memSize treeSize analyseCode checkNeedForAssignedCast checkNeedForEnclosingInstanceCast checkNeedForArgumentCast checkNeedForArgumentCasts checkNeedForArgumentCasts checkAlternateBinding checkUnsafeCast generateCode innermostCastedExpression localVariableBinding nullStatus optimizedBooleanConstant printExpression resolveType setExpectedType isIndirectlyUsed tagAsNeedCheckCast tagAsUnnecessaryCast traverse TYPE_PROPERTY EXPRESSION_PROPERTY PROPERTY_DESCRIPTORS type expression expression type expectedType org.aspectj.org.eclipse.jdt.core.dom.CastExpression org.aspectj.org.eclipse.jdt.internal.compiler.ast.CastExpression  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  lazy init must be thread-safe for readers\r\n  treat Code as free\r\n  when assignment conversion to a given expected type: String s = (String) t;\r\n  no need to worry about raw type usage\r\n  expression.implicitConversion holds the cast for baseType casting\r\n  double d = (float) n;   if (castedExpressionType.id == T_null) return;   cannot do better\r\n  error case\r\n  tolerate null enclosing instance cast\r\n  obvious identity cast\r\n  check need for left operand cast\r\n  cannot do better\r\n  tolerate null argument cast\r\n  obvious identity cast\r\n  narrowing conversion on base type may change value, thus necessary\r\n  iterate over arguments, and retrieve original argument types (before cast)\r\n  narrowing conversion on base type may change value, thus necessary\r\n  cannot do better\r\n  retain original argument type\r\n  boxing has a side effect: (int) char   is not boxed as simple char\r\n  tolerate null argument cast\r\n  obvious identity cast\r\n  perform alternate lookup with original types\r\n  check need for left operand cast\r\n  cannot do better\r\n  tolerate null argument cast\r\n  obvious identity cast\r\n  narrowing conversion on base type may change value, thus necessary\r\n  check need for right operand cast\r\n  cannot do better\r\n  tolerate null argument cast\r\n  obvious identity cast\r\n  narrowing conversion on base type may change value, thus necessary\r\n  invalid operator\r\n  must convert String + Object || Object + String\r\n  mask hiding compile-time types\r\n  same promotions and result\r\n  to clarify between varargs  do not tag as unnecessary when recursing through upper bounds\r\n  unrelated types\r\n  [JLS 5.5] T >: S\r\n  [JLS 5.5] T <: S\r\n  jump to generic type\r\n  upcast since castType is known to be bound paramType\r\n  match is not parameterized or raw, then any other subtype of match will erase  to |T|\r\n  do not tag as unnecessary when recursing through upper bounds\r\n  Added for: 1F1W9IG: IVJCOM:WINNT - Compiler omits casting check\r\n  the resolveType cannot be double or long\r\n  no need to issue a checkcast if already done as genericCast\r\n  $NON-NLS-1$\r\n  expression as a cast\r\n  expression.setExpectedType(this.resolvedType);   illegal cast\r\n  disable further secondary diagnosis\r\n  used for generic type inference or boxing ?\r\n  unnecessary cast\r\n  unsafe cast\r\n  boxing: Short s = (short) _byte\r\n  cannot do better if expression is not bound\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","CompilationResult":"compare computePriority discardSuppressedWarnings getAllProblems getClassFiles getCompilationUnit getErrors getFileName getLineSeparatorPositions getProblems getTasks hasErrors hasProblems hasTasks hasWarnings quickPrioritize recordPackageName record record recordSuppressWarnings recordTask tagAsAccepted toString isFromBinarySource noSourceAvailable removeProblems accept problems tasks problemCount taskCount compilationUnit problemsMap firstErrors maxProblemPerUnit qualifiedReferences simpleNameReferences hasAnnotations lineSeparatorPositions recoveryScannerData compiledTypes unitIndex totalUnitsKnown hasBeenAccepted fileName hasInconsistentToplevelHierarchies hasSyntaxError suppressWarningIrritants suppressWarningScopePositions suppressWarningsCount packageName EMPTY_LINE_ENDS PROBLEM_COMPARATOR fromBinarySource org.aspectj.org.eclipse.jdt.internal.compiler.CompilationResult  record the fact some toplevel types have inconsistent hierarchies\r\n  irritant for suppressed warnings\r\n  (start << 32) + end\r\n  early problems first\r\n  if context is null, firstErrors is null too\r\n  AspectJ Extension - too many routes get us to here with a null firstErrors\r\n  discard suppressed warning\r\n  select the next problem\r\n  Stable sort problems per source positions.\r\n  Re-adjust the size of the problems if necessary.\r\n  Stable sort problems per source positions.\r\n  Re-adjust the size of the tasks if necessary.\r\n  sort the problems by their priority... starting with the highest priority\r\n  new Exception(\"VERBOSE PROBLEM REPORTING\").printStackTrace();\r\n  AspectJ Extension - does this matter??\r\n  End AspectJ Extension - complete new if()\r\n  flush\r\n  flush\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  AspectJ Extension\r\n  Quick first pass - check if anything to do\r\n  Second pass, do the removal - is this expensive?\r\n  in the imminent weave...\r\n /*\r\n * Record the compilation unit result's package name\r\n */\r\n","FileUtil":"accept toString accept toString accept accept isZipFile zipSuffixLength zipSuffixLength hasSourceSuffix hasSourceSuffix sourceSuffixLength sourceSuffixLength canReadDir canReadFile canWriteDir canWriteFile throwIaxUnlessCanReadFile throwIaxUnlessCanReadDir throwIaxUnlessCanWriteFile throwIaxUnlessCanWriteDir getPaths getPaths fileToClassName normalizedPath flatten flatten normalizedPath weakNormalize getBestFile getBestFile getBestPath getAbsolutePaths deleteContents deleteContents deleteContents copyDir copyDir copyDir copyDir listFiles accept listFiles listClassFiles getBaseDirFiles getBaseDirFiles newFile copyFiles copyFile ensureParentWritable copyValidFiles copyStream copyStream copyStream makeNewChildDir getTempDir getFileURLs getFileURL writeAsString readBooleanArray writeBooleanArray readIntArray writeIntArray readStringArray writeStringArray readAsString readAsString readAsByteArray readAsByteArray randomFileString getStreamFromZip extractJar lineSeek lineSeek makeOutputStream sleepPastFinalModifiedTime listClassFiles listFiles isValidFileName listFiles makeClasspath setSnoop run halt totalWritten getThrown completing accept toString accept toString accept accept isZipFile zipSuffixLength zipSuffixLength hasSourceSuffix hasSourceSuffix sourceSuffixLength sourceSuffixLength canReadDir canReadFile canWriteDir canWriteFile throwIaxUnlessCanReadFile throwIaxUnlessCanReadDir throwIaxUnlessCanWriteFile throwIaxUnlessCanWriteDir getPaths getPaths fileToClassName normalizedPath flatten flatten normalizedPath weakNormalize getBestFile getBestFile getBestPath getAbsolutePaths deleteContents deleteContents deleteContents copyDir copyDir copyDir copyDir listFiles accept listFiles listClassFiles getBaseDirFiles getBaseDirFiles newFile copyFiles copyFile ensureParentWritable copyValidFiles copyStream copyStream copyStream makeNewChildDir getTempDir getFileURLs getFileURL writeAsString readBooleanArray writeBooleanArray readIntArray writeIntArray readStringArray writeStringArray readAsString readAsString readAsByteArray readAsByteArray randomFileString getStreamFromZip extractJar lineSeek lineSeek makeOutputStream sleepPastFinalModifiedTime listClassFiles listFiles isValidFileName listFiles makeClasspath setSnoop run halt totalWritten getThrown completing DEFAULT_PARENT SOURCE_SUFFIXES ZIP_FILTER SOURCE_FILTER INT_RA ALL DIRS_AND_WRITABLE_CLASSES PERMIT_CVS aspectjSourceFileFilter FILECHARS in out sleep snoop totalWritten thrown halt closeInput closeOutput finishStream done DEFAULT_PARENT SOURCE_SUFFIXES ZIP_FILTER SOURCE_FILTER INT_RA ALL DIRS_AND_WRITABLE_CLASSES PERMIT_CVS aspectjSourceFileFilter FILECHARS in out sleep snoop totalWritten thrown halt closeInput closeOutput finishStream done org.aspectj.util.FileUtil org.aspectj.util.FileUtil  XXX user.dir?\r\n  treat as default package\r\n  int before = collector.size();\r\n  both file-dir and dir-dir copies\r\n  target file exists\r\n  file-file\r\n  existing directory\r\n  dir-dir\r\n  file-dir\r\n  XXX dangerous non-copy...\r\n  TODO AV - was toURI.toURL that does not works on Java 1.3\r\n  System.err.println(\"parent: \" + outFile.getParentFile());\r\n  OPTIMIZE only used by tests? move it out\r\n  hack https:  true after completing() completes\r\n  TODO this blocks, hanging the harness\r\n  XXX user.dir?\r\n  treat as default package\r\n  int before = collector.size();\r\n  both file-dir and dir-dir copies\r\n  target file exists\r\n  file-file\r\n  existing directory\r\n  dir-dir\r\n  file-dir\r\n  XXX dangerous non-copy...\r\n  TODO AV - was toURI.toURL that does not works on Java 1.3\r\n  System.err.println(\"parent: \" + outFile.getParentFile());\r\n  OPTIMIZE only used by tests? move it out\r\n  hack https:  true after completing() completes\r\n  TODO this blocks, hanging the harness\r\n /* boolean ret = */\r\n /* File toFileParent = */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* boolean ret = */\r\n /* File toFileParent = */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","PointcutBasedPerClause":"getPointcutExpression getPointcutExpression org.aspectj.lang.reflect.PointcutBasedPerClause org.aspectj.lang.reflect.PointcutBasedPerClause /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","MatchingContext":"hasContextBinding getBinding hasContextBinding getBinding org.aspectj.weaver.tools.MatchingContext org.aspectj.weaver.tools.MatchingContext /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","AnnotationMethodInfo":"createAnnotationMethod getDefaultValue toStringContent defaultValue org.aspectj.org.eclipse.jdt.internal.compiler.classfmt.AnnotationMethodInfo  check the name of each attribute\r\n  u2 attribute_name_index + u4 attribute_length = + 6\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","InternalCompletionContext":"setExpectedTypesSignatures setExpectedTypesKeys setJavadoc setOffset setTokenRange setTokenRange setToken setTokenKind expectedTypesSignatures expectedTypesKeys javadoc offset tokenStart tokenEnd token tokenKind org.aspectj.org.eclipse.jdt.internal.codeassist.InternalCompletionContext  the start of a code snippet but this API isn't design to support negative position.\r\n","Argument":"bind getKind isVarArgs print printStatement resolveForCatch traverse traverse SET org.aspectj.org.eclipse.jdt.internal.compiler.ast.Argument  $NON-NLS-1$\r\n  record the resolved type into the type reference\r\n  setter argument\r\n  constructor argument\r\n  true stand for argument instead of just local\r\n  $NON-NLS-1$\r\n  argument decl, but local var  (where isArgument = false)\r\n","Config":"DECL_ID_STRING DECL_ID_TERMINATOR WORKING_DIR DIR_SEP_CHAR USAGE org.aspectj.tools.ajdoc.Config  default\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n *     Mik Kersten\t  port to AspectJ 1.1+ code base\r\n * ******************************************************************/\r\n","BooleanLiteral":"propertyDescriptors internalStructuralPropertiesForType internalGetSetBooleanProperty getNodeType0 clone0 subtreeMatch0 accept0 booleanValue setBooleanValue memSize treeSize BOOLEAN_VALUE_PROPERTY PROPERTY_DESCRIPTORS value org.aspectj.org.eclipse.jdt.core.dom.BooleanLiteral  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","TheOriginalJDTParserClass":"asi base_check buildFile buildFileForName buildFileForReadableName buildFilesForRecoveryTemplates buildFilesForStatementsRecoveryFilter buildFileForCompliance buildFileForTable buildFileForTable buildFileOfByteFor buildFileOfIntFor buildFileOfShortFor buildFilesFromLPG in_symbol initTables nasi ntAction original_state computeReverseTable getSymbol readByteTable readNameTable readReadableNameTable readTable readLongTable tAction annotationRecoveryCheckPoint arrayInitializer blockReal buildInitialRecoveryState checkAndSetModifiers checkComment checkNonNLSAfterBodyEnd classInstanceCreation concatExpressionLists concatGenericsLists concatNodeLists consumeAdditionalBound consumeAdditionalBound1 consumeAdditionalBoundList consumeAdditionalBoundList1 consumeAllocationHeader consumeAnnotationAsModifier consumeAnnotationName consumeAnnotationTypeDeclaration consumeAnnotationTypeDeclarationHeader consumeAnnotationTypeDeclarationHeaderName consumeAnnotationTypeMemberDeclaration consumeAnnotationTypeMemberDeclarations consumeArgumentList consumeArguments consumeArrayAccess consumeArrayCreationExpressionWithInitializer consumeArrayCreationExpressionWithoutInitializer consumeArrayCreationHeader consumeArrayInitializer consumeArrayTypeWithTypeArgumentsName consumeAssertStatement consumeAssignment consumeAssignmentOperator consumeBinaryExpression consumeBinaryExpressionWithName consumeBlock consumeBlockStatements consumeCaseLabel consumeCastExpressionLL1 consumeCastExpressionWithGenericsArray consumeCastExpressionWithNameArray consumeCastExpressionWithPrimitiveType computeQualifiedGenericsFromRightSide consumeCastExpressionWithQualifiedGenericsArray consumeCatches consumeCatchHeader consumeClassBodyDeclaration consumeClassBodyDeclarations consumeClassBodyDeclarationsopt consumeAnnotationTypeMemberDeclarationsopt consumeClassBodyopt consumeClassDeclaration consumeClassHeader consumeClassHeaderExtends consumeClassHeaderImplements consumeClassHeaderName1 consumeTypeHeaderNameWithTypeParameters consumeClassInstanceCreationExpression consumeClassInstanceCreationExpressionName consumeClassInstanceCreationExpressionQualified consumeClassInstanceCreationExpressionQualifiedWithTypeArguments consumeClassInstanceCreationExpressionWithTypeArguments consumeClassOrInterface consumeClassOrInterfaceName consumeClassTypeElt consumeClassTypeList consumeCompilationUnit consumeConditionalExpression consumeConditionalExpressionWithName consumeConstructorBlockStatements consumeConstructorBody consumeConstructorDeclaration consumeConstructorHeader consumeConstructorHeaderName consumeConstructorHeaderNameWithTypeParameters consumeDefaultLabel consumeDefaultModifiers consumeDiet consumeDims consumeDimWithOrWithOutExpr consumeDimWithOrWithOutExprs consumeEmptyAnnotationTypeMemberDeclarationsopt consumeEmptyArgumentListopt consumeEmptyArguments consumeEmptyArrayInitializer consumeEmptyArrayInitializeropt consumeEmptyBlockStatementsopt consumeEmptyCatchesopt consumeEmptyClassBodyDeclarationsopt consumeEmptyMethodHeaderDefaultValue consumeEmptyDimsopt consumeEmptyEnumDeclarations consumeEmptyExpression consumeEmptyForInitopt consumeEmptyForUpdateopt consumeEmptyInterfaceMemberDeclarationsopt consumeEmptyInternalCompilationUnit consumeEmptyMemberValuePairsopt consumeEmptyMemberValueArrayInitializer consumeEmptyStatement consumeEmptySwitchBlock consumeEmptyTypeDeclaration consumeEnhancedForStatementHeaderInit consumeEnhancedForStatementHeader consumeEnhancedForStatement consumeEnterAnonymousClassBody consumeEnterCompilationUnit consumeEnterMemberValue consumeEnterMemberValueArrayInitializer consumeEnterVariable consumeEnumBodyNoConstants consumeEnumBodyWithConstants consumeEnumConstantHeaderName consumeEnumConstantHeader consumeEnumConstantNoClassBody consumeEnumConstants consumeEnumConstantWithClassBody consumeEnumDeclaration consumeEnumDeclarations consumeEnumHeader consumeEnumHeaderName consumeEqualityExpression consumeEqualityExpressionWithName consumeExitMemberValue consumeExitTryBlock consumeExitVariableWithInitialization consumeExitVariableWithoutInitialization consumeExplicitConstructorInvocation consumeExplicitConstructorInvocationWithTypeArguments consumeExpressionStatement consumeFieldAccess consumeFieldDeclaration consumeForceNoDiet consumeForInit consumeFormalParameter consumeFormalParameterList consumeFormalParameterListopt consumeGenericType consumeGenericTypeArrayType consumeGenericTypeNameArrayType consumeImportDeclaration consumeImportDeclarations consumeInsideCastExpression consumeInsideCastExpressionLL1 consumeInsideCastExpressionWithQualifiedGenerics consumeInstanceOfExpression consumeInstanceOfExpressionWithName consumeInterfaceDeclaration consumeInterfaceHeader consumeInterfaceHeaderExtends consumeInterfaceHeaderName1 consumeInterfaceMemberDeclarations consumeInterfaceMemberDeclarationsopt consumeInterfaceType consumeInterfaceTypeList consumeInternalCompilationUnit consumeInternalCompilationUnitWithTypes consumeInvalidAnnotationTypeDeclaration consumeInvalidConstructorDeclaration consumeInvalidConstructorDeclaration consumeInvalidInterfaceDeclaration consumeInvalidEnumDeclaration consumeInvalidMethodDeclaration consumeLabel consumeLeftParen consumeLocalVariableDeclaration consumeLocalVariableDeclarationStatement consumeMarkerAnnotation consumeMemberValueArrayInitializer consumeMemberValueAsName consumeMemberValuePair consumeMemberValuePairs consumeMemberValues consumeMethodBody consumeMethodDeclaration consumeMethodHeader consumeMethodHeaderDefaultValue consumeMethodHeaderExtendedDims consumeMethodHeaderName consumeMethodHeaderNameWithTypeParameters createMethodDeclaration createConstructorDeclaration consumeMethodHeaderRightParen consumeMethodHeaderThrowsClause consumeMethodInvocationName consumeMethodInvocationNameWithTypeArguments consumeMethodInvocationPrimary consumeMethodInvocationPrimaryWithTypeArguments consumeMethodInvocationSuper consumeMethodInvocationSuperWithTypeArguments consumeModifiers consumeModifiers2 consumeNameArrayType consumeNestedMethod consumeNestedType consumeNormalAnnotation consumeOneDimLoop consumeOnlySynchronized consumeOnlyTypeArguments consumeOnlyTypeArgumentsForCastExpression consumeOpenBlock consumePackageComment consumePackageDeclaration consumePackageDeclarationName consumePackageDeclarationNameWithModifiers consumePostfixExpression consumePrimaryNoNewArray consumePrimaryNoNewArrayArrayType consumePrimaryNoNewArrayName consumePrimaryNoNewArrayNameSuper consumePrimaryNoNewArrayNameThis consumePrimaryNoNewArrayPrimitiveArrayType consumePrimaryNoNewArrayPrimitiveType consumePrimaryNoNewArrayThis consumePrimaryNoNewArrayWithName consumePrimitiveArrayType consumePrimitiveType consumePushLeftBrace consumePushRealModifiers consumePushModifiers consumePushModifiersForHeader consumePushPosition consumeQualifiedName consumeRecoveryMethodHeaderName consumeRecoveryMethodHeaderNameWithTypeParameters consumeReduceImports consumeReferenceType consumeReferenceType1 consumeReferenceType2 consumeReferenceType3 consumeRestoreDiet consumeRightParen consumeRule consumeSimpleAssertStatement consumeSingleMemberAnnotation consumeSingleStaticImportDeclarationName consumeSingleTypeImportDeclarationName consumeStatementBreak consumeStatementBreakWithLabel consumeStatementCatch consumeStatementContinue consumeStatementContinueWithLabel consumeStatementDo consumeStatementExpressionList consumeStatementFor consumeStatementIfNoElse consumeStatementIfWithElse consumeStatementLabel consumeStatementReturn consumeStatementSwitch consumeStatementSynchronized consumeStatementThrow consumeStatementTry consumeStatementWhile consumeStaticImportOnDemandDeclarationName consumeStaticInitializer consumeStaticOnly consumeSwitchBlock consumeSwitchBlockStatement consumeSwitchBlockStatements consumeSwitchLabels consumeToken consumeTypeArgument consumeTypeArgumentList consumeTypeArgumentList1 consumeTypeArgumentList2 consumeTypeArgumentList3 consumeTypeArgumentReferenceType1 consumeTypeArgumentReferenceType2 consumeTypeArguments consumeTypeDeclarations consumeTypeImportOnDemandDeclarationName consumeTypeParameterHeader consumeTypeParameter1 consumeTypeParameter1WithExtends consumeTypeParameter1WithExtendsAndBounds consumeTypeParameterList consumeTypeParameterList1 consumeTypeParameters consumeTypeParameterWithExtends consumeTypeParameterWithExtendsAndBounds consumeUnaryExpression consumeUnaryExpression consumeVariableDeclarators consumeVariableInitializers consumeWildcard consumeWildcard1 consumeWildcard1WithBounds consumeWildcard2 consumeWildcard2WithBounds consumeWildcard3 consumeWildcard3WithBounds consumeWildcardBounds1Extends consumeWildcardBounds1Super consumeWildcardBounds2Extends consumeWildcardBounds2Super consumeWildcardBounds3Extends consumeWildcardBounds3Super consumeWildcardBoundsExtends consumeWildcardBoundsSuper consumeWildcardWithBounds containsComment convertToMethodDeclaration copyDims createFieldDeclaration createJavadocParser createLocalDeclaration createStringLiteral currentRecoveryType dietParse dispatchDeclarationInto dispatchDeclarationIntoEnumDeclaration endParse flushCommentsDefinedPriorTo getAnnotationType getFirstToken getJavaDocPositions getMethodBodies getNextCharacter getTypeReference getTypeReference getTypeReferenceForGenericType getUnspecifiedReference getUnspecifiedReferenceOptimized goForBlockStatementsopt goForBlockStatementsOrCatchHeader goForClassBodyDeclarations goForCompilationUnit goForExpression goForFieldDeclaration goForGenericMethodDeclaration goForHeaders goForImportDeclaration goForInitializer goForMemberValue goForMethodBody goForPackageDeclaration goForTypeDeclaration ignoreExpressionAssignment initialize initialize initializeScanner jumpOverMethodBody jumpOverType markEnclosingMemberWithLocalType markInitializersWithLocalType moveRecoveryCheckpoint newMessageSend newMessageSendWithTypeArguments optimizedConcatNodeLists parse parse parse parse parse parse parse parse parseClassBodyDeclarations parseExpression parseMemberValue parseStatements persistLineSeparatorPositions prepareForBlockStatements problemReporter pushIdentifier pushIdentifier pushOnAstLengthStack pushOnAstStack pushOnExpressionStack pushOnExpressionStackLengthStack pushOnGenericsStack pushOnGenericsIdentifiersLengthStack pushOnGenericsLengthStack pushOnIntStack pushOnRealBlockStack recoverStatements recoveryExitFromVariable recoveryTokenCheck reportSyntaxErrors reportSyntaxErrorsForSkippedMethod resetModifiers resetStacks resumeAfterRecovery resumeOnSyntaxError setMethodsFullRecovery setStatementsRecovery toString updateRecoveryState updateSourceDeclarationParts updateSourcePosition shouldTryToRecover THIS_CALL SUPER_CALL asb asr AstStackIncrement base_action BracketKinds check_table CurlyBracket DEBUG DEBUG_AUTOMATON EOF_TOKEN ERROR_TOKEN ExpressionStackIncrement GenericsStackIncrement FILEPREFIX in_symb INVALID_CHARACTER lhs name nasb nasr non_terminal_index READABLE_NAMES_FILE READABLE_NAMES_FILE_NAME readableName rhs reverse_index recovery_templates_index recovery_templates statements_recovery_filter rules_compliance RoundBracket scope_la scope_lhs scope_prefix scope_rhs scope_state scope_state_set scope_suffix SquareBracket StackIncrement term_action term_check terminal_index UNEXPECTED_EOF VERBOSE_RECOVERY astLengthPtr astLengthStack astPtr astStack compilationUnit currentElement currentToken diet dietInt endPosition endStatementPosition expressionLengthPtr expressionLengthStack expressionPtr expressionStack firstToken genericsIdentifiersLengthPtr genericsIdentifiersLengthStack genericsLengthPtr genericsLengthStack genericsPtr genericsStack hasError hasReportedError identifierLengthPtr identifierLengthStack identifierPositionStack identifierPtr identifierStack ignoreNextOpeningBrace intPtr intStack lastAct currentTokenStart lastCheckPoint lastErrorEndPosition lastErrorEndPositionBeforeRecovery lastIgnoredToken nextIgnoredToken listLength listTypeParameterLength lParenPos rParenPos modifiers modifiersSourceStart nestedMethod nestedType dimensions noAstNodes noExpressions optimizeStringLiterals options problemReporter rBraceStart rBraceEnd rBraceSuccessorStart realBlockPtr realBlockStack recoveredStaticInitializerStart referenceContext reportOnlyOneSyntaxError reportSyntaxErrorIsRequired restartRecovery methodRecoveryActivated statementRecoveryActivated recoveredTypes recoveredTypePtr nextTypeStart pendingRecoveredType recoveryScanner scanner stack stateStackTop synchronizedBlockSourceStart variablesCounter checkExternalizeStrings recordStringLiterals javadoc javadocParser lastJavadocEnd typeVisitor parser enclosingType types typePtr methodVisitor types typePtr org.aspectj.org.eclipse.jdt.internal.compiler.parser.TheOriginalJDTParserClass  ast stack\r\n  AspectJ extension - made protected\r\n  AspectJ extension - made protected\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  expression stack\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  internal data for the automat\r\n  $NON-NLS-1$\r\n  tells the scanner to jump over some parts of the code  if > 0 force the none-diet-parsing mode (even if diet if requested) [field parsing with anonymous inner classes...]\r\n  accurate only when used ! (the start position is pushed into intStack while the end the current one)\r\n  handle for multiple parsing goals\r\n  generics management\r\n  identifiers stacks\r\n  positions , dimensions , .... (int stacks)\r\n  handle for multiple parsing goals\r\n  for aspectj\r\n  error recovery management\r\n  for recovering some incomplete list (interfaces, throws or parameters)\r\n  for recovering some incomplete list (type parameters)\r\n  accurate only when used !\r\n  the ptr is nestedType\r\n  modifiers dimensions nestedType etc.......\r\n  accurate only when used !\r\n  public boolean statementRecoveryEnabled = true;\r\n  scanner token\r\n  javadoc\r\n  used for recovery\r\n  AspectJ Extension - added param\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  read upto the tag\r\n  can't be bigger\r\n  $NON-NLS-1$\r\n  resize\r\n  read upto the tag\r\n  can't be bigger\r\n  $NON-NLS-1$\r\n  resize\r\n  read upto the tag\r\n  can't be bigger\r\n  $NON-NLS-1$\r\n  resize\r\n  [org.aspectj.org.eclipse.jdt.internal.compiler.parser.Parser.buildFilesFromLPG(\"d:  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-2$   $NON-NLS-2$   $NON-NLS-2$   $NON-NLS-2$   $NON-NLS-2$   $NON-NLS-2$   $NON-NLS-1$   $NON-NLS-2$   $NON-NLS-2$   $NON-NLS-2$   $NON-NLS-2$   $NON-NLS-2$   $NON-NLS-2$   $NON-NLS-2$   $NON-NLS-2$   $NON-NLS-2$   $NON-NLS-2$   $NON-NLS-2$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  End AspectJ Extension\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  AspectJ Extension - used passed class not static ref\r\n  AspectJ Extension - used passed class not static ref\r\n  AspectJ Extension - used passed class not static ref\r\n  $NON-NLS-1$  AspectJ Extension - used passed class not static ref\r\n  minimal integrity check (even size expected)\r\n  convert bytes into chars\r\n  AspectJ Extension - used passed class not static ref\r\n  minimal integrity check (even size expected)\r\n  convert bytes into longs\r\n  javadoc support\r\n  positionning\r\n  increment the amount of declared variables for this block\r\n  experimenting restart recovery from scratch\r\n  recover only specific expressions\r\n  Add the pending type to the AST if this type isn't already added in the AST.\r\n  duplicate modifier\r\n  discard obsolete comments while inside methods or fields initializer (see bug 74369)\r\n  eliminate comments located after modifierSourceStart if positionned\r\n  consider all remaining leading comments to be part of current declaration\r\n  non javadoc comment have negative end positions\r\n  stop is one over,\r\n  do not report problem before last parsed comment while recovering code...\r\n  null if check javadoc is not activated\r\n  mark initializers with local type mark if needed\r\n  NO ClassBody\r\n  the position has been stored explicitly\r\n  will be created and added by the TC (see createsInternalConstructorWithBinding)\r\n  should never occur, this consumeRule is only used in recovery mode\r\n  beginning of an anonymous type\r\n  closing parenthesis\r\n  opening brace already taken into account\r\n  force to restart at this exact position\r\n  request to restart from here on\r\n  dispatch according to the type of the declarations\r\n  mark initializers with local type mark if needed\r\n  AspectJ Extension, added cast\r\n  always add <clinit> (will be remove at code gen time if empty)\r\n  used to avoid branching back into the regular automaton\r\n  flush the comments related to the annotation type header\r\n  consumeAnnotationTypeDeclarationHeader ::= '@' PushModifiers interface Identifier\r\n  Record that the block has a declaration for local types\r\n  highlight the name of the type\r\n  remove the start position of the interface token\r\n  remove the end position of the interface token\r\n  remove the position of the '@' token as we don't have modifiers\r\n  remove the position of the '@' token as we have modifiers\r\n  Store secondary info\r\n  consume annotations\r\n  javadoc\r\n  recovery\r\n  AnnotationTypeMemberDeclaration ::= AnnotationTypeMemberDeclarationHeader AnnotationTypeMemberHeaderExtendedDims DefaultValueopt ';'\r\n  a trailing comment behind the end of the method\r\n  AnnotationTypeMemberDeclarations ::= AnnotationTypeMemberDeclarations AnnotationTypeMemberDeclaration\r\n  ArgumentList ::= ArgumentList ',' Expression\r\n  nothing to do, the expression stack is already updated\r\n  optimize push  no need to worry about raw type usage\r\n  no need to worry about raw type usage\r\n  handle type arguments\r\n  AssertStatement ::= 'assert' Expression ':' Expression ';'\r\n  <--the encoded operator\r\n  The assignment must be replace by the anonymous type.\r\n  single out the a + b case\r\n  clear the bits on cursor and put them back on cursor.left\r\n  clear the bits on cursor and put them back on cursor.left\r\n  shift cursor; create BE  depthTracker + 1;\r\n  single out the a + b case\r\n  string + string\r\n  expressions)\r\n  full-fledged references table\r\n  string+string\r\n  string+char\r\n  look for \"string1\" + \"string2\"\r\n  string + string\r\n  string+string\r\n  string+char\r\n  look for \"string1\" + \"string2\"\r\n  IndexedBinaryExpression-s here since expr1 always holds a name\r\n  empty block\r\n  check whether this block at least contains some comment in it\r\n  still need to pop the block variable counter\r\n  BlockStatements ::= BlockStatements BlockStatement\r\n  SwitchLabel ::= 'case' ConstantExpression ':'\r\n  handle type arguments\r\n  CastExpression ::= PushLPAREN Name OnlyTypeArguments '.' ClassOrInterfaceType Dims PushRPAREN InsideCastExpression UnaryExpressionNotPlusMinus\r\n  Catches ::= Catches CatchClause\r\n  should never occur, this consumeRule is only used in recovery mode\r\n  current element should be a block due to the presence of the opening brace\r\n  convert argument to local variable\r\n  force to restart at this exact position\r\n  request to restart from here on\r\n  optimize the push  clear bit since was diet\r\n  pop sourcestart left on the stack by consumeNestedMethod.\r\n  pop the block variable counter left on the stack by consumeNestedMethod\r\n  ClassBodyDeclarations ::= ClassBodyDeclarations ClassBodyDeclaration\r\n  ClassBodyDeclarationsopt ::= NestedType ClassBodyDeclarations\r\n  ClassBodyopt ::= $empty\r\n  dispatch according to the type of the declarations\r\n  mark initializers with local type mark if needed\r\n  convert constructor that do not have the type's name into methods\r\n  add the default constructor when needed (interface don't have it)\r\n  always add <clinit> (will be remove at code gen time if empty)\r\n  used to avoid branching back into the regular automaton\r\n  flush the comments related to the class header\r\n  superclass\r\n  There is a class declaration on the top of stack\r\n  recovery\r\n  ClassHeaderImplements ::= 'implements' InterfaceTypeList\r\n  super interfaces\r\n  There is a class declaration on the top of stack\r\n  reset after having read super-interfaces\r\n  is recovering\r\n  recovery\r\n  ClassHeaderName1 ::= Modifiersopt 'class' 'Identifier'\r\n  Record that the block has a declaration for local types\r\n  highlight the name of the type\r\n  it is only used for the ClassLiteralAccess positions.\r\n  remove the end position of the class token\r\n  Store secondary info\r\n  consume annotations\r\n  will be updated when reading super-interfaces\r\n  recovery\r\n  javadoc\r\n  InterfaceHeaderName ::= InterfaceHeaderName1 TypeParameters\r\n  consume type parameters\r\n  is recovering\r\n  ClassInstanceCreationExpression ::= 'new' ClassType '(' ArgumentListopt ')' ClassBodyopt\r\n  ClassInstanceCreationExpressionName ::= Name '.'\r\n  ClassInstanceCreationExpression ::= ClassInstanceCreationExpressionName 'new' SimpleName '(' ArgumentListopt ')' ClassBodyopt\r\n  handle type arguments\r\n  mark initializers with local type mark if needed\r\n  NO ClassBody\r\n  the position has been stored explicitly\r\n  will be created and added by the TC (see createsInternalConstructorWithBinding)\r\n  ClassInstanceCreationExpression ::= 'new' TypeArguments ClassType '(' ArgumentListopt ')' ClassBodyopt\r\n  handle type arguments\r\n  mark initializers with local type mark if needed\r\n  NO ClassBody\r\n  the position has been stored explicitly\r\n  will be created and added by the TC (see createsInternalConstructorWithBinding)\r\n  handle type arguments\r\n  handle type arguments\r\n  ClassTypeElt ::= ClassType\r\n  ClassTypeList ::= ClassTypeList ',' ClassTypeElt\r\n  consume position of the question mark\r\n  consume position of the question mark\r\n  explictly add the first statement into the list of statements\r\n  ConstructorBody ::= NestedMethod  '{' ExplicitConstructorInvocation '}'\r\n  pop the position of the {  (body of the method) pushed in block decl\r\n  statements\r\n  add it only in non-diet mode, if diet_bodies, then constructor call will be added elsewhere.\r\n  need to add explicitly the super();\r\n  avoid a isSomeThing that would only be used here BUT what is faster between two alternatives ?\r\n  now we know that the top of stack is a constructorDeclaration\r\n  highlight of the implicit call on the method name\r\n  a trailing comment behind the end of the method\r\n  for invalid constructors\r\n  used to avoid branching back into the regular automaton\r\n  recovery\r\n  force to restart at this exact position\r\n  ConstructorDeclaration cd = new ConstructorDeclaration(this.compilationUnit.compilationResult);\r\n  name -- this is not really revelant but we do .....\r\n  modifiers\r\n  consume annotations\r\n  javadoc\r\n  highlight starts at the selector starts\r\n  initialize this.listLength before reading parameters  recovery\r\n  force to restart at this exact position\r\n  ConstructorHeaderName ::=  Modifiersopt TypeParameters 'Identifier' '('\r\n  name -- this is not really revelant but we do .....\r\n  consume type parameters\r\n  modifiers\r\n  consume annotations\r\n  javadoc\r\n  highlight starts at the selector starts\r\n  initialize this.listLength before reading parameters  recovery\r\n  SwitchLabel ::= 'default' ':'\r\n  might update modifiers with AccDeprecated\r\n  modifiers\r\n  no annotation\r\n  Diet ::= $empty\r\n  push the start position of a javadoc comment if there is one\r\n  Dims ::= DimsLoop\r\n  DimWithOrWithOutExpr ::= '[' ']'\r\n  DimWithOrWithOutExprs ::= DimWithOrWithOutExprs DimWithOrWithOutExpr\r\n  AnnotationTypeMemberDeclarationsopt ::= $empty\r\n  ArgumentListopt ::= $empty\r\n  Argumentsopt ::= $empty\r\n  ArrayInitializer ::= '{' ,opt '}'\r\n  ArrayInitializeropt ::= $empty\r\n  BlockStatementsopt ::= $empty\r\n  Catchesopt ::= $empty\r\n  ClassBodyDeclarationsopt ::= $empty\r\n  DefaultValueopt ::= $empty\r\n  'method' can be a MethodDeclaration when recovery is started\r\n  Dimsopt ::= $empty\r\n  EnumBodyDeclarationsopt ::= $empty\r\n  Expressionopt ::= $empty\r\n  ForInitopt ::= $empty\r\n  ForUpdateopt ::= $empty\r\n  InterfaceMemberDeclarationsopt ::= $empty\r\n  create a fake interface declaration\r\n  nothing to do by default\r\n  MemberValuePairsopt ::= $empty\r\n  MemberValueArrayInitializer ::= '{' '}'\r\n  EmptyStatement ::= ';'\r\n  we have a Unicode for the ';' (  SwitchBlock ::= '{' '}'\r\n  TypeDeclaration ::= ';'\r\n  remove fake modifiers  type dimension\r\n  consume annotations\r\n  EnhancedForStatementHeader ::= EnhancedForStatementHeaderInit ':' Expression ')'\r\n  updates are on the expression stack\r\n  statements\r\n  foreach statement is on the ast stack\r\n  remember useful empty statement\r\n  EnterAnonymousClassBody ::= $empty\r\n  the position has been stored explicitly\r\n  position at the type while it impacts the anonymous declaration\r\n  will be updated when reading super-interfaces\r\n  flush the comments related to the anonymous\r\n  opening brace already taken into account\r\n  recovery\r\n  EnterMemberValueArrayInitializer ::= $empty\r\n  create the ast node\r\n  create the field declaration\r\n  create the local variable declarations\r\n  type dimension\r\n  consume annotations\r\n  Store javadoc only on first declaration as it is the same for all ones\r\n  consume annotations\r\n  type dimension\r\n  this is true if there is no modifiers for the local variable declaration\r\n  first variable of the declaration (FieldDeclaration or LocalDeclaration)\r\n  || declaration.modifiers != 0\r\n  recovery\r\n  merge the constants values with the class body\r\n  Store secondary info\r\n  consume annotations\r\n  javadoc\r\n  fill arguments if needed\r\n  qualified allocation expression\r\n  closing parenthesis\r\n  fill arguments if needed\r\n  force to restart at this exact position\r\n  opening brace already taken into account\r\n  recovery\r\n  set declarationEnd and declarationSourceEnd\r\n  pop type\r\n  remove end position of the arguments\r\n  EnumDeclaration ::= EnumHeader ClassHeaderImplementsopt EnumBody\r\n  dispatch according to the type of the declarations\r\n  mark initializers with local type mark if needed\r\n  convert constructor that do not have the type's name into methods\r\n  add the default constructor when needed\r\n  always add <clinit> (will be remove at code gen time if empty)\r\n  used to avoid branching back into the regular automaton\r\n  flush the comments related to the enum header\r\n  EnumHeaderName ::= Modifiersopt 'enum' Identifier\r\n  markEnclosingMemberWithLocalType();\r\n  highlight the name of the type\r\n  it is only used for the ClassLiteralAccess positions.\r\n  remove the end position of the class token\r\n  consume annotations\r\n  }\r\n  will be updated when reading super-interfaces\r\n  TODO this code will be never run while 'enum' is an identifier in 1.3 scanner\r\n  recovery\r\n  javadoc\r\n  EqualityExpression ::= Name '!=' RelationalExpression\r\n  ExitTryBlock ::= $empty\r\n  do nothing by default\r\n  source end position of the initialization expression\r\n  ExpressionStatement ::= StatementExpression ';'\r\n  optimize push  fieldreference begins at the receiver\r\n  considerates the fieldReference beginning at the 'super' ....\r\n  semi-colon included\r\n  update the this.astStack, this.astPtr and this.astLengthStack\r\n  remove the type reference\r\n  recovery\r\n  ForceNoDiet ::= $empty\r\n  ForInit ::= StatementExpressionList\r\n  set isVarArgs\r\n  modifiers\r\n  consume annotations\r\n  FormalParameterList ::= FormalParameterList ',' FormalParameter\r\n  FormalParameterListopt ::= $empty\r\n  SingleTypeImportDeclaration ::= SingleTypeImportDeclarationName ';'\r\n  flush annotations defined prior to import statements\r\n  recovery\r\n  ImportDeclarations ::= ImportDeclarations ImportDeclaration\r\n  InsideCastExpressionLL1 ::= $empty\r\n  by construction, no base type may be used in getTypeReference\r\n  array on base type....\r\n  by construction, no base type may be used in getTypeReference\r\n  array on base type....\r\n  InterfaceDeclaration ::= InterfaceHeader InterfaceBody\r\n  dispatch.....according to the type of the declarations\r\n  mark initializers with local type mark if needed\r\n  convert constructor that do not have the type's name into methods\r\n  always add <clinit> (will be remove at code gen time if empty)\r\n  used to avoid branching back into the regular automaton\r\n  flush the comments related to the interface header\r\n  InterfaceHeaderExtends ::= 'extends' InterfaceTypeList\r\n  super interfaces\r\n  reset after having read super-interfaces\r\n  recovery\r\n  InterfaceHeaderName ::= Modifiersopt 'interface' 'Identifier'\r\n  Record that the block has a declaration for local types\r\n  highlight the name of the type\r\n  it is only used for the ClassLiteralAccess positions.\r\n  remove the end position of the class token\r\n  Store secondary info\r\n  consume annotations\r\n  will be updated when reading super-interfaces\r\n  is recovering\r\n  recovery\r\n  javadoc\r\n  InterfaceMemberDeclarations ::= InterfaceMemberDeclarations InterfaceMemberDeclaration\r\n  InterfaceMemberDeclarationsopt ::= NestedType InterfaceMemberDeclarations\r\n  InterfaceType ::= ClassOrInterfaceType\r\n  InterfaceTypeList ::= InterfaceTypeList ',' InterfaceType\r\n  create a fake interface declaration\r\n  InternalCompilationUnit ::= ImportDeclarations ReduceImports\r\n  consume type declarations\r\n  create a fake interface declaration\r\n  BlockStatement ::= AnnotationTypeDeclaration\r\n  remove the ast node created in interface header\r\n  now we know that the top of stack is a constructorDeclaration\r\n  position just before the trailing semi-colon\r\n  remember semi-colon body\r\n  pop the position of the {  (body of the method) pushed in block decl\r\n  statements\r\n  InterfaceDeclaration ::= Modifiersopt 'interface' 'Identifier' ExtendsInterfacesopt InterfaceHeader InterfaceBody\r\n  remove the ast node created in interface header\r\n  BlockStatement ::= EnumDeclaration\r\n  remove the ast node created in interface header\r\n  pop the position of the {  (body of the method) pushed in block decl\r\n  statements\r\n  watch for } that could be given as a unicode ! ( u007D is '}' )\r\n  report the problem and continue the parsing - narrowing the problem onto the method\r\n  PushLPAREN ::= '('\r\n  update the this.astStack, this.astPtr and this.astLengthStack\r\n  remove the type reference\r\n  increment the amount of declared variables for this block\r\n  update source end to include the semi-colon\r\n  semi-colon included\r\n  MarkerAnnotation ::= '@' Name\r\n  MemberValueArrayInitializer ::= '{' MemberValues '}'\r\n  MemberValuePair ::= SimpleName '=' MemberValue\r\n  MemberValuePairs ::= MemberValuePairs ',' MemberValuePair\r\n  MemberValues ::= MemberValues ',' MemberValue\r\n  MethodBody ::= NestedMethod '{' BlockStatementsopt '}'\r\n  pop the position of the {  (body of the method) pushed in block decl\r\n  statements\r\n  now we know that we have a method declaration at the top of the ast stack\r\n  remember the fact that the method has a semicolon body\r\n  is a body when we reduce the method header\r\n  a trailing comment behind the end of the method\r\n  retrieve end position of method declarator\r\n  } else\r\n  used to avoid branching back into the regular automaton\r\n  recovery\r\n  MethodHeaderDefaultValue ::= DefaultValue\r\n  we get rid of the position of the default keyword\r\n  we get rid of the position of the default keyword\r\n  now we update the returnType of the method\r\n  recovery\r\n  RecoveryMethodHeaderName ::= Modifiersopt Type 'Identifier' '('\r\n  AspectJ Extension\r\n  name\r\n  type\r\n  modifiers\r\n  consume annotations\r\n  javadoc\r\n  highlight starts at selector start\r\n  initialize this.listLength before reading parameters  || md.modifiers != 0\r\n  recovery\r\n  RecoveryMethodHeaderName ::= Modifiersopt TypeParameters Type 'Identifier' '('\r\n  md = new MethodDeclaration(this.compilationUnit.compilationResult);\r\n  name\r\n  type\r\n  consume type parameters\r\n  modifiers\r\n  consume annotations\r\n  javadoc\r\n  highlight starts at selector start\r\n  initialize this.listLength before reading parameters  || md.modifiers != 0\r\n  recovery\r\n  AspectJ Extension\r\n  MethodHeaderParameters ::= FormalParameterListopt ')'\r\n  arguments\r\n  reset this.listLength after having read all parameters\r\n  might not have been attached yet - in some constructor scenarii\r\n  recovery\r\n  MethodHeaderThrowsClause ::= 'throws' ClassTypeList\r\n  reset this.listLength after having read all thrown exceptions\r\n  recovery\r\n  handle type arguments\r\n  handle type arguments\r\n  start position of the super keyword\r\n  start position of the typeArguments\r\n  handle type arguments\r\n  start position of the super keyword\r\n  might update modifiers with AccDeprecated\r\n  modifiers\r\n  handle type arguments\r\n  NestedMethod ::= $empty\r\n  NestedType ::= $empty\r\n  increase the size of the variablesCounter as well. It has to be consistent with the size of the nestedMethod collection\r\n  NormalAnnotation ::= '@' Name '(' MemberValuePairsopt ')'\r\n  OneDimLoop ::= '[' ']'\r\n  OnlySynchronized ::= 'synchronized'\r\n  get possible comment for syntax since 1.5\r\n  flush comments defined prior to import statements\r\n  this.endPosition is just before the ;\r\n  get possible comment source start\r\n  used to avoid branching back into the regular automaton\r\n  recovery\r\n  we don't need the modifiers start\r\n  get possible comment source start\r\n  we don't need the position of the 'package keyword\r\n  consume annotations\r\n  used to avoid branching back into the regular automaton\r\n  recovery\r\n  PostfixExpression ::= Name\r\n  PrimaryNoNewArray ::=  PushLPAREN Expression PushRPAREN\r\n  remove the class start position\r\n  remove the class start position\r\n  handle type arguments\r\n  handle type arguments\r\n  handle type arguments\r\n  handle type arguments\r\n  remove the class start position\r\n  remove the class start position\r\n  PrimaryNoNewArray ::= 'this'\r\n  PrimaryNoNewArray ::=  PushLPAREN Expression PushRPAREN\r\n  Type ::= PrimitiveType\r\n  modifiers\r\n  might update modifiers with AccDeprecated\r\n  modifiers\r\n  modifiers\r\n  might update modifiers with AccDeprecated\r\n  modifiers\r\n  PushPosition ::= $empty\r\n  this method is call only inside recovery\r\n  this method is call only inside recovery\r\n  Consume imports\r\n  handle array type\r\n  RestoreDiet ::= $empty\r\n  PushRPAREN ::= ')'\r\n  AspectJ extension - subclass should be used\r\n  This method is part of an automatic generation : do NOT edit-modify\r\n  AssertStatement ::= 'assert' Expression ';'\r\n  SingleMemberAnnotation ::= '@' Name '(' MemberValue ')'\r\n  <-- see comment into modifiersFlag(int)\r\n  this.endPosition is just before the ;\r\n  convert the static import reference to a non-static importe reference\r\n  used to avoid branching back into the regular automaton\r\n  recovery\r\n  this.endPosition is just before the ;\r\n  used to avoid branching back into the regular automaton\r\n  recovery\r\n  The break statement must be replace by the local type.\r\n  reset formalParameter counter (incremented for catch variable)\r\n  the 'while' pushes a value on this.intStack that we need to remove\r\n  StatementExpressionList ::= StatementExpressionList ',' StatementExpression\r\n  statements\r\n  updates are on the expresion stack\r\n  on this.astStack\r\n  on this.expressionStack\r\n  inits may be on two different stacks\r\n  optimize the push  optimized {..., Then, Else } ==> {..., If }\r\n  optimize the push  optimize push  ThrowStatement ::= 'throw' Expression ';'\r\n  finally\r\n  catches are handle by two <argument-block> [see statementCatch]\r\n  try\r\n  positions\r\n  <-- see comment into modifiersFlag(int)\r\n  this.endPosition is just before the ;\r\n  convert the static import reference to a non-static importe reference\r\n  used to avoid branching back into the regular automaton\r\n  recovery\r\n  optimize the push  clear bit set since was diet\r\n  doc comment\r\n  recovery\r\n  StaticOnly ::= 'static'\r\n  might update declaration source start\r\n  remove the 0 pushed in consumeToken() for the static modifier\r\n  remember start position only for static initializers\r\n  recovery\r\n  SwitchBlock ::= '{' SwitchBlockStatements SwitchLabels '}'\r\n  SwitchBlockStatement ::= SwitchLabels BlockStatements\r\n  SwitchBlockStatements ::= SwitchBlockStatements SwitchBlockStatement\r\n  SwitchLabels ::= SwitchLabels SwitchLabel\r\n  'class' is pushing two int (positions) on the stack ==> 'interface' needs to do it too....\r\n  ==============================\r\n  regular type parsing that generates a dimension on this.intStack\r\n  ==============================\r\n  ============================\r\n  https:  let extra semantic action decide when to push\r\n  the item is not part of the potential futur expression  position of the end of right parenthesis (in case of unicode \\u0029) lex00101\r\n  System.out.println(this.scanner.toStringAction(type));\r\n  TypeDeclarations ::= TypeDeclarations TypeDeclaration\r\n  this.endPosition is just before the ;\r\n  used to avoid branching back into the regular automaton\r\n  recovery\r\n  TypeParameterHeader ::= Identifier\r\n  TypeParameter1 ::= TypeParameterHeader 'extends' ReferenceType1\r\n  TypeParameter1 ::= TypeParameterHeader 'extends' ReferenceType AdditionalBoundList1\r\n  TypeParameterList ::= TypeParameterList ',' TypeParameter\r\n  TypeParameterList1 ::= TypeParameterList ',' TypeParameter1\r\n  TypeParameter ::= TypeParameterHeader 'extends' ReferenceType\r\n  TypeParameter ::= TypeParameterHeader 'extends' ReferenceType AdditionalBoundList\r\n  the ++ or the -- is NOT taken into account if code gen proceeds\r\n  ++foo()++ is unvalid\r\n  VariableDeclarators ::= VariableDeclarators ',' VariableDeclarator\r\n  VariableInitializers ::= VariableInitializers ',' VariableInitializer\r\n  remove end position of the '?'\r\n  remove the starting position of the super keyword\r\n  remove end position of the '?'\r\n  remove end position of the '?'\r\n  remove the starting position of the super keyword\r\n  remove end position of the '?'\r\n  remove end position of the '?'\r\n  remove the starting position of the super keyword\r\n  remove end position of the '?'\r\n  remove end position of the '?'\r\n  remove the starting position of the super keyword\r\n  remove end position of the '?'\r\n  ignore comments before start\r\n  ignore comments after end\r\n  plus one -- see <HERE>\r\n  field\r\n  methods and constructors have been regrouped into one single list\r\n  arrays creation\r\n  arrays fill up\r\n  treat the last element as a ended flag.....\r\n  array copy\r\n  <HERE> the plus one allows to\r\n  <HERE> the plus one allows to\r\n  <HERE> the plus one allows to\r\n  plus one -- see <HERE>\r\n  methods and constructors have been regrouped into one single list\r\n  arrays creation\r\n  arrays fill up\r\n  treat the last element as a ended flag.....\r\n  array copy\r\n  <HERE> the plus one allows to\r\n  <HERE> the plus one allows to\r\n  <HERE> the plus one allows to\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  no comment\r\n  compute the index of the first obsolete comment\r\n  negative end position for non-javadoc comments\r\n  non-javadoc comment end positions are negative\r\n  comment end in one char too far\r\n  flush this comment\r\n  flush this comment and shift <position> to the comment end.\r\n  no obsolete comment\r\n  do nothing\r\n  move valid comment infos, overriding obsolete comment infos\r\n  javadoc only (non javadoc comment have negative end positions.)\r\n  stop is one over\r\n  javadoc only (non javadoc comment have negative end positions.)\r\n  work already done ...\r\n  see bug 47079 for more details\r\n  real parse of the method....\r\n  tag unit has having read bodies\r\n  line separator positions array.\r\n  Qualified variable reference\r\n  pop the 0\r\n  generic type\r\n  flag for precompiled type reference on base types\r\n  we are in a case A<B>.C<D> or A<B>.C<D>\r\n  we are in a case A.B.C<B>.C<D> or A.B.C<B>...\r\n  sourceStart\r\n  sourceEnd\r\n  Qualified variable reference\r\n  single variable reference\r\n  single variable reference\r\n  sourceStart\r\n  sourceEnd\r\n  recovery goals must record line separators\r\n  tells the scanner to go for headers only parsing\r\n  recovery goals must record line separators\r\n  recovery goals must record line separators\r\n  encoded operator would be: this.intStack[this.intPtr]\r\n  report a syntax error and abort parsing\r\n  avoiding stack reallocation and all that....\r\n  need to reset for further reuse\r\n  reset this.scanner state\r\n  recovery\r\n  $NON-NLS-1$\r\n  this is already done in the recovery code\r\n  mark type for now: all initializers will be marked when added to this type\r\n  and enclosing type must not be closed (see https:  default to reference context (case of parse method body)\r\n  AspectJ Extension\r\n  quit jumping over method bodies\r\n  on fake completion identifier\r\n  already tried one iteration on EOF\r\n  no more recovery after this point\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$    $NON-NLS-1$    $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  ProcessNonTerminals :\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  record all nls tags in the corresponding compilation unit\r\n  $NON-NLS-1$\r\n  name[symbol_index[currentKind]]\r\n  statements\r\n  need to add explicitly the super();\r\n  avoid a isSomeThing that would only be used here BUT what is faster between two alternatives ?\r\n  mark field with local type if one was found during parsing\r\n  reset parser\r\n  tag unit has having read bodies\r\n  pretend empty from thereon\r\n  just on the beginning {\r\n  refill statements\r\n  check whether this block at least contains some comment in it\r\n  mark initializer with local type if one was found during parsing\r\n  reset the scanner to parser from { down to }\r\n  refill statements\r\n  A P I\r\n  AspectJ extension - specific instance to use rather than 'Parser.this' in the methods in the visitor\r\n  used only for initializer\r\n  AspectJ extension enable the visitor to use a particular parser instance\r\n  opening brace detected\r\n  fall through\r\n  A P I\r\n  <-- see comment into modifiersFlag(int)\r\n  need to reset for further reuse\r\n  reset internal stacks\r\n  only look for headers\r\n  reset internal stacks\r\n  passed this point, will not consider method bodies\r\n  only look for headers\r\n  does not know how to restart\r\n  Reset javadoc before restart parsing after recovery\r\n  do not investigate deeper in statement recovery\r\n  build some recovered elements\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  last one is special(see below)\r\n  last one\r\n  AspectJ Extension - to be overridden\r\n /*the result from parse()*/\r\n /* initialize recovery by retrieving available reduced nodes \r\n\t * also rebuild bracket balance \r\n\t */\r\n /* Initializer bodies are parsed in the context of the type declaration, we must thus search it inside */\r\n /* ignore current stack state, since restarting from the beginnning \r\n\t\t   since could not trust simple brace count */\r\n /*\r\n * Build initial recovery state.\r\n * Recovery state is inferred from the current state of the parser (reduced node stack).\r\n */\r\n /*\r\n\tif (op == OR_OR) {\r\n\t\tthis.expressionStack[this.expressionPtr] = \r\n\t\t\tnew OR_OR_Expression(\r\n\t\t\t\tthis.expressionStack[this.expressionPtr + 1], \r\n\t\t\t\tthis.expressionStack[this.expressionPtr], \r\n\t\t\t\top); \r\n\t} else {\r\n\t\tif (op == AND_AND) {\r\n\t\t\tthis.expressionStack[this.expressionPtr] = \r\n\t\t\t\tnew AND_AND_Expression(\r\n\t\t\t\t\tthis.expressionStack[this.expressionPtr + 1], \r\n\t\t\t\t\tthis.expressionStack[this.expressionPtr], \r\n\t\t\t\t\top);\r\n\t\t} else {\r\n\t\t\t// look for \"string1\" + \"string2\"\r\n\t\t\tif ((op == PLUS) && this.optimizeStringLiterals) {\r\n\t\t\t\tExpression expr1, expr2;\r\n\t\t\t\texpr1 = this.expressionStack[this.expressionPtr + 1];\r\n\t\t\t\texpr2 = this.expressionStack[this.expressionPtr];\r\n\t\t\t\tif (expr1 instanceof StringLiteral) {\r\n\t\t\t\t\tif (expr2 instanceof CharLiteral) { // string+char\r\n\t\t\t\t\t\tthis.expressionStack[this.expressionPtr] = \r\n\t\t\t\t\t\t\t((StringLiteral) expr1).extendWith((CharLiteral) expr2); \r\n\t\t\t\t\t} else if (expr2 instanceof StringLiteral) { //string+string\r\n\t\t\t\t\t\tthis.expressionStack[this.expressionPtr] = \r\n\t\t\t\t\t\t\t((StringLiteral) expr1).extendWith((StringLiteral) expr2); \r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.expressionStack[this.expressionPtr] = new BinaryExpression(expr1, expr2, PLUS);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.expressionStack[this.expressionPtr] = new BinaryExpression(expr1, expr2, PLUS);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.expressionStack[this.expressionPtr] = \r\n\t\t\t\t\tnew BinaryExpression(\r\n\t\t\t\t\t\tthis.expressionStack[this.expressionPtr + 1], \r\n\t\t\t\t\t\tthis.expressionStack[this.expressionPtr], \r\n\t\t\t\t\t\top);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t*/\r\n /* if incomplete thrown exception list, this.listLength counter will not have been reset,\r\n\t\tindicating that some items are available on the stack */\r\n /* recovering - might be an empty message send */\r\n /* recovering - might be an empty message send */\r\n /*\r\n * @param op\r\n */\r\n /* flag allows to distinguish 3 cases :\r\n\t(0) :   \r\n\tExplicitConstructorInvocation ::= 'this' '(' ArgumentListopt ')' ';'\r\n\tExplicitConstructorInvocation ::= 'super' '(' ArgumentListopt ')' ';'\r\n\t(1) :\r\n\tExplicitConstructorInvocation ::= Primary '.' 'super' '(' ArgumentListopt ')' ';'\r\n\tExplicitConstructorInvocation ::= Primary '.' 'this' '(' ArgumentListopt ')' ';'\r\n\t(2) :\r\n\tExplicitConstructorInvocation ::= Name '.' 'super' '(' ArgumentListopt ')' ';'\r\n\tExplicitConstructorInvocation ::= Name '.' 'this' '(' ArgumentListopt ')' ';'\r\n\t*/\r\n /* flag allows to distinguish 3 cases :\r\n\t(0) :   \r\n\tExplicitConstructorInvocation ::= TypeArguments 'this' '(' ArgumentListopt ')' ';'\r\n\tExplicitConstructorInvocation ::= TypeArguments 'super' '(' ArgumentListopt ')' ';'\r\n\t(1) :\r\n\tExplicitConstructorInvocation ::= Primary '.' TypeArguments 'super' '(' ArgumentListopt ')' ';'\r\n\tExplicitConstructorInvocation ::= Primary '.' TypeArguments 'this' '(' ArgumentListopt ')' ';'\r\n\t(2) :\r\n\tExplicitConstructorInvocation ::= Name '.' TypeArguments 'super' '(' ArgumentListopt ')' ';'\r\n\tExplicitConstructorInvocation ::= Name '.' TypeArguments 'this' '(' ArgumentListopt ')' ';'\r\n\t*/\r\n /*\r\n\tthis.astStack : \r\n\tthis.expressionStack: Expression Expression ...... Expression\r\n\tthis.identifierStack : type  identifier identifier ...... identifier\r\n\tthis.intStack : typeDim      dim        dim               dim\r\n\t ==>\r\n\tthis.astStack : FieldDeclaration FieldDeclaration ...... FieldDeclaration\r\n\tthis.expressionStack :\r\n\tthis.identifierStack : \r\n\tthis.intStack : \r\n\t  \r\n\t*/\r\n /* if incomplete method header, this.listLength counter will not have been reset,\r\n\t\tindicating that some arguments are available on the stack */\r\n /* if incomplete type header, this.listLength counter will not have been reset,\r\n\t\tindicating that some interfaces are available on the stack */\r\n /*\r\n\tthis.astStack : modifiers arguments throws statements\r\n\tthis.identifierStack : name\r\n\t ==>\r\n\tthis.astStack : MethodDeclaration\r\n\tthis.identifierStack :\r\n\t*/\r\n /*\r\n\tthis.astStack : \r\n\tthis.expressionStack: Expression Expression ...... Expression\r\n\tthis.identifierStack : type  identifier identifier ...... identifier\r\n\tthis.intStack : typeDim      dim        dim               dim\r\n\t ==>\r\n\tthis.astStack : FieldDeclaration FieldDeclaration ...... FieldDeclaration\r\n\tthis.expressionStack :\r\n\tthis.identifierStack : \r\n\tthis.intStack : \r\n\t  \r\n\t*/\r\n /*&& !method.isAnnotationMethod()*/\r\n /*\r\n * Answer back an array of sourceStart/sourceEnd positions of the available JavaDoc comments.\r\n * The array is a flattened structure: 2*n entries with consecutives start and end positions.\r\n *\r\n * If no JavaDoc is available, then null is answered instead of an empty array.\r\n *\r\n * e.g. { 10, 20, 25, 45 }  --> javadoc1 from 10 to 20, javadoc2 from 25 to 45\r\n */\r\n /*comment*/\r\n /*whitespace*/\r\n /* will be set in initialize(boolean) */\r\n /*sourceLevel*/\r\n /*complianceLevel*/\r\n /*taskTags*/\r\n /*taskPriorities*/\r\n /* reset this.scanner, and move checkpoint by one token */\r\n /* if about to restart, then no need to shift token */\r\n /* protect against shifting on an invalid token */\r\n /* reset this.scanner again to previous checkpoint location*/\r\n /*\r\n * Move checkpoint location (current implementation is moving it by one token)\r\n *\r\n * Answers true if successfully moved checkpoint (in other words, it did not attempt to move it\r\n * beyond end of file).\r\n */\r\n /* shift */\r\n /* shift-reduce */\r\n /* automaton initialization */\r\n /* unit creation */\r\n /* scanners initialization */\r\n /* run automaton */\r\n /* automaton initialization */\r\n /* scanner initialization */\r\n /* type declaration should be parsed as member type declaration */\r\n /* unit creation */\r\n /* run automaton */\r\n /*\r\n * Prepares the state of the parser to go for BlockStatements.\r\n */\r\n /* Token check performed on every token shift once having entered\r\n * recovery mode.\r\n */\r\n /*\r\n * Reset context so as to resume to regular parse loop\r\n */\r\n /* attempt to move checkpoint location */\r\n /* attempt to move checkpoint location */\r\n /*\r\n * Reset context so as to resume to regular parse loop\r\n * If unable to reset for resuming, answers false.\r\n *\r\n * Move checkpoint location, reset internal stacks and\r\n * decide which grammar goal is activated.\r\n */\r\n /* request recovery initialization */\r\n /* do not investigate deeper in recovery when no recovered element */\r\n /* manual forced recovery restart - after headers */\r\n /* update recovery state with current error state of the parser */\r\n /* attempt to reset state in order to resume to parse loop */\r\n /* expose parser state to recovery state */\r\n /* check and update recovered state based on current token,\r\n\t\tthis action is also performed when shifting token after recovery\r\n\t\tgot activated once. \r\n\t*/\r\n /*\r\n * Update recovery state based on current parser/scanner state\r\n */\r\n","ILocalVariableAttribute":"getLocalVariableTableLength getLocalVariableTable org.aspectj.org.eclipse.jdt.core.util.ILocalVariableAttribute","RuntimeVisibleAnnotationsAttribute":"getAnnotations getAnnotationsNumber NO_ENTRIES annotationsNumber annotations org.aspectj.org.eclipse.jdt.internal.core.util.RuntimeVisibleAnnotationsAttribute /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IRuntimeVisibleAnnotations#getAnnotations()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IRuntimeVisibleAnnotations#getAnnotationsNumber()\r\n\t */\r\n","CompletionOnImportReference":"print org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnImportReference  $NON-NLS-1$\r\n","ConstructorDeclaration":"analyseCode analyseCode generateCode generateSyntheticFieldInitializationsIfNecessary internalGenerateCode isConstructor isDefaultConstructor isInitializationMethod isRecursive parseStatements printBody resolveJavadoc resolveStatements traverse typeParameters constructorCall typeParameters org.aspectj.org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration  tolerate as known pattern to block instantiation\r\n  complain unused\r\n  check constructor recursion, once all constructor got resolved\r\n  anonymous constructor can gain extra thrown exceptions from unhandled ones\r\n  tag parameters as being set\r\n  set since they are supposed to be set inside other local constructor\r\n  propagate to constructor call\r\n  reuse the reachMode from non static field info\r\n  propagate to statements\r\n  check for missing returning path\r\n  reuse the initial reach mode for diagnosing missing blank finals\r\n  check missing blank final field initializations\r\n  check unreachable catch blocks\r\n  Handle methods with invalid signature or duplicates\r\n  request wide mode\r\n  restart method generation\r\n  a branch target required a goto_w, restart code gen in wide mode.\r\n  AspectJ Extension - moved code to helper, was 'classFile.generateMethodInfoAttribute(this.binding)'\r\n  initialize local positions - including initializer scope.\r\n  String name, int ordinal\r\n  this==aload0\r\n  consider synthetic arguments if any\r\n  consider synthetic arguments if any\r\n  arguments initialization for local variable debug attributes\r\n  offset by the argument size (since not linked to method scope)\r\n  post 1.4 target level, synthetic initializations occur prior to explicit constructor call\r\n  generate constructor call\r\n  generate user field initialization\r\n  generate field initialization - only if not invoking another constructor call of the same class\r\n  generate statements\r\n  local variable attributes\r\n  if a problem got reported during code gen, then trigger problem method creation\r\n  direct case\r\n  aj fun\r\n  only blame if directly part of the cycle\r\n  lazy allocation\r\n  fill up the constructor body with its statements\r\n  $NON-NLS-1$\r\n  cannot use super() in java.lang.Object\r\n  if null ==> an error has occurs at parsing time ....\r\n /*\r\n * Returns true if the constructor is directly involved in a cycle.\r\n * Given most constructors aren't, we only allocate the visited list\r\n * lazily.\r\n */\r\n /*\r\n * Type checking for constructor, just another method, except for special check\r\n * for recursive constructor invocations.\r\n */\r\n","ArrayAnnotationValue":"setValues getValues stringify toString setValues getValues stringify toString values values org.aspectj.weaver.ArrayAnnotationValue org.aspectj.weaver.ArrayAnnotationValue /* *******************************************************************\r\n * Copyright (c) 2006 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement IBM     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2006 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement IBM     initial implementation \r\n * ******************************************************************/\r\n","JDTLikeHandleProvider":"createHandleIdentifier getParameters getCount convertCount getFileForHandle getLineNumberForHandle getOffSetForHandle createHandleIdentifier createHandleIdentifier dependsOnLocation initialize createHandleIdentifier getParameters getCount convertCount getFileForHandle getLineNumberForHandle getOffSetForHandle createHandleIdentifier createHandleIdentifier dependsOnLocation initialize initializerCounter empty countDelim backslash emptyString initializerCounter empty countDelim backslash emptyString org.aspectj.asm.internal.JDTLikeHandleProvider org.aspectj.asm.internal.JDTLikeHandleProvider  because this information cannot be gained from the ipe.\r\n  therefore just return it\r\n  <root> or the .lst file\r\n  want to miss out '#import declaration' in the handle\r\n  add the handle for the parent\r\n  add the correct delimiter for this ipe\r\n  } else {\r\n  (initializer's names are '...')\r\n  kind in the aspect\r\n  its a parameterized type\r\n  its an array\r\n  TODO could optimize this code\r\n  depends on previous children\r\n  only depends on previous anonymous children, name irrelevant\r\n  Look at any peer advice\r\n  parent\r\n  parent\r\n  parent\r\n  handles are independent of soureLocations therefore return false\r\n  same handle as JDT for initializers.\r\n  because this information cannot be gained from the ipe.\r\n  therefore just return it\r\n  <root> or the .lst file\r\n  want to miss out '#import declaration' in the handle\r\n  add the handle for the parent\r\n  add the correct delimiter for this ipe\r\n  } else {\r\n  (initializer's names are '...')\r\n  kind in the aspect\r\n  its a parameterized type\r\n  its an array\r\n  TODO could optimize this code\r\n  depends on previous children\r\n  only depends on previous anonymous children, name irrelevant\r\n  Look at any peer advice\r\n  parent\r\n  parent\r\n  parent\r\n  handles are independent of soureLocations therefore return false\r\n  same handle as JDT for initializers.\r\n","ILRUCacheable":"getCacheFootprint org.aspectj.org.eclipse.jdt.internal.core.util.ILRUCacheable","ImageBuilderInternalException":"getLocalizedMessage getThrowable printStackTrace serialVersionUID coreException org.aspectj.org.eclipse.jdt.internal.core.builder.ImageBuilderInternalException  backward compatible\r\n  $NON-NLS-1$\r\n","IDOMCompilationUnit":"getHeader getName setHeader setName org.aspectj.org.eclipse.jdt.core.jdom.IDOMCompilationUnit","IOutputClassFileNameProvider":"getOutputClassFileName org.aspectj.ajdt.internal.compiler.IOutputClassFileNameProvider","CommonsTrace":"enter enter exit exit exit event event isTraceEnabled setTraceEnabled debug info warn error fatal enter enter exit exit exit event event isTraceEnabled setTraceEnabled debug info warn error fatal log className log className org.aspectj.weaver.tools.CommonsTrace org.aspectj.weaver.tools.CommonsTrace","JavaClass":"accept Debug dump dump getBytes dump dump getAttributes getAnnotations getClassName getPackageName getClassNameIndex getConstantPool getFields getFileName getInterfaceNames getInterfaceIndices getMajor getMethods getMethod getMethod getField getMinor getSourceFileName getSuperclassName getSuperclassNameIndex setAttributes setClassName setClassNameIndex setConstantPool setFields setFileName setInterfaceNames setInterfaces setMajor setMethods setMinor setSourceFileName setSuperclassName setSuperclassNameIndex toString indent copy isSuper isClass isAnonymous isNested computeNestedTypeStatus isAnnotation isEnum getRepository setRepository instanceOf implementationOf getSuperClass getSuperClasses getInterfaces getAllInterfaces getGenericSignature isGeneric loadGenericSignatureInfoIfNecessary getGenericClassTypeSignature accept Debug dump dump getBytes dump dump getAttributes getAnnotations getClassName getPackageName getClassNameIndex getConstantPool getFields getFileName getInterfaceNames getInterfaceIndices getMajor getMethods getMethod getMethod getField getMinor getSourceFileName getSuperclassName getSuperclassNameIndex setAttributes setClassName setClassNameIndex setConstantPool setFields setFileName setInterfaceNames setInterfaces setMajor setMethods setMinor setSourceFileName setSuperclassName setSuperclassNameIndex toString indent copy isSuper isClass isAnonymous isNested computeNestedTypeStatus isAnnotation isEnum getRepository setRepository instanceOf implementationOf getSuperClass getSuperClasses getInterfaces getAllInterfaces getGenericSignature isGeneric loadGenericSignatureInfoIfNecessary getGenericClassTypeSignature file_name package_name source_file_name class_name_index superclass_name_index class_name superclass_name major minor constant_pool interfaces interface_names fields methods attributes annotations isGeneric isAnonymous isNested computedNestedTypeStatus HEAP FILE ZIP debug sep annotationsOutOfDate signatureAttributeString signatureAttribute searchedForSignatureAttribute NO_INTERFACE_NAMES repository file_name package_name source_file_name class_name_index superclass_name_index class_name superclass_name major minor constant_pool interfaces interface_names fields methods attributes annotations isGeneric isAnonymous isNested computedNestedTypeStatus HEAP FILE ZIP debug sep annotationsOutOfDate signatureAttributeString signatureAttribute searchedForSignatureAttribute NO_INTERFACE_NAMES repository org.aspectj.apache.bcel.classfile.JavaClass org.aspectj.apache.bcel.classfile.JavaClass  Compiler version\r\n  Constant pool\r\n  implemented interfaces\r\n  Fields, i.e., variables of class\r\n  methods defined in the class\r\n  attributes defined in the class\r\n  annotations defined on the class\r\n  Debugging on  directory separator\r\n  Annotations are collected from certain attributes, don't do it more than necessary!\r\n  state for dealing with generic signature string\r\n  TODO create a constant for no fields\r\n  TODO create a constant for no methods\r\n  Get source file name if available\r\n  May be zero -> class is java.lang.Object\r\n  Find attributes that contain annotation data\r\n  Debugging ... on  Get path separator either   Attribute[] attrs = attributes.getAttributes();\r\n  OPTIMIZE get rid of ClassQueue and ClassVector\r\n  Compiler version\r\n  Constant pool\r\n  implemented interfaces\r\n  Fields, i.e., variables of class\r\n  methods defined in the class\r\n  attributes defined in the class\r\n  annotations defined on the class\r\n  Debugging on  directory separator\r\n  Annotations are collected from certain attributes, don't do it more than necessary!\r\n  state for dealing with generic signature string\r\n  TODO create a constant for no fields\r\n  TODO create a constant for no methods\r\n  Get source file name if available\r\n  May be zero -> class is java.lang.Object\r\n  Find attributes that contain annotation data\r\n  Debugging ... on  Get path separator either   Attribute[] attrs = attributes.getAttributes();\r\n  OPTIMIZE get rid of ClassQueue and ClassVector\r\n /*\r\n\t\t * According to the specification the following entries must be of type `ConstantClass' but we check that anyway via the\r\n\t\t * `ConstPool.getConstant' method.\r\n\t\t */\r\n /*\r\n\t * Print debug information depending on `JavaClass.debug'\r\n\t */\r\n /*\r\n\t\t * According to the specification the following entries must be of type `ConstantClass' but we check that anyway via the\r\n\t\t * `ConstPool.getConstant' method.\r\n\t\t */\r\n /*\r\n\t * Print debug information depending on `JavaClass.debug'\r\n\t */\r\n","MissingResolvedTypeWithKnownSignature":"isMissing getDeclaredFields getDeclaredMethods getDeclaredInterfaces getDeclaredPointcuts getSuperclass getModifiers getSourceContext isAssignableFrom isAssignableFrom isCoerceableFrom hasAnnotation getInterTypeMungers getInterTypeMungersIncludingSupers getInterTypeParentMungers getInterTypeParentMungersIncludingSupers collectInterTypeMungers raiseWarningOnJoinPointSignature raiseWarningOnMissingInterfaceWhilstFindingMethods raiseCantFindType raiseCantFindType isMissing getDeclaredFields getDeclaredMethods getDeclaredInterfaces getDeclaredPointcuts getSuperclass getModifiers getSourceContext isAssignableFrom isAssignableFrom isCoerceableFrom hasAnnotation getInterTypeMungers getInterTypeMungersIncludingSupers getInterTypeParentMungers getInterTypeParentMungersIncludingSupers collectInterTypeMungers raiseWarningOnJoinPointSignature raiseWarningOnMissingInterfaceWhilstFindingMethods raiseCantFindType raiseCantFindType NO_MEMBERS NO_TYPES issuedCantFindTypeError issuedJoinPointWarning issuedMissingInterfaceWarning NO_MEMBERS NO_TYPES issuedCantFindTypeError issuedJoinPointWarning issuedMissingInterfaceWarning org.aspectj.weaver.MissingResolvedTypeWithKnownSignature org.aspectj.weaver.MissingResolvedTypeWithKnownSignature  MessageUtil.warn(world.getMessageHandler(),message);\r\n  MessageUtil.warn(world.getMessageHandler(),message);\r\n  MessageUtil.error(world.getMessageHandler(),message);\r\n  MessageUtil.error(world.getMessageHandler(),message);\r\n  MessageUtil.warn(world.getMessageHandler(),message);\r\n  MessageUtil.warn(world.getMessageHandler(),message);\r\n  MessageUtil.error(world.getMessageHandler(),message);\r\n  MessageUtil.error(world.getMessageHandler(),message);\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.ResolvedType#getDeclaredFields()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.ResolvedType#getDeclaredMethods()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.ResolvedType#getDeclaredInterfaces()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.ResolvedType#getDeclaredPointcuts()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.ResolvedType#getSuperclass()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.ResolvedType#getModifiers()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.ResolvedType#getSourceContext()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.ResolvedType#isAssignableFrom(org.aspectj.weaver.ResolvedType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.ResolvedType#isCoerceableFrom(org.aspectj.weaver.ResolvedType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.AnnotatedElement#hasAnnotation(org.aspectj.weaver.UnresolvedType)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.ResolvedType#getDeclaredFields()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.ResolvedType#getDeclaredMethods()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.ResolvedType#getDeclaredInterfaces()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.ResolvedType#getDeclaredPointcuts()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.ResolvedType#getSuperclass()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.ResolvedType#getModifiers()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.ResolvedType#getSourceContext()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.ResolvedType#isAssignableFrom(org.aspectj.weaver.ResolvedType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.ResolvedType#isCoerceableFrom(org.aspectj.weaver.ResolvedType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.AnnotatedElement#hasAnnotation(org.aspectj.weaver.UnresolvedType)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","Aspects":"aspectOf aspectOf aspectOf hasAspect hasAspect hasAspect getSingletonOrThreadAspectOf getPerObjectAspectOf getPerTypeWithinAspectOf checkAspectOf getSingletonOrThreadHasAspect getPerObjectHasAspect getPerTypeWithinHasAspect checkHasAspect aspectOf aspectOf aspectOf hasAspect hasAspect hasAspect getSingletonOrThreadAspectOf getPerObjectAspectOf getPerTypeWithinAspectOf checkAspectOf getSingletonOrThreadHasAspect getPerObjectHasAspect getPerTypeWithinHasAspect checkHasAspect EMPTY_CLASS_ARRAY PEROBJECT_CLASS_ARRAY PERTYPEWITHIN_CLASS_ARRAY EMPTY_OBJECT_ARRAY ASPECTOF HASASPECT EMPTY_CLASS_ARRAY PEROBJECT_CLASS_ARRAY PERTYPEWITHIN_CLASS_ARRAY EMPTY_OBJECT_ARRAY ASPECTOF HASASPECT org.aspectj.lang.Aspects org.aspectj.lang.Aspects  e.getCause());\r\n  e.getCause());\r\n  e.getCause());\r\n  e.getCause());\r\n  e.getCause());\r\n  e.getCause());\r\n","LocalVariableTypeAttribute":"getLocalVariableTypeTable getLocalVariableTypeTableLength NO_ENTRIES localVariableTypeTableLength localVariableTypeTableEntries org.aspectj.org.eclipse.jdt.internal.core.util.LocalVariableTypeAttribute","ElementValuePairInfo":"getName getValue toString NoMembers name value org.aspectj.org.eclipse.jdt.internal.compiler.classfmt.ElementValuePairInfo  $NON-NLS-1$\r\n","JavadocArgumentExpression":"internalResolveType printExpression resolve resolveType resolveType traverse traverse token argument org.aspectj.org.eclipse.jdt.internal.compiler.ast.JavadocArgumentExpression  is a shared type reference which was already resolved\r\n  already reported error\r\n /*\r\n\t * Resolves type on a Block or Class scope.\r\n\t */\r\n /* (non-Javadoc)\r\n\t * Redefine to capture javadoc specific signatures\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode#traverse(org.aspectj.org.eclipse.jdt.internal.compiler.ASTVisitor, org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BlockScope)\r\n\t */\r\n","Java15AnnotationFinder":"setClassLoader setWorld getAnnotation getAnnotationFromClass getAnnotationFromMember getClassLoader getAnnotationOfType getAnnotationDefaultValue getAnnotations getAnnotations getParameterNames getParameterNamesFromLVT getParameterAnnotationTypes setClassLoader setWorld getAnnotation getAnnotationFromClass getAnnotationFromMember getClassLoader getAnnotationOfType getAnnotationDefaultValue getAnnotations getAnnotations getParameterNames getParameterNamesFromLVT getParameterAnnotationTypes bcelRepository classLoaderRef world NO_PARAMETER_ANNOTATIONS bcelRepository classLoaderRef world NO_PARAMETER_ANNOTATIONS org.aspectj.weaver.reflect.Java15AnnotationFinder org.aspectj.weaver.reflect.Java15AnnotationFinder  must have no-arg constructor for reflective construction\r\n  default to the safe one! (pr160674)\r\n  the answer is cached and we don't want to hold on to memory\r\n  OPTIMIZE make constant 0 size array for sharing\r\n  convert to our Annotation type\r\n  memory.\r\n  the answer is cached and we don't want to hold on to memory\r\n  OPTIMIZE make this a constant 0 size array\r\n  convert to our Annotation type\r\n  memory.\r\n  memory.\r\n  no luck\r\n  pr222987 - prevent NPE\r\n  basic error, we can't get the names...\r\n  the answer is cached and we don't want to hold on to memory\r\n  CACHING??\r\n  memory.\r\n  reflection...\r\n  CACHING??\r\n  must have no-arg constructor for reflective construction\r\n  default to the safe one! (pr160674)\r\n  the answer is cached and we don't want to hold on to memory\r\n  OPTIMIZE make constant 0 size array for sharing\r\n  convert to our Annotation type\r\n  memory.\r\n  the answer is cached and we don't want to hold on to memory\r\n  OPTIMIZE make this a constant 0 size array\r\n  convert to our Annotation type\r\n  memory.\r\n  memory.\r\n  no luck\r\n  pr222987 - prevent NPE\r\n  basic error, we can't get the names...\r\n  the answer is cached and we don't want to hold on to memory\r\n  CACHING??\r\n  memory.\r\n  reflection...\r\n  CACHING??\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see\r\n\t * org.aspectj.weaver.reflect.AnnotationFinder#getAnnotation(org.aspectj\r\n\t * .weaver.ResolvedType, java.lang.Object)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see\r\n\t * org.aspectj.weaver.reflect.AnnotationFinder#getAnnotation(org.aspectj\r\n\t * .weaver.ResolvedType, java.lang.Object)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","IRuntimeVisibleParameterAnnotationsAttribute":"getParametersNumber getParameterAnnotations org.aspectj.org.eclipse.jdt.core.util.IRuntimeVisibleParameterAnnotationsAttribute","DeclareSoftImpl":"getDeclaringType getSoftenedExceptionType getPointcutExpression toString getDeclaringType getSoftenedExceptionType getPointcutExpression toString declaringType pointcut exceptionType missingTypeName declaringType pointcut exceptionType missingTypeName org.aspectj.internal.lang.reflect.DeclareSoftImpl org.aspectj.internal.lang.reflect.DeclareSoftImpl /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareSoft#getDeclaringType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareSoft#getSoftenedExceptionType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareSoft#getPointcutExpression()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareSoft#getDeclaringType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareSoft#getSoftenedExceptionType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareSoft#getPointcutExpression()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","StructuralPropertyDescriptor":"getId getNodeClass isSimpleProperty isChildProperty isChildListProperty toString propertyId nodeClass org.aspectj.org.eclipse.jdt.core.dom.StructuralPropertyDescriptor  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","ILifecycleAware":"buildStarting buildFinished buildStarting buildFinished org.aspectj.bridge.ILifecycleAware org.aspectj.bridge.ILifecycleAware /* *******************************************************************\r\n * Copyright (c) 2006 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2006 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","UnwovenClassFileWithThirdPartyManagedBytecode":"getBytes getBytes getBytes getBytes provider provider org.aspectj.weaver.bcel.UnwovenClassFileWithThirdPartyManagedBytecode org.aspectj.weaver.bcel.UnwovenClassFileWithThirdPartyManagedBytecode  OPTIMIZE make classname an input char[]\r\n  OPTIMIZE make classname an input char[]\r\n","QualifiedThisReference":"analyseCode analyseCode generateCode resolveType printExpression traverse traverse qualification currentCompatibleType org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedThisReference  no need to worry about raw type usage\r\n  nothing particular after all\r\n  X.this is not a param  X.this is not a param  error case\r\n  resolvedType needs to be converted to parameterized\r\n  It is possible to qualify 'this' by the name of the current class\r\n  flush previous depth if any\r\n  encoded depth into 8 bits\r\n  Ensure one cannot write code like: B() { super(B.this); }\r\n  $NON-NLS-1$\r\n /*only exact match*/\r\n","IInnerClassesAttributeEntry":"getAccessFlags getInnerNameIndex getOuterClassNameIndex getInnerClassNameIndex getInnerName getOuterClassName getInnerClassName org.aspectj.org.eclipse.jdt.core.util.IInnerClassesAttributeEntry","AddFolderToIndex":"execute toString folderPath project inclusionPatterns exclusionPatterns org.aspectj.org.eclipse.jdt.internal.core.search.indexing.AddFolderToIndex  nothing to do\r\n  nothing to do, source folder was removed\r\n  index got deleted since acquired\r\n  $NON-NLS-1$   free read lock\r\n  ask permission to read\r\n  if there are inclusion patterns then we must walk the children\r\n  $NON-NLS-1$  /*reuse index file*/\r\n /* ensure no concurrent write access to index */\r\n /* throws CoreException */\r\n /* throws CoreException */\r\n","TryStatement":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty internalGetChildListProperty getNodeType0 clone0 subtreeMatch0 accept0 getBody setBody catchClauses getFinally setFinally memSize treeSize analyseCode enterAnyExceptionHandler enterDeclaredExceptionHandlers exitAnyExceptionHandler exitDeclaredExceptionHandlers finallyMode generateCode generateSubRoutineInvocation isSubRoutineEscaping printStatement resolve traverse BODY_PROPERTY CATCH_CLAUSES_PROPERTY FINALLY_PROPERTY PROPERTY_DESCRIPTORS body catchClauses optionalFinallyBody SECRET_RETURN_ADDRESS_NAME SECRET_ANY_HANDLER_NAME SECRET_RETURN_VALUE_NAME tryBlock catchBlocks catchArguments finallyBlock scope subRoutineInits caughtExceptionTypes catchExits subRoutineStartLabel anyExceptionVariable returnAddressVariable secretReturnValue declaredExceptionLabels reusableJSRTargets reusableJSRSequenceStartLabels reusableJSRStateIndexes reusableJSRTargetsCount NO_FINALLY FINALLY_SUBROUTINE FINALLY_DOES_NOT_COMPLETE FINALLY_INLINE mergedInitStateIndex preTryInitStateIndex naturalExitMergeInitStateIndex catchExitInitStateIndexes org.aspectj.org.eclipse.jdt.core.dom.TryStatement org.aspectj.org.eclipse.jdt.internal.compiler.ast.TryStatement  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  only set while generating code\r\n  for inlining  no finally block\r\n  finally is generated as a subroutine (using jsr  non returning finally is optimized with only one instance of finally block\r\n  finally block must be inlined since cannot use jsr  for local variables table attributes\r\n  TODO (philippe) if subroutine is escaping, unused\r\n  analyse finally block first\r\n  process the try block in a context handling the local exceptions.\r\n  check unreachable catch blocks\r\n  keep track of the inits that could potentially have led to this exception handler (for final assignments diagnosis)\r\n  exception null info\r\n  catch var is always set\r\n  process the catch blocks - computing the minimal exit depth amongst try  exited at any point\r\n  need to include potential inits from returns inside the try  chain up null info registry\r\n  process the try block in a context handling the local exceptions.\r\n  check unreachable catch blocks\r\n  keep track of the inits that could potentially have led to this exception handler (for final assignments diagnosis)\r\n  exception null info\r\n  catch var is always set\r\n  process the catch blocks - computing the minimal exit depth amongst try  chain up null info registry\r\n  when the code generation is restarted in wide mode\r\n  preparing exception labels\r\n  generate the try block\r\n  try block had no effect, only generate the body of the finally block if any\r\n  natural exit may require subroutine invocation (if finally != null)\r\n  May loose some local variable initializations : affecting the local variable attributes\r\n  optimizing the case where the exception variable is not actually used\r\n  since not passing the catchScope, the block generation will exitUserScope(catchScope)\r\n  inlined finally here can see all merged variables\r\n  entire sequence for finally is associated to finally block\r\n  fall through\r\n  extra handler for trailing natural exit (will be fixed up later on when natural exit is generated below)\r\n  inside catch blocks) will run the finally block\r\n  no subroutine, simply position end label (natural exit == end)\r\n  reset initialization state, as for a normal catch block\r\n  any exception handler\r\n  subroutine\r\n  the ret bytecode is part of the subroutine\r\n  any exception handler\r\n  subroutine\r\n  any exception handler\r\n  subroutine\r\n  inlined finally here can see all merged variables\r\n  entire sequence for finally is associated to finally block\r\n  entire sequence for finally is associated to finally block\r\n  will naturally fall into subsequent code after subroutine invocation\r\n  place end positions of user-defined exception labels\r\n  May loose some local variable initializations : affecting the local variable attributes\r\n  cannot reuse current target\r\n  current target has been used in the past, simply branch to its label\r\n  optimize subroutine invocation sequences, using the targetLocation (if any)\r\n  classic subroutine invocation, distinguish case of non-returning subroutine\r\n  reset initialization state, as for a normal catch block\r\n  reset initialization state, as for a normal catch block\r\n  inside try block, ensure to deactivate all catch block exception handlers while inlining finally block\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  catches\r\n  $NON-NLS-1$\r\n  finally\r\n  special scope for secret locals optimization.\r\n  don't add it yet to parent scope\r\n  provision for returning and forcing the finally block to run\r\n  not inlinable\r\n  the type does not matter as long as it is not a base type\r\n  not inlinable\r\n  not inlinable\r\n  force the finally scope to have variable positions shifted after its try scope and catch ones\r\n  side effect on catchScope in resolveForCatch(..)\r\n  more specialized first.\r\n  arguments type are checked against JavaLangThrowable in resolveForCatch(..)\r\n  sibling in term of local variable positions.\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /*\r\n\t\t\t\t\"If we are about to consider an unchecked exception handler, potential inits may have occured inside\r\n\t\t\t\tthe try block that need to be detected , e.g. \r\n\t\t\t\ttry { x = 1; throwSomething();} catch(Exception e){ x = 2} \"\r\n\t\t\t\t\"(uncheckedExceptionTypes notNil and: [uncheckedExceptionTypes at: index])\r\n\t\t\t\tifTrue: [catchInits addPotentialInitializationsFrom: tryInits].\"\r\n\t\t\t\t*/\r\n /*\r\n\t\t\t\t\"If we are about to consider an unchecked exception handler, potential inits may have occured inside\r\n\t\t\t\tthe try block that need to be detected , e.g. \r\n\t\t\t\ttry { x = 1; throwSomething();} catch(Exception e){ x = 2} \"\r\n\t\t\t\t\"(uncheckedExceptionTypes notNil and: [uncheckedExceptionTypes at: index])\r\n\t\t\t\tifTrue: [catchInits addPotentialInitializationsFrom: tryInits].\"\r\n\t\t\t\t*/\r\n /* generate sequence of handler, all starting by storing the TOS (exception\r\n\t\tthrown) into their own catch variables, the one specified in the source\r\n\t\tthat must denote the handled exception.\r\n\t\t*/\r\n","ITypeBinding":"createArrayType getBinaryName getBound getComponentType getDeclaredFields getDeclaredMethods getDeclaredModifiers getDeclaredTypes getDeclaringClass getDeclaringMethod getDimensions getElementType getErasure getInterfaces getModifiers getName getPackage getQualifiedName getSuperclass getTypeArguments getTypeBounds getTypeDeclaration getTypeParameters getWildcard isAnnotation isAnonymous isArray isAssignmentCompatible isCapture isCastCompatible isClass isEnum isFromSource isGenericType isInterface isLocal isMember isNested isNullType isParameterizedType isPrimitive isRawType isSubTypeCompatible isTopLevel isTypeVariable isUpperbound isWildcardType org.aspectj.org.eclipse.jdt.core.dom.ITypeBinding  TODO (jeem) - clarify whether binding for a generic type instance carries a copy of the generic type's type parameters as well as type arguments\r\n","SelectionOnQualifiedAllocationExpression":"printExpression resolveType org.aspectj.org.eclipse.jdt.internal.codeassist.select.SelectionOnQualifiedAllocationExpression  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  tolerate some error cases\r\n  open on the only superinterface\r\n  find the constructor binding inside the super constructor call\r\n  super interface (if extending an interface)\r\n","AccessRule":"hashCode equals getProblemId ignoreIfBetter toString IgnoreIfBetter pattern problemId org.aspectj.org.eclipse.jdt.internal.compiler.env.AccessRule  value must be greater than IProblem#ForbiddenReference and DiscouragedReference\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","InnerClassesAttribute":"getInnerClassAttributesEntries getNumberOfClasses NO_ENTRIES numberOfClasses entries org.aspectj.org.eclipse.jdt.internal.core.util.InnerClassesAttribute","IMessage":"getMessage getKind isError isWarning isDebug isInfo isAbort isTaskTag isFailed getDeclared getID getSourceStart getSourceEnd getThrown getSourceLocation compare isSameOrLessThan compareTo toString getDetails getExtraSourceLocations getMessage getKind isError isWarning isDebug isInfo isAbort isTaskTag isFailed getDeclared getID getSourceStart getSourceEnd getThrown getSourceLocation compare isSameOrLessThan compareTo toString getDetails getExtraSourceLocations RA_IMessage WEAVEINFO INFO DEBUG TASKTAG WARNING ERROR FAIL ABORT KINDS COMPARATOR precedence name RA_IMessage WEAVEINFO INFO DEBUG TASKTAG WARNING ERROR FAIL ABORT KINDS COMPARATOR precedence name org.aspectj.bridge.IMessage org.aspectj.bridge.IMessage  int values must sync with KINDS order below\r\n  represents a 'TODO' from eclipse - producted by the compiler and consumed by AJDT\r\n  XXX ambiguous\r\n  int values must sync with KINDS order below\r\n  represents a 'TODO' from eclipse - producted by the compiler and consumed by AJDT\r\n  XXX ambiguous\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","DocumentElementParser":"checkComment consumeClassBodyDeclaration consumeClassDeclaration consumeClassHeader consumeClassHeaderName1 consumeCompilationUnit consumeConstructorDeclaration consumeConstructorHeader consumeConstructorHeaderName consumeDefaultModifiers consumeDiet consumeEnterCompilationUnit consumeEnterVariable consumeExitVariableWithInitialization consumeExitVariableWithoutInitialization consumeFieldDeclaration consumeFormalParameter consumeInterfaceDeclaration consumeInterfaceHeader consumeInterfaceHeaderName1 consumeInternalCompilationUnit consumeInternalCompilationUnitWithTypes consumeLocalVariableDeclaration consumeMethodDeclaration consumeMethodHeader consumeMethodHeaderExtendedDims consumeMethodHeaderName consumeModifiers consumePackageDeclarationName consumePackageDeclarationNameWithModifiers consumePushModifiers consumePushRealModifiers consumeSingleStaticImportDeclarationName consumeSingleTypeImportDeclarationName consumeStaticImportOnDemandDeclarationName consumeStaticInitializer consumeStaticOnly consumeTypeImportOnDemandDeclarationName flushCommentsDefinedPriorTo endParse initialize initialize isLocalDeclaration parse parseCompilationUnit parseConstructor parseField parseImport parseInitializer parseMethod parsePackage parseType problemReporter pushOnIntArrayStack resetModifiers resumeOnSyntaxError returnTypeName toString typeReference requestor localIntPtr lastFieldEndPosition lastFieldBodyEndPosition typeStartPosition selectorSourcePositions typeDims extendsDim declarationSourceStart intArrayStack intArrayPtr org.aspectj.org.eclipse.jdt.internal.compiler.DocumentElementParser  look for @deprecated into the first javadoc comment preceeding the declaration\r\n  javadoc only (non javadoc comment have negative end positions.)\r\n  since jdk1.2 look only in the last java doc comment...\r\n  modify the modifier source start to point at the first comment\r\n  we ignore the local variable declarations\r\n  we know that we have a TypeDeclaration on the top of the astStack\r\n  '}' is the end of the body\r\n  '}' is the end of the body\r\n  '}' is the end of the body\r\n  ClassHeader ::= $empty\r\n  we ignore the local variable declarations\r\n  flush the comments related to the class header\r\n  ClassHeaderName ::= Modifiersopt 'class' 'Identifier'\r\n  Record that the block has a declaration for local types\r\n  highlight the name of the type\r\n  'class' and 'interface' push an int position\r\n  consume annotations\r\n  javadoc\r\n  CompilationUnit ::= EnterCompilationUnit PackageDeclarationopt ImportDeclarationsopt\r\n  ConstructorDeclaration ::= ConstructorHeader ConstructorBody\r\n  we ignore the local variable declarations\r\n  ConstructorHeader ::= ConstructorHeaderName MethodHeaderParameters MethodHeaderThrowsClauseopt\r\n  we ignore the local variable declarations\r\n  retrieve the source end of the name\r\n  right parenthesis\r\n  ConstructorHeaderName ::=  Modifiersopt 'Identifier' '('\r\n  name -- this is not really revelant but we do .....\r\n  modifiers\r\n  consume annotations\r\n  javadoc\r\n  highlight starts at the selector starts\r\n  might update modifiers with AccDeprecated\r\n  modifiers\r\n  Diet ::= $empty\r\n  EnterCompilationUnit ::= $empty\r\n  EnterVariable ::= $empty\r\n  create the field declaration\r\n  create the local variable declarations\r\n  type dimension\r\n  local declaration\r\n  type dimension\r\n  first variable of the declaration (FieldDeclaration or LocalDeclaration)\r\n  consume annotations\r\n  we want to include the comma or the semi-colon\r\n  do nothing by default\r\n  the super.consumeFieldDeclaration will reinitialize the variableCounter[nestedType]\r\n  set isVarArgs\r\n  modifiers\r\n  consume annotations\r\n  we ignore the local variable declarations\r\n  we know that we have a TypeDeclaration on the top of the astStack\r\n  the '}' is the end of the body\r\n  the '}' is the end of the body\r\n  the '}' is the end of the body\r\n  InterfaceHeader ::= $empty\r\n  we ignore the local variable declarations\r\n  flush the comments related to the interface header\r\n  InterfaceHeaderName ::= Modifiersopt 'interface' 'Identifier'\r\n  Record that the block has a declaration for local types\r\n  highlight the name of the type\r\n  'class' and 'interface' push an int position\r\n  consume annotations\r\n  javadoc\r\n  consume type declarations\r\n  AbstractMethodDeclaration ::= MethodHeader ';'\r\n  we ignore the local variable declarations\r\n  MethodHeader ::= MethodHeaderName MethodHeaderParameters MethodHeaderExtendedDims ThrowsClauseopt\r\n  we ignore the local variable declarations\r\n  now we update the returnType of the method\r\n  MethodHeaderName ::= Modifiersopt Type 'Identifier' '('\r\n  name\r\n  type\r\n  modifiers\r\n  consume annotations\r\n  javadoc\r\n  highlight starts at selector start\r\n  might update modifiers with AccDeprecated\r\n  modifiers\r\n  might update modifiers with AccDeprecated\r\n  modifiers\r\n  might update modifiers with AccDeprecated\r\n  modifiers\r\n  optimize the push  might update declaration source start\r\n  avoiding stack reallocation and all that....\r\n  avoiding stack reallocation and all that....\r\n  $NON-NLS-1$   Qualified variable reference\r\n  flag for precompiled type reference on base types\r\n  single variable reference\r\n /* int[] stack for storing javadoc positions */\r\n /* persisting javadoc positions */\r\n /*\r\n * Will clear the comment stack when looking\r\n * for a potential JavaDoc which might contain @deprecated.\r\n *\r\n * Additionally, before investigating for @deprecated, retrieve the positions\r\n * of the JavaDoc comments so as to notify requestor with them.\r\n */\r\n /*\r\n *\r\n * INTERNAL USE-ONLY\r\n */\r\n /*\r\n *\r\n * INTERNAL USE-ONLY\r\n */\r\n /*\r\n *\r\n * INTERNAL USE-ONLY\r\n */\r\n /*\r\n *\r\n * INTERNAL USE-ONLY\r\n */\r\n /*\r\n *\r\n * INTERNAL USE-ONLY\r\n */\r\n /*\r\n *\r\n * INTERNAL USE-ONLY\r\n */\r\n /* persisting javadoc positions\r\n\t * Will be consume in consumeClassBodyDeclaration\r\n\t */\r\n /*\r\n *\r\n * INTERNAL USE-ONLY\r\n */\r\n /*\r\n *\r\n * INTERNAL USE-ONLY\r\n */\r\n /*\r\n *\r\n * INTERNAL USE-ONLY\r\n */\r\n /*\r\n *\r\n * INTERNAL USE-ONLY\r\n */\r\n /*\r\n *\r\n * INTERNAL USE-ONLY\r\n */\r\n /*\r\n *\r\n * INTERNAL USE-ONLY\r\n */\r\n /*\r\n *\r\n * INTERNAL USE-ONLY\r\n */\r\n /*\r\n *\r\n * INTERNAL USE-ONLY\r\n */\r\n /*\r\n *\r\n * INTERNAL USE-ONLY\r\n */\r\n /* persisting javadoc positions */\r\n /*\r\n *\r\n * INTERNAL USE-ONLY\r\n */\r\n /* persisting javadoc positions */\r\n /*\r\n*\r\n* INTERNAL USE-ONLY\r\n*/\r\n /* persisting javadoc positions */\r\n /* persisting javadoc positions */\r\n /*\r\n *\r\n * INTERNAL USE-ONLY\r\n */\r\n /* persisting javadoc positions */\r\n /*\r\n *\r\n * INTERNAL USE-ONLY\r\n */\r\n /* persisting javadoc positions */\r\n /*\r\n *\r\n * INTERNAL USE-ONLY\r\n */\r\n /*\r\n *\r\n * INTERNAL USE-ONLY\r\n */\r\n /*\r\n * Investigate one entire unit.\r\n */\r\n /*\r\n * Investigate one constructor declaration.\r\n */\r\n /*\r\n * Investigate one field declaration statement (might have multiple declarations in it).\r\n */\r\n /*\r\n * Investigate one import statement declaration.\r\n */\r\n /*\r\n * Investigate one initializer declaration.\r\n * regionSource need to content exactly an initializer declaration.\r\n * e.g: static { i = 4; }\r\n * { name = \"test\"; }\r\n */\r\n /*\r\n * Investigate one method declaration.\r\n */\r\n /*\r\n * Investigate one package statement declaration.\r\n */\r\n /*\r\n * Investigate one type declaration, its fields, methods and member types.\r\n */\r\n /*\r\n * Syntax error was detected. Will attempt to perform some recovery action in order\r\n * to resume to the regular parse loop.\r\n */\r\n /*\r\n * Answer a char array representation of the type name formatted like:\r\n * - type name + dimensions\r\n * Example:\r\n * \"A[][]\".toCharArray()\r\n * \"java.lang.String\".toCharArray()\r\n */\r\n","Java2HTMLEntityReader":"computeSubstitution BEGIN_LINE fgEntityLookup bits org.aspectj.org.eclipse.jdt.internal.formatter.comment.Java2HTMLEntityReader  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-2$   $NON-NLS-1$   Accumulate *s into the buffer until we see something other than *.\r\n  Snippet must have ended with *s.  Just return them.\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Update bits for the benefit of the next character.\r\n /*\r\n\t\t\t * Ordinary processing.  If the character needs an entity in HTML,\r\n\t\t\t * add the entity, otherwise add the character.\r\n\t\t\t */\r\n /*\r\n\t\t\t * Translate a * that precedes a / to &#42; so it isn't\r\n\t\t\t * misinterpreted as the end of the Javadoc comment that contains\r\n\t\t\t * the code we are formatting.\r\n\t\t\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=109636\r\n\t\t\t */\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.ui.text.SubstitutionTextReader#computeSubstitution(int)\r\n\t */\r\n","ObjectVector":"add addAll addAll containsIdentical contains copyInto copyInto elementAt find remove removeAll size toString INITIAL_SIZE size maxSize elements org.aspectj.org.eclipse.jdt.internal.compiler.util.ObjectVector  knows that size starts <= maxSize\r\n  assume no more elements will be added\r\n  assume no more elements will be added\r\n  shift the remaining elements down one spot\r\n  assumes only one occurrence of the element exists\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","WildcardType":"propertyDescriptors internalStructuralPropertiesForType internalGetSetBooleanProperty internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 isUpperBound getBound setBound setBound setUpperBound memSize treeSize BOUND_PROPERTY UPPER_BOUND_PROPERTY PROPERTY_DESCRIPTORS optionalBound isUpperBound org.aspectj.org.eclipse.jdt.core.dom.WildcardType  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","KnownFieldReference":"resolveType org.aspectj.ajdt.internal.compiler.ast.KnownFieldReference  XXX handle source locations\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","DefaultBytecodeVisitor":"_aaload dumpPcNumber _aastore _aconst_null _aload_0 _aload_1 _aload_2 _aload_3 _aload _anewarray _areturn _arraylength _astore_0 _astore_1 getLocalVariableName getLocalVariableName _astore_2 _astore_3 _astore _athrow _baload _bastore _bipush _caload _castore _checkcast _d2f _d2i _d2l _dadd _daload _dastore _dcmpg _dcmpl _dconst_0 _dconst_1 _ddiv _dload_0 _dload_1 _dload_2 _dload_3 _dload _dmul _dneg _drem _dreturn _dstore_0 _dstore_1 _dstore_2 _dstore_3 _dstore _dsub _dup_x1 _dup_x2 _dup _dup2_x1 _dup2_x2 _dup2 _f2d _f2i _f2l _fadd _faload _fastore _fcmpg _fcmpl _fconst_0 _fconst_1 _fconst_2 _fdiv _fload_0 _fload_1 _fload_2 _fload_3 _fload _fmul _fneg _frem _freturn _fstore_0 _fstore_1 _fstore_2 _fstore_3 _fstore _fsub _getfield _getstatic _goto_w _goto _i2b _i2c _i2d _i2f _i2l _i2s _iadd _iaload _iand _iastore _if_acmpeq _if_acmpne _if_icmpeq _if_icmpge _if_icmpgt _if_icmple _if_icmplt _if_icmpne _iconst_0 _iconst_1 _iconst_2 _iconst_3 _iconst_4 _iconst_5 _iconst_m1 _idiv _ifeq _ifge _ifgt _ifle _iflt _ifne _ifnonnull _ifnull _iinc _iload_0 _iload_1 _iload_2 _iload_3 _iload _imul _ineg _instanceof _invokeinterface _invokespecial _invokestatic _invokevirtual _ior _irem _ireturn _ishl _ishr _istore_0 _istore_1 _istore_2 _istore_3 _istore _isub _iushr _ixor _jsr_w _jsr _l2d _l2f _l2i _ladd _laload _land _lastore _lcmp _lconst_0 _lconst_1 _ldc_w _ldc _ldc2_w _ldiv _lload_0 _lload_1 _lload_2 _lload_3 _lload _lmul _lneg _lookupswitch _lor _lrem _lreturn _lshl _lshr _lstore_0 _lstore_1 _lstore_2 _lstore_3 _lstore _lsub _lushr _lxor _monitorenter _monitorexit _multianewarray _new _newarray _nop _pop _pop2 _putfield _putstatic _ret _return _saload _sastore _sipush _swap _tableswitch _wide _wide _breakpoint _impdep1 _impdep2 isCompact returnConstantClassName returnClassName returnDeclaringClassName returnMethodSignature writeNewLine writeTabs writeExtraTabs EMPTY_CLASS_NAME EMPTY_LOCAL_NAME T_BOOLEAN T_CHAR T_FLOAT T_DOUBLE T_BYTE T_SHORT T_INT T_LONG buffer lineSeparator tabNumber digitNumberForPC localVariableTableEntries localVariableAttributeLength mode org.aspectj.org.eclipse.jdt.internal.core.util.DefaultBytecodeVisitor  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","ICompilerAdapter":"afterDietParsing beforeCompiling afterCompiling beforeProcessing afterProcessing beforeResolving afterResolving beforeAnalysing afterAnalysing beforeGenerating afterGenerating org.aspectj.ajdt.internal.compiler.ICompilerAdapter  AspectJ Extension\r\n","IndexSelector":"canSeeFocus canSeeFocus initializeIndexLocations getIndexLocations getJavaProject searchScope pattern indexLocations org.aspectj.org.eclipse.jdt.internal.core.search.IndexSelector  cache of the keys for looking index up\r\n  it can see the focus only if it is on the classpath of a project that can see the focus\r\n  look for refering project\r\n  focus is part of a jar\r\n  look for dependent projects\r\n  find the projects from projectsAndJars that see the focus then walk those projects looking for the jars from projectsAndJars\r\n  should consider polymorphic search for method patterns\r\n  jar files can be included in the search scope without including one of the projects that references them, so scan all projects that have not been visited\r\n /*\r\n *  Compute the list of paths which are keying index files.\r\n */\r\n","IInitializer":"org.aspectj.org.eclipse.jdt.core.IInitializer","Aj":"initialize preProcess getClassLoader equals hashCode removeStaleAdaptors getActiveAdaptorCount checkQ getWeaver initialize getWeavingAdaptor getNamespace generatedClassesExist flushGeneratedClasses initialize preProcess getClassLoader equals hashCode removeStaleAdaptors getActiveAdaptorCount checkQ getWeaver initialize getWeavingAdaptor getNamespace generatedClassesExist flushGeneratedClasses weavingContext adaptorQueue trace hashcode weavingAdaptors weavingAdaptor isInitialized weavingContext adaptorQueue trace hashcode weavingAdaptors weavingAdaptor isInitialized org.aspectj.weaver.loadtime.Aj org.aspectj.weaver.loadtime.Aj  skip boot loader or null classes (hibernate)\r\n  TODO AV needs to doc that\r\n  would make sense at least in test f.e. see TestHelper.handleMessage()\r\n  Assert instance!=null - shouldn't be asked for after a GC of the referent has occurred !\r\n  boolean removed =\r\n  DBG System.err.println(\"Evicting key \" + wo + \" = \" + didit);\r\n  within the synchronized block\r\n  we don't weave reflection generated types at all!\r\n  perform the initialization\r\n  skip boot loader or null classes (hibernate)\r\n  TODO AV needs to doc that\r\n  would make sense at least in test f.e. see TestHelper.handleMessage()\r\n  Assert instance!=null - shouldn't be asked for after a GC of the referent has occurred !\r\n  boolean removed =\r\n  DBG System.err.println(\"Evicting key \" + wo + \" = \" + didit);\r\n  within the synchronized block\r\n  we don't weave reflection generated types at all!\r\n  perform the initialization\r\n","ClassVisitor":"visitCode visitCodeException visitConstantClass visitConstantDouble visitConstantFieldref visitConstantFloat visitConstantInteger visitConstantInterfaceMethodref visitConstantLong visitConstantMethodref visitConstantNameAndType visitConstantPool visitConstantString visitConstantUtf8 visitConstantValue visitDeprecated visitExceptionTable visitField visitInnerClass visitInnerClasses visitJavaClass visitLineNumber visitLineNumberTable visitLocalVariable visitLocalVariableTable visitMethod visitSignature visitSourceFile visitSynthetic visitUnknown visitStackMap visitStackMapEntry visitEnclosingMethod visitRuntimeVisibleAnnotations visitRuntimeInvisibleAnnotations visitRuntimeVisibleParameterAnnotations visitRuntimeInvisibleParameterAnnotations visitAnnotationDefault visitLocalVariableTypeTable visitCode visitCodeException visitConstantClass visitConstantDouble visitConstantFieldref visitConstantFloat visitConstantInteger visitConstantInterfaceMethodref visitConstantLong visitConstantMethodref visitConstantNameAndType visitConstantPool visitConstantString visitConstantUtf8 visitConstantValue visitDeprecated visitExceptionTable visitField visitInnerClass visitInnerClasses visitJavaClass visitLineNumber visitLineNumberTable visitLocalVariable visitLocalVariableTable visitMethod visitSignature visitSourceFile visitSynthetic visitUnknown visitStackMap visitStackMapEntry visitEnclosingMethod visitRuntimeVisibleAnnotations visitRuntimeInvisibleAnnotations visitRuntimeVisibleParameterAnnotations visitRuntimeInvisibleParameterAnnotations visitAnnotationDefault visitLocalVariableTypeTable org.aspectj.apache.bcel.classfile.ClassVisitor org.aspectj.apache.bcel.classfile.ClassVisitor  Java5\r\n  Java5\r\n","ThreadStackFactoryImpl":"initialValue getThreadStack getNewThreadStack initialValue getThreadCounter inc dec isNotZero getNewThreadCounter initialValue getThreadStack getNewThreadStack initialValue getThreadCounter inc dec isNotZero getNewThreadCounter initialValue getThreadStack getNewThreadStack initialValue getThreadCounter inc dec isNotZero getNewThreadCounter value value value org.aspectj.runtime.internal.cflowstack.ThreadStackFactoryImpl org.aspectj.runtime.internal.cflowstack.ThreadStackFactoryImpl org.aspectj.runtime.internal.cflowstack.ThreadStackFactoryImpl /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * ******************************************************************/\r\n","ParameterizedType":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty internalGetChildListProperty getNodeType0 clone0 subtreeMatch0 accept0 getType setType typeArguments memSize treeSize index TYPE_PROPERTY TYPE_ARGUMENTS_PROPERTY PROPERTY_DESCRIPTORS type typeArguments org.aspectj.org.eclipse.jdt.core.dom.ParameterizedType  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  treat Code as free\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","ImportConflictBinding":"readableName toString conflictingTypeBinding org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ImportConflictBinding  must ensure the import is resolved\r\n  $NON-NLS-1$\r\n","QualifiedType":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getQualifier setQualifier getName setName memSize treeSize index QUALIFIER_PROPERTY NAME_PROPERTY PROPERTY_DESCRIPTORS qualifier name org.aspectj.org.eclipse.jdt.core.dom.QualifiedType  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  lazy init must be thread-safe for readers\r\n  treat Code as free\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","AnnotationDefaultAttribute":"getMemberValue memberValue org.aspectj.org.eclipse.jdt.internal.core.util.AnnotationDefaultAttribute /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IAnnotationDefaultAttribute#getMemberValue()\r\n\t */\r\n","IGenericField":"getModifiers org.aspectj.org.eclipse.jdt.internal.compiler.env.IGenericField","IStackMapFrame":"getFrameType getOffsetDelta getNumberOfLocals getLocals getNumberOfStackItems getStackItems org.aspectj.org.eclipse.jdt.core.util.IStackMapFrame","ThisOrTargetPointcut":"isBinding getType isThis parameterizeWith couldMatchKinds fastMatch couldMatch matchInternal write read resolveBindings postRead getBindingAnnotationTypePatterns getBindingTypePatterns equals hashCode toString findResidueInternal concretize1 accept isBinding getType isThis parameterizeWith couldMatchKinds fastMatch couldMatch matchInternal write read resolveBindings postRead getBindingAnnotationTypePatterns getBindingTypePatterns equals hashCode toString findResidueInternal concretize1 accept isThis type declarationText thisKindSet targetKindSet isThis type declarationText thisKindSet targetKindSet org.aspectj.weaver.patterns.ThisOrTargetPointcut org.aspectj.weaver.patterns.ThisOrTargetPointcut  AVPT was DYNAMIC\r\n  look for parameterized type patterns which are not supported...\r\n  if no preference is specified, just say TRUE which means no residue\r\n  Enforce rule about which designators are supported in declare\r\n  AVPT was DYNAMIC\r\n  look for parameterized type patterns which are not supported...\r\n  if no preference is specified, just say TRUE which means no residue\r\n  Enforce rule about which designators are supported in declare\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingAnnotationTypePatterns()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingTypePatterns()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingAnnotationTypePatterns()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingTypePatterns()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","ExceptionHandlingFlowContext":"complainIfUnusedExceptionHandlers complainIfUnusedExceptionHandlers individualToString initsOnException initsOnReturn mergeUnhandledException recordHandlingException recordReturnFrom subroutine BitCacheSize handledExceptions isReached isNeeded initsOnExceptions indexes isMethodContext initsOnReturn extendedExceptions org.aspectj.org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext  32 bits per int\r\n  for dealing with anonymous constructor thrown exceptions\r\n  none is reached by default\r\n  none is needed by default\r\n  key type  -> value index\r\n  can optionally skip overriding methods\r\n  report errors for unreachable exception handlers\r\n  report errors for unreachable exception handlers\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  if already flagged as being reached (unchecked exception handler)\r\n  exception handler context may be child of InsideSubRoutineFlowContext, which maps to same handler\r\n /*\r\n * Compute a merged list of unhandled exception types (keeping only the most generic ones).\r\n * This is necessary to add synthetic thrown exceptions for anonymous type constructors (JLS 8.6).\r\n */\r\n","Scribe":"addDeleteEdit addInsertEdit addOptimizedReplaceEdit addReplaceEdit alignFragment checkNLSTag consumeNextToken createAlignment createAlignment createAlignment createAlignment createAlignment createMemberAlignment enterAlignment enterMemberAlignment exitAlignment exitMemberAlignment getAlignment getColumnIndentationLevel getCommentIndex getCurrentCommentOffset getEmptyLines getLastEdit getLineEnd getMemberAlignment getNewLine getNextIndentationLevel getPreserveEmptyLines getRootEdit handleLineTooLong hasNLSTag indent initializeScanner isOnFirstColumn isValidEdit preserveEmptyLines print printBlockComment printEndOfCompilationUnit printComment printLineComment printEmptyLines printEmptyLines printIndentationIfNecessary printIndentationIfNecessary printModifiers printNewLine printNewLine printNextToken printNextToken printNextToken printNextToken printArrayQualifiedReference printQualifiedReference printRule printTrailingComment printTrailingComment redoAlignment redoMemberAlignment reset resetAt resize space toString unIndent INITIAL_SIZE checkLineWrapping column commentPositions currentAlignment currentToken edits editsIndex formatter indentationLevel lastNumberOfNewLines line lineEnds lineSeparator memberAlignment needSpace nlsTagCounter pageWidth pendingSpace scanner scannerEndPosition tabLength indentationSize textRegionEnd textRegionStart tabChar numberOfIndentations useTabsOnlyForLeadingIndents indentEmptyLines formatJavadocComment formatBlockComment org.aspectj.org.eclipse.jdt.internal.formatter.Scribe  Most specific alignment.\r\n  edits management\r\n  initialize properly\r\n  resize\r\n  resize\r\n  try to merge last two edits\r\n  check if both edits corresponds to the orignal source code\r\n  check the characters. If they are identical, we can get rid of the previous edit\r\n  resize\r\n  adjust break indentation\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  find the position of the beginning of the line containing the comment\r\n  there is no need to add new lines\r\n  add an extra line breaks\r\n  next line start one character behind the lineEnd of the previous line\r\n  ensure that the scribe is at the beginning of a new line\r\n  round to superior\r\n  look for outermost breakable one\r\n  look for innermost breakable one\r\n  search the last comment where commentEnd < current lineEnd\r\n  check that we are on the same line\r\n  we want the line end of the previous line\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  simply insert indentation if necessary\r\n  if we have a space between two tokens we ensure it will be dumped in the formatted string\r\n  step back one token\r\n  if we have a space between two tokens we ensure it will be dumped in the formatted string\r\n  step back one token\r\n  $NON-NLS-1$\r\n  this means that the line comment doesn't end the file\r\n  select the last alignment\r\n  realign to the proper value\r\n  amount of space\r\n  amount of space\r\n  print one indentation\r\n  print one indentation\r\n  step back one token\r\n  ensure that the scribe is at the beginning of a new line\r\n  ensure that the scribe is at the beginning of a new line\r\n  $NON-NLS-1$  $NON-NLS-1$  if we have a space between two tokens we ensure it will be dumped in the formatted string\r\n  step back one token\r\n  if we have a space between two tokens we ensure it will be dumped in the formatted string\r\n  step back one token\r\n  record fact that current context got traversed\r\n  pop currentLocation\r\n  rethrow\r\n  reset scribe  clean alignment chunkKind so it will think it is a new chunk again\r\n  reset scribe  clean alignment chunkKind so it will think it is a new chunk again\r\n  $NON-NLS-1$  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\t  $NON-NLS-1$\t  $NON-NLS-1$ /*nls*/\r\n /*sourceLevel*/\r\n /*taskTags*/\r\n /*taskPriorities*/\r\n /*\r\n\t * Check if there is a NLS tag on this line. If yes, return true, returns false otherwise.\r\n\t */\r\n","ExactAnnotationTypePattern":"getResolvedAnnotationType getAnnotationType getAnnotationValues fastMatches matches matches matchesRuntimeType resolve resolveBindings parameterizeWith maybeGetSimpleName verifyIsAnnotationType write read equals hashCode toString accept getResolvedAnnotationType getAnnotationType getAnnotationValues fastMatches matches matches matchesRuntimeType resolve resolveBindings parameterizeWith maybeGetSimpleName verifyIsAnnotationType write read equals hashCode toString accept annotationType formalName resolved bindingPattern annotationValues VERSION annotationType formalName resolved bindingPattern annotationValues VERSION org.aspectj.weaver.patterns.ExactAnnotationTypePattern org.aspectj.weaver.patterns.ExactAnnotationTypePattern  now...\r\n  Used when deserializing, values will be added\r\n  resolved, and we're not yet...\r\n  check parameter annotations\r\n  Are we also matching annotation values?\r\n  Check each one\r\n  Complex case, look at the default value\r\n  we might be onto something\r\n  the annotation specified the same thing\r\n  Are we also matching annotation values?\r\n  Check each one\r\n  Complex case, look at the default value\r\n  we might be onto something\r\n  annotation specified the same thing\r\n  Are we also matching annotation values?\r\n  a static match is good enough\r\n  a subtype could match at runtime\r\n  this version should be called for @this, @target, @args\r\n  Non binding case\r\n  We may not have found it if it is in a package, lets look it up...\r\n  rev if serialisation form changes\r\n  now...\r\n  Used when deserializing, values will be added\r\n  resolved, and we're not yet...\r\n  check parameter annotations\r\n  Are we also matching annotation values?\r\n  Check each one\r\n  Complex case, look at the default value\r\n  we might be onto something\r\n  the annotation specified the same thing\r\n  Are we also matching annotation values?\r\n  Check each one\r\n  Complex case, look at the default value\r\n  we might be onto something\r\n  annotation specified the same thing\r\n  Are we also matching annotation values?\r\n  a static match is good enough\r\n  a subtype could match at runtime\r\n  this version should be called for @this, @target, @args\r\n  Non binding case\r\n  We may not have found it if it is in a package, lets look it up...\r\n  rev if serialisation form changes\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see\r\n\t * org.aspectj.weaver.patterns.AnnotationTypePattern#resolveBindings(org\r\n\t * .aspectj.weaver.patterns.IScope, org.aspectj.weaver.patterns.Bindings,\r\n\t * boolean)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see\r\n\t * org.aspectj.weaver.patterns.PatternNode#write(java.io.DataOutputStream)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see\r\n\t * org.aspectj.weaver.patterns.AnnotationTypePattern#resolveBindings(org\r\n\t * .aspectj.weaver.patterns.IScope, org.aspectj.weaver.patterns.Bindings,\r\n\t * boolean)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see\r\n\t * org.aspectj.weaver.patterns.PatternNode#write(java.io.DataOutputStream)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","CompletionOnParameterizedQualifiedTypeReference":"isClass isInterface isException isSuperType resolveType resolveType printExpression K_TYPE K_CLASS K_INTERFACE K_EXCEPTION kind completionIdentifier org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnParameterizedQualifiedTypeReference  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","ClassPathManager":"addPath find toString getInputStream getPath close find getInputStream close getPath find getAllClassFiles toString getInputStream close getPath getZipFile find getAllClassFiles ensureOpen isReallyOpen closeSomeArchives close toString hasClassExtension closeArchives getSystemPropertyWithoutSecurityException addPath find toString getInputStream getPath close find getInputStream close getPath find getAllClassFiles toString getInputStream close getPath getZipFile find getAllClassFiles ensureOpen isReallyOpen closeSomeArchives close toString hasClassExtension closeArchives getSystemPropertyWithoutSecurityException entries openArchives maxOpenArchives MAXOPEN_DEFAULT trace file fis dirPath entry zipFile is file zipFile entries openArchives maxOpenArchives MAXOPEN_DEFAULT trace file fis dirPath entry zipFile is file zipFile org.aspectj.weaver.bcel.ClassPathManager org.aspectj.weaver.bcel.ClassPathManager  and it defaults to 1000\r\n  heuristic-only: ending with .jar or .zip means probably a zip file\r\n  this is NOT an error: it's valid to have missing classpath entries\r\n  This zip will be closed when necessary...\r\n  if (ret.isEmpty()) close();\r\n  Close 10% of those open\r\n  this means the zip file is closed...\r\n  this will fail if the file has been closed for\r\n  some reason;\r\n  Copes with the security manager\r\n  and it defaults to 1000\r\n  heuristic-only: ending with .jar or .zip means probably a zip file\r\n  this is NOT an error: it's valid to have missing classpath entries\r\n  This zip will be closed when necessary...\r\n  if (ret.isEmpty()) close();\r\n  Close 10% of those open\r\n  this means the zip file is closed...\r\n  this will fail if the file has been closed for\r\n  some reason;\r\n  Copes with the security manager\r\n /* private */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* private */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","NameSet":"add rehash toString names elementSize threshold org.aspectj.org.eclipse.jdt.internal.core.builder.NameSet  to avoid using Enumerations, walk the individual values skipping nulls\r\n  number of elements in the table\r\n  size represents the expected number of elements\r\n  assumes the threshold is never equal to the size of the table\r\n  double the number of expected elements\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","SignaturePattern":"asString getDetail setDetail propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty clone0 subtreeMatch0 accept0 treeSize resolveBindings checkForIncorrectTargetKind checkForIncorrectTargetKind reportUnmatchedTargetKindMessage visit visit visit visit visit visit containedIncorrectTargetKind getIncorrectTargetKinds postRead parameterizeWith matches matchesExactly matchesExactlyStaticInitialization matchesExactlyField matchesExactlyMethod matchesExactlyConstructor matchesVarArgs matchesAnnotations findMethod declaringTypeMatchAllowingForCovariance getName getDeclaringType getKind toString equals hashCode write read getModifiers getParameterTypes getReturnType getThrowsPattern getAnnotationPattern isStarAnnotation accept asString resolveBindings checkForIncorrectTargetKind checkForIncorrectTargetKind reportUnmatchedTargetKindMessage visit visit visit visit visit visit containedIncorrectTargetKind getIncorrectTargetKinds postRead parameterizeWith matches matchesExactly matchesExactlyStaticInitialization matchesExactlyField matchesExactlyMethod matchesExactlyConstructor matchesVarArgs matchesAnnotations findMethod declaringTypeMatchAllowingForCovariance getName getDeclaringType getKind toString equals hashCode write read getModifiers getParameterTypes getReturnType getThrowsPattern getAnnotationPattern isStarAnnotation accept detail kind modifiers returnType declaringType name parameterTypes throwsPattern annotationPattern hashcode scope incorrectTargetKinds targetsOtherThanTypeAllowed parameterTargettingAnnotationsAllowed kind modifiers returnType declaringType name parameterTypes throwsPattern annotationPattern hashcode scope incorrectTargetKinds targetsOtherThanTypeAllowed parameterTargettingAnnotationsAllowed org.aspectj.lang.reflect.SignaturePattern org.aspectj.org.eclipse.jdt.core.dom.SignaturePattern org.aspectj.weaver.patterns.SignaturePattern org.aspectj.lang.reflect.SignaturePattern org.aspectj.weaver.patterns.SignaturePattern  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  boolean visitChildren =\r\n  warning has been turned off, or if the patternNode is *\r\n  everything is incorrect since we've already checked whether we have the TYPE target annotation\r\n  of pointcuts which don't go through SignaturePattern.resolveBindings(..)\r\n  exception here is if parameter annotations are allowed\r\n  fail (or succeed!) fast tests...\r\n  do the hard work then...\r\n  if we got a \"MAYBE\" it's worth looking at the other signatures\r\n  Java5 introduces bridge methods, we match a call to them but nothing else...\r\n  modifiers match on the *subject*\r\n  pr239441\r\n  and MAYBE if it doesn't but an ancester member could.\r\n  ok, it's bad.\r\n  looking bad, but there might be parameterization to consider...\r\n  passed all the guards...\r\n  Check the throws pattern\r\n  ok, it's bad.\r\n  looking bad, but there might be parameterization to consider...\r\n  It could still be a match based on the generic sig parameter types of a parameterized type\r\n  check that varargs specifications match\r\n  passed all the guards..\r\n  It could still be a match based on the generic sig parameter types of a parameterized type\r\n  check that varargs specifications match\r\n  Check the throws pattern\r\n  passed all the guards..\r\n  the method ends with an array type, check that we don't *require* a varargs\r\n  XXX - Ideally the shadow would be included in the msg but we don't know it...\r\n  we have at least one parameter in the pattern list, and the method has a varargs signature\r\n  world.getLint().unresolvableMember.signal(member.toString(), getSourceLocation());\r\n  optimization before we go digging around for annotations on ITDs\r\n  ResolvedMember [] mems = member.getDeclaringType().resolve(world).getDeclaredFields();   relevant member in the original aspect\r\n  do NOT look at ancestor members...\r\n  fastmatch\r\n  It must be in here, or we have *real* problems\r\n  might be currently looking at the generic type and we need to continue searching in case we hit a parameterized version of this same type...\r\n  lookupMethod rather than lookupMemberNoSupers()\r\n  FIXME AV - bad, cannot be parsed again\r\n  warning has been turned off, or if the patternNode is *\r\n  everything is incorrect since we've already checked whether we have the TYPE target annotation\r\n  of pointcuts which don't go through SignaturePattern.resolveBindings(..)\r\n  exception here is if parameter annotations are allowed\r\n  fail (or succeed!) fast tests...\r\n  do the hard work then...\r\n  if we got a \"MAYBE\" it's worth looking at the other signatures\r\n  Java5 introduces bridge methods, we match a call to them but nothing else...\r\n  modifiers match on the *subject*\r\n  pr239441\r\n  and MAYBE if it doesn't but an ancester member could.\r\n  ok, it's bad.\r\n  looking bad, but there might be parameterization to consider...\r\n  passed all the guards...\r\n  Check the throws pattern\r\n  ok, it's bad.\r\n  looking bad, but there might be parameterization to consider...\r\n  It could still be a match based on the generic sig parameter types of a parameterized type\r\n  check that varargs specifications match\r\n  passed all the guards..\r\n  It could still be a match based on the generic sig parameter types of a parameterized type\r\n  check that varargs specifications match\r\n  Check the throws pattern\r\n  passed all the guards..\r\n  the method ends with an array type, check that we don't *require* a varargs\r\n  XXX - Ideally the shadow would be included in the msg but we don't know it...\r\n  we have at least one parameter in the pattern list, and the method has a varargs signature\r\n  world.getLint().unresolvableMember.signal(member.toString(), getSourceLocation());\r\n  optimization before we go digging around for annotations on ITDs\r\n  ResolvedMember [] mems = member.getDeclaringType().resolve(world).getDeclaredFields();   relevant member in the original aspect\r\n  do NOT look at ancestor members...\r\n  fastmatch\r\n  It must be in here, or we have *real* problems\r\n  might be currently looking at the generic type and we need to continue searching in case we hit a parameterized version of this same type...\r\n  lookupMethod rather than lookupMemberNoSupers()\r\n  FIXME AV - bad, cannot be parsed again\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* PatternNode -> AnnotationTargetKind[] */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* PatternNode -> AnnotationTargetKind[] */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","AbstractIndexer":"addAnnotationTypeDeclaration addClassDeclaration erasure addConstructorDeclaration addConstructorReference addEnumDeclaration addFieldDeclaration addFieldReference addIndexEntry addInterfaceDeclaration addMethodDeclaration addMethodReference addNameReference addTypeDeclaration addTypeReference indexDocument document org.aspectj.org.eclipse.jdt.internal.core.search.indexing.AbstractIndexer","AssistParser":"assistIdentifier bodyEnd bodyEnd buildInitialRecoveryState consumeAnnotationTypeDeclarationHeader consumeClassBodyDeclaration consumeClassBodyopt consumeClassHeader consumeConstructorBody consumeConstructorHeader consumeEnterAnonymousClassBody consumeEnterMemberValue consumeEnumConstantHeader consumeEnumConstantHeaderName consumeEnumConstantWithClassBody consumeEnumConstantNoClassBody consumeEnumHeader consumeExitMemberValue consumeExplicitConstructorInvocation consumeForceNoDiet consumeInterfaceHeader consumeMethodBody consumeMethodHeader consumeMethodInvocationName consumeMethodInvocationNameWithTypeArguments consumeMethodInvocationPrimary consumeMethodInvocationPrimaryWithTypeArguments consumeMethodInvocationSuper consumeMethodInvocationSuperWithTypeArguments consumeNestedMethod consumeOpenBlock consumeOpenFakeBlock consumePackageDeclarationName consumePackageDeclarationNameWithModifiers consumeRestoreDiet consumeSingleStaticImportDeclarationName consumeSingleTypeImportDeclarationName consumeStaticImportOnDemandDeclarationName consumeStaticInitializer consumeStaticOnly consumeToken consumeTypeImportOnDemandDeclarationName createAssistImportReference createAssistPackageReference createQualifiedAssistNameReference createQualifiedAssistTypeReference createParameterizedQualifiedAssistTypeReference createSingleAssistNameReference createSingleAssistTypeReference createParameterizedSingleAssistTypeReference flushAssistState flushElementStack getTypeReference getAssistTypeReferenceForGenericType getUnspecifiedReferenceOptimized goForBlockStatementsopt goForHeaders goForCompilationUnit goForBlockStatementsOrCatchHeader identifierSubSet indexOfAssistIdentifier indexOfAssistIdentifier initialize initialize initializeScanner isIndirectlyInsideFieldInitialization isIndirectlyInsideMethod isIndirectlyInsideType isInsideAttributeValue isInsideFieldInitialization isInsideMethod isInsideType lastIndexOfElement parseBlockStatements parseBlockStatements parseBlockStatements parseBlockStatements popElement popUntilElement prepareForBlockStatements prepareForHeaders pushOnElementStack pushOnElementStack recoveryExitFromVariable recoveryTokenCheck reset resumeAfterRecovery setAssistIdentifier topKnownElementInfo topKnownElementInfo topKnownElementKind topKnownElementKind wrapWithExplicitConstructorCallIfNeeded assistNode isOrphanCompletionNode blockStarts previousToken previousIdentifierPtr ElementStackIncrement elementPtr elementKindStack elementInfoStack previousKind previousInfo ASSIST_PARSER K_SELECTOR K_TYPE_DELIMITER K_METHOD_DELIMITER K_FIELD_INITIALIZER_DELIMITER K_ATTRIBUTE_VALUE_DELIMITER K_ENUM_CONSTANT_DELIMITER THIS_CONSTRUCTOR SUPER_CONSTRUCTOR NO_BODY WITH_BODY isFirst org.aspectj.org.eclipse.jdt.internal.codeassist.impl.AssistParser  the previous token read by the scanner\r\n  the index in the identifier stack of the previous identifier\r\n  element stack\r\n  OWNER\r\n  whether we are inside a message send\r\n  whether we are inside a type declaration\r\n  whether we are inside a method declaration\r\n  whether we are inside a field initializer\r\n  whether we are inside a annotation attribute valuer\r\n  whether we are inside a field initializer\r\n  selector constants\r\n  enum constant constants\r\n  ignore first block start, since manually rebuilt here\r\n  shift the index to the new block\r\n  shift the index to the new block\r\n  avoid multiple block if at same position\r\n  shift the index to the new block\r\n  closing brace has already been taken care of\r\n  avoid multiple block if at same position\r\n  avoid multiple block if at same position\r\n  then we are entering a field initializer\r\n  include the assistIdentifier\r\n  endPosition is just before the ;\r\n  flush comments defined prior to import statements\r\n  used to avoid branching back into the regular automaton\r\n  recovery\r\n  include the assistIdentifier\r\n  we don't need the modifiers start\r\n  we don't need the package modifiers\r\n  consume annotations\r\n  endPosition is just before the ;\r\n  flush comments defined prior to import statements\r\n  used to avoid branching back into the regular automaton\r\n  recovery\r\n  then we are exiting a field initializer\r\n  include the assistIdentifier\r\n  endPosition is just before the ;\r\n  flush annotations defined prior to import statements\r\n  used to avoid branching back into the regular automaton\r\n  recovery\r\n  include the assistIdentifier\r\n  endPosition is just before the ;\r\n  flush comments defined prior to import statements\r\n  used to avoid branching back into the regular automaton\r\n  recovery\r\n  include the assistIdentifier\r\n  endPosition is just before the ;\r\n  flush annotations defined prior to import statements\r\n  used to avoid branching back into the regular automaton\r\n  recovery\r\n  explicit constructor invocation, eg. this(1, 2)\r\n  explicit constructor invocation, eg. super(1, 2)\r\n  explicit constructor invocation, eg. Fred<X>[(]1, 2)\r\n  or fred<X<X>>[(]1, 2)\r\n  or Fred<X<X<X>>>[(]1, 2)\r\n  and if the current token is an open parenthesis\r\n  include the assistIdentifier\r\n  endPosition is just before the ;\r\n  flush comments defined prior to import statements\r\n  used to avoid branching back into the regular automaton\r\n  recovery\r\n  genericsIdentifiersLengthPtr--;\r\n  genericsIdentifiersLengthPtr--;\r\n  generic type\r\n  we are in a case A<B>.C<D> or A<B>.C<D>\r\n  we are in a case A.B.C<B>.C<D> or A.B.C<B>...\r\n  remove completion token\r\n  no awaiting identifier\r\n  no assist identifier found yet\r\n  iterate awaiting identifiers backwards\r\n  none of the awaiting identifiers is the completion one\r\n  simulate goForConstructorBody except that we don't want to balance brackets because they are not going to be balanced\r\n  attach the statements as we might be searching for a reference to a local type\r\n  need to add explicitly the super();\r\n  avoid a isSomeThing that would only be used here BUT what is faster between two alternatives ?\r\n  simulate goForInitializer except that we don't want to balance brackets because they are not going to be balanced\r\n  just after the beginning {\r\n  attach the statements as we might be searching for a reference to a local type\r\n  check whether this block at least contains some comment in it\r\n  mark initializer with local type if one was found during parsing\r\n  simulate goForMethodBody except that we don't want to balance brackets because they are not going to be balanced\r\n  reset the scanner to parser from { down to the cursor location\r\n  attach the statements as we might be searching for a reference to a local type\r\n  initialize element stack\r\n  there is no method and no field initializer\r\n  remove all elements.\r\n  reset internal stacks\r\n  if in diet mode, reset the diet counter because we're going to restart outside an initializer.\r\n  passed this point, will not consider method bodies\r\n  only look for headers\r\n  does not know how to restart\r\n /* recovery */\r\n /* recovery in unit structure */\r\n /* recovery in method body */\r\n /* Initializer bodies are parsed in the context of the type declaration, we must thus search it inside */\r\n /* add initial block */\r\n /* check for intermediate block creation, so recovery can properly close them afterwards */\r\n /* might need some extra block (after the last reduced node) */\r\n /*\r\n * Build initial recovery state.\r\n * Recovery state is inferred from the current state of the parser (reduced node stack).\r\n */\r\n /* no need to take action if not inside assist identifiers */\r\n /* retrieve identifiers subset and whole positions, the assist node positions\r\n\t\tshould include the entire replaced source. */\r\n /* build specific assist node on package statement */\r\n /* no need to take action if not inside assist identifiers */\r\n /* retrieve identifiers subset and whole positions, the assist node positions\r\n\t\tshould include the entire replaced source. */\r\n /* build specific assist node on package statement */\r\n /* no need to take action if not inside assist identifiers */\r\n /* retrieve identifiers subset and whole positions, the assist node positions\r\n\t\tshould include the entire replaced source. */\r\n /* build specific assist node on import statement */\r\n /* no need to take action if not inside assist identifiers */\r\n /* retrieve identifiers subset and whole positions, the assist node positions\r\n\t\tshould include the entire replaced source. */\r\n /* build specific assist node on import statement */\r\n /* no need to take action if not inside assist identifiers */\r\n /* retrieve identifiers subset and whole positions, the assist node positions\r\n\t\tshould include the entire replaced source. */\r\n /* build specific assist node on import statement */\r\n /* no need to take action if not inside assist identifiers */\r\n /* retrieve identifiers subset and whole positions, the assist node positions\r\n\t\tshould include the entire replaced source. */\r\n /* build specific assist node on import statement */\r\n /*\r\n * Flush parser/scanner state regarding to code assist\r\n */\r\n /* no need to take action if not inside completed identifiers */\r\n /* assist inside subsequent identifier */\r\n /* assist inside first identifier */\r\n /*\r\n * Build specific type reference nodes in case the cursor is located inside the type reference\r\n */\r\n /*(indexOfAssistIdentifier()) < 0 ||*/\r\n /* no need to take action if not inside completed identifiers */\r\n /* no need to take action if not inside completed identifiers */\r\n /* retrieve identifiers subset and whole positions, the completion node positions\r\n\t\tshould include the entire replaced source. */\r\n /* build specific completion on name reference */\r\n /* completion inside subsequent identifier */\r\n /* completion inside first identifier */\r\n /*\r\n * Copy of code from superclass with the following change:\r\n * In the case of qualified name reference if the cursor location is on the \r\n * qualified name reference, then create a CompletionOnQualifiedNameReference \r\n * instead.\r\n */\r\n /*\r\n * Retrieve a partial subset of a qualified name reference up to the completion point.\r\n * It does not pop the actual awaiting identifiers, so as to be able to retrieve position\r\n * information afterwards.\r\n */\r\n /*\r\n * Iterate the most recent group of awaiting identifiers (grouped for qualified name reference (eg. aa.bb.cc)\r\n * so as to check whether one of them is the assist identifier.\r\n * If so, then answer the index of the assist identifier (0 being the first identifier of the set).\r\n *\teg. aa(0).bb(1).cc(2)\r\n * If no assist identifier was found, answers -1.\r\n */\r\n /*\r\n * Prepares the state of the parser to go for BlockStatements.\r\n */\r\n /*\r\n * Prepares the state of the parser to go for Headers.\r\n */\r\n /* attempt to move checkpoint location */\r\n /*\r\n * Reset context so as to resume to regular parse loop\r\n * If unable to reset for resuming, answers false.\r\n *\r\n * Move checkpoint location, reset internal stacks and\r\n * decide which grammar goal is activated.\r\n */\r\n","ImportDeclaration":"propertyDescriptors internalStructuralPropertiesForType internalGetSetBooleanProperty internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getName setName isOnDemand setOnDemand isStatic setStatic resolveBinding memSize treeSize equals getElementName getNameWithoutStar getElementType getFlags getHandleMemento getHandleMementoDelimiter getPrimaryElement isOnDemand readableName toStringInfo NAME_PROPERTY ON_DEMAND_PROPERTY STATIC_PROPERTY PROPERTY_DESCRIPTORS_2_0 PROPERTY_DESCRIPTORS_3_0 importName onDemand isStatic name isOnDemand org.aspectj.org.eclipse.jdt.core.dom.ImportDeclaration org.aspectj.org.eclipse.jdt.internal.core.ImportDeclaration  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  lazy init must be thread-safe for readers\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /*\r\n * @see JavaElement#getPrimaryElement(boolean)\r\n */\r\n","CompilationResultDestinationManager":"getOutputLocationForClass getSourceFolderForFile getOutputLocationForResource getAllOutputLocations getDefaultOutputLocation org.aspectj.ajdt.internal.compiler.CompilationResultDestinationManager /*File*/\r\n /* *******************************************************************\r\n * Copyright (c) 2006 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","ICodeAttribute":"getMaxLocals getMaxStack getLineNumberAttribute getLocalVariableAttribute getExceptionTable getBytecodes getCodeLength getAttributesCount getAttributes getExceptionTableLength traverse org.aspectj.org.eclipse.jdt.core.util.ICodeAttribute","RemoveFolderFromIndex":"execute toString folderPath inclusionPatterns exclusionPatterns project org.aspectj.org.eclipse.jdt.internal.core.search.indexing.RemoveFolderFromIndex  index got deleted since acquired\r\n  $NON-NLS-1$   free read lock\r\n  ask permission to read\r\n  write lock will be acquired by the remove operation\r\n  write lock will be acquired by the remove operation\r\n  all file names belonging to the folder or its subfolders and that are not excluded (see http:  $NON-NLS-1$  /*reuse index file*/\r\n /* ensure no concurrent write access to index */\r\n","NonCachingClassLoaderRepository":"processQueue get put entrySet clear size remove getBootClassLoader storeClass removeClass findClass loadClass loadClass clear processQueue get put entrySet clear size remove getBootClassLoader storeClass removeClass findClass loadClass loadClass clear bootClassLoader loaderRef loadedClasses map rq key bootClassLoader loaderRef loadedClasses map rq key org.aspectj.apache.bcel.util.NonCachingClassLoaderRepository org.aspectj.apache.bcel.util.NonCachingClassLoaderRepository  CLASSNAME X JAVACLASS\r\n  it got GC'd\r\n  CLASSNAME X JAVACLASS\r\n  it got GC'd\r\n","SelectionOnParameterizedQualifiedTypeReference":"resolveType resolveType printExpression org.aspectj.org.eclipse.jdt.internal.codeassist.select.SelectionOnParameterizedQualifiedTypeReference  }\r\n  }\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","CompletionOnExplicitConstructorCall":"printStatement resolve org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnExplicitConstructorCall  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","DeclareParents":"getDeclaringType getTargetTypesPattern isExtends isImplements getParentTypes match accept parameterizeWith toString equals hashCode write read parentsIncludeInterface parentsIncludeClass resolve getParents getChild isExtends isAdviceLike maybeGetNewParent verifyNoInheritedAlternateParameterization findMatchingNewParents getNameSuffix getDeclaringType getTargetTypesPattern isExtends isImplements getParentTypes match accept parameterizeWith toString equals hashCode write read parentsIncludeInterface parentsIncludeClass resolve getParents getChild isExtends isAdviceLike maybeGetNewParent verifyNoInheritedAlternateParameterization findMatchingNewParents getNameSuffix child parents isWildChild isExtends child parents isWildChild isExtends org.aspectj.lang.reflect.DeclareParents org.aspectj.weaver.patterns.DeclareParents org.aspectj.lang.reflect.DeclareParents org.aspectj.weaver.patterns.DeclareParents  extends and implements are treated equivalently\r\n  ??? cache this\r\n  }\r\n  }\r\n  ScopeWithTypeVariables resolutionScope = new ScopeWithTypeVariables(typeVariablesInScope,scope);\r\n  note - will always return true after deserialization, this doesn't affect weaver\r\n  already had an error here\r\n  Let's take a look at the parents we already have\r\n  alternate parameterization of the generic type on it\r\n  already a parent\r\n  Enum types that are targetted for decp through a wild type pattern get linted\r\n  Annotation types that are targetted for decp through a wild type pattern get linted\r\n  1. Can't use decp to make an enum  2. Can't use decp to change supertype of an enum  3. Can't use decp to declare java.lang.Enum  already a parent\r\n  new parent is a parameterized type, but this is a raw type\r\n  If the generic types are compatible but the parameterizations aren't then we have a problem\r\n  extends and implements are treated equivalently\r\n  ??? cache this\r\n  }\r\n  }\r\n  ScopeWithTypeVariables resolutionScope = new ScopeWithTypeVariables(typeVariablesInScope,scope);\r\n  note - will always return true after deserialization, this doesn't affect weaver\r\n  already had an error here\r\n  Let's take a look at the parents we already have\r\n  alternate parameterization of the generic type on it\r\n  already a parent\r\n  Enum types that are targetted for decp through a wild type pattern get linted\r\n  Annotation types that are targetted for decp through a wild type pattern get linted\r\n  1. Can't use decp to make an enum  2. Can't use decp to change supertype of an enum  3. Can't use decp to declare java.lang.Enum  already a parent\r\n  new parent is a parameterized type, but this is a raw type\r\n  If the generic types are compatible but the parameterizations aren't then we have a problem\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /*<ResolvedType>*/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /*<ResolvedType>*/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","MagicLiteral":"isValidJavaStatement source org.aspectj.org.eclipse.jdt.internal.compiler.ast.MagicLiteral","CompletionOnJavadocQualifiedTypeReference":"addCompletionFlags completeAnException completeInText completeBaseTypes completeFormalReference getCompletionFlags printExpression completionFlags completionIdentifier org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnJavadocQualifiedTypeReference  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference#printExpression(int, java.lang.StringBuffer)\r\n\t */\r\n","PackageDeclarationLocator":"matchContainer toString pattern org.aspectj.org.eclipse.jdt.internal.core.search.matching.PackageDeclarationLocator  $NON-NLS-1$\r\n","WeaverStateInfo":"setReweavableModeDefaults read toString write addConcreteMunger toString getTypeMungers isOldStyle getUnwovenClassFileData setUnwovenClassFileData isReweavable setReweavable addAspectsAffectingType addAspectAffectingType getAspectsAffectingType readAnyReweavableData replaceKeyWithDiff findEndOfKey endOfKeyHere insertArray readInt deleteInArray generateDiff applyDiff serializeInt writeAnyReweavableData setReweavableModeDefaults read toString write addConcreteMunger toString getTypeMungers isOldStyle getUnwovenClassFileData setUnwovenClassFileData isReweavable setReweavable addAspectsAffectingType addAspectAffectingType getAspectsAffectingType readAnyReweavableData replaceKeyWithDiff findEndOfKey endOfKeyHere insertArray readInt deleteInArray generateDiff applyDiff serializeInt writeAnyReweavableData typeMungers oldStyle reweavable reweavableCompressedMode reweavableDiffMode aspectsAffectingType unwovenClassFile reweavableDefault reweavableCompressedModeDefault reweavableDiffModeDefault key unwovenClassFileIsADiff UNTOUCHED WOVEN EXTENDED REWEAVABLE_BIT REWEAVABLE_COMPRESSION_BIT REWEAVABLE_DIFF_BIT aspectType typeMunger typeMungers oldStyle reweavable reweavableCompressedMode reweavableDiffMode aspectsAffectingType unwovenClassFile reweavableDefault reweavableCompressedModeDefault reweavableDiffModeDefault key unwovenClassFileIsADiff UNTOUCHED WOVEN EXTENDED REWEAVABLE_BIT REWEAVABLE_COMPRESSION_BIT REWEAVABLE_DIFF_BIT aspectType typeMunger org.aspectj.weaver.WeaverStateInfo org.aspectj.weaver.WeaverStateInfo  If true, unwovenClassFile is uncompressed on read\r\n  if true, unwovenClassFile is written and read as a diff\r\n  These must exist in the world for reweaving to be valid\r\n  Original 'untouched' class file\r\n  ajh02: changed from false;\r\n  Then when the wovenClassFile has been made, replaceKeyWithDiff is called.\r\n  Use 'bits' for these capabilities - only valid in EXTENDED mode\r\n  put key in so we can replace it with the diff later\r\n  Load list of aspects that need to exist in the world for reweaving to be 'legal'\r\n  the unwovenClassFile may have been compressed:\r\n  asks for the unwovenClassFile\r\n  so we'll have to fiddle with the four 'int length' bytes\r\n  delete the key\r\n  put the length of the diff infront of the diff\r\n  swap in the serialized newLength for the oldOne:\r\n  add the diff\r\n  looks through the classfile backwards (as the attributes are all near the end)\r\n  should never happen\r\n  should never happen\r\n  make a new array\r\n  copy in the bit before the deleted bit\r\n  copy in the bit after the deleted bit\r\n  find how long the run is\r\n  first 2 bytes of the diff are the constant pool count\r\n  then 4 bytes saying how long the run is\r\n  then we just dump the rest of the unWovenClassFile verbatim\r\n  copy the first 8 bytes from the wovenClassFile\r\n  copy the constant pool count from the diff\r\n  copy the run from the wovenClassFile\r\n  copy the stuff after the run from the diff\r\n  Write out list of aspects that must exist next time we try and weave this class\r\n  otherwise we'll insert it as a diff later\r\n  If true, unwovenClassFile is uncompressed on read\r\n  if true, unwovenClassFile is written and read as a diff\r\n  These must exist in the world for reweaving to be valid\r\n  Original 'untouched' class file\r\n  ajh02: changed from false;\r\n  Then when the wovenClassFile has been made, replaceKeyWithDiff is called.\r\n  Use 'bits' for these capabilities - only valid in EXTENDED mode\r\n  put key in so we can replace it with the diff later\r\n  Load list of aspects that need to exist in the world for reweaving to be 'legal'\r\n  the unwovenClassFile may have been compressed:\r\n  asks for the unwovenClassFile\r\n  so we'll have to fiddle with the four 'int length' bytes\r\n  delete the key\r\n  put the length of the diff infront of the diff\r\n  swap in the serialized newLength for the oldOne:\r\n  add the diff\r\n  looks through the classfile backwards (as the attributes are all near the end)\r\n  should never happen\r\n  should never happen\r\n  make a new array\r\n  copy in the bit before the deleted bit\r\n  copy in the bit after the deleted bit\r\n  find how long the run is\r\n  first 2 bytes of the diff are the constant pool count\r\n  then 4 bytes saying how long the run is\r\n  then we just dump the rest of the unWovenClassFile verbatim\r\n  copy the first 8 bytes from the wovenClassFile\r\n  copy the constant pool count from the diff\r\n  copy the run from the wovenClassFile\r\n  copy the stuff after the run from the diff\r\n  Write out list of aspects that must exist next time we try and weave this class\r\n  otherwise we'll insert it as a diff later\r\n /* Entry */\r\n /* String */\r\n /* String */\r\n /* String */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* Entry */\r\n /* String */\r\n /* String */\r\n /* String */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","ClassFormatException":"getErrorCode getBufferPosition getException printStackTrace printStackTrace printStackTrace ERROR_MALFORMED_UTF8 ERROR_TRUNCATED_INPUT INVALID_CONSTANT_POOL_ENTRY TOO_MANY_BYTES INVALID_ARGUMENTS_FOR_INVOKEINTERFACE INVALID_BYTECODE INVALID_TAG_CONSTANT INVALID_MAGIC_NUMBER serialVersionUID ErrBadMagic ErrBadMinorVersion ErrBadMajorVersion ErrBadConstantClass ErrBadConstantString ErrBadConstantNameAndType ErrBadConstantFieldRef ErrBadConstantMethodRef ErrBadConstantInterfaceMethodRef ErrBadConstantPoolIndex ErrBadSuperclassName ErrInterfaceCannotBeFinal ErrInterfaceMustBeAbstract ErrBadModifiers ErrClassCannotBeAbstractFinal ErrBadClassname ErrBadFieldInfo ErrBadMethodInfo ErrEmptyConstantPool ErrMalformedUtf8 ErrUnknownConstantTag ErrTruncatedInput ErrMethodMustBeAbstract ErrMalformedAttribute ErrBadInterface ErrInterfaceMustSubclassObject ErrIncorrectInterfaceMethods ErrInvalidMethodName ErrInvalidMethodSignature serialVersionUID errorCode bufferPosition nestedException fileName org.aspectj.apache.bcel.classfile.ClassFormatException org.aspectj.org.eclipse.jdt.core.util.ClassFormatException org.aspectj.org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException org.aspectj.apache.bcel.classfile.ClassFormatException  backward compatible\r\n  backward compatible\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","ReferenceInfoAdapter":"acceptConstructorReference acceptFieldReference acceptMethodReference acceptTypeReference acceptTypeReference acceptUnknownReference acceptUnknownReference org.aspectj.org.eclipse.jdt.internal.core.util.ReferenceInfoAdapter","IClasspathAttribute":"getName getValue JAVADOC_LOCATION_ATTRIBUTE_NAME OPTIONAL org.aspectj.org.eclipse.jdt.core.IClasspathAttribute  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","Test":"accept makeAnd makeOr makeNot makeInstanceof makeHasAnnotation makeCall makeFieldGetCall accept makeAnd makeOr makeNot makeInstanceof makeHasAnnotation makeCall makeFieldGetCall org.aspectj.weaver.ast.Test org.aspectj.weaver.ast.Test  if (b == Literal.NO_TEST) return a;\r\n  if (b == Literal.NO_TEST) return b;\r\n  uses our special rules that anything matches object\r\n  if (b == Literal.NO_TEST) return a;\r\n  if (b == Literal.NO_TEST) return b;\r\n  uses our special rules that anything matches object\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","MultiOperation":"error executeOperation getDestinationParent getMainTaskName getNewNameFor initializeRenamings isMove isRename processElement processElements setInsertBefore setRenamings verify verifyDestination verifyRenaming verifySibling insertBeforeElements newParents renamings renamingsList org.aspectj.org.eclipse.jdt.internal.core.MultiOperation  same destination for all elements to be moved  resize\r\n  resize\r\n  don't allow renaming of default package (see PR #1G47GUM)\r\n  cannot rename initializers\r\n","SelectionEngine":"createProblem acceptType acceptPackage acceptQualifiedTypes checkSelection checkTypeArgument getParser isLocal select selectMemberTypeFromImport selectStaticFieldFromStaticImport selectStaticMethodFromStaticImport selectFrom selectLocalDeclaration selectType selectDeclaration selectDeclaration DEBUG PERF parser requestor acceptedAnswer actualSelectionStart actualSelectionEnd selectedIdentifier acceptedClasses acceptedClassesModifiers acceptedInterfaces acceptedInterfacesModifiers acceptedEnums acceptedEnumsModifiers acceptedAnnotations acceptedAnnotationsModifiers acceptedClassesCount acceptedInterfacesCount acceptedEnumsCount acceptedAnnotationsCount noProposal problem org.aspectj.org.eclipse.jdt.internal.codeassist.SelectionEngine  compute start position of current line\r\n  not enough characters to decode an unicode\r\n  compute start and end of the last token\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  work-around internal failure - 1GEMF6D\r\n  $NON-NLS-1$\r\n  ignore this exception for now since it typically means we cannot find java.lang.Object\r\n  $NON-NLS-1$\r\n  scan the package & import statements first\r\n  try with simple type name\r\n  accept qualified types only if no unqualified type was accepted\r\n  $NON-NLS-1$\r\n  if null then we found a problem in the selection node\r\n  $NON-NLS-1$\r\n  accept qualified types only if no unqualified type was accepted\r\n  thus use the selected source and perform a textual type search\r\n  open on the type of the variable\r\n  arraylength\r\n  for traversing the parse tree, the parser assist identifier is necessary for identitiy checks\r\n  only the type erasure are returned by IType.resolvedType(...)\r\n  find the outer most type\r\n  compute parse tree for this most outer type\r\n  $NON-NLS-1$\r\n  find the type declaration that corresponds to the original source type\r\n  note: since we didn't ask for fields above, there is no field defined yet\r\n  $NON-NLS-1$\r\n  build bindings\r\n  $NON-NLS-1$\r\n  if null then we found a problem in the selection node\r\n  note: this builds fields only in the parsed unit (the buildFieldsAndMethods flag is not passed along)\r\n  resolve\r\n  accept qualified types only if no unqualified type was accepted\r\n  thus use the selected source and perform a textual type search\r\n  for traversing the parse tree, the parser assist identifier is necessary for identitiy checks\r\n  iterate over the types\r\n  Check if a declaration got selected in this unit\r\n  SelectionRequestor does not need of declaring type signature for method declaration\r\n  SelectionRequestor does not need of parameters type for method declaration\r\n  SelectionRequestor does not need of parameters type for method declaration\r\n  SelectionRequestor does not need of parameters type for method declaration\r\n  SelectionRequestor does not need of type parameters name for method declaration\r\n  SelectionRequestor does not need of type parameters bounds for method declaration\r\n  Check if a declaration got selected in this type\r\n /*\r\n\t * Returns whether the given binding is a local/anonymous reference binding, or if its declaring class is\r\n\t * local.\r\n\t */\r\n /*\r\n\t * Checks if a local declaration got selected in this method/initializer/field.\r\n\t */\r\n","BlockComment":"propertyDescriptors internalStructuralPropertiesForType getNodeType0 clone0 subtreeMatch0 accept0 memSize treeSize PROPERTY_DESCRIPTORS org.aspectj.org.eclipse.jdt.core.dom.BlockComment  dispatch to correct overloaded match method\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","CommentRegion":"append canAppend canFormat format formatRegion getDelimiter getDelimiter getDelimiter getDocument getRanges getSize getText hasBorder isAlphaNumeric isNonAlphaNumeric isClearLines isSingleLine logEdit markRegion setBorder computeIndentation replicate stringToIndent stringToLength expandTabs tokenizeRegion wrapRegion createLine COMMENT_RANGE_DELIMITER COMMENT_PREFIX_LENGTH fBorders fClear fDelimiter fDocument fLines preferences fRanges fSingleLine fTabSize scribe org.aspectj.org.eclipse.jdt.internal.formatter.comment.CommentRegion  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Should not happen\r\n  Do nothing\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n","NodeInfoStore":"markAsStringPlaceholder markAsCopyTarget newPlaceholderNode createCollapsePlaceholder isCollapsed getPlaceholderData setPlaceholderData toString toString clear ast placeholderNodes collapsedNodes copySource code org.aspectj.org.eclipse.jdt.internal.core.dom.rewrite.NodeInfoStore  have to set at least a finally block to be legal code\r\n  $NON-NLS-1$  AspectJ extension - raised visibility to public\r\n  $NON-NLS-1$   AspectJ extension - raised visibility to public\r\n /*protected*/\r\n /*protected*/\r\n","LongLiteral":"computeConstant generateCode literalType mayRepresentMIN_VALUE resolveType traverse FORMAT_ERROR org.aspectj.org.eclipse.jdt.internal.compiler.ast.LongLiteral  NaN;\r\n  minus one because the last char is 'l' or 'L'\r\n  -----------case radix=10-----------------\r\n  needed to check prior to the multiplication\r\n  jump over redondant zero\r\n  watch for 0000000000000L\r\n  digitValue is not 0\r\n","ThisOrTargetAnnotationPointcut":"getAnnotationTypePattern couldMatchKinds parameterizeWith fastMatch matchInternal isThis resolveBindings verifyRuntimeRetention concretize1 findResidueInternal couldMatch getBindingAnnotationTypePatterns getBindingTypePatterns write read equals hashCode buildDeclarationText toString accept getAnnotationTypePattern couldMatchKinds parameterizeWith fastMatch matchInternal isThis resolveBindings verifyRuntimeRetention concretize1 findResidueInternal couldMatch getBindingAnnotationTypePatterns getBindingTypePatterns write read equals hashCode buildDeclarationText toString accept isThis alreadyWarnedAboutDEoW annotationTypePattern declarationText thisKindSet targetKindSet isThis alreadyWarnedAboutDEoW annotationTypePattern declarationText thisKindSet targetKindSet org.aspectj.weaver.patterns.ThisOrTargetAnnotationPointcut org.aspectj.weaver.patterns.ThisOrTargetAnnotationPointcut  a subtype may match at runtime\r\n  it's a formal with a binding error\r\n  if annotationType does not have runtime retention, this is an error\r\n  we'll deal with this next check when the type var is actually bound...\r\n  Enforce rule about which designators are supported in declare\r\n  Are annotations being bound?\r\n  change check to verify if its the 'generic' annVar that is being used\r\n  a subtype may match at runtime\r\n  it's a formal with a binding error\r\n  if annotationType does not have runtime retention, this is an error\r\n  we'll deal with this next check when the type var is actually bound...\r\n  Enforce rule about which designators are supported in declare\r\n  Are annotations being bound?\r\n  change check to verify if its the 'generic' annVar that is being used\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#fastMatch(org.aspectj.weaver.patterns.FastMatchInfo)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#match(org.aspectj.weaver.Shadow)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#resolveBindings(org.aspectj.weaver.patterns.IScope, org.aspectj.weaver.patterns.Bindings)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#concretize1(org.aspectj.weaver.ResolvedType, org.aspectj.weaver.IntMap)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingAnnotationTypePatterns()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingTypePatterns()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.PatternNode#write(java.io.DataOutputStream)\r\n\t */\r\n /* (non-Javadoc)\r\n     * @see java.lang.Object#equals(java.lang.Object)\r\n     */\r\n /* (non-Javadoc)\r\n     * @see java.lang.Object#hashCode()\r\n     */\r\n /* (non-Javadoc)\r\n     * @see java.lang.Object#toString()\r\n     */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#fastMatch(org.aspectj.weaver.patterns.FastMatchInfo)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#match(org.aspectj.weaver.Shadow)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#resolveBindings(org.aspectj.weaver.patterns.IScope, org.aspectj.weaver.patterns.Bindings)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#concretize1(org.aspectj.weaver.ResolvedType, org.aspectj.weaver.IntMap)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingAnnotationTypePatterns()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingTypePatterns()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.PatternNode#write(java.io.DataOutputStream)\r\n\t */\r\n /* (non-Javadoc)\r\n     * @see java.lang.Object#equals(java.lang.Object)\r\n     */\r\n /* (non-Javadoc)\r\n     * @see java.lang.Object#hashCode()\r\n     */\r\n /* (non-Javadoc)\r\n     * @see java.lang.Object#toString()\r\n     */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","BindingKey":"createArrayTypeBindingKey createParameterizedTypeBindingKey createTypeBindingKey createTypeVariableBindingKey createWilcardTypeBindingKey getThrownExceptions getTypeArguments isRawType isParameterizedType isParameterizedMethod toSignature toString key org.aspectj.org.eclipse.jdt.core.BindingKey  Note this implementation is heavily dependent on ArrayTypeBinding#computeUniqueKey()\r\n  Note this implementation is heavily dependent on ParameterizedTypeBinding#computeUniqueKey() and its subclasses\r\n  Note this implementation is heavily dependent on TypeBinding#computeUniqueKey() and its subclasses\r\n  Note this implementation is heavily dependent on TypeVariableBinding#computeUniqueKey()\r\n  $NON-NLS-1$\r\n  Note this implementation is heavily dependent on WildcardBinding#computeUniqueKey()\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#toString()\r\n\t */\r\n","SelectionOnImportReference":"print org.aspectj.org.eclipse.jdt.internal.codeassist.select.SelectionOnImportReference  $NON-NLS-1$\r\n","MethodVerifier":"areMethodsCompatible areParametersEqual areReturnTypesCompatible areReturnTypesCompatible0 areTypesEqual canSkipInheritedMethods canSkipInheritedMethods checkAbstractMethod checkAgainstInheritedMethods checkConcreteInheritedMethod checkExceptions checkForBridgeMethod checkInheritedMethods checkInheritedReturnTypes checkMethods checkPackagePrivateAbstractMethod computeInheritedMethods computeInheritedMethods computeMethods computeSubstituteMethod doesMethodOverride findSuperinterfaceCollisions findOverriddenInheritedMethods isAsVisible isInterfaceMethodImplemented isSameClassOrSubclassOf mustImplementAbstractMethod mustImplementAbstractMethods problemReporter problemReporter reportIncompatibleReturnTypeError resolvedExceptionTypesFor verify toString type inheritedMethods currentMethods environment allowCompatibleReturnTypes org.aspectj.org.eclipse.jdt.internal.compiler.lookup.MethodVerifier  Initialized with the public method verify(SourceTypeBinding)\r\n  when sourceLevel < 1.5 but compliance >= 1.5, allow return types in binaries to be compatible instead of just equal\r\n  short is compatible with int, but as far as covariance is concerned, its not\r\n  interface methods inherit from Object\r\n  check for methods from Object, every interface inherits from Object\r\n  both are interfaces, see if they're related\r\n  unrelated interfaces... one must be a subtype of the other\r\n  so its not possible to have 2 arrays where one is UnresolvedX[] and the other is X[]\r\n  all other type bindings are identical\r\n  already know one is not null\r\n  annotation cannot override any method\r\n  do not repoort against subsequent inherited methods\r\n  but cannot ignore an overridden inherited method completely when it comes to checking for bridge methods\r\n  Cannot override a static method or hide an instance method\r\n  want to tag currentMethod even if return types are not equal\r\n  check against the other inherited methods to see if they hide this inheritedMethod\r\n  Cannot inherit a static method which is specified as an instance method by an interface\r\n  Remember that interfaces can only define public instance methods\r\n  but cannot ignore an overridden inherited method completely when it comes to checking for bridge methods\r\n  Remember that only one of the methods can be non-abstract\r\n  ignore concrete methods for interfaces\r\n  do not complain since the super interface already got blamed\r\n  All inherited methods do NOT have the same vmSignature\r\n  have a single concrete superclass so only check overridden methods\r\n  handle the common case\r\n  do not want to find it again\r\n  pass in the length of matching\r\n  clear the contents of the matching methods\r\n  do not want to find it again\r\n  pass in the length of matching\r\n  clear the contents of the matching methods\r\n  check that the inherited abstract method (package private visibility) is implemented within the same package\r\n  not a problem\r\n  closer non abstract super type will be flagged instead\r\n  found concrete implementation of abstract method in same package\r\n  non visible abstract methods cannot be overridden so the type must be defined abstract\r\n  class or enum\r\n  check interface methods against Object\r\n  maps method selectors to an array of methods... must search to match paramaters & return type\r\n  maps method selectors to an array of methods\r\n  only need to include superinterfaces if immediate superclasses are abstract\r\n  non visible abstract methods cannot be overridden so the type must be defined abstract\r\n  non visible methods cannot be overridden so a warning is issued\r\n  Interface methods are all abstract public\r\n  AspectJ Extension - allow for ITDs on the interface\r\n  skip interface method with the same signature if visible to its declaringClass\r\n  look to see if any of the existingMethods implement this inheritedMethod\r\n  check for intertype declarations hitting the same type that implement the method in question (242797)\r\n  End AspectJ Extension\r\n  was MethodBinding[] methods = type.methods();\r\n  End AspectJ Extension\r\n  maps method selectors to an array of methods... must search to match paramaters & return type\r\n  keep all methods which are NOT constructors or default abstract\r\n  no match\r\n  noop in 1.4\r\n  since superinterfaces can be added from different superclasses or other superinterfaces\r\n  NOTE: methods were added in order by walking up the superclass hierarchy\r\n  skip all methods from different superclasses\r\n  NOTE: superinterfaces can appear in 'random' order\r\n  Covers everything\r\n  The inheritedMethod cannot be private since it would not be visible\r\n  skip interface method with the same signature if visible to its declaringClass\r\n  otherwise, skip it if the type's superclass must implement any of the inherited methods\r\n  leave it for the subclasses\r\n  only if a superclass does not also implement the interface\r\n  find the first concrete superclass or the superclass which implements the interface\r\n  find the first concrete superclass or the abstract declaringClass\r\n  if it is a concrete class then we have already reported problem against it\r\n  only report against the currentMethod if its implemented by the type\r\n  safety check\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\nBinding creation is responsible for reporting all problems with types:\r\n\t- all modifier problems (duplicates & multiple visibility modifiers + incompatible combinations - abstract/final)\r\n\t\t- plus invalid modifiers given the context (the verifier did not do this before)\r\n\t- qualified name collisions between a type and a package (types in default packages are excluded)\r\n\t- all type hierarchy problems:\r\n\t\t- cycles in the superclass or superinterface hierarchy\r\n\t\t- an ambiguous, invisible or missing superclass or superinterface\r\n\t\t- extending a final class\r\n\t\t- extending an interface instead of a class\r\n\t\t- implementing a class instead of an interface\r\n\t\t- implementing the same interface more than once (ie. duplicate interfaces)\r\n\t- with nested types:\r\n\t\t- shadowing an enclosing type's source name\r\n\t\t- defining a static class or interface inside a non-static nested class\r\n\t\t- defining an interface as a local type (local types can only be classes)\r\n*/\r\n /*\r\n\"8.4.4\"\r\nVerify that newExceptions are all included in inheritedExceptions.\r\nAssumes all exceptions are valid and throwable.\r\nUnchecked exceptions (compatible with runtime & error) are ignored (see the spec on pg. 203).\r\n*/\r\n /*\r\nFor each inherited method identifier (message pattern - vm signature minus the return type)\r\n\tif current method exists\r\n\t\tif current's vm signature does not match an inherited signature then complain \r\n\t\telse compare current's exceptions & visibility against each inherited method\r\n\telse\r\n\t\tif inherited methods = 1\r\n\t\t\tif inherited is abstract && type is NOT an interface or abstract, complain\r\n\t\telse\r\n\t\t\tif vm signatures do not match complain\r\n\t\t\telse\r\n\t\t\t\tfind the concrete implementation amongst the abstract methods (can only be 1)\r\n\t\t\t\tif one exists then\r\n\t\t\t\t\tit must be a public instance method\r\n\t\t\t\t\tcompare concrete's exceptions against each abstract method\r\n\t\t\t\telse\r\n\t\t\t\t\tcomplain about missing implementation only if type is NOT an interface or abstract\r\n*/\r\n /*\r\nBinding creation is responsible for reporting:\r\n\t- all modifier problems (duplicates & multiple visibility modifiers + incompatible combinations)\r\n\t\t- plus invalid modifiers given the context... examples:\r\n\t\t\t- interface methods can only be public\r\n\t\t\t- abstract methods can only be defined by abstract classes\r\n\t- collisions... 2 methods with identical vmSelectors\r\n\t- multiple methods with the same message pattern but different return types\r\n\t- ambiguous, invisible or missing return/argument/exception types\r\n\t- check the type of any array is not void\r\n\t- check that each exception type is Throwable or a subclass of it\r\n*/\r\n","CreateTypeMemberOperation":"getChildPropertyDescriptor generateElementAST removeIndentAndNewLines rename generateSyntaxIncorrectAST getType setAlteredName verify verifyNameCollision source alteredName createdNode org.aspectj.org.eclipse.jdt.internal.core.CreateTypeMemberOperation  syntactically incorrect source\r\n  return a string place holder (instead of the created node) so has to not lose comments and formatting\r\n  $NON-NLS-1$\r\n  create some dummy source to generate an ast node\r\n  $NON-NLS-1$\r\n  check for name collisions\r\n /*\r\n * Renames the given node to the given name.\r\n * Returns the old name.\r\n */\r\n","IRelationship":"getName getTargets getSourceHandle addTarget getKind hasRuntimeTest isAffects isDeclareKind toString readResolve getName getTargets getSourceHandle addTarget getKind hasRuntimeTest isAffects isDeclareKind toString readResolve serialVersionUID DECLARE_WARNING DECLARE_ERROR ADVICE_AROUND ADVICE_AFTERRETURNING ADVICE_AFTERTHROWING ADVICE_AFTER ADVICE_BEFORE ADVICE DECLARE DECLARE_INTER_TYPE USES_POINTCUT DECLARE_SOFT ALL name nextOrdinal ordinal serialVersionUID DECLARE_WARNING DECLARE_ERROR ADVICE_AROUND ADVICE_AFTERRETURNING ADVICE_AFTERTHROWING ADVICE_AFTER ADVICE_BEFORE ADVICE DECLARE DECLARE_INTER_TYPE USES_POINTCUT DECLARE_SOFT ALL name nextOrdinal ordinal org.aspectj.asm.IRelationship org.aspectj.asm.IRelationship  typesafe enum\r\n  The 4 declarations below are necessary for serialization\r\n  typesafe enum\r\n  typesafe enum\r\n  The 4 declarations below are necessary for serialization\r\n  typesafe enum\r\n /* String */\r\n /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n * ******************************************************************/\r\n /* String */\r\n /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n * ******************************************************************/\r\n","IJavaModelMarker":"JAVA_MODEL_PROBLEM_MARKER TRANSIENT_PROBLEM TASK_MARKER ARGUMENTS ID CATEGORY_ID FLAGS CYCLE_DETECTED BUILDPATH_PROBLEM_MARKER CLASSPATH_FILE_FORMAT org.aspectj.org.eclipse.jdt.core.IJavaModelMarker  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","BcelFieldRef":"toString createLoad createStore createCopyFrom toString createLoad createStore createCopyFrom className fieldName className fieldName org.aspectj.weaver.bcel.BcelFieldRef org.aspectj.weaver.bcel.BcelFieldRef /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","AtAspectJAnnotationFactory":"createAspectAnnotation createPrivilegedAnnotation createBeforeAnnotation createAfterAnnotation createAfterReturningAnnotation createAfterThrowingAnnotation createAroundAnnotation createPointcutAnnotation createDeclareErrorOrWarningAnnotation createDeclareParentsAnnotation createDeclareSoftAnnotation createDeclareAnnAnnotation createITDAnnotation createDeclarePrecedenceAnnotation makeSingleStringMemberAnnotation addAnnotation org aspectj lang internal annotation value aspect privileged before after afterReturning afterThrowing around pointcut declareErrorOrWarning declareParents declareSoft declarePrecedence declareAnnotation itdAnnotation org.aspectj.ajdt.internal.compiler.ast.AtAspectJAnnotationFactory  we have to set the value\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","PointcutBinding":"bindingType readableName kind org.aspectj.ajdt.internal.compiler.lookup.PointcutBinding /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Binding#kind()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","HashtableOfObjectToIntArray":"clone containsKey get keysToArray put removeKey rehash size toString keyTable valueTable elementSize threshold org.aspectj.org.eclipse.jdt.internal.compiler.util.HashtableOfObjectToIntArray  to avoid using Enumerations, walk the individual tables skipping nulls\r\n  number of elements in the table\r\n  size represents the expected number of elements\r\n  assumes the threshold is never equal to the size of the table\r\n  double the number of expected elements\r\n  $NON-NLS-1$\r\n  $NON-NLS-2$ ","EditorListener":"currentFileChanged org.aspectj.ajde.EditorListener /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","NewMethodTypeMunger":"getInterMethodBody getDeclaredInterMethodBody getDeclaredInterMethodDispatcher write readMethod getMatchingSyntheticMember parameterizedFor equals hashCode parameterizeWith getInterMethodBody getDeclaredInterMethodBody getDeclaredInterMethodDispatcher write readMethod getMatchingSyntheticMember parameterizedFor equals hashCode parameterizeWith org.aspectj.weaver.NewMethodTypeMunger org.aspectj.weaver.NewMethodTypeMunger  For raw and 'normal' parameterized targets (e.g. Interface, Interface<String>)\r\n  in the original ITD declaration to the ones used in the actual target type declaration.\r\n  For raw and 'normal' parameterized targets (e.g. Interface, Interface<String>)\r\n  in the original ITD declaration to the ones used in the actual target type declaration.\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","SelectionParser":"assistIdentifier attachOrphanCompletionNode buildMoreCompletionContext checkRecoveredType classInstanceCreation consumeArrayCreationExpressionWithoutInitializer consumeArrayCreationExpressionWithInitializer consumeClassInstanceCreationExpressionQualifiedWithTypeArguments consumeClassInstanceCreationExpressionWithTypeArguments consumeEnterAnonymousClassBody consumeEnterVariable consumeExitVariableWithInitialization consumeFieldAccess consumeFormalParameter consumeInstanceOfExpression consumeInstanceOfExpressionWithName consumeLocalVariableDeclarationStatement consumeMarkerAnnotation consumeMemberValuePair consumeMethodInvocationName consumeMethodInvocationPrimary consumeNormalAnnotation consumeSingleMemberAnnotation consumeStaticImportOnDemandDeclarationName consumeToken consumeTypeImportOnDemandDeclarationName createAssistImportReference createAssistPackageReference createJavadocParser createLocalDeclaration createQualifiedAssistNameReference createQualifiedAssistTypeReference createParameterizedQualifiedAssistTypeReference createSingleAssistNameReference createSingleAssistTypeReference createParameterizedSingleAssistTypeReference dietParse getUnspecifiedReference getUnspecifiedReferenceOptimized initializeScanner newMessageSend newMessageSendWithTypeArguments parse resumeAfterRecovery selectionIdentifierCheck setAssistIdentifier updateRecoveryState toString SELECTION_PARSER SELECTION_OR_ASSIST_PARSER K_BETWEEN_CASE_AND_COLON assistNodeParent selectionStart selectionEnd SUPER THIS org.aspectj.org.eclipse.jdt.internal.codeassist.select.SelectionParser  OWNER\r\n  whether we are inside a block\r\n  the parent node of assist node\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  given we are not on an eof, we do not want side effects caused by looked-ahead token\r\n  int info = topKnownElementInfo(SELECTION_OR_ASSIST_PARSER);\r\n  the position has been stored explicitly\r\n  trick to avoid creating a selection on type reference\r\n  will be created and added by the TC (see createsInternalConstructorWithBinding)\r\n  force to restart in recovery mode\r\n  force to restart in recovery mode\r\n  force to restart in recovery mode\r\n  NO ClassBody\r\n  the position has been stored explicitly\r\n  trick to avoid creating a selection on type reference\r\n  remove the position of the '<'\r\n  will be created and added by the TC (see createsInternalConstructorWithBinding)\r\n  force to restart in recovery mode\r\n  ClassInstanceCreationExpression ::= 'new' TypeArguments ClassType '(' ArgumentListopt ')' ClassBodyopt\r\n  NO ClassBody\r\n  the position has been stored explicitly\r\n  trick to avoid creating a selection on type reference\r\n  remove the position of the '<'\r\n  will be created and added by the TC (see createsInternalConstructorWithBinding)\r\n  force to restart in recovery mode\r\n  trick to avoid creating a selection on type reference\r\n  the position has been stored explicitly\r\n  position at the type while it impacts the anonymous declaration\r\n  force to restart in recovery mode\r\n  opening brace already taken into account\r\n  will be updated when reading super-interfaces\r\n  opening brace already taken into account\r\n  recovery\r\n  force to restart in recovery mode\r\n  already attached inside variable decl\r\n  does not keep the initialization if selection is not inside\r\n  fieldReferenceerence begins at the this\r\n  optimize push  considerates the fieldReferenceerence beginning at the 'super' ....\r\n  force to restart in recovery mode\r\n  set isVarArgs\r\n  modifiers\r\n  force to restart in recovery mode\r\n  force to restart in recovery mode\r\n  force to restart in recovery mode if the declaration contains the selection\r\n  force to restart in recovery mode\r\n  force to restart in recovery mode\r\n  include the assistIdentifier\r\n  endPosition is just before the ;\r\n  flush annotations defined prior to import statements\r\n  used to avoid branching back into the regular automaton\r\n  recovery\r\n  if in a method or if in a field initializer\r\n  include the assistIdentifier\r\n  endPosition is just before the ;\r\n  flush comments defined prior to import statements\r\n  used to avoid branching back into the regular automaton\r\n  recovery\r\n  standard super\r\n  discard 'super' from identifier stacks\r\n  force to restart in recovery mode\r\n  dummy reference\r\n  force to restart in recovery mode\r\n  force to restart in recovery mode\r\n  force to restart in recovery mode\r\n  force to restart in recovery mode\r\n  mark enclosing blocks as to be preserved\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* generate a pseudo field with a completion on type reference */\r\n /* filter out cases where scanner is still inside type header */\r\n /* if in context of a type, then persists the identifier into a fake field return type */\r\n /* check if current awaiting identifier is the completion identifier */\r\n /* filter out cases where scanner is still inside type header */\r\n /* if incomplete method header, listLength counter will not have been reset,\r\n\t\t\tindicating that some arguments are available on the stack */\r\n /* assist inside subsequent identifier */\r\n /* assist inside first identifier */\r\n /* assist inside subsequent identifier */\r\n /* assist inside first identifier */\r\n /* assist inside subsequent identifier */\r\n /* assist inside first identifier */\r\n /* no need to take action if not inside assist identifiers */\r\n /* retrieve identifiers subset and whole positions, the assist node positions\r\n\t\tshould include the entire replaced source. */\r\n /* build specific assist node on import statement */\r\n /* no need to take action if not inside assist identifiers */\r\n /* retrieve identifiers subset and whole positions, the assist node positions\r\n\t\tshould include the entire replaced source. */\r\n /* build specific assist node on import statement */\r\n /* no need to take action if not inside completed identifiers */\r\n /* retrieve identifiers subset and whole positions, the completion node positions\r\n\t\tshould include the entire replaced source. */\r\n /* completion inside subsequent identifier */\r\n /* completion inside first identifier */\r\n /* build specific completion on name reference */\r\n /*\r\n * Copy of code from superclass with the following change:\r\n * In the case of qualified name reference if the cursor location is on the \r\n * qualified name reference, then create a CompletionOnQualifiedNameReference \r\n * instead.\r\n */\r\n /* if reached assist node inside method body, but still inside nested type,\r\n\t\tshould continue in diet mode until the end of the method body */\r\n /*\r\n * Reset context so as to resume to regular parse loop\r\n * If unable to reset for resuming, answers false.\r\n *\r\n * Move checkpoint location, reset internal stacks and\r\n * decide which grammar goal is activated.\r\n */\r\n /* expose parser state to recovery state */\r\n /* may be able to retrieve completionNode as an orphan, and then attach it */\r\n /* check and update recovered state based on current token,\r\n\t\tthis action is also performed when shifting token after recovery\r\n\t\tgot activated once. \r\n\t*/\r\n /*\r\n * Update recovery state based on current parser/scanner state\r\n */\r\n","Scanner":"scanIdentifierOrKeyword aspectV pointcutV privilegedV beforeV afterV aroundV declareV org.aspectj.org.eclipse.jdt.internal.compiler.parser.Scanner  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  XXX performance here is less than optimal, but code simplicity is pretty damn good\r\n  AspectJ Extension. The original scanner class is replaced by this one.\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n *               2003,2004 contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Common Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/cpl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","StructureView":"getViewProperties getRootNode setRootNode setViewProperties setRenderer notifyViewUpdated getActiveNode findCorrespondingViewNode findCorrespondingViewNodeHelper setActiveNode setActiveNode rootNode activeNode viewProperties renderer org.aspectj.ajde.ui.StructureView /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","RuntimeInvisibleAnnotationsAttribute":"getAnnotations getAnnotationsNumber NO_ENTRIES annotationsNumber annotations org.aspectj.org.eclipse.jdt.internal.core.util.RuntimeInvisibleAnnotationsAttribute /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IRuntimeInvisibleAnnotations#getAnnotations()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IRuntimeInvisibleAnnotations#getAnnotationsNumber()\r\n\t */\r\n","FloatConstant":"fromValue byteValue charValue doubleValue floatValue intValue longValue shortValue stringValue toString typeID value org.aspectj.org.eclipse.jdt.internal.compiler.impl.FloatConstant  implicit cast to return type\r\n  $NON-NLS-1$\r\n","IncrementalStateManager":"recordSuccessfulBuild removeIncrementalStateInformationFor clearIncrementalStates getConfigFilesKnown retrieveStateFor findStateManagingOutputLocation recordIncrementalStates debugIncrementalStates incrementalStates org.aspectj.ajdt.internal.core.builder.IncrementalStateManager  SECRETAPI will consume more memory, so turn on at your own risk ;)  Set to 'true' when memory usage is understood\r\n  forget what you know...\r\n  FIXME asc why can it ever be null?\r\n  FIXME why can it ever be null? due to using outjar?\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n * Andy Clement          initial implementation\r\n * ******************************************************************/\r\n","IndexRequest":"belongsTo cancel ensureReadyToRun updatedIndexState isCancelled containerPath manager org.aspectj.org.eclipse.jdt.internal.core.search.indexing.IndexRequest  can be found either by project name or JAR path name\r\n  tag the index as inconsistent\r\n","IJavaSearchConstants":"UNKNOWN TYPE METHOD PACKAGE CONSTRUCTOR FIELD CLASS INTERFACE ENUM ANNOTATION_TYPE CLASS_AND_ENUM CLASS_AND_INTERFACE INTERFACE_AND_ANNOTATION DECLARATIONS IMPLEMENTORS REFERENCES ALL_OCCURRENCES READ_ACCESSES WRITE_ACCESSES IGNORE_DECLARING_TYPE IGNORE_RETURN_TYPE EXACT_MATCH PREFIX_MATCH PATTERN_MATCH CASE_SENSITIVE CASE_INSENSITIVE FORCE_IMMEDIATE_SEARCH CANCEL_IF_NOT_READY_TO_SEARCH WAIT_UNTIL_READY_TO_SEARCH org.aspectj.org.eclipse.jdt.core.search.IJavaSearchConstants","CharOperation":"subarray lastIndexOf indexOf concat equals replace append append arrayConcat camelCaseMatch camelCaseMatch charArrayToStringArray charToString arrayConcat compareTo compareWith concat concat concat concat concat concatWith concatWith concatWith contains contains contains deepCopy endsWith equals equals equals equals equals equals fragmentEquals hashCode isWhitespace indexOf indexOf indexOf indexOf indexOf indexOf lastIndexOf lastIndexOf lastIndexOf lastSegment match match pathMatch occurencesOf occurencesOf prefixEquals prefixEquals remove replace replace replace replace replaceOnCopy splitAndTrimOn splitOn splitOn subarray subarray toLowerCase trim toString toStrings subarray lastIndexOf indexOf concat equals replace NO_CHAR NO_CHAR_CHAR NO_STRINGS org.aspectj.asm.internal.CharOperation org.aspectj.org.eclipse.jdt.core.compiler.CharOperation org.aspectj.asm.internal.CharOperation  null pattern is equivalent to '*'\r\n  null name cannot match\r\n  null name cannot match\r\n  null pattern is equivalent to '*'\r\n  first char must strictly match (upper  check first pattern char\r\n  We have exhausted pattern, so it's a match\r\n  We have exhausted name (and not pattern), so it's not a match\r\n  For as long as we're exactly matching, bring it on (even if it's a lower case character)\r\n  If characters are not equals, then it's not a match if patternChar is lowercase\r\n  We have exhausted name (and not pattern), so it's not a match\r\n  .. and it matched patternChar. Back to the big loop\r\n  .. and it does not match patternChar, so it's not a match\r\n  nameChar is lowercase\r\n  .. and it matched patternChar. Back to the big loop\r\n  .. and it does not match patternChar, so it's not a match\r\n  nameChar is lowercase\r\n  patternChar is uppercase, so let's find the next uppercase in name\r\n  Main loop is on pattern characters\r\n  array is shorter than prefix (e.g. array:'ab' < prefix:'abc').\r\n  assumes the prefix is not larger than the name\r\n  assumes the prefix is not larger than the name\r\n  8 characters is enough to compute a decent hash code, don't waste time examining every character\r\n  null name cannot match\r\n  null pattern is equivalent to '*'\r\n  null name cannot match\r\n  null pattern is equivalent to '*'\r\n  force iName check\r\n  skip star\r\n  mismatch - restart current segment\r\n  skip start\r\n  mismatch - restart current segment\r\n  null name cannot match\r\n  null pattern is equivalent to '*'\r\n  offsets inside pattern\r\n  special case: pattern foo\\ is equivalent to foo\\**\r\n  offsets inside filepath\r\n  both must start with a separator or none.\r\n  jump to next segment\r\n  skip separator\r\n  skip separator\r\n  first segments\r\n  true if filepath is done too.\r\n  force fSegmentStart check\r\n  skip separator\r\n  mismatch - restart current path segment\r\n  skip separator\r\n  skip separator\r\n  mismatch - restart current path segment\r\n  skip separator\r\n  jump to next segment\r\n  skip separator\r\n  skip separator\r\n  assumes the prefix is not larger than the name\r\n  assumes the prefix is not larger than the name\r\n  assumes the prefix is not larger than the name\r\n /* check first segment */\r\n /* check sequence of star+segment */\r\n /* segment is ending */\r\n /* check current name character */\r\n /* check sequence of doubleStar+segment */\r\n /* path segment is ending */\r\n /* chech current path segment */\r\n","LockSignature":"org.aspectj.lang.reflect.LockSignature org.aspectj.lang.reflect.LockSignature org.aspectj.lang.reflect.LockSignature","CompletionOnMethodName":"print resolve selectorEnd org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnMethodName  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","IfPointcut":"couldMatchKinds fastMatch matchInternal alwaysFalse alwaysTrue getResidueSource write read resolveBindings equals hashCode toString findResidueInternal shouldCopyLocationForConcretize concretize1 parameterizeWith makeIfFalsePointcut accept couldMatchKinds alwaysFalse findResidueInternal fastMatch matchInternal match resolveBindings postRead concretize1 write hashCode toString makeIfTruePointcut alwaysTrue findResidueInternal fastMatch matchInternal match resolveBindings postRead concretize1 write hashCode toString couldMatchKinds fastMatch matchInternal alwaysFalse alwaysTrue getResidueSource write read resolveBindings equals hashCode toString findResidueInternal shouldCopyLocationForConcretize concretize1 parameterizeWith makeIfFalsePointcut accept couldMatchKinds alwaysFalse findResidueInternal fastMatch matchInternal match resolveBindings postRead concretize1 write hashCode toString makeIfTruePointcut alwaysTrue findResidueInternal fastMatch matchInternal match resolveBindings postRead concretize1 write hashCode toString testMethod extraParameterFlags enclosingPointcutHint residueSource baseArgsCount findingResidue ifLastMatchedShadowId ifLastMatchedShadowResidue partiallyConcretized testMethod extraParameterFlags enclosingPointcutHint residueSource baseArgsCount findingResidue ifLastMatchedShadowId ifLastMatchedShadowResidue partiallyConcretized org.aspectj.weaver.patterns.IfPointcut org.aspectj.weaver.patterns.IfPointcut  resolved during concretize\r\n  allows to keep track of the @Aj style\r\n  ??? this is not maximally efficient\r\n  enh 76055\r\n  do we have a test method?\r\n  should always have a test method unless @AJ style\r\n  FIXME AV - bad, this makes it unparsable. Perhaps we can use if() for code style behind the scene!\r\n  @AJ style\r\n  There has to be a better way...\r\n  Similar to lastMatchedShadowId - but only for if PCDs.\r\n  Have we already been asked this question?\r\n  @style is slightly different\r\n  we don't use i as JoinPoint.* can be anywhere in the signature in @style\r\n  FIXME AV - \"args(jp)\" test(jp, thejp) will fail here\r\n  is bindings for the arguments\r\n  pr155347\r\n  pr118149\r\n  simply return Test.\r\n  If there are no args to sort out, don't bother with the recursive call\r\n  handle thisJoinPoint parameters\r\n  code style\r\n  Remember...\r\n  Enforce rule about which designators are supported in declare\r\n  @AJ style, we need to find the testMethod in the aspect defining the \"if()\" enclosing pointcut\r\n  but we have no enclosing advice.\r\n  put out a compiler error.\r\n  FIXME AV - will lead to failure for \"args(jp)\" test(jp, thejp)   we can't touch \"if\" methods\r\n  ??? there could possibly be some good optimizations to be done at this point\r\n  can only get here if an earlier error occurred\r\n  Enforce rule about which designators are supported in declare\r\n  can only get here if an earlier error occurred\r\n  Enforce rule about which designators are supported in declare\r\n  resolved during concretize\r\n  allows to keep track of the @Aj style\r\n  ??? this is not maximally efficient\r\n  enh 76055\r\n  do we have a test method?\r\n  should always have a test method unless @AJ style\r\n  FIXME AV - bad, this makes it unparsable. Perhaps we can use if() for code style behind the scene!\r\n  @AJ style\r\n  There has to be a better way...\r\n  Similar to lastMatchedShadowId - but only for if PCDs.\r\n  Have we already been asked this question?\r\n  @style is slightly different\r\n  we don't use i as JoinPoint.* can be anywhere in the signature in @style\r\n  FIXME AV - \"args(jp)\" test(jp, thejp) will fail here\r\n  is bindings for the arguments\r\n  pr155347\r\n  pr118149\r\n  simply return Test.\r\n  If there are no args to sort out, don't bother with the recursive call\r\n  handle thisJoinPoint parameters\r\n  code style\r\n  Remember...\r\n  Enforce rule about which designators are supported in declare\r\n  @AJ style, we need to find the testMethod in the aspect defining the \"if()\" enclosing pointcut\r\n  but we have no enclosing advice.\r\n  put out a compiler error.\r\n  FIXME AV - will lead to failure for \"args(jp)\" test(jp, thejp)   we can't touch \"if\" methods\r\n  ??? there could possibly be some good optimizations to be done at this point\r\n  can only get here if an earlier error occurred\r\n  Enforce rule about which designators are supported in declare\r\n  can only get here if an earlier error occurred\r\n  Enforce rule about which designators are supported in declare\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved.\r\n * This program and the accompanying materials are made available\r\n * under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *     PARC                 initial implementation\r\n *     Alexandre Vasseur    if() implementation for @AJ style\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved.\r\n * This program and the accompanying materials are made available\r\n * under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *     PARC                 initial implementation\r\n *     Alexandre Vasseur    if() implementation for @AJ style\r\n * ******************************************************************/\r\n","SourceTypeElementInfo":"addCategories getCategories getEnclosingType getFields getFieldHandles getFileName getHandle getInitializers getInterfaceNames getMemberTypes getMemberTypeHandles getMethods getMethodHandles getName getSuperclassName getTypeParameterBounds getTypeParameterNames isBinaryType isAnonymousMember setHandle setSuperclassName setSuperInterfaceNames toString NO_IMPORTS NO_INITIALIZERS NO_FIELDS NO_METHODS NO_TYPES superclassName superInterfaceNames handle typeParameters categories org.aspectj.org.eclipse.jdt.internal.core.SourceTypeElementInfo  if anonymous type\r\n  if anonymous type\r\n  $NON-NLS-1$\r\n /*\r\n\t * The type parameters of this source type. Empty if none.\r\n\t */\r\n /*\r\n\t * A map from an IJavaElement (this type or a child of this type) to a String[] (the categories of this element)\r\n\t */\r\n /*\r\n * Return a map from an IJavaElement (this type or a child of this type) to a String[] (the categories of this element)\r\n */\r\n /*\r\n * Returns the InitializerElementInfos for this type.\r\n * Returns an empty array if none.\r\n */\r\n /*\r\n * Returns whether the source type is an anonymous type of a member type.\r\n */\r\n","PerTypeWithinTargetTypeMunger":"equals hashCode write getAspectType getTestPointcut matches isWithinType equals hashCode write getAspectType getTestPointcut matches isWithinType aspectType testPointcut hashCode aspectType testPointcut hashCode org.aspectj.weaver.PerTypeWithinTargetTypeMunger org.aspectj.weaver.PerTypeWithinTargetTypeMunger  Does not match if the target is an interface\r\n  PTWIMPL Target type munger adds the localAspectOf() method\r\n  Does not match if the target is an interface\r\n  PTWIMPL Target type munger adds the localAspectOf() method\r\n /* *******************************************************************\r\n * Copyright (c) 2005 IBM, Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 IBM, Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement     initial implementation \r\n * ******************************************************************/\r\n","JavadocRunner":"has14ToolsAvailable callJavadoc org.aspectj.tools.ajdoc.JavadocRunner  System.out.println(\"Error: javadoc exited unexpectedly\");\r\n  for JDK 1.4 and above call the execute method...\r\n  Set the security manager back\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n *     Mik Kersten\t  port to AspectJ 1.1+ code base\r\n * ******************************************************************/\r\n","JavaProject":"areClasspathsEqual areClasspathsEqual canonicalizedPath hasJavaNature validateCycles addToBuildSpec buildStructure computeChildren computeExpandedClasspath computePackageFragmentRoots computePackageFragmentRoots computePackageFragmentRoots computePackageFragmentRoots computeSharedPropertyFileName configure contains createClasspathProblemMarker createElementInfo decodeClasspath decodeClasspathEntry deconfigure defaultClasspath defaultOutputLocation encodeClasspath encodeClasspathEntry equals exists findElement findElement findPackageFragment findPackageFragment0 findPackageFragmentRoot findPackageFragmentRoot0 findPackageFragmentRoots findType findType findType findType findType findType findType findType findType findType flushClasspathProblemMarkers getAccessRestrictions getAllPackageFragmentRoots getAllPackageFragmentRoots getClasspathEntryFor getCycleMarker getEclipsePreferences getElementName getElementType getExpandedClasspath getFolderPackageFragmentRoot getHandleFromMemento getHandleMementoDelimiter getJavaCommandIndex getJavaProjectElementInfo getNonJavaResources getOption getOptions getOutputLocation getPackageFragmentRoot getPackageFragmentRoot getPackageFragmentRoot getPackageFragmentRoot0 getPackageFragmentRoots getPackageFragmentRoots getPackageFragments getPackageFragmentsInRoots getPath getPerProjectInfo getPluginWorkingLocation getPreferences getProject getProjectCache getRawClasspath getRequiredProjectNames getResolvedClasspath getResolvedClasspath verbose_reentering_classpath_resolution getResource getSharedProperty getSourceMapper getUnderlyingResource hasBuildState hasClasspathCycle hasCycleMarker hashCode hasSource isOnClasspath isOnClasspath isOnClasspathEntry loadPreferences newEvaluationContext newNameLookup newNameLookup newSearchableNameEnvironment newSearchableNameEnvironment newTypeHierarchy newTypeHierarchy newTypeHierarchy newTypeHierarchy projectPrerequisites readFileEntriesWithException readFileEntries readOutputLocation readRawClasspath removeFromBuildSpec resetCaches resolveClasspath resolveClasspath rootID saveClasspath setJavaCommand setOption setOptions setOutputLocation setProject setRawClasspath setRawClasspath setRawClasspath setRawClasspath setSharedProperty updateCycleParticipants updatePackageFragmentRoots updatePreferences CLASSPATH_FILENAME INVALID_CLASSPATH IS_CASE_SENSITIVE NO_PREREQUISITES PREF_FILENAME DEFAULT_PREFERENCES_DIRNAME JAVA_CORE_PREFS_FILE RESOLUTION_IN_PROGRESS project org.aspectj.org.eclipse.jdt.internal.core.JavaProject  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  output is amongst file entries (last one)\r\n  compare classpath entries\r\n  compare binary outputs\r\n  }\r\n  if not external path, return original path\r\n  protection during shutdown (30487)\r\n  }\r\n  }\r\n  e.g. 'lib  }\r\n  }\r\n  keep device only if it was specified (this is because File.getCanonicalPath() converts '  }\r\n  compute cycle participants\r\n  create new marker\r\n  update existing cycle marker if needed\r\n  Add a Java command to the build spec\r\n  check whether the java project can be opened\r\n  cannot refresh cp markers on opening (emulate cp check on startup) since can create deadlocks (see bug 37274)\r\n  compute the pkg fragment roots\r\n  remember the timestamps of external libraries the first time they are looked up\r\n  compare all pkg fragment root lists\r\n  no need to update\r\n  break cycles if any\r\n  combine restrictions along the project chain\r\n  double check if bound to project (23977)\r\n  recurse in project to get all its indirect exports (only consider exported entries from there on)\r\n  don't retrieve exported roots\r\n  source folder\r\n  external target - only JARs allowed\r\n  internal target\r\n  internal  double check if bound to project (23977)\r\n  special builder binary output\r\n  only combine if need to build the reverse map\r\n  recurse into required project\r\n  rootIDs\r\n  inside original project\r\n  check existency\r\n  register Java builder\r\n  output isn't project\r\n  1 segment must be project name\r\n  special case prj==src and nested output location\r\n  folders are always included in src  .class files are not visible in source folders\r\n  .java files are not visible in library folders\r\n  setting == IGNORE\r\n  could not create marker: cannot do much\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  separate output\r\n  return a new empty classpath is it size is 0, to differenciate from an INVALID_CLASSPATH\r\n  ensure output is last item\r\n  bad format\r\n  $NON-NLS-1$\r\n  deregister Java builder\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  never happens since all is done in memory\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  unsupported extension\r\n  $NON-NLS-1$\r\n  lookup type\r\n  try to return one that is a child of this project\r\n  default to the first one\r\n  don't retrieve exported roots\r\n  entry may need to be resolved\r\n  try to find enclosing type\r\n  wait for indexes (in case we need to consider secondary types)\r\n  do not consider secondary types\r\n  consider secondary types\r\n  could not flush markers: not much we can do\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  TODO (philippe) should improve to use a bitmask instead of booleans (CYCLE, FORMAT, VALID)\r\n  inherit from workspace\r\n  force resolution\r\n  $NON-NLS-1$\r\n  Get cached preferences if exist\r\n  Init project preferences\r\n  Listen to node removal from parent in order to reset cache (see bug 68993)\r\n  Listen to preference changes\r\n  default project root\r\n  initialize to the defaults from JavaCore options pool\r\n  Get project specific options\r\n  get eclipse preferences\r\n  cannot do better (non-Java project)\r\n  create project options\r\n  cache project options\r\n  Inherit from JavaCore options if specified\r\n  Do not create marker while getting output location\r\n  force to read classpath - will position output location as well\r\n  default root\r\n  lib being a folder\r\n  lib being another project\r\n  thus will try to guess based on existing resource\r\n  use synchronized block to ensure consistency\r\n  force resolution to ensure initializers are run again\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  see https:  $NON-NLS-1$\r\n  fallback to default\r\n  .classpath always encoded with UTF-8\r\n  $NON-NLS-1$\r\n  fallback to default\r\n  .classpath always encoded with UTF-8\r\n  no need for resolved path given source folder cannot be abstracted\r\n  unsure\r\n  not a Java project\r\n  first look at unresolved entries\r\n  it can only be in a source folder, thus on the raw classpath\r\n  container was bound\r\n  then look at resolved entries\r\n  ensure that folders are only excluded if all of their children are excluded\r\n  not a Java project\r\n  package fragment roots must match exactly entry pathes (no exclusion there)\r\n  package fragment roots must match exactly entry pathes (no exclusion there)\r\n  load preferences from file\r\n  one shot read, delete old preferences\r\n  need resolution\r\n  see https:  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  fallback to default\r\n  .classpath always encoded with UTF-8\r\n  $NON-NLS-1$\r\n  fallback to default\r\n  .classpath always encoded with UTF-8\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Read classpath file without creating markers nor logging problems\r\n  extract the output location\r\n  Read classpath file without creating markers nor logging problems\r\n  discard the output location\r\n  see bug https:  if container is exported or restricted, then its nested entries must in turn be exported  (21749) and  container was bound\r\n  get raw info inside a synchronized block to ensure that it is consistent\r\n  see bug https:  if container is exported or restricted, then its nested entries must in turn be exported  (21749) and  container was bound\r\n  store resolved info along with the raw info to ensure consistency\r\n  $NON-NLS-1$\r\n  no need to save it, it is the same\r\n  actual file saving\r\n  Add a Java build spec before other builders (1FWJK7I)\r\n  Commit the spec change into the project\r\n  unrecognized option\r\n  invalid value\r\n  set default value => remove preference\r\n  Dump changes\r\n  unrecognized option\r\n  no filtering for encoding (custom encoding for project is allowed)\r\n  @see https:  old preferences => remove from preferences table\r\n  persist options\r\n  flush cache immediately\r\n  are we already with the default classpath\r\n  $NON-NLS-1$\r\n  fallback to default\r\n  .classpath always encoded with UTF-8\r\n  provide opportunity to checkout read-only .classpath file (23984)\r\n  update the resource content\r\n  refer to cycle, or in cycle itself\r\n  could not do better\r\n  discard caches (hold onto roots and pkg fragments)\r\n  $NON-NLS-1$\r\n  save immediately new preferences\r\n /*\r\n\t * Value of project's resolved classpath while it is being resolved\r\n\t */\r\n /*\r\n\t * Detect cycles in the classpath of the workspace's projects\r\n\t * and create markers if necessary.\r\n\t * @param preferredClasspaths Map\r\n\t * @throws JavaModelException\r\n\t */\r\n /*\r\n\t * Returns whether the given resource is accessible through the children or the non-Java resources of this project.\r\n\t * Returns true if the resource is not in the project.\r\n\t * Assumes that the resource is a folder or a file.\r\n\t */\r\n /*\r\n\t * Reads and decode an XML classpath string\r\n\t */\r\n /*indent*/\r\n /*insert new line*/\r\n /* consider secondary types */\r\n /* do NOT wait for indexes */\r\n /*don't check restrictions*/\r\n /*\r\n\t * non path canonicalizing version\r\n\t */\r\n /*\r\n\t * no path canonicalization \r\n\t */\r\n /* wait for indexes (only if consider secondary types)*/\r\n /*don't check restrictions*/\r\n /*\r\n\t * Internal findType with instanciated name lookup\r\n\t */\r\n /*don't check restrictions*/\r\n /*\r\n\t * Internal findType with instanciated name lookup\r\n\t */\r\n /*retrieveExportedRoots*/\r\n /*\r\n\t * Returns the cycle marker associated with this project or null if none.\r\n\t */\r\n /*\r\n\t * @see JavaElement\r\n\t */\r\n /*\r\n\t * no path canonicalization\r\n\t */\r\n /*\r\n\t\tif (!JavaProject.hasJavaNature(this.project)) return null;\r\n\t\tJavaModelManager.PerProjectInfo perProjectInfo = JavaModelManager.getJavaModelManager().getPerProjectInfo(this.project, true);\r\n\t\tPreferences preferences =  perProjectInfo.preferences;\r\n\t\tif (preferences != null) return preferences;\r\n\t\tpreferences = loadPreferences();\r\n\t\tif (preferences == null) preferences = new Preferences();\r\n\t\tperProjectInfo.preferences = preferences;\r\n\t\treturn preferences;\r\n\t\t*/\r\n /*\r\n\t * Returns the cached resolved classpath, or compute it ignoring unresolved entries and cache it.\r\n\t */\r\n /*\r\n\t * @see IJavaProject\r\n\t */\r\n /*\r\n\t * @see IJavaProject\r\n\t */\r\n /*no existing source*/\r\n /*\r\n\t * Returns a new name lookup. This name lookup first looks in the given working copies.\r\n\t */\r\n /*\r\n\t * Returns a new name lookup. This name lookup first looks in the working copies of the given owner.\r\n\t */\r\n /*\r\n\t * Returns a new search name environment for this project. This name environment first looks in the given working copies.\r\n\t */\r\n /*\r\n\t * Returns a new search name environment for this project. This name environment first looks in the working copies\r\n\t * of the given owner.\r\n\t */\r\n /*\r\n\t * Reads the classpath file entries of this project's .classpath file.\r\n\t * This includes the output entry.\r\n\t * As a side effect, unknown elements are stored in the given map (if not null)\r\n\t * Throws exceptions if the file cannot be accessed or is malformed.\r\n\t */\r\n /*\r\n\t * Reads the classpath file entries of this project's .classpath file.\r\n\t * This includes the output entry.\r\n\t * As a side effect, unknown elements are stored in the given map (if not null)\r\n\t */\r\n /*\r\n\t * Resets this project's caches\r\n\t */\r\n /*\r\n\t * Resolve the given raw classpath.\r\n\t */\r\n /*\r\n\t * Resolve the given perProjectInfo's raw classpath and store the resolved classpath in the perProjectInfo.\r\n\t */\r\n /*don't change output*/\r\n /*can change resource (as per API contract)*/\r\n /*don't change output*/\r\n /*can change resource (as per API contract)*/\r\n /*\r\n\t * Update eclipse preferences from old preferences.\r\n\t */\r\n","Checker":"concretize specializeOn implementOn parameterizeWith match compareTo getThrownExceptions mustCheckExceptions equals hashCode isError concretize specializeOn implementOn parameterizeWith match compareTo getThrownExceptions mustCheckExceptions equals hashCode isError msg isError hashCode msg isError hashCode org.aspectj.weaver.Checker org.aspectj.weaver.Checker  id\r\n  source start  pr134471 - remove when handles are improved to be independent of location\r\n  XXX this perhaps ought to take account of the other fields in advice ...\r\n  id\r\n  source start  pr134471 - remove when handles are improved to be independent of location\r\n  XXX this perhaps ought to take account of the other fields in advice ...\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","AjAttribute":"write getNameString getNameChars getBytes getAllBytes read getNameString write getNameString write reify getNameString write reify getNameString write read getMajorVersion getMinorVersion getCurrentWeaverMajorVersion getCurrentWeaverMinorVersion setBuildstamp getBuildstamp toString toCurrentVersionString getNameString write read getLineBreaks getSourceFileName getNameString getLineNumber getOffset write read toString getNameString write reify getNameString write getDeclare getNameString read write reify toString getExtraParameterFlags getKind getPointcut getDeclaredExceptions getFormalsUnchangedToProceed getProceedCallSignatures isProceedInInners getEnd getSourceContext getStart getNameString reify reifyFromAtAspectJ write setResolutionScope getNameString write getAccessedMembers read getNameString write read getEffectiveSignature toString getShadowKind isWeaveBody write getNameString getNameChars getBytes getAllBytes read getNameString write getNameString write reify getNameString write reify getNameString write read getMajorVersion getMinorVersion getCurrentWeaverMajorVersion getCurrentWeaverMinorVersion setBuildstamp getBuildstamp toString toCurrentVersionString getNameString write read getLineBreaks getSourceFileName getNameString getLineNumber getOffset write read toString getNameString write reify getNameString write getDeclare getNameString read write reify toString getExtraParameterFlags getKind getPointcut getDeclaredExceptions getFormalsUnchangedToProceed getProceedCallSignatures isProceedInInners getEnd getSourceContext getStart getNameString reify reifyFromAtAspectJ write setResolutionScope getNameString write getAccessedMembers read getNameString write read getEffectiveSignature toString getShadowKind isWeaveBody AttributePrefix AttributeName AttributeName munger AttributeName kind AttributeName WEAVER_VERSION_MAJOR_UNKNOWN WEAVER_VERSION_MINOR_UNKNOWN WEAVER_VERSION_MAJOR_AJ121 WEAVER_VERSION_MINOR_AJ121 WEAVER_VERSION_MAJOR_AJ150M4 WEAVER_VERSION_MAJOR_AJ150 WEAVER_VERSION_MINOR_AJ150 WEAVER_VERSION_MAJOR_AJ160M2 WEAVER_VERSION_MAJOR_AJ160 WEAVER_VERSION_MINOR_AJ160 WEAVER_VERSION_MAJOR_AJ161 WEAVER_VERSION_MINOR_AJ161 CURRENT_VERSION_MAJOR CURRENT_VERSION_MINOR UNKNOWN CURRENT major_version minor_version buildstamp AttributeName sourceFileName lineBreaks AttributeName lineNumber offset AttributeName pointcutDef AttributeName declare AttributeName kind pointcut extraParameterFlags start end sourceContext proceedInInners proceedCallSignatures formalsUnchangedToProceed declaredExceptions AttributeName perClause resolutionScope AttributeName accessedMembers AttributeName effectiveSignature shadowKind weaveBody AttributePrefix AttributeName AttributeName munger AttributeName kind AttributeName WEAVER_VERSION_MAJOR_UNKNOWN WEAVER_VERSION_MINOR_UNKNOWN WEAVER_VERSION_MAJOR_AJ121 WEAVER_VERSION_MINOR_AJ121 WEAVER_VERSION_MAJOR_AJ150M4 WEAVER_VERSION_MAJOR_AJ150 WEAVER_VERSION_MINOR_AJ150 WEAVER_VERSION_MAJOR_AJ160M2 WEAVER_VERSION_MAJOR_AJ160 WEAVER_VERSION_MINOR_AJ160 WEAVER_VERSION_MAJOR_AJ161 WEAVER_VERSION_MINOR_AJ161 CURRENT_VERSION_MAJOR CURRENT_VERSION_MINOR UNKNOWN CURRENT major_version minor_version buildstamp AttributeName sourceFileName lineBreaks AttributeName lineNumber offset AttributeName pointcutDef AttributeName declare AttributeName kind pointcut extraParameterFlags start end sourceContext proceedInInners proceedCallSignatures formalsUnchangedToProceed declaredExceptions AttributeName perClause resolutionScope AttributeName accessedMembers AttributeName effectiveSignature shadowKind weaveBody org.aspectj.weaver.AjAttribute org.aspectj.weaver.AjAttribute  shouldn't happen with ByteArrayOutputStreams\r\n  shouldn't happen with ByteArrayOutputStreams\r\n  We have to tell the user about this...\r\n  private ResolvedTypeMunger munger;\r\n  When we don't know ... (i.e. pre 1.2.1)\r\n  These are the weaver major  These are the weaver major  These are the weaver major  annotation value binding\r\n  These are the weaver major  These are the versions read in from a particular class file.\r\n  Default ctor uses the current version numbers\r\n  build used to construct the class...\r\n  AV: added in 1.5 M3 thus handling cases where we don't have that information\r\n  these are only used by around advice\r\n  size == # of proceed calls in body\r\n  size == formals.size\r\n  XXXperClause.concretize(inAspect);\r\n  shouldn't happen with ByteArrayOutputStreams\r\n  shouldn't happen with ByteArrayOutputStreams\r\n  We have to tell the user about this...\r\n  private ResolvedTypeMunger munger;\r\n  When we don't know ... (i.e. pre 1.2.1)\r\n  These are the weaver major  These are the weaver major  These are the weaver major  annotation value binding\r\n  These are the weaver major  These are the versions read in from a particular class file.\r\n  Default ctor uses the current version numbers\r\n  build used to construct the class...\r\n  AV: added in 1.5 M3 thus handling cases where we don't have that information\r\n  these are only used by around advice\r\n  size == # of proceed calls in body\r\n  size == formals.size\r\n  XXXperClause.concretize(inAspect);\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","AbstractSearchScope":"includesBinaries includesClasspaths processDelta setIncludesBinaries setIncludesClasspaths org.aspectj.org.eclipse.jdt.internal.core.search.AbstractSearchScope /* (non-Javadoc)\r\n * Process the given delta and refresh its internal state if needed.\r\n * Returns whether the internal state was refreshed.\r\n */\r\n","FieldSignature":"getFieldType getField getFieldType getField getFieldType getField org.aspectj.lang.reflect.FieldSignature org.aspectj.lang.reflect.FieldSignature org.aspectj.lang.reflect.FieldSignature /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","RecoveredMethod":"add add add add add bodyStartsAtHeaderEnd parseTree sourceEnd toString updateBodyStart updatedMethodDeclaration updateFromParserState updateOnClosingBrace updateOnOpeningBrace updateParseTree updateSourceEndIfNecessary attach methodDeclaration localTypes localTypeCount methodBody discardBody org.aspectj.org.eclipse.jdt.internal.compiler.parser.RecoveredMethod  ignore\r\n  local var can only be final\r\n  initializer\r\n  non void\r\n  ignore\r\n  ignore\r\n  ignore\r\n  ignore\r\n  ignore\r\n  ignore\r\n  ignore\r\n  close the constructor\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  add implicit constructor call\r\n  12387 : rParenPos will be used\r\n  remove unfinished annotation nodes\r\n  to compute bodyStart, and thus used to set next checkpoint.\r\n  protection for bugs 15142\r\n  parameter addition might have added an awaiting (no return type) method - see 1FVXQZ4 *  protection for bugs 15142\r\n  if parent is null then recovery already occured in diet parser.\r\n  pretend the brace was already there\r\n /* default behavior is to delegate recording to parent if any,\r\n\tdo not consider elements passed the known end (if set)\r\n\tit must be belonging to an enclosing element \r\n\t*/\r\n /* consider that if the opening brace was not found, it is there */\r\n /*\r\n * Record a nested block declaration\r\n */\r\n /* local variables inside method can only be final and non void */\r\n /* default behavior is to delegate recording to parent if any,\r\n\tdo not consider elements passed the known end (if set)\r\n\tit must be belonging to an enclosing element \r\n\t*/\r\n /* consider that if the opening brace was not found, it is there */\r\n /*\r\n * Record a field declaration\r\n */\r\n /* do not consider a type starting passed the type end (if set)\r\n\t\tit must be belonging to an enclosing type */\r\n /*\r\n * Record a local declaration - regular method should have been created a block body\r\n */\r\n /* do not consider a type starting passed the type end (if set)\r\n\t\tit must be belonging to an enclosing type */\r\n /*\r\n * Record a statement - regular method should have been created a block body\r\n */\r\n /* do not consider a type starting passed the type end (if set)\r\n\t\tit must be belonging to an enclosing type */\r\n /* consider that if the opening brace was not found, it is there */\r\n /* \r\n * Answer the associated parsed structure\r\n */\r\n /*\r\n * Answer the very source end of the corresponding parse node\r\n */\r\n /*\r\n * Update the bodyStart of the corresponding parse node\r\n */\r\n /* first statement might be an explict constructor call destinated to a special slot */\r\n /* if currentToken is parenthesis this last argument is a method/field signature */\r\n /* has not consumed arguments yet, listed elements must be arguments */\r\n /* cannot be an argument if non final */\r\n /* fix-up positions, given they were updated against rParenPos, which did not get set */\r\n /* has consumed the arguments - listed elements must be thrown exceptions */\r\n /* might want to recover arguments or thrown exceptions */\r\n /*\r\n * Update the corresponding parse node from parser state which\r\n * is about to disappear because of restarting recovery\r\n */\r\n /*\r\n\t\t\tif (parser.scanner.searchLineNumber(methodDeclaration.sourceEnd) \r\n\t\t\t\t!= parser.scanner.searchLineNumber(braceEnd)){\r\n\t\t */\r\n /* in case the opening brace is close enough to the signature */\r\n /*\r\n * An opening brace got consumed, might be the expected opening one of the current element,\r\n * in which case the bodyStart is updated.\r\n */\r\n /*\r\n * Update the declarationSourceEnd of the corresponding parse node\r\n */\r\n","AbstractVariableDeclaration":"analyseCode genericTypeArguments getKind isSuperAccess isTypeAccess printStatement printAsExpression resolve setActualReceiverType setDepth setFieldIndex declarationEnd declarationSourceEnd declarationSourceStart hiddenVariableDepth initialization modifiers modifiersSourceStart annotations name type FIELD INITIALIZER ENUM_CONSTANT LOCAL_VARIABLE PARAMETER TYPE_PARAMETER org.aspectj.org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration  used to diagnose hiding scenarii\r\n  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.lookup.InvocationSite#isSuperAccess()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.lookup.InvocationSite#isTypeAccess()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.lookup.InvocationSite#setActualReceiverType(org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.lookup.InvocationSite#setDepth(int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.lookup.InvocationSite#setFieldIndex(int)\r\n\t */\r\n","MethodDeclarationMatch":"org.aspectj.org.eclipse.jdt.core.search.MethodDeclarationMatch","IfPseudoToken":"maybeGetParsedPointcut postParse makeMethod makeArguments expr testMethod pointcut counter org.aspectj.ajdt.internal.compiler.ast.IfPseudoToken  XXX need to implement correctly\r\n  XXX static state bad\r\n  XXX todo: make sure that errors in Arguments only get displayed once\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","AsmElementFormatter":"genLabelAndKind genDecaLabel genPrecedenceListLabel setParameters acceptArgument genTypePatternLabel translatePointcutName org.aspectj.ajdt.internal.core.builder.AsmElementFormatter  Note: AV: implicit single advice type support here (should be enforced somewhere as well (APT etc))\r\n  TODO AV - all are considered anonymous - is that ok?\r\n  ??? how to : node.getParent().getKind().equals(IProgramElement.Kind.ASPECT)) {\r\n  InterTypeConstructorDeclaration itcd = (InterTypeConstructorDeclaration)methodDeclaration;\r\n  PointcutDeclaration pd = (PointcutDeclaration) methodDeclaration;\r\n  returnTypeToString(0));\r\n  if (details.length()!=0)\r\n  String argType = \"<UnknownType>\";   TODO: fix this way of determing ajc-added arguments, make subtype of Argument with extra info\r\n  !!! move or replace\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved.\r\n * This program and the accompanying materials are made available\r\n * under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *     PARC                     initial implementation\r\n *     Alexandre Vasseur        support for @AJ style\r\n * ******************************************************************/\r\n","AdviceKind":"read stringToKind isAfter isCflow getPrecedence isPerEntry isPerObjectEntry read stringToKind isAfter isCflow getPrecedence isPerEntry isPerObjectEntry precedence isAfter isCflow Before After AfterThrowing AfterReturning Around CflowEntry CflowBelowEntry InterInitializer PerCflowEntry PerCflowBelowEntry PerThisEntry PerTargetEntry Softener PerTypeWithinEntry precedence isAfter isCflow Before After AfterThrowing AfterReturning Around CflowEntry CflowBelowEntry InterInitializer PerCflowEntry PerCflowBelowEntry PerThisEntry PerTargetEntry Softener PerTypeWithinEntry org.aspectj.weaver.AdviceKind org.aspectj.weaver.AdviceKind  these kinds can't be declared, but are used by the weaver\r\n  XXX resolve precednece with the below\r\n  PTWIMPL Advice representing when aspect should be initialized\r\n  PTWIMPL Allow for PTW case\r\n  these kinds can't be declared, but are used by the weaver\r\n  XXX resolve precednece with the below\r\n  PTWIMPL Advice representing when aspect should be initialized\r\n  PTWIMPL Allow for PTW case\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","DefaultValuePairBinding":"getMethodBinding getName getValue isDefault isDeprecated method org.aspectj.org.eclipse.jdt.core.dom.DefaultValuePairBinding","ResolvedMember":"getModifiers getModifiers getExceptions getExceptions getAssociatedShadowMunger isAjSynthetic isCompatibleWith hasAnnotations hasAnnotation getAnnotations getAnnotationTypes setAnnotationTypes addAnnotation isBridgeMethod isVarargsMethod isSynthetic write getSourceContext getParameterNames setParameterNames getParameterAnnotations getParameterAnnotationTypes getAnnotationDefaultValue getParameterSignatureErased getSignatureErased getParameterNames getEffectiveSignature getSourceLocation getEnd getSourceContext getStart setPosition setSourceContext isAbstract isPublic isProtected isNative isDefault isVisible setCheckedExceptions setAnnotatedElsewhere isAnnotatedElsewhere toGenericString toDebugString hasBackingGenericMember getBackingGenericMember getGenericReturnType getGenericParameterTypes parameterizedWith parameterizedWith setTypeVariables getTypeVariables matches resetName resetKind resetModifiers resetReturnTypeToObjectArray evictWeavingState parameterizedWith getModifiers getModifiers getExceptions getExceptions getAssociatedShadowMunger isAjSynthetic isCompatibleWith hasAnnotations hasAnnotation getAnnotations getAnnotationTypes setAnnotationTypes addAnnotation isBridgeMethod isVarargsMethod isSynthetic write getSourceContext getParameterNames setParameterNames getParameterAnnotations getParameterAnnotationTypes getAnnotationDefaultValue getParameterSignatureErased getSignatureErased getParameterNames getEffectiveSignature getSourceLocation getEnd getSourceContext getStart setPosition setSourceContext isAbstract isPublic isProtected isNative isDefault isVisible setCheckedExceptions setAnnotatedElsewhere isAnnotatedElsewhere toGenericString toDebugString hasBackingGenericMember getBackingGenericMember getGenericReturnType getGenericParameterTypes parameterizedWith parameterizedWith setTypeVariables getTypeVariables matches resetName resetKind resetModifiers resetReturnTypeToObjectArray evictWeavingState parameterizedWith NONE NONE org.aspectj.weaver.ResolvedMember org.aspectj.weaver.ResolvedMember  like toString but include generic signature info\r\n  but if !isParameterized List<T> will turn into List.\r\n  target generic type\r\n  like toString but include generic signature info\r\n  but if !isParameterized List<T> will turn into List.\r\n  target generic type\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n *               2005 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation\r\n *     AMC      extracted as interface \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n *               2005 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation\r\n *     AMC      extracted as interface \r\n * ******************************************************************/\r\n","PerClause":"getKind readPerClause concretize1 concretize getKind toDeclarationString read extractPointcut getKind readPerClause concretize1 concretize getKind toDeclarationString read extractPointcut inAspect SINGLETON PERCFLOW PEROBJECT FROMSUPER PERTYPEWITHIN PERCFLOW PERCFLOWBELOW PERTHIS PERTARGET PERTYPEWITHIN inAspect SINGLETON PERCFLOW PEROBJECT FROMSUPER PERTYPEWITHIN PERCFLOW PERCFLOWBELOW PERTHIS PERTARGET PERTYPEWITHIN org.aspectj.lang.reflect.PerClause org.aspectj.weaver.patterns.PerClause org.aspectj.lang.reflect.PerClause org.aspectj.weaver.patterns.PerClause  PTWIMPL New kind added to this class, can be (de)serialized\r\n  PTWIMPL New kind added to this class, can be (de)serialized\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","BrowserView":"setSlaveViewVisible isSlaveViewVisible updateConfigs setSelectedConfig getSelectedConfig fixButtonBorders jbInit forward_button_actionPerformed back_button_actionPerformed getListCellRendererComponent configDesigner_button_mouseClicked configDesigner_button_mousePressed configDesigner_button_mouseReleased configDesigner_button_mouseEntered configDesigner_button_mouseExited configDesigner_button_actionPerformed viewManager_button_mouseClicked viewManager_button_mousePressed viewManager_button_mouseReleased viewManager_button_mouseEntered viewManager_button_mouseExited viewManager_button_actionPerformed configs_comboBox_actionPerformed joinpointProbe_button_actionPerformed serialVersionUID slaveView slaveViewVisible lastSelectedConfig icons borderLayout1 default_border toolBar_panel borderLayout2 mainToolBar_panel config_toolBar configs_comboBox borderLayout3 nav_toolBar forward_button back_button gridLayout1 views_splitPane command_toolBar splitView_button zoomToFile_button joinpointProbe_button serialVersionUID org.aspectj.ajde.ui.swing.BrowserView  private BrowserViewPanel masterView;\r\n  this.masterView = masterView;\r\n  structureViews_box.add(comment_editorPane, null);\r\n  setForeground(isSelected ? Color.lightGray : Color.gray);\r\n  TopManager.INSTANCE.VIEW_MANAGER.readStructureView();\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation\r\n *     Helen Hawkins  Converted to new interface (bug 148190)  \r\n * ******************************************************************/\r\n","ClassFileConstants":"AccDefault AccPublic AccPrivate AccProtected AccStatic AccFinal AccSynchronized AccVolatile AccBridge AccTransient AccVarargs AccNative AccInterface AccAbstract AccStrictfp AccSynthetic AccAnnotation AccEnum AccSuper AccAnnotationDefault AccDeprecated Utf8Tag IntegerTag FloatTag LongTag DoubleTag ClassTag StringTag FieldRefTag MethodRefTag InterfaceMethodRefTag NameAndTypeTag ConstantMethodRefFixedSize ConstantClassFixedSize ConstantDoubleFixedSize ConstantFieldRefFixedSize ConstantFloatFixedSize ConstantIntegerFixedSize ConstantInterfaceMethodRefFixedSize ConstantLongFixedSize ConstantStringFixedSize ConstantUtf8FixedSize ConstantNameAndTypeFixedSize MAJOR_VERSION_1_1 MAJOR_VERSION_1_2 MAJOR_VERSION_1_3 MAJOR_VERSION_1_4 MAJOR_VERSION_1_5 MAJOR_VERSION_1_6 MAJOR_VERSION_1_7 MINOR_VERSION_0 MINOR_VERSION_1 MINOR_VERSION_2 MINOR_VERSION_3 JDK1_1 JDK1_2 JDK1_3 JDK1_4 JDK1_5 JDK1_6 JDK1_7 JDK_DEFERRED INT_ARRAY BYTE_ARRAY BOOLEAN_ARRAY SHORT_ARRAY CHAR_ARRAY LONG_ARRAY FLOAT_ARRAY DOUBLE_ARRAY ATTR_SOURCE ATTR_LINES ATTR_VARS ATTR_STACK_MAP org.aspectj.org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants  indicate presence of an attribute  \"DefaultValue\" (annotation method)\r\n  indicate presence of an attribute \"Deprecated\"\r\n  1.1. is 45.3\r\n  search for references to this constant, and change it to one of the official JDT constants above.\r\n  SourceFileAttribute\r\n  LineNumberAttribute\r\n  LocalVariableTableAttribute\r\n  Stack map table attribute\r\n /*\r\n\t * Modifiers\r\n\t */\r\n","RemoveFromIndex":"execute toString resourceName org.aspectj.org.eclipse.jdt.internal.core.search.indexing.RemoveFromIndex  index got deleted since acquired\r\n  free write lock\r\n  ask permission to write\r\n  $NON-NLS-1$  /*reuse index file*/\r\n /* ensure no concurrent write access to index */\r\n","NodeRewriteEvent":"getNewValue getOriginalValue getChangeKind isListRewrite setNewValue getChildren toString originalValue newValue org.aspectj.org.eclipse.jdt.internal.core.dom.rewrite.NodeRewriteEvent  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.dom.RewriteEvent#getChangeKind()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.dom.RewriteEvent#isListRewrite()\r\n\t */\r\n /*\r\n\t * Sets a new value for the new node. Internal access only.\r\n\t * @param newValue The new value to set.\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.dom.RewriteEvent#getChildren()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#toString()\r\n\t */\r\n","ScopeWithTypeVariables":"lookupType getWorld getEnclosingType getMessageHandler lookupFormal getFormal getFormalCount getImportedPrefixes getImportedNames message message message lookupType getWorld getEnclosingType getMessageHandler lookupFormal getFormal getFormalCount getImportedPrefixes getImportedNames message message message delegateScope typeVariableNames typeVarTypeXs delegateScope typeVariableNames typeVarTypeXs org.aspectj.weaver.patterns.ScopeWithTypeVariables org.aspectj.weaver.patterns.ScopeWithTypeVariables /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.IScope#lookupType(java.lang.String, org.aspectj.weaver.IHasPosition)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.IScope#getWorld()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.IScope#getEnclosingType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.IScope#getMessageHandler()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.IScope#lookupFormal(java.lang.String)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.IScope#getFormal(int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.IScope#getFormalCount()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.IScope#getImportedPrefixes()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.IScope#getImportedNames()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.IScope#message(org.aspectj.bridge.IMessage.Kind, org.aspectj.weaver.IHasPosition, java.lang.String)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.IScope#message(org.aspectj.bridge.IMessage.Kind, org.aspectj.weaver.IHasPosition, org.aspectj.weaver.IHasPosition, java.lang.String)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.IScope#lookupType(java.lang.String, org.aspectj.weaver.IHasPosition)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.IScope#getWorld()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.IScope#getEnclosingType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.IScope#getMessageHandler()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.IScope#lookupFormal(java.lang.String)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.IScope#getFormal(int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.IScope#getFormalCount()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.IScope#getImportedPrefixes()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.IScope#getImportedNames()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.IScope#message(org.aspectj.bridge.IMessage.Kind, org.aspectj.weaver.IHasPosition, java.lang.String)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.IScope#message(org.aspectj.bridge.IMessage.Kind, org.aspectj.weaver.IHasPosition, org.aspectj.weaver.IHasPosition, java.lang.String)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","PlaceHolder":"L org.aspectj.lang.internal.lang.PlaceHolder /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Wes Isberg       initial implementation \r\n * ******************************************************************/\r\n","HashtableOfArrayToObject":"clone containsKey get getKey hashCode hashCode put removeKey rehash size toString keyTable valueTable elementSize threshold org.aspectj.org.eclipse.jdt.internal.core.util.HashtableOfArrayToObject  to avoid using Enumerations, walk the individual tables skipping nulls\r\n  number of elements in the table\r\n  size represents the expected number of elements\r\n  assumes the threshold is never equal to the size of the table\r\n  double the number of expected elements\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","PMGClass":"accept dump getPMGClassIndex setPMGClassIndex getPMGIndex setPMGIndex getPMGName getPMGClassName toString copy accept dump getPMGClassIndex setPMGClassIndex getPMGIndex setPMGIndex getPMGName getPMGClassName toString copy pmg_class_index pmg_index pmg_class_index pmg_index org.aspectj.apache.bcel.classfile.PMGClass org.aspectj.apache.bcel.classfile.PMGClass","IBuffer":"addBufferChangedListener append append close getChar getCharacters getContents getLength getOwner getText getUnderlyingResource hasUnsavedChanges isClosed isReadOnly removeBufferChangedListener replace replace save setContents setContents org.aspectj.org.eclipse.jdt.core.IBuffer","BeforeAdviceDeclaration":"clone0 subtreeMatch0 accept0 org.aspectj.org.eclipse.jdt.core.dom.BeforeAdviceDeclaration  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","BinaryExpression":"analyseCode computeConstant optimizedBooleanConstant generateCode generateOptimizedBoolean generateOptimizedGreaterThan generateOptimizedGreaterThanOrEqual generateOptimizedLessThan generateOptimizedLessThanOrEqual generateLogicalAnd generateLogicalOr generateLogicalXor generateOptimizedLogicalAnd generateOptimizedLogicalOr generateOptimizedLogicalXor generateOptimizedStringConcatenation generateOptimizedStringConcatenationCreation isCompactableOperation nonRecursiveResolveTypeUpwards optimizedBooleanConstant printExpressionNoParenthesis resolveType traverse left right optimizedBooleanConstant org.aspectj.org.eclipse.jdt.internal.compiler.ast.BinaryExpression  encode operator\r\n  keep implementation in sync with CombinedBinaryExpression#analyseCode\r\n  add some work for the boolean operators & |\r\n  compute the constant when valid\r\n  }\r\n  x & 0\r\n  0 & x\r\n  x & 0\r\n  0 & x\r\n  logical and\r\n  x | 0\r\n  0 | x\r\n  x | 0\r\n  0 | x\r\n  logical or\r\n  x ^ 0\r\n  0 ^ x\r\n  x ^ 0\r\n  0 ^ x\r\n  but rely upon generateOptimizedStringConcatenationCreation instead\r\n  implicitly falling through the TRUE case\r\n  implicitly falling through the FALSE case\r\n  reposition the endPC\r\n  0 > x\r\n  implicitly falling through the TRUE case\r\n  implicitly falling through the FALSE case\r\n  reposition the endPC\r\n  x > 0\r\n  both sides got promoted in the same way\r\n  default comparison\r\n  implicit falling through the TRUE case\r\n  reposition the endPC\r\n  implicit falling through the FALSE case\r\n  reposition the endPC\r\n  implicitly falling through the TRUE case\r\n  implicitly falling through the FALSE case\r\n  reposition the endPC\r\n  0 >= x\r\n  implicitly falling through the TRUE case\r\n  implicitly falling through the FALSE case\r\n  reposition the endPC\r\n  x >= 0\r\n  both sides got promoted in the same way\r\n  default comparison\r\n  implicit falling through the TRUE case\r\n  reposition the endPC\r\n  implicit falling through the FALSE case\r\n  reposition the endPC\r\n  implicitly falling through the TRUE case\r\n  implicitly falling through the FALSE case\r\n  0 < x\r\n  implicitly falling through the TRUE case\r\n  implicitly falling through the FALSE case\r\n  x < 0\r\n  both sides got promoted in the same way\r\n  default comparison\r\n  implicit falling through the TRUE case\r\n  implicit falling through the FALSE case\r\n  implicitly falling through the TRUE case\r\n  implicitly falling through the FALSE case\r\n  reposition the endPC\r\n  0 <= x\r\n  implicitly falling through the TRUE case\r\n  implicitly falling through the FALSE case\r\n  reposition the endPC\r\n  x <= 0\r\n  both sides got promoted in the same way\r\n  default comparison\r\n  implicit falling through the TRUE case\r\n  reposition the endPC\r\n  implicit falling through the FALSE case\r\n  reposition the endPC\r\n  <something equivalent to false> & x\r\n  reposition the endPC\r\n  <something equivalent to true> & x\r\n  x & <something equivalent to false>\r\n  reposition the endPC\r\n  x & <something equivalent to true>\r\n  default case\r\n  reposition the endPC\r\n  <something equivalent to false> | x\r\n  <something equivalent to true> | x\r\n  reposition the endPC\r\n  x | <something equivalent to false>\r\n  x | <something equivalent to true>\r\n  reposition the endPC\r\n  default case\r\n  reposition the endPC\r\n  <something equivalent to false> ^ x\r\n  <something equivalent to true> ^ x\r\n  negate\r\n  x ^ <something equivalent to false>\r\n  x ^ <something equivalent to true>\r\n  negate\r\n  default case\r\n  reposition the endPC\r\n  <something equivalent to false> & x\r\n  implicit falling through the TRUE case\r\n  reposition the endPC\r\n  <something equivalent to true> & x\r\n  x & <something equivalent to false>\r\n  implicit falling through the TRUE case\r\n  reposition the endPC\r\n  x & <something equivalent to true>\r\n  default case\r\n  implicit falling through the TRUE case\r\n  implicit falling through the FALSE case\r\n  reposition the endPC\r\n  <something equivalent to false> | x\r\n  <something equivalent to true> | x\r\n  reposition the endPC\r\n  x | <something equivalent to false>\r\n  x | <something equivalent to true>\r\n  reposition the endPC\r\n  default case\r\n  implicit falling through the TRUE case\r\n  implicit falling through the FALSE case\r\n  reposition the endPC\r\n  <something equivalent to false> ^ x\r\n  <something equivalent to true> ^ x\r\n  negating\r\n  x ^ <something equivalent to false>\r\n  negating\r\n  x ^ <something equivalent to true>\r\n  default case\r\n  implicit falling through the TRUE case\r\n  implicit falling through the FALSE case\r\n  reposition the endPC\r\n  new: java.lang.StringBuffer\r\n  keep implementation in sync with BinaryExpression#resolveType\r\n  will check later on\r\n  use the id of the type to navigate into the table\r\n  autoboxing support\r\n  must convert String + Object || Object + String\r\n  On the one hand when it is not zero (correct code) we avoid doing the test\r\n  only switch on possible result type.....\r\n  error........\r\n  record the current ReturnTypeID\r\n  check need for operand cast\r\n  compute the constant when valid\r\n  left is equivalent to true\r\n  constant(false)\r\n  constant(false)\r\n  left is equivalent to false\r\n  constant(true)\r\n  constant(true)\r\n  CombinedBinaryExpression#printExpressionNoParenthesis\r\n  and nonRecursiveResolveTypeUpwards\r\n  will check later on\r\n  will check later on\r\n  use the id of the type to navigate into the table\r\n  autoboxing support\r\n  must convert String + Object || Object + String\r\n  On the one hand when it is not zero (correct code) we avoid doing the test\r\n  only switch on possible result type.....\r\n  error........\r\n  record the current ReturnTypeID\r\n  check need for operand cast\r\n  compute the constant when valid\r\n /* In the case trying to make a string concatenation, there is no need to create a new\r\n\t * string buffer, thus use a lower-level API for code generation involving only the \r\n\t * appending of arguments to the existing StringBuffer\r\n\t */\r\n","WeavingURLClassLoader":"getAspectPath getClassPath getURLs addURL defineClass createAdaptor getBytes getAspectURLs acceptClass getAspectPath getClassPath getURLs addURL defineClass createAdaptor getBytes getAspectURLs acceptClass WEAVING_CLASS_PATH WEAVING_ASPECT_PATH aspectURLs adaptor initializingAdaptor generatedClasses trace WEAVING_CLASS_PATH WEAVING_ASPECT_PATH aspectURLs adaptor initializingAdaptor generatedClasses trace org.aspectj.weaver.loadtime.WeavingURLClassLoader org.aspectj.weaver.loadtime.WeavingURLClassLoader  System.out.println(\"WeavingURLClassLoader.WeavingURLClassLoader()\");\r\n  System.out.println(\"> WeavingURLClassLoader.WeavingURLClassLoader() classURLs=\" + Arrays.asList(classURLs));\r\n  return adaptor.findClass(name);\r\n  System.out.println(\"WeavingURLClassLoader.WeavingURLClassLoader()\");\r\n  System.out.println(\"> WeavingURLClassLoader.WeavingURLClassLoader() classURLs=\" + Arrays.asList(classURLs));\r\n  return adaptor.findClass(name);\r\n /*\r\n\t * This constructor is needed when using \"-Djava.system.class.loader\". \r\n\t */\r\n /* If either we nor our parent is using an ASPECT_PATH use a new-style\r\n\t\t * adaptor\r\n\t\t */\r\n /* Need to defer creation because of possible recursion during constructor execution */\r\n /* Avoid recursion during adaptor initialization */\r\n /* Ensures consistent LTW messages for testing */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Matthew Webster, Adrian Colyer, \r\n *     Martin Lippert     initial implementation \r\n * ******************************************************************/\r\n /*\r\n\t * This constructor is needed when using \"-Djava.system.class.loader\". \r\n\t */\r\n /* If either we nor our parent is using an ASPECT_PATH use a new-style\r\n\t\t * adaptor\r\n\t\t */\r\n /* Need to defer creation because of possible recursion during constructor execution */\r\n /* Avoid recursion during adaptor initialization */\r\n /* Ensures consistent LTW messages for testing */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Matthew Webster, Adrian Colyer, \r\n *     Martin Lippert     initial implementation \r\n * ******************************************************************/\r\n","DeclareSoftDeclaration":"clone0 subtreeMatch0 accept0 internalModifiersProperty internalModifiers2Property internalJavadocProperty propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getTypePattern setTypePattern getPointcut setPointcut JAVADOC_PROPERTY TYPE_PATTERN_PROPERTY POINTCUT_PROPERTY PROPERTY_DESCRIPTORS_2_0 PROPERTY_DESCRIPTORS_3_0 typePattern pointcut org.aspectj.org.eclipse.jdt.core.dom.DeclareSoftDeclaration  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  allow default implementation to flag the error\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t * \r\n\t * There are no modifiers declared for DeclareErrorDeclaration - \r\n\t * therefore we don't do anything with this\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t * \r\n\t * There are no modifiers declared for DeclareErrorDeclaration - \r\n\t * therefore we don't do anything with this\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","Opcodes":"OPC_nop OPC_aconst_null OPC_iconst_m1 OPC_iconst_0 OPC_iconst_1 OPC_iconst_2 OPC_iconst_3 OPC_iconst_4 OPC_iconst_5 OPC_lconst_0 OPC_lconst_1 OPC_fconst_0 OPC_fconst_1 OPC_fconst_2 OPC_dconst_0 OPC_dconst_1 OPC_bipush OPC_sipush OPC_ldc OPC_ldc_w OPC_ldc2_w OPC_iload OPC_lload OPC_fload OPC_dload OPC_aload OPC_iload_0 OPC_iload_1 OPC_iload_2 OPC_iload_3 OPC_lload_0 OPC_lload_1 OPC_lload_2 OPC_lload_3 OPC_fload_0 OPC_fload_1 OPC_fload_2 OPC_fload_3 OPC_dload_0 OPC_dload_1 OPC_dload_2 OPC_dload_3 OPC_aload_0 OPC_aload_1 OPC_aload_2 OPC_aload_3 OPC_iaload OPC_laload OPC_faload OPC_daload OPC_aaload OPC_baload OPC_caload OPC_saload OPC_istore OPC_lstore OPC_fstore OPC_dstore OPC_astore OPC_istore_0 OPC_istore_1 OPC_istore_2 OPC_istore_3 OPC_lstore_0 OPC_lstore_1 OPC_lstore_2 OPC_lstore_3 OPC_fstore_0 OPC_fstore_1 OPC_fstore_2 OPC_fstore_3 OPC_dstore_0 OPC_dstore_1 OPC_dstore_2 OPC_dstore_3 OPC_astore_0 OPC_astore_1 OPC_astore_2 OPC_astore_3 OPC_iastore OPC_lastore OPC_fastore OPC_dastore OPC_aastore OPC_bastore OPC_castore OPC_sastore OPC_pop OPC_pop2 OPC_dup OPC_dup_x1 OPC_dup_x2 OPC_dup2 OPC_dup2_x1 OPC_dup2_x2 OPC_swap OPC_iadd OPC_ladd OPC_fadd OPC_dadd OPC_isub OPC_lsub OPC_fsub OPC_dsub OPC_imul OPC_lmul OPC_fmul OPC_dmul OPC_idiv OPC_ldiv OPC_fdiv OPC_ddiv OPC_irem OPC_lrem OPC_frem OPC_drem OPC_ineg OPC_lneg OPC_fneg OPC_dneg OPC_ishl OPC_lshl OPC_ishr OPC_lshr OPC_iushr OPC_lushr OPC_iand OPC_land OPC_ior OPC_lor OPC_ixor OPC_lxor OPC_iinc OPC_i2l OPC_i2f OPC_i2d OPC_l2i OPC_l2f OPC_l2d OPC_f2i OPC_f2l OPC_f2d OPC_d2i OPC_d2l OPC_d2f OPC_i2b OPC_i2c OPC_i2s OPC_lcmp OPC_fcmpl OPC_fcmpg OPC_dcmpl OPC_dcmpg OPC_ifeq OPC_ifne OPC_iflt OPC_ifge OPC_ifgt OPC_ifle OPC_if_icmpeq OPC_if_icmpne OPC_if_icmplt OPC_if_icmpge OPC_if_icmpgt OPC_if_icmple OPC_if_acmpeq OPC_if_acmpne OPC_goto OPC_jsr OPC_ret OPC_tableswitch OPC_lookupswitch OPC_ireturn OPC_lreturn OPC_freturn OPC_dreturn OPC_areturn OPC_return OPC_getstatic OPC_putstatic OPC_getfield OPC_putfield OPC_invokevirtual OPC_invokespecial OPC_invokestatic OPC_invokeinterface OPC_new OPC_newarray OPC_anewarray OPC_arraylength OPC_athrow OPC_checkcast OPC_instanceof OPC_monitorenter OPC_monitorexit OPC_wide OPC_multianewarray OPC_ifnull OPC_ifnonnull OPC_goto_w OPC_jsr_w org.aspectj.org.eclipse.jdt.internal.compiler.codegen.Opcodes","GenericSignatureInformationProvider":"getGenericParameterTypes getGenericReturnType isBridge isVarArgs isSynthetic getGenericParameterTypes getGenericReturnType isBridge isVarArgs isSynthetic org.aspectj.weaver.reflect.GenericSignatureInformationProvider org.aspectj.weaver.reflect.GenericSignatureInformationProvider /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","ITrackedNodePosition":"getStartPosition getLength org.aspectj.org.eclipse.jdt.core.dom.rewrite.ITrackedNodePosition","CflowPointcut":"getBody setBody isCflowBelow setIsCflowBelow propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty clone0 subtreeMatch0 accept0 treeSize isCflowBelow couldMatchKinds getEntry fastMatch matchInternal write read parameterizeWith resolveBindings equals hashCode toString findResidueInternal concretize1 getKey getCflowfield putCflowfield accept isCflowBelow couldMatchKinds getEntry fastMatch matchInternal write read parameterizeWith resolveBindings equals hashCode toString findResidueInternal concretize1 getKey getCflowfield putCflowfield accept body BODY_PROPERTY isCflowBelow entry isBelow freeVars CFLOW_MARKER entry isBelow freeVars CFLOW_MARKER org.aspectj.org.eclipse.jdt.core.dom.CflowPointcut org.aspectj.weaver.patterns.CflowPointcut org.aspectj.weaver.patterns.CflowPointcut  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  The pointcut inside the cflow() that represents the 'entry' point\r\n  Is this cflowbelow?\r\n  System.err.println(\"Building cflow pointcut \"+entry.toString());\r\n  enh 76055\r\n  ??? this is not maximally efficient\r\n  ??? for if's sake we might need to be more careful here\r\n  Enforce rule about which designators are supported in declare\r\n  make this remap from formal positions to arrayIndices\r\n  int formalIndex = bindings.get(freeVar);\r\n  This block concretizes the pointcut within the cflow pointcut\r\n  ??? this means that we will store some state that we won't actually use, optimize this later\r\n  Is there a useful enclosing pointcut?\r\n  XXX getting the exposed state right\r\n  No state, so don't use a stack, use a counter.\r\n  Create a counter field in the aspect\r\n  Create type munger to add field to the aspect\r\n  Create shadow munger to push stuff onto the stack\r\n  Remember it\r\n  Use the one we already have\r\n  Check if we have already got a counter for this cflow pointcut\r\n  System.err.println(\"Retrieving for key \"+key+\" returning \"+o);\r\n  System.err.println(\"Storing cflow field for key\"+key);\r\n  The pointcut inside the cflow() that represents the 'entry' point\r\n  Is this cflowbelow?\r\n  System.err.println(\"Building cflow pointcut \"+entry.toString());\r\n  enh 76055\r\n  ??? this is not maximally efficient\r\n  ??? for if's sake we might need to be more careful here\r\n  Enforce rule about which designators are supported in declare\r\n  make this remap from formal positions to arrayIndices\r\n  int formalIndex = bindings.get(freeVar);\r\n  This block concretizes the pointcut within the cflow pointcut\r\n  ??? this means that we will store some state that we won't actually use, optimize this later\r\n  Is there a useful enclosing pointcut?\r\n  XXX getting the exposed state right\r\n  No state, so don't use a stack, use a counter.\r\n  Create a counter field in the aspect\r\n  Create type munger to add field to the aspect\r\n  Create shadow munger to push stuff onto the stack\r\n  Remember it\r\n  Use the one we already have\r\n  Check if we have already got a counter for this cflow pointcut\r\n  System.err.println(\"Retrieving for key \"+key+\" returning \"+o);\r\n  System.err.println(\"Storing cflow field for key\"+key);\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","IHasPosition":"getStart getEnd getStart getEnd org.aspectj.weaver.IHasPosition org.aspectj.weaver.IHasPosition /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","MemberImpl":"resolve typesToSignature typesToSignature signatureToTypes field method monitorEnter monitorExit pointcut field method pointcut makeExceptionHandlerSignature equals hashCode compareTo toString getKind getDeclaringType getReturnType getGenericReturnType getGenericParameterTypes getType getName getParameterTypes getSignature getArity getParameterSignature getModifiers getExceptions isStatic isInterface isPrivate canBeParameterized getModifiers getAnnotations getDeclaringTypes walkUp walkUpStatic getParameterNames getJoinPointSignatures reportDidntFindMember wipeJoinpointSignatures resolve typesToSignature typesToSignature signatureToTypes field method monitorEnter monitorExit pointcut field method pointcut makeExceptionHandlerSignature equals hashCode compareTo toString getKind getDeclaringType getReturnType getGenericReturnType getGenericParameterTypes getType getName getParameterTypes getSignature getArity getParameterSignature getModifiers getExceptions isStatic isInterface isPrivate canBeParameterized getModifiers getAnnotations getDeclaringTypes walkUp walkUpStatic getParameterNames getJoinPointSignatures reportDidntFindMember wipeJoinpointSignatures kind modifiers name returnType declaringType parameterTypes signature paramSignature reportedCantFindDeclaringType reportedUnresolvableMember joinPointSignatures hashCode kind modifiers name returnType declaringType parameterTypes signature paramSignature reportedCantFindDeclaringType reportedUnresolvableMember joinPointSignatures hashCode org.aspectj.weaver.MemberImpl org.aspectj.weaver.MemberImpl  OPTIMIZE move out of the member!\r\n  OPTIMIZE move static util methods out into a memberutils class\r\n  break out when the hit the ')'\r\n  variable, so just \"Tname;\"\r\n  Have to skip to the *correct* ';'\r\n  posn now points to the correct nextSemicolon :)\r\n  ---- factory methods\r\n  of this method\r\n  ??? this calls <clinit> a method\r\n  matter\r\n  OPTIMIZE move out of the member!\r\n  OPTIMIZE move static util methods out into a memberutils class\r\n  break out when the hit the ')'\r\n  variable, so just \"Tname;\"\r\n  Have to skip to the *correct* ';'\r\n  posn now points to the correct nextSemicolon :)\r\n  ---- factory methods\r\n  of this method\r\n  ??? this calls <clinit> a method\r\n  matter\r\n /* ResolvedType */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* ResolvedType */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","IIndexConstants":"REF METHOD_REF CONSTRUCTOR_REF SUPER_REF TYPE_DECL METHOD_DECL CONSTRUCTOR_DECL FIELD_DECL OBJECT COUNTS CLASS_SUFFIX INTERFACE_SUFFIX ENUM_SUFFIX ANNOTATION_TYPE_SUFFIX TYPE_SUFFIX CLASS_AND_ENUM_SUFFIX CLASS_AND_INTERFACE_SUFFIX INTERFACE_AND_ANNOTATION_SUFFIX SEPARATOR SECONDARY_SUFFIX ONE_STAR ONE_STAR_CHAR ZERO_CHAR ONE_ZERO ONE_ZERO_CHAR PKG_REF_PATTERN PKG_DECL_PATTERN TYPE_REF_PATTERN TYPE_DECL_PATTERN SUPER_REF_PATTERN CONSTRUCTOR_PATTERN FIELD_PATTERN METHOD_PATTERN OR_PATTERN LOCAL_VAR_PATTERN TYPE_PARAM_PATTERN org.aspectj.org.eclipse.jdt.internal.core.search.indexing.IIndexConstants  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  used as special marker for enclosing type name of local and anonymous classes\r\n","InnerEmulationDependency":"scope wasEnclosingInstanceSupplied org.aspectj.org.eclipse.jdt.internal.compiler.lookup.InnerEmulationDependency","ITypeNameRequestor":"acceptClass acceptInterface org.aspectj.org.eclipse.jdt.core.search.ITypeNameRequestor","RuntimeVisibleParameterAnnotations":"accept copy accept copy org.aspectj.apache.bcel.classfile.annotation.RuntimeVisibleParameterAnnotations org.aspectj.apache.bcel.classfile.annotation.RuntimeVisibleParameterAnnotations","WeakHashSet":"equals hashCode toString add addValue cleanupGarbageCollectedValues contains get rehash remove size toString equals hashCode toString add addValue cleanupGarbageCollectedValues contains get rehash remove size toString hashCode values elementSize threshold referenceQueue hashCode values elementSize threshold referenceQueue org.aspectj.org.eclipse.jdt.internal.compiler.util.WeakHashSet org.aspectj.org.eclipse.jdt.internal.core.util.WeakHashSet  $NON-NLS-1$    $NON-NLS-1$   number of elements in the table\r\n  size represents the expected number of elements\r\n  assumes the threshold is never equal to the size of the table\r\n  assumes the threshold is never equal to the size of the table\r\n  replace the value at index with the last value with the same hash\r\n  double the number of expected elements\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$    $NON-NLS-1$   number of elements in the table\r\n  size represents the expected number of elements\r\n  assumes the threshold is never equal to the size of the table\r\n  assumes the threshold is never equal to the size of the table\r\n  replace the value at index with the last value with the same hash\r\n  double the number of expected elements\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n\t * Adds the given object to this set.\r\n\t * If an object that is equals to the given object already exists, do nothing.\r\n\t * Returns the existing object or the new object if not found.\r\n\t */\r\n /*\r\n\t * Return the object that is in this set and that is equals to the given object.\r\n\t * Return null if not found.\r\n\t */\r\n /*\r\n\t * Removes the object that is in this set and that is equals to the given object.\r\n\t * Return the object that was in the set, or null if not found.\r\n\t */\r\n /*\r\n\t * Adds the given object to this set.\r\n\t * If an object that is equals to the given object already exists, do nothing.\r\n\t * Returns the existing object or the new object if not found.\r\n\t */\r\n /*\r\n\t * Return the object that is in this set and that is equals to the given object.\r\n\t * Return null if not found.\r\n\t */\r\n /*\r\n\t * Removes the object that is in this set and that is equals to the given object.\r\n\t * Return the object that was in the set, or null if not found.\r\n\t */\r\n","ResolvedPointcutDefinition":"write read toString getPointcut isAjSynthetic parameterizedWith setPointcut write read toString getPointcut isAjSynthetic parameterizedWith setPointcut pointcut DUMMY NO_POINTCUTS pointcut DUMMY NO_POINTCUTS org.aspectj.weaver.ResolvedPointcutDefinition org.aspectj.weaver.ResolvedPointcutDefinition  XXXpointcut.assertState(Pointcut.RESOLVED);\r\n  whilst we have a source context, let's remember it\r\n  type variables to their first bound.\r\n  for testing\r\n  XXXpointcut.assertState(Pointcut.RESOLVED);\r\n  whilst we have a source context, let's remember it\r\n  type variables to their first bound.\r\n  for testing\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","IJavaModelStatus":"getElements getPath getString isDoesNotExist org.aspectj.org.eclipse.jdt.core.IJavaModelStatus","ReflectionBasedReferenceTypeDelegateFactory":"createDelegate create15Delegate createGenericSignatureProvider createResolvedMember createResolvedMethod createResolvedAdviceMember createStaticInitMember createResolvedConstructor createResolvedField createHandlerMember resolveTypeInWorld toResolvedType toResolvedTypeArray createDelegate create15Delegate createGenericSignatureProvider createResolvedMember createResolvedMethod createResolvedAdviceMember createStaticInitMember createResolvedConstructor createResolvedField createHandlerMember resolveTypeInWorld toResolvedType toResolvedTypeArray org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegateFactory  can be null if we didn't find the class the delegate logic loads\r\n  can return 'null' if we can't find the class\r\n  toResolvedType(aConstructor.getDeclaringClass(),(IReflectionWorld)inWorld),\r\n  classes that represent arrays return a class name that is the signature of the array type, ho-hum...\r\n  can be null if we didn't find the class the delegate logic loads\r\n  can return 'null' if we can't find the class\r\n  toResolvedType(aConstructor.getDeclaringClass(),(IReflectionWorld)inWorld),\r\n  classes that represent arrays return a class name that is the signature of the array type, ho-hum...\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","SourceLocation":"getWithinType getFileName getLine getColumn validLine validColumn getSourceFile getLine getColumn getEndLine getContext toString getOffset setOffset getSourceFileName getWithinType getFileName getLine getColumn validLine validColumn getSourceFile getLine getColumn getEndLine getContext toString getOffset setOffset getSourceFileName getWithinType getFileName getLine getColumn serialVersionUID UNKNOWN sourceFile startLine column endLine offset context noColumn sourceFileName serialVersionUID UNKNOWN sourceFile startLine column endLine offset context noColumn sourceFileName org.aspectj.lang.reflect.SourceLocation org.aspectj.bridge.SourceLocation org.aspectj.lang.reflect.SourceLocation org.aspectj.bridge.SourceLocation org.aspectj.lang.reflect.SourceLocation  \"\" + startLine + \"-\" + endLine);\r\n  ctors at the moment! It needs sorting out.\r\n  \"\" + startLine + \"-\" + endLine);\r\n  ctors at the moment! It needs sorting out.\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","UnresolvedAnnotationBinding":"getAnnotationType getElementValuePairs env typeUnresolved org.aspectj.org.eclipse.jdt.internal.compiler.lookup.UnresolvedAnnotationBinding  the type is resolved when requested\r\n  annotation type are never parameterized\r\n  resolve the annotation type\r\n  there should be exactly one since the type is an annotation type.\r\n  else silently leave a null there\r\n  resolve method binding and value type (if unresolved) for each pair\r\n","IDebugRequestor":"acceptDebugResult isActive activate deactivate reset org.aspectj.org.eclipse.jdt.internal.compiler.IDebugRequestor /*\r\n\t * Debug callback method allowing to take into account a new compilation result.\r\n\t * Any side-effect performed on the actual result might interfere with the\r\n\t * original compiler requestor, and should be prohibited.\r\n\t */\r\n /*\r\n\t * Answers true when in active mode\r\n\t */\r\n /* \r\n\t * Activate debug callbacks\r\n\t */\r\n /* \r\n\t * Deactivate debug callbacks\r\n\t */\r\n /*\r\n\t * Reset debug requestor after compilation has finished\r\n\t */\r\n","PackageBinding":"getAnnotations getName isUnnamed getNameComponents getKind getModifiers isDeprecated isRecovered isSynthetic getJavaElement getKey isEqualTo computeNameAndComponents toString addNotFoundPackage addNotFoundType addPackage addType kind computeUniqueKey findPackage getPackage getPackage0 getType getType0 getTypeOrPackage readableName toString NO_NAME_COMPONENTS UNNAMED PACKAGE_NAME_SEPARATOR binding name resolver components tagBits compoundName parent environment knownTypes knownPackages org.aspectj.org.eclipse.jdt.core.dom.PackageBinding org.aspectj.org.eclipse.jdt.internal.compiler.lookup.PackageBinding  $NON-NLS-1$\r\n  not resolving bindings\r\n  not resolving binding\r\n  a package binding always has a LooupEnvironment set\r\n  identical binding - equal (key or no key)\r\n  other binding missing\r\n  See values in the interface TagBits below\r\n  initialized if used... class counts can be very large 300-600\r\n  sub-package counts are typically 0-3\r\n  not found so remember a problem package binding in the cache for future lookups\r\n  not found so remember a problem type binding in the cache for future lookups\r\n  no raw conversion for now\r\n  no raw conversion for now\r\n  have not looked for it before\r\n  to the collections so it will be reported as an error next time.\r\n  have not looked for it before\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n /*\r\n\t * @see IBinding#getName()\r\n\t */\r\n /*\r\n\t * @see IPackageBinding#isUnnamed()\r\n\t */\r\n /*\r\n\t * @see IPackageBinding#getNameComponents()\r\n\t */\r\n /*\r\n\t * @see IBinding#getKind()\r\n\t */\r\n /*\r\n\t * @see IBinding#getModifiers()\r\n\t */\r\n /*\r\n\t * @see IBinding#isDeprecated()\r\n\t */\r\n /*\r\n\t * @see IBinding#getJavaElement()\r\n\t */\r\n /*\r\n\t * @see IBinding#getKey()\r\n\t */\r\n /*\r\n\t * @see IBinding#isEqualTo(Binding)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * For debugging purpose only.\r\n\t * @see java.lang.Object#toString()\r\n\t */\r\n /*\r\n * slash separated name\r\n * org.aspectj.org.eclipse.jdt.core --> org.aspectj.org.eclipse.jdt/core\r\n */\r\n /*java.lang*/\r\n","IUIBuildMessageHandler":"reset org.aspectj.ajde.IUIBuildMessageHandler","JobManager":"activateProcessing awaitingJobsCount currentJob disable discardJobs enable isJobWaiting moveToNextJob notifyIdle performConcurrentJob processName request reset run shutdown toString awaitingJobs jobStart jobEnd executing processingThread progressJob enableCount VERBOSE activated awaitingClients org.aspectj.org.eclipse.jdt.internal.core.search.processing.JobManager  pretend busy in case concurrent job attempts performing before activated\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  cancel current job if it belongs to the given family\r\n  $NON-NLS-1$\r\n  wait until current active job has finished\r\n  flush and compact awaiting jobs\r\n  sanity check\r\n  $NON-NLS-1$\r\n  copy down, compacting\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  wake up the background thread if it is waiting (context must be synchronized)\r\n  don't check job at jobStart, as it may have already started\r\n  don't check job at jobStart, as it may have already started\r\n  don't check job at jobStart, as it may have already started\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  pause indexing\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  and bug 42760 NullPointerException in JobManager when searching)\r\n  $NON-NLS-1$\r\n  ratio of the amount of work relative to the total work\r\n  more jobs were added, just increment by the ratio\r\n  currentJob can be null when jobs have been added to the queue but job manager is not enabled\r\n  $NON-NLS-1$\r\n  append the job to the list of ones to process later on\r\n  when growing, relocate jobs starting at position 0\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  wake up the background thread if it is waiting\r\n  $NON-NLS-1$\r\n  less prioritary by default, priority is raised if clients are actively waiting on it\r\n  discard all jobs\r\n  $NON-NLS-1$\r\n  keep job manager alive\r\n  this will fork a new thread with no waiting jobs, some indexes will be inconsistent\r\n  $NON-NLS-1$\r\n  keep job manager alive\r\n  this will fork a new thread with no waiting jobs, some indexes will be inconsistent\r\n  handle shutdown case when notifyAll came before the wait but after the while loop was entered\r\n  wait until a new job is posted (or reenabled:38901)\r\n  must check for new job inside this sync block to avoid timing hole\r\n  just woke up, delay before processing any new jobs, allow some time for the active thread to finish\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  will wait until current executing job has completed\r\n  mark the job manager as shutting down so that the thread will stop by itself\r\n  ensure its awake so it can be shutdown\r\n  see http:  in case processing thread is handling a job\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$  /* queue of jobs to execute */\r\n /* background processing */\r\n /* counter indicating whether job execution is enabled or not, disabled if <= 0 \r\n\t    it cannot go beyond 1 */\r\n /* flag indicating that the activation has completed */\r\n /* initiate background processing */\r\n /*boolean status = */\r\n","ShadowMatch":"alwaysMatches maybeMatches neverMatches matchesJoinPoint setMatchingContext alwaysMatches maybeMatches neverMatches matchesJoinPoint setMatchingContext org.aspectj.weaver.tools.ShadowMatch org.aspectj.weaver.tools.ShadowMatch /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","TypePattern":"asString memSize toString getAnnotationPattern isVarArgs isStarAnnotation isArray setAnnotationTypePattern setTypeParameters getTypeParameters setIsVarArgs couldEverMatchSameTypesAs matchesStatically matchesInstanceof matches matchesExactly matchesExactly matchesSubtypes matchesSubtypes resolveExactType getExactType notExactType resolveBindings resolve parameterizeWith postRead isStar remapAdviceFormals read isIncludeSubtypes couldEverMatchSameTypesAs matchesExactly matchesExactly matchesInstanceof write toString equals hashCode accept parameterizeWith couldEverMatchSameTypesAs matchesExactly matchesExactly matchesInstanceof write matchesSubtypes isStar toString equals hashCode accept parameterizeWith accept couldEverMatchSameTypesAs matchesExactly matchesExactly matchesInstanceof parameterizeWith write read matchesSubtypes isStar toString equals hashCode couldEverMatchSameTypesAs matchesExactly matchesExactly matchesInstanceof write matchesSubtypes isStar toString equals hashCode accept parameterizeWith asString toString getAnnotationPattern isVarArgs isStarAnnotation isArray setAnnotationTypePattern setTypeParameters getTypeParameters setIsVarArgs couldEverMatchSameTypesAs matchesStatically matchesInstanceof matches matchesExactly matchesExactly matchesSubtypes matchesSubtypes resolveExactType getExactType notExactType resolveBindings resolve parameterizeWith postRead isStar remapAdviceFormals read isIncludeSubtypes couldEverMatchSameTypesAs matchesExactly matchesExactly matchesInstanceof write toString equals hashCode accept parameterizeWith couldEverMatchSameTypesAs matchesExactly matchesExactly matchesInstanceof write matchesSubtypes isStar toString equals hashCode accept parameterizeWith accept couldEverMatchSameTypesAs matchesExactly matchesExactly matchesInstanceof parameterizeWith write read matchesSubtypes isStar toString equals hashCode couldEverMatchSameTypesAs matchesExactly matchesExactly matchesInstanceof write matchesSubtypes isStar toString equals hashCode accept parameterizeWith name STATIC DYNAMIC ELLIPSIS ANY NO includeSubtypes isVarArgs annotationPattern typeParameters WILD EXACT BINDING ELLIPSIS_KEY ANY_KEY NOT OR AND NO_KEY ANY_WITH_ANNO HAS_MEMBER name STATIC DYNAMIC ELLIPSIS ANY NO includeSubtypes isVarArgs annotationPattern typeParameters WILD EXACT BINDING ELLIPSIS_KEY ANY_KEY NOT OR AND NO_KEY ANY_WITH_ANNO HAS_MEMBER org.aspectj.lang.reflect.TypePattern org.aspectj.org.eclipse.jdt.core.dom.TypePattern org.aspectj.weaver.patterns.TypePattern org.aspectj.weaver.patterns.EllipsisTypePattern org.aspectj.weaver.patterns.AnyTypePattern org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern org.aspectj.weaver.patterns.NoTypePattern org.aspectj.lang.reflect.TypePattern org.aspectj.weaver.patterns.TypePattern org.aspectj.weaver.patterns.EllipsisTypePattern org.aspectj.weaver.patterns.AnyTypePattern org.aspectj.weaver.patterns.AnyWithAnnotationTypePattern org.aspectj.weaver.patterns.NoTypePattern  stub method\r\n  answer conservatively...\r\n  XXX non-final for Not, && and ||\r\n  ??? This is part of gracefully handling missing references\r\n  return typeMatch.and(annotationPattern.matches(type));\r\n  return typeMatch.and(annotationPattern.matches(type));\r\n  System.out.println(\"    true\");\r\n  System.out.println(\"matching: \" + this + \" to \" + type);\r\n  pr124808\r\n  pr223605\r\n  if (superType.isParameterizedType()) superType = superType.getRawType().resolve(superType.getWorld());\r\n  FuzzyBoolean ret = FuzzyBoolean.NO;   System.out.println(\"    true\");\r\n  System.out.println(\"matching: \" + this + \" to \" + type);\r\n  If an ITD is applied, it will be put onto the generic type, not the parameterized or raw form\r\n  FuzzyBoolean ret = FuzzyBoolean.NO;   FIXME AV - bad! toString() cannot be parsed back (not idempotent)\r\n  answer conservatively...\r\n  XXX non-final for Not, && and ||\r\n  ??? This is part of gracefully handling missing references\r\n  return typeMatch.and(annotationPattern.matches(type));\r\n  return typeMatch.and(annotationPattern.matches(type));\r\n  System.out.println(\"    true\");\r\n  System.out.println(\"matching: \" + this + \" to \" + type);\r\n  pr124808\r\n  pr223605\r\n  if (superType.isParameterizedType()) superType = superType.getRawType().resolve(superType.getWorld());\r\n  FuzzyBoolean ret = FuzzyBoolean.NO;   System.out.println(\"    true\");\r\n  System.out.println(\"matching: \" + this + \" to \" + type);\r\n  If an ITD is applied, it will be put onto the generic type, not the parameterized or raw form\r\n  FuzzyBoolean ret = FuzzyBoolean.NO;   FIXME AV - bad! toString() cannot be parsed back (not idempotent)\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.TypePattern#couldEverMatchSameTypesAs(org.aspectj.weaver.patterns.TypePattern)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.TypePattern#couldEverMatchSameTypesAs(org.aspectj.weaver.patterns.TypePattern)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.TypePattern#couldEverMatchSameTypesAs(org.aspectj.weaver.patterns.TypePattern)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.TypePattern#couldEverMatchSameTypesAs(org.aspectj.weaver.patterns.TypePattern)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.TypePattern#couldEverMatchSameTypesAs(org.aspectj.weaver.patterns.TypePattern)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.TypePattern#couldEverMatchSameTypesAs(org.aspectj.weaver.patterns.TypePattern)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","IClassFileProvider":"getClassFileIterator getRequestor isApplyAtAspectJMungersOnly getClassFileIterator getRequestor isApplyAtAspectJMungersOnly org.aspectj.weaver.IClassFileProvider org.aspectj.weaver.IClassFileProvider","SimpleType":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getName setName memSize treeSize NAME_PROPERTY PROPERTY_DESCRIPTORS typeName org.aspectj.org.eclipse.jdt.core.dom.SimpleType  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  lazy init must be thread-safe for readers\r\n  treat Code as free\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","IncrementalImageBuilder":"build buildAfterBatchBuild addAffectedSourceFiles addAffectedSourceFiles addDependentsOf checkForClassFileChanges cleanUp compile deleteGeneratedFiles findAffectedSourceFiles findAffectedSourceFiles findSourceFiles findSourceFiles finishedWith processAnnotationResults removeClassFile removeSecondaryTypes resetCollections updateProblemsFor updateTasksFor writeClassFileBytes writeClassFileCheck toString sourceFiles previousSourceFiles qualifiedStrings simpleStrings secondaryTypesToRemove hasStructuralChanges compileLoop makeOutputFolderConsistent MaxCompileLoop org.aspectj.org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder  perform a full build if it takes more than ? incremental compile loops\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  abort the incremental build and let the batch builder handle the problem\r\n  we need to avoid unnecessary deltas caused by doing a full build in this case\r\n  $NON-NLS-1$\r\n  added to in acceptResult\r\n  $NON-NLS-1$\r\n  this is a copy of the incremental build loop\r\n  the qualifiedStrings are of the form 'p1  if a well known qualified name was found then we can skip over these\r\n  if a well known name was found then we can skip over these\r\n  can skip previously compiled files since already saw hierarchy related problems\r\n  $NON-NLS-1$\r\n  the qualifiedStrings are of the form 'p1  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  remember that if inclusion & exclusion patterns change then a full build is done\r\n  no need to go further with this delta since its children cannot be included\r\n  perform full build if a managed class file has been changed\r\n  $NON-NLS-1$\r\n  can cause an infinite loop as it alternates between not found and defined, see bug 146324\r\n  $NON-NLS-1$\r\n  must continue with compile loop so just log the CoreException\r\n  only delete .class files for source files that were actually deleted\r\n  add dependents of the source file since its now deleted\r\n  existing source files did not see it as deleted since they were compiled before it was\r\n  skip it if it failed to successfully define a type\r\n  defined a single type matching typePath\r\n  delete generated files and recompile any affected source files\r\n  skip unchanged output folder\r\n  $NON-NLS-1$\r\n  do full build since jar file was changed (added  $NON-NLS-1$\r\n  added  .class files from class folder\r\n  either a .class file folder or a zip  one on the folder & one on the class file\r\n  $NON-NLS-1$\r\n  see if the package still exists on the classpath\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  see if any known source file is from the same package... classpath already includes new package\r\n  $NON-NLS-1$\r\n  fall thru & traverse the sub-packages and .class files\r\n  $NON-NLS-1$\r\n  skip it since it really isn't changed\r\n  skip since it wasn't a structural change\r\n  $NON-NLS-1$\r\n  even a project which acts as its own source folder can have an independent  $NON-NLS-1$\r\n  removed source folder should not make it here, but handle anyways (ADDED is supported)\r\n  $NON-NLS-1$\r\n  catch the case that a package has been renamed and collides on disk with an as-yet-to-be-deleted package\r\n  rethrow\r\n  skip nested source & output folders when the project is a source folder\r\n  one on the folder & one on the source file\r\n  remember that if inclusion & exclusion patterns change then a full build is done\r\n  no need to go further with this delta since its children cannot be included\r\n  ensure package exists in the output folder\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  see if any known source file is from the same package... classpath already includes new package\r\n  fall thru & collect all the source files\r\n  since this folder is excluded then there is nothing to delete (from this md), but must walk any included subfolders\r\n  ensure package exists in the output folder\r\n  $NON-NLS-1$\r\n  add dependents even when the package thinks it does not exist to be on the safe side\r\n  copy all other resource deltas to the output folder\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  ensure package exists in the output folder\r\n  just in case the original was read only\r\n  $NON-NLS-1$\r\n  skip it since it really isn't changed\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  ensure package exists in the output folder\r\n  just in case the original was read only\r\n  $NON-NLS-1$\r\n  perform full build if a managed class file has been changed\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  adding dependents results in 2 duplicate errors\r\n  $NON-NLS-1$\r\n  add dependents of the source file since it may be involved in a name collision\r\n  skip it if it failed to successfully define a type\r\n  defined a single type matching typePath\r\n  see bug 2857\r\n  skip it since it really isn't changed\r\n  $NON-NLS-1$\r\n  is not a nested type\r\n  $NON-NLS-1$\r\n  add dependents even when the type thinks it does not exist to be on the safe side\r\n  when member types are removed, their enclosing type is structurally changed\r\n  $NON-NLS-1$\r\n  delayed deleting secondary types until the end of the compile loop\r\n  cannot optimize recompile case when a secondary type is deleted, see 181269\r\n  new type\r\n  $NON-NLS-1$\r\n  file is defined by the same compilationUnit, but won't be deleted until later so do it now\r\n  catch the case that a type has been renamed and collides on disk with an as-yet-to-be-deleted type\r\n  rethrow\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  see 46093\r\n  If structural changes occurred then add dependent source files\r\n  bytes are identical so skip them\r\n  unable to determine location of this class file\r\n  $NON-NLS-1$\r\n  ignore local types since they're only visible inside a single method\r\n  $NON-NLS-1$\r\n","IDocElement":"org.aspectj.org.eclipse.jdt.core.dom.IDocElement","AnnotationGen":"copyValues read dump addElementNameValuePair getTypeIndex getTypeSignature getTypeName getValues toString toShortString isRuntimeVisible isRuntimeVisible hasNameValuePair hasNamedValue copyValues read dump addElementNameValuePair getTypeIndex getTypeSignature getTypeName getValues toString toShortString isRuntimeVisible isRuntimeVisible hasNameValuePair hasNamedValue NO_ANNOTATIONS typeIndex evs cpool isRuntimeVisible NO_ANNOTATIONS typeIndex evs cpool isRuntimeVisible org.aspectj.apache.bcel.classfile.annotation.AnnotationGen org.aspectj.apache.bcel.classfile.annotation.AnnotationGen  Only null for funky *temporary* FakeAnnotation objects\r\n  u2 index of type name in cpool\r\n  u2 element_value pair count\r\n  ConstantClass c = (ConstantClass)cpool.getConstant(typeIndex);\r\n  Only null for funky *temporary* FakeAnnotation objects\r\n  u2 index of type name in cpool\r\n  u2 element_value pair count\r\n  ConstantClass c = (ConstantClass)cpool.getConstant(typeIndex);\r\n /* ElementNameValuePairGen */\r\n /*ElementNameValuePairGen*/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * ******************************************************************/\r\n /* ElementNameValuePairGen */\r\n /*ElementNameValuePairGen*/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * ******************************************************************/\r\n","IVerificationTypeInfo":"getTag getOffset getConstantPoolIndex getClassTypeName ITEM_TOP ITEM_INTEGER ITEM_FLOAT ITEM_DOUBLE ITEM_LONG ITEM_NULL ITEM_UNINITIALIZED_THIS ITEM_OBJECT ITEM_UNINITIALIZED org.aspectj.org.eclipse.jdt.core.util.IVerificationTypeInfo","Traceable":"toTraceString toTraceString org.aspectj.weaver.tools.Traceable org.aspectj.weaver.tools.Traceable","Clinit":"analyseCode generateCode generateCode generateSyntheticCode generatePostSyntheticCode isClinit isInitializationMethod isStatic parseStatements print resolve traverse setAssertionSupport assertionSyntheticFieldBinding classLiteralSyntheticField org.aspectj.org.eclipse.jdt.internal.compiler.ast.Clinit  check for missing returning path\r\n  check missing blank final field initializations\r\n  check static initializers thrown exceptions\r\n  should never have to add any <clinit> problem method\r\n  produce a problem method accounting for this fatal error\r\n  request wide mode\r\n  a branch target required a goto_w, restart code gen in wide mode.\r\n  cases.\r\n  initialize local positions - including initializer scope.\r\n  }\r\n  generate static fields  $VALUES := new <EnumType>[<enumCount>]\r\n  $VALUES[i] = <enum-constant-i>\r\n  if fields that are not enum constants need to be generated (static initializer  AspectJ Extension\r\n  expand the last initializer variables to include the trailing return\r\n  Record the end of the clinit: point to the declaration of the class\r\n  so we reset the offset inside the byte array contents.\r\n  like we don't addd a method we need to undo the increment on the method count\r\n  reset the constant pool to its state before the clinit\r\n  generate code related to the activation of assertion for this class\r\n  AspectJ Extension\r\n  $NON-NLS-1$\r\n  see https:  we need to add the field right now, because the field infos are generated before the methods\r\n","NameEnvironment":"computeClasspathLocations cleanup createOutputFolder createParentFolder findClass findType findType isPackage isPackage setNames isIncrementalBuild sourceLocations binaryLocations notifier initialTypeNames additionalUnits org.aspectj.org.eclipse.jdt.internal.core.builder.NameEnvironment  assumed that each name is of the form \"a  if project doesn't have java nature or is not accessible\r\n  normal builder mode\r\n  is library folder not output folder\r\n  can be the project being built\r\n  now split the classpath locations... place the output folders ahead of the other .class file folders & jars\r\n  compare against previously walked source folders\r\n  also tag each source folder whose output folder is an independent folder & is not also a source folder\r\n  collect the output folders, skipping duplicates\r\n  combine the output folders with the binary folders & jars... place the output folders before other .class file folders & jars\r\n  catch the case that a type inside a source file has been renamed but other class files are looking for it\r\n  looking for a file which we know was provided at the beginning of the compilation\r\n  doesn't have file extension\r\n  $NON-NLS-1$\r\n  size of \".class\"\r\n  NOTE: the output folders are added at the beginning of the binaryLocations\r\n  remember suggestion and keep looking\r\n  no better answer was found\r\n  NOTE: the output folders are added at the beginning of the binaryLocations\r\n  convert the initial typeNames to a set\r\n  map the additional source files by qualified type name\r\n /* Update cycle marker */\r\n /* Some examples of resolved class path entries.\r\n* Remember to search class path in the order that it was defined.\r\n*\r\n* 1a. typical project with no source folders:\r\n*   /Test[CPE_SOURCE][K_SOURCE] -> D:/eclipse.test/Test\r\n* 1b. project with source folders:\r\n*   /Test/src1[CPE_SOURCE][K_SOURCE] -> D:/eclipse.test/Test/src1\r\n*   /Test/src2[CPE_SOURCE][K_SOURCE] -> D:/eclipse.test/Test/src2\r\n*  NOTE: These can be in any order & separated by prereq projects or libraries\r\n* 1c. project external to workspace (only detectable using getLocation()):\r\n*   /Test/src[CPE_SOURCE][K_SOURCE] -> d:/eclipse.zzz/src\r\n*  Need to search source folder & output folder\r\n*\r\n* 2. zip files:\r\n*   D:/j9/lib/jclMax/classes.zip[CPE_LIBRARY][K_BINARY][sourcePath:d:/j9/lib/jclMax/source/source.zip]\r\n*      -> D:/j9/lib/jclMax/classes.zip\r\n*  ALWAYS want to take the library path as is\r\n*\r\n* 3a. prereq project (regardless of whether it has a source or output folder):\r\n*   /Test[CPE_PROJECT][K_SOURCE] -> D:/eclipse.test/Test\r\n*  ALWAYS want to append the output folder & ONLY search for .class files\r\n*/\r\n","JavaModelStatus":"getBits getChildren getElements getMessage getPath getSeverity getString isDoesNotExist isMultiStatus isOK matches matches newMultiStatus toString elements path string NO_CHILDREN children VERIFIED_OK org.aspectj.org.eclipse.jdt.internal.core.JavaModelStatus  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","Pointcut":"getName getModifiers getParameterTypes getParameterNames getDeclaringType getPointcutExpression fastMatch couldMatchKinds getTypeVariablesInScope setTypeVariablesInScope match matchInternal getPointcutKind resolveBindings resolve concretize concretize isDeclare concretize shouldCopyLocationForConcretize concretize1 findResidue findResidueInternal postRead read check fromString findResidueInternal couldMatchKinds fastMatch matchInternal resolveBindings postRead concretize1 write toString accept parameterizeWith makeMatchesNothing assertState parameterizeWith getName getModifiers getParameterTypes getParameterNames getDeclaringType getPointcutExpression fastMatch couldMatchKinds getTypeVariablesInScope setTypeVariablesInScope match matchInternal getPointcutKind resolveBindings resolve concretize concretize isDeclare concretize shouldCopyLocationForConcretize concretize1 findResidue findResidueInternal postRead read check fromString findResidueInternal couldMatchKinds fastMatch matchInternal resolveBindings postRead concretize1 write toString accept parameterizeWith makeMatchesNothing assertState parameterizeWith m_ignoreUnboundBindingForNames SYMBOLIC RESOLVED CONCRETE pointcutKind state lastMatchedShadowId lastMatchedShadowResult typeVariablesInScope hasBeenParameterized KINDED WITHIN THIS_OR_TARGET ARGS AND OR NOT REFERENCE IF CFLOW WITHINCODE HANDLER IF_TRUE IF_FALSE ANNOTATION ATWITHIN ATWITHINCODE ATTHIS_OR_TARGET NONE ATARGS USER_EXTENSION m_ignoreUnboundBindingForNames SYMBOLIC RESOLVED CONCRETE pointcutKind state lastMatchedShadowId lastMatchedShadowResult typeVariablesInScope hasBeenParameterized KINDED WITHIN THIS_OR_TARGET ARGS AND OR NOT REFERENCE IF CFLOW WITHINCODE HANDLER IF_TRUE IF_FALSE ANNOTATION ATWITHIN ATWITHINCODE ATTHIS_OR_TARGET NONE ATARGS USER_EXTENSION org.aspectj.lang.reflect.Pointcut org.aspectj.weaver.patterns.Pointcut org.aspectj.lang.reflect.Pointcut org.aspectj.weaver.patterns.Pointcut  this next test will prevent a lot of un-needed matching going on....\r\n  DO NOT CHANGE OR REORDER THIS SEQUENCE, THIS VALUE CAN BE PUT OUT BY ASPECTJ1.2.1\r\n  internal, only called from resolve\r\n  copy the unbound ignore list\r\n  if (state == CONCRETE) return this;   XXX this is the signature we're moving to\r\n  ??? Is it actually an error if we get a null munger into this method.\r\n  !!! add this test -- assertState(RESOLVED);\r\n  copy the unbound ignore list\r\n  if (shadow.shadowId == lastMatchedShadowId) return lastMatchedShadowResidue;\r\n  lastMatchedShadowResidue = ret;\r\n  XXX currently it's unused  we're keeping it around as a stub\r\n  this is a quick visitor...\r\n  can only get here if an earlier error occurred\r\n  ??? there could possibly be some good optimizations to be done at this point\r\n  this next test will prevent a lot of un-needed matching going on....\r\n  DO NOT CHANGE OR REORDER THIS SEQUENCE, THIS VALUE CAN BE PUT OUT BY ASPECTJ1.2.1\r\n  internal, only called from resolve\r\n  copy the unbound ignore list\r\n  if (state == CONCRETE) return this;   XXX this is the signature we're moving to\r\n  ??? Is it actually an error if we get a null munger into this method.\r\n  !!! add this test -- assertState(RESOLVED);\r\n  copy the unbound ignore list\r\n  if (shadow.shadowId == lastMatchedShadowId) return lastMatchedShadowResidue;\r\n  lastMatchedShadowResidue = ret;\r\n  XXX currently it's unused  we're keeping it around as a stub\r\n  this is a quick visitor...\r\n  can only get here if an earlier error occurred\r\n  ??? there could possibly be some good optimizations to be done at this point\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","SetVariablesOperation":"executeOperation verbose_failure verbose_update_project verbose_set_variables variableNames variablePaths updatePreferences org.aspectj.org.eclipse.jdt.internal.core.SetVariablesOperation  $NON-NLS-1$\r\n  gather classpath information for updating\r\n  filter out unmodified variables\r\n  if reentering will provide previous session value\r\n  33695 - cannot filter out restored variable, must update affected project to reset cached CP\r\n  check to see if any of the modified variables is present on the classpath\r\n  update variables\r\n  propagate classpath change\r\n  force resolved classpath to be recomputed\r\n  if needed, generate delta, update project ref, create markers, ...\r\n  touch project to force a build if needed\r\n  update affected project classpaths\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n\t * Creates a new SetVariablesOperation for the given variable values (null path meaning removal), allowing to change multiple variable values at once.\r\n\t */\r\n","ConstructorLocator":"match match match match match match matchConstructor matchContainer matchLevelForReferences matchLevelForDeclarations matchParametersCount matchReportReference newDeclarationMatch resolveLevel referenceType resolveLevel resolveLevel resolveLevel resolveLevel resolveLevel toString pattern org.aspectj.org.eclipse.jdt.internal.core.search.matching.ConstructorLocator  interested in ExplicitConstructorCall\r\n  use the stronger match\r\n  interested in AllocationExpression\r\n  constructor name is simple type name\r\n  look only for enum constant\r\n  need to look for a generated default constructor\r\n  public int match(Reference node, MatchingNodeSet nodeSet) - SKIP IT\r\n  declaring type, simple name has already been matched by matchIndexEntry()\r\n  parameter types\r\n  int newLevel = resolveLevelForType(this.pattern.parameterSimpleNames[i], this.pattern.parameterQualifications[i], this.pattern.parametersTypeArguments[i], 0, constructor.parameters[i]);\r\n  }\r\n  can only be downgraded\r\n  handles both declarations + references & just references\r\n  declarations are only found in Class\r\n  constructor name is stored in selector field\r\n  Verify type arguments (do not reject if pattern has no argument as it can be an erasure match)\r\n  Create search match\r\n  binding has no type params, compatible erasure if pattern does\r\n  special case for constructor pattern which defines arguments but no type\r\n  Update match regarding declaring class type arguments\r\n  Update match regarding constructor type arguments\r\n  in this case, we do not use refined accuracy\r\n  Update match regarding declaring class type arguments\r\n  Look to refine accuracy\r\n  impossible match\r\n  Report match\r\n  enum declaration\r\n  super implementation...\r\n  constructor name is simple type name\r\n  only accept enum constants\r\n  eliminate explicit super call as it will be treated with matchLevel(ExplicitConstructorCall, boolean)\r\n  cannot get better\r\n  answer the stronger match\r\n  find default constructor\r\n  if synthetic\r\n  $NON-NLS-1$\r\n","CodeSnippetScope":"canBeSeenByForCodeSnippet canBeSeenByForCodeSnippet canBeSeenByForCodeSnippet findExactMethod findFieldForCodeSnippet findMethod findMethodForArray getBinding getConstructor getFieldForCodeSnippet getImplicitMethod org.aspectj.org.eclipse.jdt.internal.eval.CodeSnippetScope  OR the field is a static field accessed directly through a type\r\n  receiverType can be an array binding in one case... see if you can change it\r\n  see 1FMEPDL - return invocationSite.isTypeAccess();\r\n  AND the invocationType and the declaringClass have a common enclosingType\r\n  isDefault()\r\n  receiverType can be an array binding in one case... see if you can change it\r\n  OR the method is a static method accessed directly through a type\r\n  receiverType can be an array binding in one case... see if you can change it\r\n  see 1FMEPDL - return invocationSite.isTypeAccess();\r\n  AND the invocationType and the declaringClass have a common enclosingType\r\n  isDefault()\r\n  receiverType can be an array binding in one case... see if you can change it\r\n  protected types always have an enclosing one\r\n  of the receiverType or in the same package\r\n  already know they are not the identical type\r\n  isDefault()\r\n  Internal use only\r\n  collect all superinterfaces of receiverType until the field is found in a supertype\r\n  we could hold onto the not visible field for extra error reporting\r\n  if interface as not already been visited\r\n  walk all visible interfaces to find ambiguous references\r\n  Internal use only\r\n  handle the method clone() specially... cannot be protected or throw exceptions\r\n  answers closest approximation, may not check argumentTypes or visibility\r\n  Internal use only\r\n  must be a type if its the last name, otherwise we have no idea if its a package or type\r\n  It is illegal to request a PACKAGE from this method.\r\n  binding is now a field\r\n  know binding is now a ReferenceBinding\r\n  was looking for a field and found a field\r\n  was looking for a type and found a type\r\n  handle the case when a field or type was asked for but we resolved the compoundName to a type or field\r\n  need a more descriptive error... cannot convert from X to Y\r\n  retrieve an exact visible match (if possible)\r\n  skip it if we did not find anything\r\n /* Answer true if the receiver is visible to the type provided by the scope.\r\n* InvocationSite implements isSuperAccess() to provide additional information\r\n* if the receiver is protected.\r\n*\r\n* NOTE: Cannot invoke this method with a compilation unit scope.\r\n*/\r\n /* closest match*/\r\n","JavadocFieldReference":"internalResolveType isSuperAccess printExpression resolveType resolveType traverse traverse tagSourceStart tagSourceEnd tagValue methodBinding org.aspectj.org.eclipse.jdt.internal.compiler.ast.JavadocFieldReference  ignore problem if can reach target field through it\r\n  implicit lookup may discover issues due to static  no method was found: report problem\r\n  one method binding was found: store binding in specific field\r\n  several method binding were found: store first binding in specific field and report ambiguous error\r\n  When there's no valid field binding, try to resolve possible method reference without parenthesis\r\n /*\r\n\t * Resolves type on a Block or Class scope.\r\n\t */\r\n /* (non-Javadoc)\r\n\t * Redefine to capture javadoc specific signatures\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode#traverse(org.aspectj.org.eclipse.jdt.internal.compiler.ASTVisitor, org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BlockScope)\r\n\t */\r\n","CodeSnippetAllocationExpression":"generateCode manageEnclosingInstanceAccessIfNecessary manageSyntheticAccessIfNecessary resolveType evaluationContext delegateThis org.aspectj.org.eclipse.jdt.internal.eval.CodeSnippetAllocationExpression  private emulation using reflect\r\n  generate arguments\r\n  better highlight for allocation: display the type individually\r\n  handling innerclass instance allocation - enclosing instance arguments\r\n  generate the arguments for constructor\r\n  handling innerclass instance allocation - outer local arguments\r\n  invoke constructor\r\n  if constructor from parameterized type got found, use the original constructor at codegen time\r\n  Propagate the type checking to the arguments, and check if the constructor is defined.\r\n  will check for null after args are resolved\r\n  buffering the arguments' types\r\n  will check later on\r\n /* Inner emulation consists in either recording a dependency \r\n * link only, or performing one level of propagation.\r\n *\r\n * Dependency mechanism is used whenever dealing with source target\r\n * types, since by the time we reach them, we might not yet know their\r\n * exact need.\r\n */\r\n","ISourceReference":"exists getSource getSourceRange org.aspectj.org.eclipse.jdt.core.ISourceReference","ISourceContext":"makeSourceLocation makeSourceLocation getOffset tidy makeSourceLocation makeSourceLocation getOffset tidy org.aspectj.weaver.ISourceContext org.aspectj.weaver.ISourceContext /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","ByteSequence":"getIndex unreadByte getPosition unreadByte getIndex unreadByte getPosition unreadByte byte_stream byte_stream org.aspectj.apache.bcel.util.ByteSequence org.aspectj.apache.bcel.util.ByteSequence  is protected in ByteArrayInputStream\r\n  is protected in ByteArrayInputStream\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n","InternalSearchDocument":"addIndexEntry getContainerRelativePath removeAllIndexEntries getPath index containerRelativePath parser org.aspectj.org.eclipse.jdt.internal.core.search.indexing.InternalSearchDocument  implemented by subclass\r\n /*\r\n\t * Hidden by API SearchDocument subclass\r\n\t */\r\n /*\r\n\t * Hidden by API SearchDocument subclass\r\n\t */\r\n /*\r\n\t * Hidden by API SearchDocument subclass\r\n\t */\r\n","ToolFactory":"createCodeFormatter createCodeFormatter createCodeFormatter createDefaultClassFileBytesDisassembler createDefaultClassFileDisassembler createDefaultClassFileReader createDefaultClassFileReader createDefaultClassFileReader createDefaultClassFileReader createDefaultCodeFormatter createScanner createScanner createScanner M_FORMAT_NEW M_FORMAT_EXISTING org.aspectj.org.eclipse.jdt.core.ToolFactory  $NON-NLS-1$\r\n  use first contribution found\r\n  no proper contribution found, use default formatter\r\n  disable the option for not indenting comments starting on first column\r\n  $NON-NLS-1$\t  fault-tolerance\r\n  fault-tolerance\r\n  fault-tolerance\r\n /*nls*/\r\n /*sourceLevel*/\r\n /*taskTags*/\r\n /*taskPriorities*/\r\n /*nls*/\r\n /*sourceLevel*/\r\n /*taskTags*/\r\n /*taskPriorities*/\r\n /*nls*/\r\n /*sourceLevel*/\r\n /*taskTags*/\r\n /*taskPriorities*/\r\n","VerificationInfo":"getTag getOffset getConstantPoolIndex getClassTypeName sizeInBytes tag offset constantPoolIndex classTypeName readOffset org.aspectj.org.eclipse.jdt.internal.core.util.VerificationInfo","AjBatchImageBuilder":"acceptResult org.aspectj.ajdt.internal.core.builder.AjBatchImageBuilder /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.ICompilerRequestor#acceptResult(org.eclipse.jdt.internal.compiler.CompilationResult)\r\n\t */\r\n","DeclarationFactory":"createMethodDeclaration createConstructorDeclaration createProceed createAspect setPrivileged setPerClauseFrom setDominatesPatternFrom createPseudoTokensFrom createPointcutDeclaration createAroundAdviceDeclaration createAfterAdviceDeclaration createBeforeAdviceDeclaration createPointcutDesignator setPointcutDesignatorOnAdvice setPointcutDesignatorOnPointcut setExtraArgument isAfterAdvice setAfterThrowingAdviceKind setAfterReturningAdviceKind createDeclareDeclaration createDeclareAnnotationDeclaration createInterTypeFieldDeclaration createInterTypeMethodDeclaration createInterTypeConstructorDeclaration setSelector setDeclaredModifiers setInitialization setOnType createPseudoToken createIfPseudoToken setLiteralKind shouldTryToRecover org.aspectj.ajdt.internal.compiler.parser.DeclarationFactory  For the ast support: currently the below line is not finished! The start is set incorrectly\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#createMethodDeclaration(org.eclipse.jdt.internal.compiler.CompilationResult)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#createConstructorDeclaration(org.eclipse.jdt.internal.compiler.CompilationResult)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#createProceed(org.eclipse.jdt.internal.compiler.ast.MessageSend)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#createAspect(org.eclipse.jdt.internal.compiler.CompilationResult)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#setPrivileged(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration, boolean)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#setPerClauseFrom(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration, org.eclipse.jdt.internal.compiler.ast.ASTNode)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#setDominatesPatternFrom(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration, org.eclipse.jdt.internal.compiler.ast.ASTNode)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#createPseudoTokensFrom(org.eclipse.jdt.internal.compiler.ast.ASTNode[], org.eclipse.jdt.internal.compiler.CompilationResult)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#createPointcutDeclaration(org.eclipse.jdt.internal.compiler.CompilationResult)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#createAroundAdviceDeclaration(org.eclipse.jdt.internal.compiler.CompilationResult)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#createAfterAdviceDeclaration(org.eclipse.jdt.internal.compiler.CompilationResult)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#createBeforeAdviceDeclaration(org.eclipse.jdt.internal.compiler.CompilationResult)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#createPointcutDesignator(org.eclipse.jdt.internal.compiler.parser.Parser, org.eclipse.jdt.internal.compiler.ast.ASTNode)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#setPointcutDesignator(org.eclipse.jdt.internal.compiler.ast.MethodDeclaration, org.eclipse.jdt.internal.compiler.ast.ASTNode)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#setPointcutDesignator(org.eclipse.jdt.internal.compiler.ast.MethodDeclaration, org.eclipse.jdt.internal.compiler.ast.ASTNode)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#setExtraArgument(org.eclipse.jdt.internal.compiler.ast.MethodDeclaration, org.eclipse.jdt.internal.compiler.ast.Argument)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#isAfterAdvice(org.eclipse.jdt.internal.compiler.ast.MethodDeclaration)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#setAfterThrowingAdviceKind(org.eclipse.jdt.internal.compiler.ast.MethodDeclaration)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#setAfterReturningAdviceKind(org.eclipse.jdt.internal.compiler.ast.MethodDeclaration)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#createDeclareDeclaration(org.eclipse.jdt.internal.compiler.CompilationResult, org.eclipse.jdt.internal.compiler.ast.ASTNode)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#createDeclareAnnotationDeclaration(org.aspectj.org.eclipse.jdt.internal.compiler.CompilationResult, org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode, org.aspectj.org.eclipse.jdt.internal.compiler.ast.Annotation, org.aspectj.org.eclipse.jdt.internal.compiler.parser.Parser)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#createInterTypeFieldDeclaration(org.eclipse.jdt.internal.compiler.CompilationResult, org.eclipse.jdt.internal.compiler.ast.TypeReference)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#createInterTypeMethodDeclaration(org.eclipse.jdt.internal.compiler.CompilationResult)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#createInterTypeConstructorDeclaration(org.eclipse.jdt.internal.compiler.CompilationResult)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#setSelector(org.eclipse.jdt.internal.compiler.ast.MethodDeclaration, char[])\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#setDeclaredModifiers(org.eclipse.jdt.internal.compiler.ast.MethodDeclaration, int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#setInitialization(org.eclipse.jdt.internal.compiler.ast.MethodDeclaration, org.eclipse.jdt.internal.compiler.ast.Expression)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#setOnType(org.eclipse.jdt.internal.compiler.ast.MethodDeclaration, org.eclipse.jdt.internal.compiler.ast.TypeReference)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#createPseudoToken(org.eclipse.jdt.internal.compiler.parser.Parser, java.lang.String, boolean)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#createIfPseudoToken(org.eclipse.jdt.internal.compiler.parser.Parser, org.eclipse.jdt.internal.compiler.ast.Expression)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#setLiteralKind(org.eclipse.jdt.internal.compiler.ast.ASTNode, java.lang.String)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.parser.Parser.IDeclarationFactory#shouldTryToRecover(org.eclipse.jdt.internal.compiler.ast.ASTNode)\r\n\t */\r\n","SwitchStatement":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty internalGetChildListProperty getNodeType0 clone0 subtreeMatch0 accept0 getExpression setExpression statements memSize treeSize analyseCode generateCode printStatement resolve traverse branchChainTo EXPRESSION_PROPERTY STATEMENTS_PROPERTY PROPERTY_DESCRIPTORS expression statements expression statements scope explicitDeclarations breakLabel cases defaultCase blockStart caseCount constants CASE FALLTHROUGH ESCAPING synthetic preSwitchInitStateIndex mergedInitStateIndex org.aspectj.org.eclipse.jdt.core.dom.SwitchStatement org.aspectj.org.eclipse.jdt.internal.compiler.ast.SwitchStatement  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  fallthrough\r\n  use for switch on enums types\r\n  for local variables table attributes\r\n  no longer inside switch case block\r\n  to the entry point)\r\n  in case of statements before the first case\r\n  reset below if needed\r\n  record entering in a switch case block\r\n  reset complaint\r\n  record entering in a switch case block\r\n  the case is not fall-through protected by a line comment\r\n  reset complaint\r\n  AspectJ Extension, was: this.scope.classScope().referenceContext.binding;, see pr108370\r\n  only retain the potential initializations\r\n  if no default case, then record it may jump over the block directly to the end\r\n  merge all branches inits\r\n  no longer inside switch case block\r\n  prepare the labels and constants\r\n  value required (switch without cases)\r\n  no need to go through the translation table\r\n  go through the translation table\r\n  get enum constant ordinal()\r\n  we sort the keys to be able to generate the code for tableswitch or lookupswitch\r\n  see http:  generate the appropriate switch table  generate the switch block statements\r\n  record entering in a switch case block\r\n  record entering in a switch case block\r\n  May loose some local variable initializations : affecting the local variable attributes\r\n  place the trailing labels (for break and default case)\r\n  we want to force an line number entry to get an end position after the switch statement\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  no longer inside switch case block\r\n  fault-tolerance: ignore type mismatch from constants from hereon\r\n  collection of cases is too big but we will only iterate until caseCount\r\n  ----check for duplicate case statement------------\r\n  resize constants array\r\n  could be null if no case statement\r\n  ignore diagnosis if unresolved constants\r\n  zero should not be returned see bug 141810\r\n  enum constant did not get referenced from switch\r\n  for enum switch, check if all constants are accounted for (if no default)\r\n  we know at this point that the breakLabel already got placed\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /*explicitDeclarations == 0 ? upperScope : */\r\n","ValidateAtAspectJAnnotationsVisitor":"visit endVisit visit endVisit visit endVisit checkTypeDeclaration visit visit insideAspect isAspect validateAspectDeclaration validateAdvice toArgumentNames resolveAndSetPointcut ensureVoidReturnType buildFormalAdviceBindingsFrom maybeGetExtraArgName getStringLiteralFor convertToPointcutDeclaration copyAllFields swap hasAspectJAnnotations addAdviceAnnotation visit beforeAdviceSig afterAdviceSig afterReturningAdviceSig afterThrowingAdviceSig aroundAdviceSig pointcutSig aspectSig declareParentsSig adviceNameSig voidType booleanType joinPoint joinPointStaticPart joinPointEnclosingStaticPart proceedingJoinPoint unit typeStack ajAnnotations hasAdviceAnnotation hasPointcutAnnotation hasAspectAnnotation hasAdviceNameAnnotation hasDeclareParents hasMultipleAdviceAnnotations hasMultiplePointcutAnnotations hasMultipleAspectAnnotations adviceKind adviceAnnotation pointcutAnnotation aspectAnnotation adviceNameAnnotation duplicateAdviceAnnotation duplicatePointcutAnnotation duplicateAspectAnnotation containsIfPcd org.aspectj.ajdt.internal.compiler.ast.ValidateAtAspectJAnnotationsVisitor  private static final char[] orgAspectJLangAnnotation = \"org  check that aspect doesn't have @Aspect annotation, we've already added on ourselves.\r\n  check that class doesn't extend aspect\r\n  simply test for innapropriate use of annotations on code-style members\r\n  it's a nested aspect\r\n  SourceTypeBinding)\r\n  Argument[] arguments = methodDeclaration.arguments;\r\n  now create a ResolvedPointcutDefinition,make an attribute out of it, and add it to the method\r\n  abstract\r\n  matches nothing pointcut\r\n  int argsLength = methodDeclaration.arguments == null ? 0 : methodDeclaration.arguments.length;\r\n  }\r\n  has an expression\r\n  this is a matches nothing pointcut\r\n  && (methodDeclaration.arguments == null || methodDeclaration.arguments.length == 0)) {\r\n  user messed up annotation declaration\r\n /* *******************************************************************\r\n * Copyright (c) 2005 IBM Corporation Ltd\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Adrian Colyer  initial implementation \r\n * ******************************************************************/\r\n","WeaverAdapter":"getClassFileIterator getRequestor isApplyAtAspectJMungersOnly hasNext next remove processingReweavableState addingTypeMungers weavingAspects weavingClasses weaveCompleted acceptResult finishedWith removeFromMap recordProgress compilerAdapter resultIterator classFileIndex nowProcessing lastReturnedResult weaverMessageHandler progressListener finalPhase localIteratorCounter progressMaxTypes progressPhasePrefix fromPercent toPercent progressCompletionCount org.aspectj.ajdt.internal.compiler.WeaverAdapter  Fields related to progress monitoring\r\n  sets up indices correctly\r\n  we're done with the lastReturnedResult\r\n  weaverMessageHandler.handleMessage(new Message(\"weaving \" + nowProcessing.fileName(),IMessage.INFO, null, null));\r\n  Assume weaving takes 50% of the progress bar...\r\n  weave phases as indicated by bcelWeaver...\r\n  recordProgress(\"adding type mungers\");\r\n  progress reporting logic\r\n  Start counting from *now*\r\n  progress reporting logic\r\n  Smoothly take progress from 'fromPercent' to 'toPercent'\r\n  OPTIMIZE what is this code for?\r\n  if (skey.equals(new String(thisKey))) {\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.IClassFileProvider#getClassFileIterator()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.IClassFileProvider#getRequestor()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see java.util.Iterator#hasNext()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see java.util.Iterator#next()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see java.util.Iterator#remove()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.IWeaveRequestor#acceptResult(org.aspectj.weaver.bcel.UnwovenClassFile)\r\n\t */\r\n","AsmManager":"createNewASM getHierarchy getDefault getRelationshipMap fireModelUpdated getInlineAnnotations getAllStructureChildren addListener removeStructureListener removeAllListeners notifyListeners getHandleProvider setHandleProvider writeStructureModel readStructureModel genExternFilePath getCanonicalFilePath get setReporting setReporting isReporting setDontReport reportModelInfo dumptree dumptree dumprels dumprelsStderr removeStructureModelForFiles fixupStructureModel processDelta removeRelationshipsTargettingThisType sameType repairRelationships removeSingleNode removeNode verifyAssumption verifyAssumption walkModel countNode toString getProperties recordStat summarizeModel setCreatingModel isCreatingModel setCompletingTypeBindings isCompletingTypeBindings setRelationshipMap setHierarchy resetDeltaProcessing getModelChangesOnLastBuild getAspectsWeavingFilesOnLastBuild addAspectInEffectThisBuild createNewASM getHierarchy getDefault getRelationshipMap fireModelUpdated getInlineAnnotations getAllStructureChildren addListener removeStructureListener removeAllListeners notifyListeners getHandleProvider setHandleProvider writeStructureModel readStructureModel genExternFilePath getCanonicalFilePath get setReporting setReporting isReporting setDontReport reportModelInfo dumptree dumptree dumprels dumprelsStderr removeStructureModelForFiles fixupStructureModel processDelta removeRelationshipsTargettingThisType sameType repairRelationships removeSingleNode removeNode verifyAssumption verifyAssumption walkModel countNode toString getProperties recordStat summarizeModel setCreatingModel isCreatingModel setCompletingTypeBindings isCompletingTypeBindings setRelationshipMap setHierarchy resetDeltaProcessing getModelChangesOnLastBuild getAspectsWeavingFilesOnLastBuild addAspectInEffectThisBuild instance handleProvider structureListeners hierarchy mapper creatingModel dumpModelPostBuild attemptIncrementalModelRepairs dumpModel dumpRelationships dumpDeltaProcessing modelFilter dumpFilename reporting completingTypeBindings canonicalFilePathMap lastBuildChanges aspectsWeavingInLastBuild MAX_SIZE pathMap nodeTypeCount extraProperties instance handleProvider structureListeners hierarchy mapper creatingModel dumpModelPostBuild attemptIncrementalModelRepairs dumpModel dumpRelationships dumpDeltaProcessing modelFilter dumpFilename reporting completingTypeBindings canonicalFilePathMap lastBuildChanges aspectsWeavingInLastBuild MAX_SIZE pathMap nodeTypeCount extraProperties org.aspectj.asm.AsmManager org.aspectj.asm.AsmManager  between projects.\r\n  Dumping the model is\r\n  fool\r\n  dump the model - see the method setReporting()\r\n  last incremental build\r\n  Record the Set<File> of aspects that wove the files listed in lastBuildChanges\r\n  to give handleProviders the chance to reset any state\r\n  back to executing at a reasonable speed.\r\n  Store the program element tree\r\n  Store the relationships\r\n  That is OK\r\n  Might be an old format sym file that is missing its relationships\r\n  e.printStackTrace();\r\n  sometimes don't have \".lst\"\r\n  }\r\n  SECRETAPI\r\n  testcases test that both the model and relationship map are correct.\r\n  Found it, let's remove it\r\n  List files = config.getFiles();\r\n  Found it, let's remove it\r\n  bugs in binary weaving.\r\n  Are we recording this ?\r\n  Let's remove all the files that are deleted on this compile\r\n  etime1-stime = time to\r\n  etime2-stime = time to\r\n  fw.write(\"Target handles processed=\"+tgthandlecounter+\"\\n\");\r\n  (-proceedOnError probably forced us to weave)\r\n  when the type is woven)\r\n  worth continuing as there may be a relationship to remove\r\n  these relationships are added at compile\r\n  we want 'affected by' relationships - (e.g.\r\n  time, argh\r\n  all the relationships can\r\n  and so need removing for this source handle\r\n  \"  source handle: all relationships have gone for \"+hid);\r\n  If the relationship was hanging off a 'code' node, delete it.\r\n  Remove sources that have no valid relationships any more\r\n  did we do anything?\r\n  removing 'affects' relationships\r\n  Iterate over the source handles in the relationships map\r\n  these relationships are added at compile\r\n  time, argh\r\n  Does this point to the same type?\r\n  they need removing\r\n  Remove all the targets that are no longer valid\r\n  source handle?\r\n  and so need removing for this source handle\r\n  \"  source handle: all relationships have gone for \"+hid);\r\n  it.\r\n  Remove sources that have no valid relationships any more\r\n  these four possibilities should really be FIXED\r\n  file...\r\n  so we don't have this situation\r\n  containingType);\r\n  inside that file cannot exist.\r\n  Now sort out the relationships map\r\n  Cache of handles that we\r\n  *know* are invalid\r\n  These are source handles\r\n  We better check if it actually exists\r\n  Ok, so the source is valid, what about the targets?\r\n  We better check\r\n  Do we already know it doesn't exist?\r\n  Iterate through the targets for this relationship\r\n  valid\r\n  TODO\r\n  but lets double check ...\r\n  relationship (i.e. removing the relationship)\r\n  Do we have some targets that need removing?\r\n  handle\r\n  relationships !!\r\n  delete the source handle.\r\n  this source handle?\r\n  handle\r\n  No, so delete this relationship\r\n  Speed up a bit you swine\r\n  Did we find it?\r\n  Do we already know this handle points to nowhere?\r\n  System.err.println(\"Deleting code node\");\r\n  it.\r\n  Remove sources that have no valid relationships any more\r\n  System.err.println(flightrecorder.toString());\r\n  boolean deleteOK = false;\r\n  flightrecorder.append(\"Parent of it is \"+parent+\"\\n\");\r\n  deleteOK=true;\r\n  flightrecorder.append(\"Comparing with \"+kids.get(i)+\"\\n\");\r\n  flightrecorder.append(\"Which has \"+kids.size()+\" kids\\n\");\r\n  System.err.println(\"Deleting parent:\"+parent);\r\n  Are there any kids left for this node?\r\n  StringBuffer flightrecorder = new StringBuffer();\r\n  between projects.\r\n  Dumping the model is\r\n  fool\r\n  dump the model - see the method setReporting()\r\n  last incremental build\r\n  Record the Set<File> of aspects that wove the files listed in lastBuildChanges\r\n  to give handleProviders the chance to reset any state\r\n  back to executing at a reasonable speed.\r\n  Store the program element tree\r\n  Store the relationships\r\n  That is OK\r\n  Might be an old format sym file that is missing its relationships\r\n  e.printStackTrace();\r\n  sometimes don't have \".lst\"\r\n  }\r\n  SECRETAPI\r\n  testcases test that both the model and relationship map are correct.\r\n  Found it, let's remove it\r\n  List files = config.getFiles();\r\n  Found it, let's remove it\r\n  bugs in binary weaving.\r\n  Are we recording this ?\r\n  Let's remove all the files that are deleted on this compile\r\n  etime1-stime = time to\r\n  etime2-stime = time to\r\n  fw.write(\"Target handles processed=\"+tgthandlecounter+\"\\n\");\r\n  (-proceedOnError probably forced us to weave)\r\n  when the type is woven)\r\n  worth continuing as there may be a relationship to remove\r\n  these relationships are added at compile\r\n  we want 'affected by' relationships - (e.g.\r\n  time, argh\r\n  all the relationships can\r\n  and so need removing for this source handle\r\n  \"  source handle: all relationships have gone for \"+hid);\r\n  If the relationship was hanging off a 'code' node, delete it.\r\n  Remove sources that have no valid relationships any more\r\n  did we do anything?\r\n  removing 'affects' relationships\r\n  Iterate over the source handles in the relationships map\r\n  these relationships are added at compile\r\n  time, argh\r\n  Does this point to the same type?\r\n  they need removing\r\n  Remove all the targets that are no longer valid\r\n  source handle?\r\n  and so need removing for this source handle\r\n  \"  source handle: all relationships have gone for \"+hid);\r\n  it.\r\n  Remove sources that have no valid relationships any more\r\n  these four possibilities should really be FIXED\r\n  file...\r\n  so we don't have this situation\r\n  containingType);\r\n  inside that file cannot exist.\r\n  Now sort out the relationships map\r\n  Cache of handles that we\r\n  *know* are invalid\r\n  These are source handles\r\n  We better check if it actually exists\r\n  Ok, so the source is valid, what about the targets?\r\n  We better check\r\n  Do we already know it doesn't exist?\r\n  Iterate through the targets for this relationship\r\n  valid\r\n  TODO\r\n  but lets double check ...\r\n  relationship (i.e. removing the relationship)\r\n  Do we have some targets that need removing?\r\n  handle\r\n  relationships !!\r\n  delete the source handle.\r\n  this source handle?\r\n  handle\r\n  No, so delete this relationship\r\n  Speed up a bit you swine\r\n  Did we find it?\r\n  Do we already know this handle points to nowhere?\r\n  System.err.println(\"Deleting code node\");\r\n  it.\r\n  Remove sources that have no valid relationships any more\r\n  System.err.println(flightrecorder.toString());\r\n  boolean deleteOK = false;\r\n  flightrecorder.append(\"Parent of it is \"+parent+\"\\n\");\r\n  deleteOK=true;\r\n  flightrecorder.append(\"Comparing with \"+kids.get(i)+\"\\n\");\r\n  flightrecorder.append(\"Which has \"+kids.size()+\" kids\\n\");\r\n  System.err.println(\"Deleting parent:\"+parent);\r\n  Are there any kids left for this node?\r\n  StringBuffer flightrecorder = new StringBuffer();\r\n /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n *    Andy Clement     incremental support and switch on/off state\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n *    Andy Clement     incremental support and switch on/off state\r\n * ******************************************************************/\r\n","TypeNameRequestorWrapper":"acceptType requestor org.aspectj.org.eclipse.jdt.internal.core.search.TypeNameRequestorWrapper","CompilerMessagesCellRenderer":"getListCellRendererComponent serialVersionUID org.aspectj.ajde.ui.swing.CompilerMessagesCellRenderer /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation\r\n *     Helen Hawkins  Converted to new interface (bug 148190)  \r\n * ******************************************************************/\r\n","ToStringSorter":"compare quickSort sort sortedObjects sortedStrings org.aspectj.org.eclipse.jdt.internal.core.util.ToStringSorter  copy the array so can return a new sorted collection\r\n","AnnotationDefault":"copy getElementValue dump accept copy getElementValue dump accept value value org.aspectj.apache.bcel.classfile.AnnotationDefault org.aspectj.apache.bcel.classfile.AnnotationDefault /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * ******************************************************************/\r\n","CompletionOnStringLiteral":"resolveType resolveType printExpression contentStart contentEnd org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnStringLiteral  $NON-NLS-1$\r\n","AbstractCompilerAdapter":"getResultsPendingWeave acceptResult afterAnalysing afterCompiling afterDietParsing afterGenerating afterProcessing afterResolving beforeAnalysing beforeCompiling beforeGenerating beforeProcessing beforeResolving org.aspectj.ajdt.internal.compiler.AbstractCompilerAdapter /*InterimResult*/\r\n /* *******************************************************************\r\n * Copyright (c) 2006 Contributors\r\n * All rights reserved.\r\n * This program and the accompanying materials are made available\r\n * under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *     Andy Clement                 initial implementation\r\n * ******************************************************************/\r\n","DefaultTraceFactory":"isEnabled getTrace isEnabled getTrace ENABLED_PROPERTY FILE_PROPERTY tracingEnabled print ENABLED_PROPERTY FILE_PROPERTY tracingEnabled print org.aspectj.weaver.tools.DefaultTraceFactory org.aspectj.weaver.tools.DefaultTraceFactory","ClassFileAttribute":"getAttributeNameIndex getAttributeName getAttributeLength NO_ATTRIBUTES attributeLength attributeNameIndex attributeName org.aspectj.org.eclipse.jdt.internal.core.util.ClassFileAttribute","DefaultWeavingContext":"getResources getBundleIdFromURL getClassLoaderName getClassLoader getFile getId getSuffix isLocallyDefined getDefinitions getResources getBundleIdFromURL getClassLoaderName getClassLoader getFile getId getSuffix isLocallyDefined getDefinitions loaderRef shortName trace loaderRef shortName trace org.aspectj.weaver.loadtime.DefaultWeavingContext org.aspectj.weaver.loadtime.DefaultWeavingContext","ConfigParser":"getFiles parseCommandLine parseConfigFile parseConfigFileHelper getCurrentDir stripSingleLineComment stripWhitespaceAndComments addFile addFileOrPattern addFiles parseOption showWarning showError parseArgs removeArg removeStringArg isSourceFileName parseOneArg parseImportedConfigFile makeFile makeFile setValue setLocation getValue getLocation getFile getDirectory getLine toString getFile getDirectory getLine toString getFile getDirectory getLine toString getLine getFile location relativeDirectory files fileParsed CONFIG_MSG location value line file location org.aspectj.ajdt.ajc.ConfigParser  for nested arg files;\r\n  }\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","IOutputLocationManager":"getOutputLocationForClass getSourceFolderForFile getOutputLocationForResource getAllOutputLocations getDefaultOutputLocation org.aspectj.ajde.core.IOutputLocationManager /*File*/\r\n","PatternLocator":"patternLocator qualifiedPattern qualifiedSourceName clear getQualifiedPattern getQualifiedSourceName getTypeNameBinding initializePolymorphicSearch match match match match match match match match match match match match match matchContainer matchesName matchNameValue matchesTypeReference matchLevel matchLevelAndReportImportRef matchReportImportRef matchReportReference matchReportReference matchReportReference newDeclarationMatch referenceType resolveLevel updateMatch updateMatch updateMatch resolveLevel resolveLevelForType resolveLevelForType resolveLevelForType toString matchMode isCaseSensitive isCamelCase isEquivalentMatch isErasureMatch mustResolve mayBeGeneric match IMPOSSIBLE_MATCH INACCURATE_MATCH POSSIBLE_MATCH ACCURATE_MATCH ERASURE_MATCH EXACT_FLAVOR PREFIX_FLAVOR PATTERN_FLAVOR REGEXP_FLAVOR CAMELCASE_FLAVOR SUPER_INVOCATION_FLAVOR SUB_INVOCATION_FLAVOR OVERRIDDEN_METHOD_FLAVOR MATCH_LEVEL_MASK FLAVORS_MASK COMPILATION_UNIT_CONTAINER CLASS_CONTAINER METHOD_CONTAINER FIELD_CONTAINER ALL_CONTAINER RAW_MASK RULE_MASK org.aspectj.org.eclipse.jdt.internal.core.search.matching.PatternLocator  store pattern info\r\n  match to report\r\n  see bug https:  no other values for the while...\r\n  NOTE: if case insensitive search then simpleNamePattern & qualificationPattern are assumed to be lowercase\r\n  NOTE: if case insensitive search then simpleNamePattern & qualificationPattern are assumed to be lowercase\r\n  each subtype should override if needed\r\n  each subtype should override if needed\r\n  each subtype should override if needed\r\n  each subtype should override if needed\r\n  each subtype should override if needed\r\n  each subtype should override if needed\r\n  each subtype should override if needed\r\n  each subtype should override if needed\r\n  each subtype should override if needed\r\n  each subtype should override if needed\r\n  each subtype should override if needed\r\n  each subtype should override if needed\r\n  each subtype should override if needed\r\n  override if the pattern can be more specific\r\n  null is as if it was \"*\"\r\n  cannot match null name\r\n  null is as if it was \"*\"\r\n  cannot match null name\r\n  need to have both name and pattern length==0 to be accurate\r\n  can only matches empty pattern\r\n  empty name\r\n  fall through next case to match as prefix if camel case failed\r\n  TODO (frederic) implement regular expression match\r\n  null is as if it was \"*\"\r\n  treat as an inexact match\r\n  override if interested in import references which are caught by the generic version of match(ASTNode, MatchingNodeSet)\r\n  default is to report a match as a regular ref.\r\n  defaults to unknown (a generic JavaSearchMatch will be created)\r\n  need to do instance of checks to find out exact type of ASTNode\r\n  Only possible if locator has an unit scope.\r\n  Only possible if locator has an unit scope.\r\n  Set match raw flag\r\n  verify if this is a reference to the generic type itself\r\n  Update match\r\n  Recurse\r\n  Only possible if locator has an unit scope.\r\n  First compare lengthes\r\n  Initialize match rule\r\n  impossible match\r\n  raw binding is always compatible\r\n  generic patterns are always not compatible match\r\n  Compare arguments lengthes\r\n  Get parameterized type argument binding\r\n  Get binding for pattern argument\r\n  unbound parameter always match\r\n  If have no binding for pattern arg, then we won't be able to refine accuracy\r\n  UNBOUND pattern\r\n  unbound always match => skip to next argument\r\n  EXTENDS pattern\r\n  valid when arg is a subclass of pattern\r\n  argument is a wildcard\r\n  It's ok if wildcards are identical\r\n  valid when arg extends a subclass of pattern\r\n  Look for wildcard compatibility\r\n  SUPER pattern\r\n  valid only when arg is a superclass of pattern\r\n  argument is a wildcard\r\n  It's ok if wildcards are identical\r\n  valid only when arg super a superclass of pattern\r\n  Look for wildcard compatibility\r\n  valid only when arg is equals to pattern\r\n  valid only when arg extends a superclass of pattern\r\n  valid only when arg super a subclass of pattern\r\n  Verify tha pattern binding is compatible with match type argument binding\r\n  Argument does not match => erasure match will be the only possible one\r\n  Compare binding for each type argument only if pattern is not erasure only and at first level\r\n  Set match rule\r\n  override if the pattern can match the binding\r\n  return resolveLevelForType(qualifiedPattern(simpleNamePattern, qualificationPattern), type);\r\n  Type variable cannot be specified through pattern => this kind of binding cannot match it (see bug 79803)\r\n  standard search with no generic additional information must succeed\r\n  if pattern is erasure match (see bug 79790), commute impossible to erasure\r\n  cannot match pattern with type parameters or arguments\r\n  type parameters length must match at least specified type names length\r\n  unbound parameter always match\r\n  needs pattern type parameter binding\r\n  skip to next type argument as it will be resolved later\r\n  remove wildcard from patter type argument\r\n  no wildcard\r\n  get corresponding pattern wildcard\r\n  get pattern type argument from its signature\r\n  ...special case for wildcard\r\n  Invalid if type argument is not exact\r\n  there's no bound name to match => valid\r\n  Look if bound name match pattern type argument\r\n  found name in hierarchy => match\r\n  If pattern is not exact then match fails\r\n  Look for bound name in type argument superclasses\r\n  for local or member type, verify also source name (bug 81084)\r\n  found name in hierarchy => match\r\n  for local or member type, verify also source name (bug 81084)\r\n  See if names match\r\n  If pattern is not exact then match fails\r\n  Scan hierarchy\r\n  for local or member type, verify also source name (bug 81084)\r\n  found name in hierarchy => match\r\n  verify each pattern type parameter\r\n  Compare arguments only if there ones on both sides\r\n  Recurse on enclosing type\r\n  raw type always match\r\n  Binding is generic, get its type variable(s)\r\n  TODO (frederic) verify performance\r\n  we can't do better\r\n  pattern has type parameter(s) or type argument(s)\r\n  $NON-NLS-1$\r\n /* match levels */\r\n /* match container */\r\n /* match rule */\r\n /*\r\n * Clear caches\r\n */\r\n /* (non-Javadoc)\r\n * Modify PatternLocator.qualifiedPattern behavior:\r\n * do not add star before simple name pattern when qualification pattern is null.\r\n * This avoid to match p.X when pattern is only X...\r\n */\r\n /* (non-Javadoc)\r\n * Modify PatternLocator.qualifiedSourceName behavior:\r\n * also concatene enclosing type name when type is a only a member type.\r\n */\r\n /*\r\n * Get binding of type argument from a class unit scope and its index position.\r\n * Cache is lazy initialized and if no binding is found, then store a problem binding\r\n * to avoid making research twice...\r\n */\r\n /*no binding*/\r\n /*\r\n * Update pattern locator match for parameterized top level types.\r\n * Set match raw flag and recurse to enclosing types if any...\r\n */\r\n /*\r\n * Update pattern locator match comparing type arguments with pattern ones.\r\n * Try to resolve pattern and look for compatibility with type arguments\r\n * to set match rule.\r\n */\r\n /* (non-Javadoc)\r\n * Resolve level for type with a given binding with all pattern information.\r\n */\r\n","MatchingContextBasedTest":"accept matches accept matches matcher matcher org.aspectj.weaver.internal.tools.MatchingContextBasedTest org.aspectj.weaver.internal.tools.MatchingContextBasedTest /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.ast.Test#accept(org.aspectj.weaver.ast.ITestVisitor)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.ast.Test#accept(org.aspectj.weaver.ast.ITestVisitor)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","ConstantNameAndType":"accept dump getNameIndex getName getSignatureIndex getSignature setNameIndex setSignatureIndex toString accept dump getNameIndex getName getSignatureIndex getSignature setNameIndex setSignatureIndex toString name_index signature_index name_index signature_index org.aspectj.apache.bcel.classfile.ConstantNameAndType org.aspectj.apache.bcel.classfile.ConstantNameAndType  Name of field  and its signature.\r\n  Name of field  and its signature.\r\n","SearchRequestor":"acceptSearchMatch beginReporting endReporting enterParticipant exitParticipant org.aspectj.org.eclipse.jdt.core.search.SearchRequestor","BcelCflowAccessVar":"toString createLoad createStore createCopyFrom appendLoad createLoadInstructions appendLoadAndConvert insertLoad toString createLoad createStore createCopyFrom appendLoad createLoadInstructions appendLoadAndConvert insertLoad stackField index stackField index org.aspectj.weaver.bcel.BcelCflowAccessVar org.aspectj.weaver.bcel.BcelCflowAccessVar /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","CategorizedProblem":"getCategoryID getMarkerType getExtraMarkerAttributeNames getExtraMarkerAttributeValues CAT_UNSPECIFIED CAT_BUILDPATH CAT_SYNTAX CAT_IMPORT CAT_TYPE CAT_MEMBER CAT_INTERNAL CAT_JAVADOC CAT_CODE_STYLE CAT_POTENTIAL_PROGRAMMING_PROBLEM CAT_NAME_SHADOWING_CONFLICT CAT_DEPRECATION CAT_UNNECESSARY_CODE CAT_UNCHECKED_RAW CAT_NLS CAT_RESTRICTION org.aspectj.org.eclipse.jdt.core.compiler.CategorizedProblem","JarEntryDirectory":"clone getChildren getContents isFile setChildren toString children org.aspectj.org.eclipse.jdt.internal.core.JarEntryDirectory  $NON-NLS-1$ ","BrowserStructureViewToolPanel":"initToolBar createFilterMenu createRelationsMenu createGranularityMenu actionPerformed actionPerformed jbInit separator_button_actionPerformed view_comboBox_actionPerformed serialVersionUID currentView viewPanel borderLayout1 border1 border2 granularityCombo filterCombo relationsCombo buttons_panel spacer_panel borderLayout2 borderLayout3 view_panel view_comboBox view_label borderLayout4 serialVersionUID granularity serialVersionUID accessibility kind modifiers sorting relation org.aspectj.ajde.ui.swing.BrowserStructureViewToolPanel /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n *     Helen Hawkins  Converted to new interface (bug 148190) \r\n * ******************************************************************/\r\n","TypeDeclarationStatement":"propertyDescriptors typeDeclProperty internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getDeclaration setDeclaration getTypeDeclaration internalGetTypeDeclaration setTypeDeclaration internalSetTypeDeclaration resolveBinding memSize treeSize TYPE_DECLARATION_PROPERTY DECLARATION_PROPERTY PROPERTY_DESCRIPTORS_2_0 PROPERTY_DESCRIPTORS_3_0 typeDecl org.aspectj.org.eclipse.jdt.core.dom.TypeDeclarationStatement  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  AspectJ Extension - use factory method and not TypeDeclaration ctor\r\n  lazy init must be thread-safe for readers\r\n  TypeDeclaration - must check cycles\r\n  forward to non-deprecated replacement method\r\n  forward request to the wrapped type declaration\r\n  shouldn't happen\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t * @since 3.0\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /*package*/\r\n /*package*/\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","OptionsPanel":"loadOptions saveOptions org.aspectj.ajde.ui.swing.OptionsPanel /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","BuildNotifier":"resetProblemCounters aboutToCompile begin checkCancel checkCancelWithinCompiler compiled done problemsMessage setCancelling setProgressPerCompilationUnit subTask updateProblemCounts updateProblemCounts updateProgress updateProgressDelta monitor cancelling percentComplete progressPerCompilationUnit newErrorCount fixedErrorCount newWarningCount fixedWarningCount workDone totalWork previousSubtask NewErrorCount FixedErrorCount NewWarningCount FixedWarningCount org.aspectj.org.eclipse.jdt.internal.core.builder.BuildNotifier  $NON-NLS-1$\r\n  Once the compiler has been canceled, don't check again.\r\n  We check cancelation again following the call to compile.\r\n  $NON-NLS-1$\r\n  (Found x errors + y warnings)\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  (Fixed x errors + y warnings) or (Found x errors + y warnings, Fixed x + y)\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  avoid refreshing with same one\r\n  if (JavaBuilder.DEBUG) System.out.println(msg);\r\n  skip task\r\n  already matched up with a new problem\r\n  $NON-NLS-1$\r\n  already matched up with a new problem\r\n  $NON-NLS-1$\r\n  skip task\r\n  System.out.println(java.text.NumberFormat.getPercentInstance().format(this.percentComplete));\r\n","CodeSnippetSingleNameReference":"analyseCode checkFieldAccess generateAssignment generateCode generateCompoundAssignment generatePostIncrement generateReceiver getReceiverType manageSyntheticAccessIfNecessary reportError evaluationContext delegateThis org.aspectj.org.eclipse.jdt.internal.eval.CodeSnippetSingleNameReference  reading a field\r\n  check if reading a final blank field\r\n  reading a local variable\r\n  clear bits\r\n  must check for the static status....\r\n  i = i + value, then use the variable on the right hand side, since it has the correct implicit conversion\r\n  only commutative operations\r\n  exclude non constant expressions, since could have side-effect\r\n  exclude string concatenation which would occur backwards\r\n  i = value + i, then use the variable on the right hand side, since it has the correct implicit conversion\r\n  optimizing assignment like: i = i + 1 or i = 1 + i\r\n  assigning to a field\r\n  not yet supported\r\n  need a receiver?\r\n  need a receiver?\r\n  assigning to a local variable\r\n  implicit conversion\r\n  assigning an unused local to a constant value = no actual assignment is necessary\r\n  normal local assignment (since cannot store in outer local which are final locations)\r\n  for local variable debug attributes\r\n  implicit conversion\r\n  reading a field\r\n  directly use the inlined value\r\n  not yet supported\r\n  managing private access\r\n  directly use inlined value for constant fields\r\n  managing private access\r\n  directly use inlined value for constant fields\r\n  reading a local\r\n  regular local variable read\r\n  outer local can be reached either through a synthetic arg or a synthetic field\r\n  outer local?\r\n  assigning to a field\r\n  not yet supported\r\n  used to store the value\r\n  used to retrieve the actual value\r\n  used to store the value\r\n  used to retrieve the actual value\r\n  assigning to a local variable (cannot assign to outer local)\r\n  only for integral types\r\n  16 bits value\r\n  using incr bytecode if possible\r\n  perform the actual compound operation\r\n  promote the array reference to the suitable operation type\r\n  prefix operation\r\n  generate the increment value (will by itself  be promoted to the operation value)\r\n  perform the operation\r\n  cast the value back to the array reference type\r\n  assigning to a field\r\n  field receiver value\r\n  value field receiver value\r\n  assigning to a local variable\r\n  store the result back into the variable\r\n  assigning to a field\r\n  not yet supported\r\n  Stack:  [owner][old field value]  ---> [old field value][owner][old field value]\r\n  assigning to a local variable\r\n  using incr bytecode if possible\r\n  delegated field access\r\n  If inlinable field, forget the access emulation, the code gen will directly target it\r\n  runtimeType could be base type in boxing case\r\n  extra cast needed if field type was type variable\r\n  if field from parameterized type got found, use the original field at codegen time\r\n  array.length\r\n  no change for Object fields\r\n  and not from Object or implicit static field access.\r\n  will not support innerclass emulation inside delegate\r\n  will not support innerclass emulation inside delegate\r\n  manage the access to a private field of the enclosing type\r\n /*only exact match*/\r\n /* Even though the value may not be required, we force it to be produced, and discard it later\r\n\t\t\t\t\ton if it was actually not necessary, so as to provide the same behavior as JDK1.2beta3.\t*/\r\n /*only exact match*/\r\n /*only exact match*/\r\n /*\r\n * The APIs with an extra argument is used whenever there are two references to the same variable which\r\n * are optimized in one access: e.g \"a = a + 1\" optimized into \"a++\".\r\n */\r\n /*only exact match*/\r\n","JoinPointMatchImpl":"matches getParameterBindings matches getParameterBindings NO_MATCH NO_BINDINGS match bindings NO_MATCH NO_BINDINGS match bindings org.aspectj.weaver.reflect.JoinPointMatchImpl org.aspectj.weaver.reflect.JoinPointMatchImpl /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.tools.JoinPointMatch#matches()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.tools.JoinPointMatch#getParameterBindings()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.tools.JoinPointMatch#matches()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.tools.JoinPointMatch#getParameterBindings()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","BrowserViewPanel":"setActiveNode setActiveNode updateView updateTree initDepthSlider view_comboBox_actionPerformed jbInit serialVersionUID treeManager view_comboBox borderLayout1 view_toolBar depth_slider tree_ScrollPane tree_panel borderLayout2 org.aspectj.ajde.ui.swing.BrowserViewPanel  private int depthSliderVal = 0;\r\n  , visibleView);\r\n  updateTree(DECLARATION_VIEW);\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n *     Helen Hawkins  Converted to new interface (bug 148190) \r\n * ******************************************************************/\r\n","FinallyFlowContext":"complainOnDeferredChecks individualToString isSubRoutine recordFinalAssignment recordUsingNullReference removeFinalAssignmentIfAny recordNullReference finalAssignments finalVariables assignCount nullLocals nullReferences nullCheckTypes nullCount org.aspectj.org.eclipse.jdt.internal.compiler.flow.FinallyFlowContext  remember if have complained on this final assignment\r\n  final local variable\r\n  final field\r\n  if (currentContext.isSubRoutine()) {\r\n  }\r\n  where it could also be reported again\r\n  check redundant final assignments\r\n  final local variable\r\n  no enclosing loop, be as precise as possible right now\r\n  within an enclosing loop, be conservative\r\n  check inconsistent null checks\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  shortcut: cannot be null\r\n  no enclosing loop, be as precise as possible right now\r\n  within an enclosing loop, be conservative\r\n","IEclipseSourceContext":"removeUnnecessaryProblems removeUnnecessaryProblems org.aspectj.weaver.IEclipseSourceContext org.aspectj.weaver.IEclipseSourceContext","Jdk14Trace":"enter enter exit exit exit event event isTraceEnabled setTraceEnabled debug info warn error fatal enter enter exit exit exit event event isTraceEnabled setTraceEnabled debug info warn error fatal logger name logger name org.aspectj.weaver.tools.Jdk14Trace org.aspectj.weaver.tools.Jdk14Trace  OPTIMIZE move out for now? check what doc says about using these variants on trace (commons  OPTIMIZE move out for now? check what doc says about using these variants on trace (commons","IPackageBinding":"getName isUnnamed getNameComponents org.aspectj.org.eclipse.jdt.core.dom.IPackageBinding","ThreadStackFactory":"getNewThreadStack getNewThreadCounter getNewThreadStack getNewThreadCounter getNewThreadStack getNewThreadCounter org.aspectj.runtime.internal.cflowstack.ThreadStackFactory org.aspectj.runtime.internal.cflowstack.ThreadStackFactory org.aspectj.runtime.internal.cflowstack.ThreadStackFactory /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n * ******************************************************************/\r\n","ISearchPattern":"org.aspectj.org.eclipse.jdt.core.search.ISearchPattern","CompletionNodeFound":"astNode qualifiedBinding scope insideTypeAnnotation serialVersionUID org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionNodeFound  backward compatible\r\n  we found a problem in the completion node\r\n","ICommand":"runCommand repeatCommand runCommand repeatCommand org.aspectj.bridge.ICommand org.aspectj.bridge.ICommand /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","AjState":"setCouldBeSubsequentIncrementalBuild successfulCompile prepareForNextBuild processDeletedFiles getModifiedFiles getModifiedFiles getModifiedBinaryFiles getModifiedBinaryFiles accept classFileChangedInDirSinceLastBuildRequiringFullBuild isAspect processQueue get put entrySet clear size remove isTypeWeReferTo toString hasStructuralChangedSince pathChange getOutputLocations changedAndNeedsFullBuild classpathChangedAndNeedsFullBuild getFilesToCompile maybeIncremental getBinaryFilesToCompile removeAllResultsOfLastBuild deleteClassFiles deleteBinaryClassFiles deleteClassFile createUnwovenClassFile noteResult deleteTypesThatWereInThisCompilationUnitLastTimeRoundButHaveBeenDeletedInThisIncrement removeFromClassFilesIfPresent recordFQNsResultingFromCompilationUnit recordWhetherCompilationUnitDefinedAspect recordClassFile hasStructuralChanges modifiersEqual stringifyList addAffectedSourceFiles recordTypeChanged addDependentsOf setStructureModel getStructureModel setWeaver getWeaver setWorld getBcelWorld setRelationshipMap getRelationshipMap getNumberOfStructuralChangesSinceLastFullBuild getLastBuildTime getLastFullBuildTime getBuildConfig clearBinarySourceFiles recordBinarySource getClassFileFor getBinarySourceMap getClassNameToFileMap hasResource recordResource getAddedFiles getDeletedFiles forceBatchBuildNextTimeAround requiresFullBatchBuild deleteFromFileSystem wipeAllKnowledge getAspectNamesToFileNameMap initializeAspectNamesToFileNameMap listenerDefined getListener checkPreviousBuild getAjBuildManager getNameEnvironment setNameEnvironment CHECK_STATE_FIRST stateListener FORCE_INCREMENTAL_DURING_TESTING buildManager couldBeSubsequentIncrementalBuild nameEnvironment structureModel relmap affectedFiles lastSuccessfulFullBuildTime structuralChangesSinceLastFullBuild lastSuccessfulBuildTime currentBuildTime buildConfig batchBuildRequiredThisTime fullyQualifiedTypeNamesResultingFromCompilationUnit sourceFilesDefiningAspects references binarySourceFiles inputClassFilesBySource resolvedTypeStructuresFromLastBuild classesFromName aspectsFromFileNames compiledSourceFiles resources qualifiedStrings simpleStrings addedFiles deletedFiles addedBinaryFiles deletedBinaryFiles weaver world CLASS_FILE_NO_CHANGES CLASS_FILE_CHANGED_THAT_NEEDS_INCREMENTAL_BUILD CLASS_FILE_CHANGED_THAT_NEEDS_FULL_BUILD MAX_AFFECTED_FILES_BEFORE_FULL_BUILD classFileFilter map rq key fileToClassNameMap EMPTY_CHAR_ARRAY fullyQualifiedTypeName locationOnDisk org.aspectj.ajdt.internal.core.builder.AjState  SECRETAPI configures whether we use state instead of lastModTime - see pr245566\r\n  SECRETAPI static so beware of multi-threading bugs...\r\n  touch upon those and get them recompiled.\r\n  we don't support incremental with an outjar yet\r\n  since the last build will not be deleted from the output directory.\r\n  has changed, or a jar on a path has been modified\r\n  Check if the build configuration knows what files have changed...\r\n  need to add 1000 since lastModTime is only accurate to a second on some (all?) platforms\r\n  not our job to account for new and deleted files\r\n  need to add 1000 since lastModTime is only accurate to a second on some (all?) platforms\r\n  not our job to account for new and deleted files\r\n  Are we managing that output directory?\r\n  No state object to ask, so it only matters if we know which type depends on this file\r\n  structurally changed or not\r\n  it got GC'd\r\n  null config means failed build i think as it is only set on successful full build?\r\n  long lastModTime = file.lastModified();\r\n  'strucModTime'-> the last time the class was structurally changed\r\n  it as a standalone element on our classpath rather than going through them all\r\n  Is there a default location?\r\n  }\r\n  String on classpath, File on other paths\r\n  Do not check paths more than once\r\n  }\r\n  Do not check paths more than once\r\n  System.out.println(\"modified: \" + modifiedFiles);\r\n  else incremental...\r\n  remove all binarySourceFiles, and all classesFromName...\r\n  range of bsf is ucfs, domain is files (.class and jars) in inpath  this is the output dir\r\n  need to do this before types are deleted from the World...\r\n  still present this time around...\r\n  by the world.\r\n  ignore local types since they're only visible inside a single method\r\n  modifiers\r\n  generic signature\r\n  superclass name\r\n  have annotations changed on the type?\r\n  Does not cope with a change in values set on the annotation (hard to create a testcase where this is a problem tho)\r\n  interfaces\r\n  damn I'm lazy...\r\n  CompactMemberStructureRepresentation[] existingFields = existingType.fields;\r\n  }\r\n  CompactMemberStructureRepresentation[] existingMethods = existingType.methods;\r\n  }\r\n  matching sigs\r\n  might be overloading\r\n  candidate match\r\n  (no match found)\r\n  }\r\n  the qualifiedStrings are of the form 'p1  if a well known qualified name was found then we can skip over these\r\n  if a well known name was found then we can skip over these\r\n  ??? O(n**2)\r\n  in the new files we are about to compile (see pr133532)\r\n  Will allow us to record decisions made during incremental processing, hopefully aid in debugging\r\n /* File, long */\r\n /* <File, List<ClassFile> */\r\n /* <File> */\r\n /* <File, ReferenceCollection> */\r\n /* File, List<UnwovenClassFile> */\r\n /* <File,List<ClassFile> */\r\n /* FQN,CompactStructureRepresentation */\r\n /* <String, File> */\r\n /* <String, char[]> */\r\n /* File */\r\n /* String */\r\n /* BinarySourceFile */\r\n /* BinarySourceFile */\r\n /* ClassFile */\r\n /* File */\r\n /* <baseDir,SoftHashMap<theFile,className>> */\r\n /* String */\r\n /* File */\r\n /* String -> List<ucf> */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","JavadocSingleTypeReference":"reportInvalidType reportDeprecatedType traverse traverse internalResolveType resolveType resolveType tagSourceStart tagSourceEnd packageBinding org.aspectj.org.eclipse.jdt.internal.compiler.ast.JavadocSingleTypeReference  handle the error here\r\n  is a shared type reference which was already resolved\r\n  already reported error\r\n  ignore problem as we want report specific javadoc one instead\r\n /* (non-Javadoc)\r\n\t * Redefine to capture javadoc specific signatures\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode#traverse(org.aspectj.org.eclipse.jdt.internal.compiler.ASTVisitor, org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BlockScope)\r\n\t */\r\n /*\r\n\t * We need to modify resolving behavior to handle package references\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.Expression#resolveType(org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BlockScope)\r\n\t * We need to override to handle package references\r\n\t */\r\n","DeclareWarning":"/* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","BcelRenderer":"renderExpr renderExpr renderExprs renderTest recur visit visit visit visit visit visit createJumpBasedOnBooleanOnStack visit visit visit visit visit visit renderExpr renderExpr renderExprs renderTest recur visit visit visit visit visit visit createJumpBasedOnBooleanOnStack visit visit visit visit visit visit instructions fact world sk fk next instructions fact world sk fk next org.aspectj.weaver.bcel.BcelRenderer org.aspectj.weaver.bcel.BcelRenderer  invokevirtual java  aload annotationClass\r\n  il.append(new LDC_W(annClassIndex));\r\n  don't bother generating if it doesn't matter\r\n  assert method.isStatic()\r\n  System.out.println(\"args: \" + Arrays.asList(args));\r\n  XXX only correct for static method calls\r\n  System.out.println(\"rendered args: \" + callIl);\r\n  assert !method.isStatic()\r\n  System.out.println(\"args: \" + Arrays.asList(args));\r\n  System.out.println(\"rendered args: \" + callIl);\r\n  assert field.isStatic()\r\n  assert method.isStatic()\r\n  we generate right to left, btw.\r\n  invokevirtual java  aload annotationClass\r\n  il.append(new LDC_W(annClassIndex));\r\n  don't bother generating if it doesn't matter\r\n  assert method.isStatic()\r\n  System.out.println(\"args: \" + Arrays.asList(args));\r\n  XXX only correct for static method calls\r\n  System.out.println(\"rendered args: \" + callIl);\r\n  assert !method.isStatic()\r\n  System.out.println(\"args: \" + Arrays.asList(args));\r\n  System.out.println(\"rendered args: \" + callIl);\r\n  assert field.isStatic()\r\n  assert method.isStatic()\r\n  we generate right to left, btw.\r\n /*\r\n\t * Get the instructions representing this test.\r\n\t * \r\n\t * @param e test to render\r\n\t * \r\n\t * @param sk instructionHandle to jump to if our rendered check succeeds (typically start of advice)\r\n\t * \r\n\t * @param fk instructionHandle to jump to if our rendered check fails (typically after end of advice)\r\n\t * \r\n\t * @param next instructionHandle that will follow this generated code. Passing in null will generate one unnecessary GOTO\r\n\t * instruction.\r\n\t * \r\n\t * @returns the instruction list representing this expression\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ast.ITestVisitor#visit(org.aspectj.weaver.internal.tools.MatchingContextBasedTest)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /*\r\n\t * Get the instructions representing this test.\r\n\t * \r\n\t * @param e test to render\r\n\t * \r\n\t * @param sk instructionHandle to jump to if our rendered check succeeds (typically start of advice)\r\n\t * \r\n\t * @param fk instructionHandle to jump to if our rendered check fails (typically after end of advice)\r\n\t * \r\n\t * @param next instructionHandle that will follow this generated code. Passing in null will generate one unnecessary GOTO\r\n\t * instruction.\r\n\t * \r\n\t * @returns the instruction list representing this expression\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ast.ITestVisitor#visit(org.aspectj.weaver.internal.tools.MatchingContextBasedTest)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","ASTParser":"getAST getAST newParser initializeDefaults setBindingsRecovery setCompilerOptions setResolveBindings setFocalPosition setKind setSource setSource setSource setSource setSourceRange setStatementsRecovery setWorkingCopyOwner setUnitName setProject createAST createASTs createBindings internalCreateAST internalCreateASTForKind propagateErrors rootNodeToCompilationUnit AJ_AST_FACTORY astFactory K_EXPRESSION K_STATEMENTS K_CLASS_BODY_DECLARATIONS K_COMPILATION_UNIT apiLevel astKind compilerOptions resolveBindings partial statementsRecovery bindingsRecovery focalPointPosition rawSource typeRoot sourceOffset sourceLength workingCopyOwner project unitName org.aspectj.org.eclipse.jdt.core.dom.ASTParser  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  copy client's options so as to not do any side effect on them\r\n  no need to parse task tags\r\n  clear the type root\r\n  clear the raw source\r\n  no need to parse task tags\r\n  no need to parse task tags\r\n  $NON-NLS-1$\r\n  re-init defaults to allow reuse (and avoid leaking)\r\n  $NON-NLS-1$\r\n  re-init defaults to allow reuse (and avoid leaking)\r\n  $NON-NLS-1$\r\n  re-init defaults to allow reuse (and avoid leaking)\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  an error occured accessing the java element\r\n  file name is used to recreate the Java element, so it has to be the toplevel .class file name\r\n  parse and resolve\r\n  new code:\r\n  End AspectJ Extension\r\n  new code:\r\n  End AspectJ Extension\r\n  propagate and record problems\r\n  propagate and record problems\r\n  propagate and record problems\r\n /*\r\n\t\t\t\t\t\t\t * this.compilationUnitSource is an instance of org.aspectj.org.eclipse.jdt.internal.core.CompilationUnit that implements\r\n\t\t\t\t\t\t\t * both org.aspectj.org.eclipse.jdt.core.ICompilationUnit and org.aspectj.org.eclipse.jdt.internal.compiler.env.ICompilationUnit\r\n\t\t\t\t\t\t\t */\r\n /*\r\n\t\t\t\t\t\t\t * use a BasicCompilation that caches the source instead of using the compilationUnitSource directly\r\n\t\t\t\t\t\t\t * (if it is a working copy, the source can change between the parse and the AST convertion)\r\n\t\t\t\t\t\t\t * (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=75632)\r\n\t\t\t\t\t\t\t */\r\n","ProblemBinding":"kind problemId readableName name searchType problemId org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ProblemBinding","BindingKeyResolver":"compoundName consumeArrayDimension consumeBaseType consumeCapture consumeException consumeField consumeParameterizedGenericMethod consumeLocalType consumeLocalVar consumeMethod consumeMemberType consumePackage consumeParameterizedType consumeParser consumeScope consumeRawType consumeSecondaryType consumeFullyQualifiedName consumeTopLevelType consumeKey consumeTypeVariable consumeTypeWithCapture consumeWildCard getArrayBinding getBaseTypeBinding getBinaryBinding getCompilationUnitDeclaration getCompilerBinding getTypeBinding getTypeBindingArguments malformedKey newParser toString compiler compilerBinding compoundName dimension environment genericType methodBinding secondarySimpleName parsedUnit scope typeBinding typeDeclaration types rank wildcardRank outerMostParsedUnit capture org.aspectj.org.eclipse.jdt.internal.core.util.BindingKeyResolver  resilience\r\n  resilience\r\n  parameterized top level type or parameterized member type with raw enclosing type\r\n  parameterized member type with parameterized enclosing type\r\n  parameterized member type with raw enclosing type\r\n  raw type\r\n  malformed key\r\n  noop if unit has already been resolved\r\n  resilience\r\n  case of a secondary type with no primary type (see https:  $NON-NLS-1$\r\n /*\r\n\t * If not already cached, computes and cache the compound name (pkg name + top level name) of this key.\r\n\t * Returns the package name if key is a pkg key.\r\n\t * Returns an empty array if malformed.\r\n\t * This key's scanner should be positioned on the package or type token.\r\n\t */\r\n /*no extra bound*/\r\n /*no bound*/\r\n /*no extra bound*/\r\n /*\r\n\t * If the given dimension is greater than 0 returns an array binding for the given type binding.\r\n\t * Otherwise return the given type binding.\r\n\t * Returns null if the given type binding is null.\r\n\t */\r\n /*\r\n\t * Returns a binary binding corresonding to this key's compound name.\r\n\t * Returns null if not found.\r\n\t */\r\n /*\r\n\t * Finds the compilation unit declaration corresponding to the key in the given lookup environment.\r\n\t * Returns null if no compilation unit declaration could be found.\r\n\t * This key's scanner should be positioned on the package token.\r\n\t */\r\n /*\r\n\t * Returns the compiler binding corresponding to this key.\r\n\t * Returns null is malformed.\r\n\t * This key's scanner should be positioned on the package token.\r\n\t */\r\n","Modifier":"fromFlagValue toKeyword toFlagValue toString isAbstract isFinal isNative isPrivate isProtected isPublic isStatic isStrictfp isSynchronized isTransient isVolatile propertyDescriptors accept0 clone0 getKeyword getNodeType0 internalGetSetObjectProperty internalStructuralPropertiesForType isAbstract isAnnotation isFinal isModifier isNative isPrivate isProtected isPublic isStatic isStrictfp isSynchronized isTransient isVolatile memSize setKeyword subtreeMatch0 treeSize ABSTRACT_KEYWORD FINAL_KEYWORD KEYWORDS NATIVE_KEYWORD PRIVATE_KEYWORD PROTECTED_KEYWORD PUBLIC_KEYWORD STATIC_KEYWORD STRICTFP_KEYWORD SYNCHRONIZED_KEYWORD TRANSIENT_KEYWORD VOLATILE_KEYWORD flagValue keyword ABSTRACT FINAL KEYWORD_PROPERTY NATIVE NONE PRIVATE PROPERTY_DESCRIPTORS PROTECTED PUBLIC STATIC STRICTFP SYNCHRONIZED TRANSIENT VOLATILE modifierKeyword org.aspectj.org.eclipse.jdt.core.dom.Modifier  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  treat ModifierKeyword as free\r\n  dispatch to correct overloaded match method\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t * @since 3.0\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t * @since 3.0\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t * @since 3.0\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t * @since 3.0\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t * @since 3.0\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t * @since 3.0\r\n\t */\r\n","AfterAdviceDeclaration":"clone0 subtreeMatch0 accept0 org.aspectj.org.eclipse.jdt.core.dom.AfterAdviceDeclaration  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","ReconcileWorkingCopyOperation":"executeOperation reportProblems getWorkingCopy isReadOnly makeConsistent notifyParticipants verify PERF astLevel resolveBindings problems reconcileFlags workingCopyOwner ast deltaBuilder requestorIsActive org.aspectj.org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation  check is problem requestor is active\r\n  create the delta builder (this remembers the current content of the cu)\r\n  make working copy consistent if needed and compute AST if needed\r\n  recreate ast if one participant reset it\r\n  (see https:  report problems\r\n  report delta\r\n  $NON-NLS-1$\r\n  make working copy consistent\r\n  no need to recompute AST if known already\r\n  find problems if needed\r\n  convert AST\r\n  create AST if needed\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  errors are not supposed to be caught\r\n  was destroyed\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.core.JavaModelOperation#isReadOnly()\r\n\t */\r\n /*creating AST if level is not NO_AST */\r\n /*unit is null if working copy is consistent && (problem detection not forced || non-Java project) -> don't create AST as per API*/\r\n /*\r\n\t * Makes the given working copy consistent, computes the delta and computes an AST if needed.\r\n\t * Returns the AST.\r\n\t */\r\n","BrowserViewTreeListener":"valueChanged mouseEntered mouseExited mousePressed mouseReleased mouseClicked singleClickNavigation doubleClickNavigation maybeShowPopup tree serialVersionUID serialVersionUID org.aspectj.ajde.ui.swing.BrowserViewTreeListener  doubleClickNavigation(e);\r\n  int clickCount = e.getClickCount();\r\n  TreePath[] selectionPaths = tree.getSelectionPaths();\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation\r\n *     Helen Hawkins  Converted to new interface (bug 148190)  \r\n * ******************************************************************/\r\n","IParent":"getChildren hasChildren org.aspectj.org.eclipse.jdt.core.IParent","FuzzyBoolean":"alwaysTrue alwaysFalse maybeTrue maybeFalse and or not alwaysFalse alwaysTrue maybeFalse maybeTrue and not or toString alwaysFalse alwaysTrue maybeFalse maybeTrue and not or toString alwaysFalse alwaysTrue maybeFalse maybeTrue and not or toString alwaysFalse alwaysTrue maybeFalse maybeTrue and not or toString fromBoolean fromBoolean toString alwaysTrue alwaysFalse maybeTrue maybeFalse and or not alwaysFalse alwaysTrue maybeFalse maybeTrue and not or toString alwaysFalse alwaysTrue maybeFalse maybeTrue and not or toString alwaysFalse alwaysTrue maybeFalse maybeTrue and not or toString alwaysFalse alwaysTrue maybeFalse maybeTrue and not or toString fromBoolean fromBoolean toString YES NO MAYBE NEVER name YES NO MAYBE YES NO MAYBE NEVER name YES NO MAYBE org.aspectj.util.FuzzyBoolean org.aspectj.weaver.tools.FuzzyBoolean org.aspectj.util.FuzzyBoolean org.aspectj.weaver.tools.FuzzyBoolean  Note :- this implementation is not safe under serialization   Note :- this implementation is not safe under serialization  /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n *               2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n *               2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","IProblem":"getArguments getID getMessage getOriginatingFileName getSourceEnd getSourceLineNumber getSourceStart isError isWarning setSourceEnd setSourceLineNumber setSourceStart setSeeAlsoProblems seeAlso setSupplementaryMessageInfo getSupplementaryMessageInfo TypeRelated FieldRelated MethodRelated ConstructorRelated ImportRelated Internal Syntax Javadoc IgnoreCategoriesMask Unclassified ObjectHasNoSuperclass UndefinedType NotVisibleType AmbiguousType UsingDeprecatedType InternalTypeNameProvided UnusedPrivateType IncompatibleTypesInEqualityOperator IncompatibleTypesInConditionalOperator TypeMismatch IndirectAccessToStaticType MissingEnclosingInstanceForConstructorCall MissingEnclosingInstance IncorrectEnclosingInstanceReference IllegalEnclosingInstanceSpecification CannotDefineStaticInitializerInLocalType OuterLocalMustBeFinal CannotDefineInterfaceInLocalType IllegalPrimitiveOrArrayTypeForEnclosingInstance EnclosingInstanceInConstructorCall AnonymousClassCannotExtendFinalClass CannotDefineAnnotationInLocalType CannotDefineEnumInLocalType NonStaticContextForEnumMemberType TypeHidingType UndefinedName UninitializedLocalVariable VariableTypeCannotBeVoid VariableTypeCannotBeVoidArray CannotAllocateVoidArray RedefinedLocal RedefinedArgument DuplicateFinalLocalInitialization NonBlankFinalLocalAssignment ParameterAssignment FinalOuterLocalAssignment LocalVariableIsNeverUsed ArgumentIsNeverUsed BytecodeExceeds64KLimit BytecodeExceeds64KLimitForClinit TooManyArgumentSlots TooManyLocalVariableSlots TooManySyntheticArgumentSlots TooManyArrayDimensions BytecodeExceeds64KLimitForConstructor UndefinedField NotVisibleField AmbiguousField UsingDeprecatedField NonStaticFieldFromStaticInvocation ReferenceToForwardField NonStaticAccessToStaticField UnusedPrivateField IndirectAccessToStaticField UnqualifiedFieldAccess FinalFieldAssignment UninitializedBlankFinalField DuplicateBlankFinalFieldInitialization LocalVariableHidingLocalVariable LocalVariableHidingField FieldHidingLocalVariable FieldHidingField ArgumentHidingLocalVariable ArgumentHidingField MissingSerialVersion UndefinedMethod NotVisibleMethod AmbiguousMethod UsingDeprecatedMethod DirectInvocationOfAbstractMethod VoidMethodReturnsValue MethodReturnsVoid MethodRequiresBody ShouldReturnValue MethodButWithConstructorName MissingReturnType BodyForNativeMethod BodyForAbstractMethod NoMessageSendOnBaseType ParameterMismatch NoMessageSendOnArrayType NonStaticAccessToStaticMethod UnusedPrivateMethod IndirectAccessToStaticMethod UndefinedConstructor NotVisibleConstructor AmbiguousConstructor UsingDeprecatedConstructor UnusedPrivateConstructor InstanceFieldDuringConstructorInvocation InstanceMethodDuringConstructorInvocation RecursiveConstructorInvocation ThisSuperDuringConstructorInvocation InvalidExplicitConstructorCall UndefinedConstructorInDefaultConstructor NotVisibleConstructorInDefaultConstructor AmbiguousConstructorInDefaultConstructor UndefinedConstructorInImplicitConstructorCall NotVisibleConstructorInImplicitConstructorCall AmbiguousConstructorInImplicitConstructorCall UnhandledExceptionInDefaultConstructor UnhandledExceptionInImplicitConstructorCall ArrayReferenceRequired NoImplicitStringConversionForCharArrayExpression StringConstantIsExceedingUtf8Limit NonConstantExpression NumericValueOutOfRange IllegalCast InvalidClassInstantiation CannotDefineDimensionExpressionsWithInit MustDefineEitherDimensionExpressionsOrInitializer InvalidOperator CodeCannotBeReached CannotReturnInInitializer InitializerMustCompleteNormally InvalidVoidExpression MaskedCatch DuplicateDefaultCase UnreachableCatch UnhandledException IncorrectSwitchType DuplicateCase DuplicateLabel InvalidBreak InvalidContinue UndefinedLabel InvalidTypeToSynchronized InvalidNullToSynchronized CannotThrowNull AssignmentHasNoEffect PossibleAccidentalBooleanAssignment SuperfluousSemicolon UnnecessaryCast UnnecessaryArgumentCast UnnecessaryInstanceof FinallyMustCompleteNormally UnusedMethodDeclaredThrownException UnusedConstructorDeclaredThrownException InvalidCatchBlockSequence EmptyControlFlowStatement UnnecessaryElse NeedToEmulateFieldReadAccess NeedToEmulateFieldWriteAccess NeedToEmulateMethodAccess NeedToEmulateConstructorAccess FallthroughCase InheritedMethodHidesEnclosingName InheritedFieldHidesEnclosingName InheritedTypeHidesEnclosingName IllegalUsageOfQualifiedTypeReference UnusedLabel ThisInStaticContext StaticMethodRequested IllegalDimension InvalidTypeExpression ParsingError ParsingErrorNoSuggestion InvalidUnaryExpression InterfaceCannotHaveConstructors ArrayConstantsOnlyInArrayInitializers ParsingErrorOnKeyword ParsingErrorOnKeywordNoSuggestion UnmatchedBracket NoFieldOnBaseType InvalidExpressionAsStatement ExpressionShouldBeAVariable MissingSemiColon InvalidParenthesizedExpression ParsingErrorInsertTokenBefore ParsingErrorInsertTokenAfter ParsingErrorDeleteToken ParsingErrorDeleteTokens ParsingErrorMergeTokens ParsingErrorInvalidToken ParsingErrorMisplacedConstruct ParsingErrorReplaceTokens ParsingErrorNoSuggestionForTokens ParsingErrorUnexpectedEOF ParsingErrorInsertToComplete ParsingErrorInsertToCompleteScope ParsingErrorInsertToCompletePhrase EndOfSource InvalidHexa InvalidOctal InvalidCharacterConstant InvalidEscape InvalidInput InvalidUnicodeEscape InvalidFloat NullSourceString UnterminatedString UnterminatedComment NonExternalizedStringLiteral InvalidDigit InvalidLowSurrogate InvalidHighSurrogate UnnecessaryNLSTag DiscouragedReference InterfaceCannotHaveInitializers DuplicateModifierForType IllegalModifierForClass IllegalModifierForInterface IllegalModifierForMemberClass IllegalModifierForMemberInterface IllegalModifierForLocalClass ForbiddenReference IllegalModifierCombinationFinalAbstractForClass IllegalVisibilityModifierForInterfaceMemberType IllegalVisibilityModifierCombinationForMemberType IllegalStaticModifierForMemberType SuperclassMustBeAClass ClassExtendFinalClass DuplicateSuperInterface SuperInterfaceMustBeAnInterface HierarchyCircularitySelfReference HierarchyCircularity HidingEnclosingType DuplicateNestedType CannotThrowType PackageCollidesWithType TypeCollidesWithPackage DuplicateTypes IsClassPathCorrect PublicClassMustMatchFileName MustSpecifyPackage HierarchyHasProblems PackageIsNotExpectedPackage ObjectCannotHaveSuperTypes ObjectMustBeClass SuperclassNotFound SuperclassNotVisible SuperclassAmbiguous SuperclassInternalNameProvided SuperclassInheritedNameHidesEnclosingName InterfaceNotFound InterfaceNotVisible InterfaceAmbiguous InterfaceInternalNameProvided InterfaceInheritedNameHidesEnclosingName DuplicateField DuplicateModifierForField IllegalModifierForField IllegalModifierForInterfaceField IllegalVisibilityModifierCombinationForField IllegalModifierCombinationFinalVolatileForField UnexpectedStaticModifierForField FieldTypeNotFound FieldTypeNotVisible FieldTypeAmbiguous FieldTypeInternalNameProvided FieldTypeInheritedNameHidesEnclosingName DuplicateMethod IllegalModifierForArgument DuplicateModifierForMethod IllegalModifierForMethod IllegalModifierForInterfaceMethod IllegalVisibilityModifierCombinationForMethod UnexpectedStaticModifierForMethod IllegalAbstractModifierCombinationForMethod AbstractMethodInAbstractClass ArgumentTypeCannotBeVoid ArgumentTypeCannotBeVoidArray ReturnTypeCannotBeVoidArray NativeMethodsCannotBeStrictfp DuplicateModifierForArgument ArgumentTypeNotFound ArgumentTypeNotVisible ArgumentTypeAmbiguous ArgumentTypeInternalNameProvided ArgumentTypeInheritedNameHidesEnclosingName ExceptionTypeNotFound ExceptionTypeNotVisible ExceptionTypeAmbiguous ExceptionTypeInternalNameProvided ExceptionTypeInheritedNameHidesEnclosingName ReturnTypeNotFound ReturnTypeNotVisible ReturnTypeAmbiguous ReturnTypeInternalNameProvided ReturnTypeInheritedNameHidesEnclosingName ConflictingImport DuplicateImport CannotImportPackage UnusedImport ImportNotFound ImportNotVisible ImportAmbiguous ImportInternalNameProvided ImportInheritedNameHidesEnclosingName InvalidTypeForStaticImport DuplicateModifierForVariable IllegalModifierForVariable LocalVariableCannotBeNull LocalVariableCanOnlyBeNull LocalVariableMayBeNull AbstractMethodMustBeImplemented FinalMethodCannotBeOverridden IncompatibleExceptionInThrowsClause IncompatibleExceptionInInheritedMethodThrowsClause IncompatibleReturnType InheritedMethodReducesVisibility CannotOverrideAStaticMethodWithAnInstanceMethod CannotHideAnInstanceMethodWithAStaticMethod StaticInheritedMethodConflicts MethodReducesVisibility OverridingNonVisibleMethod AbstractMethodCannotBeOverridden OverridingDeprecatedMethod IncompatibleReturnTypeForNonInheritedInterfaceMethod IncompatibleExceptionInThrowsClauseForNonInheritedInterfaceMethod IllegalVararg OverridingMethodWithoutSuperInvocation CodeSnippetMissingClass CodeSnippetMissingMethod CannotUseSuperInCodeSnippet TooManyConstantsInConstantPool TooManyBytesForStringConstant TooManyFields TooManyMethods UseAssertAsAnIdentifier UseEnumAsAnIdentifier EnumConstantsCannotBeSurroundedByParenthesis Task NullLocalVariableReference PotentialNullLocalVariableReference RedundantNullCheckOnNullLocalVariable NullLocalVariableComparisonYieldsFalse RedundantLocalVariableNullAssignment NullLocalVariableInstanceofYieldsFalse RedundantNullCheckOnNonNullLocalVariable NonNullLocalVariableComparisonYieldsFalse UndocumentedEmptyBlock SwallowedExceptionInCatchBlock JavadocDuplicateTag JavadocHiddenReference JavadocInvalidMemberTypeQualification JavadocMissingIdentifier JavadocNonStaticTypeFromStaticInvocation JavadocInvalidParamTagTypeParameter JavadocUnexpectedTag JavadocMissingParamTag JavadocMissingParamName JavadocDuplicateParamName JavadocInvalidParamName JavadocMissingReturnTag JavadocDuplicateReturnTag JavadocMissingThrowsTag JavadocMissingThrowsClassName JavadocInvalidThrowsClass JavadocDuplicateThrowsClassName JavadocInvalidThrowsClassName JavadocMissingSeeReference JavadocInvalidSeeReference JavadocInvalidSeeHref JavadocInvalidSeeArgs JavadocMissing JavadocInvalidTag JavadocUndefinedField JavadocNotVisibleField JavadocAmbiguousField JavadocUsingDeprecatedField JavadocUndefinedConstructor JavadocNotVisibleConstructor JavadocAmbiguousConstructor JavadocUsingDeprecatedConstructor JavadocUndefinedMethod JavadocNotVisibleMethod JavadocAmbiguousMethod JavadocUsingDeprecatedMethod JavadocNoMessageSendOnBaseType JavadocParameterMismatch JavadocNoMessageSendOnArrayType JavadocUndefinedType JavadocNotVisibleType JavadocAmbiguousType JavadocUsingDeprecatedType JavadocInternalTypeNameProvided JavadocInheritedMethodHidesEnclosingName JavadocInheritedFieldHidesEnclosingName JavadocInheritedNameHidesEnclosingTypeName JavadocAmbiguousMethodReference JavadocUnterminatedInlineTag JavadocMalformedSeeReference JavadocMessagePrefix JavadocMissingHashCharacter JavadocEmptyReturnTag JavadocInvalidValueReference JavadocUnexpectedText JavadocInvalidParamTagName DuplicateTypeVariable IllegalTypeVariableSuperReference NonStaticTypeFromStaticInvocation ObjectCannotBeGeneric NonGenericType IncorrectArityForParameterizedType TypeArgumentMismatch DuplicateMethodErasure ReferenceToForwardTypeVariable BoundMustBeAnInterface UnsafeRawConstructorInvocation UnsafeRawMethodInvocation UnsafeTypeConversion InvalidTypeVariableExceptionType InvalidParameterizedExceptionType IllegalGenericArray UnsafeRawFieldAssignment FinalBoundForTypeVariable UndefinedTypeVariable SuperInterfacesCollide WildcardConstructorInvocation WildcardMethodInvocation WildcardFieldAssignment GenericMethodTypeArgumentMismatch GenericConstructorTypeArgumentMismatch UnsafeGenericCast IllegalInstanceofParameterizedType IllegalInstanceofTypeParameter NonGenericMethod IncorrectArityForParameterizedMethod ParameterizedMethodArgumentTypeMismatch NonGenericConstructor IncorrectArityForParameterizedConstructor ParameterizedConstructorArgumentTypeMismatch TypeArgumentsForRawGenericMethod TypeArgumentsForRawGenericConstructor SuperTypeUsingWildcard GenericTypeCannotExtendThrowable IllegalClassLiteralForTypeVariable UnsafeReturnTypeOverride MethodNameClash RawMemberTypeCannotBeParameterized MissingArgumentsForParameterizedMemberType StaticMemberOfParameterizedType BoundHasConflictingArguments DuplicateParameterizedMethods IllegalQualifiedParameterizedTypeAllocation DuplicateBounds BoundCannotBeArray UnsafeRawGenericConstructorInvocation UnsafeRawGenericMethodInvocation TypeParameterHidingType RawTypeReference NoAdditionalBoundAfterTypeVariable UnsafeGenericArrayForVarargs IllegalAccessFromTypeVariable TypeHidingTypeParameterFromType TypeHidingTypeParameterFromMethod InvalidUsageOfWildcard IncompatibleTypesInForeach InvalidTypeForCollection InvalidUsageOfTypeParameters InvalidUsageOfStaticImports InvalidUsageOfForeachStatements InvalidUsageOfTypeArguments InvalidUsageOfEnumDeclarations InvalidUsageOfVarargs InvalidUsageOfAnnotations InvalidUsageOfAnnotationDeclarations IllegalModifierForAnnotationMethod IllegalExtendedDimensions InvalidFileNameForPackageAnnotations IllegalModifierForAnnotationType IllegalModifierForAnnotationMemberType InvalidAnnotationMemberType AnnotationCircularitySelfReference AnnotationCircularity DuplicateAnnotation MissingValueForAnnotationMember DuplicateAnnotationMember UndefinedAnnotationMember AnnotationValueMustBeClassLiteral AnnotationValueMustBeConstant AnnotationFieldNeedConstantInitialization IllegalModifierForAnnotationField AnnotationCannotOverrideMethod AnnotationMembersCannotHaveParameters AnnotationMembersCannotHaveTypeParameters AnnotationTypeDeclarationCannotHaveSuperclass AnnotationTypeDeclarationCannotHaveSuperinterfaces DuplicateTargetInTargetAnnotation DisallowedTargetForAnnotation MethodMustOverride AnnotationTypeDeclarationCannotHaveConstructor AnnotationValueMustBeAnnotation AnnotationTypeUsedAsSuperInterface MissingOverrideAnnotation FieldMissingDeprecatedAnnotation MethodMissingDeprecatedAnnotation TypeMissingDeprecatedAnnotation UnhandledWarningToken AnnotationValueMustBeArrayInitializer AnnotationValueMustBeAnEnumConstant MethodMustOverrideOrImplement CorruptedSignature InvalidEncoding CannotReadSource BoxingConversion UnboxingConversion IllegalModifierForEnum IllegalModifierForEnumConstant IllegalModifierForLocalEnum IllegalModifierForMemberEnum CannotDeclareEnumSpecialMethod IllegalQualifiedEnumConstantLabel CannotExtendEnum CannotInvokeSuperConstructorInEnum EnumAbstractMethodMustBeImplemented EnumSwitchCannotTargetField IllegalModifierForEnumConstructor MissingEnumConstantCase EnumStaticFieldInInInitializerContext IllegalExtendedDimensionsForVarArgs MethodVarargsArgumentNeedCast ConstructorVarargsArgumentNeedCast VarargsConflict JavadocGenericMethodTypeArgumentMismatch JavadocNonGenericMethod JavadocIncorrectArityForParameterizedMethod JavadocParameterizedMethodArgumentTypeMismatch JavadocTypeArgumentsForRawGenericMethod JavadocGenericConstructorTypeArgumentMismatch JavadocNonGenericConstructor JavadocIncorrectArityForParameterizedConstructor JavadocParameterizedConstructorArgumentTypeMismatch JavadocTypeArgumentsForRawGenericConstructor ExternalProblemNotFixable ExternalProblemFixable org.aspectj.org.eclipse.jdt.core.compiler.IProblem  AspectJ Extension\r\n  variables\r\n  local variables\r\n  final local variables\r\n  fields\r\n  blank final fields\r\n  methods\r\n  constructors\r\n  explicit constructor calls\r\n  implicit constructor calls\r\n  expressions\r\n  constant expressions\r\n  cast expressions\r\n  allocations\r\n  operators\r\n  statements\r\n  assert\r\n  try\r\n  switch\r\n  labelled\r\n  synchronized\r\n  throw\r\n  inner emulation\r\n  inherited name hides enclosing name (sort of ambiguous)\r\n  syntax errors\r\n  scanner errors\r\n  TypeRelated + 330\r\n  TypeRelated + 331\r\n  TypeRelated + 332\r\n  TypeRelated + 333\r\n  TypeRelated + 334\r\n  TypeRelated + 335\r\n  TypeRelated + 336\r\n  TypeRelated + 337\r\n  TypeRelated + 338\r\n  TypeRelated + 339\r\n  field related problems\r\n  FieldRelated + 350\r\n  FieldRelated + 351\r\n  FieldRelated + 352\r\n  FieldRelated + 353\r\n  FieldRelated + 354\r\n  method related problems\r\n  MethodRelated + 370\r\n  MethodRelated + 371\r\n  MethodRelated + 372\r\n  MethodRelated + 373\r\n  MethodRelated + 374\r\n  MethodRelated + 375\r\n  MethodRelated + 376\r\n  MethodRelated + 377\r\n  MethodRelated + 378\r\n  MethodRelated + 379\r\n  MethodRelated + 380\r\n  MethodRelated + 381\r\n  MethodRelated + 382\r\n  MethodRelated + 383\r\n  MethodRelated + 384\r\n  import related problems\r\n  ImportRelated + 390\r\n  ImportRelated + 391\r\n  ImportRelated + 392\r\n  ImportRelated + 393\r\n  ImportRelated + 394\r\n  local variable related problems\r\n  since 3.3: semantics are LocalVariableRedundantCheckOnNonNull\r\n  since 3.3: split with LocalVariableRedundantCheckOnNull depending on context\r\n  method verifier problems\r\n  code snippet support\r\n  constant pool\r\n  assertion warning\r\n  1.5 features\r\n  TODO need to fix 3.1.1 contribution (inline this constant on client side)\r\n /* AspectJ Extension */\r\n","AbstractCommentParser":"commentParse consumeToken createArgumentReference createFieldReference createMethodReference createReturnStatement createTag createTypeReference getIndexPosition getLineNumber getTokenEndPosition getCurrentTokenType parseArguments parseHref parseIdentifierTag parseMember parseParam parseQualifiedName parseReference parseTag parseThrows peekChar pushIdentifier pushOnAstStack pushParamName pushSeeRef pushText pushThrowName readChar readToken readTokenAndConsume readTokenSafely refreshInlineTagPosition refreshReturnStatement syntaxRecoverQualifiedName toString updateDocComment updateLineEnd verifyEndLine verifySpaceOrEndComment COMPIL_PARSER DOM_PARSER SELECTION_PARSER COMPLETION_PARSER SOURCE_PARSER PARSER_KIND TEXT_PARSE TEXT_VERIF QUALIFIED_NAME_RECOVERY ARGUMENT_RECOVERY ARGUMENT_TYPE_RECOVERY EMPTY_ARGUMENT_RECOVERY scanner source sourceParser currentTokenType checkDocComment reportProblems complianceLevel sourceLevel inheritedPositions deprecated returnStatement javadocStart javadocEnd firstTagPosition index lineEnd tokenPreviousPosition lastIdentifierEndPosition starPosition textStart memberStart tagSourceStart tagSourceEnd inlineTagStart lineEnds lineStarted inlineTagStarted abort kind tagValue linePtr lastLinePtr identifierPtr identifierStack identifierLengthPtr identifierLengthStack identifierPositionStack AST_STACK_INCREMENT astPtr astStack astLengthPtr astLengthStack org.aspectj.org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser  Kind of comment parser\r\n  flag saying that text must be stored\r\n  flag saying that text must be verified\r\n  Parser recovery states\r\n  Parse infos\r\n  Options\r\n  Results\r\n  Positions\r\n  Flags\r\n  Line pointers\r\n  Identifier stack\r\n  Ast stack\r\n  Init scanner position\r\n  starting '  first '*'\r\n  second '*'\r\n  Init local variables\r\n  Calculate line end (cannot use this.scanner.linePtr as scanner does not parse line ends again)\r\n  consider unicodes\r\n  Read next char only if token was consumed\r\n  Cannot have @ inside inline comment\r\n  flush token cache at line begin\r\n  do not stop the inline tag when error is encountered to get text after\r\n  for DOM AST node, store tag as text in case of invalid syntax\r\n  Start tag parsing only if we are on line beginning or at inline tag beginning\r\n  Fix bug 51650\r\n  Cannot have opening brace in inline comment\r\n  do nothing for space or '*' characters\r\n  Loop on each comment character\r\n  Cannot leave comment inside inline comment\r\n  flush token cache\r\n  should be 2 for (Type,Type,...) or 3 for (Type arg,Type arg,...)\r\n  assume that there won't be more than 20 dimensions...\r\n  May be aborted by specialized parser\r\n  Read argument type reference\r\n  verify position\r\n  verify characters after arguments declaration (expecting white space or end comment)\r\n  Read possible additional type info\r\n  ellipsis declaration\r\n  array declaration\r\n  Read argument name\r\n  verify that no argument name is declared\r\n  verify position\r\n  verify that all arguments name are declared\r\n  Verify token position\r\n  Read separator or end arguments declaration\r\n  verify characters after arguments declaration (expecting white space or end comment)\r\n  Create new argument\r\n  May be aborted by specialized parser\r\n  Create new argument\r\n  May be aborted by specialized parser\r\n  Parse arguments declaration if method reference\r\n  Something wrong happened => Invalid input\r\n  Reset position: we want to rescan last token\r\n  do not report error for @value tag, this will be done after...\r\n  Signal syntax error\r\n  do not update line end\r\n  Skip all characters after string literal until closing '>' (see bug 68726)\r\n  update line end as new lines are allowed in URL description\r\n  Reset position: we want to rescan last token\r\n  do not report error for @value tag, this will be done after...\r\n  Signal syntax error\r\n  Valid href\r\n  Reset position: we want to rescan last token\r\n  do not report error for @value tag, this will be done after...\r\n  Signal syntax error\r\n  Init\r\n  member name may be qualified (inner class constructor reference)\r\n  Look for next token to know whether it's a field or method reference\r\n  Reset position: we want to rescan last token\r\n  Verify character(s) after identifier (expecting space or end comment)\r\n  Get member identifier\r\n  Reset position: we want to rescan last token\r\n  Store current state\r\n  Verify that there are whitespaces after tag\r\n  Get first non whitespace token\r\n  store param name id\r\n  store '<' in identifiers stack as we need to add it to tag element (bug 79809)\r\n  fall through next case to report error\r\n  fall through next case to report error\r\n  when several lines, fall through next case to report problem immediately\r\n  if not valid fall through next case to report error\r\n  if not valid fall through next case to report error\r\n  store param name id\r\n  Get type parameter name\r\n  Get last character of type parameter declaration\r\n  do not accept type parameter declaration on several lines\r\n  if not valid fall through next case to report error\r\n  store '>' in identifiers stack as we need to add it to tag element (bug 79809)\r\n  Scan more tokens for type parameter declaration\r\n  Verify that tag name is well followed by white spaces\r\n  Report problem\r\n  Reset identifier stack if requested\r\n  Scan tokens\r\n  identifiers must be odd tokens\r\n  dots must be even tokens\r\n  Reset position: we want to rescan last token\r\n  fall through default case to raise exception\r\n  cannot leave on a dot\r\n  Reset position: we want to rescan last token\r\n  @see \"string\"\r\n  Currently as javadoc 1.4.2 ignore it, we do the same (see bug 69302)\r\n  String reference are not allowed for @value tag\r\n  verify end line\r\n  @see \"<a href=\"URL#Value\">label<  Currently as javadoc 1.4.2 ignore it, we do the same (see bug 69302)\r\n  String reference are not allowed for @value tag\r\n  verify end line\r\n  @see ...#member\r\n  May be aborted by specialized parser\r\n  Get reference tokens\r\n  Verify that we got a reference\r\n  Reset position at the end of type reference\r\n  In case of @value, we have an invalid reference (only static field refs are valid for this tag)\r\n  See bug https:  Verify that we get white space after reference\r\n  Everything is OK, store reference\r\n  Reset position to avoid missing tokens when new line was encountered\r\n  May be aborted by specialized parser\r\n  TODO (frederic) currently reset to previous position, perhaps signal a syntax error would be more appropriate\r\n  be sure to be on next line (lineEnd is still on the same line)\r\n  after having read a token, line is obviously started...\r\n  do nothing, just an entry point for recovery\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  be sure to be on next line (lineEnd is still on the same line)\r\n  expecting closing brace\r\n  Special case for inline tag\r\n  leave loop\r\n  Whitespace or inline tag closing brace\r\n  End of comment\r\n  valid whatever the number of star before last '  valid only if a star was previous character\r\n  invalid whatever other character, even white spaces\r\n /* FORM FEED               */\r\n /* SPACE                   */\r\n /* (non-Javadoc)\r\n\t * Returns true if tag @deprecated is present in javadoc comment.\r\n\t * \r\n\t * If javadoc checking is enabled, will also construct an Javadoc node, which will be stored into Parser.javadoc\r\n\t * slot for being consumed later on.\r\n\t */\r\n /*\r\n\t * Parse argument in @see tag method reference\r\n\t */\r\n /*\r\n\t * Parse an URL link reference in @see tag\r\n\t */\r\n /* \r\n\t * Parse tag followed by an identifier\r\n\t */\r\n /*\r\n\t * Parse a method reference in @see tag\r\n\t */\r\n /*\r\n\t * Parse @param tag declaration\r\n\t */\r\n /*\r\n\t * Parse a qualified name and built a type reference if the syntax is valid.\r\n\t */\r\n /*\r\n\t * Parse a reference in @see tag\r\n\t */\r\n /*\r\n\t * Parse tag declaration\r\n\t */\r\n /*\r\n\t * Parse @throws tag declaration\r\n\t */\r\n /*\r\n\t * Return current character without move index position.\r\n\t */\r\n /*\r\n\t * push the consumeToken on the identifier stack. Increase the total number of identifier in the stack.\r\n\t */\r\n /*\r\n\t * Add a new obj on top of the ast stack.\r\n\t * If new length is required, then add also a new length in length stack.\r\n\t */\r\n /*\r\n\t * Push a param name in ast node stack.\r\n\t */\r\n /*\r\n\t * Push a reference statement in ast node stack.\r\n\t */\r\n /*\r\n\t * Push a text element in ast node stack\r\n\t */\r\n /*\r\n\t * Push a throws type ref in ast node stack.\r\n\t */\r\n /*\r\n\t * Read current character and move index position.\r\n\t * Warning: scanner position is unchanged using this method!\r\n\t */\r\n /*\r\n\t * Read token only if previous was consumed\r\n\t */\r\n /*\r\n\t * Read token without throwing any InvalidInputException exception.\r\n\t * Returns TerminalTokens.TokenNameERROR instead.\r\n\t */\r\n /*\r\n\t * Refresh start position and length of an inline tag.\r\n\t */\r\n /*\r\n\t * Refresh return statement\r\n\t */\r\n /*\r\n\t * Entry point for recovery on invalid syntax\r\n\t */\r\n /*\r\n\t * Update \r\n\t */\r\n /*\r\n\t * Update line end\r\n\t */\r\n /* FORM FEED               */\r\n /* HORIZONTAL TABULATION   */\r\n /* SPACE                   */\r\n /*\r\n\t * Verify that end of the line only contains space characters or end of comment.\r\n\t * Note that end of comment may be preceeding by several contiguous '*' chars.\r\n\t */\r\n /*\r\n\t * Verify characters after a name matches one of following conditions:\r\n\t * \t1- first character is a white space\r\n\t * \t2- first character is a closing brace *and* we're currently parsing an inline tag\r\n\t * \t3- are the end of comment (several contiguous star ('*') characters may be\r\n\t * \t    found before the last slash ('/') character).\r\n\t */\r\n","IconRegistry":"getAjdeSmallIcon getHideAssociationsIcon getHideNonAJIcon getGranularityIcon getErrorIcon getWarningIcon getInfoIcon getAJBrowserIcon getAJBrowserEnabledIcon getAJBrowserDisabledIcon getPopupIcon getFilterIcon getOrderIcon getRelationsIcon getStartAjdeIcon getStopAjdeIcon getBackIcon getForwardIcon getSearchIcon getBuildIcon getDebugIcon getExecuteIcon getOpenConfigIcon getCloseConfigIcon getOpenIcon getSaveIcon getSaveAllIcon getBrowserOptionsIcon getZoomStructureToFileModeIcon getZoomStructureToGlobalModeIcon getSplitStructureViewIcon getMergeStructureViewIcon getStructureViewIcon getAssociationSwingIcon getStructureIcon getStructureSwingIcon getStructureSwingIcon getAccessibilitySwingIcon convertToSwingIcon createIcon makeIcon RESOURCE_PATH START_AJDE STOP_AJDE BUILD DEBUG EXECUTE AJBROWSER AJBROWSER_ENABLED AJBROWSER_DISABLED STRUCTURE_VIEW HIDE_ASSOCIATIONS HIDE_NON_AJ GRANULARITY AJDE_SMALL ERROR WARNING INFO POPUP FILTER RELATIONS ORDER ZOOM_STRUCTURE_TO_FILE_MODE ZOOM_STRUCTURE_TO_GLOBAL_MODE SPLIT_STRUCTURE_VIEW MERGE_STRUCTURE_VIEW BACK FORWARD SEARCH OPEN_CONFIG CLOSE_CONFIG SAVE SAVE_ALL BROWSER_OPTIONS ACCESSIBILITY_PUBLIC ACCESSIBILITY_PACKAGE ACCESSIBILITY_PROTECTED ACCESSIBILITY_PRIVATE ACCESSIBILITY_PRIVILEGED org.aspectj.ajde.IconRegistry  public static IconRegistry INSTANCE = null;\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","Main":"getBundle buildFileName close compiling endLoggingProblems endLoggingExtraProblems endLoggingSource endLoggingSources endLoggingTasks endTag extractContext flush getFieldName getProblemOptionKey logAverage logClassFile logClasspath logCommandLineArguments logException logIncorrectClasspath logIncorrectEndorsedDirsEntry logIncorrectExtDirsEntry logIncorrectVMVersionForAnnotationProcessing logNoClassFileCreated logNoClasspath logNumberOfClassFilesGenerated logOptions logProblem logProblems logProblemsSummary logProgress logRepetition logTiming logUsage logVersion logWrongJDK logXmlProblem logXmlTask printErr printlnErr printlnErr printlnOut printNewLine printOut printStats printTag setEmacs setLog startLoggingProblems startLoggingExtraProblems startLoggingSource startLoggingSources startLoggingTasks loggingExtraProblems logXmlExtraProblem logExtraProblem errorReportSource compile printVersion compile getLibrariesFiles main tokenize addExtraProblems addNewEntry bind bind bind bind _bind checkVMVersion compile handleWarningToken handleBootclasspath handleClasspath handleExtdirs handleEndorseddirs configure disableWarnings extractDestinationPathFromSourceFile getBatchRequestor getCompilationUnits getHandlingPolicy getJavaHome getLibraryAccess getProblemFactory initialize initialize outputClassFiles performCompilation processClassNames initializeAnnotationProcessorManager printUsage printUsage processPathEntries processPaths hasNoFiles processPaths relocalize relocalize setLocale setDestinationPath setPaths validateOptions main bareMain readMessages renderExceptionForUser parmInArgs flagInArgs appendNLabel getMessageHandler setController runMain checkForCustomMessageHolder run quit setHolder getHolder setCompletionRunner systemExit outMessage report fail handleMessage render isIgnoring dontIgnore getStreamFor ignore getStreamFor init running setDelay incremental commandLineIncremental quit buildFresh doRepeatCommand fileCheckDelay clearState main callAjc callJavadoc decorateHtmlFiles removeDeclIDsFromFile getSourcePath getRootDir createSignatureFile parseCommandLine setSourcepath getSourcepathAsString parseArgs expandAtSignFile qualifiedFile displayHelpAndExit exit handleInternalError getVersion hasAborted getErrors hasShownAjdocUsageMessage setOutputWorkingDir resetOutputWorkingDir Cache CLASS CLASS_FILE CLASSPATH CLASSPATH_FILE CLASSPATH_FOLDER CLASSPATH_ID CLASSPATH_JAR CLASSPATHS COMMAND_LINE_ARGUMENT COMMAND_LINE_ARGUMENTS COMPILER COMPILER_COPYRIGHT COMPILER_NAME COMPILER_VERSION EMACS ERROR ERROR_TAG EXCEPTION EXTRA_PROBLEM_TAG EXTRA_PROBLEMS FIELD_TABLE KEY MESSAGE NUMBER_OF_CLASSFILES NUMBER_OF_ERRORS NUMBER_OF_LINES NUMBER_OF_PROBLEMS NUMBER_OF_TASKS NUMBER_OF_WARNINGS OPTION OPTIONS OUTPUT PACKAGE PATH PROBLEM_ARGUMENT PROBLEM_ARGUMENT_VALUE PROBLEM_ARGUMENTS PROBLEM_CATEGORY_ID ID PROBLEM_ID PROBLEM_LINE PROBLEM_OPTION_KEY PROBLEM_MESSAGE PROBLEM_SEVERITY PROBLEM_SOURCE_END PROBLEM_SOURCE_START PROBLEM_SUMMARY PROBLEM_TAG PROBLEMS SOURCE SOURCE_CONTEXT SOURCE_END SOURCE_START SOURCES STATS TASK TASKS TIME VALUE WARNING XML XML_DTD_DECLARATION err log main out parameters tagBits bundleName DEFAULT_SIZE_CLASSPATH NONE batchCompiler bundle checkedClasspaths compilerLocale compilerOptions destinationPath destinationPaths didSpecifySource didSpecifyTarget encodings exportedClassFilesCounter filenames classNames globalErrorsCount globalProblemsCount globalTasksCount globalWarningsCount javaHomeCache javaHomeChecked lineCount log logger maxProblems noWarn options out proceed proceedOnError produceRefInfo repetitions showProgress startTime systemExitWhenFinished times timesCounter timing verbose expandedCommandLine err extraProblems lineDelta THROWN_PREFIX OUT_OF_MEMORY_MSG MESSAGE_HOLDER_OPTION controller commandName clientHolder ourHandler lastFails lastErrors completionRunner VERBOSE TERSE verbose logStream TAG_FILE_OPTION INCREMENTAL_OPTION MAX_DELAY DEFAULT_DELAY OPTIONS running quit incremental tagFile fileModTime delay buildFresh FAIL_MESSAGE options ajcOptions filenames fileList packageList docModifier sourcepath verboseMode packageMode authorStandardDocletSwitch versionStandardDocletSwitch rootDir declIDTable docDir deleteTempFilesOnExit aborted errors shownAjdocUsageMessage outputWorkingDir internalErrorMessage org.aspectj.org.eclipse.jdt.internal.compiler.batch.Main org.aspectj.tools.ajc.Main org.aspectj.tools.ajdoc.Main  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  To be able to pass the mkdirs() method we need to remove the extra file separator at the end of the outDir name\r\n  token contains the last one\r\n  $NON-NLS-1$\r\n  sanity .....\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  expand to line limits\r\n  trim left and right spaces  copy source\r\n  find out an option name controlling a given problemID\r\n  $NON-NLS-1$\r\n  First we ensure that the outputPath exists\r\n  To be able to pass the mkdirs() method we need to remove the extra file separator at the end of the outDir name\r\n  generate xml output\r\n  generate xml output\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  generate xml\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  new code:\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  ID as field name\r\n  ID as numeric value\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$  insert time stamp as comment\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  sanity .....\r\n  expand to line limits\r\n  trim left and right spaces  copy source\r\n  $NON-NLS-1$\r\n  compute underline\r\n  $NON-NLS-1$   for the '-d none' option (wherever it may be found)\r\n  $NON-NLS-1$\r\n  New AspectJ Extension\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  'xxx  read-only\r\n  be written.\r\n  overrides of destinationPath on a directory argument basis\r\n  we go on anyway\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$   keep == comparison valid\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  we go on anyway\r\n  $NON-NLS-1$\r\n  $NON-NLS-2$   $NON-NLS-1$\r\n  $NON-NLS-2$   AspectJ Extension - static form of bind that just uses the default locale\r\n  $NON-NLS-1$\r\n  by default we don't support a class file version we cannot recognize\r\n  by default we don't support a class file version we cannot recognize\r\n  by default we don't support a class file version we cannot recognize\r\n  1.0 and 1.1\r\n  1.2\r\n  1.3\r\n  1.4\r\n  1.5\r\n  1.6\r\n  1.7\r\n  unknown version\r\n  internal compiler failure\r\n  }\r\n  request compilation\r\n  decode command line arguments\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  if disabling then it's not necessary to set other javadoc options\r\n  $NON-NLS-1$\r\n  if disabling then it's not necessary to set other javadoc options\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  try to get all jars inside the lib folder of the java home\r\n  $NON-NLS-1$\r\n  fall back to try to retrieve them out of the lib directory\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$  no user classpath specified.\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  expand the command line if necessary\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  look for encoding specification\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  ensure encoding is supported\r\n  destination path cannot be specified upon an individual file\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  mentionned warnings are disabled\r\n  but allow multiple warning option on the command line\r\n  $NON-NLS-1$\r\n  deprecation could have also been set through -deprecation option\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  annotation processing\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  tolerated javac options - quietly filtered out\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$  $NON-NLS-1$  $NON-NLS-1$  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$  $NON-NLS-1$  $NON-NLS-1$  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  ensure encoding is supported\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  nothing to do here. This is consumed again by the AnnotationProcessorManager\r\n  nothing to do here. This is consumed again by the AnnotationProcessorManager\r\n  nothing to do here. This is consumed again by the AnnotationProcessorManager\r\n  $NON-NLS-1$\r\n  resize\r\n  anything to be processed here it is an error.\r\n  End AspectJ Extension\r\n  default\r\n  new code:\r\n  see bug https:  $NON-NLS-1$\r\n  in -log mode, dump a dot every 2000 lines compiled\r\n  ensure dumping problems for enqueued units as well, since may contain primary errors (123476)\r\n  exit?\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  stop if there are some errors\r\n  passes the initial set of files to the batch oracle (to avoid finding more than once the same units when case insensitive match)\r\n  $NON-NLS-1$\r\n  retrieve the key and the corresponding classfile\r\n  else leave currentDestinationPath null\r\n  and do not carry a -d none spec, either directly or inherited from Main.\r\n  report a warning\r\n  set the non-externally configurable options.\r\n  cleanup\r\n  check for .class file presence in case of apt processing\r\n  consider names with '.' as fully qualified names\r\n  $NON-NLS-1$\r\n  should not happen\r\n  should not happen\r\n  report a warning\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  state machine\r\n  'path' 'path1[rule];path2'\r\n  'path[rule]' 'path1;path2[rule]'\r\n  'path[rule];' 'path;' 'path1;path2;'\r\n  'path[rule1;'\r\n  'path[' 'path1;path2['\r\n  'path[rule' 'path[rule1;rule2'\r\n  'path[-d bin'\r\n  'path[-d bin]' 'path[rule][-d bin]'\r\n  'path[rule]['\r\n  '.*[.*'\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  else we proceed with a rule\r\n  $NON-NLS-1$\r\n  regular word\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  we go on anyway\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  For AspectJ we handle files in a separate arg parser, in the future make this a protected method for extension\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$  process bootclasspath, classpath and sourcepaths\r\n  default is source 1.3 target 1.2 and compliance 1.4\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  target must be 1.7 if source is 1.7\r\n  $NON-NLS-1$\r\n  target must be 1.6 if source is 1.6\r\n  $NON-NLS-1$\r\n  target must be 1.5 if source is 1.5\r\n  $NON-NLS-1$\r\n  target must be 1.4 if source is 1.4\r\n  $NON-NLS-1$\r\n  target cannot be greater than compliance level\r\n  $NON-NLS-1$\r\n  expecting source >= 1.5\r\n  tolerate jsr14 target\r\n  check and set compliance  for unit testing...\r\n  Urk - default no check for AJDT, enabled here for Ant, command-line\r\n  we can't reasonably continue from this point.\r\n  byte[] b = new byte[100000000]; for testing OoME only!\r\n  try {Thread.sleep(5000); }catch(Exception e) {}\r\n  make sure we handle out of memory gracefully...\r\n  sigh - pluck -noExit\r\n  toss AbortException wrapper\r\n  messages.numMessages(IMessage.FAIL, true);\r\n  messages.numMessages(IMessage.ERROR, false);\r\n  XXX coordinate with MessagePrinter\r\n  XXX \"wrote class file\" messages no eol?\r\n  per Wes' suggestion on dev...\r\n  String[] unused;\r\n  XXX silence for error?\r\n  reset before input request\r\n  result = false;\r\n  seek for one q or a series of [\\n\\r]...\r\n  else, not incremental - false\r\n  final Thread thread = Thread.currentThread();\r\n  1  long curTime;\r\n  in a local sandbox during testing\r\n  add the current directory to the classapth\r\n  create the workingdir if it doesn't exist\r\n  PHASE 0: call ajc\r\n  PHASE 1: generate Signature files (Java with DeclIDs and no bodies).\r\n  PHASE 2: let Javadoc generate HTML (with DeclIDs)\r\n  PHASE 3: add AspectDoc specific stuff to the HTML (and remove the DeclIDS).\r\n  TODO: wrong option to force model gen\r\n  System.out.println(\">> file to ajc: \" + inputFiles[j].getAbsolutePath());\r\n  javadocargs[1] = getSourcepathAsString();\r\n  Remove the decl ids from \"index-all.html\"\r\n  StringBuffer greatly reduces the time it takes to remove generated tags\r\n  !!!\r\n  System.err.println(argList);\r\n  !!!\r\n  makes things easier for ourselves\r\n  used for discrepancy betwen class  !!!\r\n  last element on classpath\r\n  do this for every item in the classpath\r\n  PACKAGE MODE STUFF\r\n  String entryName = arg.substring(arg.lastIndexOf(File.separator)+1);\r\n  correct lists.\r\n  set the default visibility as an option to javadoc option\r\n  strip out any comments of the form # to end of line\r\n  remove extra whitespace that might have crept in\r\n  ignore blank lines\r\n /*\r\n\t * Internal IDE API\r\n\t */\r\n /*\r\n\t * Internal IDE API for test harness purpose\r\n\t */\r\n /* Bundle containing messages */\r\n /*\r\n * Lookup the message with the given ID in this catalog\r\n */\r\n /*\r\n * Lookup the message with the given ID in this catalog and bind its\r\n * substitution locations with the given string.\r\n */\r\n /*\r\n * Lookup the message with the given ID in this catalog and bind its\r\n * substitution locations with the given strings.\r\n */\r\n /*\r\n * Lookup the message with the given ID in this catalog and bind its\r\n * substitution locations with the given string values.\r\n */\r\n /*\r\n *  Low-level API performing the actual compilation\r\n */\r\n /*backward compatible*/\r\n /*backward compatible*/\r\n /*backward compatible*/\r\n /*backward compatible*/\r\n /*backward compatible*/\r\n /*backward compatible*/\r\n /*backward compatible*/\r\n /*\r\n * External API\r\n * Handle a single warning token.\r\n*/\r\n /*\r\n * External API\r\n */\r\n /*\r\n * External API\r\n */\r\n /*\r\n\t * Feed extDirClasspath according to:\r\n\t * - -extdirs first if present;\r\n\t * - else java.ext.dirs if defined;\r\n\t * - else default extensions directory for the platform.\r\n\t */\r\n /*\r\n\t * Feed extdirsClasspath with the entries found into the directories listed by\r\n\t * extdirsNames.\r\n\t */\r\n /*\r\n * External API\r\n * Handle extdirs processing\r\n */\r\n /*\r\n\t * Feed endorsedDirClasspath according to:\r\n\t * - -endorseddirs first if present;\r\n\t * - else java.endorsed.dirs if defined;\r\n\t * - else default extensions directory for the platform. (/lib/endorsed)\r\n\t */\r\n /*\r\n\t * Feed extdirsClasspath with the entries found into the directories listed by\r\n\t * extdirsNames.\r\n\t */\r\n /*\r\n * External API\r\n */\r\n /*\r\nDecode the command line arguments\r\n */\r\n /*\r\n * Answer the component to which will be handed back compilation results from the compiler\r\n */\r\n /*\r\n *  Build the set of compilation source units\r\n */\r\n /*\r\n *  Low-level API performing the actual compilation\r\n */\r\n /*\r\n * External API\r\n */\r\n /*\r\n *  Low-level API performing the actual compilation\r\n */\r\n /*\r\n * External API\r\n */\r\n /*\r\n *  Low-level API performing the actual compilation\r\n */\r\n /*\r\n * External API\r\n */\r\n /*\r\n * External API\r\n */\r\n /*\r\n * External API\r\n */\r\n /*\r\n\t * Feed endorsedDirClasspath according to:\r\n\t * - -extdirs first if present;\r\n\t * - else java.ext.dirs if defined;\r\n\t * - else default extensions directory for the platform.\r\n\t */\r\n /*\r\n\t * Concatenate classpath entries\r\n\t * We put the bootclasspath at the beginning of the classpath\r\n\t * entries, followed by the extension libraries, followed by\r\n\t * the sourcepath followed by the classpath.  All classpath\r\n\t * entries are searched for both sources and binaries except\r\n\t * the sourcepath entries which are searched for sources only.\r\n\t */\r\n /*\r\n * External API\r\n */\r\n /* unused = */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* This section of code handles errors that occur during compilation */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n *     Mik Kersten\t  port to AspectJ 1.1+ code base\r\n * ******************************************************************/\r\n","RecoveredType":"add add add add add bodyEnd bodyStartsAtHeaderEnd enclosingType name parseTree sourceEnd toString updateBodyStart updatedStatement updatedTypeDeclaration updateFromParserState updateOnClosingBrace updateOnOpeningBrace updateParseTree updateSourceEndIfNecessary typeDeclaration memberTypes memberTypeCount fields fieldCount methods methodCount preserveContent bodyEnd insideEnumConstantPart pendingTypeParameters pendingTypeParametersStart org.aspectj.org.eclipse.jdt.internal.compiler.parser.RecoveredType  only used for anonymous types\r\n  an enum constant body can not exist if there is no opening brace\r\n  never happens, as field is always identified\r\n  ignore\r\n  add it to the last method body\r\n  reopen method\r\n  reopen method\r\n  expect one closing brace\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  ignore closed anonymous type\r\n  may need to update the declarationSourceEnd of the last type\r\n  may need to update the declarationSourceEnd of the last field\r\n  may need to update the declarationSourceEnd of the last method\r\n  if was already reduced, then constructor\r\n  awaiting interface type references\r\n  protection for bugs 15142\r\n  anymous type and enum constant doesn't need to be updated\r\n  pretend the brace was already there\r\n  might be an initializer\r\n /* do not consider a method starting passed the type end (if set)\r\n\t\tit must be belonging to an enclosing type */\r\n /* consider that if the opening brace was not found, it is there */\r\n /* if method not finished, then method becomes current */\r\n /* do not consider a field starting passed the type end (if set)\r\n\tit must be belonging to an enclosing type */\r\n /* consider that if the opening brace was not found, it is there */\r\n /* if field not finished, then field becomes current */\r\n /* do not consider a type starting passed the type end (if set)\r\n\t\tit must be belonging to an enclosing type */\r\n /* consider that if the opening brace was not found, it is there */\r\n /* if member type not finished, then member type becomes current */\r\n /*\r\n * Answer the body end of the corresponding parse node\r\n */\r\n /*\r\n * Answer the enclosing type node, or null if none\r\n */\r\n /* \r\n * Answer the associated parsed structure\r\n */\r\n /*\r\n * Answer the very source end of the corresponding parse node\r\n */\r\n /*\r\n * Update the bodyStart of the corresponding parse node\r\n */\r\n /* in presence of an anonymous type, we want the full allocation expression */\r\n /* update member types */\r\n /* update fields */\r\n /* update methods */\r\n /* add clinit ? */\r\n /* should discard previous default construtor */\r\n /* add default constructor ? */\r\n /*\r\n * Update the corresponding parse node from parser state which\r\n * is about to disappear because of restarting recovery\r\n */\r\n /*\r\n * A closing brace got consumed, might have closed the current element,\r\n * in which case both the currentElement is exited\r\n */\r\n /*\r\n\t\t\tif (parser.scanner.searchLineNumber(typeDeclaration.sourceEnd) \r\n\t\t\t\t!= parser.scanner.searchLineNumber(braceEnd)){\r\n\t\t */\r\n /* in case the opening brace is not close enough to the signature, ignore it */\r\n /*\r\n * An opening brace got consumed, might be the expected opening one of the current element,\r\n * in which case the bodyStart is updated.\r\n */\r\n /*\r\n * Update the declarationSourceEnd of the corresponding parse node\r\n */\r\n","IMethodBinding":"isConstructor isDefaultConstructor getName getDeclaringClass getDefaultValue getParameterAnnotations getParameterTypes getReturnType getExceptionTypes getTypeParameters isAnnotationMember isGenericMethod isParameterizedMethod getTypeArguments getMethodDeclaration isRawMethod isSubsignature isVarargs overrides org.aspectj.org.eclipse.jdt.core.dom.IMethodBinding","Or":"accept toString equals hashCode getLeft getRight accept toString equals hashCode getLeft getRight left right left right org.aspectj.weaver.ast.Or org.aspectj.weaver.ast.Or /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","FloatCache":"clear containsKey put putIfAbsent toString keyTable valueTable elementSize org.aspectj.org.eclipse.jdt.internal.compiler.codegen.FloatCache  resize\r\n  resize\r\n  negative when added, assumes value is > 0\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","IBinding":"getAnnotations getKind getName getModifiers isDeprecated isRecovered isSynthetic getJavaElement getKey equals isEqualTo toString PACKAGE TYPE VARIABLE METHOD ANNOTATION MEMBER_VALUE_PAIR org.aspectj.org.eclipse.jdt.core.dom.IBinding","AjBuildNotifier":"setText setProgress setCancelledRequested isCancelledRequested org.aspectj.ajdt.internal.core.builder.AjBuildNotifier  can't delegate to super methods as they throw exception, which is not what we want inside weaver\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.bridge.IProgressListener#setText(java.lang.String)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.bridge.IProgressListener#setProgress(double)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.bridge.IProgressListener#setCancelledRequested(boolean)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.bridge.IProgressListener#isCancelledRequested()\r\n\t */\r\n","ExceptionAttribute":"getExceptionIndexes getExceptionNames getExceptionsNumber exceptionsNumber exceptionNames exceptionIndexes org.aspectj.org.eclipse.jdt.internal.core.util.ExceptionAttribute","MethodGen":"getHighestlinenumber addLocalVariable addLocalVariable removeLocalVariable removeLocalVariables sort getLocalVariables getLocalVariableTable addLineNumber removeLineNumber removeLineNumbers getLineNumbers getLineNumberTable addExceptionHandler removeExceptionHandler removeExceptionHandlers getExceptionHandlers getCodeExceptions addException removeException removeExceptions getExceptions getExceptionTable addCodeAttribute addParameterAnnotationsAsAttribute removeCodeAttribute removeCodeAttributes getCodeAttributes getMethod setMaxLocals getMaxLocals setMaxStack getMaxStack getClassName setClassName setReturnType getReturnType setArgumentTypes getArgumentTypes setArgumentType getArgumentType setArgumentNames getArgumentNames setArgumentName getArgumentName getInstructionList setInstructionList getSignature setMaxStack setMaxLocals stripAttributes push pop visit visited getMaxStack toString copy getAnnotationsOnParameter ensureExistingParameterAnnotationsUnpacked makeMutableVersion addParameterAnnotation getHighestlinenumber addLocalVariable addLocalVariable removeLocalVariable removeLocalVariables sort getLocalVariables getLocalVariableTable addLineNumber removeLineNumber removeLineNumbers getLineNumbers getLineNumberTable addExceptionHandler removeExceptionHandler removeExceptionHandlers getExceptionHandlers getCodeExceptions addException removeException removeExceptions getExceptions getExceptionTable addCodeAttribute addParameterAnnotationsAsAttribute removeCodeAttribute removeCodeAttributes getCodeAttributes getMethod setMaxLocals getMaxLocals setMaxStack getMaxStack getClassName setClassName setReturnType getReturnType setArgumentTypes getArgumentTypes setArgumentType getArgumentType setArgumentNames getArgumentNames setArgumentName getArgumentName getInstructionList setInstructionList getSignature setMaxStack setMaxLocals stripAttributes push pop visit visited getMaxStack toString copy getAnnotationsOnParameter ensureExistingParameterAnnotationsUnpacked makeMutableVersion addParameterAnnotation classname parameterTypes parameterNames maxLocals maxStack il stripAttributes highestLineNumber localVariablesList lineNumbersList exceptionsList throws_vec codeAttributesList param_annotations hasParameterAnnotations haveUnpackedParameterAnnotations target stackDepth branchTargets visitedTargets classname parameterTypes parameterNames maxLocals maxStack il stripAttributes highestLineNumber localVariablesList lineNumbersList exceptionsList throws_vec codeAttributesList param_annotations hasParameterAnnotations haveUnpackedParameterAnnotations target stackDepth branchTargets visitedTargets org.aspectj.apache.bcel.generic.MethodGen org.aspectj.apache.bcel.generic.MethodGen  Indicates whether to produce code attributes for LineNumberTable and LocalVariableTable, like javac -O\r\n  Array of lists containing AnnotationGen objects\r\n  OPTIMIZE implementation of getReturnType() and getArgumentTypes() on Method seems weak\r\n  il.findHandle(end_pc);\r\n  Make it inclusive\r\n  May happen, because end_pc is exclusive\r\n  -\r\n  so move back one... (findHandle can't cope with mid-instruction indices)\r\n  Repair malformed handles\r\n  Lets have a go at creating Tags directly\r\n  abracadabra, lets create tags rather than linenumbergens.\r\n  OPTIMIZE should always use tags and never anything else!\r\n  if (t != Constants.T_ADDRESS) {\r\n  Overwrite if necessary\r\n  Overwrite if necessary\r\n  Swap elements\r\n  Swap elements\r\n  Swap elements\r\n  Every entry takes 8 bytes\r\n  Remove any stale code attribute\r\n  prologue byte code\r\n  exceptions\r\n  attributes\r\n  Add `Exceptions' if there are \"throws\" clauses\r\n  OPTIMIZE why redo this? is there a better way to clean up?\r\n  J5TODO: Remove the annotation attributes that may have been added\r\n  OPTIMIZE dont need clone here? (Type[])arg_types.clone(); }\r\n  check for instructions that terminate the method.\r\n  push next instruction, with stack depth reduced by 1.\r\n  explore all of the select's targets. the default target is handled below.\r\n  nothing to fall through to.\r\n  jsr  choose the next instruction based on whether current is a branch.\r\n  normal case, go to the next instruction.\r\n  if we have no more instructions, see if there are any deferred branches to explore.\r\n  Find attributes that contain parameter annotation data\r\n  Initialize param_annotations\r\n  This returns Annotation[] ...\r\n  ... which needs transforming into an AnnotationGen[] ...\r\n  ... then add these to any we already know about\r\n  Indicates whether to produce code attributes for LineNumberTable and LocalVariableTable, like javac -O\r\n  Array of lists containing AnnotationGen objects\r\n  OPTIMIZE implementation of getReturnType() and getArgumentTypes() on Method seems weak\r\n  il.findHandle(end_pc);\r\n  Make it inclusive\r\n  May happen, because end_pc is exclusive\r\n  -\r\n  so move back one... (findHandle can't cope with mid-instruction indices)\r\n  Repair malformed handles\r\n  Lets have a go at creating Tags directly\r\n  abracadabra, lets create tags rather than linenumbergens.\r\n  OPTIMIZE should always use tags and never anything else!\r\n  if (t != Constants.T_ADDRESS) {\r\n  Overwrite if necessary\r\n  Overwrite if necessary\r\n  Swap elements\r\n  Swap elements\r\n  Swap elements\r\n  Every entry takes 8 bytes\r\n  Remove any stale code attribute\r\n  prologue byte code\r\n  exceptions\r\n  attributes\r\n  Add `Exceptions' if there are \"throws\" clauses\r\n  OPTIMIZE why redo this? is there a better way to clean up?\r\n  J5TODO: Remove the annotation attributes that may have been added\r\n  OPTIMIZE dont need clone here? (Type[])arg_types.clone(); }\r\n  check for instructions that terminate the method.\r\n  push next instruction, with stack depth reduced by 1.\r\n  explore all of the select's targets. the default target is handled below.\r\n  nothing to fall through to.\r\n  jsr  choose the next instruction based on whether current is a branch.\r\n  normal case, go to the next instruction.\r\n  if we have no more instructions, see if there are any deferred branches to explore.\r\n  Find attributes that contain parameter annotation data\r\n  Initialize param_annotations\r\n  This returns Annotation[] ...\r\n  ... which needs transforming into an AnnotationGen[] ...\r\n  ... then add these to any we already know about\r\n /* may be overridden anyway */\r\n /*\r\n   * If the range of the variable has not been set yet, it will be set to be valid from\r\n   * the start to the end of the instruction list.\r\n   * \r\n   * @return array of declared local variables sorted by index\r\n   */\r\n /*\r\n   * @return array of line numbers\r\n   */\r\n /*\r\n   * @return array of declared exception handlers\r\n   */\r\n /*\r\n   * @return array of thrown exceptions\r\n   */\r\n /* Also updates positions of instructions, i.e., their indices\r\n     */\r\n /* Create LocalVariableTable and LineNumberTable attributes (for debuggers, e.g.)\r\n     */\r\n /* Each attribute causes 6 additional header bytes\r\n     */\r\n /* Initially, populate the branch stack with the exception\r\n     * handlers, because these aren't (necessarily) branched to\r\n     * explicitly. in each case, the stack will have depth 1,\r\n     * containing the exception object.\r\n     */\r\n /*AnnotationGen*/\r\n /* may be overridden anyway */\r\n /*\r\n   * If the range of the variable has not been set yet, it will be set to be valid from\r\n   * the start to the end of the instruction list.\r\n   * \r\n   * @return array of declared local variables sorted by index\r\n   */\r\n /*\r\n   * @return array of line numbers\r\n   */\r\n /*\r\n   * @return array of declared exception handlers\r\n   */\r\n /*\r\n   * @return array of thrown exceptions\r\n   */\r\n /* Also updates positions of instructions, i.e., their indices\r\n     */\r\n /* Create LocalVariableTable and LineNumberTable attributes (for debuggers, e.g.)\r\n     */\r\n /* Each attribute causes 6 additional header bytes\r\n     */\r\n /* Initially, populate the branch stack with the exception\r\n     * handlers, because these aren't (necessarily) branched to\r\n     * explicitly. in each case, the stack will have depth 1,\r\n     * containing the exception object.\r\n     */\r\n /*AnnotationGen*/\r\n","ReferenceType":"isCastableTo isAssignmentCompatibleWith getFirstCommonSuperclass fromTypeX addDependentType getSignatureForAttribute isClass isGenericType getGenericSignature getAnnotations addAnnotation hasAnnotation getAnnotationTypes getAnnotationOfType isAspect isAnnotationStyleAspect isEnum isAnnotation isAnonymous isNested getOuterClass getRetentionPolicy isAnnotationWithRuntimeRetention canAnnotationTargetType getAnnotationTargetKinds isCoerceableFrom isCoerceableFromParameterizedType isAssignableFrom isAssignableFrom getSourceContext getSourceLocation isExposedToWeaver getWeaverState getDeclaredFields getDeclaredInterfaces determineThoseTypesToUse getRank getDeclaredMethods getDeclaredPointcuts getTypesForMemberParameterization getRawType getTypeVariables getPerClause getDeclares getTypeMungers getPrivilegedAccesses getModifiers getSuperclass getDelegate setDelegate clearParameterizationCaches getEndPos getStartPos setEndPos setStartPos doesNotExposeShadowMungers getDeclaredGenericSignature setGenericType demoteToSimpleType getGenericType makeParameterizedSignature makeDeclaredSignature isCastableTo isAssignmentCompatibleWith getFirstCommonSuperclass fromTypeX addDependentType getSignatureForAttribute isClass isGenericType getGenericSignature getAnnotations addAnnotation hasAnnotation getAnnotationTypes getAnnotationOfType isAspect isAnnotationStyleAspect isEnum isAnnotation isAnonymous isNested getOuterClass getRetentionPolicy isAnnotationWithRuntimeRetention canAnnotationTargetType getAnnotationTargetKinds isCoerceableFrom isCoerceableFromParameterizedType isAssignableFrom isAssignableFrom getSourceContext getSourceLocation isExposedToWeaver getWeaverState getDeclaredFields getDeclaredInterfaces determineThoseTypesToUse getRank getDeclaredMethods getDeclaredPointcuts getTypesForMemberParameterization getRawType getTypeVariables getPerClause getDeclares getTypeMungers getPrivilegedAccesses getModifiers getSuperclass getDelegate setDelegate clearParameterizationCaches getEndPos getStartPos setEndPos setStartPos doesNotExposeShadowMungers getDeclaredGenericSignature setGenericType demoteToSimpleType getGenericType makeParameterizedSignature makeDeclaredSignature derivativeTypes genericType delegate startPos endPos parameterizedMethods parameterizedFields parameterizedPointcuts parameterizedInterfaces parameterizedDeclares parameterizedTypeMungers derivativeTypes genericType delegate startPos endPos parameterizedMethods parameterizedFields parameterizedPointcuts parameterizedInterfaces parameterizedDeclares parameterizedTypeMungers org.aspectj.apache.bcel.generic.ReferenceType org.aspectj.weaver.ReferenceType org.aspectj.apache.bcel.generic.ReferenceType org.aspectj.weaver.ReferenceType  If this is ever changed in isAssignmentCompatible()\r\n  This is not explicitely stated, but clear. Isn't it?\r\n  'java.io.Serializable'\"\r\n  default.\r\n  this and t are ObjectTypes, see above.\r\n  Waaahh...\r\n  Huh? Did you ask for Type.OBJECT's superclass??\r\n  cached values for members\r\n  ??? should set delegate before any use\r\n  }\r\n  ??? needs to be Methods, not just declared methods? JLS 5.5 unclear\r\n  ??? is this cast\r\n  always safe\r\n  true iff the statement \"this = (ThisType) other\" would compile\r\n  is Sub<Y,Z> coerceable from Base<X> ???\r\n  there's a chance it can be done\r\n  coerceable from e.g. List<T>\r\n  we have to match by parameters one at a time\r\n  look at wildcards...\r\n  ;\r\n  FIXME asc should this say canBeBoundTo??\r\n  pr171952\r\n  true iff the statement \"this = other\" would compile.\r\n  ??? where\r\n  their upper bounds\r\n  equivalent\r\n  getTypesForMemberParameterization();\r\n  What are the type parameters for the supertype?\r\n  outer generic type (see pr129566)\r\n  type ... but I'm not 100% confident right now.\r\n  raw type, use upper bounds of type variables on generic type\r\n  could cache the result here...\r\n  be tidied (result null'd) after previous weaving\r\n  avoids circular updates\r\n  same delegate\r\n  makes sense if someone is specifying that it has a generic form\r\n  If this is ever changed in isAssignmentCompatible()\r\n  This is not explicitely stated, but clear. Isn't it?\r\n  'java.io.Serializable'\"\r\n  default.\r\n  this and t are ObjectTypes, see above.\r\n  Waaahh...\r\n  Huh? Did you ask for Type.OBJECT's superclass??\r\n  cached values for members\r\n  ??? should set delegate before any use\r\n  }\r\n  ??? needs to be Methods, not just declared methods? JLS 5.5 unclear\r\n  ??? is this cast\r\n  always safe\r\n  true iff the statement \"this = (ThisType) other\" would compile\r\n  is Sub<Y,Z> coerceable from Base<X> ???\r\n  there's a chance it can be done\r\n  coerceable from e.g. List<T>\r\n  we have to match by parameters one at a time\r\n  look at wildcards...\r\n  ;\r\n  FIXME asc should this say canBeBoundTo??\r\n  pr171952\r\n  true iff the statement \"this = other\" would compile.\r\n  ??? where\r\n  their upper bounds\r\n  equivalent\r\n  getTypesForMemberParameterization();\r\n  What are the type parameters for the supertype?\r\n  outer generic type (see pr129566)\r\n  type ... but I'm not 100% confident right now.\r\n  raw type, use upper bounds of type variables on generic type\r\n  could cache the result here...\r\n  be tidied (result null'd) after previous weaving\r\n  avoids circular updates\r\n  same delegate\r\n  makes sense if someone is specifying that it has a generic form\r\n /*\r\n\t\t\t * If T is a class type, then this must be the same class as T, or this must be a subclass of T;\r\n\t\t\t */\r\n /*\r\n\t\t\t * If T is an interface type, this must implement interface T.\r\n\t\t\t */\r\n /*\r\n\t\t * If this is a class type then\r\n\t\t */\r\n /*\r\n\t\t\t * If T is a class type, then T must be Object (�2.4.7).\r\n\t\t\t */\r\n /*\r\n\t\t\t * If T is an interface type, then T must be the same interface as this or a superinterface of this (�2.13.2).\r\n\t\t\t */\r\n /*\r\n\t\t * If this is an interface type, then:\r\n\t\t */\r\n /*\r\n\t\t\t * If T is a class type, then T must be Object (�2.4.7).\r\n\t\t\t */\r\n /*\r\n\t\t\t\t * TC and SC are the same primitive type (�2.4.1).\r\n\t\t\t\t */\r\n /*\r\n\t\t\t\t * TC and SC are reference types (�2.4.6), and type SC is assignable to TC by these runtime rules.\r\n\t\t\t\t */\r\n /*\r\n\t\t\t * If T is an array type TC[], that is, an array of components of type TC, then one of the following must be true:\r\n\t\t\t */\r\n /*\r\n\t\t * If this is an array type, namely, the type SC[], that is, an array of components of type SC, then:\r\n\t\t */\r\n /* ReferenceType */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n *     Andy Clement - June 2005 - separated out from ResolvedType\r\n * ******************************************************************/\r\n /*\r\n\t\t\t * If T is a class type, then this must be the same class as T, or this must be a subclass of T;\r\n\t\t\t */\r\n /*\r\n\t\t\t * If T is an interface type, this must implement interface T.\r\n\t\t\t */\r\n /*\r\n\t\t * If this is a class type then\r\n\t\t */\r\n /*\r\n\t\t\t * If T is a class type, then T must be Object (�2.4.7).\r\n\t\t\t */\r\n /*\r\n\t\t\t * If T is an interface type, then T must be the same interface as this or a superinterface of this (�2.13.2).\r\n\t\t\t */\r\n /*\r\n\t\t * If this is an interface type, then:\r\n\t\t */\r\n /*\r\n\t\t\t * If T is a class type, then T must be Object (�2.4.7).\r\n\t\t\t */\r\n /*\r\n\t\t\t\t * TC and SC are the same primitive type (�2.4.1).\r\n\t\t\t\t */\r\n /*\r\n\t\t\t\t * TC and SC are reference types (�2.4.6), and type SC is assignable to TC by these runtime rules.\r\n\t\t\t\t */\r\n /*\r\n\t\t\t * If T is an array type TC[], that is, an array of components of type TC, then one of the following must be true:\r\n\t\t\t */\r\n /*\r\n\t\t * If this is an array type, namely, the type SC[], that is, an array of components of type SC, then:\r\n\t\t */\r\n /* ReferenceType */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n *     Andy Clement - June 2005 - separated out from ResolvedType\r\n * ******************************************************************/\r\n","TypePatternBasedPerClauseImpl":"getTypePattern toString getTypePattern toString typePattern typePattern org.aspectj.internal.lang.reflect.TypePatternBasedPerClauseImpl org.aspectj.internal.lang.reflect.TypePatternBasedPerClauseImpl /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.TypePatternBasedPerClause#getTypePattern()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.TypePatternBasedPerClause#getTypePattern()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","ArrayAccess":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getArray setArray getIndex setIndex memSize treeSize ARRAY_PROPERTY INDEX_PROPERTY PROPERTY_DESCRIPTORS arrayExpression indexExpression org.aspectj.org.eclipse.jdt.core.dom.ArrayAccess  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  must check cycles\r\n  lazy init must be thread-safe for readers\r\n  must check cycles\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","LexStream":"toString readTokenFromScanner token getToken previous next afterEol reset reset badtoken kind name line start end flags isInsideStream toString IS_AFTER_JUMP LBRACE_MISSING kind name start end line flags tokenCacheIndex tokenCacheEOFIndex tokenCache currentIndex scanner intervalStartToSkip intervalEndToSkip intervalFlagsToSkip previousInterval currentInterval org.aspectj.org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#toString()\r\n\t */\r\n","WildAnnotationTypePattern":"getTypePattern matches resolveAnnotationValues matches resolve resolveBindings parameterizeWith write read equals hashCode toString accept getTypePattern matches resolveAnnotationValues matches resolve resolveBindings parameterizeWith write read equals hashCode toString accept typePattern resolved annotationValues VERSION typePattern resolved annotationValues VERSION org.aspectj.weaver.patterns.WildAnnotationTypePattern org.aspectj.weaver.patterns.WildAnnotationTypePattern  PVAL make the location be from start of type pattern to end of values\r\n  - for enums, check the specified values can be resolved in the specified scope\r\n  '?'\r\n  value must be an enum reference X.Y\r\n  from 'Color.RED' to 'Lp  PVAL improve this restriction, would allow '*(value=Color.RED)'\r\n  matched by the typePattern.\r\n  nothing to do...\r\n  rev if ser. form changes\r\n  PVAL\r\n  PVAL make the location be from start of type pattern to end of values\r\n  - for enums, check the specified values can be resolved in the specified scope\r\n  '?'\r\n  value must be an enum reference X.Y\r\n  from 'Color.RED' to 'Lp  PVAL improve this restriction, would allow '*(value=Color.RED)'\r\n  matched by the typePattern.\r\n  nothing to do...\r\n  rev if ser. form changes\r\n  PVAL\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.AnnotationTypePattern#matches(org.aspectj.weaver.AnnotatedElement)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.AnnotationTypePattern#resolve(org.aspectj.weaver.World)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.PatternNode#write(java.io.DataOutputStream)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#toString()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.AnnotationTypePattern#matches(org.aspectj.weaver.AnnotatedElement)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.AnnotationTypePattern#resolve(org.aspectj.weaver.World)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.PatternNode#write(java.io.DataOutputStream)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#toString()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","ICrossReferenceHandler":"addCrossReference addCrossReference org.aspectj.weaver.ICrossReferenceHandler org.aspectj.weaver.ICrossReferenceHandler","LstBuildConfigFileUpdater":"updateBuildConfigFile updateBuildConfigFiles exists exists readConfigFile writeConfigFile getIncludedFiles relativizePath writeConfigFile writeFile org.aspectj.ajde.internal.LstBuildConfigFileUpdater  Set contentsSet = new TreeSet(fileContents);\r\n  List filesToWrite = null;\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n *     Helen Hawkins  Converted to new interface (bug 148190)\r\n * ******************************************************************/\r\n","PrimitiveType":"toString toCode propertyDescriptors internalStructuralPropertiesForType internalGetSetObjectProperty getNodeType0 clone0 subtreeMatch0 accept0 getPrimitiveTypeCode setPrimitiveTypeCode memSize treeSize name INT CHAR BOOLEAN SHORT LONG FLOAT DOUBLE BYTE VOID typeCode CODES PRIMITIVE_TYPE_CODE_PROPERTY PROPERTY_DESCRIPTORS org.aspectj.org.eclipse.jdt.core.dom.PrimitiveType  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  treat Code as free\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","PackageDeclaration":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty internalGetChildListProperty getNodeType0 clone0 subtreeMatch0 accept0 annotations getJavadoc setJavadoc getName setName resolveBinding memSize treeSize equals getElementName getElementType getHandleMementoDelimiter getPrimaryElement toStringInfo JAVADOC_PROPERTY ANNOTATIONS_PROPERTY NAME_PROPERTY PROPERTY_DESCRIPTORS_2_0 PROPERTY_DESCRIPTORS_3_0 optionalDocComment annotations packageName name org.aspectj.org.eclipse.jdt.core.dom.PackageDeclaration org.aspectj.org.eclipse.jdt.internal.core.PackageDeclaration  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  more efficient than just calling unsupportedIn2() to check\r\n  more efficient than just calling unsupportedIn2() to check\r\n  more efficient than just calling unsupportedIn2() to check\r\n  lazy init must be thread-safe for readers\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /*\r\n * @see JavaElement#getPrimaryElement(boolean)\r\n */\r\n /* package */\r\n","AndTypePattern":"couldEverMatchSameTypesAs matchesInstanceof matchesExactly matchesExactly matchesStatically setIsVarArgs setAnnotationTypePattern write read resolveBindings parameterizeWith toString getLeft getRight equals isStarAnnotation hashCode accept traverse couldEverMatchSameTypesAs matchesInstanceof matchesExactly matchesExactly matchesStatically setIsVarArgs setAnnotationTypePattern write read resolveBindings parameterizeWith toString getLeft getRight equals isStarAnnotation hashCode accept traverse left right left right org.aspectj.weaver.patterns.AndTypePattern org.aspectj.weaver.patterns.AndTypePattern  ?? we override all methods that care about includeSubtypes\r\n  don't dive into ands yet....\r\n  ??? if these had side-effects, this sort-circuit could be a mistake\r\n  ?? we override all methods that care about includeSubtypes\r\n  don't dive into ands yet....\r\n  ??? if these had side-effects, this sort-circuit could be a mistake\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","GlobalVariableWrapper":"getInitializer getName getTypeName variable org.aspectj.org.eclipse.jdt.internal.core.eval.GlobalVariableWrapper","AjTypeSystem":"getAjType getAjType ajTypes ajTypes org.aspectj.lang.reflect.AjTypeSystem org.aspectj.lang.reflect.AjTypeSystem  neither key nor value was found\r\n  neither key nor value was found\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","DeclareAnnotation":"getDeclaringType getKind getSignaturePattern getTypePattern getAnnotation getAnnotationAsText hashCode equals toString getAnnotationString isExactPattern getAnnotationMethod toString accept resolve parameterizeWith isAdviceLike setAnnotationString setAnnotationMethod equals hashCode write read matches matches setAspect getAspect copyAnnotationTo getAnnotationX ensureAnnotationDiscovered getTypePattern getSignaturePattern isStarredAnnotationPattern getKind isDeclareAtConstuctor isDeclareAtMethod isDeclareAtType isDeclareAtField getAnnotationTypeX isAnnotationAllowedOnField getPatternAsString couldEverMatch getNameSuffix getDeclaringType getKind getSignaturePattern getTypePattern getAnnotation getAnnotationAsText hashCode equals toString getAnnotationString isExactPattern getAnnotationMethod toString accept resolve parameterizeWith isAdviceLike setAnnotationString setAnnotationMethod equals hashCode write read matches matches setAspect getAspect copyAnnotationTo getAnnotationX ensureAnnotationDiscovered getTypePattern getSignaturePattern isStarredAnnotationPattern getKind isDeclareAtConstuctor isDeclareAtMethod isDeclareAtType isDeclareAtField getAnnotationTypeX isAnnotationAllowedOnField getPatternAsString couldEverMatch getNameSuffix AT_TYPE AT_FIELD AT_METHOD AT_CONSTRUCTOR kind typePattern sigPattern annotationMethod annotationString containingAspect annotation id s AT_TYPE AT_FIELD AT_METHOD AT_CONSTRUCTOR kind typePattern sigPattern annotationMethod annotationString containingAspect annotation id s org.aspectj.lang.reflect.DeclareAnnotation org.aspectj.weaver.patterns.DeclareAnnotation org.aspectj.lang.reflect.DeclareAnnotation org.aspectj.weaver.patterns.DeclareAnnotation  for declare @type\r\n  for declare\r\n  @field,@method,@constructor\r\n  }\r\n  we can update the test as appropriate.\r\n  for declare @type\r\n  for declare\r\n  @field,@method,@constructor\r\n  }\r\n  we can update the test as appropriate.\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see\r\n\t * org.aspectj.weaver.patterns.PatternNode#write(java.io.DataOutputStream)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 IBM Corporation\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Adrian Colyer     initial implementation \r\n *      Andy Clement     got it working\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see\r\n\t * org.aspectj.weaver.patterns.PatternNode#write(java.io.DataOutputStream)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 IBM Corporation\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Adrian Colyer     initial implementation \r\n *      Andy Clement     got it working\r\n * ******************************************************************/\r\n","JavadocReturnStatement":"resolve printStatement traverse traverse org.aspectj.org.eclipse.jdt.internal.compiler.ast.JavadocReturnStatement  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.Statement#resolve(org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BlockScope)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.Statement#printStatement(int, java.lang.StringBuffer)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * Redefine to capture javadoc specific signatures\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode#traverse(org.aspectj.org.eclipse.jdt.internal.compiler.ASTVisitor, org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BlockScope)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * Redefine to capture javadoc specific signatures\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode#traverse(org.aspectj.org.eclipse.jdt.internal.compiler.ASTVisitor, org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BlockScope)\r\n\t */\r\n","StructureViewPanel":"init setCurrentView updateView initView setActiveNode setActiveNode highlightActiveNode jbInit serialVersionUID treeManager currentView border1 border2 tree_ScrollPane structureToolBar_panel borderLayout1 org.aspectj.ajde.ui.swing.StructureViewPanel  if (!(node.getStructureNode() instanceof IProgramElement)) return;\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation\r\n *     Helen Hawkins  Converted to new interface (bug 148190)  \r\n * ******************************************************************/\r\n","CompletionNodeDetector":"containsCompletionNode getCompletionNodeParent endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit endVisit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit endVisit visit searchedNode parent result org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionNodeDetector","IAnnotationComponent":"getComponentNameIndex getComponentName getComponentValue org.aspectj.org.eclipse.jdt.core.util.IAnnotationComponent","DeclareSoft":"getDeclaringType getSoftenedExceptionType getPointcutExpression accept parameterizeWith toString equals hashCode write read getPointcut getException resolve isAdviceLike getNameSuffix getDeclaringType getSoftenedExceptionType getPointcutExpression accept parameterizeWith toString equals hashCode write read getPointcut getException resolve isAdviceLike getNameSuffix exception pointcut exception pointcut org.aspectj.lang.reflect.DeclareSoft org.aspectj.weaver.patterns.DeclareSoft org.aspectj.lang.reflect.DeclareSoft org.aspectj.weaver.patterns.DeclareSoft  a declare soft in a generic abstract aspect, we need to check the upper bound\r\n  ENH 42743 suggests that we don't soften runtime exceptions.\r\n  a declare soft in a generic abstract aspect, we need to check the upper bound\r\n  ENH 42743 suggests that we don't soften runtime exceptions.\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","HashtableOfInt":"containsKey get put rehash size toString keyTable valueTable elementSize threshold org.aspectj.org.eclipse.jdt.internal.compiler.util.HashtableOfInt  to avoid using Enumerations, walk the individual tables skipping nulls\r\n  number of elements in the table\r\n  size represents the expected number of elements\r\n  assumes the threshold is never equal to the size of the table\r\n  double the number of expected elements\r\n  $NON-NLS-1$\r\n  $NON-NLS-2$ ","CreateMethodOperation":"convertASTMethodTypesToSignatures generateElementAST generateResultHandle getASTNodeName getMainTaskName rename verifyNameCollision parameterTypes org.aspectj.org.eclipse.jdt.internal.core.CreateMethodOperation  convert the AST types to signatures\r\n","BcelCflowStackFieldAdder":"munge getMatchingSyntheticMember getSignature matches existsToSupportShadowMunging munge getMatchingSyntheticMember getSignature matches existsToSupportShadowMunging cflowStackField cflowStackField org.aspectj.weaver.bcel.BcelCflowStackFieldAdder org.aspectj.weaver.bcel.BcelCflowStackFieldAdder  StaticInitializer();\r\n  StaticInitializer();\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","CommentRange":"hasAttribute isClosingTag isOpeningTag markHtmlTag markPrefixTag markTagRange move setAttribute trimBegin trimEnd toString fAttributes org.aspectj.org.eclipse.jdt.internal.formatter.comment.CommentRange  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n\t * @see java.lang.Object#toString()\r\n\t * @since 3.1\r\n\t */\r\n","ClasspathMultiDirectory":"equals isExcluded toString sourceFolder inclusionPatterns exclusionPatterns hasIndependentOutputFolder org.aspectj.org.eclipse.jdt.internal.core.builder.ClasspathMultiDirectory  used by builders when walking source folders\r\n  used by builders when walking source folders\r\n  if output folder is not equal to any of the source folders\r\n  handle the case when a state rebuilds a source folder\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","ICodeCompletionRequestor":"acceptClass acceptError acceptField acceptInterface acceptKeyword acceptLabel acceptLocalVariable acceptMethod acceptModifier acceptPackage acceptType org.aspectj.org.eclipse.jdt.core.ICodeCompletionRequestor","TypeConstants":"JAVA LANG IO UTIL ANNOTATION REFLECT LENGTH CLONE GETCLASS OBJECT MAIN SERIALVERSIONUID SERIALPERSISTENTFIELDS READRESOLVE WRITEREPLACE READOBJECT WRITEOBJECT CharArray_JAVA_LANG_OBJECT CharArray_JAVA_LANG_ENUM CharArray_JAVA_LANG_ANNOTATION_ANNOTATION CharArray_JAVA_IO_OBJECTINPUTSTREAM CharArray_JAVA_IO_OBJECTOUTPUTSTREAM CharArray_JAVA_IO_OBJECTSTREAMFIELD ANONYM_PREFIX ANONYM_SUFFIX WILDCARD_NAME WILDCARD_SUPER WILDCARD_EXTENDS WILDCARD_MINUS WILDCARD_STAR WILDCARD_PLUS WILDCARD_CAPTURE_NAME_PREFIX WILDCARD_CAPTURE_NAME_SUFFIX WILDCARD_CAPTURE BYTE SHORT INT LONG FLOAT DOUBLE CHAR BOOLEAN NULL VOID VALUE VALUES VALUEOF UPPER_SOURCE UPPER_CLASS UPPER_RUNTIME ANNOTATION_PREFIX ANNOTATION_SUFFIX TYPE UPPER_FIELD UPPER_METHOD UPPER_PARAMETER UPPER_CONSTRUCTOR UPPER_LOCAL_VARIABLE UPPER_ANNOTATION_TYPE UPPER_PACKAGE JAVA_LANG JAVA_IO JAVA_LANG_ANNOTATION_ANNOTATION JAVA_LANG_ASSERTIONERROR JAVA_LANG_CLASS JAVA_LANG_CLASSNOTFOUNDEXCEPTION JAVA_LANG_CLONEABLE JAVA_LANG_ENUM JAVA_LANG_EXCEPTION JAVA_LANG_ERROR JAVA_LANG_ILLEGALARGUMENTEXCEPTION JAVA_LANG_ITERABLE JAVA_LANG_NOCLASSDEFERROR JAVA_LANG_OBJECT JAVA_LANG_STRING JAVA_LANG_STRINGBUFFER JAVA_LANG_STRINGBUILDER JAVA_LANG_SYSTEM JAVA_LANG_RUNTIMEEXCEPTION JAVA_LANG_THROWABLE JAVA_LANG_REFLECT_CONSTRUCTOR JAVA_IO_PRINTSTREAM JAVA_IO_SERIALIZABLE JAVA_LANG_BYTE JAVA_LANG_SHORT JAVA_LANG_CHARACTER JAVA_LANG_INTEGER JAVA_LANG_LONG JAVA_LANG_FLOAT JAVA_LANG_DOUBLE JAVA_LANG_BOOLEAN JAVA_LANG_VOID JAVA_UTIL_ITERATOR JAVA_LANG_DEPRECATED JAVA_LANG_ANNOTATION_DOCUMENTED JAVA_LANG_ANNOTATION_INHERITED JAVA_LANG_OVERRIDE JAVA_LANG_ANNOTATION_RETENTION JAVA_LANG_SUPPRESSWARNINGS JAVA_LANG_ANNOTATION_TARGET JAVA_LANG_ANNOTATION_RETENTIONPOLICY JAVA_LANG_ANNOTATION_ELEMENTTYPE JAVA_LANG_REFLECT_FIELD JAVA_LANG_REFLECT_METHOD JAVA_IO_OBJECTSTREAMEXCEPTION JAVA_IO_EXTERNALIZABLE JAVA_IO_IOEXCEPTION JAVA_IO_OBJECTOUTPUTSTREAM JAVA_IO_OBJECTINPUTSTREAM CONSTRAINT_EQUAL CONSTRAINT_EXTENDS CONSTRAINT_SUPER OK UNCHECKED MISMATCH INIT CLINIT SYNTHETIC_SWITCH_ENUM_TABLE SYNTHETIC_ENUM_VALUES SYNTHETIC_ASSERT_DISABLED SYNTHETIC_CLASS SYNTHETIC_OUTER_LOCAL_PREFIX SYNTHETIC_ENCLOSING_INSTANCE_PREFIX SYNTHETIC_ACCESS_METHOD_PREFIX PACKAGE_INFO_NAME org.aspectj.org.eclipse.jdt.internal.compiler.lookup.TypeConstants  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Constant compound names\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Actual = Formal\r\n  Actual << Formal\r\n  Actual >> Formal\r\n  Constants used to perform bound checks\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  TODO should rename into TypeNames (once extracted last non name constants)\r\n","MethodInfoWithParameterAnnotations":"getParameterAnnotations initialize reset toStringContent parameterAnnotations org.aspectj.org.eclipse.jdt.internal.compiler.classfmt.MethodInfoWithParameterAnnotations  $NON-NLS-1$\r\n","IdeUIAdapter":"displayStatusInformation org.aspectj.ajde.IdeUIAdapter /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","TypeReference":"analyseCode aboutToResolve baseTypeReference checkBounds copyDims dimensions getLastToken getParameterizedTypeName getTypeBindingPublic getTypeBinding getTypeName isTypeReference resolveSuperType resolveType resolveType resolveType resolveTypeArgument resolveTypeArgument reportInvalidType reportDeprecatedType traverse traverse org.aspectj.org.eclipse.jdt.internal.compiler.ast.TypeReference  allows us to trap completion & selection nodes\r\n  T_long\r\n  T_long\r\n  raise visibility without upsetting rest of hierarchy\r\n  assumes the implementation of resolveType(ClassScope) will call back to detect cycles\r\n  handle the error here\r\n  is a shared type reference which was already resolved\r\n  already reported error\r\n  detected cycle while resolving hierarchy\r\n  handle the error here\r\n  is a shared type reference which was already resolved\r\n  already reported error\r\n  detected cycle while resolving hierarchy\r\n /*\r\n * Answer a base type reference (can be an array of base type).\r\n */\r\n","RegionBasedHierarchyBuilder":"build createTypeHierarchyBasedOnRegion determineOpenablesInRegion injectAllOpenablesForJavaProject injectAllOpenablesForPackageFragment injectAllOpenablesForPackageFragmentRoot org.aspectj.org.eclipse.jdt.internal.core.hierarchy.RegionBasedHierarchyBuilder  optimize access to zip files while building hierarchy\r\n  $NON-NLS-1$\r\n  resolve\r\n  $NON-NLS-1$\r\n","TreeViewBuildConfigEditor":"openFile buildTree saveModel jbInit getModelNode setModelNode mousePressed isCheckBox getTreeCellRendererComponent cancel_button_actionPerformed save_button_actionPerformed serialVersionUID root model selectedEntries borderLayout1 jPanel1 jLabel1 jPanel2 cancel_button borderLayout2 save_button jScrollPane buildConfig_tree serialVersionUID checkBox modelNode tree checkBoxProto width serialVersionUID org.aspectj.ajde.ui.swing.TreeViewBuildConfigEditor  private ConfigTreeNode currNode;\r\n  sourcePath = new File(new File(configFile).getParent());\r\n  jPanel2.add(cancel_button, null);\r\n  if (isCheckBox(x, tree.getPathBounds(path).x)) {\r\n  if (leaf)  {\r\n  if (TreeViewBuildConfigEditor.selectedEntries.contains(ctn.getSourceFile())) {\r\n  }\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation\r\n *     Helen Hawkins  Converted to new interface (bug 148190)  \r\n * ******************************************************************/\r\n","SubstitutionTextReader":"getString computeSubstitution getReader nextChar read read ready close reset setSkipWhitespace isSkippingWhitespace fReader fWasWhiteSpace fCharAfterWhiteSpace fSkipWhiteSpace fReadFromBuffer fBuffer fIndex org.aspectj.org.eclipse.jdt.internal.formatter.comment.SubstitutionTextReader /*\r\n\t * @see Reader#read()\r\n\t */\r\n /*\r\n\t * @see Reader#read(char[],int,int)\r\n\t */\r\n /*\r\n\t * @see java.io.Reader#ready()\r\n\t */\r\n /*\r\n\t * @see Reader#close()\r\n\t */\r\n /*\r\n\t * @see Reader#reset()\r\n\t */\r\n","IDOMPackage":"getName setName org.aspectj.org.eclipse.jdt.core.jdom.IDOMPackage","IBinarySourceProvider":"getBinarySourcesForThisWeave org.aspectj.ajdt.internal.compiler.IBinarySourceProvider /* fileName |-> List<UnwovenClassFile> */\r\n","BcelCflowCounterFieldAdder":"munge getMatchingSyntheticMember getSignature matches existsToSupportShadowMunging toString munge getMatchingSyntheticMember getSignature matches existsToSupportShadowMunging toString cflowCounterField cflowCounterField org.aspectj.weaver.bcel.BcelCflowCounterFieldAdder org.aspectj.weaver.bcel.BcelCflowCounterFieldAdder  Only munge one type!\r\n  Something like: \"public static final CflowCounter ajc$cflowCounter$0;\"\r\n  StaticInitializer();\r\n  Only munge one type!\r\n  Something like: \"public static final CflowCounter ajc$cflowCounter$0;\"\r\n  StaticInitializer();\r\n","PossibleMatch":"cleanUp equals getContents getFileName getMainTypeName getPackageName getQualifiedName getSourceFileName hashCode toString NO_SOURCE_FILE_NAME resource openable nodeSet compoundName parsedUnit document sourceFileName source org.aspectj.org.eclipse.jdt.internal.core.search.matching.PossibleMatch  $NON-NLS-1$\r\n  Even .class files for secondary types and their nested types\r\n  The file is no longer opened to get its name => remove fix for bug 32182\r\n  Class file may have a source file name with \".java\" extension (see bug 73784)\r\n  working copy on a .class file may not have a resource, so use the element name\r\n  get main type name\r\n  $NON-NLS-1$\r\n /*\r\n * Returns the fully qualified name of the main type of the compilation unit\r\n * or the main type of the .java file that defined the class file.\r\n */\r\n /*\r\n * Returns the source file name of the class file.\r\n * Returns NO_SOURCE_FILE_NAME if not found.\r\n */\r\n","CompilationParticipantResult":"reset toString sourceFile hasAnnotations addedFiles deletedFiles problems dependencies org.aspectj.org.eclipse.jdt.internal.core.builder.CompilationParticipantResult  only set during processAnnotations\r\n  added  previously generated source files that should be deleted\r\n  new problems to report against this compilationUnit\r\n  fully-qualified type names of any new dependencies, each name is of the form 'p1.p2.A.B'\r\n  called prior to processAnnotations\r\n","BranchHandle":"getBranchHandle getPosition setPosition updatePosition setTarget updateTarget getTarget setInstruction getBranchHandle getPosition setPosition updatePosition setTarget updateTarget getTarget setInstruction bi bi org.aspectj.apache.bcel.generic.BranchHandle org.aspectj.apache.bcel.generic.BranchHandle  An alias in fact, but saves lots of casts\r\n  An alias in fact, but saves lots of casts\r\n /* Override InstructionHandle methods: delegate to branch instruction.\r\n   * Through this overriding all access to the private i_position field should\r\n   * be prevented.\r\n   */\r\n /* Override InstructionHandle methods: delegate to branch instruction.\r\n   * Through this overriding all access to the private i_position field should\r\n   * be prevented.\r\n   */\r\n","SimpleWordSet":"add includes rehash words elementSize threshold org.aspectj.org.eclipse.jdt.internal.core.util.SimpleWordSet  to avoid using Enumerations, walk the individual values skipping nulls\r\n  number of elements in the table\r\n  size represents the expected number of elements\r\n  assumes the threshold is never equal to the size of the table\r\n  double the number of expected elements\r\n","Flags":"isAbstract isDeprecated isFinal isInterface isNative isPackageDefault isPrivate isProtected isPublic isStatic isSuper isStrictfp isSynchronized isSynthetic isTransient isVolatile isBridge isVarargs isEnum isAnnotation toString AccDefault AccPublic AccPrivate AccProtected AccStatic AccFinal AccSynchronized AccVolatile AccTransient AccNative AccInterface AccAbstract AccStrictfp AccSuper AccSynthetic AccDeprecated AccBridge AccVarargs AccEnum AccAnnotation org.aspectj.org.eclipse.jdt.core.Flags  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","Evaluator":"addEvaluationResultForCompilationProblem evaluationResultsForCompilationProblems getClasses getClassName getCompiler getSource context environment options requestor problemFactory hasErrors org.aspectj.org.eclipse.jdt.internal.eval.Evaluator  Break down the problems and group them by ids in evaluation results\r\n  Copy results\r\n  The requestor collects the class definitions and problems\r\n  Compile compilation unit\r\n  Name of class is name of CU\r\n /* \r\n\t\t\t\r\n\t\t\t\t\tchar[] filename = classFile.fileName();\r\n\t\t\t\t\tint length = filename.length;\r\n\t\t\t\t\tchar[] relativeName = new char[length + 6];\r\n\t\t\t\t\tSystem.arraycopy(filename, 0, relativeName, 0, length);\r\n\t\t\t\t\tSystem.arraycopy(\".class\".toCharArray(), 0, relativeName, length, 6);\r\n\t\t\t\t\tCharOperation.replace(relativeName, '/', java.io.File.separatorChar);\r\n\t\t\t\t\tClassFile.writeToDisk(\"d:/test/snippet\", new String(relativeName), classFile.getBytes());\r\n\t\t\t\t\tString str = \"d:/test/snippet\" + \"/\" + new String(relativeName);\r\n\t\t\t\t\tSystem.out.println(org.aspectj.org.eclipse.jdt.core.tools.classfmt.disassembler.ClassFileDisassembler.disassemble(str));\t\t\t\t\r\n */\r\n","RecoveryScanner":"insertToken reverse insertTokens replaceTokens replaceTokens removeTokens getNextToken getCurrentIdentifierSource getCurrentTokenSourceString getCurrentTokenSource getData isFakeToken isInsertedToken isReplacedToken isPrecededByRemovedToken setData setPendingTokens FAKE_IDENTIFIER data pendingTokens pendingTokensPtr fakeTokenSource isInserted precededByRemoved skipNextInsertedTokens record org.aspectj.org.eclipse.jdt.internal.compiler.parser.RecoveryScanner  $NON-NLS-1$\r\n","JavaCorePreferenceInitializer":"initializeDefaultPreferences org.aspectj.org.eclipse.jdt.internal.core.JavaCorePreferenceInitializer  Get options names set\r\n  compiler defaults\r\n  Override some compiler defaults\r\n  $NON-NLS-1$\r\n  JavaCore settings\r\n  encoding setting comes from resource plug-in\r\n  code formatter defaults\r\n  CodeAssist settings\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Store default values to default preferences\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#initializeDefaultPreferences()\r\n\t */\r\n","OpenableElementInfo":"isStructureKnown setIsStructureKnown isStructureKnown org.aspectj.org.eclipse.jdt.internal.core.OpenableElementInfo","CodeSnippetReturnStatement":"analyseCode generateReturnBytecode generateStoreSaveValueIfNecessary genericTypeArguments isSuperAccess isTypeAccess needValue prepareSaveValueLocation resolve setActualReceiverType setDepth setFieldIndex setResultMethod org.aspectj.org.eclipse.jdt.internal.eval.CodeSnippetReturnStatement  1GH0AU7: ITPJCORE:ALL - Eval - VerifyError in scrapbook page\r\n  output the return bytecode\r\n  push receiver\r\n  swap with expression\r\n  generate wrapper if needed\r\n  generate the expression type\r\n  push null\r\n  void.class\r\n  push the 2 parameters of \"setResult(Object, Class)\"\r\n  generate the invoke virtual to \"setResult(Object,Class)\"\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  fake 'no implicit conversion' (the return type is always void)\r\n  in constant case, the implicit conversion cannot be left uninitialized\r\n","ISourceLocation":"getSourceFile getLine getColumn getOffset getEndLine getContext getSourceFileName getSourceFile getLine getColumn getOffset getEndLine getContext getSourceFileName MAX_LINE MAX_COLUMN NO_FILE NO_COLUMN EMPTY MAX_LINE MAX_COLUMN NO_FILE NO_COLUMN EMPTY org.aspectj.bridge.ISourceLocation org.aspectj.bridge.ISourceLocation /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","LocalVariableAttribute":"getLocalVariableTable getLocalVariableTableLength NO_ENTRIES localVariableTableLength localVariableTable org.aspectj.org.eclipse.jdt.internal.core.util.LocalVariableAttribute","IDOMMethod":"addException addParameter getBody setDefault getDefault getExceptions getTypeParameters getName getParameterNames getParameterTypes getReturnType isConstructor setBody setConstructor setExceptions setTypeParameters setName setParameters setReturnType org.aspectj.org.eclipse.jdt.core.jdom.IDOMMethod","IRelationshipMap":"get get get get get put put remove removeAll clear getEntries get get get get get put put remove removeAll clear getEntries org.aspectj.asm.IRelationshipMap org.aspectj.asm.IRelationshipMap /*IRelationship*/\r\n /*IRelationship*/\r\n /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n * ******************************************************************/\r\n /*IRelationship*/\r\n /*IRelationship*/\r\n /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n * ******************************************************************/\r\n","SubTypeSearchJob":"finished search indexes org.aspectj.org.eclipse.jdt.internal.core.search.SubTypeSearchJob","LineNumberAttribute":"getLineNumberTable getLineNumberTableLength NO_ENTRIES lineNumberTableLength lineNumberTable org.aspectj.org.eclipse.jdt.internal.core.util.LineNumberAttribute","TypeDeclarationLocator":"match resolveLevel resolveLevel resolveLevelForType toString pattern org.aspectj.org.eclipse.jdt.internal.core.search.matching.TypeDeclarationLocator  can be a QualifiedTypeDeclarationPattern\r\n  public int match(Reference node, MatchingNodeSet nodeSet) - SKIP IT\r\n  nothing\r\n  fully qualified name\r\n  case of an import reference while searching for ALL_OCCURENCES of a type (see bug 37166)\r\n  pattern was created from a Java element: qualification is the package name.\r\n  $NON-NLS-1$\r\n","NamedMember":"appendTypeParameters getElementName getKey getKey getKey getFullyQualifiedParameterizedName getPackageFragment getFullyQualifiedName getTypeQualifiedName getTypeParameters name org.aspectj.org.eclipse.jdt.internal.core.NamedMember  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  declaring class\r\n  field name\r\n  declaring class\r\n  selector\r\n  type parameters\r\n  parameters\r\n  return type\r\n  remove .class\r\n  top level class file: name of type is same as name of class file\r\n /*\r\n\t * This element's name, or an empty <code>String</code> if this\r\n\t * element does not have a name.\r\n\t */\r\n","AbortCompilationUnit":"serialVersionUID encoding org.aspectj.org.eclipse.jdt.internal.compiler.problem.AbortCompilationUnit  backward compatible\r\n /*\r\n * Special unchecked exception type used \r\n * to abort from the compilation process\r\n *\r\n * should only be thrown from within problem handlers.\r\n */\r\n","ThrowsPattern":"getRequired getForbidden toString equals hashCode resolveBindings parameterizeWith matches matchesAny read write accept traverse getRequired getForbidden toString equals hashCode resolveBindings parameterizeWith matches matchesAny read write accept traverse required forbidden ANY required forbidden ANY org.aspectj.weaver.patterns.ThrowsPattern org.aspectj.weaver.patterns.ThrowsPattern  int len = types.length;\r\n  XXXret.readLocation(context, s);\r\n  int len = types.length;\r\n  XXXret.readLocation(context, s);\r\n /*name -> resolved type*/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /*name -> resolved type*/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","MatchLocator":"visit toString addWorkingCopies setFocus workingCopiesThatCanSeeFocus classFileReader createAndPattern findIndexMatches getProjectOrJar projectOrJarFocus accept accept accept basicParser cacheBinaryType computeSuperTypeNames createHandle createBinaryMethodHandle createMethodHandle createHandle createHandle createHierarchyResolver createImportHandle createPackageDeclarationHandle createTypeHandle encloses findLastTypeArgumentInfo getBinaryInfo getFocusType getMethodBodies getType getMethodBinding hasAlreadyDefinedType initialize locateMatches locateMatches locateMatches locatePackageDeclarations locatePackageDeclarations lookupType newDeclarationMatch newDeclarationMatch newFieldReferenceMatch newLocalVariableReferenceMatch newMethodReferenceMatch newPackageReferenceMatch newTypeParameterReferenceMatch newTypeReferenceMatch newTypeReferenceMatch parseAndBuildBindings process purgeMethodStatements reduceParseTree getParticipant report reportAccurateTypeReference reportAccurateParameterizedMethodReference reportAccurateParameterizedTypeReference reportAccurateEnumConstructorReference reportAccurateFieldReference reportBinaryMemberDeclaration reportMatching reportMatching reportMatching reportMatching reportMatching reportMatching reportMatchingSuper typeInHierarchy MAX_AT_ONCE pattern patternLocator matchContainer requestor scope progressMonitor workingCopies handleFactory allSuperTypeNames parser basicParser nameEnvironment nameLookup lookupEnvironment hierarchyResolver options numberOfMatches matchesToProcess currentPossibleMatch resultCollectorTime progressStep progressWorked unitScope bindings methodHandles enclosingElement enclosingElementBinding nodeSet occurrencesCounts workingCopy serialVersionUID coreException current org.aspectj.org.eclipse.jdt.internal.core.search.matching.MatchLocator  permanent state\r\n  cache of all super type names if scope is hierarchy scope\r\n  the following is valid for the current project\r\n  (numberOfMatches - 1) is the last unit in matchesToProcess\r\n  Progress information\r\n  Binding resolution and cache\r\n  Cache for method handles\r\n  key = class name (char[]), value = occurrenceCount (int)\r\n  don't visit members as this was done during reportMatching(...)\r\n  $NON-NLS-1$\r\n  backward compatible\r\n  working copies take precedence over corresponding compilation units\r\n  no working copy\r\n  $NON-NLS-1$\t  Switch the current policy and compilation result for this unit to the requested one.\r\n  want to abort enclosing request to compile\r\n  one requested further along to resolve sourceUnit.\r\n  Display unit error in debug mode\r\n  case of SearchableEnvironment of an IJavaProject is used\r\n  need field and methods\r\n  need member types\r\n  no need for field initialization\r\n  get source\r\n  cache enclosing types first, so that binary type can be found in lookup enviroment\r\n  it was already cached as a result of a previous query\r\n  if the binding could be found and if it comes from a binary type\r\n  clone MatchLocator so that it has no side effect\r\n  fall thru if its a constructor with a synthetic argument... find it the slower way\r\n  build arguments names\r\n  see https:  invalid type name\r\n  return binary method\r\n  see bug https:  find occurence count of the given initializer in its type declaration\r\n  cache focus type if not a possible match\r\n  cache all types in the focus' compilation unit (even secondary types)\r\n  resolve focus type\r\n  $NON-NLS-1$\r\n  binary types do not contain import statements so just answer the top-level type as the element\r\n  answer only top-level types, sometimes the classFile is for a member  type name may be null for anonymous (see bug https:  Get last list of type arguments for parameterized qualified type reference\r\n  Get last type argument for single type reference of last list of argument of parameterized qualified type reference\r\n  Current type reference is not parameterized. So, it is the last type argument\r\n  reuse the info from the java model cache\r\n  create a temporary info\r\n  e.printStackTrace();\r\n  class file in a directory\r\n  class file in a jar\r\n  if initial diet parse did not work, no need to dig into method bodies.\r\n  see bug 47079 for more details\r\n  line separator positions array.\r\n  Try to get binding from cache\r\n  Get binding from unit scope\r\n  Try to get binding from cache\r\n  Get binding from unit scope\r\n  type variable\r\n  param erasure match\r\n  when only one possible match (bug 58581)\r\n  only for this possible match and its required types.\r\n  create lookup environment\r\n  $NON-NLS-1$\r\n  see bug https:  remember project's name lookup\r\n  initialize queue of units\r\n  create and resolve binding (equivalent to beginCompilation() in Compiler)\r\n  to minimize side effect on previous search behavior\r\n  which may have been modified while locator was adding possible matches to it\r\n  Currently we only need to resolve over pattern flag if there's potential parameterized types\r\n  forget last possible match as it was processed\r\n  whether we need to process compilation unit now or later\r\n  create hierarchy resolver if needed\r\n  focus type is not visible, use the super type names instead of the bindings\r\n  release reference to processed possible match\r\n  continue and try next matching openable reporting innacurate matches (since bindings will be null)\r\n  continue and try next matching openable reporting innacurate matches (since bindings will be null)\r\n  cleanup compilation unit result\r\n  possible match resolution\r\n  increase progress from duplicate matches not stored in matchSet while adding...\r\n  locate matches (processed matches are limited to avoid problem while using VM default memory heap size)\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  init infos for progress increasing\r\n  step should not be 0\r\n  extract working copies\r\n  optimize access to zip files during search operation\r\n  initialize handle factory (used as a cache of handles so as to optimize space)\r\n  $NON-NLS-1$\r\n  initialize pattern for polymorphic search (ie. method reference pattern)\r\n  progress worked displayed\r\n  skip duplicate paths\r\n  free current document\r\n  match is outside classpath\r\n  create new parser and lookup environment if this is a new project\r\n  case of a file in an external jar\r\n  locate matches in previous project\r\n  last project\r\n  Verify that project belongs to the scope\r\n  Get all project package fragment names\r\n  case of a file in an external jar\r\n  Report matches avoiding duplicate names\r\n  iterate type lookup in each package fragment\r\n  search inside enclosing element\r\n  find the top-level type\r\n  *  $NON-NLS-1$\r\n  skip type has it is hidden so not visible\r\n  => we need to build types for this compilation unit\r\n  add the possibleMatch with its parsedUnit to matchesToProcess\r\n  do not resolve when cu has errors\r\n  problem with class path\r\n  there's no longer generics in class files\r\n  skip type has it is hidden so not visible\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  fault in fields & methods\r\n  remove statements from methods that have no possible matching nodes\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Compute source positions of the qualified reference\r\n  Report match\r\n  If there's type arguments, look for end (ie. char '>') of last one.\r\n  Initialize scanner\r\n  Search previous opening '<'\r\n  Report match\r\n  If there's type arguments, look for end (ie. char '>') of last one.\r\n  Initialize scanner\r\n  Set scanner position at end of last type argument\r\n  Now, scan to search next closing '>'\r\n  if pattern is erasure only, then select the end of the reference\r\n  Report match\r\n  Verify that field declaration is really an enum constant\r\n  Get scan area\r\n  Scan to find last closing parenthesis\r\n  Report match\r\n  there's nothing to accurate in this case\r\n  compute source positions of the qualified reference\r\n  read token\r\n  read '.'\r\n  accept reference\r\n  compute source positions of the selector\r\n  Use type for match associated element as default constructor does not exist in source\r\n  handle nodes for the local type first\r\n  report the type parameters\r\n  report annotations\r\n  references in this method\r\n  Look for annotation type ref\r\n  Look for attribute ref\r\n  Look for reference inside annotation\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  move the possible matching nodes that exactly match the search pattern to the matching nodes set\r\n  import ref cannot be in the hierarchy of a type\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  no matching nodes were found\r\n  report references in javadoc\r\n  reported all the matching nodes\r\n  Clear handle cache\r\n  handle the nodes for the local type first\r\n  report annotations\r\n  not necessary if field is an initializer\r\n  Look at field declaration\r\n  Look in initializer\r\n  use field declaration to report match (see bug https:  Set block scope for initializer in case there would have other local and other elements to report\r\n  create type handle\r\n  report the type declaration\r\n  report the type parameters\r\n  report annotations\r\n  report references in javadoc\r\n  super types\r\n  filter out element not in hierarchy scope\r\n  Visit fields\r\n  end as all matching nodes were reported\r\n  Store first index of multiple field declaration\r\n  Single field, report normally\r\n  Store all multiple fields but first one for other elements\r\n  On last field, report match with all other elements\r\n  Visit methods\r\n  end as all matching nodes were reported\r\n  Visit types\r\n  end as all matching nodes were reported\r\n  not a hierarchy scope\r\n /*\r\n * Time spent in the IJavaSearchResultCollector\r\n */\r\n /*\r\n * Returns the working copies that can see the given focus.\r\n */\r\n /*no rule*/\r\n /*no kind*/\r\n /*\r\n * Caches the given binary type in the lookup environment and returns it.\r\n * Returns the existing one if already cached.\r\n * Returns null if source type binding was cached.\r\n */\r\n /*\r\n * Computes the super type names of the focus type if any.\r\n */\r\n /*\r\n * Create binary method handle\r\n */\r\n /*\r\n * Create method handle.\r\n * Store occurences for create handle to retrieve possible duplicate ones.\r\n */\r\n /*\r\n * Creates hierarchy resolver if needed. \r\n * Returns whether focus is visible.\r\n */\r\n /* (non-Javadoc)\r\n * Return info about last type argument of a parameterized type reference.\r\n * These info are made of concatenation of 2 int values which are respectively\r\n *  depth and end position of the last type argument.\r\n * For example, this method will return 0x300000020 for type ref List<List<List<String>>>\r\n * if end position of type reference \"String\" equals 32.\r\n */\r\n /*\r\n * Process a compilation unit already parsed and build.\r\n */\r\n /*no binding*/\r\n /*no binding*/\r\n","Label":"place codeStream position POS_NOT_SET org.aspectj.org.eclipse.jdt.internal.compiler.codegen.Label  position=POS_NOT_SET Then it's pos is not set.\r\n /*\r\n* Place the label target position.\r\n*/\r\n","ProblemReasons":"NoError NotFound NotVisible Ambiguous InternalNameProvided InheritedNameHidesEnclosingName NonStaticReferenceInConstructorInvocation NonStaticReferenceInStaticContext ReceiverTypeNotVisible IllegalSuperTypeVariable ParameterBoundMismatch TypeParameterArityMismatch ParameterizedMethodTypeMismatch TypeArgumentsForRawGenericMethod InvalidTypeForStaticImport org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ProblemReasons  used if an internal name is used in source\r\n  for generic method\r\n  for generic method\r\n  for generic method\r\n  for generic method\r\n","SingleTypeRequestor":"acceptField acceptInitializer acceptMemberType acceptMethod acceptPackageFragment acceptType getType isCanceled reset fElement org.aspectj.org.eclipse.jdt.internal.core.SingleTypeRequestor /* package */\r\n","CodeSnippetClassFile":"createProblemType org.aspectj.org.eclipse.jdt.internal.eval.CodeSnippetClassFile  generate the magic numbers inside the header\r\n  minor high\r\n  minor low\r\n  major high\r\n  major low\r\n  class or enum\r\n  clear Acc_Static\r\n  clear Acc_Private and Acc_Public\r\n  clear Acc_Protected and set Acc_Public\r\n  clear Acc_Strictfp\r\n  now we continue to generate the bytes inside the contents array\r\n  1FF9ZBU: LFCOM:ALL - Local variable attributes busted (Sanity check)\r\n  inner attributes\r\n  add its fields\r\n  we have to set the number of fields to be equals to 0\r\n  leave some space for the methodCount\r\n  add its user defined methods\r\n  which should contain all the problem\r\n  add abstract methods\r\n  propagate generation of (problem) member types\r\n","JavadocParser":"checkDeprecation createArgumentReference createFieldReference createMethodReference createReturnStatement createTag createTypeReference getParsedTypeDeclaration parseReturn parseSimpleTag parseTag pushParamName pushSeeRef pushThrowName refreshReturnStatement toString updateDocComment docComment invalidParamReferencesPtr invalidParamReferencesStack validValuePositions invalidValuePositions org.aspectj.org.eclipse.jdt.internal.compiler.parser.JavadocParser  Public fields\r\n  Store param references for tag with invalid syntax\r\n  Store value tag positions\r\n  Store javadoc positions\r\n  Init javadoc if necessary\r\n  If there's no tag in javadoc, return without parsing it\r\n  release source as soon as finished\r\n  Parse comment\r\n  scan line per line, since tags must be at beginning of lines only\r\n  skip leading   remove trailing *   consider unicodes\r\n  do nothing for space or '*' characters\r\n  Initialization\r\n  Parse\r\n  set isVarArgs\r\n  Get receiver type\r\n  Create field\r\n  Get receiver type\r\n  Decide whether we have a constructor or not\r\n  may be > 0 for member class constructor reference\r\n  Create node\r\n  Qualified Type ref\r\n  Single Type ref\r\n  type declaration currenly parsed\r\n  readChar() code is inlined to balance additional method call in checkDeprectation(int)\r\n  ensure the tag is properly ended: either followed by a space, a tab, line end or asterisk.\r\n  switch on first tag char\r\n  Read tag name\r\n  break for '*' as this is perhaps the end of comment (bug 65288)\r\n  allowed in tag names as this character is often used in doclets (bug 68087)\r\n  !, \", #, %, &, ', -, :, <, >, * chars and spaces are not allowed in tag names\r\n  (see bug https:  may happen for some parser (completion for example)\r\n  Decide which parse to perform depending on tag name\r\n  TODO (frederic) reconsider parameter value when @category will be significant in spec\r\n  and so is enough as it is only this parser which signals the missing tag warnings...\r\n  Cannot have @link outside inline comment\r\n  Cannot have @see inside inline comment\r\n  Create param reference\r\n  store invalid param references in specific array\r\n  do not verify for type parameters as @throws may be invalid tag (when declared in class)\r\n  Verify that no @throws has been declared before\r\n  previous push was a @param tag => push another param name\r\n  previous push was a @see tag => push new param name\r\n  First push\r\n  Push ref on stack\r\n  previous push was a @param tag => push empty @throws tag and new @see tag\r\n  previous push was a @throws tag => push new @see tag\r\n  previous push was a @see tag => push another @see tag\r\n  First push\r\n  previous push was a @param tag => push new @throws tag\r\n  previous push was a @throws tag => push another @throws tag\r\n  previous push was a @see tag => push empty @param and new @throws tags\r\n  First push\r\n  $NON-NLS-1$   $NON-NLS-1$   Set positions\r\n  Set return node if present\r\n  Copy array of invalid syntax param tags\r\n  If no nodes stored return\r\n  Initialize arrays\r\n  Then continuing with class names (eg. TypeReference) coming from @throw  Finally, finishing with parameters nales (ie. Argument) coming from @param declaration\r\n  Starting with the stack top, so get references (eg. Expression) coming from @see declarations\r\n  Store nodes in arrays\r\n  there both of references => resize arrays\r\n  there's no names references\r\n  there's no type parameters references\r\n  Resize param tag references arrays\r\n /* FORM FEED               */\r\n /* SPACE                   */\r\n /* HORIZONTAL TABULATION   */\r\n /* LINE FEED   */\r\n /* (non-Javadoc)\r\n\t * Returns true if tag @deprecated is present in javadoc comment.\r\n\t * \r\n\t * If javadoc checking is enabled, will also construct an Javadoc node, which will be stored into Parser.javadoc\r\n\t * slot for being consumed later on.\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser#createArgumentReference(char[], java.lang.Object, int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser#createFieldReference()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser#createMethodReference(java.lang.Object[])\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser#createReturnStatement()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser#parseTagName()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser#createTypeReference()\r\n\t */\r\n /*\r\n\t * Get current parsed type declaration.\r\n\t */\r\n /*\r\n\t * Parse @return tag declaration\r\n\t */\r\n /* verify characters after return tag (we're expecting text description)\r\n\t\t\t\tif(!verifyCharsAfterReturnTag(this.index)) {\r\n\t\t\t\t\tif (this.sourceParser != null) {\r\n\t\t\t\t\t\tint end = this.starPosition == -1 || this.lineEnd<this.starPosition ? this.lineEnd : this.starPosition;\r\n\t\t\t\t\t\tthis.sourceParser.problemReporter().javadocEmptyReturnTag(this.tagSourceStart, end);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t*/\r\n /*\r\n\t * Push a param name in ast node stack.\r\n\t */\r\n /*\r\n\t * Push a reference statement in ast node stack.\r\n\t */\r\n /*\r\n\t * Push a throws type ref in ast node stack.\r\n\t */\r\n /*\r\n\t * Refresh return statement\r\n\t */\r\n /*\r\n\t * Fill associated comment fields with ast nodes information stored in stack.\r\n\t */\r\n","CompilationUnitSorter":"checkASTLevel sort sort RELATIVE_ORDER org.aspectj.org.eclipse.jdt.core.util.CompilationUnitSorter  $NON-NLS-1$\r\n","ITypeHierarchy":"addTypeHierarchyChangedListener contains exists getAllClasses getAllInterfaces getAllSubtypes getAllSuperclasses getAllSuperInterfaces getAllSupertypes getAllTypes getCachedFlags getExtendingInterfaces getImplementingClasses getRootClasses getRootInterfaces getSubclasses getSubtypes getSuperclass getSuperInterfaces getSupertypes getType refresh removeTypeHierarchyChangedListener store org.aspectj.org.eclipse.jdt.core.ITypeHierarchy","SearchEngine":"acceptSearchMatch beginReporting endReporting acceptType createHierarchyScope createHierarchyScope createJavaSearchScope createJavaSearchScope createJavaSearchScope createJavaSearchScope createOrSearchPattern createSearchPattern createSearchPattern createTypeNameMatch createWorkspaceScope getDefaultSearchParticipant search search search search searchAllTypeNames searchAllTypeNames searchAllTypeNames searchAllTypeNames searchAllTypeNames searchAllTypeNames searchAllTypeNames searchDeclarationsOfAccessedFields searchDeclarationsOfAccessedFields searchDeclarationsOfReferencedTypes searchDeclarationsOfReferencedTypes searchDeclarationsOfSentMessages searchDeclarationsOfSentMessages pattern resultCollector nameRequestor basicEngine org.aspectj.org.eclipse.jdt.core.search.SearchEngine  Search engine now uses basic engine functionalities\r\n","IVerificationRequired":"verify verify org.aspectj.weaver.patterns.IVerificationRequired org.aspectj.weaver.patterns.IVerificationRequired /* *******************************************************************\r\n * Copyright (c) 2006 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement IBM     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2006 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement IBM     initial implementation \r\n * ******************************************************************/\r\n","TreeStructureViewBuilder":"buildView addPackageNode createViewNode isFileView acceptGranularity acceptNode sortView buildCustomTree getRoots acceptNodeAsRoot getInheritanceChildren getCrosscuttingChildren compare compare nodeFactory ALPHABETICAL_COMPARATOR DECLARATIONAL_COMPARATOR org.aspectj.ajde.ui.internal.TreeStructureViewBuilder  StructureViewProperties properties = view.getViewProperties();\r\n  boolean noStructure = false;\r\n  modelRoot;\r\n  }\r\n  new TreeViewNode(root, null, children);\r\n  List relations = ((IProgramElement)node).getRelations();\r\n  List relations = ((IProgramElement)node).getRelations();\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","PointcutParameter":"getName getType getBinding getName getType getBinding org.aspectj.weaver.tools.PointcutParameter org.aspectj.weaver.tools.PointcutParameter /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","ILocalVariableTypeTableAttribute":"getLocalVariableTypeTableLength getLocalVariableTypeTable org.aspectj.org.eclipse.jdt.core.util.ILocalVariableTypeTableAttribute","OptionsFrame":"addOptionsPanel removeOptionsPanel showPanel saveOptions close apply_button_actionPerformed ok_button_actionPerformed cancel_button_actionPerformed jbInit serialVersionUID ABOUT_TEXT main_tabbedPane button_panel apply_button cancel_button ok_button titledBorder1 titledBorder2 titledBorder3 titledBorder4 titledBorder5 titledBorder6 titledBorder7 border4 titledBorder8 border5 titledBorder9 titledBorder10 border7 titledBorder11 border8 titledBorder12 about_panel borderLayout9 jTextArea1 jPanel1 version_label jLabel1 borderLayout1 border9 built_label org.aspectj.ajde.ui.swing.OptionsFrame  XXX using \\n b  private Border border1;\r\n  private Border border2;\r\n  private Border border3;\r\n  private Border border6;\r\n  private ButtonGroup views_buttonGroup = new ButtonGroup();\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation\r\n *     Helen Hawkins  Converted to new interface (bug 148190)  \r\n * ******************************************************************/\r\n","DefaultWorkingCopyOwner":"createBuffer toString primaryBufferProvider PRIMARY org.aspectj.org.eclipse.jdt.internal.core.DefaultWorkingCopyOwner  $NON-NLS-1$\r\n","ClasspathSourceJar":"findClass findClass encoding org.aspectj.org.eclipse.jdt.internal.compiler.batch.ClasspathSourceJar  most common case\r\n","ConfigurableOption":"getCategory getComponentName getCurrentValueIndex getDescription getID getName getPossibleValues setValueIndex toString getOptionName componentName optionName id category name description currentValueIndex possibleValues NoDiscreteValue org.aspectj.org.eclipse.jdt.internal.compiler.ConfigurableOption  the <currentValueIndex> is the actual value\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$  /* display possible values */\r\n","Binding":"kind computeUniqueKey computeUniqueKey getAnnotationTagBits initializeDeprecatedAnnotationTagBits isValidBinding problemId readableName shortReadableName FIELD LOCAL VARIABLE TYPE METHOD PACKAGE IMPORT ARRAY_TYPE BASE_TYPE PARAMETERIZED_TYPE WILDCARD_TYPE RAW_TYPE GENERIC_TYPE TYPE_PARAMETER NO_TYPES NO_PARAMETERS NO_EXCEPTIONS ANY_EXCEPTION NO_FIELDS NO_METHODS NO_SUPERINTERFACES NO_MEMBER_TYPES NO_TYPE_VARIABLES NO_ANNOTATIONS NO_ELEMENT_VALUE_PAIRS org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Binding  binding kinds\r\n  Shared binding collections\r\n  special handler for all exceptions\r\n  TODO (philippe) should rename into problemReason()\r\n /*\r\n\t* Answer the receiver's binding type from Binding.BindingID.\r\n\t*/\r\n /*\r\n\t * Computes a key that uniquely identifies this binding.\r\n\t * Returns null if binding is not a TypeBinding, a MethodBinding, a FieldBinding or a PackageBinding.\r\n\t */\r\n /*\r\n\t * Computes a key that uniquely identifies this binding. Optinaly include access flags.\r\n\t * Returns null if binding is not a TypeBinding, a MethodBinding, a FieldBinding or a PackageBinding.\r\n\t */\r\n /* API\r\n\t* Answer true if the receiver is not a problem binding\r\n\t*/\r\n /* Answer a printable representation of the receiver.\r\n\t*/\r\n /* Shorter printable representation of the receiver (no qualified type)\r\n\t */\r\n","JavaConventions":"isOverlappingRoots scannedIdentifier validateCompilationUnitName validateCompilationUnitName validateClassFileName validateClassFileName validateFieldName validateFieldName validateIdentifier validateIdentifier validateImportDeclaration validateImportDeclaration validateJavaTypeName validateJavaTypeName validateMethodName validateMethodName validatePackageName validatePackageName validateClasspath validateClasspathEntry validateTypeVariableName validateTypeVariableName DOT PACKAGE_INFO SCANNER org.aspectj.org.eclipse.jdt.core.JavaConventions  Set scanner for given source and compliance levels\r\n  to handle case where we had an ArrayIndexOutOfBoundsException\r\n  the package-level spec (replaces package.html)\r\n  the package-level spec (replaces package.html)\r\n  qualified name\r\n  simple name\r\n  $NON-NLS-1$\r\n  grammar allows spaces\r\n /*comment*/\r\n /*whitespace*/\r\n /*nls*/\r\n /*sourceLevel*/\r\n /*taskTag*/\r\n /*taskPriorities*/\r\n /*\r\n\t * Returns the current identifier extracted by the scanner (without unicode\r\n\t * escapes) from the given id and for the given source and compliance levels.\r\n\t * Returns <code>null</code> if the id was not valid\r\n\t */\r\n","ChildListPropertyDescriptor":"getElementType cycleRisk elementType cycleRisk org.aspectj.org.eclipse.jdt.core.dom.ChildListPropertyDescriptor","ArgNameFinder":"getParameterNames getParameterNames org.aspectj.weaver.reflect.ArgNameFinder org.aspectj.weaver.reflect.ArgNameFinder /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","SwitchCase":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getExpression setExpression isDefault memSize treeSize EXPRESSION_PROPERTY PROPERTY_DESCRIPTORS optionalExpression expressionInitialized org.aspectj.org.eclipse.jdt.core.dom.SwitchCase  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  lazy init must be thread-safe for readers\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","InnerClass":"accept dump getInnerAccessFlags getInnerClassIndex getInnerNameIndex getOuterClassIndex setInnerAccessFlags setInnerClassIndex setInnerNameIndex setOuterClassIndex toString toString copy accept dump getInnerAccessFlags getInnerClassIndex getInnerNameIndex getOuterClassIndex setInnerAccessFlags setInnerClassIndex setInnerNameIndex setOuterClassIndex toString toString copy inner_class_index outer_class_index inner_name_index inner_access_flags inner_class_index outer_class_index inner_name_index inner_access_flags org.aspectj.apache.bcel.classfile.InnerClass org.aspectj.apache.bcel.classfile.InnerClass","HashSetOfArray":"clone contains hashCode hashCode add remove rehash size toString set elementSize threshold org.aspectj.org.eclipse.jdt.internal.core.util.HashSetOfArray  to avoid using Enumerations, walk the individual tables skipping nulls\r\n  number of elements in the table\r\n  size represents the expected number of elements\r\n  assumes the threshold is never equal to the size of the table\r\n  double the number of expected elements\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","PerObject":"getBody setBody isThis setIsThis propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty clone0 subtreeMatch0 accept0 treeSize accept couldMatchKinds fastMatch matchInternal resolveBindings parameterizeWith getVar findResidueInternal concretize write readPerClause getKind isThis toString toDeclarationString getEntry equals hashCode accept couldMatchKinds fastMatch matchInternal resolveBindings parameterizeWith getVar findResidueInternal concretize write readPerClause getKind isThis toString toDeclarationString getEntry equals hashCode body BODY_PROPERTY isThis isThis entry thisKindSet targetKindSet isThis entry thisKindSet targetKindSet org.aspectj.org.eclipse.jdt.core.dom.PerObject org.aspectj.weaver.patterns.PerObject org.aspectj.weaver.patterns.PerObject  $NON-NLS-1$\r\n  if it's not a perthis, it's a pertarget\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  -----\r\n  ??? could probably optimize this better by testing could match\r\n  assert bindings == null;\r\n  concreteEntry.state = Pointcut.CONCRETE;\r\n  see #75442 thread. Issue with weaving order.\r\n  ATAJ: add a munger to add the aspectOf(..) to the @AJ aspects\r\n  ATAJ inline around advice support - don't use a late munger to allow around inling for itself\r\n  -----\r\n  ??? could probably optimize this better by testing could match\r\n  assert bindings == null;\r\n  concreteEntry.state = Pointcut.CONCRETE;\r\n  see #75442 thread. Issue with weaving order.\r\n  ATAJ: add a munger to add the aspectOf(..) to the @AJ aspects\r\n  ATAJ inline around advice support - don't use a late munger to allow around inling for itself\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","AbstractTypeDeclaration":"internalBodyDeclarationsProperty getBodyDeclarationsProperty internalNameProperty getNameProperty internalBodyDeclarationPropertyFactory internalNamePropertyFactory getName setName bodyDeclarations isPackageMemberTypeDeclaration isMemberTypeDeclaration isLocalTypeDeclaration resolveBinding internalResolveBinding memSize typeName bodyDeclarations org.aspectj.org.eclipse.jdt.core.dom.AbstractTypeDeclaration  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  lazy init must be thread-safe for readers\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","BinaryTypeConverter":"buildTypeDeclaration convert convert convert createTypeReference org.aspectj.org.eclipse.jdt.internal.core.BinaryTypeConverter  Does not need the extra constructor since one constructor already exists.\r\n  add default constructor in first position\r\n  fix-up flag\r\n  qualified type reference\r\n  simple type reference\r\n /* convert type */\r\n /* convert return type */\r\n /* convert arguments */\r\n /* convert thrown exceptions */\r\n /* create type declaration - can be member type */\r\n /* set superclass and superinterfaces */\r\n /* convert member types */\r\n /* convert fields */\r\n /* convert methods - need to add default constructor if necessary */\r\n /* by default, we assume that one is needed. */\r\n /* count identifiers and dimensions */\r\n /* rebuild identifiers and dimensions */\r\n","ByteConstant":"fromValue byteValue charValue doubleValue floatValue intValue longValue shortValue stringValue toString typeID value org.aspectj.org.eclipse.jdt.internal.compiler.impl.ByteConstant  implicit cast to return type\r\n  implicit cast to return type\r\n  implicit cast to return type\r\n  implicit cast to return type\r\n  implicit cast to return type\r\n  spec 15.17.11\r\n  $NON-NLS-1$\r\n","SimplePropertyDescriptor":"getValueType isMandatory valueType mandatory org.aspectj.org.eclipse.jdt.core.dom.SimplePropertyDescriptor","JavadocTagConstants":"TAG_DEPRECATED TAG_PARAM TAG_RETURN TAG_THROWS TAG_EXCEPTION TAG_SEE TAG_LINK TAG_LINKPLAIN TAG_INHERITDOC TAG_VALUE TAG_AUTHOR TAG_CODE TAG_DOC_ROOT TAG_LITERAL TAG_SERIAL TAG_SERIAL_DATA TAG_SERIAL_FIELD TAG_SINCE TAG_VERSION TAG_CATEGORY TAG_DEPRECATED_LENGTH TAG_PARAM_LENGTH TAG_RETURN_LENGTH TAG_THROWS_LENGTH TAG_EXCEPTION_LENGTH TAG_SEE_LENGTH TAG_LINK_LENGTH TAG_LINKPLAIN_LENGTH TAG_INHERITDOC_LENGTH TAG_VALUE_LENGTH TAG_CATEGORY_LENGTH NO_TAG_VALUE TAG_DEPRECATED_VALUE TAG_PARAM_VALUE TAG_RETURN_VALUE TAG_THROWS_VALUE TAG_EXCEPTION_VALUE TAG_SEE_VALUE TAG_LINK_VALUE TAG_LINKPLAIN_VALUE TAG_INHERITDOC_VALUE TAG_VALUE_VALUE TAG_CATEGORY_VALUE TAG_OTHERS_VALUE ORDERED_TAGS_NUMBER PARAM_TAG_EXPECTED_ORDER THROWS_TAG_EXPECTED_ORDER SEE_TAG_EXPECTED_ORDER BLOCK_IDX INLINE_IDX BLOCK_TAGS INLINE_TAGS INLINE_TAGS_LENGTH BLOCK_TAGS_LENGTH ALL_TAGS_LENGTH PACKAGE_TAGS CLASS_TAGS FIELD_TAGS METHOD_TAGS org.aspectj.org.eclipse.jdt.internal.compiler.parser.JavadocTagConstants  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  tags lengthes\r\n  tags value\r\n  tags expected positions\r\n  since 1.0\r\n  since 1.1\r\n  since 1.2\r\n  since 1.3\r\n  since 1.4\r\n  since 1.5\r\n  since 1.6\r\n  since 1.7\r\n  since 1.0\r\n  since 1.1\r\n  since 1.2\r\n  since 1.3\r\n  since 1.4\r\n  since 1.5\r\n  since 1.6\r\n  since 1.7\r\n /*\r\n\t * Tag kinds indexes\r\n\t */\r\n /*\r\n\t * Tags versions\r\n\t */\r\n /*\r\n\t * Tags usage\r\n\t */\r\n","DefaultCodeFormatter":"createRegion createIndentationString format formatClassBodyDeclarations formatComment formatCompilationUnit formatExpression formatStatements getDebugOutput getDefaultCompilerOptions internalFormatClassBodyDeclarations internalFormatExpression internalFormatStatements probeFormatting DEBUG ProbingScanner codeSnippetParsingUtil defaultCompilerOptions newCodeFormatter options preferences org.aspectj.org.eclipse.jdt.internal.formatter.DefaultCodeFormatter  a problem occured while parsing the source\r\n  a problem occured while parsing the source\r\n  a problem occured while parsing the source\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  scanner use to check if the kind could be K_JAVA_DOC, K_MULTI_LINE_COMMENT or K_SINGLE_LINE_COMMENT\r\n  probe for expression\r\n  probe for body declarations (fields, methods, constructors)\r\n  probe for statements\r\n  this has to be a compilation unit\r\n /*nls*/\r\n /*taskTags*/\r\n /*taskPriorities*/\r\n","SelectionOnSuperReference":"printExpression resolveType org.aspectj.org.eclipse.jdt.internal.codeassist.select.SelectionOnSuperReference  $NON-NLS-1$\r\n","CompletionRequestor":"isIgnored setIgnored isAllowingRequiredProposals setAllowsRequiredProposals getFavoriteReferences setFavoriteReferences beginReporting endReporting completionFailure accept acceptContext ignoreSet favoriteReferences requiredProposalAllowSet org.aspectj.org.eclipse.jdt.core.CompletionRequestor  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","Factory":"makeClass makeSJP makeSJP makeSJP makeESJP makeESJP makeESJP makeEncSJP makeJP makeJP makeJP makeJP makeMethodSig makeMethodSig makeMethodSig makeConstructorSig makeConstructorSig makeConstructorSig makeFieldSig makeFieldSig makeFieldSig makeAdviceSig makeAdviceSig makeAdviceSig makeInitializerSig makeInitializerSig makeInitializerSig makeCatchClauseSig makeCatchClauseSig makeCatchClauseSig makeLockSig makeLockSig makeLockSig makeUnlockSig makeUnlockSig makeUnlockSig makeSourceLoc makeClass makeSJP makeSJP makeSJP makeESJP makeESJP makeESJP makeEncSJP makeJP makeJP makeJP makeJP makeMethodSig makeMethodSig makeMethodSig makeConstructorSig makeConstructorSig makeConstructorSig makeFieldSig makeFieldSig makeFieldSig makeAdviceSig makeAdviceSig makeAdviceSig makeInitializerSig makeInitializerSig makeInitializerSig makeCatchClauseSig makeCatchClauseSig makeCatchClauseSig makeLockSig makeLockSig makeLockSig makeUnlockSig makeUnlockSig makeUnlockSig makeSourceLoc makeClass makeSJP makeSJP makeSJP makeESJP makeESJP makeESJP makeEncSJP makeJP makeJP makeJP makeJP makeMethodSig makeMethodSig makeMethodSig makeConstructorSig makeConstructorSig makeConstructorSig makeFieldSig makeFieldSig makeFieldSig makeAdviceSig makeAdviceSig makeAdviceSig makeInitializerSig makeInitializerSig makeInitializerSig makeCatchClauseSig makeCatchClauseSig makeCatchClauseSig makeLockSig makeLockSig makeLockSig makeUnlockSig makeUnlockSig makeUnlockSig makeSourceLoc lexicalClass lookupClassLoader filename prims NO_ARGS lexicalClass lookupClassLoader filename prims NO_ARGS lexicalClass lookupClassLoader filename prims NO_ARGS org.aspectj.runtime.reflect.Factory org.aspectj.runtime.reflect.Factory org.aspectj.runtime.reflect.Factory  XXX there should be a better return value for this\r\n  array types to be created and loaded correctly. (pr70404)\r\n  System.out.println(\"making\r\n  XXX there should be a better return value for this\r\n  array types to be created and loaded correctly. (pr70404)\r\n  System.out.println(\"making\r\n  XXX there should be a better return value for this\r\n  array types to be created and loaded correctly. (pr70404)\r\n  System.out.println(\"making\r\n /* The documentation of Class.forName explains why this is the right thing\r\n             * better than I could here.\r\n             */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n *    Alex Vasseur    new factory methods for variants of JP\r\n * ******************************************************************/\r\n /* The documentation of Class.forName explains why this is the right thing\r\n             * better than I could here.\r\n             */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n *    Alex Vasseur    new factory methods for variants of JP\r\n * ******************************************************************/\r\n /* The documentation of Class.forName explains why this is the right thing\r\n             * better than I could here.\r\n             */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n *    Alex Vasseur    new factory methods for variants of JP\r\n * ******************************************************************/\r\n","UnaryExpression":"analyseCode optimizedBooleanConstant generateCode generateOptimizedBoolean printExpressionNoParenthesis resolveType traverse expression optimizedBooleanConstant org.aspectj.org.eclipse.jdt.internal.compiler.ast.UnaryExpression  encode operator\r\n  inlined value\r\n  Generate code for the condition\r\n  6596: if (!(a && b)){} - must still place falseLabel\r\n  ~int\r\n  - <num>\r\n  will check later on\r\n  autoboxing support\r\n  <<16   <<12       <<8    <<4       <<0\r\n  error........\r\n  only switch on possible result type.....\r\n  compute the constant when valid\r\n  check need for operand cast\r\n /* runtime type */\r\n /* runtime */\r\n /* runtime type */\r\n /* runtime */\r\n","IStructureViewNode":"getStructureNode getIcon add add remove getChildren getKind getRelationshipName toString readResolve serialVersionUID DECLARATION RELATIONSHIP LINK ALL name nextOrdinal ordinal org.aspectj.ajde.ui.IStructureViewNode  The 4 declarations below are necessary for serialization\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","XMLWriter":"org.aspectj.org.eclipse.jdt.internal.core.XMLWriter","StringMaker":"makeKindName makeModifiersString stripPackageName makeTypeName makeTypeName makePrimaryTypeName addTypeNames addSignature addThrows makeKindName makeModifiersString stripPackageName makeTypeName makeTypeName makePrimaryTypeName addTypeNames addSignature addThrows makeKindName makeModifiersString stripPackageName makeTypeName makeTypeName makePrimaryTypeName addTypeNames addSignature addThrows shortTypeNames includeArgs includeThrows includeModifiers shortPrimaryTypeNames includeJoinPointTypeName includeEnclosingPoint shortKindName cacheOffset shortStringMaker middleStringMaker longStringMaker shortTypeNames includeArgs includeThrows includeModifiers shortPrimaryTypeNames includeJoinPointTypeName includeEnclosingPoint shortKindName cacheOffset shortStringMaker middleStringMaker longStringMaker shortTypeNames includeArgs includeThrows includeModifiers shortPrimaryTypeNames includeJoinPointTypeName includeEnclosingPoint shortKindName cacheOffset shortStringMaker middleStringMaker longStringMaker org.aspectj.runtime.reflect.StringMaker org.aspectj.runtime.reflect.StringMaker org.aspectj.runtime.reflect.StringMaker /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","DOMException":"serialVersionUID org.aspectj.org.eclipse.jdt.core.jdom.DOMException  backward compatible\r\n","PackageReferencePattern":"decodeIndexKey getBlankPattern getIndexKey getIndexCategories hasNextQuery matchesDecodedKey resetQuery print pkgName segments currentSegment CATEGORIES org.aspectj.org.eclipse.jdt.internal.core.search.matching.PackageReferencePattern  Package reference keys are encoded as 'name' (where 'name' is the last segment of the package name)\r\n  Package reference keys are encoded as 'name' (where 'name' is the last segment of the package name)\r\n  redundant (eg. in 'org.aspectj.org.eclipse.jdt.core.*' 'org.eclipse' is used all the time)\r\n  index key is not encoded so query results all match\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* walk the segments from end to start as it will find less potential references using 'lang' than 'java' */\r\n","LstBuildConfigManager":"accept accept buildModel addProblemEntries writeModel writePaths addFilesToConfig removeFilesFromConfig relativizeFilePaths buildDirTree addFilesToDirTree pruneEmptyDirs getActiveConfigFile setActiveConfigFile addListener removeListener notifyConfigChanged sortModel compare getAllBuildConfigFiles allBuildConfigFiles listeners fileUpdater currConfigFilePath SOURCE_FILE_FILTER DIR_FILTER ALPHABETICAL_COMPARATOR org.aspectj.ajde.internal.LstBuildConfigManager  if (pe.getFile() != null) filePath = pe.getFile().getAbsolutePath();\r\n  && !files[j].getName().endsWith(\".lst\")) {\r\n  kind = BuildConfigNode.Kind.FILE_LST;\r\n  foundMatch = true;\r\n  dir.getChildren().clear();\r\n  boolean foundMatch = false;\r\n  if (!foundMatch)\r\n  && !files[i].getName().endsWith(\".lst\")) {\r\n  String name = new File(path).getName();\r\n  \r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n *     Helen Hawkins  Converted to new interface (bug 148190)\r\n * ******************************************************************/\r\n","AroundClosure":"getFlags getState getPreInitializationState run linkClosureAndJoinPoint linkClosureAndJoinPoint getFlags getState getPreInitializationState run linkClosureAndJoinPoint linkClosureAndJoinPoint getFlags getState getPreInitializationState run linkClosureAndJoinPoint linkClosureAndJoinPoint state bitflags preInitializationState state bitflags preInitializationState state bitflags preInitializationState org.aspectj.runtime.internal.AroundClosure org.aspectj.runtime.internal.AroundClosure org.aspectj.runtime.internal.AroundClosure  bit6 being 1 means the flags haven't been initialized\r\n  TODO is this cast safe ?\r\n  TODO is this cast safe ?\r\n  bit6 being 1 means the flags haven't been initialized\r\n  TODO is this cast safe ?\r\n  TODO is this cast safe ?\r\n  bit6 being 1 means the flags haven't been initialized\r\n  TODO is this cast safe ?\r\n  TODO is this cast safe ?\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n *    Alex Vasseur    wired up for @AJ proceeding\r\n *    Andy Clement 23-06-06 added extras for @AJ\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n *    Alex Vasseur    wired up for @AJ proceeding\r\n *    Andy Clement 23-06-06 added extras for @AJ\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n *    Alex Vasseur    wired up for @AJ proceeding\r\n *    Andy Clement 23-06-06 added extras for @AJ\r\n * ******************************************************************/\r\n","JavaDocRegion":"canFormat formatRegion preprocessCodeSnippet formatCodeSnippet postprocessCodeSnippet markHtmlRanges markHtmlTag markJavadocTag markTagRanges canAppend convertJava2Html convertHtml2Java createLine fCodePositions fFormatHtml fFormatSource org.aspectj.org.eclipse.jdt.internal.formatter.comment.JavaDocRegion  Can not happen\r\n  strip content prefix\r\n  Can not happen\r\n  patch content prefix\r\n  remove trailing spaces\r\n  Can not happen\r\n  don't append code sections\r\n  html2text never gets longer, only shorter!\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentRegion#canFormat(org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentRange, org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentRange)\r\n\t */\r\n /* \r\n\t\t\t\t\t\t\t * Handle missing closing tag\r\n\t\t\t\t\t\t\t * see: https://bugs.eclipse.org/bugs/show_bug.cgi?id=57011\r\n\t\t\t\t\t\t\t */\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentRegion#formatRegion(java.lang.String, int)\r\n\t */\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.MultiCommentRegion#markHtmlRanges()\r\n\t */\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.MultiCommentRegion#markHtmlTag(org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentRange, java.lang.String)\r\n\t */\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.MultiCommentRegion#markJavadocTag(org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentRange, java.lang.String)\r\n\t */\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentRegion#canAppend(org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentLine, org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentRange, org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentRange, int, int)\r\n\t */\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentRegion#createLine()\r\n\t * @since 3.1\r\n\t */\r\n","ClasspathJar":"findClass findClass findTypeNames initialize isPackage reset toString normalizedPath getPath ensureOpen closeSomeArchives close getSystemPropertyWithoutSecurityException findPackageSet cleanup equals findClass getProjectRelativePath isPackage lastModified toString debugPathString maxOpenArchives MAXOPEN_DEFAULT openArchives file zipFile closeZipFileAtEnd packageCache normalizedPath lastModified fileSize packageSet PackageCache zipFilename resource zipFile lastModified closeZipFileAtEnd knownPackageNames accessRuleSet org.aspectj.org.eclipse.jdt.internal.compiler.batch.ClasspathJar org.aspectj.org.eclipse.jdt.internal.core.builder.ClasspathJar  AspectJ Extension\r\n  most common case\r\n  AspectJ Extension\r\n  most common case\r\n  you have removed one of the jars.\r\n  AspectJ Extension\r\n  End AspectJ Extension\r\n  add the package name & all of its parent packages\r\n  extract the package name\r\n  you have removed one of the jars.\r\n  AspectJ Extension\r\n  add the package name & all of its parent packages\r\n  extract the package name\r\n  End AspectJ Extension\r\n  new code:\r\n  $NON-NLS-1$\r\n  If its not null, the zip is already open\r\n  Close 10% of those open\r\n  AspectJ Extension\r\n  Copes with the security manager\r\n  $NON-NLS-1$\r\n  add the package name & all of its parent packages\r\n  extract the package name\r\n  already existed\r\n  keep for equals\r\n  $NON-NLS-1$\r\n  most common case\r\n  assume for this build the zipFile is empty\r\n  $NON-NLS-1$\t  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","DOMInitializer":"appendMemberBodyContents appendMemberDeclarationContents appendSimpleContents getBody getDetailedNode getJavaElement getMemberDeclarationStartPosition getNodeType isSignatureEqual newDOMNode offset setBody setName shareContents toString fBody fBodyRange org.aspectj.org.eclipse.jdt.internal.core.jdom.DOMInitializer  $NON-NLS-1$\r\n  append eveything before my name\r\n  append my name\r\n  append everything after my name\r\n  $NON-NLS-1$\r\n","ICompilerConfiguration":"getJavaOptionsMap getNonStandardOptions getProjectSourceFiles getProjectSourceFilesChanged getClasspath getOutputLocationManager getInpath getOutJar getAspectPath getSourcePathResources getConfigurationChanges configurationRead getClasspathElementsWithModifiedContents org.aspectj.ajde.core.ICompilerConfiguration /* String --> String */\r\n /* String */\r\n /* File */\r\n /* java.io.File */\r\n /* java.io.File */\r\n /* String --> java.io.File */\r\n","AnnotationOnTypeMunger":"write getNewAnnotation equals hashCode write getNewAnnotation equals hashCode newAnnotation hashCode newAnnotation hashCode org.aspectj.weaver.AnnotationOnTypeMunger org.aspectj.weaver.AnnotationOnTypeMunger  TODO does not check equality of annotation values\r\n  TODO does not check equality of annotation values\r\n /* *******************************************************************\r\n * Copyright (c) 2005 IBM\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 IBM\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement     initial implementation \r\n * ******************************************************************/\r\n","StackMapAdder":"addStackMaps getCommonSuperClass addStackMaps getCommonSuperClass world world org.aspectj.weaver.bcel.asm.StackMapAdder org.aspectj.weaver.bcel.asm.StackMapAdder  Implementation of getCommonSuperClass() that avoids Class.forName()\r\n  Implementation of getCommonSuperClass() that avoids Class.forName()\r\n /* *******************************************************************\r\n * Copyright (c) 2008 Contributors\r\n * All rights reserved.\r\n * This program and the accompanying materials are made available\r\n * under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *\t Andy Clement\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2008 Contributors\r\n * All rights reserved.\r\n * This program and the accompanying materials are made available\r\n * under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *\t Andy Clement\r\n * ******************************************************************/\r\n","TokenScanner":"getScanner setOffset getCurrentEndOffset getCurrentStartOffset getCurrentLength readNext readNext getNextStartOffset getNextEndOffset readToToken readToToken getTokenStartOffset getTokenEndOffset getPreviousTokenEndOffset isComment isModifier createError END_OF_FILE LEXICAL_ERROR DOCUMENT_ERROR scanner endPosition org.aspectj.org.eclipse.jdt.internal.core.dom.rewrite.TokenScanner  $NON-NLS-1$\r\n","UnresolvedTypeVariableReferenceType":"setTypeVariable resolve isTypeVariableReference getTypeVariable toString toDebugString write getErasureSignature setTypeVariable resolve isTypeVariableReference getTypeVariable toString toDebugString write getErasureSignature typeVariable typeVariable org.aspectj.weaver.UnresolvedTypeVariableReferenceType org.aspectj.weaver.UnresolvedTypeVariableReferenceType  constructor used as place-holder when dealing with circular refs such as Enum\r\n  aTypeVariable.getUpperBound().getSignature();\r\n  only used when resolving circular refs...\r\n  FIXME asc remove this when the shared type var stuff is sorted\r\n  FIXME asc correct thing to do is go bang, but to limp along, lets cope with the scope missing\r\n  constructor used as place-holder when dealing with circular refs such as Enum\r\n  aTypeVariable.getUpperBound().getSignature();\r\n  only used when resolving circular refs...\r\n  FIXME asc remove this when the shared type var stuff is sorted\r\n  FIXME asc correct thing to do is go bang, but to limp along, lets cope with the scope missing\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","SourceRefElementInfo":"getDeclarationSourceEnd getDeclarationSourceStart getSourceRange setSourceRangeEnd setSourceRangeStart fSourceRangeStart fSourceRangeEnd org.aspectj.org.eclipse.jdt.internal.core.SourceRefElementInfo /* package */\r\n","EvaluationContextWrapper":"allVariables checkBuilderState codeComplete codeComplete codeComplete codeComplete codeSelect codeSelect deleteVariable evaluateCodeSnippet evaluateCodeSnippet evaluateVariable getBuildNameEnvironment getVarClassName getImports getInfrastructureEvaluationContext getInfrastructureEvaluationRequestor getPackageName getProblemFactory getProject handleInstallException newVariable setImports setPackageName validateImports codeComplete context project org.aspectj.org.eclipse.jdt.internal.core.eval.EvaluationContextWrapper  $NON-NLS-1$\r\n  null because there is no need to look inside the code snippet itself\r\n  $NON-NLS-1$\r\n  retrieves the package statement\r\n  try to retrieve imports from the source\r\n  turn off import complaints for implicitly added ones\r\n  retrieves the import statement\r\n  turn off import complaints for implicitly added ones\r\n  transfer the imports of the IType to the evaluation context\r\n  skip parameter names\r\n","ShadowMunger":"concretize specializeOn implementOn match parameterizeWith fallbackCompareTo getEnd getStart getSourceLocation getHandle getPointcut setPointcut setDeclaringType getDeclaringType getThrownExceptions mustCheckExceptions createHierarchy addChildNodes addChildNodes createDeclareErrorOrWarningChild createAdviceChild getBinarySourceLocation getBinaryFile isBinary concretize specializeOn implementOn match parameterizeWith fallbackCompareTo getEnd getStart getSourceLocation getHandle getPointcut setPointcut setDeclaringType getDeclaringType getThrownExceptions mustCheckExceptions createHierarchy addChildNodes addChildNodes createDeclareErrorOrWarningChild createAdviceChild getBinarySourceLocation getBinaryFile isBinary pointcut start end sourceContext sourceLocation binarySourceLocation binaryFile handle declaringType NONE isBinary checkedIsBinary pointcut start end sourceContext sourceLocation binarySourceLocation binaryFile handle declaringType NONE isBinary checkedIsBinary org.aspectj.weaver.ShadowMunger org.aspectj.weaver.ShadowMunger  these three fields hold the source location of this munger\r\n  the type that declared this munger.\r\n  pointcut may be updated during rewriting...\r\n  continue to fault in the model.\r\n  create the class file node\r\n  create package ipe if one exists....\r\n  if (aspect.getPackageName() != null) {\r\n  check that there doesn't already exist a node with this name\r\n  it's parent node\r\n  added the structure for this aspect\r\n  note packages themselves have no source location\r\n  add and create empty import declaration ipe\r\n  add and create aspect ipe\r\n  }\r\n  these three fields hold the source location of this munger\r\n  the type that declared this munger.\r\n  pointcut may be updated during rewriting...\r\n  continue to fault in the model.\r\n  create the class file node\r\n  create package ipe if one exists....\r\n  if (aspect.getPackageName() != null) {\r\n  check that there doesn't already exist a node with this name\r\n  it's parent node\r\n  added the structure for this aspect\r\n  note packages themselves have no source location\r\n  add and create empty import declaration ipe\r\n  add and create aspect ipe\r\n  }\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","RewriteEventStore":"getParent getProperty equals hashCode getOriginalValue toString getNode compareTo toString getStartNode getEndNode isMove getInternalPlaceholder compareTo updatePlaceholderSourceRanges toString hasNext next remove setNodePropertyMapper clear addEvent getEvent getNodeEvent getListEvent getChangeRootIterator hasChangedProperties getPropertyLocation findEvent isNodeInEvent getOriginalValue getNewValue getChangeKind accessOriginalValue getEventEditGroup setEventEditGroup getTrackedNodeData setTrackedNodeData markAsTracked createCopySourceInfo markAsCopySource isRangeCopyPlaceholder createRangeCopy getNodeCopySources internalGetCopySources assertNoOverlap prepareMovedNodes revertMovedNodes removeMoveRangePlaceholders revertListWithRanges prepareNodeRangeCopies processListWithRanges prepareSingleNodeCopies doMarkMovedAsRemoved isInsertBoundToPrevious setInsertBoundToPrevious validateIsListProperty validateHasChildProperty validateIsNodeProperty toString isNewNode parent property parent childProperty event location node isMove first last copyInfo replacingNode editGroup eventIter sourceNodeIter rangeNodeIter trackedNodeIter NEW ORIGINAL BOTH eventLookup lastEvent editGroups nodeCopySources nodeRangeInfos trackedNodes insertBoundToPrevious nodePropertyMapper INTERNAL_PLACEHOLDER_PROPERTY org.aspectj.org.eclipse.jdt.internal.core.dom.rewrite.RewriteEventStore  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  can be null, only used to mark as removed on move\r\n  insert before if start node is first\r\n  first move then copy\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  containing the internal placeholder and the 'isMove' flag\r\n  insert before if start node is first\r\n  insert before if length is longer\r\n  first move then copy\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  lazy initialization\r\n  lazy initialization\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  collect all placeholders\r\n  list of CopySourceRange\r\n  replace the current edits\r\n  list of CopySourceRange\r\n  sort by start index, length, move or copy\r\n  replace the current edits\r\n  is this child the beginning of a range?\r\n  unchanged\r\n  remove or replace\r\n  check for ranges and add a placeholder for them\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n\t * Store element to associate event and node position/\r\n\t */\r\n /* (non-Javadoc)\r\n\t\t * @see java.util.Iterator#hasNext()\r\n\t\t */\r\n /* (non-Javadoc)\r\n\t\t * @see java.util.Iterator#next()\r\n\t\t */\r\n /* (non-Javadoc)\r\n\t\t * @see java.util.Iterator#remove()\r\n\t\t */\r\n /*\r\n\t * Gets an original child from the AST.\r\n\t * Temporarily overridden to port the old rewriter to the new infrastructure.\r\n\t */\r\n","DeclareAtTypeDeclaration":"clone0 subtreeMatch0 accept0 internalModifiersProperty internalModifiers2Property internalJavadocProperty propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty internalPatternNodeProperty internalAnnotationNameProperty JAVADOC_PROPERTY PATTERN_PROPERTY ANNOTATION_NAME_PROPERTY PROPERTY_DESCRIPTORS org.aspectj.org.eclipse.jdt.core.dom.DeclareAtTypeDeclaration  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  allow default implementation to flag the error\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /*\r\n\t * (omit javadoc for this method) Method declared on BodyDeclaration.\r\n\t * \r\n\t * There are no modifiers declared for DeclareErrorDeclaration - therefore\r\n\t * we don't do anything with this\r\n\t */\r\n /*\r\n\t * (omit javadoc for this method) Method declared on BodyDeclaration.\r\n\t * \r\n\t * There are no modifiers declared for DeclareErrorDeclaration - therefore\r\n\t * we don't do anything with this\r\n\t */\r\n /*\r\n\t * (omit javadoc for this method) Method declared on BodyDeclaration.\r\n\t */\r\n /*\r\n\t * (omit javadoc for this method) Method declared on ASTNode.\r\n\t */\r\n /*\r\n\t * (omit javadoc for this method) Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on DeclareAnnotationDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on DeclareAnnotationDeclaration.\r\n\t */\r\n","MemoryIndex":"addDocumentNames addIndexEntry addQueryResults hasChanged remove shouldMerge NUM_CHANGES docsToReferences allWords lastDocumentName lastReferenceTable org.aspectj.org.eclipse.jdt.internal.core.index.MemoryIndex  number of separate document changes... used to decide when to merge\r\n  document paths -> HashtableOfObject(category names -> set of words)\r\n  save space by locally interning the referenced words, since an indexer can generate numerous duplicates\r\n  assumed the disk index already skipped over documents which have been added  add all new  assumed a document was removed before its reindexed\r\n  results maps a word -> EntryResult\r\n","WithinPointcut":"getTypePattern isWithinType couldMatchKinds parameterizeWith fastMatch matchInternal write read resolveBindings postRead couldEverMatchSameJoinPointsAs equals hashCode toString findResidueInternal concretize1 accept getTypePattern isWithinType couldMatchKinds parameterizeWith fastMatch matchInternal write read resolveBindings postRead couldEverMatchSameJoinPointsAs equals hashCode toString findResidueInternal concretize1 accept typePattern typePattern org.aspectj.weaver.patterns.WithinPointcut org.aspectj.weaver.patterns.WithinPointcut  look for parameterized type patterns which are not supported...\r\n  look for parameterized type patterns which are not supported...\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","Scope":"compareTypes getBaseType greaterLowerBound greaterLowerBound substitute substitute substitute boxing classScope compilationUnitScope compilerOptions computeCompatibleMethod connectTypeVariables createArrayType createTypeVariables enclosingClassScope enclosingMethodScope enclosingReceiverType enclosingReferenceContext enclosingSourceType invocationType environment findDefaultAbstractMethod findDirectMemberType findExactMethod findPrivilegedHandler findField findMemberType findMethod findMethodForArray findMethodInSuperInterfaces findType findVariable getBinding getConstructor getCurrentPackage getDeclarationModifiers getField getImplicitMethod getJavaIoSerializable getJavaLangAnnotationAnnotation getJavaLangAssertionError getJavaLangClass getJavaLangCloneable getJavaLangEnum getJavaLangIterable getJavaLangObject getJavaLangString getJavaLangThrowable getJavaUtilIterator getMemberType getMethod getPackage getType getType getType getTypeOrPackage getTypeOrPackage hasErasedCandidatesCollisions innermostSwitchCase isAcceptableMethod isBoxingCompatibleWith isDefinedInField isDefinedInMethod isDefinedInSameUnit isDefinedInType isInsideCase isInsideDeprecatedCode leastContainingInvocation leastContainingTypeArgument lowerUpperBound lowerUpperBound methodScope minimalErasedCandidates mostSpecificClassMethodBinding mostSpecificInterfaceMethodBinding mostSpecificMethodBinding outerMostClassScope outerMostMethodScope parameterCompatibilityLevel parameterCompatibilityLevel problemReporter referenceCompilationUnit referenceContext startIndex findTypeVariable BLOCK_SCOPE CLASS_SCOPE COMPILATION_UNIT_SCOPE METHOD_SCOPE NOT_COMPATIBLE COMPATIBLE AUTOBOX_COMPATIBLE VARARGS_COMPATIBLE EQUAL_OR_MORE_SPECIFIC NOT_RELATED MORE_GENERIC kind parent org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope  list should be optimized (with most often used first)\r\n  defensive copy\r\n  if Vi <: Vj, Vj is removed\r\n  5.1.10\r\n  defensive copy\r\n  if Vi <: Vj, Vj is removed\r\n  5.1.10\r\n  impossible substitution\r\n  }\r\n  substitute could itself be array type\r\n  treat as if parameterized with its type variables (non generic type gets 'null' arguments)\r\n  treat as if parameterized with its type variables (non generic type gets 'null' arguments)\r\n  if (substitutedArguments != originalArguments || substitutedEnclosing != originalEnclosing) {\r\n  incompatible\r\n  attempt to invoke generic method of raw type with type hints <String>foo()\r\n  generic method\r\n  incompatible\r\n  bound check issue is taking precedence\r\n  reacquire them after type inference has performed\r\n  incompatible\r\n  first bound used to compute erasure\r\n  hold onto the problem type\r\n  first bound used to compute erasure\r\n  hold onto the problem type\r\n  check against superclass\r\n  check against superinterfaces\r\n  do not cache obvious invalid types\r\n  do not construct type variables if source < 1.5\r\n  detect duplicates, but keep each variable to reduce secondary errors with instantiating this generic type (assume number of variables is correct)\r\n  may answer null if no type around\r\n  may answer null if no method around\r\n  can skip this method since concreteMatch overrides it\r\n  argument type compatibility check\r\n  can be null\r\n  no need to check for visibility - interface methods are public\r\n  abstract method lookup lookup (since maybe missing default abstract methods)\r\n  know it has no member types (nor inherited member types)\r\n  Internal use only\r\n  or find an inherited method when the exact match is to a bridge method\r\n  targeting a generic method could find an exact match with variable return type\r\n  special treatment for Object.getClass() in 1.5 mode (substitute parameterized return type)\r\n  Internal use only\r\n  AspectJ Extension\r\n  capture\r\n  AspectJ Extension, was getField(fieldName, needResolve);\r\n  AspectJ Extension\r\n  End AspectJ Extension\r\n  collect all superinterfaces of receiverType until the field is found in a supertype\r\n  needed for statically imported types which don't know their hierarchy yet\r\n  AspectJ Extension - was getField(fieldname,needResolve)\r\n  AspectJ Extension\r\n  End AspectJ Extension\r\n  we could hold onto the not visible field for extra error reporting\r\n  AspectJ Extension\r\n  End AspectJ Extension\r\n  walk all visible interfaces to find ambiguous references\r\n  know it has no member types (nor inherited member types)\r\n  enclosingSourceType();  AspectJ Extension\r\n  collect all superinterfaces of receiverType until the memberType is found in a supertype\r\n  needed for statically imported types which don't know their hierarchy yet\r\n  looking for an undefined member type in its own superclass ref\r\n  we could hold onto the not visible field for extra error reporting\r\n  walk all visible interfaces to find ambiguous references\r\n  Internal use only\r\n  superclass lookup\r\n  currentLength can be modified inside the loop\r\n  only public methods from Object are visible to interface receiverTypes\r\n  keep inherited methods to find concrete method over a bridge method\r\n  BUT we can also ignore any overridden method since we already know the better match (fixes 80028)\r\n  append currentMethods, filtering out null entries\r\n  if found several candidates, then eliminate those not matching argument types\r\n  return the single visible match now\r\n  argument type compatibility check\r\n  error is already reported\r\n  so answer the method with the most argType matches and least parameter type mismatches\r\n  if no good match so just use the first one found\r\n  look one slot before & after to see if the type matches\r\n  no match was found\r\n  tiebreak using visibility check\r\n  new code:\r\n  check for duplicate parameterized methods\r\n  see if there is a better match in the interfaces - see AutoBoxingTest 99, LookupTest#81\r\n  search interfaces for a better match\r\n  see if there is a match in the interfaces - see LookupTest#84\r\n  Internal use only - use findMethod()\r\n  remember its array type for codegen purpose on target>=1.4.0\r\n  handle the method clone() specially... cannot be protected or throw exceptions\r\n  Internal use only\r\n  its possible to walk the same superinterface from different classes in the hierarchy\r\n  Internal use only\r\n  can be a problem field which is answered if a valid field is not found\r\n  inside Constructor call or inside static context\r\n  closest match\r\n  looks in this scope only\r\n  Fall through... could duplicate the code below to save a cast - questionable optimization\r\n  supercedes any potential InheritedNameHidesEnclosingName problem\r\n  closest match\r\n  make the user qualify the field, likely wants the first inherited field (javac generates an ambiguous error instead)\r\n  skip it if we did not find anything\r\n  closest match\r\n  closest match\r\n  return the fieldBinding if it is not declared in a superclass of the scope's binding (that is, inherited)\r\n  OR in 1.4 mode (inherited shadows enclosing)\r\n  closest match\r\n  ie. have we found the same field - do not trust field identity yet\r\n  if a valid field was found, complain when another is found in an 'immediate' enclosing type (that is, not inherited)\r\n  only remember the fieldBinding if its the first one found or the previous one was not visible & fieldBinding is...\r\n  AspectJ Extension - was depth++\r\n  AspectJ Extension - was receiverType\r\n  itself, because the class scope is used to retrieve the fields.\r\n  done when a COMPILATION_UNIT_SCOPE is found\r\n  ensure static imports are resolved\r\n  check single static imports\r\n  check on demand imports\r\n  Answer error binding -- import on demand conflict; name found in two import on demand packages.\r\n  We did not find a local or instance variable.\r\n  answer the better problem binding\r\n  AspectJ Extension\r\n  targeting a non generic constructor with type arguments ?\r\n  End AspectJ Extension\r\n  AspectJ Extension\r\n  End AspectJ Extension\r\n  all of visible are from the same declaringClass, even before 1.4 we can call this method instead of mostSpecificClassMethodBinding\r\n  inside field declaration ? check field modifier to see if deprecated\r\n  check method modifiers to see if deprecated\r\n  in 1.4 mode (inherited visible shadows enclosing)\r\n  compilationUnitScope().recordTypeReference(receiverType);   not needed since receiver is the source type\r\n  closest match\r\n  NOTE: Unlike fields, a non visible method hides a visible method\r\n  found a valid method so check to see if this is a hiding case\r\n  return the error now\r\n  methodBinding is a problem method\r\n  hold onto the first not visible  hold onto the first not visible  takes precedence\r\n  closest match\r\n  return the methodBinding if it is not declared in a superclass of the scope's binding (that is, inherited)\r\n  remember that private methods are visible if defined directly by an enclosing class\r\n  skip it if we did not find anything\r\n  itself, because the class scope is used to retrieve the fields.\r\n  done when a COMPILATION_UNIT_SCOPE is found\r\n  TODOMISSINGMERGE: see notes\r\n  static imports lose to methods from Object\r\n  visible method selectors take precedence\r\n  at this point the scope is a compilation unit scope & need to check for imported static methods\r\n  field constants can cause static imports to be accessed before they're resolved\r\n  set to true when matched static import of method name so stop looking for on demand methods\r\n  check to see if there are also methods with the same name\r\n  must find the importRef's type again since the field can be from an inherited type\r\n  answers closest approximation, may not check argumentTypes or visibility\r\n  answers closest approximation, may not check argumentTypes or visibility\r\n  answers closest approximation, may not check argumentTypes or visibility\r\n  forget previous matches from on demand imports\r\n  answer as error case match\r\n  retrieve an exact visible match (if possible)\r\n  New AspectJ Extension - trying this? looked very different in the old compiler\r\n  special treatment for Object.getClass() in 1.5 mode (substitute parameterized return type)\r\n  compoundName does not start with a package\r\n  Would like to remove this test and require senders to specially handle base types\r\n  this feature would be extraordinarily slow.  Therefore we don't do this\r\n  Would like to remove this test and require senders to specially handle base types\r\n  does not check visibility\r\n  binding is now a ReferenceBinding\r\n  handles the fall through case\r\n  looks in this scope only\r\n  but not when we step out to the enclosing type\r\n  6.5.5.1 - member types have precedence over top-level type in same unit\r\n  supercedes any potential InheritedNameHidesEnclosingName problem\r\n  make the user qualify the type, likely wants the first inherited type\r\n  skip it if we did not find anything\r\n  OR in 1.4 mode (inherited shadows enclosing)\r\n  if a valid type was found, complain when another is found in an 'immediate' enclosing type (ie. not inherited)\r\n  only remember the memberType if its the first one found or the previous one was not visible & memberType is...\r\n  member types take precedence over type variables\r\n  AspectJ extension - was sourceType.getTypeVariable(name);\r\n  do not consider this type modifiers: access is legite within same type\r\n  done when a COMPILATION_UNIT_SCOPE is found\r\n  at this point the scope is a compilation unit scope\r\n  single type import cached in faultInImports(), replace it in the cache with the type\r\n  already know its visible\r\n  already know its visible\r\n  can also include NotFound ProblemReferenceBindings if we already know this name is not found\r\n  problem type from above supercedes NotFound type but not Ambiguous import case\r\n  cached type found in previous walk below\r\n  cached package found in previous walk below\r\n  already know its visible\r\n  walk single type imports since faultInImports() has not run yet\r\n  check if the name is in the current package, skip it if its a sub-package\r\n  type is always visible to its own package\r\n  static imports are allowed to see inherited member types\r\n  Answer error binding -- import on demand conflict; name found in two import on demand packages.\r\n  check on demand imports\r\n  ask for the imports + name\r\n  only put NotFound type in cache if you know its not a package\r\n  Answer error binding -- could not find name\r\n  binding is now a ReferenceBinding\r\n  handles the fall through case\r\n  checks visibility\r\n  use CompilationUnitScope.getImport(char[][]) instead\r\n  A#RAW is not more specific than a rawified A<T>\r\n  special case to choose between 2 varargs methods when the last arg is Object[]\r\n  A#RAW is not more specific than a rawified A<T>\r\n  special case when autoboxing makes (int, int...) better than (Object...) but not (int...) or (Integer, int...)\r\n  check that each parameter before the vararg parameters are compatible (no autoboxing allowed here)\r\n  check if autoboxed type is compatible\r\n  find the outer most enclosing type\r\n  find the compilation unit scope\r\n  test that the enclosingType is not part of the compilation unit\r\n  inside field declaration ? check field modifier to see if deprecated\r\n  may not have been resolved until then\r\n  check method modifiers to see if deprecated\r\n  may not have been resolved until then\r\n  consider import as being deprecated if first type is itself deprecated (123522)\r\n  may not have been resolved until then\r\n  no alternate invocation\r\n  only one invocation, simply return it (array only allocated if more than one)\r\n  if mec is an array type, intersect invocation leaf component types, then promote back to array\r\n  should be caught by no invocation check\r\n  infer proper parameterized type from invocations\r\n  raw type is taking precedence\r\n  int is returned to denote cycle detected in lub computation - stop recursion by answering unbound wildcard\r\n  U, ? extends V\r\n  TODO (philippe) need to capture entire bounds\r\n  U, ? super V\r\n  int is returned to denote cycle detected in lub computation - stop recursion by answering unbound wildcard\r\n  U, ? extends V\r\n  TODO (philippe) need to capture entire bounds\r\n  U, ? super V\r\n  int is returned to denote cycle detected in lub computation - stop recursion by answering unbound wildcard\r\n  ? extends U, ? extends V\r\n  ? extends U, ? SUPER V\r\n  ? extends U\r\n  TODO (philippe) need to capture entire bounds\r\n  ? super U, ? super V\r\n  ? super U\r\n  int is returned to denote cycle detected in lub computation - stop recursion by answering unbound wildcard\r\n  JLS 15.12.2\r\n  cycle detection\r\n  ignore\r\n  ignore\r\n  type found, jump to next one\r\n  type not found in current lubTypes\r\n  all types are included in some lub, cycle detected - stop recursion by answering special value (int)\r\n  not all types have same dimension\r\n  recompact them to the front\r\n  15.12.2\r\n  intersect with all supertypes of otherType\r\n  Object[][] supertype is Object[]\r\n  fallthrough\r\n  recreate array if needed\r\n  inject super interfaces prior to superclass\r\n  recreate array if needed\r\n  can be null during code assist operations that use LookupEnvironment.completeTypeBindings(parsedUnit, buildFieldsAndMethods)\r\n  recreate array if needed\r\n  intersecting first type supertypes with other types' ones, nullifying non matching supertypes\r\n  record invocation\r\n  using an array to record invocations in order (188103)\r\n  using an array to record invocations in order (188103)\r\n  no array for singleton\r\n  incompatible super type\r\n  record invocation\r\n  using an array to record invocations in order (188103)\r\n  using an array to record invocations in order (188103)\r\n  no array for singleton\r\n  keep Object[...] for an interface array (same dimensions)\r\n  discard non minimal supertype\r\n  keep Object for an interface\r\n  discard non minimal supertype\r\n  eliminate non minimal super types\r\n  cannot answer a method farther up the hierarchy than the first method found\r\n  no ambiguity for static methods\r\n  do not examine further categories, will either return mostSpecific or report ambiguous case\r\n  parameterized superclasses & interfaces may be walked twice from different paths so skip next from now on\r\n  skip current so acceptable wins over this bridge method\r\n  pick a concrete method over a bridge method when parameters are equal since the return type of the concrete method is more specific\r\n  see if they are equal after substitution of type variables (do the type variables have to be equal to be considered an override???)\r\n  AspectJ Extension - was (original.declaringClass == original2.declaringClass)\r\n  duplicates thru substitution\r\n  AspectJ Extension - was declaringClass, now getOwningClass()\r\n  must find inherited method with the same substituted variables\r\n  AspectJ Extension - was declaringClass, now getOwningClass()\r\n  must find inherited method with the same substituted variables\r\n  current does not override next\r\n  choose original2 instead\r\n  only compare current against other concrete methods\r\n  AspectJ Extension - was declaringClass, now getOwningClass()\r\n  current's declaringClass is not a subtype of next's declaringClass\r\n  must find inherited method with the same substituted variables\r\n  current does not override next\r\n  AspectJ Extension - move superType test inside - causes problems (pr233838)\r\n  if all moreSpecific methods are equal then see if duplicates exist because of substitution\r\n  caveat: this is not a direct implementation of JLS\r\n  may answer null if no class around\r\n  may answer null if no method around\r\n  no autoboxing or varargs support needed\r\n  can call foo(int i, X ... x) with foo(1) but NOT foo();\r\n  all remaining argument types must be compatible with the elementsType of varArgType\r\n  varargs support needed\r\n  is an ArrayBinding by definition\r\n  expect X[], is it called with X\r\n  varargs support needed\r\n  now compare standard arguments from 0 to lastIndex\r\n  only called if env.options.sourceLevel >= ClassFileConstants.JDK1_5\r\n  start position in this scope - for ordering scopes vs. variables\r\n  AspectJ Extension - hooks, added distinction between enclosingSourceType and invocationType\r\n /* Scope kinds */\r\n /* Argument Compatibilities */\r\n /* Type Compatibilities */\r\n /* Answer an int describing the relationship between the given types.\r\n\t*\r\n\t* \t\tNOT_RELATED \r\n\t* \t\tEQUAL_OR_MORE_SPECIFIC : left is compatible with right\r\n\t* \t\tMORE_GENERIC : right is compatible with left\r\n\t*/\r\n /*\r\n\t * Boxing primitive\r\n\t */\r\n /* Answer the scope receiver type (could be parameterized)\r\n\t*/\r\n /* Answer the scope enclosing source type (could be generic)\r\n\t*/\r\n /*1.5*/\r\n /*resolve*/\r\n /* closest match*/\r\n /* closest match*/\r\n /*resolve*/\r\n /* closest match*/\r\n /*\tAnswer the field binding that corresponds to fieldName.\r\n\t\tStart the lookup at the receiverType.\r\n\t\tInvocationSite implements\r\n\t\t\tisSuperAccess(); this is used to determine if the discovered field is visible.\r\n\t\tOnly fields defined by the receiverType or its supertypes are answered;\r\n\t\ta field of an enclosing type will not be found using this API.\r\n\t\r\n\t\tIf no visible field is discovered, null is answered.\r\n\t*/\r\n /* else return the same error as before */\r\n /*1.5*/\r\n /* API\r\n\t *\t\r\n\t *\tAnswer the binding that corresponds to the argument name.\r\n\t *\tflag is a mask of the following values VARIABLE (= FIELD or LOCAL), TYPE, PACKAGE.\r\n\t *\tOnly bindings corresponding to the mask can be answered.\r\n\t *\r\n\t *\tFor example, getBinding(\"foo\", VARIABLE, site) will answer\r\n\t *\tthe binding for the field or local named \"foo\" (or an error binding if none exists).\r\n\t *\tIf a type named \"foo\" exists, it will not be detected (and an error binding will be answered)\r\n\t *\r\n\t *\tThe VARIABLE mask has precedence over the TYPE mask.\r\n\t *\r\n\t *\tIf the VARIABLE mask is not set, neither fields nor locals will be looked for.\r\n\t *\r\n\t *\tInvocationSite implements:\r\n\t *\t\tisSuperAccess(); this is used to determine if the discovered field is visible.\r\n\t *\r\n\t *\tLimitations: cannot request FIELD independently of LOCAL, or vice versa\r\n\t */\r\n /* API\r\n\t *\t\r\n\t *\tAnswer the method binding that corresponds to selector, argumentTypes.\r\n\t *\tStart the lookup at the enclosing type of the receiver.\r\n\t *\tInvocationSite implements \r\n\t *\t\tisSuperAccess(); this is used to determine if the discovered method is visible.\r\n\t *\t\tsetDepth(int); this is used to record the depth of the discovered method\r\n\t *\t\t\trelative to the enclosing type of the receiver. (If the method is defined\r\n\t *\t\t\tin the enclosing type of the receiver, the depth is 0; in the next enclosing\r\n\t *\t\t\ttype, the depth is 1; and so on\r\n\t * \r\n\t *\tIf no visible method is discovered, an error binding is answered.\r\n\t */\r\n /* Answer the type binding corresponding to the typeName argument, relative to the enclosingType.\r\n\t*/\r\n /*1.5*/\r\n /* Answer the package from the compoundName or null if it begins with a type.\r\n\t* Intended to be used while resolving a qualified type name.\r\n\t*\r\n\t* NOTE: If a problem binding is returned, senders should extract the compound name\r\n\t* from the binding & not assume the problem applies to the entire compoundName.\r\n\t*/\r\n /* Answer the type binding that corresponds to the given name, starting the lookup in the receiver\r\n\t* or the packageBinding if provided.\r\n\t* The name provided is a simple source name (e.g., \"Object\" , \"Point\", ...)\r\n\t*/\r\n /* Answer the type binding corresponding to the compoundName.\r\n\t*\r\n\t* NOTE: If a problem binding is returned, senders should extract the compound name\r\n\t* from the binding & not assume the problem applies to the entire compoundName.\r\n\t*/\r\n /* Internal use only \r\n\t*/\r\n /* Answer true if the scope is nested inside a given field declaration.\r\n\t * Note: it works as long as the scope.fieldDeclarationIndex is reflecting the field being traversed \r\n\t * e.g. during name resolution.\r\n\t*/\r\n /* Answer true if the scope is nested inside a given method declaration\r\n\t*/\r\n /* Answer whether the type is defined in the same compilation unit as the receiver\r\n\t*/\r\n /* Answer true if the scope is nested inside a given type declaration\r\n\t*/\r\n /*no extra bound*/\r\n /*no extra bound*/\r\n /*no extra bound*/\r\n /*no extra bound*/\r\n /*no extra bound*/\r\n /*no extra bound*/\r\n /*no extra bound*/\r\n /*no extra bound*/\r\n /*no extra bound*/\r\n /*no extra bound*/\r\n /*no extra bound*/\r\n /*no extra bound*/\r\n /* All methods in visible are acceptable matches for the method in question...\r\n\t* The methods defined by the receiver type appear before those defined by its\r\n\t* superclass and so on. We want to find the one which matches best.\r\n\t*\r\n\t* Since the receiver type is a class, we know each method's declaring class is\r\n\t* either the receiver type or one of its superclasses. It is an error if the best match\r\n\t* is defined by a superclass, when a lesser match is defined by the receiver type\r\n\t* or a closer superclass.\r\n\t*/\r\n /* All methods in visible are acceptable matches for the method in question...\r\n\t* Since the receiver type is an interface, we ignore the possibility that 2 inherited\r\n\t* but unrelated superinterfaces may define the same method in acceptable but\r\n\t* not identical ways... we just take the best match that we find since any class which\r\n\t* implements the receiver interface MUST implement all signatures for the method...\r\n\t* in which case the best match is correct.\r\n\t*\r\n\t* NOTE: This is different than javac... in the following example, the message send of\r\n\t* bar(X) in class Y is supposed to be ambiguous. But any class which implements the\r\n\t* interface I MUST implement both signatures for bar. If this class was the receiver of\r\n\t* the message send instead of the interface I, then no problem would be reported.\r\n\t*\r\n\tinterface I1 {\r\n\t\tvoid bar(J j);\r\n\t}\r\n\tinterface I2 {\r\n\t//\tvoid bar(J j);\r\n\t\tvoid bar(Object o);\r\n\t}\r\n\tinterface I extends I1, I2 {}\r\n\tinterface J {}\r\n\t\r\n\tclass X implements J {}\r\n\t\r\n\tclass Y extends X {\r\n\t\tpublic void foo(I i, X x) { i.bar(x); }\r\n\t}\r\n\t*/\r\n /* There are 4 choices to consider with current & next :\r\n\t\t\t\t\t foo(B) & foo(A) where B extends A\r\n\t\t\t\t\t 1. the 2 methods are equal (both accept each others parameters) -> want to continue\r\n\t\t\t\t\t 2. current has more specific parameters than next (so acceptable is a valid method) -> want to continue\r\n\t\t\t\t\t 3. current has less specific parameters than next (so acceptable is null) -> go on to next\r\n\t\t\t\t\t 4. current and next are not compatible with each other (so acceptable is null) -> go on to next\r\n\t\t\t\t\t */\r\n","ConcreteCflowPointcut":"couldMatchKinds fastMatch matchInternal getUsedFormalSlots write resolveBindings parameterizeWith equals hashCode toString findResidueInternal concretize1 accept equals hashCode toString couldMatchKinds fastMatch matchInternal getUsedFormalSlots write resolveBindings parameterizeWith equals hashCode toString findResidueInternal concretize1 accept equals hashCode toString cflowField slots usesCounter cflowStackIsValidMethod cflowCounterIsValidMethod formalIndex formalType arrayIndex cflowField slots usesCounter cflowStackIsValidMethod cflowCounterIsValidMethod formalIndex formalType arrayIndex org.aspectj.weaver.patterns.ConcreteCflowPointcut org.aspectj.weaver.patterns.ConcreteCflowPointcut  exposed for testing\r\n  Can either use a counter or a stack to implement cflow.\r\n  to create the residue\r\n  used by weaver when validating bindings\r\n  System.out.println(\"slot: \" + slot.formalIndex);\r\n  null for cflows managed by counters\r\n  System.out.println(\"find residue: \" + this);\r\n  exposed for testing\r\n  Can either use a counter or a stack to implement cflow.\r\n  to create the residue\r\n  used by weaver when validating bindings\r\n  System.out.println(\"slot: \" + slot.formalIndex);\r\n  null for cflows managed by counters\r\n  System.out.println(\"find residue: \" + this);\r\n /*Slot*/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /*Slot*/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","AdviceSignature":"getReturnType getAdvice getReturnType getAdvice getReturnType getAdvice org.aspectj.lang.reflect.AdviceSignature org.aspectj.lang.reflect.AdviceSignature org.aspectj.lang.reflect.AdviceSignature /* (some around also return Void.Type)      */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* (some around also return Void.Type)      */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* (some around also return Void.Type)      */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","InstructionTargeter":"containsTarget updateTarget containsTarget updateTarget org.aspectj.apache.bcel.generic.InstructionTargeter org.aspectj.apache.bcel.generic.InstructionTargeter","MoveElementsOperation":"getMainTaskName isMove org.aspectj.org.eclipse.jdt.internal.core.MoveElementsOperation","IExtendedCompletionRequestor":"acceptPotentialMethodDeclaration org.aspectj.org.eclipse.jdt.internal.codeassist.IExtendedCompletionRequestor  TODO remove this class once no more clients\r\n","IINC":"wide dump getLength toString getIncrement wide dump getLength toString getIncrement c c org.aspectj.apache.bcel.generic.IINC org.aspectj.apache.bcel.generic.IINC  includes wide byte\r\n  includes wide byte\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n","LocalVariableTableEntry":"getStartPC getLength getNameIndex getDescriptorIndex getIndex getName getDescriptor startPC length nameIndex descriptorIndex name descriptor index org.aspectj.org.eclipse.jdt.internal.core.util.LocalVariableTableEntry","SyntheticRepository":"getInstance getInstance storeClass removeClass findClass loadClass loadClass loadClass clear getInstance getInstance storeClass removeClass findClass loadClass loadClass loadClass clear DEFAULT_PATH _instances _path _loadedClasses DEFAULT_PATH _instances _path _loadedClasses org.aspectj.apache.bcel.util.SyntheticRepository org.aspectj.apache.bcel.util.SyntheticRepository  CLASSPATH X REPOSITORY\r\n  CLASSNAME X JAVACLASS\r\n  Just in case, canonical form\r\n  CLASSPATH X REPOSITORY\r\n  CLASSNAME X JAVACLASS\r\n  Just in case, canonical form\r\n","IJavaModel":"contains copy delete getJavaProject getJavaProjects getNonJavaResources getWorkspace move refreshExternalArchives rename org.aspectj.org.eclipse.jdt.core.IJavaModel","AnnotationInfo":"decodeAnnotation decodeDefaultValue getElementValuePairs getTypeName initialize readRetentionPolicy readTargetValue scanAnnotation scanElementValue toString typename pairs standardAnnotationTagBits readOffset EmptyValueArray org.aspectj.org.eclipse.jdt.internal.compiler.classfmt.AnnotationInfo  u2 type_index + u2 num_member_value_pair\r\n  u2 member_name_index;\r\n  u1 tag;\r\n  boolean constant\r\n  integer constant\r\n  char constant\r\n  byte constant\r\n  short constant\r\n  double constant\r\n  float constant\r\n  long constant\r\n  String\r\n  $NON-NLS-1$\r\n  level.\r\n  level.\r\n  u2 type_index + u2 number_member_value_pair\r\n  u2 member_name_index\r\n  level.\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","ContextFormatter":"formatEntry formatEntry org.aspectj.bridge.context.ContextFormatter org.aspectj.bridge.context.ContextFormatter /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","InstructionCLV":"setIndex canSetIndex setIndex canSetIndex org.aspectj.apache.bcel.generic.InstructionCLV org.aspectj.apache.bcel.generic.InstructionCLV","SyntheticFieldBinding":"index org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SyntheticFieldBinding","IModifierConstants":"ACC_PUBLIC ACC_PRIVATE ACC_PROTECTED ACC_STATIC ACC_FINAL ACC_SUPER ACC_SYNCHRONIZED ACC_VOLATILE ACC_BRIDGE ACC_TRANSIENT ACC_VARARGS ACC_NATIVE ACC_INTERFACE ACC_ABSTRACT ACC_STRICT ACC_SYNTHETIC ACC_ANNOTATION ACC_ENUM org.aspectj.org.eclipse.jdt.core.util.IModifierConstants","SourceTypeConverter":"buildCompilationUnit convert addIdentifiers convert convert convert convert convert convertAnnotations createImportReference createTypeParameter createTypeReference createTypeReference decodeType decodeType decodeTypeArguments decodeTypeArguments extractIdentifiers getSource parseMemberValue serialVersionUID FIELD CONSTRUCTOR METHOD MEMBER_TYPE FIELD_INITIALIZATION FIELD_AND_METHOD LOCAL_TYPE NONE flags unit parser problemReporter cu source annotationPositions has1_5Compliance namePos org.aspectj.org.eclipse.jdt.internal.compiler.parser.SourceTypeConverter  long start = System.currentTimeMillis();\r\n  if more than 10 annotations, diet parse as this is faster\r\n  if its null then it is defined in the default package\r\n  clear AccEnum bit onto AST (binding will add it)\r\n  convert 1.5 specific constructs only if compliance is 1.5 or above\r\n  convert 1.5 specific constructs only if compliance is 1.5 or above\r\n  method's type parameters must be null if no type parameter\r\n  could not retrieve the default value\r\n  convert return type\r\n  type parameters\r\n  convert 1.5 specific constructs only if compliance is 1.5 or above\r\n  only positions available\r\n  convert 1.5 specific constructs only if compliance is 1.5 or above\r\n  Does not need the extra constructor since one constructor already exists.\r\n  add default constructor in first position\r\n  fix-up flag\r\n  resize to remove null annotations\r\n  dummy positions\r\n  handle name starting with a $ (see https:  convert 1.5 specific constructs only if compliance is 1.5 or above\r\n  skip '<'\r\n  positionned on '>' at end\r\n  next increment will skip '>'\r\n  check trailing qualified name\r\n  parameterized single type\r\n  parameterized qualified type\r\n  qualified type reference\r\n  simple type reference\r\n  skip '?'\r\n  member type name\r\n  convert 1.5 specific constructs only if compliance is 1.5 or above\r\n  skip '<'\r\n  positionned on '>' at end\r\n  next increment will skip '>'\r\n  check trailing qualified name\r\n  parameterized single type\r\n  parameterized qualified type\r\n  qualified type reference\r\n  simple type reference\r\n  skip ','\r\n  memberValue must not be null\r\n /* \r\n\t * Exception thrown while converting an anonymous type of a member type\r\n\t * in this case, we must parse the source as the enclosing instance cannot be recreated\r\n\t * from the model\r\n\t */\r\n /*\r\n\t * Convert a set of source element types into a parsed compilation unit declaration\r\n\t * The argument types are then all grouped in the same unit. The argument types must \r\n\t * at least contain one type.\r\n\t * Can optionally ignore fields & methods or member types or field initialization\r\n\t */\r\n /* only positions available */\r\n /* convert package and imports */\r\n /*\r\n\t\t\t * We used a temporary types collection to prevent this.unit.types from being null during a call to\r\n\t\t\t * convert(...) when the source is syntactically incorrect and the parser is flushing the unit's types.\r\n\t\t\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=97466\r\n\t\t\t */\r\n /* convert type(s) */\r\n /*\r\n\t * Convert a set of source element types into a parsed compilation unit declaration\r\n\t * The argument types are then all grouped in the same unit. The argument types must \r\n\t * at least contain one type.\r\n\t */\r\n /* convert local and anonymous types */\r\n /*\r\n\t * Convert an initializerinfo into a parsed initializer declaration\r\n\t */\r\n /* convert annotations */\r\n /* conversion of field constant */\r\n /* conversion of local and anonymous types */\r\n /*\r\n\t * Convert a field source element into a parsed field declaration\r\n\t */\r\n /* only source positions available */\r\n /* convert type parameters */\r\n /* conversion of default value */\r\n /* convert annotations */\r\n /* convert arguments */\r\n /* convert thrown exceptions */\r\n /* convert local and anonymous types */\r\n /*\r\n\t * Convert a method source element into a parsed method/constructor declaration \r\n\t */\r\n /* create type declaration - can be member type */\r\n /* convert annotations */\r\n /* convert type parameters */\r\n /* set superclass and superinterfaces */\r\n /* convert member types */\r\n /* convert intializers and fields*/\r\n /* convert methods - need to add default constructor if necessary */\r\n /* by default, we assume that one is needed. */\r\n /*\r\n\t * Convert a source element type into a parsed type declaration\r\n\t */\r\n /*\r\n    \t\t\t * expression can be null or not an annotation if the source has changed between\r\n    \t\t\t * the moment where the annotation source positions have been retrieved and the moment were\r\n    \t\t\t * this parsing occured.\r\n    \t\t\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=90916\r\n    \t\t\t */\r\n /*\r\n\t * Build an import reference from an import name, e.g. java.lang.*\r\n\t */\r\n /*\r\n\t * Build a type reference from a readable name, e.g. java.lang.Object[][]\r\n\t */\r\n /*\r\n\t * Build a type reference from a type signature, e.g. Ljava.lang.Object;\r\n\t */\r\n /* rebuild identifiers and dimensions */\r\n /* rebuild identifiers and dimensions */\r\n","BranchStatement":"generateCode resolve label targetLabel subroutines initStateIndex org.aspectj.org.eclipse.jdt.internal.compiler.ast.BranchStatement  blocks in sequence\r\n","ProceedingJoinPoint":"set$AroundClosure proceed proceed set$AroundClosure proceed proceed set$AroundClosure proceed proceed org.aspectj.lang.ProceedingJoinPoint org.aspectj.lang.ProceedingJoinPoint org.aspectj.lang.ProceedingJoinPoint","ArgsPointcut":"getArguments parameterizeWith couldMatchKinds fastMatch matchInternal getArgumentsToMatchAgainst getBindingAnnotationTypePatterns getBindingTypePatterns write read equals hashCode resolveBindings postRead concretize1 findResidueNoEllipsis isUncheckedArgumentWarningSuppressed findResidueInternal toString accept getArguments parameterizeWith couldMatchKinds fastMatch matchInternal getArgumentsToMatchAgainst getBindingAnnotationTypePatterns getBindingTypePatterns write read equals hashCode resolveBindings postRead concretize1 findResidueNoEllipsis isUncheckedArgumentWarningSuppressed findResidueInternal toString accept ASPECTJ_JP_SIGNATURE_PREFIX ASPECTJ_SYNTHETIC_SIGNATURE_PREFIX arguments stringRepresentation ASPECTJ_JP_SIGNATURE_PREFIX ASPECTJ_SYNTHETIC_SIGNATURE_PREFIX arguments stringRepresentation org.aspectj.weaver.patterns.ArgsPointcut org.aspectj.weaver.patterns.ArgsPointcut  empty args() matches jps with no args\r\n  there are one or more synthetic args on the end, caused by non-public itd constructor\r\n  normal arg after AJ type means earlier arg was NOT synthetic\r\n  want to ignore.\r\n  Enforce rule about which designators are supported in declare\r\n  System.err.println(\"boudn to : \" + len + \", \" + patterns.length);\r\n  l1+1 >= l0\r\n  empty args() matches jps with no args\r\n  there are one or more synthetic args on the end, caused by non-public itd constructor\r\n  normal arg after AJ type means earlier arg was NOT synthetic\r\n  want to ignore.\r\n  Enforce rule about which designators are supported in declare\r\n  System.err.println(\"boudn to : \" + len + \", \" + patterns.length);\r\n  l1+1 >= l0\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingAnnotationTypePatterns()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingTypePatterns()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingAnnotationTypePatterns()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingTypePatterns()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","AjCompiler":"getId getCompilerConfiguration getBuildProgressMonitor getMessageHandler build buildFresh clearLastState isJava6Compatible hasValidId setCustomMungerFactory getCustomMungerFactory compilerId compilerConfig monitor handler buildManager org.aspectj.ajde.core.AjCompiler","FieldPattern":"createIndexKey decodeIndexKey getBlankPattern getIndexKey getIndexCategories matchesDecodedKey mustResolve print declaringQualification declaringSimpleName typeQualification typeSimpleName REF_CATEGORIES REF_AND_DECL_CATEGORIES DECL_CATEGORIES org.aspectj.org.eclipse.jdt.internal.core.search.matching.FieldPattern  declaring type\r\n  type\r\n  store type signatures and arguments\r\n  index key is not encoded so query results all match\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n * Instanciate a field pattern with additional information for generics search\r\n */\r\n","ajcPrivileged":"/* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","LocalVariablePattern":"findIndexMatches print localVariable org.aspectj.org.eclipse.jdt.internal.core.search.matching.LocalVariablePattern  Note that requestor has to verify if needed whether the document violates the access restriction or not\r\n  scope encloses the path\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","BuildArgParser":"getUsage getXOptionUsage genBuildConfig populateBuildConfig printVersion printUsage getOtherMessages setDebugOptions collectSourceRootFiles getBootclasspath getClasspath addExtDirs addClasspath getUnparsedArgs parseOption dirLookahead showError showWarning makeFile BUNDLE_NAME LOADED_BUNDLE stringWriter errorSink handler bootclasspath classpath extdirs unparsedArgs buildConfig handler org.aspectj.ajdt.ajc.BuildArgParser  sets filenames to be non-null in order to make sure that file parameters are ignored\r\n  Now jump through firey hoops to turn them on  ??? might want to instead override getDefaultOptions()\r\n  TODO fix org.eclipse.jdt.internal.compiler.batch.Main so this hack isn't needed\r\n  XXX ?? unparsed but set?\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  ??? we're brave and believe we don't need it\r\n  classpathCollector.add(tokenizer.nextToken());\r\n  XXX assumes unique\r\n  now default - MINOR could be pushed down and made default at a lower level\r\n  (Actually, -noExit grabbed by Main)\r\n  CompilerOptions.GENERATE);\r\n  XXX relax restriction on props file suffix?\r\n  do nothing as this is now on by default\r\n  remove it as it's already been handled in org.aspectj.tools.ajc.Main\r\n  remove it as it's already been handled in org.aspectj.tools.ajc.Main\r\n  buildConfig.getAjOptions().put(AjCompilerOptions.OPTION_OutJAR, CompilerOptions.GENERATE);\r\n /*\r\n\t\t\t * Ensure we don't overwrite injars, inpath or aspectpath with outjar bug-71339\r\n\t\t\t */\r\n /* Search injars */\r\n /* Search inpath */\r\n /* Search aspectpath */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","IConstantPool":"getConstantPoolCount getEntryKind decodeEntry org.aspectj.org.eclipse.jdt.core.util.IConstantPool","SuffixConstants":"EXTENSION_class EXTENSION_CLASS EXTENSION_java EXTENSION_JAVA SUFFIX_STRING_class SUFFIX_STRING_CLASS SUFFIX_STRING_java SUFFIX_STRING_JAVA SUFFIX_class SUFFIX_CLASS SUFFIX_java SUFFIX_JAVA EXTENSION_aj EXTENSION_AJ SUFFIX_STRING_aj SUFFIX_STRING_AJ SUFFIX_aj SUFFIX_AJ EXTENSION_jar EXTENSION_JAR EXTENSION_zip EXTENSION_ZIP SUFFIX_STRING_jar SUFFIX_STRING_JAR SUFFIX_STRING_zip SUFFIX_STRING_ZIP SUFFIX_jar SUFFIX_JAR SUFFIX_zip SUFFIX_ZIP org.aspectj.org.eclipse.jdt.internal.compiler.util.SuffixConstants  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","SingleMemberAnnotation":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty internalTypeNameProperty getNodeType0 clone0 subtreeMatch0 accept0 getValue setValue memSize treeSize computeElementValuePairs memberValuePairs printExpression traverse TYPE_NAME_PROPERTY VALUE_PROPERTY PROPERTY_DESCRIPTORS value memberValue singlePairs org.aspectj.org.eclipse.jdt.core.dom.SingleMemberAnnotation org.aspectj.org.eclipse.jdt.internal.compiler.ast.SingleMemberAnnotation  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  fake pair set, only value has accurate positions\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","Definition":"getWeaverOptions getDumpPatterns setDumpBefore shouldDumpBefore setCreateDumpDirPerClassloader createDumpDirPerClassloader getIncludePatterns getExcludePatterns getAspectClassNames getAspectExcludePatterns getAspectIncludePatterns getConcreteAspects appendWeaverOptions getWeaverOptions getDumpPatterns setDumpBefore shouldDumpBefore setCreateDumpDirPerClassloader createDumpDirPerClassloader getIncludePatterns getExcludePatterns getAspectClassNames getAspectExcludePatterns getAspectIncludePatterns getConcreteAspects appendWeaverOptions m_weaverOptions m_dumpPatterns m_dumpBefore perClassloaderDumpDir m_includePatterns m_excludePatterns m_aspectClassNames m_aspectExcludePatterns m_aspectIncludePatterns m_concreteAspects name extend precedence pointcuts perclause name expression m_weaverOptions m_dumpPatterns m_dumpBefore perClassloaderDumpDir m_includePatterns m_excludePatterns m_aspectClassNames m_aspectExcludePatterns m_aspectIncludePatterns m_concreteAspects name extend precedence pointcuts perclause name expression org.aspectj.weaver.loadtime.definition.Definition org.aspectj.weaver.loadtime.definition.Definition  make sure extend set to null if \"\"\r\n  make sure extend set to null if \"\"\r\n","ISourceManipulation":"copy delete move rename org.aspectj.org.eclipse.jdt.core.ISourceManipulation","SelectionOnArgumentName":"bind print resolve org.aspectj.org.eclipse.jdt.internal.codeassist.select.SelectionOnArgumentName  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","BcelVar":"toString getSlot createLoad createStore appendStore appendLoad appendLoadAndConvert insertLoad createCopyFrom appendConvertableArrayLoad appendConvertableArrayStore createConvertableArrayStore createConvertableArrayLoad getPositionInAroundState setPositionInAroundState toString getSlot createLoad createStore appendStore appendLoad appendLoadAndConvert insertLoad createCopyFrom appendConvertableArrayLoad appendConvertableArrayStore createConvertableArrayStore createConvertableArrayLoad getPositionInAroundState setPositionInAroundState positionInAroundState slot NONE positionInAroundState slot NONE org.aspectj.weaver.bcel.BcelVar org.aspectj.weaver.bcel.BcelVar  fact is used in the subtypes\r\n  this is an array var\r\n  fact is used in the subtypes\r\n  this is an array var\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","JavaElementDelta":"addAffectedChild added added addResourceDelta changed changedAST contentChanged closed createDeltaTree equalsAndSameParent find fineGrained getAddedChildren getAffectedChildren getAncestors getCompilationUnitAST getChangedChildren getChildrenOfType getDeltaFor getElement getMovedFromElement getMovedToElement getRemovedChildren getResourceDeltas growAndAddToArray insertDeltaTree movedFrom movedTo opened removeAffectedChild removeAndShrinkArray removed removed sourceAttached sourceDetached toDebugString toDebugString toString affectedChildren ast changedElement resourceDeltas resourceDeltasCounter movedFromHandle movedToHandle EMPTY_DELTA org.aspectj.org.eclipse.jdt.internal.core.JavaElementDelta  no need to add a child if this parent is added or removed\r\n  it's a fine grained delta\r\n  handle case of two jars that can be equals but not in the same project\r\n  child was added then added -> it is added\r\n  child was added then changed -> it is added\r\n  child was added then removed -> noop\r\n  child was removed then added -> it is changed\r\n  child was removed then changed -> it is removed\r\n  child was removed then removed -> it is removed\r\n  child was changed then added -> it is added\r\n  child was changed then removed -> it is removed\r\n  child was changed then changed -> it is changed\r\n  update flags\r\n  DeltaProcessor (child))\r\n  as non-java resource deltas are always created last (by the DeltaProcessor)\r\n  unknown -> existing child becomes the child with the existing child's flags\r\n  new affected child\r\n  no need to add a child if this parent is added or removed\r\n  need a resize\r\n  the element being changed is the root element\r\n  handle case of two jars that can be equals but not in the same project\r\n  handle case of two jars that can be equals but not in the same project\r\n  handle case of two jars that can be equals but not in the same project\r\n  handle case of two jars that can be equals but not in the same project\r\n  handle case of two jars that can be equals but not in the same project\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n\t * The AST created during the last reconcile operation.\r\n\t * Non-null only iff:\r\n\t * - in a POST_RECONCILE event\r\n\t * - an AST was requested during the last reconcile operation\r\n\t * - the changed element is an ICompilationUnit in working copy mode\r\n\t */\r\n /*\r\n\t * The element that this delta describes the change to.\r\n\t */\r\n /*\r\n * Records the last changed AST  .\r\n */\r\n","ClassElementValueGen":"getIndex getClassString stringifyValue dump getIndex getClassString stringifyValue dump idx idx org.aspectj.apache.bcel.classfile.annotation.ClassElementValueGen org.aspectj.apache.bcel.classfile.annotation.ClassElementValueGen  For 'class' this points to the class entry in the cpool\r\n  this.idx = cpool.addClass(t);\r\n  idx = cpool.addClass(value.getClassString());\r\n  u1 kind of value\r\n  For 'class' this points to the class entry in the cpool\r\n  this.idx = cpool.addClass(t);\r\n  idx = cpool.addClass(value.getClassString());\r\n  u1 kind of value\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement -     initial implementation {date}\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement -     initial implementation {date}\r\n * ******************************************************************/\r\n","BooleanConstant":"fromValue booleanValue stringValue toString typeID value TRUE FALSE org.aspectj.org.eclipse.jdt.internal.compiler.impl.BooleanConstant  spec 15.17.11\r\n  $NON-NLS-1$\r\n","ThrownExceptionFinder":"find acceptException endVisit endVisit endVisit endVisitMethodInvocation visit visit visit visitType visit removeCaughtExceptions removeCaughtException thrownExceptions exceptionsStack org.aspectj.org.eclipse.jdt.internal.codeassist.ThrownExceptionFinder","ArgsAnnotationPointcut":"getArguments couldMatchKinds parameterizeWith fastMatch matchInternal resolveBindings concretize1 findResidueInternal getBindingAnnotationTypePatterns getBindingTypePatterns write read equals hashCode buildDeclarationText toString accept getArguments couldMatchKinds parameterizeWith fastMatch matchInternal resolveBindings concretize1 findResidueInternal getBindingAnnotationTypePatterns getBindingTypePatterns write read equals hashCode buildDeclarationText toString accept arguments declarationText arguments declarationText org.aspectj.weaver.patterns.ArgsAnnotationPointcut org.aspectj.weaver.patterns.ArgsAnnotationPointcut  empty args() matches jps with no args\r\n  Enforce rule about which designators are supported in declare\r\n  do some quick length tests first\r\n  should never happen\r\n  should never happen\r\n  now work through the args and the patterns, skipping at ellipsis\r\n  we know it is exact because nothing else is allowed in args\r\n  we need a test...\r\n  match ellipsisMatchCount args\r\n  empty args() matches jps with no args\r\n  Enforce rule about which designators are supported in declare\r\n  do some quick length tests first\r\n  should never happen\r\n  should never happen\r\n  now work through the args and the patterns, skipping at ellipsis\r\n  we know it is exact because nothing else is allowed in args\r\n  we need a test...\r\n  match ellipsisMatchCount args\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#fastMatch(org.aspectj.weaver.patterns.FastMatchInfo)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#match(org.aspectj.weaver.Shadow)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#resolveBindings(org.aspectj.weaver.patterns.IScope, org.aspectj.weaver.patterns.Bindings)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#concretize1(org.aspectj.weaver.ResolvedType, org.aspectj.weaver.IntMap)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#findResidue(org.aspectj.weaver.Shadow, org.aspectj.weaver.patterns.ExposedState)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingAnnotationTypePatterns()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingTypePatterns()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.PatternNode#write(java.io.DataOutputStream)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n /* (non-Javadoc)\r\n     * @see java.lang.Object#toString()\r\n     */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#fastMatch(org.aspectj.weaver.patterns.FastMatchInfo)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#match(org.aspectj.weaver.Shadow)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#resolveBindings(org.aspectj.weaver.patterns.IScope, org.aspectj.weaver.patterns.Bindings)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#concretize1(org.aspectj.weaver.ResolvedType, org.aspectj.weaver.IntMap)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.Pointcut#findResidue(org.aspectj.weaver.Shadow, org.aspectj.weaver.patterns.ExposedState)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingAnnotationTypePatterns()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.NameBindingPointcut#getBindingTypePatterns()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.PatternNode#write(java.io.DataOutputStream)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n /* (non-Javadoc)\r\n     * @see java.lang.Object#toString()\r\n     */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","DeclareError":"/* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","ajcDeclareParents":"/* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","LineInformation":"create create getLineOfOffset getLineOffset org.aspectj.org.eclipse.jdt.internal.core.dom.rewrite.LineInformation","TypeParameterDeclarationMatch":"org.aspectj.org.eclipse.jdt.core.search.TypeParameterDeclarationMatch","DefaultStackMapFrame":"sizeInBytes getFrameType getLocals getNumberOfLocals getNumberOfStackItems getOffsetDelta getStackItems EMPTY_LOCALS_OR_STACK_ITEMS readOffset numberOfLocals numberOfStackItems locals stackItems offsetDelta org.aspectj.org.eclipse.jdt.internal.core.util.DefaultStackMapFrame  FULL_FRAME\r\n  full_frame\r\n","JoinPoint":"toString toShortString toLongString getThis getTarget getArgs getSignature getSourceLocation getKind getSignature getSourceLocation getKind toString toShortString toLongString getStaticPart toString toShortString toLongString getThis getTarget getArgs getSignature getSourceLocation getKind getSignature getSourceLocation getKind toString toShortString toLongString getStaticPart toString toShortString toLongString getThis getTarget getArgs getSignature getSourceLocation getKind getSignature getSourceLocation getKind toString toShortString toLongString getStaticPart METHOD_EXECUTION METHOD_CALL CONSTRUCTOR_EXECUTION CONSTRUCTOR_CALL FIELD_GET FIELD_SET STATICINITIALIZATION PREINITIALIZATION INITIALIZATION EXCEPTION_HANDLER SYNCHRONIZATION_LOCK SYNCHRONIZATION_UNLOCK ADVICE_EXECUTION METHOD_EXECUTION METHOD_CALL CONSTRUCTOR_EXECUTION CONSTRUCTOR_CALL FIELD_GET FIELD_SET STATICINITIALIZATION PREINITIALIZATION INITIALIZATION EXCEPTION_HANDLER SYNCHRONIZATION_LOCK SYNCHRONIZATION_UNLOCK ADVICE_EXECUTION METHOD_EXECUTION METHOD_CALL CONSTRUCTOR_EXECUTION CONSTRUCTOR_CALL FIELD_GET FIELD_SET STATICINITIALIZATION PREINITIALIZATION INITIALIZATION EXCEPTION_HANDLER SYNCHRONIZATION_LOCK SYNCHRONIZATION_UNLOCK ADVICE_EXECUTION org.aspectj.lang.JoinPoint org.aspectj.lang.JoinPoint org.aspectj.lang.JoinPoint /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","ASTRequestor":"acceptAST acceptBinding createBindings compilationUnitResolver org.aspectj.org.eclipse.jdt.core.dom.ASTRequestor","ASTRewrite":"create getAST getRewriteEventStore getNodeStore rewriteAST rewriteAST internalRewriteAST getRootNode remove replace set get getListRewrite track validateIsExistingNode validateIsCorrectAST validateIsListProperty validatePropertyType createStringPlaceholder createGroupNode createTargetNode createCopyTarget createMoveTarget getExtendedSourceRangeComputer setTargetSourceRangeComputer toString ast eventStore nodeStore targetSourceRangeComputer org.aspectj.org.eclipse.jdt.core.dom.rewrite.ASTRewrite  no changes\r\n  no changes\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  ASTRewriteAnalyzer visitor= new ASTRewriteAnalyzer(content, lineInfo, lineDelim, result, this.eventStore, this.nodeStore, commentNodes, options, sourceRangeComputer);\r\n  throws IllegalArgumentException\r\n  go up until a node covers all\r\n  go up until a parent has different range\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  lazy initialize\r\n  if computer==null, rely on lazy init code in getTargetSourceRangeComputer()\r\n  $NON-NLS-1$\r\n  be extra careful of uninitialized or mangled instances\r\n","INameEnvironment":"findType findType isPackage cleanup org.aspectj.org.eclipse.jdt.internal.compiler.env.INameEnvironment","AbstractImageBuilder":"acceptResult acceptSecondaryType addAllSourceFiles cleanUp compile compile createProblemFor deleteGeneratedFiles findSourceFile finishedWith createFolder fromIFile initializeAnnotationProcessorManager internalException isExcludedFromProject newCompiler notifyParticipants processAnnotationResults processAnnotations recordParticipantResult storeProblemsFor storeTasksFor updateProblemsFor updateTasksFor writeClassFile writeClassFileBytes javaBuilder newState nameEnvironment sourceLocations notifier compiler workQueue problemSourceFiles compiledAllAtOnce inCompiler keepStoringProblemMarkers filesWithAnnotations MAX_AT_ONCE JAVA_PROBLEM_MARKER_ATTRIBUTE_NAMES JAVA_TASK_MARKER_ATTRIBUTE_NAMES S_ERROR S_WARNING P_HIGH P_NORMAL P_LOW org.aspectj.org.eclipse.jdt.internal.core.builder.AbstractImageBuilder  local copies\r\n  best compromise between space used and speed\r\n  local copies\r\n  may get disabled when missing classfiles are encountered\r\n  the compile loop. The normal dependency loop will then recompile all affected types\r\n  go directly back to the sourceFile\r\n  record compilation problems before potentially adding duplicate errors\r\n  record tasks\r\n  ensure that this file is always retrieved from source for the rest of the build\r\n  the qualified type name \"p1  slash separated qualified name \"p1  Look for a possible collision, if one exists, report an error but do not write the class file\r\n  $NON-NLS-1$\r\n  only initialized if an annotation processor is attached\r\n  but folder is excluded so do not create it in the output folder\r\n  will add files that have annotations in acceptResult() & then processAnnotations() before exitting this method\r\n  notify CompilationParticipants which source files are about to be compiled\r\n  copy of units, removing units when about to compile\r\n  already been compiled when it was referenced by another unit.\r\n  $NON-NLS-1$   use the class file for this source file since its been compiled\r\n  $NON-NLS-1$\r\n  do them all now\r\n  just to change the message\r\n  extend additionalFilenames with all hierarchical problem types found during this entire build\r\n  have been cancelled but without propagating the correct exception\r\n  assumes the file exists in at least one of the source folders & is not excluded\r\n  for each duplicate type p1.p2.A, add the type name A (package was already added)\r\n  is a subfolder of a package\r\n  skip default output folder which may not be used by any source folder\r\n  disable entire javadoc support if not interested in diagnostics\r\n  TODO (frederic) see why option is null sometimes while running model tests!?\r\n  Unused import need also to look inside javadoc comment\r\n  called once when the builder is initialized... can override if needed\r\n  enable the compiler reference info support\r\n  support for Java 6 annotation processors\r\n  and what happens if some participants do not expect to be called with only a few files, after seeing 'all' the files?\r\n  is there enough room to add all the addedGeneratedFiles.length ?\r\n  even if no files have annotations, must still tell every annotation processor in case the file used to have them\r\n  must be called after we're finished with the compilation unit results but before incremental loop adds affected files\r\n  existing problems have already been removed so just add these as new problems\r\n  must continue with compile loop so just log the CoreException\r\n  only want the one error recorded on this source file\r\n  make this the only problem for this project\r\n  insert extra classpath problem, and make it the only problem for this project (optional)\r\n  handle missing classfile situation\r\n  standard attributes\r\n  message\r\n  severity\r\n  ID\r\n  start\r\n  end\r\n  line\r\n  arguments\r\n  category ID\r\n  GENERATED_BY attribute for JDT problems\r\n  optional extra attributes\r\n  only want the one error recorded on this source file\r\n  standard attributes\r\n  optional extra attributes\r\n  the qualified type name \"p1  answer the name of the class file as in Y or Y$M\r\n  $NON-NLS-1$\r\n  Default implementation just writes out the bytes for the new class file...\r\n  $NON-NLS-1$\r\n  Deal with shared output folders... last one wins... no collision cases detected\r\n /* Compile the given elements, adding more elements to the work queue \r\n* if they are affected by the changes.\r\n*/\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.internal.core.builder.ICompilationUnitLocator#fromIFile(org.eclipse.core.resources.IFile)\r\n */\r\n","DeclarationOfReferencedTypesPattern":"knownTypes enclosingElement org.aspectj.org.eclipse.jdt.internal.core.search.matching.DeclarationOfReferencedTypesPattern","ParameterizedQualifiedTypeReference":"checkBounds checkBounds copyDims getParameterizedTypeName getTypeBinding internalResolveType printExpression resolveType resolveType traverse traverse typeArguments org.aspectj.org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference  recurse on enclosing type if any, and assuming explictly  part of the reference (index>0)\r\n  argTypes may be null in error cases\r\n  not supported here - combined with resolveType(...)\r\n  handle the error here\r\n  already reported error\r\n  is a shared type reference which was already resolved\r\n  be resilient, still attempt resolving arguments\r\n  be resilient, still attempt resolving arguments\r\n  if member type\r\n  check generic and arity\r\n  raw type\r\n  check arity\r\n  check generic\r\n  check parameterizing non-static member type of raw type\r\n  otherwise will do it in Scope.connectTypeVariables() or generic method resolution\r\n  check argument type compatibility\r\n  array type ?\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n     * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference#getTypeBinding(org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Scope)\r\n     */\r\n /*\r\n     * No need to check for reference to raw type per construction\r\n     */\r\n","ClasspathSourceDirectory":"cleanup directoryTable equals findClass getProjectRelativePath isPackage reset toString debugPathString sourceFolder directoryCache missingPackageHolder fullExclusionPatternChars fulInclusionPatternChars org.aspectj.org.eclipse.jdt.internal.core.search.matching.ClasspathSourceDirectory  package exists in another classpath directory or jar\r\n  this is a case-sensitive check\r\n  $NON-NLS-1$\r\n","AbortIncrementalBuildException":"qualifiedTypeName serialVersionUID org.aspectj.org.eclipse.jdt.internal.core.builder.AbortIncrementalBuildException  backward compatible\r\n","IAnnotationDefaultAttribute":"getMemberValue org.aspectj.org.eclipse.jdt.core.util.IAnnotationDefaultAttribute","IProblemRequestor":"acceptProblem beginReporting endReporting isActive org.aspectj.org.eclipse.jdt.core.IProblemRequestor","RuntimeParameterAnnotations":"dump copy getParameterAnnotations getAnnotationsOnParameter areVisible readParameterAnnotations inflate writeAnnotations isInflated toString dump copy getParameterAnnotations getAnnotationsOnParameter areVisible readParameterAnnotations inflate writeAnnotations isInflated toString parameterAnnotations visible inflated annotation_data parameterAnnotations visible inflated annotation_data org.aspectj.apache.bcel.classfile.annotation.RuntimeParameterAnnotations org.aspectj.apache.bcel.classfile.annotation.RuntimeParameterAnnotations  Keep just a byte stream of the data until someone actually asks for it\r\n  in the parameter annotations array\r\n  Keep just a byte stream of the data until someone actually asks for it\r\n  in the parameter annotations array\r\n /*Annotation[]*/\r\n /*Annotation[]*/\r\n /*Annotation[]*/\r\n /*Annotation[]*/\r\n","SelectionJavadoc":"print internalResolve resolve resolve selectedNode org.aspectj.org.eclipse.jdt.internal.codeassist.select.SelectionJavadoc  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.Javadoc#print(int, java.lang.StringBuffer)\r\n\t */\r\n","SuperConstructorInvocation":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty internalGetChildListProperty getNodeType0 clone0 subtreeMatch0 accept0 getExpression setExpression typeArguments arguments resolveConstructorBinding memSize treeSize EXPRESSION_PROPERTY TYPE_ARGUMENTS_PROPERTY ARGUMENTS_PROPERTY PROPERTY_DESCRIPTORS_2_0 PROPERTY_DESCRIPTORS_3_0 optionalExpression typeArguments arguments org.aspectj.org.eclipse.jdt.core.dom.SuperConstructorInvocation  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  more efficient than just calling unsupportedIn2() to check\r\n  treat Code as free\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","PrivilegedAccessMunger":"write getMember getMatchingSyntheticMember equals hashCode existsToSupportShadowMunging write getMember getMatchingSyntheticMember equals hashCode existsToSupportShadowMunging org.aspectj.weaver.PrivilegedAccessMunger org.aspectj.weaver.PrivilegedAccessMunger  System.err.println(\"sig: \" + getSignature());\r\n  System.err.println(\"sig: \" + getSignature());\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","GeneratedClassHandler":"acceptClass acceptClass org.aspectj.weaver.tools.GeneratedClassHandler org.aspectj.weaver.tools.GeneratedClassHandler /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Matthew Webster, Adrian Colyer, \r\n *     Martin Lippert     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Matthew Webster, Adrian Colyer, \r\n *     Martin Lippert     initial implementation \r\n * ******************************************************************/\r\n","AjNaiveASTFlattener":"getResult reset printIndent printModifiers printModifiers visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit buffer indent org.aspectj.org.eclipse.jdt.core.dom.AjNaiveASTFlattener  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  add empty \"[]\" for each extra array dimension\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  enum constant declarations do not include punctuation\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  for cases like x= i - -1; or x= i++ + ++i;\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  decremented in visit(SwitchStatement)\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  incremented in visit(SwitchCase)\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  but Name, MemberRef, MethodRef, and nested TagElement do not include white space\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  add space if required to separate\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  this.buffer.append(node.isInterface() ? \"interface \" : \"class\");  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  this.buffer.append(node.isInterface() ? \"extends \" : \"implements \");  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  this.buffer.append(node.isInterface() ? \"extends \" : \"implements \");  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  enum constant declarations do not include punctuation\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n\t * @see ASTVisitor#visit(AnnotationTypeDeclaration)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(AnnotationTypeMemberDeclaration)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(AnonymousClassDeclaration)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ArrayAccess)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ArrayCreation)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ArrayInitializer)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ArrayType)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(AssertStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(Assignment)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(Block)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(BlockComment)\r\n\t * @since 3.0\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(BooleanLiteral)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(BreakStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(CastExpression)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(CatchClause)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(CharacterLiteral)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ClassInstanceCreation)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(CompilationUnit)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ConditionalExpression)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ConstructorInvocation)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ContinueStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(DoStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(EmptyStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(EnhancedForStatement)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(EnumConstantDeclaration)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(EnumDeclaration)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ExpressionStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(FieldAccess)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(FieldDeclaration)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ForStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(IfStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ImportDeclaration)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(InfixExpression)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(InstanceofExpression)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(Initializer)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(Javadoc)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(LabeledStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(LineComment)\r\n\t * @since 3.0\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(MarkerAnnotation)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(MemberRef)\r\n\t * @since 3.0\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(MemberValuePair)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(MethodRef)\r\n\t * @since 3.0\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(MethodRefParameter)\r\n\t * @since 3.0\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(MethodDeclaration)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(MethodInvocation)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(Modifier)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(NormalAnnotation)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(NullLiteral)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(NumberLiteral)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(PackageDeclaration)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ParameterizedType)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ParenthesizedExpression)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(PostfixExpression)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(PrefixExpression)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(PrimitiveType)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(QualifiedName)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(QualifiedType)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ReturnStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SimpleName)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SimpleType)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SingleMemberAnnotation)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SingleVariableDeclaration)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(StringLiteral)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SuperConstructorInvocation)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SuperFieldAccess)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SuperMethodInvocation)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SwitchCase)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SwitchStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SynchronizedStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(TagElement)\r\n\t * @since 3.0\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(TextElement)\r\n\t * @since 3.0\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ThisExpression)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ThrowStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(TryStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(TypeDeclaration)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(TypeDeclarationStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(TypeLiteral)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(TypeParameter)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(VariableDeclarationExpression)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(VariableDeclarationFragment)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(VariableDeclarationStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(WildcardType)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(WhileStatement)\r\n\t */\r\n","CompletionOnMessageSend":"resolveType printExpression org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnMessageSend  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","VariablesEvaluator":"addEvaluationResultForCompilationProblem getClassName getCompiler getPackageName getSource numberOfCRs org.aspectj.org.eclipse.jdt.internal.eval.VariablesEvaluator  set evaluation id and type to an internal problem by default\r\n  check package declaration\r\n  set evaluation id and type\r\n  shift line number, source start and source end\r\n  check imports\r\n  set evaluation id and type\r\n  shift line number, source start and source end\r\n  + 1 to skip the class declaration line\r\n  check variable declarations\r\n  set evaluation id and type\r\n  shift line number, source start and source end\r\n  type length + space\r\n  type length + space\r\n  problem on the type of the variable\r\n  not needed any longer\r\n  set evaluation id and type\r\n  shift line number, source start and source end\r\n  check variable initializers\r\n  Initialize the compiler's lookup environment with the already compiled super class\r\n  and the installed global variable classes\r\n  Should never happen since we compiled this type\r\n  package declaration\r\n  $NON-NLS-1$\r\n  import declarations\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  field declarations\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Initialize with initializer if there was no previous value\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  4 CRs\r\n  $NON-NLS-1$\r\n  end of class declaration\r\n  return result\r\n  merge CR-LF\r\n /* Problem with the variable name.\r\n\t\t\t   Ignore because it must have already been reported\r\n\t\t\t   when checking the declaration.\r\n\t\t\t */\r\n","IBinaryType":"getAnnotations getEnclosingTypeName getFields getGenericSignature getInterfaceNames getMemberTypes getMethods getName getSourceName getSuperclassName getTagBits isAnonymous isLocal isMember sourceFileName NoInterface NoNestedType NoField NoMethod org.aspectj.org.eclipse.jdt.internal.compiler.env.IBinaryType","BufferManager":"createBuffer addBuffer createBuffer createNullBuffer getBuffer getDefaultBufferManager getDefaultBufferFactory getOpenBuffers removeBuffer DEFAULT_BUFFER_MANAGER VERBOSE openBuffers defaultBufferFactory org.aspectj.org.eclipse.jdt.internal.core.BufferManager  $NON-NLS-1$\r\n  close buffers that were removed from the cache if space was needed\r\n  $NON-NLS-1$  close buffers that were removed from the cache if space was needed\r\n  $NON-NLS-1$\r\n  close buffers that were removed from the cache (should be only one)\r\n  $NON-NLS-1$","ITypeHierarchyChangedListener":"typeHierarchyChanged org.aspectj.org.eclipse.jdt.core.ITypeHierarchyChangedListener","Java15ReflectionBasedReferenceTypeDelegate":"initialize buildGenericType getAnnotations getAnnotationTypes hasAnnotation getDeclaredFields getDeclaredGenericSignature getDeclaredInterfaces getSuperclass getTypeVariables getDeclaredMethods getGenericResolvedType createGenericMethodMember createGenericConstructorMember createGenericFieldMember getDeclaredPointcuts tryToDiscoverParameterNames isAnnotation isAnnotationStyleAspect isAnnotationWithRuntimeRetention isAspect isEnum isGeneric isAnonymous initialize buildGenericType getAnnotations getAnnotationTypes hasAnnotation getDeclaredFields getDeclaredGenericSignature getDeclaredInterfaces getSuperclass getTypeVariables getDeclaredMethods getGenericResolvedType createGenericMethodMember createGenericConstructorMember createGenericFieldMember getDeclaredPointcuts tryToDiscoverParameterNames isAnnotation isAnnotationStyleAspect isAnnotationWithRuntimeRetention isAspect isEnum isGeneric isAnonymous myType annotations pointcuts methods fields typeVariables superclass superInterfaces genericSignature typeConverter annotationFinder argNameFinder myType annotations pointcuts methods fields typeVariables superclass superInterfaces genericSignature typeConverter annotationFinder argNameFinder org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate org.aspectj.weaver.reflect.Java15ReflectionBasedReferenceTypeDelegate  FIXME is this the right implementation in the reflective case?\r\n  use the MAP to ensure that any aj-synthetic fields are filtered out\r\n  is null\r\n  If the superclass is null, return Object - same as bcel does\r\n  basic initialization\r\n  stash it\r\n  now fill in the details...\r\n  methods that really shouldn't be seen in this list\r\n  getGenericResolvedType(),\r\n  process allows us to cope with that\r\n  pointcuts\r\n  phase 3, now concretize them all\r\n  for @AspectJ pointcuts compiled by javac only...\r\n  return false;   FIXME is this the right implementation in the reflective case?\r\n  use the MAP to ensure that any aj-synthetic fields are filtered out\r\n  is null\r\n  If the superclass is null, return Object - same as bcel does\r\n  basic initialization\r\n  stash it\r\n  now fill in the details...\r\n  methods that really shouldn't be seen in this list\r\n  getGenericResolvedType(),\r\n  process allows us to cope with that\r\n  pointcuts\r\n  phase 3, now concretize them all\r\n  for @AspectJ pointcuts compiled by javac only...\r\n  return false;  /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","AbortMethod":"serialVersionUID org.aspectj.org.eclipse.jdt.internal.compiler.problem.AbortMethod  backward compatible\r\n /*\r\n * Special unchecked exception type used \r\n * to abort from the compilation process\r\n *\r\n * should only be thrown from within problem handlers.\r\n */\r\n","AjBuildManager":"accept enableRuntimeVersionCheck getWeaver getBcelWorld environmentSupportsIncrementalCompilation doGenerateModel batchBuild incrementalBuild performBuild openOutputStream closeOutputStream copyResourcesToDestination copyResourcesFromJarFile copyResourcesFromDirectory copyResourcesFromFile writeDirectory writeResource writeManifest acceptResource writeOutxmlFile getOutxmlContents findOutputDirsForAspects setupModel setCustomMungerFactory getCustomMungerFactory initBcelWorld getWorld addAspectClassFilesToWeaver getLibraryAccess getProblemFactory getCompilationUnits extractDestinationPathFromSourceFile performCompilation cleanupEnvironment getInterimResultRequestor getBatchRequestor proceedOnError setBuildConfig makeClasspathString checkRtJar toString setStructureModel getStructureModel getProgressListener setProgressListener getOutputClassFileName getAdapter populateCompilerOptionsFromLintSettings getBinarySourcesForThisWeave getAsmHierarchyBuilder setAsmHierarchyBuilder getState setState formatEntry wasFullBuild CROSSREFS_FILE_NAME CANT_WRITE_RESULT MANIFEST_NAME COPY_INPATH_DIR_RESOURCES DO_RUNTIME_VERSION_CHECK FAIL_IF_RUNTIME_NOT_FOUND binarySourceFilter asmHierarchyBuilder progressListener environmentSupportsIncrementalCompilation compiledCount sourceFileCount zos batchCompile environment binarySourcesForTheNextCompile structureModel buildConfig ignoreOutxml wasFullBuild state handler customMungerFactory org.aspectj.ajdt.internal.core.builder.AjBuildManager  AJDT doesn't want this check, so Main enables it.\r\n  If runtime version check fails, warn or fail? (unset?)\r\n  FIXME asc should this really be in here?\r\n  true if last build was a full build rather than an incremental build\r\n  retry as batch?\r\n  if (batch) {\r\n  if (buildConfig.isEmacsSymMode() || buildConfig.isGenerateModelMode()) {\r\n  }\r\n  System.err.println(\"XXXX start inc \");\r\n  rebuild. But what case causes this?\r\n  System.err.println(\"XXXX batch: \" + buildConfig.getFiles());\r\n  we don't want these hanging around...\r\n  XXX not in Mik's incremental\r\n  for bug 113554: support ajsym file generation for command line builds\r\n  have to tell state we succeeded or next is not incremental\r\n  will handle changes to them that require a recopying\r\n  XXX weaved not in Mik's incremental\r\n  resources that we need to copy are contained in the injars and inpath only\r\n  System.out.println(\"? copyResourcesFromJarFile() filename='\" + filename +\"'\");\r\n  Get a list of all files (i.e. everything that isnt a directory)\r\n  or we are in trouble...\r\n  For each file, add it either as a real .class file or as a resource\r\n  ??? get compression scheme right\r\n  where we sent the classes that were on the inpath\r\n  Do not copy manifests if either they are coming from a jar or we are writing to a jar\r\n  we only have one output directory...which simplifies things\r\n  AsmManager.getDefault().getRelationshipMap().clear();\r\n  XXX hideous, should not be Object\r\n  pr145693\r\n  cp.addAll(buildConfig.getClasspath());\r\n  (will also later send the manifest there too)\r\n  ??? incremental issues\r\n  class file changes in indirs.\r\n  the weaver method can actually handle dirs, but we don't call it, see next block\r\n  check for org.aspectj.runtime.JoinPoint\r\n  $NON-NLS-1$\r\n  for (int i =0 ;i<classpaths.length;i++) classpathModes[i]=ClasspathDirectory.BINARY;\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Translate from strings to File objects\r\n  Might be a bit too cautious, but let us see how it goes\r\n  TODO turn off when not needed\r\n  cleanup\r\n  free up references to AjClassFile instances\r\n  this is either a jar file or a file in a directory\r\n  ??? get compression scheme right\r\n  System.err.println(\"? writeAspectName() type=\" + type);\r\n  MessageUtil.info(holder, \"running development version of aspectj compiler\");\r\n  omitting dev info\r\n  p.getAbsolutePath());\r\n  assume that users of development aspectjrt.jar know what they're doing\r\n  this is the \"OK\" return value!\r\n  pr112830, allow variations on aspectjrt.jar of the form aspectjrtXXXXXX.jar\r\n  last error found in potentially matching jars...\r\n  complete compiler config and return a suitable adapter...\r\n  IOutputFilenameProvider\r\n  IBinarySourceProvider\r\n  IOutputFilenameProvider\r\n  IBinarySourceProvider\r\n /* String -> List<UCF> */\r\n /* Ensure we don't write an incomplete JAR bug-71339 */\r\n /*\r\n\t * If we are writing to an output directory copy the manifest but only if we already have one\r\n\t */\r\n /* File --> List (String) */\r\n /*\r\n\t * Build the set of compilation source units\r\n\t */\r\n /*\r\n\t * Answer the component to which will be handed back compilation results from the compiler\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.ajdt.internal.compiler.AjCompiler.IOutputClassFileNameProvider#getOutputClassFileName(char[])\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.eclipse.jdt.internal.compiler.ICompilerAdapterFactory#getAdapter(org.eclipse.jdt.internal.compiler.Compiler)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.ajdt.internal.compiler.IBinarySourceProvider#getBinarySourcesForThisWeave()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","JavaSearchNameEnvironment":"cleanup computeClasspathLocations findClass findType findType isPackage isPackage locations workingCopies org.aspectj.org.eclipse.jdt.internal.core.search.matching.JavaSearchNameEnvironment  import org.aspectj.org.eclipse.jdt.core.*;\r\n  import org.aspectj.org.eclipse.jdt.core.JavaCore;\r\n  $NON-NLS-1$\r\n  project doesn't exist\r\n  just resize cpLocations\r\n  just resize cpLocations\r\n  $NON-NLS-1$\r\n  size of \".class\"\r\n  doesn't include the file extension\r\n  $NON-NLS-1$\r\n  doesn't include the file extension\r\n  doesn't include the file extension\r\n  remember suggestion and keep looking\r\n  no better answer was found\r\n /*\r\n\t * A map from the fully qualified slash-separated name of the main type (String) to the working copy\r\n\t */\r\n /*\r\n * A name environment based on the classpath of a Java project.\r\n */\r\n","ConstructorInvocation":"propertyDescriptors internalStructuralPropertiesForType internalGetChildListProperty getNodeType0 clone0 subtreeMatch0 accept0 typeArguments arguments resolveConstructorBinding memSize treeSize TYPE_ARGUMENTS_PROPERTY ARGUMENTS_PROPERTY PROPERTY_DESCRIPTORS_2_0 PROPERTY_DESCRIPTORS_3_0 typeArguments arguments org.aspectj.org.eclipse.jdt.core.dom.ConstructorInvocation  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  more efficient than just calling unsupportedIn2() to check\r\n  treat Code as free\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","InstructionBranch":"dump getTargetOffset updatePosition toString getIndex getTarget setTarget notifyTarget updateTarget containsTarget dispose getType physicalSuccessor isIfInstruction equals hashCode dump getTargetOffset updatePosition toString getIndex getTarget setTarget notifyTarget updateTarget containsTarget dispose getType physicalSuccessor isIfInstruction equals hashCode UNSET targetIndex targetInstruction positionOfThisInstruction UNSET targetIndex targetInstruction positionOfThisInstruction org.aspectj.apache.bcel.generic.InstructionBranch org.aspectj.apache.bcel.generic.InstructionBranch  Branch target relative to this\r\n  Target object in\r\n  for calculating relative branch\r\n  Try and promote it to wide if we can\r\n  Rewind!\r\n  Find the handle for \"this\" JsrInstruction object.\r\n  Return the physical successor\r\n  Branch target relative to this\r\n  Target object in\r\n  for calculating relative branch\r\n  Try and promote it to wide if we can\r\n  Rewind!\r\n  Find the handle for \"this\" JsrInstruction object.\r\n  Return the physical successor\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n","BuildConfigManager":"getActiveConfigFile setActiveConfigFile addListener removeListener buildModel writeModel writePaths addFilesToConfig removeFilesFromConfig getAllBuildConfigFiles CONFIG_FILE_SUFFIX DEFAULT_CONFIG_LABEL org.aspectj.ajde.internal.BuildConfigManager /*String*/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","TypePatternBasedPerClause":"getTypePattern getTypePattern org.aspectj.lang.reflect.TypePatternBasedPerClause org.aspectj.lang.reflect.TypePatternBasedPerClause /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","NormalAnnotation":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty internalGetChildListProperty internalTypeNameProperty getNodeType0 clone0 subtreeMatch0 accept0 values memSize treeSize computeElementValuePairs memberValuePairs printExpression traverse TYPE_NAME_PROPERTY VALUES_PROPERTY PROPERTY_DESCRIPTORS values memberValuePairs org.aspectj.org.eclipse.jdt.core.dom.NormalAnnotation org.aspectj.org.eclipse.jdt.internal.compiler.ast.NormalAnnotation  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","VariableDeclarationStatement":"propertyDescriptors internalStructuralPropertiesForType internalGetSetIntProperty internalGetSetChildProperty internalGetChildListProperty getNodeType0 clone0 subtreeMatch0 accept0 modifiers getModifiers setModifiers internalSetModifiers getType setType fragments memSize treeSize MODIFIERS_PROPERTY MODIFIERS2_PROPERTY TYPE_PROPERTY FRAGMENTS_PROPERTY PROPERTY_DESCRIPTORS_2_0 PROPERTY_DESCRIPTORS_3_0 modifiers modifierFlags baseType variableDeclarationFragments org.aspectj.org.eclipse.jdt.core.dom.VariableDeclarationStatement  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  more efficient than just calling unsupportedIn2() to check\r\n  but this would require tracking changes to this.modifiers\r\n  JLS2 behavior - bona fide property\r\n  more efficient than checking getAST().API_LEVEL\r\n  lazy init must be thread-safe for readers\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /*package*/\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","AjClassFile":"fileName getBytes filename bytes org.aspectj.ajdt.internal.compiler.AjClassFile","IfFinder":"visit visit visit visit visit visit visit visit hasIf hasIf org.aspectj.weaver.bcel.IfFinder org.aspectj.weaver.bcel.IfFinder /* *******************************************************************\r\n * Copyright (c) 2006 Contributors\r\n * All rights reserved.\r\n * This program and the accompanying materials are made available\r\n * under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *     Andy Clement                 initial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2006 Contributors\r\n * All rights reserved.\r\n * This program and the accompanying materials are made available\r\n * under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *     Andy Clement                 initial implementation\r\n * ******************************************************************/\r\n","MultiCommentLine":"adapt append getContentPrefix getEndingPrefix getIndentationReference getStartingPrefix scanLine tokenizeLine isValidTag isTagName trimLine MULTI_COMMENT_CONTENT_PREFIX MULTI_COMMENT_END_PREFIX MULTI_COMMENT_START_PREFIX fReferenceIndentation fgTagLookup org.aspectj.org.eclipse.jdt.internal.formatter.comment.MultiCommentLine  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  omit the content prefix\r\n  omit the comment postfix\r\n  no content on line, only the comment postfix\r\n  comment ends on same line\r\n  tags (structural, breaks, pre, code).\r\n  no tag - do the usual thing from the original offset\r\n  only set html attribute if postfix found\r\n  $NON-NLS-1$\r\n  strip the slash\r\n  strip ws\r\n  extract first token\r\n  see if it's a tag\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentLine#adapt(org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentLine)\r\n\t */\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentLine#append(org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentRange)\r\n\t */\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentLine#getContentLinePrefix()\r\n\t */\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentLine#getEndLinePrefix()\r\n\t */\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentLine#getStartLinePrefix()\r\n\t */\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentLine#scanLine(int)\r\n\t */\r\n /*\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.text.comment.CommentLine#tokenizeLine(int)\r\n\t */\r\n","HashtableOfLong":"containsKey get put rehash size toString keyTable valueTable elementSize threshold org.aspectj.org.eclipse.jdt.internal.compiler.util.HashtableOfLong  to avoid using Enumerations, walk the individual tables skipping nulls\r\n  number of elements in the table\r\n  size represents the expected number of elements\r\n  assumes the threshold is never equal to the size of the table\r\n  double the number of expected elements\r\n  $NON-NLS-1$\r\n  $NON-NLS-2$ ","CreateImportOperation":"getChildPropertyDescriptor generateElementAST generateResultHandle getMainTaskName initializeDefaultPosition verify importName flags org.aspectj.org.eclipse.jdt.internal.core.CreateImportOperation  ensure no duplicate\r\n  $NON-NLS-1$\r\n  split import name into individual fragments, checking for on demand imports\r\n  look for the package declaration\r\n /*\r\n\t * The name of the import to be created.\r\n\t */\r\n /*\r\n\t * The flags of the import to be created (either Flags#AccDefault or Flags#AccStatic)\r\n\t */\r\n","CompletionScanner":"getCurrentIdentifierSource getCurrentTokenSourceString getNextToken getNextUnicodeChar jumpOverBlock scanIdentifierOrKeyword scanNumber completionIdentifier cursorLocation endOfEmptyToken completedIdentifierStart completedIdentifierEnd unicodeCharSize EmptyCompletionIdentifier org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionScanner  remember actual identifier positions\r\n  remember actual identifier positions\r\n  no char[] sharing around completionIdentifier, we want it to be unique so as to use identity checks\r\n  check unicode scenario\r\n  remember actual identifier positions\r\n  no char[] sharing around completionIdentifier, we want it to be unique so as to use identity checks\r\n  check unicode scenario\r\n  reposition scanner in case we are interested by spaces as tokens\r\n  -----------------end switch while try--------------------\r\n  loop for jumping over comments\r\n  ---------Consume white space and handles start position---------\r\n  reposition scanner in case we are interested by spaces as tokens\r\n  for being detected as empty free identifier\r\n  checkNonExternalizedString();\r\n  && (previousToken == TokenNameDOT)\r\n  for next token read\r\n  reposition scanner in case we are interested by spaces as tokens\r\n  empty identifier is the end of the next token (eg. \"<empty token>next\").\r\n  for being detected as empty free identifier\r\n  little trick to get out in the middle of a source computation\r\n  completion inside .<|>12\r\n  relocate if finding another quote fairly close: thus unicode '  relocate if finding another quote fairly close: thus unicode '  consume next character\r\n  consume next character\r\n  relocate if finding another quote fairly close: thus unicode '  complete inside a string literal\r\n  relocate if finding another quote fairly close: thus unicode '  rethrow\r\n  consume next character\r\n  set current position on new line character\r\n  complete inside a string literal\r\n  complete inside a string literal\r\n  set current position on new line character\r\n  consume next character\r\n  we need to compute the escape character in a separate buffer\r\n  consume next character\r\n  line comment\r\n  -------------unicode traitement ------------\r\n  get the next char\r\n  handle the \\\\u case manually into comment\r\n  jump over the \\\\\r\n  get the next char\r\n  -------------unicode traitement ------------\r\n  handle the \\\\u case manually into comment\r\n  -------------unicode traitement ------------\r\n  checkNonExternalizedString();\r\n  get the next char\r\n  consume next character\r\n  checkNonExternalizedString();\r\n  -------------unicode traitement ------------\r\n  handle the \\\\u case manually into comment\r\n  empty comment is not a javadoc   checkNonExternalizedString();\r\n  -------------unicode traitement ------------\r\n  get next char\r\n  handle the \\\\u case manually into comment\r\n  loop until end of comment *  traditional and javadoc comment\r\n  $NON-NLS-1$\r\n  the atEnd may not be <this.currentPosition == this.source.length> if source is only some part of a real (external) stream\r\n  for being detected as empty free identifier\r\n  the \\ is already read\r\n  extends the end of the completion token even if the end is after eofPosition\r\n  convert completed keyword into an identifier\r\n  *  consider completion just before a number to be ok, will insert before it\r\n /*\r\n * Scanner aware of a cursor location so as to discard trailing portions of identifiers\r\n * containing the cursor location.\r\n *\r\n * Cursor location denotes the position of the last character behind which completion\r\n * got requested:\r\n *  -1 means completion at the very beginning of the source\r\n *\t0  means completion behind the first character\r\n *  n  means completion behind the n-th character\r\n */\r\n /* Source positions of the completedIdentifier\r\n\t * if inside actual identifier, end goes to the actual identifier \r\n\t * end, in other words, beyond cursor location\r\n\t */\r\n /*comment*/\r\n /*whitespace*/\r\n /*nls*/\r\n /*taskTags*/\r\n /*taskPriorities*/\r\n /* \r\n * Truncate the current identifier if it is containing the cursor location. Since completion is performed\r\n * on an identifier prefix.\r\n *\r\n */\r\n /* might be completing at eof (e.g. behind a dot) */\r\n /* completion requesting strictly inside blanks */\r\n /* might be completing at eof (e.g. behind a dot) */\r\n /*\r\n\t\t\t\t\t\t\t\t * We need to completely consume the line break\r\n\t\t\t\t\t\t\t\t */\r\n /*\r\n\t\t\t\t\t\t\t\t\tif (isJavadoc)\r\n\t\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_JAVADOC;\r\n\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_BLOCK;\r\n\t\t\t\t\t\t\t\t\t*/\r\n /* might be completing at very end of file (e.g. behind a dot) */\r\n","SwitchBuilder":"fillup sort matchIsOrdered getInstruction fillup sort matchIsOrdered getInstruction match targets instruction match_length match targets instruction match_length org.aspectj.apache.bcel.generic.SwitchBuilder org.aspectj.apache.bcel.generic.SwitchBuilder  (almost) empty switch, or just default\r\n  Swap elements\r\n  Swap elements\r\n  Swap elements\r\n  Swap instructions, too\r\n  Swap instructions, too\r\n  Swap instructions, too\r\n  (almost) empty switch, or just default\r\n  Swap elements\r\n  Swap elements\r\n  Swap elements\r\n  Swap instructions, too\r\n  Swap instructions, too\r\n  Swap instructions, too\r\n","SetClasspathOperation":"executeOperation toString verify newRawClasspath newOutputLocation project org.aspectj.org.eclipse.jdt.internal.core.SetClasspathOperation  set raw classpath and null out resolved info\r\n  if needed, generate delta, update project ref, create markers, ...\r\n  write .classpath file\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*format is ok*/\r\n","LongLiteralMinValue":"computeConstant CharValue MIN_VALUE org.aspectj.org.eclipse.jdt.internal.compiler.ast.LongLiteralMinValue","Java14GenericSignatureInformationProvider":"getGenericParameterTypes getGenericReturnType isBridge isVarArgs isSynthetic getGenericParameterTypes getGenericReturnType isBridge isVarArgs isSynthetic org.aspectj.weaver.reflect.Java14GenericSignatureInformationProvider org.aspectj.weaver.reflect.Java14GenericSignatureInformationProvider /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.reflect.GenericSignatureInformationProvider#getGenericParameterTypes(org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.reflect.GenericSignatureInformationProvider#getGenericReturnType(org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.reflect.GenericSignatureInformationProvider#isBridge()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.reflect.GenericSignatureInformationProvider#isVarArgs()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.reflect.GenericSignatureInformationProvider#isSynthetic()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.reflect.GenericSignatureInformationProvider#getGenericParameterTypes(org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.reflect.GenericSignatureInformationProvider#getGenericReturnType(org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.reflect.GenericSignatureInformationProvider#isBridge()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.reflect.GenericSignatureInformationProvider#isVarArgs()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.reflect.GenericSignatureInformationProvider#isSynthetic()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","ConstantObject":"getConstantValue getConstantValue org.aspectj.apache.bcel.classfile.ConstantObject org.aspectj.apache.bcel.classfile.ConstantObject","ReflectionBasedReferenceTypeDelegate":"initialize getBaseClass getWorld buildGenericType addAnnotation isAspect isAnnotationStyleAspect isInterface isEnum isAnnotation isAnnotationWithRuntimeRetention getRetentionPolicy canAnnotationTargetType getAnnotationTargetKinds isClass isGeneric isAnonymous isNested getOuterClass isExposedToWeaver hasAnnotation getAnnotations getAnnotationTypes getDeclaredFields getDeclaredInterfaces getDeclaredMethods getDeclaredPointcuts getTypeVariables getPerClause getDeclares getTypeMungers getPrivilegedAccesses getModifiers getSuperclass getWeaverState getResolvedTypeX doesNotExposeShadowMungers getDeclaredGenericSignature ensureDelegateConsistent createResolvedMemberFor getSourcefilename getSourceContext initialize getBaseClass getWorld buildGenericType addAnnotation isAspect isAnnotationStyleAspect isInterface isEnum isAnnotation isAnnotationWithRuntimeRetention getRetentionPolicy canAnnotationTargetType getAnnotationTargetKinds isClass isGeneric isAnonymous isNested getOuterClass isExposedToWeaver hasAnnotation getAnnotations getAnnotationTypes getDeclaredFields getDeclaredInterfaces getDeclaredMethods getDeclaredPointcuts getTypeVariables getPerClause getDeclares getTypeMungers getPrivilegedAccesses getModifiers getSuperclass getWeaverState getResolvedTypeX doesNotExposeShadowMungers getDeclaredGenericSignature ensureDelegateConsistent createResolvedMemberFor getSourcefilename getSourceContext bootClassLoader myClass classLoaderReference world resolvedType fields methods interfaces bootClassLoader myClass classLoaderReference world resolvedType fields methods interfaces org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegate org.aspectj.weaver.reflect.ReflectionBasedReferenceTypeDelegate  ReflectionBasedReferenceTypeDelegate.class.\r\n  on the type...\r\n  on the type...\r\n  cant be an enum in Java 1.4 or prior\r\n  cant be an annotation in Java 1.4 or prior\r\n  cant be an annotation in Java 1.4 or prior\r\n  cant be an annotation in Java 1.4 or prior\r\n  cant be generic in 1.4\r\n  (same deal as isAnonymous above...)\r\n  myClass.getEnclosingClass(),world);\r\n  reflection based types are never exposed to the weaver\r\n  in Java 1.4 we cant have an annotation\r\n  no annotations in Java 1.4\r\n  no annotations in Java 1.4\r\n  no type variables in Java 1.4\r\n  no per clause...\r\n  no declares\r\n  no type mungers\r\n  no aspect members..., not used for weaving\r\n  no generic sig in 1.4\r\n  crappy guess..\r\n  ReflectionBasedReferenceTypeDelegate.class.\r\n  on the type...\r\n  on the type...\r\n  cant be an enum in Java 1.4 or prior\r\n  cant be an annotation in Java 1.4 or prior\r\n  cant be an annotation in Java 1.4 or prior\r\n  cant be an annotation in Java 1.4 or prior\r\n  cant be generic in 1.4\r\n  (same deal as isAnonymous above...)\r\n  myClass.getEnclosingClass(),world);\r\n  reflection based types are never exposed to the weaver\r\n  in Java 1.4 we cant have an annotation\r\n  no annotations in Java 1.4\r\n  no annotations in Java 1.4\r\n  no type variables in Java 1.4\r\n  no per clause...\r\n  no declares\r\n  no type mungers\r\n  no aspect members..., not used for weaving\r\n  no generic sig in 1.4\r\n  crappy guess..\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#addAnnotation(org.aspectj.weaver .AnnotationX)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#isAspect()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#isAnnotationStyleAspect()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#isInterface()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#isEnum()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#isAnnotation()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#isAnnotationWithRuntimeRetention ()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#isClass()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#isGeneric()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#isExposedToWeaver()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#hasAnnotation(org.aspectj.weaver .UnresolvedType)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getAnnotations()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getAnnotationTypes()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getDeclaredFields()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getDeclaredInterfaces()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getDeclaredMethods()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getDeclaredPointcuts()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getTypeVariables()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getPerClause()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getDeclares()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getTypeMungers()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getPrivilegedAccesses()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getModifiers()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getSuperclass()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getWeaverState()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getResolvedTypeX()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#doesNotExposeShadowMungers()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getDeclaredGenericSignature()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#addAnnotation(org.aspectj.weaver .AnnotationX)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#isAspect()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#isAnnotationStyleAspect()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#isInterface()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#isEnum()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#isAnnotation()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#isAnnotationWithRuntimeRetention ()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#isClass()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#isGeneric()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#isExposedToWeaver()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#hasAnnotation(org.aspectj.weaver .UnresolvedType)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getAnnotations()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getAnnotationTypes()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getDeclaredFields()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getDeclaredInterfaces()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getDeclaredMethods()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getDeclaredPointcuts()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getTypeVariables()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getPerClause()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getDeclares()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getTypeMungers()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getPrivilegedAccesses()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getModifiers()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getSuperclass()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getWeaverState()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getResolvedTypeX()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#doesNotExposeShadowMungers()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.ReferenceTypeDelegate#getDeclaredGenericSignature()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","InstVisitor":"visitStackInstruction visitLocalVariableInstruction visitBranchInstruction visitLoadClass visitFieldInstruction visitIfInstruction visitConversionInstruction visitPopInstruction visitStoreInstruction visitTypedInstruction visitSelect visitJsrInstruction visitGotoInstruction visitUnconditionalBranch visitPushInstruction visitArithmeticInstruction visitCPInstruction visitInvokeInstruction visitArrayInstruction visitAllocationInstruction visitReturnInstruction visitFieldOrMethod visitConstantPushInstruction visitExceptionThrower visitLoadInstruction visitVariableLengthInstruction visitStackProducer visitStackConsumer visitACONST_NULL visitGETSTATIC visitIF_ICMPLT visitMONITOREXIT visitIFLT visitLSTORE visitPOP2 visitBASTORE visitISTORE visitCHECKCAST visitFCMPG visitI2F visitATHROW visitDCMPL visitARRAYLENGTH visitDUP visitINVOKESTATIC visitLCONST visitDREM visitIFGE visitCALOAD visitLASTORE visitI2D visitDADD visitINVOKESPECIAL visitIAND visitPUTFIELD visitILOAD visitDLOAD visitDCONST visitNEW visitIFNULL visitLSUB visitL2I visitISHR visitTABLESWITCH visitIINC visitDRETURN visitFSTORE visitDASTORE visitIALOAD visitDDIV visitIF_ICMPGE visitLAND visitIDIV visitLOR visitCASTORE visitFREM visitLDC visitBIPUSH visitDSTORE visitF2L visitFMUL visitLLOAD visitJSR visitFSUB visitSASTORE visitALOAD visitDUP2_X2 visitRETURN visitDALOAD visitSIPUSH visitDSUB visitL2F visitIF_ICMPGT visitF2D visitI2L visitIF_ACMPNE visitPOP visitI2S visitIFEQ visitSWAP visitIOR visitIREM visitIASTORE visitNEWARRAY visitINVOKEINTERFACE visitINEG visitLCMP visitJSR_W visitMULTIANEWARRAY visitDUP_X2 visitSALOAD visitIFNONNULL visitDMUL visitIFNE visitIF_ICMPLE visitLDC2_W visitGETFIELD visitLADD visitNOP visitFALOAD visitINSTANCEOF visitIFLE visitLXOR visitLRETURN visitFCONST visitIUSHR visitBALOAD visitDUP2 visitIF_ACMPEQ visitIMPDEP1 visitMONITORENTER visitLSHL visitDCMPG visitD2L visitIMPDEP2 visitL2D visitRET visitIFGT visitIXOR visitINVOKEVIRTUAL visitFASTORE visitIRETURN visitIF_ICMPNE visitFLOAD visitLDIV visitPUTSTATIC visitAALOAD visitD2I visitIF_ICMPEQ visitAASTORE visitARETURN visitDUP2_X1 visitFNEG visitGOTO_W visitD2F visitGOTO visitISUB visitF2I visitDNEG visitICONST visitFDIV visitI2B visitLNEG visitLREM visitIMUL visitIADD visitLSHR visitLOOKUPSWITCH visitDUP_X1 visitFCMPL visitI2C visitLMUL visitLUSHR visitISHL visitLALOAD visitASTORE visitANEWARRAY visitFRETURN visitFADD visitBREAKPOINT visitStackInstruction visitLocalVariableInstruction visitBranchInstruction visitLoadClass visitFieldInstruction visitIfInstruction visitConversionInstruction visitPopInstruction visitStoreInstruction visitTypedInstruction visitSelect visitJsrInstruction visitGotoInstruction visitUnconditionalBranch visitPushInstruction visitArithmeticInstruction visitCPInstruction visitInvokeInstruction visitArrayInstruction visitAllocationInstruction visitReturnInstruction visitFieldOrMethod visitConstantPushInstruction visitExceptionThrower visitLoadInstruction visitVariableLengthInstruction visitStackProducer visitStackConsumer visitACONST_NULL visitGETSTATIC visitIF_ICMPLT visitMONITOREXIT visitIFLT visitLSTORE visitPOP2 visitBASTORE visitISTORE visitCHECKCAST visitFCMPG visitI2F visitATHROW visitDCMPL visitARRAYLENGTH visitDUP visitINVOKESTATIC visitLCONST visitDREM visitIFGE visitCALOAD visitLASTORE visitI2D visitDADD visitINVOKESPECIAL visitIAND visitPUTFIELD visitILOAD visitDLOAD visitDCONST visitNEW visitIFNULL visitLSUB visitL2I visitISHR visitTABLESWITCH visitIINC visitDRETURN visitFSTORE visitDASTORE visitIALOAD visitDDIV visitIF_ICMPGE visitLAND visitIDIV visitLOR visitCASTORE visitFREM visitLDC visitBIPUSH visitDSTORE visitF2L visitFMUL visitLLOAD visitJSR visitFSUB visitSASTORE visitALOAD visitDUP2_X2 visitRETURN visitDALOAD visitSIPUSH visitDSUB visitL2F visitIF_ICMPGT visitF2D visitI2L visitIF_ACMPNE visitPOP visitI2S visitIFEQ visitSWAP visitIOR visitIREM visitIASTORE visitNEWARRAY visitINVOKEINTERFACE visitINEG visitLCMP visitJSR_W visitMULTIANEWARRAY visitDUP_X2 visitSALOAD visitIFNONNULL visitDMUL visitIFNE visitIF_ICMPLE visitLDC2_W visitGETFIELD visitLADD visitNOP visitFALOAD visitINSTANCEOF visitIFLE visitLXOR visitLRETURN visitFCONST visitIUSHR visitBALOAD visitDUP2 visitIF_ACMPEQ visitIMPDEP1 visitMONITORENTER visitLSHL visitDCMPG visitD2L visitIMPDEP2 visitL2D visitRET visitIFGT visitIXOR visitINVOKEVIRTUAL visitFASTORE visitIRETURN visitIF_ICMPNE visitFLOAD visitLDIV visitPUTSTATIC visitAALOAD visitD2I visitIF_ICMPEQ visitAASTORE visitARETURN visitDUP2_X1 visitFNEG visitGOTO_W visitD2F visitGOTO visitISUB visitF2I visitDNEG visitICONST visitFDIV visitI2B visitLNEG visitLREM visitIMUL visitIADD visitLSHR visitLOOKUPSWITCH visitDUP_X1 visitFCMPL visitI2C visitLMUL visitLUSHR visitISHL visitLALOAD visitASTORE visitANEWARRAY visitFRETURN visitFADD visitBREAKPOINT org.aspectj.apache.bcel.generic.InstVisitor org.aspectj.apache.bcel.generic.InstVisitor","AnnotationComponentValue":"getAnnotationComponentValues getAnnotationValue getClassInfo getClassInfoIndex getConstantValue getConstantValueIndex getEnumConstantName getEnumConstantNameIndex getEnumConstantTypeName getEnumConstantTypeNameIndex getTag getValuesNumber sizeInBytes NO_VALUES annotationComponentValues annotationValue classInfo classFileInfoIndex constantValue constantValueIndex enumConstantTypeNameIndex enumConstantNameIndex enumConstantTypeName enumConstantName readOffset tag valuesNumber org.aspectj.org.eclipse.jdt.internal.core.util.AnnotationComponentValue /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IAnnotationComponentValue#getAnnotationComponentValues()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IAnnotationComponentValue#getAnnotationValue()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IAnnotationComponentValue#getClassInfo()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IAnnotationComponentValue#getClassInfoIndex()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IAnnotationComponentValue#getConstantValue()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IAnnotationComponentValue#getConstantValueIndex()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IAnnotationComponentValue#getEnumConstantName()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IAnnotationComponentValue#getEnumConstantNameIndex()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IAnnotationComponentValue#getEnumConstantTypeName()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IAnnotationComponentValue#getEnumConstantTypeNameIndex()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IAnnotationComponentValue#getTag()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IAnnotationComponentValue#getValuesNumber()\r\n\t */\r\n","PackageDeclarationPattern":"queryIn print pkgName org.aspectj.org.eclipse.jdt.internal.core.search.matching.PackageDeclarationPattern  package declarations are not indexed\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","CodeSnippetCompiler":"initializeParser evaluationContext codeSnippetStart codeSnippetEnd org.aspectj.org.eclipse.jdt.internal.eval.CodeSnippetCompiler /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.Compiler#initializeParser()\r\n\t */\r\n","TypeAnnotationAccessVar":"toString createLoad createStore createCopyFrom appendLoad createLoadInstructions appendLoadAndConvert insertLoad toString createLoad createStore createCopyFrom appendLoad createLoadInstructions appendLoadAndConvert insertLoad target target org.aspectj.weaver.bcel.TypeAnnotationAccessVar org.aspectj.weaver.bcel.TypeAnnotationAccessVar /* *******************************************************************\r\n * Copyright (c) 2005 IBM\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement   initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 IBM\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement   initial implementation \r\n * ******************************************************************/\r\n","Message":"getKind isError isWarning isDebug isTaskTag isInfo isAbort getDeclared isFailed getMessage getThrown getSourceLocation toString getDetails getExtraSourceLocations getID getSourceStart getSourceEnd getMessage getSourcePosition getStartPosition getLength getKind isError isWarning isDebug isTaskTag isInfo isAbort getDeclared isFailed getMessage getThrown getSourceLocation toString getDetails getExtraSourceLocations getID getSourceStart getSourceEnd message kind thrown sourceLocation details extraSourceLocations declared id sourceStart sourceEnd message startPosition length message kind thrown sourceLocation details extraSourceLocations declared id sourceStart sourceEnd org.aspectj.bridge.Message org.aspectj.org.eclipse.jdt.core.dom.Message org.aspectj.bridge.Message  Is it a DEOW ?\r\n  Is it a DEOW ?\r\n /*SourceLocation*/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /*SourceLocation*/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","BasicSearchEngine":"convertTypeKind createHierarchyScope createHierarchyScope createJavaSearchScope createJavaSearchScope createJavaSearchScope createTypeNameMatch createWorkspaceScope findMatches getDefaultSearchParticipant getMatchRuleString getSearchForString getParser getWorkingCopies getWorkingCopies match match search searchAllSecondaryTypeNames searchAllTypeNames searchAllTypeNames searchDeclarations searchDeclarationsOfAccessedFields searchDeclarationsOfReferencedTypes searchDeclarationsOfSentMessages parser compilerOptions workingCopies workingCopyOwner VERBOSE org.aspectj.org.eclipse.jdt.internal.core.search.BasicSearchEngine  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  locate index matches if any (note that all search matches could have been issued during index querying)\r\n  release\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  filter out primary working copies that are saved\r\n  nothing\r\n  fall through next case to match as prefix if camel case failed\r\n  TODO (frederic) implement regular expression match\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Get working copy path(s). Store in a single string in case of only one to optimize comparison in requestor\r\n  Filter unexpected types\r\n  filter maint types\r\n  filter out local and anonymous classes\r\n  fliter out *the* working copy\r\n  filter out working copies\r\n  Accept document path\r\n  Compute document relative path\r\n  Update access restriction if path is not empty\r\n  Index requestor\r\n  Java search only\r\n  add type names from indexes\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Create pattern\r\n  Get working copy path(s). Store in a single string in case of only one to optimize comparison in requestor\r\n  Filter unexpected types\r\n  filter out local and anonymous classes\r\n  fliter out *the* working copy\r\n  filter out working copies\r\n  Accept document path\r\n  Compute document relative path\r\n  Update access restriction if path is not empty\r\n  Index requestor\r\n  Java search only\r\n  add type names from indexes\r\n  no local  compute encloising type names\r\n  report\r\n  add type names from working copies\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Get working copy path(s). Store in a single string in case of only one to optimize comparison in requestor\r\n  Filter unexpected types\r\n  filter out local and anonymous classes\r\n  fliter out *the* working copy\r\n  filter out working copies\r\n  Accept document path\r\n  Compute document relative path\r\n  Update access restriction if path is not empty\r\n  Index requestor\r\n  Java search only\r\n  add type names from indexes\r\n  no local  compute encloising type names\r\n  add type names from working copies\r\n  $NON-NLS-1$\r\n  see bug https:  $NON-NLS-1$  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n\t * A default parser to parse non-reconciled working copies\r\n\t */\r\n /*\r\n\t * A list of working copies that take precedence over their original \r\n\t * compilation units.\r\n\t */\r\n /*\r\n\t * A working copy owner whose working copies will take precedent over \r\n\t * their original compilation units.\r\n\t */\r\n /*\r\n\t * Creates a new search basic engine.\r\n\t */\r\n /* initialize progress monitor */\r\n /*\r\n\t * Returns the list of working copies used by this search engine.\r\n\t * Returns null if none.\r\n\t */\r\n /*\r\n\t * Returns the list of working copies used to do the search on the given Java element.\r\n\t */\r\n /*if (type.isInterface())*/\r\n","StructureViewProperties":"setSorting getRelations setRelations addRelation removeRelation setFilteredMemberAccessibility getFilteredMemberAccessibility addFilteredMemberAccessibility removeFilteredMemberAccessibility getFilteredMemberModifiers setFilteredMemberModifiers addFilteredMemberModifiers removeFilteredMemberModifiers getSorting setSorting getFilteredMemberKinds setFilteredMemberKinds addFilteredMemberKind removeFilteredMemberKind getGrouping setGrouping addGrouping removeGrouping getGranularity setGranularity getName toString toString readResolve toString readResolve toString readResolve toString readResolve SORT_DECLARATIONAL relations filteredMemberAccessibility filteredMemberModifiers filteredMemberKinds grouping sorting granularity DECLARATION CROSSCUTTING INHERITANCE ALL name nextOrdinal ordinal KIND VISIBILITY ALL name nextOrdinal ordinal ALPHABETICAL DECLARATIONAL ALL name nextOrdinal ordinal PACKAGE FILE TYPE MEMBER DECLARED_ELEMENTS ALL name nextOrdinal ordinal org.aspectj.ajde.ui.StructureViewProperties  The 4 declarations below are necessary for serialization\r\n  The 4 declarations below are necessary for serialization\r\n  The 4 declarations below are necessary for serialization\r\n  The 4 declarations below are necessary for serialization\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","LongCache":"clear containsKey hash put putIfAbsent rehash size toString keyTable valueTable elementSize threshold org.aspectj.org.eclipse.jdt.internal.compiler.codegen.LongCache  assumes the threshold is never equal to the size of the table\r\n  assumes the threshold is never equal to the size of the table\r\n  negative when added, assumes value is > 0\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","AjType":"getName getPackage getInterfaces getModifiers getJavaClass getSupertype getGenericSupertype getEnclosingMethod getEnclosingConstructor getEnclosingType getDeclaringType getPerClause getAjTypes getDeclaredAjTypes getConstructor getConstructors getDeclaredConstructor getDeclaredConstructors getDeclaredField getDeclaredFields getField getFields getDeclaredMethod getMethod getDeclaredMethods getMethods getDeclaredPointcut getPointcut getDeclaredPointcuts getPointcuts getDeclaredAdvice getAdvice getAdvice getDeclaredAdvice getDeclaredITDMethod getDeclaredITDMethods getITDMethod getITDMethods getDeclaredITDConstructor getDeclaredITDConstructors getITDConstructor getITDConstructors getDeclaredITDField getDeclaredITDFields getITDField getITDFields getDeclareErrorOrWarnings getDeclareParents getDeclareSofts getDeclareAnnotations getDeclarePrecedence getEnumConstants getTypeParameters isEnum isInstance isInterface isLocalClass isMemberClass isArray isPrimitive isAspect isMemberAspect isPrivileged getName getPackage getInterfaces getModifiers getJavaClass getSupertype getGenericSupertype getEnclosingMethod getEnclosingConstructor getEnclosingType getDeclaringType getPerClause getAjTypes getDeclaredAjTypes getConstructor getConstructors getDeclaredConstructor getDeclaredConstructors getDeclaredField getDeclaredFields getField getFields getDeclaredMethod getMethod getDeclaredMethods getMethods getDeclaredPointcut getPointcut getDeclaredPointcuts getPointcuts getDeclaredAdvice getAdvice getAdvice getDeclaredAdvice getDeclaredITDMethod getDeclaredITDMethods getITDMethod getITDMethods getDeclaredITDConstructor getDeclaredITDConstructors getITDConstructor getITDConstructors getDeclaredITDField getDeclaredITDFields getITDField getITDFields getDeclareErrorOrWarnings getDeclareParents getDeclareSofts getDeclareAnnotations getDeclarePrecedence getEnumConstants getTypeParameters isEnum isInstance isInterface isLocalClass isMemberClass isArray isPrimitive isAspect isMemberAspect isPrivileged org.aspectj.lang.reflect.AjType org.aspectj.lang.reflect.AjType /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","FlowInfo":"addInitializationsFrom addPotentialInitializationsFrom asNegatedCondition conditional cannotBeDefinitelyNullOrNonNull cannotBeNull canOnlyBeNull copy initial initsWhenFalse initsWhenTrue isDefinitelyAssigned isDefinitelyAssigned isDefinitelyNonNull isDefinitelyNull isDefinitelyUnknown isPotentiallyAssigned isPotentiallyAssigned isPotentiallyNonNull isPotentiallyNull isPotentiallyUnknown isProtectedNonNull isProtectedNull markAsComparedEqualToNonNull markAsComparedEqualToNull markAsDefinitelyAssigned markAsDefinitelyNonNull markAsDefinitelyNull markAsDefinitelyAssigned markAsDefinitelyUnknown mergedOptimizedBranches reachMode safeInitsWhenTrue setReachMode mergedWith nullInfoLessUnconditionalCopy toString unconditionalCopy unconditionalFieldLessCopy unconditionalInits unconditionalInitsWithoutSideEffect tagBits REACHABLE UNREACHABLE NULL_FLAG_MASK UNKNOWN NULL NON_NULL DEAD_END org.aspectj.org.eclipse.jdt.internal.compiler.flow.FlowInfo  REACHABLE by default\r\n  Represents a dead branch status of initialization\r\n  if (initsWhenTrue.equals(initsWhenFalse)) return initsWhenTrue; -- could optimize if #equals is defined\r\n  $NON-NLS-1$\r\n","AnnotationBinding":"getAnnotations getAnnotationType getDeclaredMemberValuePairs getAllMemberValuePairs getJavaElement getKey getKind getModifiers getName isDeprecated isEqualTo isRecovered isSynthetic toString addStandardAnnotations buildMarkerAnnotation buildRetentionAnnotation buildTargetAnnotation getAnnotationType getElementValuePairs setMethodBindings NoAnnotations internalAnnotation bindingResolver type pairs org.aspectj.org.eclipse.jdt.core.dom.AnnotationBinding org.aspectj.org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding  resilience\r\n  handle case of more methods than declared members\r\n  TODO when implementing, update spec in IBinding\r\n  $NON-NLS-1$\r\n  resolves types for type and pair contents just in time)\r\n  and all of the standard annotations created by this method are fully resolved since the sender is expected to use them immediately\r\n  there should be exactly one since the type is an annotation type.\r\n  set the method bindings of each element value pair\r\n /*\r\n\t * (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.IBinding#isRecovered()\r\n\t */\r\n","VariablePattern":"mustResolve findDeclarations findReferences readAccess writeAccess name org.aspectj.org.eclipse.jdt.internal.core.search.matching.VariablePattern  set to find declarations & all occurences\r\n  set to find any reference, read only references & all occurences\r\n  set to find any reference, write only references & all occurences\r\n  always resolve (in case of a simple name reference being a potential match)\r\n /*\r\n * Returns whether a method declaration or message send will need to be resolved to \r\n * find out if this method pattern matches it.\r\n */\r\n","SourceFileAttribute":"getSourceFileIndex getSourceFileName sourceFileIndex sourceFileName org.aspectj.org.eclipse.jdt.internal.core.util.SourceFileAttribute","OrTypePattern":"getRight getLeft couldEverMatchSameTypesAs matchesInstanceof matchesExactly matchesExactly matchesStatically setIsVarArgs setAnnotationTypePattern write read resolveBindings parameterizeWith toString isStarAnnotation equals hashCode accept traverse getRight getLeft couldEverMatchSameTypesAs matchesInstanceof matchesExactly matchesExactly matchesStatically setIsVarArgs setAnnotationTypePattern write read resolveBindings parameterizeWith toString isStarAnnotation equals hashCode accept traverse left right left right org.aspectj.weaver.patterns.OrTypePattern org.aspectj.weaver.patterns.OrTypePattern  ??? we override all methods that care about includeSubtypes\r\n  don't dive at the moment...\r\n  ??? if these had side-effects, this sort-circuit could be a mistake\r\n  ??? if these had side-effects, this sort-circuit could be a mistake\r\n  ??? we override all methods that care about includeSubtypes\r\n  don't dive at the moment...\r\n  ??? if these had side-effects, this sort-circuit could be a mistake\r\n  ??? if these had side-effects, this sort-circuit could be a mistake\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.TypePattern#couldEverMatchSameTypesAs(org.aspectj.weaver.patterns.TypePattern)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.TypePattern#couldEverMatchSameTypesAs(org.aspectj.weaver.patterns.TypePattern)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","OperatorExpression":"classInitialize generateTableTestCase get_AND get_AND_AND get_DIVIDE get_EQUAL_EQUAL get_GREATER get_GREATER_EQUAL get_LEFT_SHIFT get_LESS get_LESS_EQUAL get_MINUS get_MULTIPLY get_OR get_OR_OR get_PLUS get_REMAINDER get_RIGHT_SHIFT get_UNSIGNED_RIGHT_SHIFT get_XOR operatorToString nullStatus printExpression printExpressionNoParenthesis OperatorSignatures org.aspectj.org.eclipse.jdt.internal.compiler.ast.OperatorExpression  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-2$   $NON-NLS-2$   $NON-NLS-2$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  table[(T_byte<<4)+T_undefined] \t= T_undefined;\r\n  table[(T_byte<<4)+T_boolean] \t= T_undefined;\r\n  table[(T_long<<4)+T_undefined] \t= T_undefined;\r\n  table[(T_long<<4)+T_boolean] \t= T_undefined;\r\n  table[(T_short<<4)+T_undefined] \t= T_undefined;\r\n  table[(T_short<<4)+T_boolean] \t\t= T_undefined;\r\n  table[(T_boolean<<4)+T_float] \t\t\t= T_undefined;\r\n  table[(T_char<<4)+T_undefined] \t\t= T_undefined;\r\n  table[(T_char<<4)+T_boolean] \t\t= T_undefined;\r\n  table[(T_int<<4)+T_undefined] \t= T_undefined;\r\n  table[(T_int<<4)+T_boolean] \t= T_undefined;\r\n  table[(T_boolean<<4)+T_float] \t\t\t= T_undefined;\r\n  table[(T_null<<4)+T_null] \t\t\t= T_undefined;\r\n  table[(T_byte<<4)+T_undefined] \t= T_undefined;\r\n  table[(T_byte<<4)+T_Object] \t= T_undefined;\r\n  table[(T_byte<<4)+T_boolean] \t= T_undefined;\r\n  table[(T_long<<4)+T_undefined] \t= T_undefined;\r\n  table[(T_long<<4)+T_Object] \t= T_undefined;\r\n  table[(T_long<<4)+T_boolean] \t= T_undefined;\r\n  table[(T_short<<4)+T_undefined] \t= T_undefined;\r\n  table[(T_short<<4)+T_Object] \t\t= T_undefined;\r\n  table[(T_short<<4)+T_boolean] \t\t= T_undefined;\r\n  table[(T_String<<4)+T_void] \t\t= T_undefined;\r\n  table[(T_String<<4)+T_int] \t\t\t= T_undefined;\r\n  table[(T_Object<<4)+T_void] \t\t= T_undefined;\r\n  table[(T_Object<<4)+T_int] \t\t\t= T_undefined;\r\n  table[(T_double<<4)+T_undefined] \t= T_undefined;\r\n  table[(T_double<<4)+T_Object] \t\t= T_undefined;\r\n  table[(T_double<<4)+T_boolean] \t\t= T_undefined;\r\n  table[(T_float<<4)+T_undefined] \t= T_undefined;\r\n  table[(T_float<<4)+T_Object] \t\t= T_undefined;\r\n  table[(T_float<<4)+T_boolean] \t\t= T_undefined;\r\n  table[(T_boolean<<4)+T_float] \t\t\t= T_undefined;\r\n  table[(T_char<<4)+T_undefined] \t\t= T_undefined;\r\n  table[(T_char<<4)+T_Object] \t\t= T_undefined;\r\n  table[(T_char<<4)+T_boolean] \t\t= T_undefined;\r\n  table[(T_int<<4)+T_undefined] \t= T_undefined;\r\n  table[(T_int<<4)+T_Object] \t\t= T_undefined;\r\n  table[(T_int<<4)+T_boolean] \t= T_undefined;\r\n  table[(T_null<<4)+T_void] \t\t\t= T_undefined;\r\n  table[(T_null<<4)+T_int] \t\t\t= T_undefined;\r\n  int[] table  = new int[16*16];\r\n  int[] table  = new int[16*16];\r\n  table[(T_byte<<4)+T_undefined] \t= T_undefined;\r\n  table[(T_byte<<4)+T_boolean] \t= T_undefined;\r\n  table[(T_long<<4)+T_undefined] \t= T_undefined;\r\n  table[(T_long<<4)+T_boolean] \t= T_undefined;\r\n  table[(T_short<<4)+T_undefined] \t= T_undefined;\r\n  table[(T_short<<4)+T_boolean] \t\t= T_undefined;\r\n  table[(T_char<<4)+T_undefined] \t\t= T_undefined;\r\n  table[(T_char<<4)+T_boolean] \t\t= T_undefined;\r\n  table[(T_int<<4)+T_undefined] \t= T_undefined;\r\n  table[(T_int<<4)+T_boolean] \t= T_undefined;\r\n  table[(T_byte<<4)+T_undefined] \t= T_undefined;\r\n  table[(T_byte<<4)+T_Object] \t= T_undefined;\r\n  table[(T_byte<<4)+T_boolean] \t= T_undefined;\r\n  table[(T_long<<4)+T_undefined] \t= T_undefined;\r\n  table[(T_long<<4)+T_Object] \t= T_undefined;\r\n  table[(T_long<<4)+T_boolean] \t= T_undefined;\r\n  table[(T_short<<4)+T_undefined] \t= T_undefined;\r\n  table[(T_short<<4)+T_Object] \t\t= T_undefined;\r\n  table[(T_short<<4)+T_boolean] \t\t= T_undefined;\r\n  table[(T_double<<4)+T_undefined] \t= T_undefined;\r\n  table[(T_double<<4)+T_Object] \t\t= T_undefined;\r\n  table[(T_double<<4)+T_boolean] \t\t= T_undefined;\r\n  table[(T_float<<4)+T_undefined] \t= T_undefined;\r\n  table[(T_float<<4)+T_Object] \t\t= T_undefined;\r\n  table[(T_float<<4)+T_boolean] \t\t= T_undefined;\r\n  table[(T_char<<4)+T_undefined] \t\t= T_undefined;\r\n  table[(T_char<<4)+T_Object] \t\t= T_undefined;\r\n  table[(T_char<<4)+T_boolean] \t\t= T_undefined;\r\n  table[(T_int<<4)+T_undefined] \t= T_undefined;\r\n  table[(T_int<<4)+T_Object] \t\t= T_undefined;\r\n  table[(T_int<<4)+T_boolean] \t= T_undefined;\r\n  int[] table  = new int[16*16];\r\n  customization\r\n  int[] table  = new int[16*16];\r\n  int[] table  = new int[16*16];\r\n  int[] table  = new int[16*16];\r\n  table[(T_byte<<4)+T_undefined] \t= T_undefined;\r\n  table[(T_byte<<4)+T_void] \t\t= T_undefined;\r\n  table[(T_byte<<4)+T_Object] \t= T_undefined;\r\n  table[(T_byte<<4)+T_boolean] \t= T_undefined;\r\n  table[(T_long<<4)+T_undefined] \t= T_undefined;\r\n  table[(T_long<<4)+T_void] \t\t= T_undefined;\r\n  table[(T_long<<4)+T_Object] \t= T_undefined;\r\n  table[(T_long<<4)+T_boolean] \t= T_undefined;\r\n  table[(T_short<<4)+T_undefined] \t= T_undefined;\r\n  table[(T_short<<4)+T_void] \t\t\t= T_undefined;\r\n  table[(T_short<<4)+T_Object] \t\t= T_undefined;\r\n  table[(T_short<<4)+T_boolean] \t\t= T_undefined;\r\n  table[(T_String<<4)+T_undefined] \t= T_undefined;\r\n  table[(T_String<<4)+T_void] \t\t= T_undefined;\r\n  table[(T_Object<<4)+T_void] \t\t= T_undefined;\r\n  table[(T_double<<4)+T_undefined] \t= T_undefined;\r\n  table[(T_double<<4)+T_void] \t\t= T_undefined;\r\n  table[(T_double<<4)+T_Object] \t\t= T_undefined;\r\n  table[(T_double<<4)+T_boolean] \t\t= T_undefined;\r\n  table[(T_float<<4)+T_undefined] \t= T_undefined;\r\n  table[(T_float<<4)+T_void] \t\t\t= T_undefined;\r\n  table[(T_float<<4)+T_Object] \t\t= T_undefined;\r\n  table[(T_float<<4)+T_boolean] \t\t= T_undefined;\r\n  table[(T_boolean<<4)+T_void] \t\t\t= T_undefined;\r\n  table[(T_char<<4)+T_undefined] \t\t= T_undefined;\r\n  table[(T_char<<4)+T_void] \t\t\t= T_undefined;\r\n  table[(T_char<<4)+T_Object] \t\t= T_undefined;\r\n  table[(T_char<<4)+T_boolean] \t\t= T_undefined;\r\n  table[(T_int<<4)+T_undefined] \t= T_undefined;\r\n  table[(T_int<<4)+T_void] \t\t= T_undefined;\r\n  table[(T_int<<4)+T_Object] \t\t= T_undefined;\r\n  table[(T_int<<4)+T_boolean] \t= T_undefined;\r\n  table[(T_null<<4)+T_void] \t\t\t= T_undefined;\r\n  int[] table  = new int[16*16];\r\n  int[] table  = new int[16*16];\r\n  int[] table  = new int[16*16];\r\n  int[] table  = new int[16*16];\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*String2Object                 String2Object*/\r\n /*String2Object                 Object2Object*/\r\n /*Object2String                null2Object */\r\n /*Object2Object                 String2Object*/\r\n /*Object2Object                 Object2Object*/\r\n /*Object2Object                 null2Object*/\r\n /*null2Object                 String2Object*/\r\n /*null2Object                 Object2Object*/\r\n /*null2Object                 null2Object*/\r\n","AbstractReferenceTypeDelegate":"isClass doesNotExposeShadowMungers isExposedToWeaver getResolvedTypeX getSourcefilename setSourcefilename getSourceLocation getSourceContext setSourceContext getGenericClassTypeSignature getFormalTypeParametersFromOuterClass isClass doesNotExposeShadowMungers isExposedToWeaver getResolvedTypeX getSourcefilename setSourcefilename getSourceLocation getSourceContext setSourceContext getGenericClassTypeSignature getFormalTypeParametersFromOuterClass UNKNOWN_SOURCE_FILE sourcefilename exposedToWeaver resolvedTypeX sourceContext cachedGenericClassTypeSignature UNKNOWN_SOURCE_FILE sourcefilename exposedToWeaver resolvedTypeX sourceContext cachedGenericClassTypeSignature org.aspectj.weaver.AbstractReferenceTypeDelegate org.aspectj.weaver.AbstractReferenceTypeDelegate  Just randomly picked, happens to match BCEL javaclass default\r\n  Sourcefilename is stored only here\r\n  Just randomly picked, happens to match BCEL javaclass default\r\n  Sourcefilename is stored only here\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n *     Andy Clement - June 2005 - separated out from ResolvedType\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n *     Andy Clement - June 2005 - separated out from ResolvedType\r\n * ******************************************************************/\r\n","DOMImport":"appendFragmentedContents getContents getDetailedNode getJavaElement getNodeType isOnDemand newDOMNode setName toString getFlags setFlags fOnDemand fFlags org.aspectj.org.eclipse.jdt.internal.core.jdom.DOMImport  $NON-NLS-1$\r\n  buffer.append(fDocument, fNameRange[0], fNameRange[1] - fNameRange[0] + 1);\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  TODO (jerome) - add implementation support for 1.5 features\r\n","SyntheticMethodBinding":"initializeConstructorAccessor initializeMethodAccessor isConstructorRelated targetReadField targetWriteField targetMethod targetEnumType kind FieldReadAccess FieldWriteAccess MethodAccess ConstructorAccess SuperMethodAccess BridgeMethod EnumValues EnumValueOf SwitchTable sourceStart index org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding  read access to a field\r\n  write access to a field\r\n  method or constructor\r\n  enum type\r\n  field read\r\n  field write\r\n  normal method\r\n  constructor\r\n  super method\r\n  bridge method\r\n  enum #values()\r\n  enum #valueOf(String)\r\n  switch table method\r\n  start position of the matching declaration\r\n  used for sorting access methods in the class file\r\n  check for method collision\r\n  check for collision with known methods\r\n  check for collision with synthetic accessors\r\n  retry with a selector postfixed by a growing methodId\r\n  retrieve sourceStart position for the target field for line number attributes\r\n  use the target declaring class name position instead\r\n  check for method collision\r\n  check for collision with known methods\r\n  check for collision with synthetic accessors\r\n  retry with a selector postfixed by a growing methodId\r\n  use the target declaring class name position instead\r\n  also use the modifiers from the target method, as opposed to inherited one (147690)\r\n  check for method collision\r\n  check for collision with known methods\r\n  check for collision with synthetic accessors\r\n  retry with a new extra argument\r\n  retrieve sourceStart position for the target method for line number attributes\r\n  check for method collision\r\n  check for collision with known methods\r\n  check for collision with synthetic accessors\r\n  retry with a selector & a growing methodId\r\n  retrieve sourceStart position for the target method for line number attributes\r\n  New AspectJ Extension - done after declaring class set and not in ctor\r\n  AspectJ Extension\r\n","CodeSnippetSkeleton":"getExceptionTypeNames getMethodDescriptor getModifiers getSelector isClinit isConstructor getArgumentNames getGenericSignature getTagBits getAnnotations getParameterAnnotations getDefaultValue getEnclosingTypeName getFields getFileName getGenericSignature getInterfaceNames getMemberTypes getMethods getModifiers getName getSourceName getSuperclassName isAnonymous isBinaryType isLocal isMember sourceFileName getAnnotations getTagBits getJavadocContents getJavadocContents getURLContents methods exceptionTypeNames methodDescriptor selector isConstructor org.aspectj.org.eclipse.jdt.internal.eval.CodeSnippetSkeleton  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","ICompilerAdapterFactory":"getAdapter org.aspectj.ajdt.internal.compiler.ICompilerAdapterFactory  AspectJ Extension\r\n","OrLocator":"initializePolymorphicSearch match match match match match match match match match match matchContainer matchLevelAndReportImportRef matchReportImportRef matchReportReference newDeclarationMatch resolveLevel resolveLevel patternLocators org.aspectj.org.eclipse.jdt.internal.core.search.matching.OrLocator  verify that in this case binding is static and use declaring class for fields\r\n  Look for closest pattern\r\n  super implementation...\r\n  want to answer the stronger match\r\n  want to answer the stronger match\r\n","SourceTypeBinding":"addDefaultAbstractMethods addSyntheticFieldForInnerclass addSyntheticFieldForInnerclass addSyntheticFieldForClassLiteral addSyntheticFieldForAssert addSyntheticFieldForEnumValues addSyntheticField addSyntheticMethod addSyntheticEnumMethod addSyntheticFieldForSwitchEnum addSyntheticMethodForSwitchEnum addSyntheticMethod addSyntheticBridgeMethod kind computeUniqueKey faultInTypesForFieldsAndMethods fields genericTypeSignature genericSignature getAnnotationTagBits getDefaultAbstractMethods getExactConstructor getExactMethod getExactMethodBase getField getField getFieldBase getMethods getMethodsBase getSyntheticField getSyntheticField getSyntheticBridgeMethod initializeDeprecatedAnnotationTagBits isEquivalentTo isGenericType memberTypes getUpdatedFieldBinding getUpdatedMethodBinding hasMemberTypes methodsBase resolveTypeFor resolveTypesFor retrieveAnnotationHolder setFields setMethods sourceEnd sourceStart storedAnnotations superclass superInterfaces syntheticMethods syntheticFields toString typeVariables verifyMethods addField addMethod removeMethod rememberTypeHierarchy methods superclass superInterfaces fields methods memberTypes typeVariables originalSuperclass originalSuperInterfaces privilegedHandler memberFinder scope METHOD_EMUL FIELD_EMUL CLASS_LITERAL_EMUL RECEIVER_TYPE_EMUL synthetics genericReferenceTypeSignature storedAnnotations org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding  AspectJ Extension - raised visibility to public of these fields\r\n  End AspectJ Extension - raised visibility to public of these fields\r\n  we can still write out the original correct ones at code gen time.\r\n  Synthetics are separated into 5 categories: methods, super methods, fields, class literals, changed declaring type bindings and bridge methods\r\n  keys are this ReferenceBinding & its fields and methods, value is an AnnotationHolder\r\n  (and yes, binary source is a bit odd...)\r\n  expect the fields & methods to be initialized correctly later\r\n  no longer added for post 1.2 targets\r\n  explicitly implemented ?\r\n  already added as default abstract ?\r\n  re-sort methods\r\n  ensure there is not already such a field defined by the user\r\n  $NON-NLS-1$\r\n  ensure there is not already such a field defined by the user\r\n  $NON-NLS-1$\r\n  use a different table than FIELDS, given there might be a collision between emulation of X.this$0 and X.class.\r\n  ensure there is not already such a field defined by the user\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  ensure there is not already such a field defined by the user\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  ensure there is not already such a field defined by the user\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Skip the check for a clash... naughty!\r\n  AspectJ Extension\r\n  ensure there is not already such a field defined by the user\r\n  $NON-NLS-1$\r\n  then create the synthetic method\r\n  first add the corresponding synthetic field\r\n  only classes & enums get bridge methods\r\n  do not need bridge method\r\n  targetMethod may be inherited\r\n  check to see if there is another equivalent inheritedMethod already added\r\n  problem type's unique key is \"L;\"\r\n  no need to insert compilation unit name for a .class file\r\n  insert compilation unit name if the type name is not the main type name\r\n  start after L\r\n  marks as deprecated by side effect\r\n  ensure fields are consistent reqardless of the error\r\n  lazily sort fields\r\n  do not alter original field array until resolution is over, due to reentrance (143259)\r\n  NOTE: the type of each field of a source type is resolved when needed\r\n  next 4 lines are new code, rest is changed from the original method body, marked 'AJ was'\r\n  could still need a signature if any of supertypes is parameterized\r\n  interface scenario only (as Object cannot be generic) - 65953\r\n  lazily sort methods\r\n  try again since the problem methods have been removed\r\n  have resolved all arg types & return type of the methods\r\n  NOTE: the return type, arg & exception types of each method of a source type are resolved when needed\r\n  searches up the hierarchy as long as no potential (but not exact) match was found.\r\n  sender from refScope calls recordTypeReference(this)\r\n  lazily sort methods\r\n  check unresolved method\r\n  try again since the problem methods have been removed\r\n  check dup collisions\r\n  try again since the problem methods have been removed\r\n  have resolved all arg types & return type of the methods\r\n  inner type lookups must know that a method with this name exists\r\n  searches up the hierarchy as long as no potential (but not exact) match was found.\r\n  AspectJ Extension - replaced original impl with this\r\n  End ApsectJ Extension\r\n  lazily sort fields\r\n  always resolve anyway on source types\r\n  ensure fields are consistent reqardless of the error\r\n  AspectJ Extension - replaced original impl with this\r\n  End AspectJ Extension\r\n  lazily sort methods\r\n  try again since the problem methods have been removed\r\n  try again since the duplicate methods have been removed\r\n  NOTE: the return type, arg & exception types of each method of a source type are resolved when needed\r\n  class S extends T { class N extends M {}} --> need to use S as a default enclosing instance for the super constructor call in N().\r\n  should have been identical\r\n  static member types do not compare their enclosing\r\n  AspectJ Extension - added Base suffix, see methods()\r\n  lazily sort methods\r\n  handle forward references to potential default abstract methods\r\n  do not alter original method array until resolution is over, due to reentrance (143259)\r\n  unable to resolve parameters\r\n  find & report collision cases\r\n  methods with same selector are contiguous\r\n  prior to 1.5, parameter identity meant a collision case\r\n  signature(m1) == erasure(signature(m2)) or erasure(signature(m1)) == signature(m2)\r\n  check to see if the erasure of either method is equal to the other\r\n  handle comparing identical source types like X<T>... its erasure is itself BUT we need to answer false\r\n  type variables are different so we can distinguish between methods\r\n  cannot be retrieved after binding is lost & may still be null if method is special\r\n  ensure its a valid user defined method\r\n  do not alter original method array until resolution is over, due to reentrance (143259)\r\n  report duplicate\r\n  ensure its a valid user defined method\r\n  do not alter original method array until resolution is over, due to reentrance (143259)\r\n  forget method with invalid return type... was kept to detect possible collisions\r\n  do not alter original method array until resolution is over, due to reentrance (143259)\r\n  NOTE: the return type, arg & exception types of each method of a source type are resolved when needed\r\n  enum constant is implicitly of declaring enum type\r\n  should never reach this point\r\n  method could not be resolved in previous iteration\r\n  AspectJ extension\r\n  Perform deferred bound checks for type variables (only done after type variable hierarchy is connected)\r\n  only assign parameters if no problems are found\r\n  see 107004\r\n  (see https:  but its still unresolved with a null return type & is still connected to its method declaration\r\n  ensure annotations are up to date\r\n  scope null when no annotation cached, and type got processed fully (159631)\r\n  not supported during this compile\r\n  difficult to compute size up front because of the embedded arrays so assume there is only 1\r\n  read access\r\n  write access\r\n  super access\r\n  normal access or bridge\r\n  sort them in according to their own indexes\r\n  TODO (philippe) could be a performance issue since some senders are building the list just to count them\r\n  add innerclass synthetics\r\n  add class literal synthetics\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  ??? inefficient\r\n  AspectJ Extension\r\n  New AspectJ Extension\r\n /* Add a new synthetic field for <actualOuterLocalVariable>.\r\n*\tAnswer the new field or the existing field if one already existed.\r\n*/\r\n /* Add a new synthetic field for <enclosingType>.\r\n*\tAnswer the new field or the existing field if one already existed.\r\n*/\r\n /* Add a new synthetic field for a class literal access.\r\n*\tAnswer the new field or the existing field if one already existed.\r\n*/\r\n /* Add a new synthetic field for the emulation of the assert statement.\r\n*\tAnswer the new field or the existing field if one already existed.\r\n*/\r\n /* Add a new synthetic field for recording all enum constant values\r\n*\tAnswer the new field or the existing field if one already existed.\r\n*/\r\n /* Add a new synthetic access method for read/write access to <targetField>.\r\n\tAnswer the new method or the existing method if one already existed.\r\n*/\r\n /* Add a new synthetic method the enum type. Selector can either be 'values' or 'valueOf'.\r\n * char[] constants from TypeConstants must be used: TypeConstants.VALUES/VALUEOF\r\n*/\r\n /*\r\n * Add a synthetic field to handle the cache of the switch translation table for the corresponding enum type \r\n */\r\n /* Add a new synthetic method the enum type. Selector can either be 'values' or 'valueOf'.\r\n * char[] constants from TypeConstants must be used: TypeConstants.VALUES/VALUEOF\r\n*/\r\n /* Add a new synthetic access method for access to <targetMethod>.\r\n * Must distinguish access method used for super access from others (need to use invokespecial bytecode)\r\n\tAnswer the new method or the existing method if one already existed.\r\n*/\r\n /* \r\n * Record the fact that bridge methods need to be generated to override certain inherited methods\r\n */\r\n /*AJ was this.superclass*/\r\n /*AJ was this.superclass*/\r\n /*AJ was this.superInterfaces*/\r\n /*AJ was this.superInterfaces*/\r\n /*AJ was this.superclass*/\r\n /*AJ was this.superclass*/\r\n /*AJ was this.superInterfaces*/\r\n /*AJ was this.superInterfaces*/\r\n /* Answer the synthetic field for <actualOuterLocalVariable>\r\n*\tor null if one does not exist.\r\n*/\r\n /* Answer the synthetic field for <targetEnclosingType>\r\n*\tor null if one does not exist.\r\n*/\r\n /* \r\n * Answer the bridge method associated for an  inherited methods or null if one does not exist\r\n */\r\n","BaseTypeBinding":"computeUniqueKey constantPoolName getPackage isCompatibleWith isNarrowing isUncheckedException isWidening kind qualifiedSourceName readableName shortReadableName sourceName toString simpleName constantPoolName org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding  (is left smaller than right)\r\n  (is left \"bigger\" than right)\r\n  $NON-NLS-1$  /* Answer the receiver's constant pool name.\r\n\t*/\r\n /* Answer true if the receiver type can be assigned to the argument type (right)\r\n\t*/\r\n","AjLookupEnvironment":"completeTypeBindings doSupertypesFirst collectAllITDsAndDeclares weaveIntertypes doPendingWeaves addAdviceLikeDeclares addCrosscuttingStructures resolvePointcutDeclarations couldBeAnnotationStyleAspectDeclaration buildInterTypeAndPerClause isAspect weaveInterTypeDeclarations weaveInterTypeDeclarations weaveInterTypeDeclarations processTypeMungersFromExistingWeaverState doDeclareParents stringifyTargets doDeclareAnnotations createAnnotationFromBcelAnnotation createAnnotationCopy isAnnotationTargettingSomethingOtherThanAnnotationOrNormal reportDeclareParentsMessage getShortname addParent warnOnAddedInterface createBinaryTypeFrom anonymousTypeBindingCreated factory pendingTypesToWeave dangerousInterfaces pendingTypesToFinish inBinaryTypeCreationAndWeaving processingTheQueue org.aspectj.ajdt.internal.compiler.lookup.AjLookupEnvironment  private boolean builtInterTypesAndPerClauses = false;\r\n  pendingTypesToWeave = new ArrayList();\r\n  later, after ITDs applied to stbs\r\n  them in the factory\r\n  told about them when they turn up.\r\n  this MUST be done in order from super-types to subtypes\r\n  removes types from the list as they are processed...\r\n  now do weaving\r\n  DECAT\r\n  but these aren't common cases (he bravely said...)\r\n  String(units[i].getFileName()));\r\n  Order isn't important\r\n  is removed from the collection\r\n  release unnecessary reference to the parsed unit\r\n  ??? duplicates some of super's code\r\n  If its a PTB we need to pull the SourceTypeBinding out of it.\r\n  Look at the supertype first\r\n  look out our direct supertype\r\n  now check our membertypes (pr119570)\r\n  Look at the supertype first\r\n  String(superType.getFileName()));\r\n  Then look at the superinterface list\r\n  String(binding.getFileName()));\r\n  force initialization\r\n  test classes don't extend aspects\r\n  AMC we shouldn't need this when generic sigs are fixed??\r\n  matched this type.\r\n  report a problem if it is.\r\n  annotation patterns then they might match later...remember that...\r\n  now lets loop over and over until we have done all we can\r\n  String(sourceType.sourceName));\r\n  will correctly reported as a problem elsewhere\r\n  factory.fromEclipse(sourceType), newParents);\r\n  Get the annotation specified in the declare\r\n  eclipse land\r\n  ensure resolved\r\n  this is what to add\r\n  pr148536\r\n  could assert this ...\r\n  pr184447\r\n  annotation that isn't allowed on a type being put on a type.\r\n  eclipse one for it.\r\n  on the weaver type temporarily\r\n  Simple checks on the bits\r\n  error will have been already reported\r\n  multiple times if we have cause to loop through here\r\n  just resolution process above\r\n  first time it is called for a type)\r\n  decA.getSourceLocation(), rtx.getSourceLocation());\r\n  pr149293 - not bulletproof...\r\n  String theName = annX.getSignature().getBaseName();\r\n  yuck - is this OK in all cases?\r\n  ann.memberValuePairs = mvps;\r\n  The parent is missing, it will be reported elsewhere.\r\n  also add it to the bcel delegate if there is one\r\n  more entries to the pendingTypesToFinish list.\r\n  Start processing the list...\r\n  are:((ClassFileReader)binaryType).getReferenceBytes()\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","AnnotationMethodDeclaration":"generateCode isAnnotationMethod isMethod parseStatements print resolveStatements traverse defaultValue extendedDimensions org.aspectj.org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  only 1-dimensional array permitted\r\n  annotation methods can only return base types, String, Class, enum type, annotation types and arrays of these\r\n  let it know it does not have a default value so it won't try to find it\r\n","ScannerHelper":"isBitSet isJavaIdentifierPart isJavaIdentifierPart isJavaIdentifierStart isJavaIdentifierStart toCodePoint isDigit digit getNumericValue toUpperCase toLowerCase isLowerCase isUpperCase isWhitespace isLetter isLetterOrDigit Bits START_INDEX PART_INDEX Tables MAX_OBVIOUS OBVIOUS_IDENT_CHAR_NATURES C_JLS_SPACE C_SPECIAL C_IDENT_START C_UPPER_LETTER C_LOWER_LETTER C_IDENT_PART C_DIGIT C_SEPARATOR C_SPACE org.aspectj.org.eclipse.jdt.internal.compiler.parser.ScannerHelper  \\ u0009: HORIZONTAL TABULATION\r\n  \\ u000a: LINE FEED\r\n  \\ u000c: FORM FEED\r\n  \\ u000d: CARRIAGE RETURN\r\n  \\ u0020: SPACE\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","IBuildProgressMonitor":"begin setProgressText finish setProgress isCancelRequested org.aspectj.ajde.core.IBuildProgressMonitor","ClassLoaderReference":"getClassLoader getClassLoader org.aspectj.apache.bcel.util.ClassLoaderReference org.aspectj.apache.bcel.util.ClassLoaderReference /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n","AroundAdviceDeclaration":"propertyDescriptors internalGetSetChildProperty internalGetChildListProperty typeParameters getReturnType internalGetReturnType setReturnType internalSetReturnType getReturnType2 setReturnType2 clone0 treeSize subtreeMatch0 accept0 aroundRETURN_TYPE_PROPERTY aroundRETURN_TYPE2_PROPERTY aroundTYPE_PARAMETERS_PROPERTY aroundJAVADOC_PROPERTY aroundPARAMETERS_PROPERTY aroundPOINTCUT_PROPERTY aroundTHROWN_EXCEPTIONS_PROPERTY aroundBODY_PROPERTY aroundPROPERTY_DESCRIPTORS_2_0 aroundPROPERTY_DESCRIPTORS_3_0 returnType returnType2Initialized typeParameters org.aspectj.org.eclipse.jdt.core.dom.AroundAdviceDeclaration  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  ajh02: move to aroundAdvice\r\n  more efficient than just calling unsupportedIn2() to check\r\n  lazy init must be thread-safe for readers\r\n  lazy init must be thread-safe for readers\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n /*package*/\r\n /*package*/\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","EntryResult":"addDocumentName addDocumentTable getWord getDocumentNames isEmpty word documentTables documentNames org.aspectj.org.eclipse.jdt.internal.core.index.EntryResult  have a single table\r\n","UserPreferencesAdapter":"getGlobalPreference getGlobalMultivalPreference setGlobalPreference setGlobalMultivalPreference getProjectPreference getProjectMultivalPreference setProjectPreference setProjectMultivalPreference org.aspectj.ajde.ui.UserPreferencesAdapter /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","PointcutDesignatorHandler":"getDesignatorName parse getDesignatorName parse org.aspectj.weaver.tools.PointcutDesignatorHandler org.aspectj.weaver.tools.PointcutDesignatorHandler /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","TypeVariablePatternList":"getTypeVariablePatterns lookupTypeVariable isEmpty write read accept traverse getTypeVariablePatterns lookupTypeVariable isEmpty write read accept traverse EMPTY patterns EMPTY patterns org.aspectj.weaver.patterns.TypeVariablePatternList org.aspectj.weaver.patterns.TypeVariablePatternList  redundant but safe to read location for EMPTY\r\n  redundant but safe to read location for EMPTY\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","IJarEntryResource":"getChildren getFullPath getParent getPackageFragmentRoot isFile org.aspectj.org.eclipse.jdt.core.IJarEntryResource","SourceMapper":"accept acceptImport acceptLineSeparatorPositions acceptPackage acceptProblem addCategories close convertTypeNamesToSigs computeAllRootPaths computeRootPath computeRootPath enterType enterCompilationUnit enterConstructor enterField enterInitializer enterMethod enterAbstractMethod exitType exitCompilationUnit exitConstructor exitField exitInitializer exitMethod exitAbstractMethod findSource findSource getSourceForRootPath findSource getNameRange getMethodParameterNames getSourceRange getType getUnqualifiedMethodHandle getUnqualifiedTypeSignature mapSource mapSource readSource setMethodParameterNames setSourceRange getImports hasToRetrieveSourceRangesForLocalClass VERBOSE FILENAME_FILTER rootPaths binaryType sourcePath rootPath parameterNames sourceRanges categories UNKNOWN_RANGE memberDeclarationStart memberNameRange memberName methodParameterNames methodParameterTypes searchedElement importsTable importsCounterTable types typeDeclarationStarts typeNameRanges typeModifiers typeDepth anonymousCounter anonymousClassName encoding options areRootPathsComputed org.aspectj.org.eclipse.jdt.internal.core.SourceMapper  $NON-NLS-1$\r\n  e.g. \"QX<+QMap.Entry;>;\" becomes \"QX<+QEntry;>;\"\r\n  $NON-NLS-1$\r\n  handle null case\r\n  handle null case\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   check if one member is a .java file\r\n  need to grow\r\n  type parameters\r\n  type modifiers\r\n  categories\r\n  categories\r\n  type parameters\r\n  categories\r\n  remember right root path\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  try to get the entry\r\n  handle null case\r\n  now read the source code\r\n  primitive type or wildcard\r\n  check whether it is already mapped\r\n  disable javadoc parsing\r\n /*\r\n\t * A map from IJavaElement to String[]\r\n\t */\r\n /*start*/\r\n /*\r\n\t\t * A$1$B$2 : true\r\n\t\t * A$B$B$2 : true\r\n\t\t * A$C$B$D : false\r\n\t\t * A$F$B$D$1$F : true\r\n\t\t * A$F$B$D$1F : true\r\n\t\t * A$1 : true\r\n\t\t * A$B : false\r\n\t\t */\r\n","DefaultMatchingContext":"hasContextBinding getBinding addContextBinding removeContextBinding hasContextBinding getBinding addContextBinding removeContextBinding contextMap contextMap org.aspectj.weaver.tools.DefaultMatchingContext org.aspectj.weaver.tools.DefaultMatchingContext /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.tools.MatchingContext#hasContextParameter(java.lang.String)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.tools.MatchingContext#get(java.lang.String)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.tools.MatchingContext#hasContextParameter(java.lang.String)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.tools.MatchingContext#get(java.lang.String)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","CopyPackageFragmentRootOperation":"executeOperation copyResource addEntryToClasspath copy verify destination updateResourceFlags updateModelFlags sibling org.aspectj.org.eclipse.jdt.internal.core.CopyPackageFragmentRootOperation  copy resource\r\n  update classpath if needed\r\n  subtree doesn't contain any nested source folders\r\n  folder containing nested source folder\r\n  nested source folder\r\n  find existing entry\r\n  case of existing entry and REPLACE was specified\r\n  other cases\r\n  insert before sibling\r\n  insert at the end\r\n /*\r\n\t * Copies the given classpath entry replacing its path with the destination path\r\n\t * if it is a source folder or a library.\r\n\t */\r\n","HandlerPointcut":"couldMatchKinds fastMatch matchInternal parameterizeWith equals hashCode toString write read resolveBindings findResidueInternal concretize1 accept couldMatchKinds fastMatch matchInternal parameterizeWith equals hashCode toString write read resolveBindings findResidueInternal concretize1 accept exceptionType MATCH_KINDS exceptionType MATCH_KINDS org.aspectj.weaver.patterns.HandlerPointcut org.aspectj.weaver.patterns.HandlerPointcut  ??? should be able to do better by finding all referenced types in type\r\n  we know we have exactly one parameter since we're checking an exception handler\r\n  no parameterized or generic types for handler\r\n  list in capturing type identifiers.\r\n  ??? should be able to do better by finding all referenced types in type\r\n  we know we have exactly one parameter since we're checking an exception handler\r\n  no parameterized or generic types for handler\r\n  list in capturing type identifiers.\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","NameReference":"fieldBinding isSuperAccess isTypeAccess isTypeReference setActualReceiverType setDepth setFieldIndex unboundReferenceErrorName binding codegenBinding actualReceiverType org.aspectj.org.eclipse.jdt.internal.compiler.ast.NameReference  may be aTypeBinding-aFieldBinding-aLocalVariableBinding\r\n  modified receiver type - actual one according to namelookup\r\n  restrictiveFlag\r\n  no changeClass in java.\r\n  null is acceptable when we are resolving the first part of a reference\r\n  error scenario only\r\n  flush previous depth if any\r\n  encoded on 8 bits\r\n","CompactTypeStructureRepresentation":"getEnclosingTypeName getModifiers getGenericSignature getInterfaceNames isAnonymous sourceFileName isLocal isMember getSuperclassName getFileName getName getTagBits isBinaryType getFields getMethods getMemberTypes getAnnotations getSourceName NoInterface NoNestedType NoField NoMethod className modifiers genericSignature superclassName interfaces enclosingTypeName isLocal isAnonymous isMember sourceFileName fileName sourceName tagBits isBinaryType binFields binMethods memberTypes annotations org.aspectj.ajdt.internal.core.builder.CompactTypeStructureRepresentation  this is the core state for comparison\r\n  this is the extra state that enables us to be an IBinaryType\r\n  slashes...\r\n  slashes...\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement   promoted member type from AjState\r\n * ******************************************************************/\r\n","FieldReferenceMatch":"isReadAccess isWriteAccess isReadAccess isWriteAccess org.aspectj.org.eclipse.jdt.core.search.FieldReferenceMatch","SaveIndex":"execute toString org.aspectj.org.eclipse.jdt.internal.core.search.indexing.SaveIndex  index got deleted since acquired\r\n  $NON-NLS-1$   free write lock\r\n  ask permission to write\r\n  $NON-NLS-1$\r\n /*reuse index file*/\r\n /* ensure no concurrent write access to index */\r\n /*\r\n * Save the index of a project.\r\n */\r\n","TypeVariableReferenceType":"getDelegate getUpperBound getLowerBound setAdditionalInterfaceBoundsFromTypeVar parameterize getAdditionalBounds getTypeVariable isTypeVariableReference toString isGenericWildcard isAnnotation getSignature write getDelegate getUpperBound getLowerBound setAdditionalInterfaceBoundsFromTypeVar parameterize getAdditionalBounds getTypeVariable isTypeVariableReference toString isGenericWildcard isAnnotation getSignature write typeVariable resolvedIfBounds fixedUp typeVariable resolvedIfBounds fixedUp org.aspectj.weaver.TypeVariableReferenceType org.aspectj.weaver.TypeVariableReferenceType  at the right time).  Wonder if we can fix it up late?\r\n  if (!fixedUp) throw new BCException(\"ARGH\");   annotation itself does not have the annotation flag set in Java!\r\n  at the right time).  Wonder if we can fix it up late?\r\n  if (!fixedUp) throw new BCException(\"ARGH\");   annotation itself does not have the annotation flag set in Java!\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","IDocumentElementRequestor":"acceptImport acceptInitializer acceptLineSeparatorPositions acceptPackage acceptProblem enterClass enterCompilationUnit enterConstructor enterField enterInterface enterMethod exitClass exitCompilationUnit exitConstructor exitField exitInterface exitMethod org.aspectj.org.eclipse.jdt.internal.compiler.IDocumentElementRequestor /*\r\n * Table of line separator position. This table is passed once at the end\r\n * of the parse action, so as to allow computation of normalized ranges.\r\n *\r\n * A line separator might corresponds to several characters in the source,\r\n * \r\n */\r\n","AbortType":"serialVersionUID org.aspectj.org.eclipse.jdt.internal.compiler.problem.AbortType  backward compatible\r\n /*\r\n * Special unchecked exception type used \r\n * to abort from the compilation process\r\n *\r\n * should only be thrown from within problem handlers.\r\n */\r\n","Substitution":"substitute environment isRawSubstitution org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Substitution /*\r\n * Encapsulates aspects related to type variable substitution\r\n */\r\n","VariableDeclarationFragment":"propertyDescriptors internalExtraDimensionsProperty internalInitializerProperty internalNameProperty internalStructuralPropertiesForType internalGetSetIntProperty internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getName setName getExtraDimensions setExtraDimensions getInitializer setInitializer memSize treeSize NAME_PROPERTY EXTRA_DIMENSIONS_PROPERTY INITIALIZER_PROPERTY PROPERTY_DESCRIPTORS variableName extraArrayDimensions optionalInitializer org.aspectj.org.eclipse.jdt.core.dom.VariableDeclarationFragment  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  treat Operator as free\r\n /* (omit javadoc for this method)\r\n\t * Method declared on VariableDeclaration.\r\n\t * @since 3.1\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on VariableDeclaration.\r\n\t * @since 3.1\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on VariableDeclaration.\r\n\t * @since 3.1\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on VariableDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on VariableDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on VariableDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on VariableDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","CompletionOnMemberValueName":"print org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnMemberValueName  $NON-NLS-1$\r\n /*\r\n * Completion node build by the parser in any case it was intending to\r\n * reduce annotation's attribute name containing the cursor.\r\n * e.g.\r\n *\r\n *\t@Annot(attri[cursor]\r\n *\tclass X {\r\n *  }\r\n *\r\n *\t---> @Annot(<CompletionOnAttributeName:attri>)\r\n *\t\t class X {\r\n *       }\r\n */\r\n","RangeUtil":"addInterval addInterval getRanges quickSort compare containsErrorInSignature computeDietRange computeDietRange0 containsIgnoredBody NO_FLAG LBRACE_MISSING IGNORE INITIAL_SIZE pos intervalStarts intervalEnds intervalFlags org.aspectj.org.eclipse.jdt.internal.compiler.parser.diagnose.RangeUtil  flags\r\n  members\r\n  methods\r\n  initializers\r\n","CompilationUnit":"propertyDescriptors accept0 clone0 getColumnNumber findDeclaringNode findDeclaringNode getCommentList getCommentMapper getExtendedLength getExtendedStartPosition getJavaElement getMessages getNodeType0 getPackage getPosition getProblems getTypeRoot imports firstLeadingCommentIndex lastTrailingCommentIndex initCommentMapper internalGetChildListProperty internalGetSetChildProperty internalStructuralPropertiesForType lineNumber getLineNumber memSize recordModifications rewrite setCommentTable setTypeRoot setLineEndTable setPackage setProblems subtreeMatch0 treeSize types getContents getFileName getMainTypeName getPackageName toString becomeWorkingCopy becomeWorkingCopy buildStructure canBeRemovedFromCache canBufferBeRemovedFromCache close closing codeComplete codeComplete codeComplete codeComplete codeComplete codeSelect codeSelect commit commitWorkingCopy copy createElementInfo createImport createImport createPackageDeclaration createType delete destroy discardWorkingCopy equals exists findElements findPrimaryType findSharedWorkingCopy findWorkingCopy getAllTypes getCompilationUnit getContents getCorrespondingResource getElementAt getElementName getElementType getFileName getHandleFromMemento getHandleMementoDelimiter getImport getImportContainer getImports getTypeRoot getMainTypeName getOriginal getOriginalElement getOwner getPackageDeclaration getPackageDeclarations getPackageName getPath getPerWorkingCopyInfo getPrimary getPrimaryElement getResource getSource getSourceRange getType getTypes getUnderlyingResource getSharedWorkingCopy getWorkingCopy getWorkingCopy getWorkingCopy getWorkingCopy getWorkingCopy hasBuffer hasResourceChanged isBasedOn isConsistent isPrimary isSourceElement validateCompilationUnit isWorkingCopy makeConsistent makeConsistent move openBuffer openParent reconcile reconcile reconcile reconcile reconcile rename restore save toStringInfo updateTimeStamp getContents getFileName getMainTypeName getPackageName toString EMPTY_MESSAGES EMPTY_PROBLEMS IMPORTS_PROPERTY PACKAGE_PROPERTY PROPERTY_DESCRIPTORS TYPES_PROPERTY commentMapper typeRoot imports lineEndTable messages optionalCommentList optionalCommentTable optionalPackageDeclaration problems types contents fileName mainTypeName encoding destinationPath JLS2_INTERNAL NO_IMPORTS name owner fContents fFileName fMainTypeName org.aspectj.org.eclipse.jdt.core.dom.CompilationUnit org.aspectj.org.eclipse.jdt.internal.compiler.batch.CompilationUnit org.aspectj.org.eclipse.jdt.internal.core.CompilationUnit org.aspectj.org.eclipse.jdt.internal.core.jdom.CompilationUnit  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  visit children in normal left to right reading order\r\n  n.b do not copy line number table or messages\r\n  length is different from 0\r\n  -1, again, to get previous line.\r\n  previousLineOffset + 1 is the first character of the current line\r\n  fall back: use best info available\r\n  fall back: use best info available\r\n  greater than the number of lines in the source string.\r\n  -1, again, to get previous line.\r\n  previousLineOffset + 1 is the first character of the current line\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  position illegal\r\n  before the first line delimiter\r\n  assert position > lineEndTable[low+1]  && low == 0\r\n  this is beyond the end of the source length\r\n  position beyond the last line separator\r\n  position is on line low+1 (line number is low+2)\r\n  reducing measure hi - low\r\n  assert hi - low >= 2, so average is truly in between\r\n  && 0 <= low < mid < hi <= length - 1\r\n  && 0 <= low < mid < hi <= length - 1\r\n  assert 0 <= low < mid < hi <= length - 1\r\n  binary search line end table\r\n  ignore the space taken up by optionalCommentList\r\n  protect the list from further modification\r\n  source positions and are in strictly increasing order\r\n  but we protect them nevertheless\r\n  dispatch to correct overloaded match method\r\n  include disconnected comments\r\n  answer the cached source\r\n  assume no source if asked again\r\n  otherwise retrieve it\r\n  $NON-NLS-2$   close cu and its children\r\n  no check is done on root kind or exclusion pattern for working copies\r\n  check if this compilation unit can be opened\r\n  prevents reopening of non-primary working copies (they are closed when they are discarded and should not be reopened)\r\n  get buffer contents\r\n  open buffer independently from the info, since we are building the info\r\n  generate structure and compute syntax problems if needed\r\n  $NON-NLS-1$\r\n  disable javadoc parsing if not computing problems, not resolving and not creating ast\r\n  update timestamp (might be IResource.NULL_STAMP if original does not exist)\r\n  underlying resource is null in the case of a working copy on a class file in a jar\r\n  compute other problems if needed\r\n  collect problems\r\n  report problems to the problem requestor\r\n  working copies should remain in the cache until they are destroyed\r\n  working copy buffers should remain in the cache until working copy is destroyed\r\n  a working copy must remain opened until it is discarded\r\n  $NON-NLS-1$\r\n  skip parameter names\r\n  autogenerate this compilation unit\r\n  $NON-NLS-1$\r\n  not the default package...add the package declaration\r\n  $NON-NLS-1$   discard working copy and its children\r\n  working copy always exists in the model until it is gotten rid of (even if not on classpath)\r\n  if not a working copy, it exists only if it is a primary compilation unit\r\n  if factory is null, default factory must be used\r\n  must be a working copy\r\n  also this cannot be a working copy, as its buffer is never closed while the working copy is alive\r\n  see https:  force opening of CU\r\n  after opening, if no import container, then no imports\r\n  CU was opened, but no import container, then no imports\r\n  backward compatibility\r\n  backward compatibility\r\n  working copy not in workspace\r\n  working copy not in workspace\r\n  $NON-NLS-1$\r\n  if factory is null, default factory must be used\r\n  return existing handle instead of the one created above\r\n  timestamp\r\n  root never null as validation is not done for working copies\r\n  delta, clients can still check that element was a working copy before being discarded.\r\n  (this will remove the info and its children just before storing the new infos)\r\n  create buffer\r\n  initialize buffer with empty contents\r\n  set the buffer source\r\n  can be closed, thus no call to a client's IBuffer#close() can be done in this synchronized block.\r\n  listen to buffer changes\r\n  see https:  Reconciling is not supported on non working copies\r\n  cache zip files for performance (see https:  not simply makeConsistent, also computes fine-grain deltas\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-2$  /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t * @since 3.0\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /*package*/\r\n /*don't create*/\r\n /*record usage*/\r\n /*\r\n * @see ICompilationUnit#becomeWorkingCopy(IProblemRequestor, IProgressMonitor)\r\n */\r\n /*\r\n * @see ICompilationUnit#becomeWorkingCopy(IProgressMonitor)\r\n */\r\n /*report local declarations*/\r\n /*\r\n * @see Openable#canBeRemovedFromCache\r\n */\r\n /*\r\n * @see Openable#canBufferBeRemovedFromCache\r\n */\r\n /*\r\n * @see IOpenable#close\r\n */\r\n /*\r\n * @see Openable#closing\r\n */\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.core.ICodeAssist#codeComplete(int, org.aspectj.org.eclipse.jdt.core.CompletionRequestor)\r\n */\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.core.ICodeAssist#codeComplete(int, org.aspectj.org.eclipse.jdt.core.CompletionRequestor, org.aspectj.org.eclipse.jdt.core.WorkingCopyOwner)\r\n */\r\n /*no existing source*/\r\n /*\r\n * @see ICompilationUnit#discardWorkingCopy\r\n */\r\n /*\r\n * @see JavaElement\r\n */\r\n /*\r\n * @see ICompilationUnit#getOwner()\r\n */\r\n /*don't create*/\r\n /*don't record usage*/\r\n /*\r\n * Returns the per working copy info for the receiver, or null if none exist.\r\n * Note: the use count of the per working copy info is NOT incremented.\r\n */\r\n /*\r\n * @see ICompilationUnit#getPrimary()\r\n */\r\n /*\r\n * @see JavaElement#getPrimaryElement(boolean)\r\n */\r\n /*no problem requestor*/\r\n /*don't create*/\r\n /*record usage*/\r\n /*\r\n * @see ICompilationUnit#hasResourceChanged()\r\n */\r\n /*\r\n * @see ICompilationUnit#isWorkingCopy()\r\n */\r\n /*don't resolve bindings*/\r\n /* don't perform statements recovery */\r\n /*don't collect problems but report them*/\r\n /*don't force problem detection*/\r\n /*use primary owner*/\r\n /*use primary owner*/\r\n /*\r\n * @see ICompilationUnit\r\n */\r\n /*\r\n * Assume that this is a working copy\r\n */\r\n","SimpleLookupTable":"clone containsKey get getKey keyForValue put removeKey removeValue rehash toString keyTable valueTable elementSize threshold org.aspectj.org.eclipse.jdt.internal.compiler.util.SimpleLookupTable  to avoid using Enumerations, walk the individual tables skipping nulls\r\n  number of elements in the table\r\n  size represents the expected number of elements\r\n  assumes the threshold is never equal to the size of the table\r\n  only needed if a possible collision existed\r\n  only needed if a possible collision existed\r\n  double the number of expected elements\r\n  $NON-NLS-1$\r\n  $NON-NLS-2$ ","ISelectionRequestor":"acceptType acceptError acceptField acceptMethod acceptPackage acceptTypeParameter acceptMethodTypeParameter org.aspectj.org.eclipse.jdt.internal.codeassist.ISelectionRequestor  parameters 'isDeclaration', 'start' and 'end' are use to distinguish duplicate methods declarations\r\n","AtAjAttributes":"getArgumentNames acceptAttribute readAj5ClassAttributes readAj5MethodAttributes readAj5FieldAttributes handleAspectAnnotation parsePerClausePointcut handlePrecedenceAnnotation handleDeclareParentsAnnotation handleBeforeAnnotation handleAfterAnnotation handleAfterReturningAnnotation handleAfterThrowingAnnotation handleAroundAnnotation handlePointcutAnnotation handleDeclareErrorOrWarningAnnotation setDeclareErrorOrWarningLocation methodToString extractBindings extractBindings extractExtraArgument extractExtraArgument getAnnotation getAnnotationElement getArgNamesValue lastbit getMethodArgumentNames getEnclosingType makeSourceLocation lookupType getPointcut isNullOrEmpty setIgnoreUnboundBindingNames reportError reportWarning parsePointcut hasIf parseTypePattern getFormalName getFormalName getArgumentNames acceptAttribute readAj5ClassAttributes readAj5MethodAttributes readAj5FieldAttributes handleAspectAnnotation parsePerClausePointcut handlePrecedenceAnnotation handleDeclareParentsAnnotation handleBeforeAnnotation handleAfterAnnotation handleAfterReturningAnnotation handleAfterThrowingAnnotation handleAroundAnnotation handlePointcutAnnotation handleDeclareErrorOrWarningAnnotation setDeclareErrorOrWarningLocation methodToString extractBindings extractBindings extractExtraArgument extractExtraArgument getAnnotation getAnnotationElement getArgNamesValue lastbit getMethodArgumentNames getEnclosingType makeSourceLocation lookupType getPointcut isNullOrEmpty setIgnoreUnboundBindingNames reportError reportWarning parsePointcut hasIf parseTypePattern getFormalName getFormalName EMPTY_LIST EMPTY_STRINGS VALUE ARGNAMES POINTCUT THROWING RETURNING STRING_DESC ajAttributes enclosingType context handler m_argumentNamesLazy unparsedArgumentNames method bMethod field bField name indexOnStack m_enclosingType m_sourceContext m_pointcutUnresolved m_binding m_lazyPointcut formalName formalName EMPTY_LIST EMPTY_STRINGS VALUE ARGNAMES POINTCUT THROWING RETURNING STRING_DESC ajAttributes enclosingType context handler m_argumentNamesLazy unparsedArgumentNames method bMethod field bField name indexOnStack m_enclosingType m_sourceContext m_pointcutUnresolved m_binding m_lazyPointcut formalName formalName org.aspectj.weaver.bcel.AtAjAttributes org.aspectj.weaver.bcel.AtAjAttributes  argument names used for formal binding\r\n  Set only if discovered as argNames attribute of annotation\r\n  TODO AV - if put outside the if isCodeStyleAspect then we would enable mix style\r\n  we don't need to look for several attribute occurrences since it cannot happen as per JSR175\r\n  there can only be one RuntimeVisible bytecode attribute\r\n  bypass what we have read\r\n  basic semantic check\r\n  the following block will not detect @Pointcut in non @Aspect types for optimization purpose\r\n  already dealt with by ajc...\r\n  FIXME alex optimize, this method struct will gets recreated for advice extraction\r\n  FIXME AVASM\r\n  there can only be one RuntimeVisible bytecode attribute\r\n  FIXME asc should check we aren't adding multiple versions... will do once I get the tests passing again...\r\n  code style declare error   already dealt with by ajc...\r\n  FIXME alex optimize, this method struct will gets recreated for advice extraction\r\n  semantic check - must be in an @Aspect [remove if previous block bypassed in advance]\r\n  there can only be one RuntimeVisible bytecode attribute\r\n  already dealt with by ajc...\r\n  be too silent.\r\n  there can only be one RuntimeVisible bytecode attribute\r\n  semantic check - must be in an @Aspect [remove if previous block bypassed in advance]\r\n  semantic check - advice must be public\r\n  semantic check - advice must not be static\r\n  semantic check for non around advice must return void\r\n  Note: field annotation are for ITD and DEOW - processed at class level directly\r\n  semantic check for inheritance (only one level up)\r\n  empty value means singleton unless inherited\r\n  struct.context.getOffset(), struct.context.getOffset()+1);  FIXME asc see related comment way about about the version...\r\n  so we prepare to do it later...\r\n  could not parse it, ignore the aspect\r\n  could not parse the @AJ perclause - fallback to singleton and issue an error\r\n  we could not parse the pointcut\r\n  we could not parse the type pattern\r\n  , ResolvedPointcutDefinition preResolvedPointcut) {\r\n  first add the declare implements like\r\n  resolves the parent and child parts of the decp\r\n  eg. '@Coloured *' will change from a WildTypePattern to an 'AnyWithAnnotationTypePattern' after this resolution\r\n  not ideal...\r\n  do we have a defaultImpl=xxx.class (ie implementation)\r\n  check public no arg ctor\r\n  then iterate on field interface hierarchy (not object)\r\n  }\r\n  prototyped\r\n  a field hosting the mixin in the target type\r\n  this  joinpoint, staticJoinpoint binding\r\n  parse error\r\n  FIXME AVASM\r\n  this  joinpoint, staticJoinpoint binding\r\n  parse error\r\n  FIXME AVASM\r\n  extract the pointcut and returned type  check that thrownFormal exists as the last parameter in the advice\r\n  exclude the return binding from the pointcut binding since it is an extraArg binding\r\n  joinpoint, staticJoinpoint binding\r\n  return binding\r\n  parse error\r\n  FIXME AVASM\r\n  extract the pointcut and throwned type  check that thrownFormal exists as the last parameter in the advice\r\n  exclude the throwned binding from the pointcut binding since it is an extraArg binding\r\n  joinpoint, staticJoinpoint binding\r\n  return binding\r\n  parse error\r\n  FIXME AVASM\r\n  this  joinpoint, staticJoinpoint binding\r\n  parse error\r\n  FIXME AVASM\r\n  semantic check: the method must return void, or be \"public static boolean\" for if() support\r\n  semantic check: the method must not throw anything\r\n  this  since for it to be resolved, we will need other pointcuts to be registered as well\r\n  parse error\r\n  FIXME AVASM !! bMethod is null here..\r\n  stop\r\n  can be null for abstract pointcut\r\n  can be null for abstract pointcut\r\n  do not resolve binding now but lazily\r\n  cannot parse pointcut\r\n  cannot parse pointcut\r\n  assert debug info was here\r\n  continue;  f.e. when applying advice on advice etc\r\n  excludeIndex = i;\r\n  int excludeIndex = -1;\r\n  FIXME alex deal with exclude index\r\n  No debug info, do we have an annotation value we can rely on?\r\n  sort by index\r\n  prefixes so that we can find types in the same package\r\n  bug 126560\r\n  TODO is it likely to fail in a bad way if f.e. this(jp) etc ?\r\n  FIXME -1,-1 is not good enough\r\n  FIXME -1,-1 is not good enough\r\n  argument names used for formal binding\r\n  Set only if discovered as argNames attribute of annotation\r\n  TODO AV - if put outside the if isCodeStyleAspect then we would enable mix style\r\n  we don't need to look for several attribute occurrences since it cannot happen as per JSR175\r\n  there can only be one RuntimeVisible bytecode attribute\r\n  bypass what we have read\r\n  basic semantic check\r\n  the following block will not detect @Pointcut in non @Aspect types for optimization purpose\r\n  already dealt with by ajc...\r\n  FIXME alex optimize, this method struct will gets recreated for advice extraction\r\n  FIXME AVASM\r\n  there can only be one RuntimeVisible bytecode attribute\r\n  FIXME asc should check we aren't adding multiple versions... will do once I get the tests passing again...\r\n  code style declare error   already dealt with by ajc...\r\n  FIXME alex optimize, this method struct will gets recreated for advice extraction\r\n  semantic check - must be in an @Aspect [remove if previous block bypassed in advance]\r\n  there can only be one RuntimeVisible bytecode attribute\r\n  already dealt with by ajc...\r\n  be too silent.\r\n  there can only be one RuntimeVisible bytecode attribute\r\n  semantic check - must be in an @Aspect [remove if previous block bypassed in advance]\r\n  semantic check - advice must be public\r\n  semantic check - advice must not be static\r\n  semantic check for non around advice must return void\r\n  Note: field annotation are for ITD and DEOW - processed at class level directly\r\n  semantic check for inheritance (only one level up)\r\n  empty value means singleton unless inherited\r\n  struct.context.getOffset(), struct.context.getOffset()+1);  FIXME asc see related comment way about about the version...\r\n  so we prepare to do it later...\r\n  could not parse it, ignore the aspect\r\n  could not parse the @AJ perclause - fallback to singleton and issue an error\r\n  we could not parse the pointcut\r\n  we could not parse the type pattern\r\n  , ResolvedPointcutDefinition preResolvedPointcut) {\r\n  first add the declare implements like\r\n  resolves the parent and child parts of the decp\r\n  eg. '@Coloured *' will change from a WildTypePattern to an 'AnyWithAnnotationTypePattern' after this resolution\r\n  not ideal...\r\n  do we have a defaultImpl=xxx.class (ie implementation)\r\n  check public no arg ctor\r\n  then iterate on field interface hierarchy (not object)\r\n  }\r\n  prototyped\r\n  a field hosting the mixin in the target type\r\n  this  joinpoint, staticJoinpoint binding\r\n  parse error\r\n  FIXME AVASM\r\n  this  joinpoint, staticJoinpoint binding\r\n  parse error\r\n  FIXME AVASM\r\n  extract the pointcut and returned type  check that thrownFormal exists as the last parameter in the advice\r\n  exclude the return binding from the pointcut binding since it is an extraArg binding\r\n  joinpoint, staticJoinpoint binding\r\n  return binding\r\n  parse error\r\n  FIXME AVASM\r\n  extract the pointcut and throwned type  check that thrownFormal exists as the last parameter in the advice\r\n  exclude the throwned binding from the pointcut binding since it is an extraArg binding\r\n  joinpoint, staticJoinpoint binding\r\n  return binding\r\n  parse error\r\n  FIXME AVASM\r\n  this  joinpoint, staticJoinpoint binding\r\n  parse error\r\n  FIXME AVASM\r\n  semantic check: the method must return void, or be \"public static boolean\" for if() support\r\n  semantic check: the method must not throw anything\r\n  this  since for it to be resolved, we will need other pointcuts to be registered as well\r\n  parse error\r\n  FIXME AVASM !! bMethod is null here..\r\n  stop\r\n  can be null for abstract pointcut\r\n  can be null for abstract pointcut\r\n  do not resolve binding now but lazily\r\n  cannot parse pointcut\r\n  cannot parse pointcut\r\n  assert debug info was here\r\n  continue;  f.e. when applying advice on advice etc\r\n  excludeIndex = i;\r\n  int excludeIndex = -1;\r\n  FIXME alex deal with exclude index\r\n  No debug info, do we have an annotation value we can rely on?\r\n  sort by index\r\n  prefixes so that we can find types in the same package\r\n  bug 126560\r\n  TODO is it likely to fail in a bad way if f.e. this(jp) etc ?\r\n  FIXME -1,-1 is not good enough\r\n  FIXME -1,-1 is not good enough\r\n","TypeReferenceLocator":"findElement match match match match matchLevel matchLevelAndReportImportRef matchReportImportRef matchReportReference matchReportReference matchReportReference matchReportReference matchReportReference matchReportReference matchReportReference referenceType reportDeclaration reportDeclaration resolveLevel resolveLevel resolveLevel resolveLevel resolveLevelForType resolveLevelForTypeOrEnclosingTypes toString pattern isDeclarationOfReferencedTypesPattern org.aspectj.org.eclipse.jdt.internal.core.search.matching.TypeReferenceLocator  need exact match to be able to open on type ref\r\n  element that references the type must be included in the enclosing element\r\n  interested in ImportReference\r\n  interested in NameReference & its subtypes\r\n  resolution is needed to find out if it is a type ref\r\n  resolution is needed to find out if it is a type ref\r\n  public int match(MessageSend node, MatchingNodeSet nodeSet) - SKIP IT\r\n  resolution is needed to find out if it is a type ref\r\n  public int match(TypeDeclaration node, MatchingNodeSet nodeSet) - SKIP IT\r\n  null is as if it was \"*\"\r\n  cannot match null name\r\n  can only matches empty pattern\r\n  empty name\r\n  TODO (frederic) implement regular expression match\r\n  verify that in this case binding is static and use declaring class for fields\r\n  resolve and report\r\n  return if this is not necessary to report\r\n  Create search match\r\n  set match raw flag and rule\r\n  binding is raw => only compatible erasure if pattern has type arguments\r\n  Try to find best selection for match\r\n  may happen for static import\r\n  may happen for static import\r\n  for field or method static import, use last but one token\r\n  index now depends on pattern type signature\r\n  report match\r\n  try to match all enclosing types for which the token matches as well.\r\n  TODO (frederic) need to add a test for this case while searching generic types...\r\n  Create search match\r\n  Report match depending on reference type\r\n  Look if some block scope local variable declarations include reference start position\r\n  Set local element to first matching local declaration\r\n  Store other local variable declarations in other elements\r\n  Some local variable declaration are matching\r\n  Report match with local and other elements if any\r\n  reading a field\r\n  =============only type ==============\r\n  ============unbound cases===========\r\n  Create search match to report\r\n  index now depends on pattern type signature\r\n  Look if there's a need to special report for parameterized type\r\n  try to match all enclosing types for which the token matches as well.\r\n  Create search match to report\r\n  index now depends on pattern type signature\r\n  Look if there's a need to special report for parameterized type\r\n  try to match all enclosing types for which the token matches as well\r\n  binding has no type params, compatible erasure if pattern does\r\n  Try to refine accuracy\r\n  impossible match\r\n  Make a special report for parameterized types if necessary\r\n  Look if there's a need to special report for parameterized type\r\n  Report match\r\n  see bug https:  reading a field\r\n  =============only type ==============\r\n  ============unbound cases===========\r\n  second chance with recorded type so far\r\n  index of last bound token is one before the pb token\r\n  original may not be set (bug 71279)\r\n  case of a secondary type\r\n  if (node instanceof ImportReference) - Not called when resolve is true, see MatchingNodeSet.reportMatching(unit)\r\n  check that type is located inside this instance of a package fragment\r\n  reading a field\r\n  must be at least A.x\r\n  reading a local variable\r\n  no type match in it\r\n  =============only type ==============\r\n  ============unbound cases===========\r\n  index of last bound token is one before the pb token\r\n  must be at least A.x\r\n  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.internal.core.search.matching.PatternLocator#matchLevelAndReportImportRef(org.aspectj.org.eclipse.jdt.internal.compiler.ast.ImportReference, org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Binding, org.aspectj.org.eclipse.jdt.internal.core.search.matching.MatchLocator)\r\n */\r\n /* (non-Javadoc)\r\n * Resolve level for type with a given binding.\r\n * This is just an helper to avoid call of method with all parameters...\r\n */\r\n","HtmlDecorator":"decorateHTMLFromInputFiles decorateHTMLFromIPEs decorateHTMLFromIPE constructNestedTypeName decorateHTMLFile addAspectDocumentation insertDeclarationsSummary declsAboveVisibilityExist isAboveVisibility genAccessibility insertDeclarationsDetails findSummaryIndex findDetailsIndex decorateDocWithRel decorateMemberDocumentation generateDeclaredBy generateAffects getRelativePathFromHere generateModifierInformation generateIntroductionSignatures generateSignatures generateSummaryComment generateDetailsComment generateHREFName generateAffectsHREFLink getFormattedComment getProgramElements accept read POINTCUT_DETAIL ADVICE_DETAIL DECLARE_DETAIL ADVICE_SUMMARY POINTCUT_SUMMARY DECLARE_SUMMARY ITD_METHOD_SUMMARY ITD_FIELD_SUMMARY ITD_CONSTRUCTOR_SUMMARY visibleFileList declIDTable rootDir docVisibilityModifier ADVISES ADVISED_BY MATCHED_BY MATCHES_DECLARE DECLARED_ON ASPECT_DECLARATIONS SOFTENS SOFTENED_BY ANNOTATES ANNOTATED_BY USES_POINTCUT POINTCUT_USED_BY org.aspectj.tools.ajdoc.HtmlDecorator  \".\" +\r\n  XXX only one level of nexting\r\n  ---DeclID sits in the .html file ---\r\n  file for the given IProgramElement\r\n  file corresponding to the IProgramElement\r\n  we're still in the file for a parent IPE\r\n  the case with an inner aspect not having the title \"Aspect\"\r\n  add the 'aspect declarations' information against the type\r\n  add the 'annotated by' information against the type\r\n  add the 'advised by' information against the type\r\n  insert the head of the table\r\n  insert the table row accordingly\r\n  insert the entry\r\n  insert the body of the table\r\n  insert the end of the table\r\n  show public classes and members\r\n  show protected and public classes and members\r\n  show package, protected and public classes and members\r\n  show all classes and members\r\n  insert the table heading\r\n  insert the table row accordingly\r\n  If we did this for declare statements we get two repeated lines\r\n  insert the entry\r\n  insert the details\r\n  *this* type (i.e. the advised) is in the package structure.\r\n  form parentClass.nestedAspect.html\r\n  currDecl.getName() and wouldn't both appear in the ajdoc\r\n  for 'matches declare' relationship\r\n  The hrefLink needs to just be the corresponding aspect\r\n  !!! don't replace\r\n  for ensuring that we don't add duplciates\r\n  promote to enclosing\r\n  *this* type (i.e. the advisor) is in the package structure.\r\n  !!! don't replace\r\n  don't care about the token value\r\n  !!!\r\n  string the leading whitespace and '*' characters at the beginning of each line\r\n  }\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n *     Mik Kersten\t  port to AspectJ 1.1+ code base\r\n * ******************************************************************/\r\n","IDOMMember":"getComment getFlags setComment setFlags org.aspectj.org.eclipse.jdt.core.jdom.IDOMMember","ProblemReferenceBinding":"closestMatch problemId shortReadableName closestMatch problemReason org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ProblemReferenceBinding /* API\r\n* Answer the problem id associated with the receiver.\r\n* NoError if the receiver is a valid binding.\r\n*/\r\n","GlobalVariable":"getInitializer getName getTypeName toString typeName name initializer declarationStart initializerStart initExpressionStart initializerLineStart org.aspectj.org.eclipse.jdt.internal.eval.GlobalVariable  positions in the global variable class definition\r\n  line in the global variable class definition\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","ClasspathValidation":"validate project org.aspectj.org.eclipse.jdt.internal.core.ClasspathValidation  project doesn't exist\r\n  remove problems and tasks created  by the builder\r\n  use synchronized block to ensure consistency\r\n  status has been set during POST_CHANGE\r\n  update classpath format problems\r\n  update resolved classpath problems\r\n  ignore this entry\r\n /*flush cycle markers*/\r\n /*cycle*/\r\n /*cycle*/\r\n /*src attach*/\r\n /*\r\n * Validates the raw classpath format and the resolved classpath of this project,\r\n * updating markers if necessary.\r\n */\r\n","DeclareParentsImpl":"getDeclaringType getTargetTypesPattern isExtends isImplements getParentTypes toString getDeclaringType getTargetTypesPattern isExtends isImplements getParentTypes toString declaringType targetTypesPattern parents parentsString firstMissingTypeName isExtends parentsError declaringType targetTypesPattern parents parentsString firstMissingTypeName isExtends parentsError org.aspectj.internal.lang.reflect.DeclareParentsImpl org.aspectj.internal.lang.reflect.DeclareParentsImpl /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareParents#getDeclaringType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareParents#getTargetTypesPattern()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareParents#isExtends()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareParents#isImplements()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareParents#getParentTypes()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareParents#getDeclaringType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareParents#getTargetTypesPattern()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareParents#isExtends()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareParents#isImplements()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.DeclareParents#getParentTypes()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","SelectionJavadocParser":"checkDeprecation commentParse createArgumentReference createFieldReference createMethodReference createTypeReference pushParamName updateDocComment selectionStart selectionEnd selectedNode org.aspectj.org.eclipse.jdt.internal.codeassist.select.SelectionJavadocParser  $NON-NLS-1$\r\n  Create argument as we may need it after\r\n  See if selection is in argument\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  may be > 0 for inner class constructor reference\r\n  $NON-NLS-1$\r\n  Need to create type ref in case it was needed by members\r\n  we got selected node => cancel parse\r\n  $NON-NLS-1$\r\n  See if selection is in one of tokens of qualification\r\n  Store type ref as selected node\r\n  we got selected node => cancel parse\r\n  $NON-NLS-1$\r\n  See if node is concerned by selection\r\n  we got selected node => cancel parse\r\n  $NON-NLS-1$\r\n  See if expression is concerned by selection\r\n /*\r\n\t * Do not parse comment if selection is not included.\r\n\t */\r\n /*\r\n\t * Replace stored Javadoc node with specific selection one.\r\n\t */\r\n /*\r\n\t * Create argument expression and store it if it includes selection.\r\n\t */\r\n /*\r\n\t * Verify if field identifier positions include selection.\r\n\t * If so, create field reference, store it and abort comment parse.\r\n\t * Otherwise return null as we do not need this reference.\r\n\t */\r\n /*\r\n\t * Verify if method identifier positions include selection.\r\n\t * If so, create field reference, store it and abort comment parse.\r\n\t * Otherwise return null as we do not need this reference.\r\n\t */\r\n /*\r\n\t * Create type reference and verify if it includes selection.\r\n\t * If so, store it and abort comment parse.\r\n\t * Otherwise return null as we do not need this reference.\r\n\t */\r\n /*\r\n\t * Push param reference and verify if it includes selection.\r\n\t * If so, store it and abort comment parse.\r\n\t */\r\n /*\r\n\t * Store selected node into doc comment.\r\n\t */\r\n","FieldInstruction":"toString getFieldSize getType getFieldType getFieldName produceStack consumeStack toString getFieldSize getType getFieldType getFieldName produceStack consumeStack org.aspectj.apache.bcel.generic.FieldInstruction org.aspectj.apache.bcel.generic.FieldInstruction  SAME FOR GETFIELD  SAME FOR GETFIELD","PerObjectMap":"org.aspectj.runtime.internal.PerObjectMap org.aspectj.runtime.internal.PerObjectMap org.aspectj.runtime.internal.PerObjectMap /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","RecoveredInitializer":"add add add add add toString updatedFieldDeclaration updateOnClosingBrace updateOnOpeningBrace updateSourceEndIfNecessary localTypes localTypeCount initializerBody org.aspectj.org.eclipse.jdt.internal.compiler.parser.RecoveredInitializer  ignore\r\n  initializer\r\n  non void\r\n  ignore\r\n  ignore\r\n  ignore\r\n  ignore\r\n  ignore\r\n  ignore\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  request to restart\r\n /* default behavior is to delegate recording to parent if any,\r\n\tdo not consider elements passed the known end (if set)\r\n\tit must be belonging to an enclosing element \r\n\t*/\r\n /* consider that if the opening brace was not found, it is there */\r\n /*\r\n * Record a nested block declaration\r\n */\r\n /* local variables inside initializer can only be final and non void */\r\n /* local var can only be final */\r\n /* default behavior is to delegate recording to parent if any,\r\n\tdo not consider elements passed the known end (if set)\r\n\tit must be belonging to an enclosing element \r\n\t*/\r\n /*\r\n * Record a field declaration (act like inside method body)\r\n */\r\n /* do not consider a type starting passed the type end (if set)\r\n\t\tit must be belonging to an enclosing type */\r\n /* method body should have been created */\r\n /*\r\n * Record a local declaration - regular method should have been created a block body\r\n */\r\n /* do not consider a statement starting passed the initializer end (if set)\r\n\t\tit must be belonging to an enclosing type */\r\n /* initializer body should have been created */\r\n /*\r\n * Record a statement - regular method should have been created a block body\r\n */\r\n /* do not consider a type starting passed the type end (if set)\r\n\t\tit must be belonging to an enclosing type */\r\n /* method body should have been created */\r\n /* consider that if the opening brace was not found, it is there */\r\n /*\r\n * A closing brace got consumed, might have closed the current element,\r\n * in which case both the currentElement is exited\r\n */\r\n /*\r\n * An opening brace got consumed, might be the expected opening one of the current element,\r\n * in which case the bodyStart is updated.\r\n */\r\n /*\r\n * Update the declarationSourceEnd of the corresponding parse node\r\n */\r\n","TraceFactory":"getTrace getTraceFactory getBoolean getTrace getTraceFactory getBoolean DEBUG_PROPERTY FACTORY_PROPERTY DEFAULT_FACTORY_NAME debug instance DEBUG_PROPERTY FACTORY_PROPERTY DEFAULT_FACTORY_NAME debug instance org.aspectj.weaver.tools.TraceFactory org.aspectj.weaver.tools.TraceFactory /*\r\n\t\t * Allow user to override default behaviour or specify their own factory \r\n\t\t */\r\n /*\r\n\t\t * Try to load external trace infrastructure using supplied factories\r\n\t\t */\r\n /*\r\n\t\t * Use default trace \r\n\t\t */\r\n /*\r\n\t\t * Allow user to override default behaviour or specify their own factory \r\n\t\t */\r\n /*\r\n\t\t * Try to load external trace infrastructure using supplied factories\r\n\t\t */\r\n /*\r\n\t\t * Use default trace \r\n\t\t */\r\n","ISourceImport":"getDeclarationSourceEnd getDeclarationSourceStart getModifiers org.aspectj.org.eclipse.jdt.internal.compiler.env.ISourceImport","InterTypeMemberFinder":"getField resolveConflicts isVisible methods addPublicITDSFrom getMethods getExactMethod matches matches addInterTypeField addInterTypeMethod interTypeFields interTypeMethods sourceTypeBinding org.aspectj.ajdt.internal.compiler.lookup.InterTypeMemberFinder  XXX may need to get the correct value for second parameter in the future (see #55341)\r\n  ProblemReporter.Ambiguous);\r\n  at least package visible\r\n    PLUS: any public ITDs made on interfaces that I implement\r\n  XXX conflicts\r\n  An intertype declaration may override an inherited member (Bug#50776)\r\n  \r\n  System.err.println(\"adding: \" + binding + \" to \" + this);\r\n  this will return fast if its already been done.\r\n  this always means we should remove the existing method\r\n  System.err.println(\"    left: \" + Arrays.asList(sourceTypeBinding.methods));\r\n  System.err.println(\"adding: \" + binding + \" to \" + sourceTypeBinding);\r\n /* *******************************************************************\r\n * Copyright (c) 2002,2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n *     Andy Clement - upgrade to support fields targetting generic types\r\n * ******************************************************************/\r\n","SimpleDelta":"added changed getFlags getKind modifiers removed superTypes toDebugString toDebugString toString kind changeFlags org.aspectj.org.eclipse.jdt.internal.core.SimpleDelta  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n\t * @see IJavaElementDelta#getKind()\r\n\t */\r\n /*\r\n\t * @see IJavaElementDelta#getFlags()\r\n\t */\r\n /*\r\n\t * Marks this delta as added\r\n\t */\r\n /*\r\n\t * Marks this delta as changed with the given change flag\r\n\t */\r\n /*\r\n\t * @see IJavaElementDelta#getFlags()\r\n\t */\r\n /*\r\n\t * @see IJavaElementDelta#getKind()\r\n\t */\r\n /*\r\n\t * Mark this delta has a having a modifiers change\r\n\t */\r\n /*\r\n\t * Marks this delta as removed\r\n\t */\r\n /*\r\n\t * Mark this delta has a having a super type change\r\n\t */\r\n","ImportMatchLocatorParser":"consumeStaticImportOnDemandDeclarationName consumeSingleStaticImportDeclarationName consumeSingleTypeImportDeclarationName consumeTypeImportOnDemandDeclarationName org.aspectj.org.eclipse.jdt.internal.core.search.matching.ImportMatchLocatorParser","IMethod":"getElementName getExceptionTypes getTypeParameterSignatures getTypeParameters getNumberOfParameters getKey getParameterNames getParameterTypes getRawParameterNames getReturnType getSignature getTypeParameter isConstructor isMainMethod isResolved isSimilar org.aspectj.org.eclipse.jdt.core.IMethod","SourceRange":"equals getLength getOffset hashCode toString offset length org.aspectj.org.eclipse.jdt.internal.core.SourceRange  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n * @see Object#equals(Object)\r\n */\r\n /*\r\n * @see Object#hashCode()\r\n */\r\n","ArrayAllocationExpression":"analyseCode generateCode printExpression resolveType traverse type dimensions initializer org.aspectj.org.eclipse.jdt.internal.compiler.ast.ArrayAllocationExpression  last ones may be nulled as in new int[4][5][][]\r\n  implicit dim, no further explict after this point\r\n  Multi-dimensional array\r\n  Mono-dimensional array\r\n  array allocation\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  will check for null after dimensions are checked\r\n  check the validity of the dimension syntax (and test for all null dimensions)\r\n  should not have an empty dimension before an non-empty one\r\n  allow new List<?>[5] - only check for generic array when no initializer, since also checked inside initializer resolution\r\n  when an initializer is given, no dimension must be specified\r\n  dimensions resolution\r\n  check the initializer\r\n  building the array binding\r\n","FieldGet":"getType toString accept getField getType toString accept getField field resolvedType field resolvedType org.aspectj.weaver.ast.FieldGet org.aspectj.weaver.ast.FieldGet /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","FieldGen":"setValue wipeValue checkType getField addConstant getSignature getInitialValue toString copy setValue wipeValue checkType getField addConstant getSignature getInitialValue toString copy value value org.aspectj.apache.bcel.generic.FieldGen org.aspectj.apache.bcel.generic.FieldGen  Short cuts to constant pool\r\n  Short cuts to constant pool\r\n","LookupEnvironment":"askForType askForType buildTypeBindings cacheBinaryType cacheBinaryType cacheMissingBinaryType completeTypeBindings completeTypeBindings completeTypeBindings computeBoxingType computePackageFrom convertToParameterizedType convertToRawType convertUnresolvedBinaryToRawType createAnnotation createArrayType createBinaryTypeFrom createBinaryTypeFrom createPackage createParameterizedGenericMethod createParameterizedGenericMethod createParameterizedType createRawType createWildcard getAccessRestriction getCachedType getPackage0 getResolvedType getTopLevelPackage getType getTypeArgumentsFromSignature getTypeFromCompoundName getTypeFromConstantPoolName getTypeFromSignature getTypeFromTypeSignature getTypeFromVariantTypeSignature isPackage methodVerifier reset setAccessRestriction updateCaches BUILD_FIELDS_AND_METHODS BUILD_TYPE_HIERARCHY CHECK_AND_SET_IMPORTS CONNECT_TYPE_HIERARCHY TheNotFoundPackage TheNotFoundType accessRestrictions defaultImports defaultPackage knownPackages lastCompletedUnitIndex lastUnitIndex nameEnvironment globalOptions problemReporter classFilePool stepCompleted typeRequestor uniqueArrayBindings uniqueParameterizedTypeBindings uniqueRawTypeBindings uniqueWildcardBindings uniqueParameterizedGenericMethodBindings unitBeingCompleted missingClassFileLocation units verifier org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment  AspectJ Extension - raised visibility\r\n  End AspectJ Extension\r\n  AspectJ Extension - raised visibility\r\n  AspectJ Extension - raised visibility\r\n  only set while completing units\r\n  only set when resolving certain references, to help locating problems\r\n  AspectJ Extension - raised visibility\r\n  assume the default package always exists\r\n  start off the most common 1 dimension array @ 50\r\n  the type was found as a source model\r\n  the type was found as a .java file, try to build it then search the cache\r\n  the type was found as a .class file\r\n  the type was found as a source model\r\n  the type was found as a .java file, try to build it then search the cache\r\n  the type was found as a .class file\r\n  only add the binary type if its not already in the cache\r\n  the type already exists & can be retrieved from the cache\r\n  report the missing class file first\r\n  create a proxy for the missing BinaryType\r\n  make Object be its superclass - it could in turn be missing as well\r\n  create a proxy for the missing Object type\r\n  release unnecessary reference to the parsed unit\r\n  parsing errors were too severe\r\n  until they too are completely processed.\r\n  parsing errors were too severe\r\n  allow indirect unboxing conversion for wildcards and type parameters\r\n  Object is not generic\r\n  only recursive call to enclosing type can find parameterizedType with arguments\r\n  Object is not generic\r\n  only recursive call to enclosing type can find parameterizedType with arguments\r\n  variation for unresolved types in binaries (consider generic type as raw)\r\n  cache local type arrays with the local type itself\r\n  find the array binding cache for this dimension\r\n  find the cached array binding for this leaf component type (if any)\r\n  no matching array, but space left\r\n  no matching array, no space left\r\n  resolve any array bindings which reference the unresolvedType\r\n  sanity check... at this point the cache should ONLY contain unresolved types\r\n  but because its enclosingType is resolved while its created (call to BinaryTypeBinding constructor), its replaced with a source type\r\n  update reference to unresolved binding after having read classfile (knows whether generic for raw conversion)\r\n  so not all types cause collision errors when they're created even though the package did exist\r\n  we need to check whenever a package is created\r\n  cached info is array of already created parameterized types for this type\r\n  iterate existing parameterized for reusing one with same type arguments if any\r\n  grow cache ?\r\n  add new binding\r\n  cached info is array of already created parameterized types for this type\r\n  all arguments match, reuse current\r\n  iterate existing parameterized for reusing one with same type arguments if any\r\n  grow cache ?\r\n  add new binding\r\n  cached info is array of already created parameterized types for this type\r\n  remain of unresolved type\r\n  would be an error situation (from unresolved binaries)\r\n  all arguments match, reuse current\r\n  iterate existing parameterized for reusing one with same type arguments if any\r\n  grow cache ?\r\n  add new binding\r\n  cached info is array of already created raw types for this type\r\n  remain of unresolved type\r\n  all enclosing type match, reuse current\r\n  iterate existing parameterized for reusing one with same type arguments if any\r\n  grow cache ?\r\n  add new binding\r\n  pseudo wildcard denoting composite bounds for lub computation\r\n  cached info is array of already created wildcard  types for this type\r\n  remain of unresolved type\r\n  all match, reuse current\r\n  iterate existing wildcards for reusing one with same information if any\r\n  grow cache ?\r\n  add new binding\r\n  create a proxy for the missing BinaryType\r\n  saves asking the oracle next time\r\n  collides with a known package... should not call this method in such a case\r\n  no raw conversion for now\r\n  End AspectJ Extension\r\n  skip '>'\r\n  check raw type, only for resolved types\r\n  create a proxy for the missing BinaryType\r\n  Just switch on signature[start] - the L case is the else\r\n  skip leading 'L' or 'T'\r\n  TypeArgs = '<' VariantTypeSignature VariantTypeSignatures '>'\r\n  do not trigger resolution of variables\r\n  cannot reach this, since previous problem will abort compilation\r\n  type must be a ReferenceBinding at this point, cannot be a BaseTypeBinding or ArrayTypeBinding\r\n  convert needed if read some static member type\r\n  skip '.'\r\n  skip '<'\r\n  skip ';'\r\n  ? super aType\r\n  ? extends aType\r\n  ?\r\n  or '*'\r\n  covariance only if sourceLevel is >= 1.5\r\n  assume the default package always exists\r\n  in case AbortException occurred\r\n  update the key\r\n  hashCode is based on compoundName so this works - cannot be raw since type of parameterized type\r\n  must prevent 2 entries so == still works (1 containing the unresolvedType and the other containing the resolvedType)\r\n  update the key\r\n  hashCode is based on compoundName so this works\r\n /*\r\n *  Used to guarantee annotation identity.\r\n */\r\n /*\r\n *  Used to guarantee array type identity.\r\n */\r\n /* Answer the type corresponding to the compoundName.\r\n* Ask the name environment for the type if its not in the cache.\r\n* Fail with a classpath error if the type cannot be found.\r\n*/\r\n /*no extra bound*/\r\n /*no extra bound*/\r\n /*no extra bound*/\r\n /* Ask the oracle if a package exists named name in the package named compoundName.\r\n*/\r\n","NullInfoRegistry":"add markAsComparedEqualToNonNull markAsDefinitelyNonNull markAsDefinitelyNull markAsDefinitelyUnknown mitigateNullInfoOf toString org.aspectj.org.eclipse.jdt.internal.compiler.flow.NullInfoRegistry  use extra vector\r\n  might need to grow the arrays\r\n  set protected non null\r\n  position is zero-based\r\n  protected from non-object locals in calling methods\r\n  use extra vector\r\n  might need to grow the arrays\r\n  set assigned non null\r\n  position is zero-based\r\n  protected from non-object locals in calling methods\r\n  use extra vector\r\n  might need to grow the arrays\r\n  set assigned null\r\n  position is zero-based\r\n  protected from non-object locals in calling methods\r\n  PREMATURE project protected non null onto something else\r\n  use extra vector\r\n  might need to grow the arrays\r\n  set assigned unknown\r\n  position is zero-based\r\n  protected from non-object locals in calling methods\r\n  prot. non null\r\n  clear incompatible protections\r\n  prot. null\r\n  null or unknown\r\n  TODO (maxime) code extensive implementation tests\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","InterTypeScope":"getAnyAliasForTypeVariableBinding makeSourceTypeBinding invocationType addDepth findTypeVariable getRecoveryAliases onType aliases usedAliases org.aspectj.ajdt.internal.compiler.lookup.InterTypeScope  Used later when reconstructing the resolved member\r\n  Problem will have already been reported, cant ITD on a type variable.\r\n  this method depends on the fact that BinaryTypeBinding extends SourceTypeBinding\r\n  Inside generic aspect, might want the type var attached to us\r\n /* real type variable > alias letter */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","Repository":"getRepository setRepository lookupClass lookupClassFile clearCache addClass removeClass getSuperClasses getSuperClasses getInterfaces instanceOf instanceOf implementationOf implementationOf storeClass removeClass findClass loadClass loadClass clear getRepository setRepository lookupClass lookupClassFile clearCache addClass removeClass getSuperClasses getSuperClasses getInterfaces instanceOf instanceOf implementationOf implementationOf storeClass removeClass findClass loadClass loadClass clear _repository _repository org.aspectj.apache.bcel.Repository org.aspectj.apache.bcel.util.Repository org.aspectj.apache.bcel.Repository org.aspectj.apache.bcel.util.Repository","SelectionOnFieldReference":"printExpression resolveType org.aspectj.org.eclipse.jdt.internal.codeassist.select.SelectionOnFieldReference  $NON-NLS-1$\r\n  tolerate some error cases\r\n","WeakHashSetOfCharArray":"equals hashCode toString add addValue cleanupGarbageCollectedValues contains get rehash remove size toString equals hashCode toString add addValue cleanupGarbageCollectedValues contains get rehash remove size toString hashCode values elementSize threshold referenceQueue hashCode values elementSize threshold referenceQueue org.aspectj.org.eclipse.jdt.internal.compiler.util.WeakHashSetOfCharArray org.aspectj.org.eclipse.jdt.internal.core.util.WeakHashSetOfCharArray  $NON-NLS-1$    $NON-NLS-1$   number of elements in the table\r\n  size represents the expected number of elements\r\n  assumes the threshold is never equal to the size of the table\r\n  assumes the threshold is never equal to the size of the table\r\n  replace the value at index with the last value with the same hash\r\n  double the number of expected elements\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$    $NON-NLS-1$   number of elements in the table\r\n  size represents the expected number of elements\r\n  assumes the threshold is never equal to the size of the table\r\n  assumes the threshold is never equal to the size of the table\r\n  replace the value at index with the last value with the same hash\r\n  double the number of expected elements\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n\t * Adds the given char array to this set.\r\n\t * If a char array that is equals to the given char array already exists, do nothing.\r\n\t * Returns the existing char array or the new char array if not found.\r\n\t */\r\n /*\r\n\t * Return the char array that is in this set and that is equals to the given char array.\r\n\t * Return null if not found.\r\n\t */\r\n /*\r\n\t * Removes the char array that is in this set and that is equals to the given char array.\r\n\t * Return the char array that was in the set, or null if not found.\r\n\t */\r\n /*\r\n\t * Adds the given char array to this set.\r\n\t * If a char array that is equals to the given char array already exists, do nothing.\r\n\t * Returns the existing char array or the new char array if not found.\r\n\t */\r\n /*\r\n\t * Return the char array that is in this set and that is equals to the given char array.\r\n\t * Return null if not found.\r\n\t */\r\n /*\r\n\t * Removes the char array that is in this set and that is equals to the given char array.\r\n\t * Return the char array that was in the set, or null if not found.\r\n\t */\r\n","DefaultProblem":"errorReportSource getArguments getCategoryID getID getInternalCategoryMessage getMarkerType getMessage getOriginatingFileName getSourceEnd getSourceColumnNumber getSourceLineNumber getSourceStart isError isWarning setOriginatingFileName setSourceEnd setSourceLineNumber setSourceStart toString setSeeAlsoProblems seeAlso getSupplementaryMessageInfo setSupplementaryMessageInfo fileName id startPosition endPosition line column severity arguments message seeAlso supplementaryInfo MARKER_TYPE_PROBLEM MARKER_TYPE_TASK EMPTY_VALUES org.aspectj.org.eclipse.jdt.internal.compiler.problem.DefaultProblem  AspectJ Extension\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  sanity .....\r\n  expand to line limits\r\n  trim left and right spaces  copy source\r\n  $NON-NLS-1$\r\n  compute underline\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  AspectJ Extension\r\n /*\r\n * Helper method: checks the severity to see if the Error bit is set.\r\n * @return boolean\r\n */\r\n /*\r\n * Helper method: checks the severity to see if the Error bit is not set.\r\n * @return boolean\r\n */\r\n","FieldGetCall":"accept getArgs getMethod getField accept getArgs getMethod getField field method args field method args org.aspectj.weaver.ast.FieldGetCall org.aspectj.weaver.ast.FieldGetCall  assert m.return value is boolean\r\n  assert m.return value is boolean\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","RET":"dump getLength getIndex setIndex toString getType dump getLength getIndex setIndex toString getType wide index wide index org.aspectj.apache.bcel.generic.RET org.aspectj.apache.bcel.generic.RET  index to local variable containg the return address\r\n  index to local variable containg the return address\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n","BasicTokenSource":"getIndex setIndex next peek peek toString makeTokenSource makeString makeString getSourceContext setSourceContext getIndex setIndex next peek peek toString makeTokenSource makeString makeString getSourceContext setSourceContext index tokens sourceContext index tokens sourceContext org.aspectj.weaver.patterns.BasicTokenSource org.aspectj.weaver.patterns.BasicTokenSource  could be '...'\r\n  '...'\r\n  fall-through\r\n  Convenience, maybe just for testing\r\n  slightly inefficient ;-)\r\n  could be '...'\r\n  '...'\r\n  fall-through\r\n  Convenience, maybe just for testing\r\n  slightly inefficient ;-)\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","NameEnvironmentAnswer":"getAccessRestriction getBinaryType getCompilationUnit getSourceTypes isBinaryType isCompilationUnit isSourceType ignoreIfBetter isBetter binaryType compilationUnit sourceTypes accessRestriction org.aspectj.org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer  only one of the three can be set\r\n /*\r\n\t * Returns whether this answer is better than the other awswer.\r\n\t * (accessible is better than discouraged, which is better than\r\n\t * non-accessible)\r\n\t */\r\n","InterTypeConstructorDeclarationImpl":"getParameterTypes getGenericParameterTypes getExceptionTypes toString getParameterTypes getGenericParameterTypes getExceptionTypes toString baseMethod baseMethod org.aspectj.internal.lang.reflect.InterTypeConstructorDeclarationImpl org.aspectj.internal.lang.reflect.InterTypeConstructorDeclarationImpl /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeConstructorDeclaration#getParameters()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeConstructorDeclaration#getGenericParameters()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeConstructorDeclaration#getDeclaredExceptionTypes()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeConstructorDeclaration#getParameters()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeConstructorDeclaration#getGenericParameters()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.InterTypeConstructorDeclaration#getDeclaredExceptionTypes()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","RelationshipMap":"setHierarchy get get get get get remove removeAll put put put clear getEntries setHierarchy get get get get get remove removeAll put put put clear getEntries serialVersionUID serialVersionUID org.aspectj.asm.internal.RelationshipMap org.aspectj.asm.internal.RelationshipMap  after (either the kind or the name or the dynamictests setting don't match)\r\n  bug?\r\n  Is this a bug, will it give us double entries?\r\n  after (either the kind or the name or the dynamictests setting don't match)\r\n  bug?\r\n  Is this a bug, will it give us double entries?\r\n /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n * ******************************************************************/\r\n","Index":"isMatch addIndexEntry containerRelativePath getIndexFile hasChanged query queryDocumentNames remove save startQuery stopQuery toString containerPath monitor diskIndex memoryIndex MATCH_RULE_INDEX_MASK org.aspectj.org.eclipse.jdt.internal.core.index.Index  First test camel case if necessary\r\n  need to mask some bits of pattern rule (bug 79790)\r\n  fall through prefix match if camel case failed\r\n  fall through prefix match if camel case failed\r\n  $NON-NLS-1$   must own the write lock of the monitor\r\n  reclaim space if the MemoryIndex was very BIG\r\n  $NON-NLS-1$\r\n","IEnclosingMethodAttribute":"getEnclosingClass getEnclosingClassIndex getMethodDescriptor getMethodDescriptorIndex getMethodName getMethodNameIndex getMethodNameAndTypeIndex org.aspectj.org.eclipse.jdt.core.util.IEnclosingMethodAttribute","ResolvedBinaryMethod":"getKey isResolved toStringInfo unresolved uniqueKey org.aspectj.org.eclipse.jdt.internal.core.ResolvedBinaryMethod  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n\t * See class comments.\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.core.BinaryMethod#getKey()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.IMethod#isResolved()\r\n\t */\r\n","JarEntryResource":"clone equals getEntryName getFullPath getName getParent getPackageFragmentRoot getZipFile hashCode isReadOnly setParent parent simpleName org.aspectj.org.eclipse.jdt.internal.core.JarEntryResource  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","ClassFilePool":"newInstance release acquire reset POOL_SIZE classFiles org.aspectj.org.eclipse.jdt.internal.compiler.ClassFilePool  prevent instantiation\r\n","Version":"getTime main getTime main DEVELOPMENT NOTIME text time_text time SIMPLE_DATE_FORMAT DEVELOPMENT NOTIME text time_text time SIMPLE_DATE_FORMAT org.aspectj.bridge.Version org.aspectj.bridge.Version  -1 == uninitialized\r\n  if not DEVELOPMENT version, read time text using format used to set time\r\n  -1 == uninitialized\r\n  if not DEVELOPMENT version, read time text using format used to set time\r\n /* ********************************************************************\r\n * Copyright (c) 1998-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n * \r\n * Contributors:\r\n *     Xerox/PARC     initial implementation\r\n * *******************************************************************/\r\n /* ********************************************************************\r\n * Copyright (c) 1998-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n * \r\n * Contributors:\r\n *     Xerox/PARC     initial implementation\r\n * *******************************************************************/\r\n","DocException":"serialVersionUID org.aspectj.tools.ajdoc.DocException /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andrew Huff     initial implementation \r\n * ******************************************************************/\r\n","InstructionConstants":"NOP ACONST_NULL ICONST_M1 ICONST_0 ICONST_1 ICONST_2 ICONST_3 ICONST_4 ICONST_5 LCONST_0 LCONST_1 FCONST_0 FCONST_1 FCONST_2 DCONST_0 DCONST_1 IALOAD LALOAD FALOAD DALOAD AALOAD BALOAD CALOAD SALOAD IASTORE LASTORE FASTORE DASTORE AASTORE BASTORE CASTORE SASTORE POP POP2 DUP DUP_X1 DUP_X2 DUP2 DUP2_X1 DUP2_X2 SWAP IADD LADD FADD DADD ISUB LSUB FSUB DSUB IMUL LMUL FMUL DMUL IDIV LDIV FDIV DDIV IREM LREM FREM DREM INEG LNEG FNEG DNEG ISHL LSHL ISHR LSHR IUSHR LUSHR IAND LAND IOR LOR IXOR LXOR I2L I2F I2D L2I L2F L2D F2I F2L F2D D2I D2L D2F I2B I2C I2S LCMP FCMPL FCMPG DCMPL DCMPG IRETURN LRETURN FRETURN DRETURN ARETURN RETURN ARRAYLENGTH ATHROW MONITORENTER MONITOREXIT IMPDEP1 IMPDEP2 THIS ALOAD_0 ALOAD_1 ALOAD_2 ALOAD_3 ILOAD_0 ILOAD_1 ILOAD_2 ILOAD_3 DLOAD_0 DLOAD_1 DLOAD_2 DLOAD_3 FLOAD_0 FLOAD_1 FLOAD_2 FLOAD_3 LLOAD_0 LLOAD_1 LLOAD_2 LLOAD_3 ASTORE_0 ASTORE_1 ASTORE_2 ASTORE_3 ISTORE_0 ISTORE_1 ISTORE_2 ISTORE_3 LSTORE_0 LSTORE_1 LSTORE_2 LSTORE_3 FSTORE_0 FSTORE_1 FSTORE_2 FSTORE_3 DSTORE_0 DSTORE_1 DSTORE_2 DSTORE_3 INSTRUCTIONS bla NOP ACONST_NULL ICONST_M1 ICONST_0 ICONST_1 ICONST_2 ICONST_3 ICONST_4 ICONST_5 LCONST_0 LCONST_1 FCONST_0 FCONST_1 FCONST_2 DCONST_0 DCONST_1 IALOAD LALOAD FALOAD DALOAD AALOAD BALOAD CALOAD SALOAD IASTORE LASTORE FASTORE DASTORE AASTORE BASTORE CASTORE SASTORE POP POP2 DUP DUP_X1 DUP_X2 DUP2 DUP2_X1 DUP2_X2 SWAP IADD LADD FADD DADD ISUB LSUB FSUB DSUB IMUL LMUL FMUL DMUL IDIV LDIV FDIV DDIV IREM LREM FREM DREM INEG LNEG FNEG DNEG ISHL LSHL ISHR LSHR IUSHR LUSHR IAND LAND IOR LOR IXOR LXOR I2L I2F I2D L2I L2F L2D F2I F2L F2D D2I D2L D2F I2B I2C I2S LCMP FCMPL FCMPG DCMPL DCMPG IRETURN LRETURN FRETURN DRETURN ARETURN RETURN ARRAYLENGTH ATHROW MONITORENTER MONITOREXIT IMPDEP1 IMPDEP2 THIS ALOAD_0 ALOAD_1 ALOAD_2 ALOAD_3 ILOAD_0 ILOAD_1 ILOAD_2 ILOAD_3 DLOAD_0 DLOAD_1 DLOAD_2 DLOAD_3 FLOAD_0 FLOAD_1 FLOAD_2 FLOAD_3 LLOAD_0 LLOAD_1 LLOAD_2 LLOAD_3 ASTORE_0 ASTORE_1 ASTORE_2 ASTORE_3 ISTORE_0 ISTORE_1 ISTORE_2 ISTORE_3 LSTORE_0 LSTORE_1 LSTORE_2 LSTORE_3 FSTORE_0 FSTORE_1 FSTORE_2 FSTORE_3 DSTORE_0 DSTORE_1 DSTORE_2 DSTORE_3 INSTRUCTIONS bla org.aspectj.apache.bcel.generic.InstructionConstants org.aspectj.apache.bcel.generic.InstructionConstants  for these constants will cause an exception\r\n  for these constants will cause an exception\r\n","CodeSnippetParsingUtil":"getRecordedParsingInformation parseClassBodyDeclarations parseClassBodyDeclarations parseCompilationUnit parseExpression parseExpression parseStatements parseStatements recordedParsingInformation org.aspectj.org.eclipse.jdt.internal.core.util.CodeSnippetParsingUtil  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  if initial diet parse did not work, no need to dig into method bodies.\r\n  real parse of the method....\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","FieldSignatureImpl":"getFieldType createToString getField getFieldType createToString getField getFieldType createToString getField fieldType field fieldType field fieldType field org.aspectj.runtime.reflect.FieldSignatureImpl org.aspectj.runtime.reflect.FieldSignatureImpl org.aspectj.runtime.reflect.FieldSignatureImpl  nothing we can do, caller will see null\r\n  nothing we can do, caller will see null\r\n  nothing we can do, caller will see null\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.runtime.reflect.MemberSignatureImpl#createAccessibleObject()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.runtime.reflect.MemberSignatureImpl#createAccessibleObject()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.runtime.reflect.MemberSignatureImpl#createAccessibleObject()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","RecoveredLocalVariable":"add parseTree sourceEnd toString updatedStatement updateOnClosingBrace updateOnOpeningBrace updateParseTree updateSourceEndIfNecessary localDeclaration alreadyCompletedLocalInitialization org.aspectj.org.eclipse.jdt.internal.compiler.parser.RecoveredLocalVariable  $NON-NLS-1$\r\n  was an array initializer\r\n  no update is necessary\t(array initializer)\r\n  might be an array initializer\r\n /*\r\n * Record an expression statement if local variable is expecting an initialization expression. \r\n */\r\n /* \r\n * Answer the associated parsed structure\r\n */\r\n /*\r\n * Answer the very source end of the corresponding parse node\r\n */\r\n /*\r\n * A closing brace got consumed, might have closed the current element,\r\n * in which case both the currentElement is exited.\r\n *\r\n * Fields have no associated braces, thus if matches, then update parent.\r\n */\r\n /*\r\n * An opening brace got consumed, might be the expected opening one of the current element,\r\n * in which case the bodyStart is updated.\r\n */\r\n /*\r\n * Update the declarationSourceEnd of the corresponding parse node\r\n */\r\n","StringLiteralConcatenation":"extendsWith printExpression source traverse INITIAL_SIZE literals counter org.aspectj.org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation  resize\r\n  uddate the source\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","IDOMImport":"getName isOnDemand getFlags setFlags setName org.aspectj.org.eclipse.jdt.core.jdom.IDOMImport","BuildConfigEditor":"openFile org.aspectj.ajde.ui.BuildConfigEditor /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","BindingPattern":"getFormalIndex getFormalIndex org.aspectj.weaver.patterns.BindingPattern org.aspectj.weaver.patterns.BindingPattern /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","AjASTConverter":"convert convert convert updateString convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convertToFieldDeclaration convertToVariableDeclarationExpression convertToSingleVariableDeclaration convertToVariableDeclarationFragment convertToVariableDeclarationFragment convertToVariableDeclarationFragment convertToVariableDeclarationStatement convertType createComment createFakeEmptyStatement createModifier getOperatorFor getPrimitiveTypeCode isPrimitiveType lookupForScopes lookupScope recordName recordNodes recordNodes recordPendingNameScopeResolution recordPendingThisExpressionScopeResolution retrieveEndingSemiColonPosition retrieveEndOfDimensionsPosition retrieveEndOfElementTypeNamePosition retrieveEndOfRightParenthesisPosition retrieveExtraDimension retrieveIdentifierAndSetPositions retrieveIdentifierEndPosition retrievePositionBeforeNextCommaOrSemiColon retrieveProperRightBracketPosition retrieveRightBraceOrSemiColonPosition retrieveRightBrace retrieveRightBracketPosition retrieveSemiColonPosition retrieveStartBlockPosition retrieveStartingCatchPosition setAST setModifiers setModifiers setModifiers setModifiers setModifiers setModifiers setModifiers setModifiers setModifiers setModifiers setModifiers setModifiers setModifiers setModifiers setModifiers setQualifiedNameNameAndSourceRanges setQualifiedNameNameAndSourceRanges setTypeNameForAnnotation setTypeForField setTypeForAroundAdviceDeclaration setTypeForMethodDeclaration setTypeForMethodDeclaration setTypeForSingleVariableDeclaration setTypeForVariableDeclarationExpression setTypeForVariableDeclarationStatement updateInnerPositions org.aspectj.org.eclipse.jdt.core.dom.AjASTConverter  ajh02: method added\r\n  set the returnType\r\n  get the positions of the right parenthesis\r\n  set its javadoc, parameters, throws, pointcut and body\r\n  syntax error in this advice declaration\r\n  try to get the best end position\r\n  The javadoc comment is now got from list store in compilation unit declaration\r\n    the modifiers are not set on the correct object.\r\n  for ITD's use the declaredSelector\r\n  get the positions of the right parenthesis\r\n  set the return type to VOID\r\n  try to get the best end position\r\n  syntax error in this method declaration\r\n  The javadoc comment is now got from list store in compilation unit declaration\r\n  is this line needed?\r\n  ajh02: is this line needed?\r\n  ajh02: method added\r\n  The javadoc comment is now got from list store in compilation unit declaration\r\n  rather than a huge if.elseif..elseif.. thing\r\n  ajh02: default stub until I make all the concrete PointcutDesignator types\r\n  the different weaver TypePattern's\r\n  The javadoc comment is now got from list store in compilation unit declaration\r\n  remove the ellipsis from the type source end\r\n  we can create a new FieldDeclaration\r\n  We retrieve the existing fieldDeclaration to add the new VariableDeclarationFragment\r\n  initializer.setJavadoc(convert(oldInitializer.javadoc));\r\n  Parse comments\r\n  There is no node corresponding to the package declaration\r\n  we know that we have at least one initialization\r\n  resolve member and method references binding\r\n  resolve member and method references binding\r\n  cannot be reached\r\n  There is no source associated with an implicit this\r\n    the type references level.\r\n  QualifiedName\r\n  ajh02: method added\r\n  this is either an ArrayTypeReference or a SingleTypeReference\r\n  PR http:  need to find out if this is an array type of primitive types or not\r\n  store keys for inner types\r\n  Create comment node\r\n  Line comment have negative start and end position\r\n  Block comment have positive start position\r\n  Javadoc comments have positive end position\r\n  cannot be reached\r\n  resolve member and method references binding\r\n  get compiler node and record nodes\r\n  get compiler node and record nodes\r\n  get type ref\r\n  TODO (frederic) remove following line to fix bug https:  record name and qualifier\r\n  record nodes\r\n  Resolve parameters\r\n  get compiler node and record nodes\r\n  Replace qualifier to have all nodes recorded\r\n  166\r\n  166\r\n  110\r\n  110\r\n  225\r\n  we have an annotation\r\n  ajh02: method added\r\n  ajh02: method added\r\n  we have an annotation\r\n  we have an annotation\r\n  remove AccInterface flags\r\n  we have an annotation\r\n  we have an annotation\r\n  QualifiedName\r\n  update positions of the component types of the array type\r\n  cut the child loose from its parent (without creating garbage)\r\n  the dimensions are after the name so the type of the fieldDeclaration is a simpleType\r\n  cut the child loose from its parent (without creating garbage)\r\n  ajh02: method added\r\n  cut the child loose from its parent (without creating garbage)\r\n  the dimensions are after the name so the type of the fieldDeclaration is a simpleType\r\n  cut the child loose from its parent (without creating garbage)\r\n  cut the child loose from its parent (without creating garbage)\r\n  the dimensions are after the name so the type of the fieldDeclaration is a simpleType\r\n  cut the child loose from its parent (without creating garbage)\r\n  cut the child loose from its parent (without creating garbage)\r\n  the dimensions are after the name so the type of the fieldDeclaration is a simpleType\r\n  cut the child loose from its parent (without creating garbage)\r\n  cut the child loose from its parent (without creating garbage)\r\n  the dimensions are after the name so the type of the fieldDeclaration is a simpleType\r\n  cut the child loose from its parent (without creating garbage)\r\n  need to set positions for intermediate array type see 42839\r\n /*\r\n\t\t\t\t * start or end can be equal to -1 if we have an interface's method.\r\n\t\t\t\t */\r\n /*\r\n\t\t\t\t * start or end can be equal to -1 if we have an interface's method.\r\n\t\t\t\t */\r\n /*\r\n\t\t\t\t\t * start or end can be equal to -1 if we have an interface's method.\r\n\t\t\t\t\t */\r\n /*\r\n\t\t\t\t * start or end can be equal to -1 if we have an interface's method.\r\n\t\t\t\t */\r\n /*\r\n\t\t * There is extra work to do to set the proper type positions See PR http://bugs.eclipse.org/bugs/show_bug.cgi?id=23284\r\n\t\t */\r\n /*\r\n\t * Internal use only Used to convert class body declarations\r\n\t */\r\n /*\r\n\t\t * There is extra work to do to set the proper type positions See PR http://bugs.eclipse.org/bugs/show_bug.cgi?id=23284\r\n\t\t */\r\n /*\r\n\t * This method is used to set the right end position for expression statement. The actual AST nodes don't include the trailing\r\n\t * semicolon. This method fixes the length of the corresponding node.\r\n\t */\r\n","QualifiedName":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getQualifier setQualifier getName setName appendName memSize treeSize QUALIFIER_PROPERTY NAME_PROPERTY PROPERTY_DESCRIPTORS qualifier name org.aspectj.org.eclipse.jdt.core.dom.QualifiedName  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  lazy init must be thread-safe for readers\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on Name.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","ProgramElement":"getModifiers getAccessibility setDeclaringType getDeclaringType getPackageName getKind isCode getSourceLocation setSourceLocation getMessage setMessage getParent setParent isMemberKind setRunnable isRunnable isImplementor setImplementor isOverrider setOverrider getRelations setRelations getFormalComment toString genModifiers genAccessibility getBytecodeName getBytecodeSignature setBytecodeName setBytecodeSignature getSourceSignature setSourceSignature setKind setCorrespondingType getCorrespondingType getCorrespondingType getName getChildren setChildren addChild addChild removeChild setName walk toLongString setModifiers addModifiers toSignatureString toSignatureString toLinkLabelString toLinkLabelString toLabelString toLabelString getHandleIdentifier getHandleIdentifier setHandleIdentifier getParameterNames setParameterNames getParameterTypes getParameterSignatures setParameterSignatures getDetails setDetails setFormalComment setExtraInfo getExtraInfo getModifiers getAccessibility setDeclaringType getDeclaringType getPackageName getKind isCode getSourceLocation setSourceLocation getMessage setMessage getParent setParent isMemberKind setRunnable isRunnable isImplementor setImplementor isOverrider setOverrider getRelations setRelations getFormalComment toString genModifiers genAccessibility getBytecodeName getBytecodeSignature setBytecodeName setBytecodeSignature getSourceSignature setSourceSignature setKind setCorrespondingType getCorrespondingType getCorrespondingType getName getChildren setChildren addChild addChild removeChild setName walk toLongString setModifiers addModifiers toSignatureString toSignatureString toLinkLabelString toLinkLabelString toLabelString toLabelString getHandleIdentifier getHandleIdentifier setHandleIdentifier getParameterNames setParameterNames getParameterTypes getParameterSignatures setParameterSignatures getDetails setDetails setFormalComment setExtraInfo getExtraInfo serialVersionUID shortITDNames UNDEFINED AccPublic AccPrivate AccProtected AccPrivileged AccStatic AccFinal AccSynchronized AccVolatile AccTransient AccNative AccInterface AccAbstract AccStrictfp name kind parent children kvpairs sourceLocation modifiers handle depth serialVersionUID shortITDNames UNDEFINED AccPublic AccPrivate AccProtected AccPrivileged AccStatic AccFinal AccSynchronized AccVolatile AccTransient AccNative AccInterface AccAbstract AccStrictfp name kind parent children kvpairs sourceLocation modifiers handle depth org.aspectj.asm.internal.ProgramElement org.aspectj.asm.internal.ProgramElement  XXX is this right?\r\n  if (comment!=null && comment.length()>0) formalComment = comment;\r\n  assumption that not having one means \"\" is at HtmlDecorator line 111\r\n  know the location when we built the node but we learned it later on?\r\n  if (s==null) return UNDEFINED;\r\n  System.err.println(name+\" SourceSig=>\"+string);\r\n  if (name.indexOf('.')!=-1) return toLabelString().substring(name.indexOf('.')+1);\r\n  XXX is this right?\r\n  if (comment!=null && comment.length()>0) formalComment = comment;\r\n  assumption that not having one means \"\" is at HtmlDecorator line 111\r\n  know the location when we built the node but we learned it later on?\r\n  if (s==null) return UNDEFINED;\r\n  System.err.println(name+\" SourceSig=>\"+string);\r\n  if (name.indexOf('.')!=-1) return toLabelString().substring(name.indexOf('.')+1);\r\n /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n *     Andy Clement    Extensions for better IDE representation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n *     Andy Clement    Extensions for better IDE representation\r\n * ******************************************************************/\r\n","DOMFinder":"found search visit visit visit visit visit visit visit visit visit visit visit visit foundNode foundBinding ast element resolveBinding rangeStart rangeLength org.aspectj.org.eclipse.jdt.internal.core.util.DOMFinder  note that no binding exists for an Initializer\r\n","IndexManager":"aboutToUpdateIndex addBinary addSource cleanUpIndexes computeIndexLocation deleteIndexFiles deleteIndexFiles ensureIndexExists getSourceElementParser getIndex getIndex getIndex getIndexForUpdate getIndexStates getJavaPluginWorkingLocation getSavedIndexesDirectory indexDocument indexAll indexLibrary indexSourceFolder jobWasCancelled moveToNextJob notifyIdle processName rebuildIndex recreateIndex remove removeIndex removeIndexPath removeIndexFamily removeSourceFolderFromIndex reset saveIndex saveIndexes scheduleDocumentIndexing toString readIndexState removeIndexesState updateIndexState writeSavedIndexNamesFile indexLocations indexes needToSave checksumCalculator javaPluginLocation indexStates savedIndexNamesFile SAVED_STATE UPDATING_STATE UNKNOWN_STATE REBUILDING_STATE org.aspectj.org.eclipse.jdt.internal.core.search.indexing.IndexManager  indexLocation path is created by appending an index file name to the getJavaPluginWorkingLocation() path\r\n  key = indexLocation path, value = an index\r\n  key = indexLocation path, value = index state integer\r\n  $NON-NLS-1$\r\n  must tag the index as inconsistent, in case we exit before the update job is started\r\n  already rebuilding the index\r\n  if already cached index then there is nothing more to do\r\n  so UPDATING_STATE replaces SAVED_STATE and REBUILDING_STATE replaces everything\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   to share the indexLocation between the indexLocations and indexStates tables, get the key from the indexStates table\r\n  forget saved indexes & delete each index file\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  disable task tags to speed up parsing\r\n  $NON-NLS-1$\r\n  index local declarations\r\n  optimize string literals\r\n  do not use source javadoc parser to speed up parsing\r\n  Always check javadoc while indexing\r\n  Path is already canonical per construction\r\n  IF you put an index in the cache, then AddJarFileToIndex fails because it thinks there is nothing to do\r\n  index isn't cached, consider reusing an existing index file\r\n  $NON-NLS-1$   rebuild index if existing file is corrupt, unless the index is already being rebuilt\r\n  failed to read the existing file or its no longer compatible\r\n  check before creating index so as to avoid creating a new empty index if file is missing\r\n  rebuild index if existing file is missing\r\n  $NON-NLS-1$   The file could not be created. Possible reason: the project has been deleted.\r\n  $NON-NLS-1$   index wasn't found on disk, consider creating an empty new one\r\n  System.out.println(\" index name: \" + path.toOSString() + \" <----> \" + index.getIndexFile().getName());\r\n  is null if unknown, call if the containerPath must be computed\r\n  abort the job since the index has been removed from the REBUILDING_STATE\r\n  first name is saved signature, see readIndexState()\r\n  shares indexesDirectoryPath's segments\r\n  $NON-NLS-1$\r\n  will be run in the current thread.\r\n  determine the new children\r\n  check if the same request is not already in the queue\r\n  requestingProject is no longer used to cancel jobs but leave it here just in case\r\n  check if the same request is not already in the queue\r\n  skip it if a job to index the project is already in the queue\r\n  remember that one job was executed, and we will need to save indexes at some point\r\n  $NON-NLS-1$   only called to over write an existing cached index...\r\n  $NON-NLS-1$\r\n  The file could not be created. Possible reason: the project has been deleted.\r\n  Path is already canonical\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  index is not cached yet, but still want to delete the file\r\n  only finds cached index files... shutdown removes all non-cached index files\r\n  skip it if a job to index the project is already in the queue\r\n  $NON-NLS-1$\r\n  must have permission to write from the write monitor\r\n  skip the current job\r\n  only save cached indexes... the rest were not modified\r\n  index got deleted since acquired\r\n  don't take write lock yet since it can cause a deadlock (see https:  $NON-NLS-1$\r\n  index got deleted since acquired\r\n  free write lock\r\n  ask permission to write\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  ensure the states are initialized\r\n  $NON-NLS-1$\r\n  ensure the states are initialized\r\n  did not exist anyway\r\n  not changed\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n /* need to save ? */\r\n /*\r\n * Removes unused indexes from disk.\r\n */\r\n /*\r\n * Creates an empty index at the given location, for the given container path, if none exist.\r\n */\r\n /*reuse index file*/\r\n /* ensure no concurrent write access to index */\r\n","BcelGenericSignatureToTypeXConverter":"classTypeSignature2TypeX classTypeSignature2TypeX fieldTypeSignature2TypeX fieldTypeSignature2TypeX formalTypeParameter2TypeVariable formalTypeParameter2TypeVariable typeArgument2TypeX typeSignature2TypeX typeSignature2TypeX typeVariableSignature2TypeX fixUpCircularDependencies toString resolve classTypeSignature2TypeX classTypeSignature2TypeX fieldTypeSignature2TypeX fieldTypeSignature2TypeX formalTypeParameter2TypeVariable formalTypeParameter2TypeVariable typeArgument2TypeX typeSignature2TypeX typeSignature2TypeX typeVariableSignature2TypeX fixUpCircularDependencies toString resolve trace ftpToBeSubstituted trace ftpToBeSubstituted org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter org.aspectj.weaver.bcel.BcelGenericSignatureToTypeXConverter  first build the 'raw type' signature\r\n  I *think* we only need to worry about the 'right-most' type...\r\n  we have a non-parameterized type\r\n  type arguments may be array types, class types, or typevariable types\r\n  just return with what we know (the base type). (see pr152848)\r\n  'dumb' typevariablereference.\r\n  first build the 'raw type' signature\r\n  I *think* we only need to worry about the 'right-most' type...\r\n  we have a non-parameterized type\r\n  type arguments may be array types, class types, or typevariable types\r\n  just return with what we know (the base type). (see pr152848)\r\n  'dumb' typevariablereference.\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","JavaModelOperation":"getID run addAction addDelta addReconcileDelta removeReconcileDelta beginTask canModifyRoots checkCanceled commonVerify copyResources createFile createFolder deleteEmptyPackageFragment deleteResource deleteResources done equalsOneOf executeNestedOperation executeOperation getAttribute getCompilationUnitFor getCurrentOperationStack getDocument getElementsToProcess getElementToProcess getJavaModel getNestedFolders getParentElement getParentElements getResultElements getSchedulingRule getSubProgressMonitor hasModifiedResource internalWorked isCanceled isReadOnly isTopLevelOperation firstActionWithID moveResources newJavaElementDelta popOperation postAction prefixesOneOf pushOperation removeAllPostAction run runOperation runPostActions setAttribute setCanceled setNested setTaskName subTask verify worked APPEND REMOVEALL_APPEND KEEP_EXISTING POST_ACTION_VERBOSE actions actionsStart actionsEnd attributes HAS_MODIFIED_RESOURCE_ATTR TRUE elementsToProcess parentElements NO_ELEMENTS resultElements progressMonitor isNested force operationStacks org.aspectj.org.eclipse.jdt.internal.core.JavaModelOperation  insert at the end\r\n  remove all existing ones with same ID, and add new one at the end\r\n  do not insert if already existing with same ID\r\n  $NON-NLS-1$\r\n  since it is the result of the last reconcile operation\r\n  local\r\n  we should use true to create the file locally. Only VCM should use tru  without deleting the package fragment root\r\n  translate the core exception to a java model exception\r\n  fix for 1FW7IKC, part (1)\r\n  release reference (see http:  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  remove action[index]\r\n  $NON-NLS-1$   remove action[index]\r\n  reacquire delta processor as it can have been reset during executeOperation()\r\n  update JavaModel using deltas that were recorded during this operation\r\n  a working copy must remain a child of its parent even after a move\r\n  see https:  - but the operation has not modified any resource\r\n  noop if aready initialized\r\n  as this operation is modifying the tree (not read-only) and a CoreException will be thrown anyway.\r\n  $NON-NLS-1$  /*\r\n\t\t * Returns the id of this action.\r\n\t\t * @see JavaModelOperation#postAction\r\n\t\t */\r\n /*\r\n\t\t * Run this action.\r\n\t\t */\r\n /*\r\n\t * Whether tracing post actions is enabled.\r\n\t */\r\n /*\r\n\t * A list of IPostActions.\r\n\t */\r\n /*\r\n\t * A HashMap of attributes that can be used by operations\r\n\t */\r\n /*\r\n\t * A per thread stack of java model operations (PerThreadObject of ArrayList).\r\n\t */\r\n /*\r\n\t * Registers the given action at the end of the list of actions to run.\r\n\t */\r\n /*\r\n\t * Registers the given delta with the Java Model Manager.\r\n\t */\r\n /*\r\n\t * Registers the given reconcile delta with the Java Model Manager.\r\n\t */\r\n /*\r\n\t * Deregister the reconcile delta for the given working copy\r\n\t */\r\n /*\r\n\t * Returns whether this operation can modify the package fragment roots.\r\n\t */\r\n /*\r\n\t * Returns whether the given path is equals to one of the given other paths.\r\n\t */\r\n /*\r\n\t * Returns the attribute registered at the given key with the top level operation.\r\n\t * Returns null if no such attribute is found.\r\n\t */\r\n /*\r\n\t * Returns the stack of operations running in the current thread.\r\n\t * Returns an empty stack if no operations are currently running in this thread. \r\n\t */\r\n /*\r\n\t * Returns the existing document for the given cu, or a DocumentAdapter if none.\r\n\t */\r\n /*\r\n\t * Returns the scheduling rule for this operation (i.e. the resource that needs to be locked \r\n\t * while this operation is running.\r\n\t * Subclasses can override.\r\n\t */\r\n /*\r\n\t * Returns whether this operation is the first operation to run in the current thread.\r\n\t */\r\n /*\r\n\t * Returns the index of the first registered action with the given id, starting from a given position.\r\n\t * Returns -1 if not found.\r\n\t */\r\n /*\r\n\t * Removes the last pushed operation from the stack of running operations.\r\n\t * Returns the poped operation or null if the stack was empty.\r\n\t */\r\n /*\r\n\t * Registers the given action to be run when the outer most java model operation has finished.\r\n\t * The insertion mode controls whether:\r\n\t * - the action should discard all existing actions with the same id, and be queued at the end (REMOVEALL_APPEND),\r\n\t * - the action should be ignored if there is already an action with the same id (KEEP_EXISTING),\r\n\t * - the action should be queued at the end without looking at existing actions (APPEND)\r\n\t */\r\n /*\r\n\t * Returns whether the given path is the prefix of one of the given other paths.\r\n\t */\r\n /*\r\n\t * Pushes the given operation on the stack of operations currently running in this thread.\r\n\t */\r\n /*\r\n\t * Removes all actions with the given id from the queue of post actions.\r\n\t * Does nothing if no such action is in the queue.\r\n\t */\r\n /*\r\n\t * Registers the given attribute at the given key with the top level operation.\r\n\t */\r\n","AstUtil":"addMethodBinding addMethodDeclaration makeFinalArgument makeTypeReference makeNameReference makeReturnStatement makeMethodDeclaration setStatements makeLocalVariableReference makeResolvedLocalVariableReference makePublic makePackageVisible getCompilationUnitScope generateParameterLoads generateReturn makeMangledName makeAjcMangledName makeAjcMangledName getAjSyntheticAttribute makeLongPos getCompoundName insert insert copyArguments remove slotsNeeded replaceMethodBinding PREFIX org.aspectj.ajdt.internal.compiler.ast.AstUtil  XXX encode start and end location\r\n  ???\r\n  ??? does this work for primitives\r\n  clear bits\r\n  clear bits\r\n  XXX this could be inconsistent for wierd case, i.e. a class named \"java_lang_String\"\r\n  XXX not efficient\r\n  Lets do a proper copy\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","StringConstant":"fromValue stringValue toString typeID value org.aspectj.org.eclipse.jdt.internal.compiler.impl.StringConstant  the next line do not go into the toString() send....!\r\n  $NON-NLS-2$ ","ClassPreProcessorAgentAdapter":"transform transform s_preProcessor s_preProcessor org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter org.aspectj.weaver.loadtime.ClassPreProcessorAgentAdapter  FIXME av for now we skip hotswap. We should think more about that\r\n  FIXME av for now we skip hotswap. We should think more about that\r\n","OpcodeStringValues":"BYTECODE_NAMES org.aspectj.org.eclipse.jdt.core.util.OpcodeStringValues  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","ArrayBinding":"collectSubstitutes computeUniqueKey constantPoolName debugName dimensions elementsType erasure environment genericTypeSignature getPackage hashCode isCompatibleWith kind leafComponentType problemId qualifiedSourceName readableName shortReadableName sourceName swapUnresolved toString ArrayLength leafComponentType dimensions environment constantPoolName genericTypeSignature org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ArrayBinding  the declaringClass of this field is intentionally set to null so it can be distinguished.\r\n  TODO (philippe) should consider array bounds, and recurse\r\n  $NON-NLS-1$\r\n  relying on the fact that all equal arrays are identical\r\n  cannot assign 'String[]' into 'Object[][]' but can assign 'byte[][]' into 'Object[]'\r\n  check compatibility with capture of ? super X\r\n  However, if it did, the type checking support would go here.\r\n  $NON-NLS-1$\r\n /*\r\n * brakets leafUniqueKey\r\n * p.X[][] --> [[Lp/X;\r\n */\r\n /* Answer true if the receiver type can be assigned to the argument type (right)\r\n*/\r\n /* API\r\n* Answer the problem id associated with the receiver.\r\n* NoError if the receiver is a valid binding.\r\n*/\r\n /* java.lang.Object[] */\r\n","ITypeRequestor":"accept accept accept org.aspectj.org.eclipse.jdt.internal.compiler.impl.ITypeRequestor","ILocalVariableTableEntry":"getStartPC getLength getNameIndex getDescriptorIndex getIndex getName getDescriptor org.aspectj.org.eclipse.jdt.core.util.ILocalVariableTableEntry","InternalASTRewrite":"rewriteAST markAsMoveOrCopyTarget getRootNode toString preValueChangeEvent postValueChangeEvent preAddChildEvent postAddChildEvent preRemoveChildEvent preReplaceChildEvent preCloneNodeEvent postCloneNodeEvent getNodeEvent getListEvent root eventStore nodeStore clonedNodes cloneDepth org.aspectj.org.eclipse.jdt.core.dom.InternalASTRewrite  new code:\r\n  $NON-NLS-1$\r\n  force event creation\r\n  force event creation\r\n  node can be a cloned node\r\n","ReadWriteMonitor":"enterRead enterWrite exitRead exitWrite exitReadEnterWrite exitWriteEnterRead toString status org.aspectj.org.eclipse.jdt.internal.core.search.indexing.ReadWriteMonitor  only continue if this is the only reader\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","ASTRewriteFormatter":"preVisit postVisit visit addMarker fixupLength getMarkers getPlaceholders getEventStore getTabWidth getIndentWidth getLineDelimiter getFormattedResult createIndentString getIndentString changeIndent computeIndentUnits evaluateFormatterEdit formatString formatNode shifEdit createDocument getPrefix getPrefixAndSuffix getPrefix getPrefix getPrefixAndSuffix getPrefixAndSuffix data positions lineDelimiter tabWidth indentWidth placeholders eventStore options prefix kind string start length prefix start prefix suffix start NONE SPACE ASSERT_COMMENT VAR_INITIALIZER METHOD_BODY FINALLY_BLOCK CATCH_BLOCK ANNOT_MEMBER_DEFAULT ENUM_BODY_START ENUM_BODY_END WILDCARD_EXTENDS WILDCARD_SUPER FIRST_ENUM_CONST ANNOTATION_SEPARATION IF_BLOCK_WITH_ELSE IF_BLOCK_NO_ELSE ELSE_AFTER_STATEMENT ELSE_AFTER_BLOCK FOR_BLOCK WHILE_BLOCK DO_BLOCK org.aspectj.org.eclipse.jdt.internal.core.dom.rewrite.ASTRewriteFormatter  add to result\r\n  at least correct the indent\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  javadoc formatting disabled due to bug 93644\r\n  Assert.isTrue(false, \"Node type not covered: \" + node.getClass().getName());\r\n  break;\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  not supported\r\n  $NON-NLS-1$\r\n  deleted positions: set to end of remove\r\n  $NON-NLS-1$  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$  /* (non-Javadoc)\r\n\t\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#preVisit(ASTNode)\r\n\t\t */\r\n /* (non-Javadoc)\r\n\t\t * @see org.aspectj.org.eclipse.jdt.core.dom.ASTVisitor#postVisit(ASTNode)\r\n\t\t */\r\n /* (non-Javadoc)\r\n\t\t * @see org.aspectj.org.eclipse.jdt.internal.corext.dom.ASTRewriteFlattener#visit(org.aspectj.org.eclipse.jdt.core.dom.Block)\r\n\t\t */\r\n /* package */\r\n","IClassWeaver":"weave weave org.aspectj.weaver.IClassWeaver org.aspectj.weaver.IClassWeaver /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","ElementChangedEvent":"getDelta getType POST_CHANGE PRE_AUTO_BUILD POST_RECONCILE serialVersionUID type org.aspectj.org.eclipse.jdt.core.ElementChangedEvent  backward compatible\r\n /*\r\n\t * Event type indicating the nature of this event. \r\n\t * It can be a combination either:\r\n\t *  - POST_CHANGE\r\n\t *  - PRE_AUTO_BUILD\r\n\t *  - POST_RECONCILE\r\n\t */\r\n","SearchParticipant":"beginSearching doneSearching getDescription getDocument indexDocument locateMatches removeIndex scheduleDocumentIndexing selectIndexes org.aspectj.org.eclipse.jdt.core.search.SearchParticipant  $NON-NLS-1$\r\n  TODO (frederic) should not have to create index manually, should expose API that recreates index instead\r\n","AccessForInlineVisitor":"endVisit endVisit endVisit endVisit endVisit endVisit endVisit getAccessibleField getAccessibleMethod getSuperAccessMethod isPublic isPublic makePublic endVisit endVisit visit handler inAspect world isInlinable originalMethod accessMethod org.aspectj.ajdt.internal.compiler.ast.AccessForInlineVisitor  import org.aspectj.org.eclipse.jdt.internal.compiler.AbstractSyntaxTreeVisitorAdapter;\r\n  alias for inAspect.world\r\n  ??? A better answer would be to transform these into inlinable forms\r\n  !!! understand and fix this case later\r\n  don't continue if we come across a problem\r\n  TODO Why is this sometimes null?\r\n  TODO Why is this sometimes null?\r\n  XXX TBD\r\n  getTypeBinding(scope));     getTypeBinding(scope));    System.err.println(\"checking field: \" + binding);\r\n  ???\r\n  pr124999\r\n  runtime this will be satisfied by the super).\r\n  where we are.\r\n  these are always effectively public to the inliner\r\n  these are always effectively public to the inliner\r\n  has already produced an error\r\n  ???\r\n  we don't want to transform any local anonymous classes as they won't be inlined\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","LocalVariableTag":"getName getSlot getType getRealType updateSlot isRemapped toString equals hashCode getName getSlot getType getRealType updateSlot isRemapped toString equals hashCode type signature name slot startPos remapped hashCode type signature name slot startPos remapped hashCode org.aspectj.apache.bcel.generic.LocalVariableTag org.aspectj.apache.bcel.generic.LocalVariableTag  not always known, in which case signature has to be used\r\n  have different start positions.\r\n  not always known, in which case signature has to be used\r\n  have different start positions.\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n *   Andy Clement   pushed down into bcel module\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n *   Andy Clement   pushed down into bcel module\r\n * ******************************************************************/\r\n","InterSuperReference":"resolveType org.aspectj.ajdt.internal.compiler.ast.InterSuperReference /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","NaiveASTFlattener":"getResult reset printIndent printModifiers printModifiers visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit buffer indent org.aspectj.org.eclipse.jdt.core.dom.NaiveASTFlattener  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  add empty \"[]\" for each extra array dimension\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  enum constant declarations do not include punctuation\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  for cases like x= i - -1; or x= i++ + ++i;\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  decremented in visit(SwitchStatement)\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  incremented in visit(SwitchCase)\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  but Name, MemberRef, MethodRef, and nested TagElement do not include white space\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  add space if required to separate\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-2$  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-2$  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-2$  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n\t * @see ASTVisitor#visit(AnnotationTypeDeclaration)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(AnnotationTypeMemberDeclaration)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(AnonymousClassDeclaration)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ArrayAccess)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ArrayCreation)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ArrayInitializer)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ArrayType)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(AssertStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(Assignment)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(Block)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(BlockComment)\r\n\t * @since 3.0\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(BooleanLiteral)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(BreakStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(CastExpression)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(CatchClause)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(CharacterLiteral)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ClassInstanceCreation)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(CompilationUnit)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ConditionalExpression)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ConstructorInvocation)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ContinueStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(DoStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(EmptyStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(EnhancedForStatement)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(EnumConstantDeclaration)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(EnumDeclaration)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ExpressionStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(FieldAccess)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(FieldDeclaration)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ForStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(IfStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ImportDeclaration)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(InfixExpression)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(InstanceofExpression)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(Initializer)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(Javadoc)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(LabeledStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(LineComment)\r\n\t * @since 3.0\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(MarkerAnnotation)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(MemberRef)\r\n\t * @since 3.0\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(MemberValuePair)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(MethodRef)\r\n\t * @since 3.0\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(MethodRefParameter)\r\n\t * @since 3.0\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(MethodDeclaration)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(MethodInvocation)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(Modifier)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(NormalAnnotation)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(NullLiteral)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(NumberLiteral)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(PackageDeclaration)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ParameterizedType)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ParenthesizedExpression)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(PostfixExpression)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(PrefixExpression)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(PrimitiveType)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(QualifiedName)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(QualifiedType)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ReturnStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SimpleName)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SimpleType)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SingleMemberAnnotation)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SingleVariableDeclaration)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(StringLiteral)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SuperConstructorInvocation)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SuperFieldAccess)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SuperMethodInvocation)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SwitchCase)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SwitchStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(SynchronizedStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(TagElement)\r\n\t * @since 3.0\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(TextElement)\r\n\t * @since 3.0\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ThisExpression)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(ThrowStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(TryStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(TypeDeclaration)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(TypeDeclarationStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(TypeLiteral)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(TypeParameter)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(VariableDeclarationExpression)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(VariableDeclarationFragment)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(VariableDeclarationStatement)\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(WildcardType)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see ASTVisitor#visit(WhileStatement)\r\n\t */\r\n","IJavaSearchScope":"encloses encloses enclosingProjectsAndJars includesBinaries includesClasspaths setIncludesBinaries setIncludesClasspaths JAR_FILE_ENTRY_SEPARATOR SOURCES APPLICATION_LIBRARIES SYSTEM_LIBRARIES REFERENCED_PROJECTS org.aspectj.org.eclipse.jdt.core.search.IJavaSearchScope  $NON-NLS-1$\r\n","SourceFile":"accept dump getSourceFileIndex setSourceFileIndex getSourceFileName toString copy equals extractTypeName getContents getFileName getMainTypeName getPackageName hashCode typeLocator toString accept dump getSourceFileIndex setSourceFileIndex getSourceFileName toString copy sourcefile_index resource sourceLocation initialTypeName updateClassFile sourcefile_index org.aspectj.apache.bcel.classfile.SourceFile org.aspectj.org.eclipse.jdt.internal.core.builder.SourceFile org.aspectj.apache.bcel.classfile.SourceFile  answer a String with the qualified type name for the source file in the form: 'p1  deal with the last segment separately\r\n  do not know what you want to return here\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","CodeSnippetTypeDeclaration":"generateCode org.aspectj.org.eclipse.jdt.internal.eval.CodeSnippetTypeDeclaration  create the result for a compiled type\r\n  generate all fiels\r\n  generate all methods\r\n  generate all methods\r\n  trigger problem type generation for code gen errors\r\n  finalize the compiled type result\r\n","CompletionOnMethodReturnType":"resolveStatements print org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnMethodReturnType","IBufferFactory":"createBuffer org.aspectj.org.eclipse.jdt.core.IBufferFactory","ASTSyntaxErrorPropagator":"checkAndTagAsMalformed visit visit visit visit visit visit visit visit visit problems org.aspectj.org.eclipse.jdt.core.dom.ASTSyntaxErrorPropagator  visit Javadoc.tags() as well\r\n  clear the bits on parent\r\n /*\r\n\t * Method declared on ASTVisitor.\r\n\t */\r\n /*\r\n\t * Method declared on ASTVisitor.\r\n\t */\r\n /*\r\n\t * Method declared on ASTVisitor.\r\n\t */\r\n /*\r\n\t * Method declared on ASTVisitor.\r\n\t */\r\n /*\r\n\t * Method declared on ASTVisitor.\r\n\t */\r\n /*\r\n\t * Method declared on ASTVisitor.\r\n\t */\r\n /*\r\n\t * Method declared on ASTVisitor.\r\n\t */\r\n /*\r\n\t * Method declared on ASTVisitor.\r\n\t */\r\n /*\r\n\t * Method declared on ASTVisitor.\r\n\t */\r\n","ITypeParameter":"getBounds getDeclaringMember getNameRange org.aspectj.org.eclipse.jdt.core.ITypeParameter","KeyKind":"consumeBaseType consumeCapture consumeField consumeLocalType consumeLocalVar consumeMemberType consumeMethod consumeParameterizedGenericMethod consumeParameterizedType consumeParser consumeRawType consumeTopLevelType consumeTypeParameter consumeTypeWithCapture consumeWildCard newParser F_TYPE F_METHOD F_FIELD F_TYPE_PARAMETER F_LOCAL_VAR F_MEMBER F_LOCAL F_PARAMETERIZED_TYPE F_RAW_TYPE F_WILDCARD_TYPE F_PARAMETERIZED_METHOD F_CAPTURE F_CONSTRUCTOR flags innerKeyKind org.aspectj.org.eclipse.jdt.internal.core.util.KeyKind","GlobalStructureView":"getGlobalViewProperties toString viewProperties org.aspectj.ajde.ui.GlobalStructureView /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","InternalUseOnlyPointcutParser":"resolvePointcutExpression concretizePointcutExpression resolvePointcutExpression concretizePointcutExpression org.aspectj.weaver.reflect.InternalUseOnlyPointcutParser org.aspectj.weaver.reflect.InternalUseOnlyPointcutParser /* *******************************************************************\r\n * Copyright (c) 2006 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer          Initial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2006 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer          Initial implementation\r\n * ******************************************************************/\r\n","AjdeWidgetStyles":"DEFAULT_LABEL_FONT DEFAULT_BORDER LOWERED_BEVEL_BORDER RAISED_BEVEL_BORDER DEFAULT_BACKGROUND_COLOR LINK_NODE_COLOR LINK_NODE_NO_SOURCE_COLOR org.aspectj.ajde.ui.swing.AjdeWidgetStyles /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","JavadocMessageSend":"internalResolveType isSuperAccess printExpression resolveType resolveType traverse traverse tagSourceStart tagSourceEnd tagValue org.aspectj.org.eclipse.jdt.internal.compiler.ast.JavadocMessageSend  Base type promotion\r\n  typeChecks all arguments\r\n  check receiver type\r\n  base type cannot receive any message\r\n  Try method in enclosing types\r\n  Try to search a constructor instead\r\n  ignore problem if can reach target method through it\r\n  implicit lookup may discover issues due to static  record the closest match, for clients who may still need hint about possible method match\r\n  $NON-NLS-1$\r\n /*\r\n\t * Resolves type on a Block or Class scope.\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.lookup.InvocationSite#isSuperAccess()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * Redefine to capture javadoc specific signatures\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode#traverse(org.aspectj.org.eclipse.jdt.internal.compiler.ASTVisitor, org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BlockScope)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * Redefine to capture javadoc specific signatures\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode#traverse(org.aspectj.org.eclipse.jdt.internal.compiler.ASTVisitor, org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BlockScope)\r\n\t */\r\n","SimpleSetOfCharArray":"add asArray clear clone get includes remove rehash toString values elementSize threshold org.aspectj.org.eclipse.jdt.internal.compiler.util.SimpleSetOfCharArray  to avoid using Enumerations, walk the individual values skipping nulls\r\n  number of elements in the table\r\n  size is the expected number of elements\r\n  assumes the threshold is never equal to the size of the table\r\n  assumes the threshold is never equal to the size of the table\r\n  only needed if a possible collision existed\r\n  double the number of expected elements\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","AnyAnnotationTypePattern":"fastMatches matches matches write resolve toString accept isAny parameterizeWith fastMatches matches matches write resolve toString accept isAny parameterizeWith org.aspectj.weaver.patterns.AnyAnnotationTypePattern org.aspectj.weaver.patterns.AnyAnnotationTypePattern /* *******************************************************************\r\n * Copyright (c) 2008 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors\r\n * Andy Clement - extracted from AnnotationTypePattern\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2008 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors\r\n * Andy Clement - extracted from AnnotationTypePattern\r\n * ******************************************************************/\r\n","VersionedDataInputStream":"getMajorVersion getMinorVersion getBuildstamp setVersion getMajorVersion getMinorVersion getBuildstamp setVersion version version org.aspectj.weaver.VersionedDataInputStream org.aspectj.weaver.VersionedDataInputStream  assume we are the latest unless something tells us otherwise...\r\n  assume we are the latest unless something tells us otherwise...\r\n /* *******************************************************************\r\n * Copyright (c) 2005 IBM\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement           initial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 IBM\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement           initial implementation\r\n * ******************************************************************/\r\n","IMemberFinder":"getField methods getMethods getExactMethod org.aspectj.org.eclipse.jdt.internal.compiler.lookup.IMemberFinder","LocalVariableGen":"getLocalVariable setIndex getIndex setName getName setType getType getStart getEnd setStart setEnd updateTarget containsTarget equals toString clone getLocalVariable setIndex getIndex setName getName setType getType getStart getEnd setStart setEnd updateTarget containsTarget equals toString clone index name type start end index name type start end org.aspectj.apache.bcel.generic.LocalVariableGen org.aspectj.apache.bcel.generic.LocalVariableGen","CompletionParser":"addPotentialName startRecordingIdentifiers stopRecordingIdentifiers assistIdentifier attachOrphanCompletionNode buildMoreAnnotationCompletionContext buildMoreCompletionContext buildMoreGenericsCompletionContext buildMoreTryStatementCompletionContext bodyEnd bodyEnd checkCatchClause checkClassInstanceCreation checkClassLiteralAccess checkKeyword checkInstanceofKeyword checkInvocation checkLabelStatement checkMemberAccess checkNameCompletion checkParemeterizedMethodName checkParemeterizedType checkRecoveredMethod checkMemberValueName checkRecoveredType classHeaderExtendsOrImplements completionIdentifierCheck consumeArrayCreationExpressionWithInitializer consumeArrayCreationExpressionWithoutInitializer consumeArrayCreationHeader consumeAssignment consumeAssignmentOperator consumeBinaryExpression consumeBinaryExpressionWithName consumeCaseLabel consumeCastExpressionWithPrimitiveType consumeCastExpressionWithGenericsArray consumeCastExpressionWithQualifiedGenericsArray consumeCastExpressionWithNameArray consumeCastExpressionLL1 consumeClassBodyDeclaration consumeClassBodyopt consumeClassDeclaration consumeClassHeaderName1 consumeClassHeaderExtends consumeClassTypeElt consumeCompilationUnit consumeConditionalExpression consumeConditionalExpressionWithName consumeConstructorBody consumeConstructorHeader consumeConstructorHeaderName consumeConstructorHeaderNameWithTypeParameters consumeDefaultLabel consumeDimWithOrWithOutExpr consumeEnhancedForStatementHeaderInit consumeEnterAnonymousClassBody consumeEnterVariable consumeEnumConstantHeaderName consumeEnumHeaderName consumeEqualityExpression consumeEqualityExpressionWithName consumeExitVariableWithInitialization consumeExplicitConstructorInvocation consumeFieldAccess consumeForceNoDiet consumeFormalParameter consumeInsideCastExpression consumeInsideCastExpressionLL1 consumeInsideCastExpressionWithQualifiedGenerics consumeInstanceOfExpression consumeInstanceOfExpressionWithName consumeInterfaceHeaderName1 consumeInterfaceHeaderExtends consumeInterfaceType consumeMethodInvocationName consumeMethodInvocationNameWithTypeArguments consumeMethodInvocationPrimary consumeMethodInvocationPrimaryWithTypeArguments consumeMethodInvocationSuper consumeMethodInvocationSuperWithTypeArguments consumeMethodHeaderName consumeMethodHeaderNameWithTypeParameters consumeMethodHeaderRightParen consumeMethodHeaderExtendedDims consumeAnnotationName consumeAnnotationTypeDeclarationHeaderName consumeLabel consumeMarkerAnnotation consumeMemberValuePair consumeMemberValueAsName consumeMethodBody consumeMethodHeader consumeModifiers consumeReferenceType consumeRestoreDiet consumeSingleMemberAnnotation consumeSingleStaticImportDeclarationName consumeSingleTypeImportDeclarationName consumeStatementBreakWithLabel consumeStatementLabel consumeStatementSwitch consumeStaticImportOnDemandDeclarationName consumeStaticInitializer consumeNestedMethod consumeNormalAnnotation consumePackageDeclarationName consumePackageDeclarationNameWithModifiers consumePrimaryNoNewArrayName consumePrimaryNoNewArrayNameSuper consumePrimaryNoNewArrayNameThis consumePushPosition consumeToken consumeOnlyTypeArguments consumeOnlyTypeArgumentsForCastExpression consumeRightParen consumeReferenceType1 consumeReferenceType2 consumeReferenceType3 consumeTypeArgumentReferenceType1 consumeTypeArgumentReferenceType2 consumeTypeArguments consumeTypeHeaderNameWithTypeParameters consumeTypeImportOnDemandDeclarationName consumeTypeParameters consumeTypeParameterHeader consumeTypeParameter1 consumeTypeParameterWithExtends consumeTypeParameterWithExtendsAndBounds consumeTypeParameter1WithExtends consumeTypeParameter1WithExtendsAndBounds consumeWildcard consumeWildcard1 consumeWildcard2 consumeWildcard3 consumeWildcardBoundsExtends consumeWildcardBounds1Extends consumeWildcardBounds2Extends consumeWildcardBounds3Extends consumeUnaryExpression consumeUnaryExpression createAssistImportReference createAssistPackageReference createQualifiedAssistNameReference createQualifiedAssistTypeReference createParameterizedQualifiedAssistTypeReference createSingleAssistNameReference createSingleAssistTypeReference createParameterizedSingleAssistTypeReference createStringLiteral copyDims dietParse flushAssistState getTypeReferenceForGenericType getUnspecifiedReference getUnspecifiedReferenceOptimized isAlreadyPotentialName indexOfAssistIdentifier initialize initialize initializeForBlockStatements initializeScanner isAfterArrayType isEmptyNameCompletion isInsideAnnotation isIndirectlyInsideBlock isInsideBlock isInsideBreakable isInsideLoop isInsideReturn parse parseBlockStatements parseSomeStatements popUntilCompletedAnnotationIfNecessary prepareForBlockStatements pushOnLabelStack pushCompletionOnMemberAccessOnExpressionStack recordCompletionOnReference recordReference recoveryExitFromVariable recoveryTokenCheck reset resetAfterCompletion resumeAfterRecovery setAssistIdentifier toString updateRecoveryState createLocalDeclaration createJavadocParser createFieldDeclaration COMPLETION_PARSER COMPLETION_OR_ASSIST_PARSER K_BLOCK_DELIMITER K_SELECTOR_INVOCATION_TYPE K_SELECTOR_QUALIFIER K_BETWEEN_CATCH_AND_RIGHT_PAREN K_NEXT_TYPEREF_IS_CLASS K_NEXT_TYPEREF_IS_INTERFACE K_NEXT_TYPEREF_IS_EXCEPTION K_BETWEEN_NEW_AND_LEFT_BRACKET K_INSIDE_THROW_STATEMENT K_INSIDE_RETURN_STATEMENT K_CAST_STATEMENT K_LOCAL_INITIALIZER_DELIMITER K_ARRAY_INITIALIZER K_ARRAY_CREATION K_UNARY_OPERATOR K_BINARY_OPERATOR K_ASSISGNMENT_OPERATOR K_CONDITIONAL_OPERATOR K_BETWEEN_IF_AND_RIGHT_PAREN K_BETWEEN_WHILE_AND_RIGHT_PAREN K_BETWEEN_FOR_AND_RIGHT_PAREN K_BETWEEN_SWITCH_AND_RIGHT_PAREN K_BETWEEN_SYNCHRONIZED_AND_RIGHT_PAREN K_INSIDE_ASSERT_STATEMENT K_SWITCH_LABEL K_BETWEEN_CASE_AND_COLON K_BETWEEN_DEFAULT_AND_COLON K_BETWEEN_LEFT_AND_RIGHT_BRACKET K_EXTENDS_KEYWORD K_PARAMETERIZED_METHOD_INVOCATION K_PARAMETERIZED_ALLOCATION K_PARAMETERIZED_CAST K_BETWEEN_ANNOTATION_NAME_AND_RPAREN K_INSIDE_BREAK_STATEMENT K_INSIDE_CONTINUE_STATEMENT K_LABEL K_MEMBER_VALUE_ARRAY_INITIALIZER FAKE_TYPE_NAME FAKE_METHOD_NAME FAKE_ARGUMENT_NAME VALUE cursorLocation assistNodeParent IF TRY CATCH WHILE SWITCH FOR DO SYNCHRONIZED DEFAULT EXPLICIT_RECEIVER NO_RECEIVER SUPER_RECEIVER NAME_RECEIVER ALLOCATION QUALIFIED_ALLOCATION QUESTION COLON LPAREN_NOT_CONSUMED LPAREN_CONSUMED ANNOTATION_NAME_COMPLETION INSIDE_NAME invocationType qualifier lastModifiers lastModifiersStart bracketDepth canBeExplicitConstructor NO NEXTTOKEN YES LabelStackIncrement labelStack labelPtr isAlreadyAttached record skipRecord recordFrom recordTo potentialVariableNamesPtr potentialVariableNames potentialVariableNameStarts potentialVariableNameEnds pendingAnnotation org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionParser  OWNER\r\n  whether we are inside a block\r\n  whether we are inside a message send\r\n  whether we are inside a message send\r\n  whether we are between the keyword 'catch' and the following ')'\r\n  whether the next type reference is a class\r\n  whether the next type reference is an interface\r\n  whether the next type reference is an exception\r\n  whether we are between the keyword 'new' and the following left braket, ie. '[', '(' or '{'\r\n  whether we are between the keyword 'throw' and the end of a throw statement\r\n  whether we are between the keyword 'return' and the end of a return statement\r\n  whether we are between ')' and the end of a cast statement\r\n  the parent node of assist node\r\n  block kind\r\n  label kind\r\n  invocation type constants\r\n  K_BETWEEN_ANNOTATION_NAME_AND_RPAREN arguments\r\n  K_PARAMETERIZED_METHOD_INVOCATION arguments\r\n  the type of the current invocation (one of the invocation type constants)\r\n  a pointer in the expression stack to the qualifier of a invocation\r\n  last modifiers info\r\n  depth of '(', '{' and '[]'\r\n  show if the current token can be an explicit constructor\r\n  retrieve available modifiers if any\r\n  if (rParenPos < lParenPos){   was missing opening brace\r\n  add the completion node as a statement to the list of block statements\r\n  add the completion node to the method declaration or constructor declaration\r\n  push top expression on ast stack if it contains the completion node\r\n  the following code applies only in methods, constructors or initializers\r\n  was missing opening brace\r\n  push top expression on ast stack if it contains the completion node\r\n  was missing opening brace\r\n  find arguments\r\n  search previous arguments if missing\r\n  remove special flags for primitive types\r\n  remove selector\r\n  is inside a paremeterized method: bar.<X>.foo\r\n  consume the receiver\r\n  find receiver\r\n  is it a ***_NotName rule ?\r\n  it is  a ***_NotName rule\r\n  no need to worry about raw type usage\r\n  statements of catch block won't be used\r\n  thus this can only be a completion on the type of the catch clause\r\n  no class instance creation with a parameterized type\r\n  qualified allocation expression\r\n  attach it now (it replaces the qualifier expression)\r\n  non qualified allocation expression\r\n  (NB: the top id length is 1 and it is for the completion identifier)\r\n  build the primitive type node\r\n  find the completion identifier and its source positions\r\n  it can only be a simple identifier (so its length is one)\r\n  build the completion on class literal access node\r\n  pop the length that was used to say it is a primitive type\r\n  the completion is after a primitive type or a primitive array type\r\n  find the completion identifier and its source positions\r\n  it can only be a simple identifier (so its length is one)\r\n  get the type reference\r\n  build the completion on class literal access node\r\n  if the completion is after a regular array type\r\n  eg. it is something like \"this.fred([cursor]\" but it is not something like \"this.fred(1 + [cursor]\"\r\n  pop empty name completion\r\n  find receiver and qualifier\r\n  find arguments\r\n  remember the arguments\r\n  consume the expression arguments\r\n  creates an allocation expression\r\n  we don't want a completion node here, so call super\r\n  no source is going to be replaced\r\n  remember the allocation expression as an orphan completion node\r\n  creates an explicit constructor call\r\n  no source is going to be replaced\r\n  remember the explicit constructor call as an orphan completion node\r\n  creates completion on message send\r\n  implicit this\r\n  remove special flags for primitive types\r\n  remove selector\r\n  is inside a paremeterized method: bar.<X>.foo\r\n  consume the receiver\r\n  set selector\r\n  remove selector\r\n  this.cursorLocation + 1;\r\n  remember the message send as an orphan completion node\r\n  build ast node\r\n  fix for bug: https:  the receiver is an expression\r\n  NB: at this point the completion identifier is on the identifier stack\r\n  this case occurs with 'bar().foo'\r\n  handle type arguments\r\n  handle type arguments\r\n  handle type arguments\r\n  type of a cast expression\r\n  generic type\r\n  generic type\r\n  if (rParenPos < lParenPos){   handle type arguments\r\n  complete generics stack if necessary\r\n  if not in a method in non diet mode and if not inside a field initializer, only record references attached to types\r\n  fake empty identifier got issued\r\n  Test below copied from CompletionScanner.getCurrentIdentifierSource()\r\n  completion, so this check should be before we check that we are at the cursor location\r\n  (we still need to store labels though)\r\n  no need to check further if we are not at the cursor location\r\n  (NB: Put this check before checkNameCompletion() because the selector of the invocation can be on the identifier stack)\r\n  CastExpression ::= PushLPAREN Name Dims PushRPAREN InsideCastExpression UnaryExpressionNotPlusMinus\r\n  the pending annotation cannot be attached to next nodes\r\n  completion is in an orphan javadoc comment => replace in last read declaration to allow completion resolution\r\n  completion is in an orphan javadoc comment => replace compilation unit one to allow completion resolution\r\n  create a fake interface declaration to allow resolution\r\n  was an allocation expression\r\n  do not report any error\r\n  handle type arguments\r\n  was an allocation expression\r\n  DimWithOrWithOutExpr ::= '[' ']'\r\n  recovery\r\n  this is a method parameter\r\n  does not keep the initialization if completion is not inside\r\n  potential receiver is being poped, so reset potential receiver\r\n  set isVarArgs\r\n  modifiers\r\n  consume annotations\r\n  MethodHeaderName ::= Modifiersopt Type 'Identifier' '('\r\n  name\r\n  type\r\n  modifiers\r\n  consume annotations\r\n  javadoc\r\n  highlight starts at selector start\r\n  initialize listLength before reading parameters  || md.modifiers != 0\r\n  recovery\r\n  name\r\n  type\r\n  modifiers\r\n  consume annotations\r\n  initialize listLength before reading parameters  javadoc\r\n  consume annotations\r\n  recovery\r\n  save from stack values\r\n  potential receiver is being poped, so reset potential receiver\r\n  the pending annotation cannot be attached to next nodes\r\n  the pending annotation cannot be attached to next nodes\r\n  the pending annotation cannot be attached to next nodes\r\n  the pending annotation cannot be attached to next nodes\r\n  this is class literal access, so reset potential receiver\r\n  this is class literal access, so reset potential receiver\r\n  this is class literal access, so reset potential receiver\r\n  in method bodies)\r\n  eg. this[.]fred()\r\n  eg. super[.]fred()\r\n  eg. bar[.]fred()\r\n  if identifier has been consumed, eg. this.x[.]fred()\r\n  eg. not super.[fred]()\r\n  eg. not bar.[fred]()\r\n  eg. not new foo.[Bar]()\r\n  eg. foo().[fred]()\r\n  NB: even if there is no qualification, set it to the expression ptr so that the number of arguments are correctly computed\r\n  eg. [new] X()\r\n  eg. fred().[new] X()\r\n  eg. fred().[this]()\r\n  eg. fred().[super]()\r\n  remenber the last expression so that arguments are correctly computed\r\n  eg. fred[(]) or foo.fred[(])\r\n  explicit constructor invocation, eg. this[(]1, 2)\r\n  explicit constructor invocation, eg. super[(]1, 2)\r\n  explicit constructor invocation, eg. Fred<X>[(]1, 2)\r\n  or fred<X<X>>[(]1, 2)\r\n  or Fred<X<X<X>>>[(]1, 2)\r\n  it's not a selector invocation\r\n  if in a method or if in a field initializer\r\n  the pending annotation cannot be attached to next nodes\r\n  fake empty identifier got issued\r\n  Test below copied from CompletionScanner.getCurrentIdentifierSource()\r\n  fake empty identifier got issued\r\n  Test below copied from CompletionScanner.getCurrentIdentifierSource()\r\n  \" could be as unicode \\u0022\r\n  potential receiver is being poped, so reset potential receiver\r\n  when names are recorded there is no assist identifier\r\n  (smallest position of array type in a compilation unit is 11 as in \"class X{Y[]\")\r\n  simulate goForMethodBody except that we don't want to balance brackets because they are not going to be balanced\r\n  fake method must ignore the method header\r\n  fieldreference begins at the this\r\n  optimize push  considerates the fieldReference beginning at the 'super' ....\r\n  only record references attached to types\r\n  As we don't want to resolve names to avoid to slow down performances then this name will be ignored\r\n  the pending annotation cannot be attached to next nodes\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  mark enclosing blocks as to be preserved\r\n /*\r\n * Parser able to build specific completion parse nodes, given a cursorLocation.\r\n *\r\n * Cursor location denotes the position of the last character behind which completion\r\n * got requested:\r\n *  -1 means completion at the very beginning of the source\r\n *\t0  means completion behind the first character\r\n *  n  means completion behind the n-th character\r\n */\r\n /* generate a pseudo field with a completion on type reference */\r\n /* filter out cases where scanner is still inside type header */\r\n /* if in context of a type, then persists the identifier into a fake field return type */\r\n /* only consider if inside method header */\r\n /* if in context of a method, persists if inside arguments as a type */\r\n /* check for completion at the beginning of method body\r\n\t\t\t\tbehind an invalid signature\r\n\t\t\t */\r\n /* check for completion at the beginning of method body\r\n\t\t\t\tbehind an invalid signature\r\n\t\t\t */\r\n /* check for completion at the beginning of method body\r\n\t\t\t\tbehind an invalid signature\r\n\t\t\t */\r\n /* check if current awaiting identifier is the completion identifier */\r\n /* check if on line with an error already - to avoid completing inside\r\n\t\t\tillegal type names e.g.  int[<cursor> */\r\n /* only consider if inside method header */\r\n /* check if current awaiting identifier is the completion identifier */\r\n /* check if current awaiting identifier is the completion identifier */\r\n /* check if on line with an error already - to avoid completing inside\r\n\t\t\tillegal type names e.g.  int[<cursor> */\r\n /* filter out cases where scanner is still inside type header */\r\n /* filter out cases where scanner is still inside type header */\r\n /* check if current awaiting identifier is the completion identifier */\r\n /*\r\n\t \tIn some cases, the completion identifier may not have yet been consumed,\r\n\t \te.g.  int.[cursor]\r\n\t \tThis is because the grammar does not allow any (empty) identifier to follow\r\n\t \ta base type. We thus have to manually force the identifier to be consumed\r\n\t \t(that is, pushed).\r\n\t */\r\n /*\r\n * Check whether about to shift beyond the completion token.\r\n * If so, depending on the context, a special node might need to be created\r\n * and attached to the existing recovered structure so as to be remember in the\r\n * resulting parsed structure.\r\n */\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.Parser#consumeClassDeclaration()\r\n */\r\n /* filter out cases where scanner is still inside type header */\r\n /* check if current awaiting identifier is the completion identifier */\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.Parser#consumeCompilationUnit()\r\n */\r\n /* recovering - might be an empty message send */\r\n /* no need to take action if not inside assist identifiers */\r\n /* force to start recovering in order to get fake field behavior */\r\n /*\r\n * Copy of code from superclass with the following change:\r\n * If the cursor location is on the field access, then create a\r\n * CompletionOnMemberAccess instead.\r\n */\r\n /* if incomplete method header, listLength counter will not have been reset,\r\n\t\t\tindicating that some arguments are available on the stack */\r\n /* filter out cases where scanner is still inside type header */\r\n /* check if current awaiting identifier is the completion identifier */\r\n /* filter out cases where scanner is still inside type header */\r\n /* check if current awaiting identifier is the completion identifier */\r\n /* assist inside subsequent identifier */\r\n /* assist inside first identifier */\r\n /* check if current awaiting identifier is the completion identifier */\r\n /*\r\n * Flush parser/scanner state regarding to code assist\r\n */\r\n /*\r\n * Initializes the state of the parser that is about to go for BlockStatements.\r\n */\r\n /*\r\n * Prepares the state of the parser to go for BlockStatements.\r\n */\r\n /* filter out cases where scanner is still inside type header */\r\n /* generate a pseudo field with a completion on type reference */\r\n /* restart in diet mode for finding sibling constructs */\r\n /* if reached [eof] inside method body, but still inside nested type,\r\n\t\t\tor inside a field initializer, should continue in diet mode until\r\n\t\t\tthe end of the method body or compilation unit */\r\n /*\r\n * Reset context so as to resume to regular parse loop\r\n * If unable to reset for resuming, answers false.\r\n *\r\n * Move checkpoint location, reset internal stacks and\r\n * decide which grammar goal is activated.\r\n */\r\n /* expose parser state to recovery state */\r\n /* may be able to retrieve completionNode as an orphan, and then attach it */\r\n /* check and update recovered state based on current token,\r\n\t\tthis action is also performed when shifting token after recovery\r\n\t\tgot activated once.\r\n\t*/\r\n /*\r\n * Update recovery state based on current parser/scanner state\r\n */\r\n","SuperTypeReferencePattern":"createIndexKey decodeIndexKey getBlankPattern getIndexCategories matchesDecodedKey queryIn print superQualification superSimpleName superClassOrInterface typeSuffix pkgName simpleName enclosingTypeName classOrInterface modifiers typeParameterSignatures superRefKind ALL_SUPER_TYPES ONLY_SUPER_INTERFACES ONLY_SUPER_CLASSES CATEGORIES org.aspectj.org.eclipse.jdt.internal.core.search.matching.SuperTypeReferencePattern  set to TYPE_SUFFIX for matching both classes and interfaces\r\n  used for IMPLEMENTORS\r\n  used for hierarchy with a class focus\r\n  e.g. p.A$B ---> p.A$ + B\r\n  save some space\r\n  superSimpleName   some values may not have been know when indexed so decode as null\r\n  implicit cast to int type\r\n  consider enumerations as classes, reject interfaces and annotations\r\n  can be null\r\n  do a prefix query with the superSimpleName\r\n  do a prefix query with the superSimpleName\r\n  do a pattern query with the superSimpleName\r\n  TODO (frederic) implement regular expression match\r\n  cannot include the superQualification since it may not exist in the index\r\n  match rule is irrelevant when the key is null\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n * superSimpleName / superQualification / simpleName / enclosingTypeName / typeParameters / pkgName / superClassOrInterface classOrInterface modifiers\r\n */\r\n","DeclarePrecedenceDeclaration":"clone0 subtreeMatch0 accept0 internalModifiersProperty internalModifiers2Property internalJavadocProperty propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty internalGetChildListProperty typePatterns treeSize JAVADOC_PROPERTY TYPE_PATTERNS_LIST_PROPERTY PROPERTY_DESCRIPTORS_2_0 PROPERTY_DESCRIPTORS_3_0 typePatterns org.aspectj.org.eclipse.jdt.core.dom.DeclarePrecedenceDeclaration  $NON-NLS-1$\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t * \r\n\t * There are no modifiers declared for DeclareErrorDeclaration - \r\n\t * therefore we don't do anything with this\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t * \r\n\t * There are no modifiers declared for DeclareErrorDeclaration - \r\n\t * therefore we don't do anything with this\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","Jdk14TraceFactory":"getTrace getTrace org.aspectj.weaver.tools.Jdk14TraceFactory org.aspectj.weaver.tools.Jdk14TraceFactory","InterimCompilationResult":"result unwovenClassFiles fileName equals hashCode result unwovenClassFiles org.aspectj.ajdt.internal.compiler.InterimCompilationResult  longer term would be nice not to have two copies of\r\n","IScanner":"getCurrentTokenSource getRawTokenSource getCurrentTokenStartPosition getCurrentTokenEndPosition getLineStart getLineEnd getLineEnds getLineNumber getNextToken getSource resetTo setSource org.aspectj.org.eclipse.jdt.core.compiler.IScanner","Messages":"put bind bind bind bind buildVariants initializeMessages load bind bind bind bind MOD_EXPECTED MOD_MASK serialVersionUID fields nlSuffixes EXTENSION BUNDLE_NAME compilation_unresolvedProblem compilation_unresolvedProblems compilation_request compilation_loadBinary compilation_process compilation_write compilation_done compilation_units compilation_unit compilation_internalError output_isFile output_notValidAll output_notValid problem_noSourceInformation problem_atLine abort_invalidAttribute abort_invalidExceptionAttribute abort_missingCode abort_againstSourceModel accept_cannot parser_incorrectPath parser_moveFiles parser_syntaxRecovery parser_regularParse parser_missingFile parser_corruptedFile parser_endOfFile parser_endOfConstructor parser_endOfMethod parser_endOfInitializer ast_missingCode constant_cannotCastedInto constant_cannotConvertedTo BUNDLE_NAME hierarchy_nullProject hierarchy_nullRegion hierarchy_nullFocusType hierarchy_creating hierarchy_creatingOnType element_doesNotExist element_notOnClasspath element_invalidClassFileName element_reconciling element_attachingSource element_invalidResourceForProject element_nullName element_nullType element_illegalParent javamodel_initialization javamodel_building_after_upgrade javamodel_configuring javamodel_configuring_classpath_containers javamodel_configuring_searchengine javamodel_getting_build_state_number javamodel_refreshing_external_jars operation_needElements operation_needName operation_needPath operation_needAbsolutePath operation_needString operation_notSupported operation_cancelled operation_nullContainer operation_nullName operation_copyElementProgress operation_moveElementProgress operation_renameElementProgress operation_copyResourceProgress operation_moveResourceProgress operation_renameResourceProgress operation_createUnitProgress operation_createFieldProgress operation_createImportsProgress operation_createInitializerProgress operation_createMethodProgress operation_createPackageProgress operation_createPackageFragmentProgress operation_createTypeProgress operation_deleteElementProgress operation_deleteResourceProgress operation_cannotRenameDefaultPackage operation_pathOutsideProject operation_sortelements workingCopy_commit build_preparingBuild build_readStateProgress build_saveStateProgress build_saveStateComplete build_readingDelta build_analyzingDeltas build_analyzingSources build_cleaningOutput build_copyingResources build_compiling build_foundHeader build_fixedHeader build_oneError build_oneWarning build_multipleErrors build_multipleWarnings build_done build_wrongFileFormat build_cannotSaveState build_cannotSaveStates build_initializationError build_serializationError build_classFileCollision build_duplicateClassFile build_duplicateResource build_inconsistentClassFile build_inconsistentProject build_incompleteClassPath build_missingSourceFile build_prereqProjectHasClasspathProblems build_prereqProjectMustBeRebuilt build_abortDueToClasspathProblems status_cannot_retrieve_attached_javadoc status_cannotUseDeviceOnPath status_coreException status_defaultPackageReadOnly status_evaluationError status_JDOMError status_IOException status_indexOutOfBounds status_invalidContents status_invalidDestination status_invalidName status_invalidPackage status_invalidPath status_invalidProject status_invalidResource status_invalidResourceType status_invalidSibling status_nameCollision status_noLocalContents status_OK status_readOnly status_targetException status_unknown_javadoc_format status_updateConflict classpath_buildPath classpath_cannotNestEntryInEntry classpath_cannotNestEntryInEntryNoExclusion classpath_cannotNestEntryInLibrary classpath_cannotNestEntryInOutput classpath_cannotNestOutputInEntry classpath_cannotNestOutputInOutput classpath_cannotReadClasspathFile classpath_cannotReferToItself classpath_cannotUseDistinctSourceFolderAsOutput classpath_cannotUseLibraryAsOutput classpath_closedProject classpath_couldNotWriteClasspathFile classpath_cycle classpath_duplicateEntryPath classpath_illegalContainerPath classpath_illegalEntryInClasspathFile classpath_illegalLibraryPath classpath_illegalLibraryArchive classpath_illegalExternalFolder classpath_illegalProjectPath classpath_illegalSourceFolderPath classpath_illegalVariablePath classpath_invalidClasspathInClasspathFile classpath_invalidContainer classpath_mustEndWithSlash classpath_unboundContainerPath classpath_unboundLibrary classpath_unboundProject classpath_settingOutputLocationProgress classpath_settingProgress classpath_unboundSourceAttachment classpath_unboundSourceFolder classpath_unboundVariablePath classpath_unknownKind classpath_xmlFormatError classpath_disabledInclusionExclusionPatterns classpath_disabledMultipleOutputLocations classpath_incompatibleLibraryJDKLevel classpath_duplicateEntryExtraAttribute classpath_deprecated_variable file_notFound file_badFormat path_nullPath path_mustBeAbsolute cache_invalidLoadFactor savedState_jobName restrictedAccess_project restrictedAccess_library restrictedAccess_constructor_project restrictedAccess_constructor_library restrictedAccess_field_project restrictedAccess_field_library restrictedAccess_method_project restrictedAccess_method_library convention_unit_nullName convention_unit_notJavaName convention_classFile_nullName convention_classFile_notClassFileName convention_illegalIdentifier convention_import_nullImport convention_import_unqualifiedImport convention_type_nullName convention_type_nameWithBlanks convention_type_dollarName convention_type_lowercaseName convention_type_invalidName convention_package_nullName convention_package_emptyName convention_package_dotName convention_package_nameWithBlanks convention_package_consecutiveDotsName convention_package_uppercaseName dom_cannotDetail dom_nullTypeParameter dom_nullNameParameter dom_nullReturnType dom_nullExceptionType dom_mismatchArgNamesAndTypes dom_addNullChild dom_addIncompatibleChild dom_addChildWithParent dom_unableAddChild dom_addAncestorAsChild dom_addNullSibling dom_addSiblingBeforeRoot dom_addIncompatibleSibling dom_addSiblingWithParent dom_addAncestorAsSibling dom_addNullInterface dom_nullInterfaces importRewrite_processDescription correction_nullRequestor correction_nullUnit engine_searching engine_searching_indexing engine_searching_matching exception_wrongFormat process_name manager_filesToIndex manager_indexingInProgress disassembler_description disassembler_opentypedeclaration disassembler_closetypedeclaration disassembler_parametername disassembler_localvariablename disassembler_endofmethodheader disassembler_begincommentline disassembler_fieldhasconstant disassembler_endoffieldheader disassembler_sourceattributeheader disassembler_enclosingmethodheader disassembler_exceptiontableheader disassembler_linenumberattributeheader disassembler_localvariabletableattributeheader disassembler_localvariabletypetableattributeheader disassembler_arraydimensions disassembler_innerattributesheader disassembler_inner_class_info_name disassembler_outer_class_info_name disassembler_inner_name disassembler_inner_accessflags disassembler_genericattributeheader disassembler_signatureattributeheader disassembler_indentation disassembler_constantpoolindex disassembler_space disassembler_comma disassembler_openinnerclassentry disassembler_closeinnerclassentry disassembler_deprecated disassembler_constantpoolheader disassembler_constantpool_class disassembler_constantpool_double disassembler_constantpool_float disassembler_constantpool_integer disassembler_constantpool_long disassembler_constantpool_string disassembler_constantpool_fieldref disassembler_constantpool_interfacemethodref disassembler_constantpool_methodref disassembler_constantpool_name_and_type disassembler_constantpool_utf8 disassembler_annotationdefaultheader disassembler_annotationdefaultvalue disassembler_annotationenumvalue disassembler_annotationclassvalue disassembler_annotationannotationvalue disassembler_annotationarrayvaluestart disassembler_annotationarrayvalueend disassembler_annotationentrystart disassembler_annotationentryend disassembler_annotationcomponent disassembler_runtimevisibleannotationsattributeheader disassembler_runtimeinvisibleannotationsattributeheader disassembler_runtimevisibleparameterannotationsattributeheader disassembler_runtimeinvisibleparameterannotationsattributeheader disassembler_parameterannotationentrystart disassembler_stackmaptableattributeheader disassembler_stackmapattributeheader classfileformat_versiondetails classfileformat_methoddescriptor classfileformat_fieldddescriptor classfileformat_stacksAndLocals classfileformat_superflagisnotset classfileformat_superflagisset classfileformat_clinitname classformat_classformatexception classformat_anewarray classformat_checkcast classformat_instanceof classformat_ldc_w_class classformat_ldc_w_float classformat_ldc_w_integer classformat_ldc_w_string classformat_ldc2_w_long classformat_ldc2_w_double classformat_multianewarray classformat_new classformat_iinc classformat_invokespecial classformat_invokeinterface classformat_invokestatic classformat_invokevirtual classformat_getfield classformat_getstatic classformat_putstatic classformat_putfield classformat_newarray_boolean classformat_newarray_char classformat_newarray_float classformat_newarray_double classformat_newarray_byte classformat_newarray_short classformat_newarray_int classformat_newarray_long classformat_store classformat_load classfileformat_anyexceptionhandler classfileformat_exceptiontableentry classfileformat_linenumbertableentry classfileformat_localvariabletableentry classfileformat_versionUnknown disassembler_frame_same_locals_1_stack_item_extended disassembler_frame_chop disassembler_frame_same_frame_extended disassembler_frame_append disassembler_frame_full_frame disassembler_frame_same_frame disassembler_frame_same_locals_1_stack_item org.aspectj.org.eclipse.jdt.internal.compiler.util.Messages org.aspectj.org.eclipse.jdt.internal.core.util.Messages  can only set value of public static non-final fields\r\n  will fail later in the code and if so then we will see both the NPE and this error.\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  build list of suffixes for loading resource bundles\r\n  add the empty suffix last (most general)\r\n  load the resource bundle and set the fields\r\n  iterate over the fields in the class to make sure that there aren't any empty ones\r\n  $NON-NLS-1$   will fail later in the code and if so then we will see both the NPE and this error.\r\n  search the dirs in reverse order so the cascading defaults is set correctly\r\n  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n\t\t * @see java.util.Hashtable#put(java.lang.Object, java.lang.Object)\r\n\t\t */\r\n /*\r\n\t * Build an array of directories to search\r\n\t */\r\n","Position":"getEnd getStart getEnd getStart start end start end org.aspectj.weaver.Position org.aspectj.weaver.Position /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","AjASTConverterFactory":"getASTConverter org.aspectj.ajdt.core.dom.AjASTConverterFactory","IEvaluationContext":"allVariables codeComplete codeComplete codeComplete codeComplete codeSelect codeSelect deleteVariable evaluateCodeSnippet evaluateCodeSnippet evaluateVariable getImports getPackageName getProject newVariable setImports setPackageName validateImports codeComplete org.aspectj.org.eclipse.jdt.core.eval.IEvaluationContext","Reflection":"invokestaticN invoke invoke invokeN getMatchingMethod isCompatible getStaticField runMainInSameVM runMainInSameVM runMainInSameVM makeURL invokestaticN invoke invoke invokeN getMatchingMethod isCompatible getStaticField runMainInSameVM runMainInSameVM runMainInSameVM makeURL MAIN_PARM_TYPES MAIN_PARM_TYPES org.aspectj.util.Reflection org.aspectj.util.Reflection  ignore methods with overloading other than lengths\r\n  }\r\n  ignore methods with overloading other than lengths\r\n  }\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","BindingResolver":"findDeclaringNode findDeclaringNode findDeclaringNode getCorrespondingNode getMethodBinding getMemberValuePairBinding getPackageBinding getTypeBinding getTypeBinding getTypeBinding getTypeBinding getVariableBinding getWorkingCopyOwner getAnnotationInstance isResolvedTypeInferredFromExpectedType isResolvedTypeInferredFromExpectedType lookupEnvironment recordScope resolveBoxing resolveUnboxing resolveConstantExpressionValue resolveConstructor resolveConstructor resolveConstructor resolveConstructor resolveExpressionType resolveField resolveField resolveImport resolveMember resolveMethod resolveMethod resolveMethod resolveName resolvePackage resolveReference resolveMemberValuePair resolveReference resolveType resolveType resolveType resolveType resolveType resolveTypeParameter resolveVariable resolveVariable resolveWellKnownType resolveAnnotation resolveArrayType scope store updateKey org.aspectj.org.eclipse.jdt.core.dom.BindingResolver","LineCommentEndOffsets":"getOffsets isEndOfLineComment isEndOfLineComment remove offsets commentList org.aspectj.org.eclipse.jdt.internal.core.dom.rewrite.LineCommentEndOffsets  create on demand\r\n  count the number of line comments\r\n  fill the offset table\r\n  returns the shared array\r\n  1, 2, 3, x, 4, 5 -> -1, 1, 2, 3, 4, 5\r\n","CommitWorkingCopyOperation":"executeOperation getCompilationUnit getSchedulingRule verify org.aspectj.org.eclipse.jdt.internal.core.CommitWorkingCopyOperation  case of a working copy without a resource\r\n  working copy on cu outside classpath OR resource doesn't exist yet\r\n  force opening so that the delta builder can get the old info\r\n  - and it is not a primary or it is a non-consistent primary\r\n  save the cu\r\n  for a primary working copy no need to set the content of the buffer again\r\n  restore original buffer contents since something went wrong\r\n  make sure working copy is in sync\r\n  add the deltas to the list of deltas created during this operation\r\n  build the deltas\r\n  operation.\r\n","ConstantUtf8":"accept dump getBytes setBytes toString accept dump getBytes setBytes toString bytes bytes org.aspectj.apache.bcel.classfile.ConstantUtf8 org.aspectj.apache.bcel.classfile.ConstantUtf8","ConstantFloat":"accept dump getBytes setBytes toString getConstantValue accept dump getBytes setBytes toString getConstantValue bytes bytes org.aspectj.apache.bcel.classfile.ConstantFloat org.aspectj.apache.bcel.classfile.ConstantFloat","SignatureWrapper":"atEnd computeEnd nextWord toString signature start end bracket org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SignatureWrapper  already know it if its > start\r\n  skip ';'\r\n  already know it if its > start\r\n  skip word\r\n  $NON-NLS-1$\r\n","CodeFormatter":"format createIndentationString format K_UNKNOWN K_EXPRESSION K_STATEMENTS K_CLASS_BODY_DECLARATIONS K_COMPILATION_UNIT K_SINGLE_LINE_COMMENT K_MULTI_LINE_COMMENT K_JAVA_DOC options org.aspectj.org.eclipse.jdt.core.formatter.CodeFormatter org.aspectj.org.eclipse.jdt.internal.formatter.old.CodeFormatter  initialize the new formatter with old options\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  update positions\r\n","ClassLoaderWeavingAdaptor":"acceptClass initialize parseDefinitions registerDefinitions getClassLoaderName registerOptions registerAspectExclude registerAspectInclude lint getContextId registerAspects weaveAndDefineConceteAspects registerIncludeExclude looksLikeStartsWith registerDump accept acceptAspect shouldDump getDumpDir getNamespace generatedClassesExistFor flushGeneratedClasses defineClass acceptClass initialize parseDefinitions registerDefinitions getClassLoaderName registerOptions registerAspectExclude registerAspectInclude lint getContextId registerAspects weaveAndDefineConceteAspects registerIncludeExclude looksLikeStartsWith registerDump accept acceptAspect shouldDump getDumpDir getNamespace generatedClassesExistFor flushGeneratedClasses defineClass AOP_XML initialized m_dumpTypePattern m_dumpBefore dumpDirPerClassloader m_includeTypePattern m_excludeTypePattern m_includeStartsWith m_excludeStartsWith m_aspectExcludeTypePattern m_aspectExcludeStartsWith m_aspectIncludeTypePattern m_aspectIncludeStartsWith namespace weavingContext concreteAspects trace loaderRef AOP_XML initialized m_dumpTypePattern m_dumpBefore dumpDirPerClassloader m_includeTypePattern m_excludeTypePattern m_includeStartsWith m_excludeStartsWith m_aspectExcludeTypePattern m_aspectExcludeStartsWith m_aspectIncludeTypePattern m_aspectIncludeStartsWith namespace weavingContext concreteAspects trace loaderRef org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor org.aspectj.weaver.loadtime.ClassLoaderWeavingAdaptor  could be done lazily using the hook\r\n  TODO maw Needed to ensure messages are flushed\r\n  TODO when the world works in terms of the context, we can remove\r\n  TODO when the world works in terms of the context, we can remove\r\n  the loader...\r\n  TODO when the world works in terms of the context, we can remove\r\n  register the definitions\r\n  after adding aspects\r\n  TODO maw Needed to ensure messages are flushed\r\n  TODO av dev mode needed ? TBD -Daj5.def=...\r\n  AV - code duplicates AspectJBuilder.initWorldAndWeaver()\r\n  AMC - autodetect as per line below, needed for AtAjLTWTests.testLTWUnweavable\r\n  FIXME should be AjBuildConfig.AJLINT_DEFAULT but yetanother deps..\r\n  warn(\"aspect excluded: \" + aspectClassName);\r\n  generate key for SC\r\n  exclude if in any of the exclude list\r\n  generate key for SC\r\n  exclude if in any of the exclude list - note that the user defined name matters for that to happen\r\n  and that \"charsss.*\" will not neither\r\n  no \"..\" before last sequence\r\n  no \"*\" before last sequence\r\n  avoid ResolvedType if not needed\r\n  still try to avoid ResolvedType if we have simple patterns\r\n  defaults to false if no fast include\r\n  BAD:\r\n  exclude match - skip\r\n  exclude are \"AND\"ed\r\n  defaults to true if no include\r\n  avoid ResolvedType if not needed\r\n  EXCLUDE: if one match then reject\r\n  INCLUDE: if one match then accept\r\n  needs further analysis\r\n  exclude match - skip\r\n  exclude are \"AND\"ed\r\n  defaults to true if no include\r\n  this can be nice but very dangerous as well to change that\r\n  Don't dump before weaving unless asked to\r\n  avoid ResolvedType if not needed\r\n  TODO AV - optimize for className.startWith only\r\n  dump match\r\n  dump\r\n  \", namespace=\" + namespace);\r\n  generatedClasses);\r\n  System.err.println(\"? ClassLoaderWeavingAdaptor.flushGeneratedClasses() generatedClasses=\" + generatedClasses);\r\n  TODO av protection domain, and optimize\r\n  could be done lazily using the hook\r\n  TODO maw Needed to ensure messages are flushed\r\n  TODO when the world works in terms of the context, we can remove\r\n  TODO when the world works in terms of the context, we can remove\r\n  the loader...\r\n  TODO when the world works in terms of the context, we can remove\r\n  register the definitions\r\n  after adding aspects\r\n  TODO maw Needed to ensure messages are flushed\r\n  TODO av dev mode needed ? TBD -Daj5.def=...\r\n  AV - code duplicates AspectJBuilder.initWorldAndWeaver()\r\n  AMC - autodetect as per line below, needed for AtAjLTWTests.testLTWUnweavable\r\n  FIXME should be AjBuildConfig.AJLINT_DEFAULT but yetanother deps..\r\n  warn(\"aspect excluded: \" + aspectClassName);\r\n  generate key for SC\r\n  exclude if in any of the exclude list\r\n  generate key for SC\r\n  exclude if in any of the exclude list - note that the user defined name matters for that to happen\r\n  and that \"charsss.*\" will not neither\r\n  no \"..\" before last sequence\r\n  no \"*\" before last sequence\r\n  avoid ResolvedType if not needed\r\n  still try to avoid ResolvedType if we have simple patterns\r\n  defaults to false if no fast include\r\n  BAD:\r\n  exclude match - skip\r\n  exclude are \"AND\"ed\r\n  defaults to true if no include\r\n  avoid ResolvedType if not needed\r\n  EXCLUDE: if one match then reject\r\n  INCLUDE: if one match then accept\r\n  needs further analysis\r\n  exclude match - skip\r\n  exclude are \"AND\"ed\r\n  defaults to true if no include\r\n  this can be nice but very dangerous as well to change that\r\n  Don't dump before weaving unless asked to\r\n  avoid ResolvedType if not needed\r\n  TODO AV - optimize for className.startWith only\r\n  dump match\r\n  dump\r\n  \", namespace=\" + namespace);\r\n  generatedClasses);\r\n  System.err.println(\"? ClassLoaderWeavingAdaptor.flushGeneratedClasses() generatedClasses=\" + generatedClasses);\r\n  TODO av protection domain, and optimize\r\n /* First load defaults */\r\n /* Second overlay LTW defaults */\r\n /* Third load user file using -Xlintfile so that -Xlint wins */\r\n /* Fourth override with -Xlint */\r\n /* ResolvedType aspect = */\r\n /* We didn't register any aspects so disable the adaptor */\r\n /* We couldn't register one or more aspects so disable the adaptor */\r\n /*\r\n\t\t * Bug 120363 If we have an exclude pattern that cannot be matched using \"starts with\" then we cannot fast accept\r\n\t\t */\r\n /* First load defaults */\r\n /* Second overlay LTW defaults */\r\n /* Third load user file using -Xlintfile so that -Xlint wins */\r\n /* Fourth override with -Xlint */\r\n /* ResolvedType aspect = */\r\n /* We didn't register any aspects so disable the adaptor */\r\n /* We couldn't register one or more aspects so disable the adaptor */\r\n /*\r\n\t\t * Bug 120363 If we have an exclude pattern that cannot be matched using \"starts with\" then we cannot fast accept\r\n\t\t */\r\n","StackMapTableAttribute":"getNumberOfEntries getStackMapFrame getBytes NO_FRAMES NO_ENTRIES numberOfEntries frames bytes org.aspectj.org.eclipse.jdt.internal.core.util.StackMapTableAttribute","LabeledStatement":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getLabel setLabel getBody setBody memSize treeSize analyseCode concreteStatement generateCode printStatement resolve traverse LABEL_PROPERTY BODY_PROPERTY PROPERTY_DESCRIPTORS labelName body statement label targetLabel labelEnd mergedInitStateIndex org.aspectj.org.eclipse.jdt.core.dom.LabeledStatement org.aspectj.org.eclipse.jdt.internal.compiler.ast.LabeledStatement  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  lazy init must be thread-safe for readers\r\n  for local variables table attributes\r\n  remember useful empty statement\r\n  an embedded loop has had no chance to reinject forgotten null info\r\n  with those relative to the exit path from break statement occurring inside the labeled statement.\r\n  return statement.concreteStatement();   May loose some local variable initializations : affecting the local variable attributes\r\n  $NON-NLS-1$\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","SelectionOnMessageSend":"findNonDefaultAbstractMethod printExpression resolveType org.aspectj.org.eclipse.jdt.internal.codeassist.select.SelectionOnMessageSend  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  23594\r\n  tolerate some error cases\r\n /*\r\n\t * Cannot answer default abstract match, iterate in superinterfaces of declaring class\r\n\t * for a better match (default abstract match came from scope lookups).\r\n\t */\r\n","MethodRefParameter":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty internalGetSetBooleanProperty getNodeType0 clone0 subtreeMatch0 accept0 getType setType isVarargs setVarargs getName setName memSize treeSize TYPE_PROPERTY VARARGS_PROPERTY NAME_PROPERTY PROPERTY_DESCRIPTORS_2_0 PROPERTY_DESCRIPTORS_3_0 type variableArity optionalParameterName org.aspectj.org.eclipse.jdt.core.dom.MethodRefParameter  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","AbortCompilation":"updateContext updateContext compilationResult exception problem isSilent silentException serialVersionUID org.aspectj.org.eclipse.jdt.internal.compiler.problem.AbortCompilation  backward compatible\r\n /* special fields used to abort silently (e.g. when cancelling build process) */\r\n /*\r\n * Special unchecked exception type used \r\n * to abort from the compilation process\r\n *\r\n * should only be thrown from within problem handlers.\r\n */\r\n","AJButtonMenuCombo":"actionPerformed actionPerformed mouseEntered mouseExited mousePressed mouseReleased maybeShowPopup setEnabled setMenu serialVersionUID mainButton popupButton menu isPressed button org.aspectj.ajde.ui.swing.AJButtonMenuCombo  private boolean depressable = false;\r\n  this.depressable = depressable;\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation\r\n *     Helen Hawkins  Converted to new interface (bug 148190)  \r\n * ******************************************************************/\r\n","ChildPropertyDescriptor":"getChildType isMandatory cycleRisk childClass mandatory cycleRisk org.aspectj.org.eclipse.jdt.core.dom.ChildPropertyDescriptor","AccessRestriction":"getMessageTemplate getConstructorAccessMessageTemplate getMethodAccessMessageTemplate getFieldAccessMessageTemplate getProblemId ignoreIfBetter accessRule messageTemplates org.aspectj.org.eclipse.jdt.internal.compiler.env.AccessRestriction","AttributeUtils":"readAttributes writeAttributes copy getSignatureAttribute getCodeAttribute getExceptionTableAttribute getConstantValueAttribute accept hasSyntheticAttribute getSourceFileAttribute readAttributes writeAttributes copy getSignatureAttribute getCodeAttribute getExceptionTableAttribute getConstantValueAttribute accept hasSyntheticAttribute getSourceFileAttribute org.aspectj.apache.bcel.classfile.AttributeUtils org.aspectj.apache.bcel.classfile.AttributeUtils","WhileStatement":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getExpression setExpression getBody setBody memSize treeSize analyseCode generateCode resolve printStatement traverse EXPRESSION_PROPERTY BODY_PROPERTY PROPERTY_DESCRIPTORS expression body condition action breakLabel continueLabel preCondInitStateIndex condIfTrueInitStateIndex mergedInitStateIndex org.aspectj.org.eclipse.jdt.core.dom.WhileStatement org.aspectj.org.eclipse.jdt.internal.compiler.ast.WhileStatement  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  lazy init must be thread-safe for readers\r\n  remember useful empty statement\r\n  or catch blocks\r\n  statement inside the looping action\r\n  for computing local var attributes\r\n  code generation can be optimized when no need to continue in the loop\r\n  recover upstream null info\r\n  end of loop\r\n  May loose some local variable initializations : affecting the local variable attributes\r\n  no need to reverse condition\r\n  generate condition\r\n  generate the action\r\n  insert all locals initialized inside the condition into the action generated prior to the condition\r\n  Required to fix 1PR0XVS: LFRE:WINNT - Compiler: variable table for method appears incorrect\r\n  May loose some local variable initializations : affecting the local variable attributes\r\n  output condition and branch back to the beginning of the repeated action\r\n  May loose some local variable initializations : affecting the local variable attributes\r\n  $NON-NLS-1$\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","DOMMember":"appendFragmentedContents appendMemberBodyContents appendMemberDeclarationContents appendMemberHeaderFragment appendSimpleContents appendString generateFlags getComment getFlags getMemberDeclarationStartPosition getModifiersText hasBody hasComment offset setComment setFlags setHasBody setHasComment setStartPosition shareContents fFlags fComment fCommentRange fModifiers fModifierRange org.aspectj.org.eclipse.jdt.internal.core.jdom.DOMMember  space before comment\r\n  $NON-NLS-1$\r\n /* see 1FVIJAH */\r\n","IRuntimeProperties":"getClassToExecute getExecutionArgs org.aspectj.ajde.IRuntimeProperties","BinaryMember":"copy generateInfos getCategories getKey getKey getNameRange getSourceRange isBinary isStructureKnown move rename setContents org.aspectj.org.eclipse.jdt.internal.core.BinaryMember  ensure the class file's buffer is open so that categories are computed\r\n  happen only if force open is true\r\n  ensure the class file's buffer is open so that source ranges are computed\r\n  ensure the class file's buffer is open so that source ranges are computed\r\n /*\r\n * Constructs a binary member.\r\n */\r\n /*\r\n * @see ISourceManipulation\r\n */\r\n /*\r\n * @see JavaElement#generateInfos\r\n */\r\n /*\r\n * @see ISourceReference\r\n */\r\n /*\r\n * @see ISourceReference\r\n */\r\n /*\r\n * @see IMember\r\n */\r\n /*\r\n * @see IJavaElement\r\n */\r\n /*\r\n * @see ISourceManipulation\r\n */\r\n /*\r\n * @see ISourceManipulation\r\n */\r\n /*\r\n * Sets the contents of this element.\r\n * Throws an exception as this element is read only.\r\n */\r\n","Bindings":"register mergeIn checkEquals toString getUsedFormals getUsedFormalTypes copy checkAllBound size register mergeIn checkEquals toString getUsedFormals getUsedFormalTypes copy checkAllBound size NONE bindings NONE bindings org.aspectj.weaver.patterns.Bindings org.aspectj.weaver.patterns.Bindings  done just to produce fewer error messages\r\n  done just to produce fewer error messages\r\n  System.out.println(\"used: \" + this);\r\n  System.out.println(\"ret: \" + index);\r\n  System.out.println(\"ret: \" + index);\r\n  System.arraycopy(bindings, 0, a, 0, len);\r\n  ATAJ: avoid warnings for implicit bindings\r\n  done just to produce fewer error messages\r\n  done just to produce fewer error messages\r\n  System.out.println(\"used: \" + this);\r\n  System.out.println(\"ret: \" + index);\r\n  System.out.println(\"ret: \" + index);\r\n  System.arraycopy(bindings, 0, a, 0, len);\r\n  ATAJ: avoid warnings for implicit bindings\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","InstructionHandle":"getNext getPrev getInstruction setInstruction getInstructionHandle updatePosition getPosition setPosition dispose removeAllTargeters removeTargeter addTargeter hasTargeters getTargetersArray getTargeters toString toString getNext getPrev getInstruction setInstruction getInstructionHandle updatePosition getPosition setPosition dispose removeAllTargeters removeTargeter addTargeter hasTargeters getTargetersArray getTargeters toString toString next prev instruction i_position targeters next prev instruction i_position targeters org.aspectj.apache.bcel.generic.InstructionHandle org.aspectj.apache.bcel.generic.InstructionHandle  Will be set from the outside\r\n  byte code offset of instruction\r\n  Overridden in BranchHandle\r\n  OPTIMIZE get rid of this? why do we need it\r\n  if(!targeters.contains(t))\r\n  Will be set from the outside\r\n  byte code offset of instruction\r\n  Overridden in BranchHandle\r\n  OPTIMIZE get rid of this? why do we need it\r\n  if(!targeters.contains(t))\r\n","HasAnnotation":"accept toString equals hashCode getVar getAnnotationType accept toString equals hashCode getVar getAnnotationType v annType v annType org.aspectj.weaver.ast.HasAnnotation org.aspectj.weaver.ast.HasAnnotation /* (non-Javadoc)\r\n     * @see org.aspectj.weaver.ast.Test#accept(org.aspectj.weaver.ast.ITestVisitor)\r\n     */\r\n /* (non-Javadoc)\r\n     * @see org.aspectj.weaver.ast.Test#accept(org.aspectj.weaver.ast.ITestVisitor)\r\n     */\r\n","ObjectType":"toSignature getClassName hashCode equals referencesClass referencesInterface subclassOf accessibleTo toSignature getClassName hashCode equals referencesClass referencesInterface subclassOf accessibleTo class_name class_name org.aspectj.apache.bcel.generic.ObjectType org.aspectj.apache.bcel.generic.ObjectType  Class name of type\r\n  \"L\" + class_name.replace('.', '  .replace('  Class name of type\r\n  \"L\" + class_name.replace('.', '  .replace(' /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n","BindingTypePattern":"getFormalIndex equals hashCode write read remapAdviceFormals parameterizeWith toString getFormalIndex equals hashCode write read remapAdviceFormals parameterizeWith toString formalIndex formalIndex org.aspectj.weaver.patterns.BindingTypePattern org.aspectj.weaver.patterns.BindingTypePattern  Thread.currentThread().dumpStack();\r\n  Thread.currentThread().dumpStack();\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","SourceIndexer":"indexDocument org.aspectj.org.eclipse.jdt.internal.core.search.indexing.SourceIndexer  Create a new Parser\r\n  Launch the parser\r\n  could not retrieve document info (e.g. resource was discarded)\r\n","TypeDeclarationPattern":"add rehash createIndexKey decodeIndexKey decodeModifiers getBlankPattern getIndexCategories matchesDecodedKey queryIn print simpleName pkg enclosingTypeNames typeSuffix modifiers secondary CATEGORIES internedPackageNames names elementSize threshold org.aspectj.org.eclipse.jdt.internal.core.search.matching.TypeDeclarationPattern  set to TYPE_SUFFIX for matching both classes and interfaces\r\n  want to save space by interning the package names for each match\r\n  number of elements in the table\r\n  size represents the expected number of elements\r\n  assumes the threshold is never equal to the size of the table\r\n  double the number of expected elements\r\n  , char typeSuffix) {\r\n  for the '.' separator\r\n  Continue key read by the end to decode modifiers\r\n  Retrieve enclosing type names\r\n  position of ending slash\r\n  Extract suffix from modifiers instead of index key\r\n  check type suffix\r\n  check name\r\n  check package - exact match only\r\n  is a local or anonymous type\r\n  check enclosingTypeNames - exact match only\r\n  can be null\r\n  do a prefix query with the simpleName\r\n  do a prefix query with the simpleName and possibly the pkg\r\n  key = new char[] {ONE_STAR[0],  SEPARATOR, ONE_STAR[0]};\r\n  do a pattern query with the current encoded key\r\n  must decode to check enclosingTypeNames due to the encoding of local types\r\n  fall thru to encode the key and do a pattern query\r\n  TODO (frederic) implement regular expression match\r\n  match rule is irrelevant when the key is null\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n * Create index key for type declaration pattern:\r\n *\t\tkey = typeName / packageName / enclosingTypeName / modifiers\r\n * or for secondary types\r\n *\t\tkey = typeName / packageName / enclosingTypeName / modifiers / 'S'\r\n */\r\n /*\r\n * Type entries are encoded as:\r\n * \tsimpleTypeName / packageName / enclosingTypeName / modifiers\r\n *\t\t\te.g. Object/java.lang//0\r\n * \t\te.g. Cloneable/java.lang//512\r\n * \t\te.g. LazyValue/javax.swing/UIDefaults/0\r\n * or for secondary types as:\r\n * \tsimpleTypeName / packageName / enclosingTypeName / modifiers / S\r\n */\r\n","HandleFactory":"createOpenable createElement createElement getJarPkgFragmentRoot getJarPkgFragmentRoot getPkgFragmentRoot lastPkgFragmentRootPath lastPkgFragmentRoot packageHandles javaModel org.aspectj.org.eclipse.jdt.internal.core.util.HandleFactory  Optimization: cache package fragment root handle and package handles\r\n  match is outside classpath\r\n  create handle\r\n  Optimization: cache package fragment root handle and package handles\r\n  match is outside classpath\r\n  create handle\r\n  increment occurrence count if collision is detected\r\n  method element\r\n  inside field or initializer, must find proper one\r\n  standard block, no element per se\r\n  is NOT on the classpath of org.eclipse.swt.win32\r\n  walk projects in the scope and find the first one that has the given jar path in its classpath\r\n  java model is not accessible\r\n  not found in the scope, walk all projects\r\n  external jar\r\n  internal jar\r\n","IInnerClassesAttribute":"getNumberOfClasses getInnerClassAttributesEntries org.aspectj.org.eclipse.jdt.core.util.IInnerClassesAttribute","RecoveredElement":"add add add add add add add addBlockStatement depth enclosingInitializer enclosingMethod enclosingType parser parseTree preserveEnclosingBlocks previousAvailableLineEnd sourceEnd tabString topElement toString toString type updateBodyStart updateFromParserState updateOnClosingBrace updateOnOpeningBrace updateParseTree updateSourceEndIfNecessary updateSourceEndIfNecessary parent bracketBalance foundOpeningBrace recoveringParser org.aspectj.org.eclipse.jdt.internal.compiler.parser.RecoveredElement  ignore\r\n  ignore\r\n  ignore\r\n  ignore\r\n  ignore\r\n  ignore\r\n  ignore\r\n  for anonymous types\r\n  $NON-NLS-1$\r\n  no update is necessary\r\n /*\r\n *\tRecord a method declaration\r\n */\r\n /*\r\n * Record a nested block declaration\r\n */\r\n /*\r\n * Record a field declaration\r\n */\r\n /*\r\n *\tRecord an import reference\r\n */\r\n /*\r\n * Record a local declaration\r\n */\r\n /*\r\n * Record a statement\r\n */\r\n /*\r\n *\tRecord a type declaration\r\n */\r\n /*\r\n * Answer the depth of this element, considering the parent link.\r\n */\r\n /*\r\n * Answer the enclosing method node, or null if none\r\n */\r\n /*\r\n * Answer the enclosing method node, or null if none\r\n */\r\n /*\r\n * Answer the enclosing type node, or null if none\r\n */\r\n /*\r\n * Answer the closest specified parser\r\n */\r\n /* \r\n * Answer the associated parsed structure\r\n */\r\n /*\r\n * Iterate the enclosing blocks and tag them so as to preserve their content\r\n */\r\n /*\r\n * Answer the position of the previous line end if\r\n * there is nothing but spaces in between it and the\r\n * line end. Used to trim spaces on unclosed elements.\r\n */\r\n /*\r\n * Answer the very source end of the corresponding parse node\r\n */\r\n /*\r\n * Answer the top node\r\n */\r\n /*\r\n * Answer the enclosing type node, or null if none\r\n */\r\n /*\r\n * Update the bodyStart of the corresponding parse node\r\n */\r\n /*\r\n * Update the corresponding parse node from parser state which\r\n * is about to disappear because of restarting recovery\r\n */\r\n /*\r\n * A closing brace got consumed, might have closed the current element,\r\n * in which case both the currentElement is exited\r\n */\r\n /*public RecoveredElement updateOnOpeningBrace(int braceEnd){return null;}*/\r\n /*\r\n * Final update the corresponding parse node\r\n */\r\n /*\r\n * Update the declarationSourceEnd of the corresponding parse node\r\n */\r\n","SourceFieldElementInfo":"getInitializationSource getTypeName getTypeSignature setTypeName typeName initializationSource org.aspectj.org.eclipse.jdt.internal.core.SourceFieldElementInfo /*\r\n * Returns the initialization source for this field.\r\n * Returns null if the field is not a constant or if it has no initialization.\r\n */\r\n","CompoundAssignment":"analyseCode generateCode nullStatus operatorToString printExpressionNoParenthesis resolveType restrainUsageToNumericTypes traverse operator preAssignImplicitConversion org.aspectj.org.eclipse.jdt.internal.compiler.ast.CompoundAssignment  tag lhs as NON assigned - it is also a read access\r\n  tag lhs as assigned by compound\r\n  just a local variable.\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  autoboxing support\r\n  String += Thread is valid whereas Thread += String  is not\r\n  use the Object has tag table\r\n  the conversion is stored INTO the reference (info needed for the code gen)\r\n  <int | boolean> += <String> is illegal\r\n  <Object> += <String> is illegal (39248)\r\n","JavaOtherOptionsPanel":"loadOptions saveOptions jbInit createOtherContents createBorders addBordersToPanel serialVersionUID parentPanel otherEtchedBorder otherTitleBorder otherCompoundBorder otherPanel otherBox javaBuildOptions characterEncoding org.aspectj.ajde.ui.javaoptions.JavaOtherOptionsPanel","PackageFragmentRoot":"attachSource buildStructure createSourceMapper delete computeChildren computeFolderChildren copy createElementInfo createPackageFragment determineKind equals exists findSourceAttachmentRecommendation fullExclusionPatternChars fullInclusionPatternChars getElementName getElementType getHandleMementoDelimiter getHandleFromMemento getHandleMemento getKind getNonJavaResources getPackageFragment getPackageFragment getPackageName getPath getRawClasspathEntry getResource getSourceAttachmentPath setSourceMapper getSourceAttachmentRootPath getSourceMapper getUnderlyingResource hasChildren hashCode isArchive isExternal validateOnClasspath move toStringInfo verifyAttachSource ATTACHMENT_PROPERTY_DELIMITER NO_SOURCE_ATTACHMENT resource org.aspectj.org.eclipse.jdt.internal.core.PackageFragmentRoot  $NON-NLS-1$\r\n  loose info - will be recomputed\r\n  check if different from the current attachment\r\n  check if source path is valid\r\n  as a side effect of calling the SourceMapper constructor, the root path was computed\r\n  source being detached\r\n  $NON-NLS-1$\r\n  set the property to the path of the mapped source\r\n  remove the property\r\n  check whether this pkg fragment root can be opened\r\n  cannot use workspace options if external jar is 1.5 jar and workspace options are 1.4 options\r\n  problem resolving children; structure remains unknown\r\n  is actually the package fragment root)\r\n  Howver they are opened for a Jar package fragment root (see JarPackageFragmentRoot#computeChildren)\r\n  could be thrown by ElementTree when path is not found\r\n  eliminate binary output only if nested inside direct subfolders\r\n  (see https:  inclusion filter may only include files, in which case we still want to include the immediate parent package (lazily)\r\n  try on enclosing project first\r\n  external directory\r\n  iterate over all projects\r\n  already done\r\n  external directory\r\n  $NON-NLS-1$\r\n  external jar\r\n  internal jar or regular root\r\n  tolerate package names with spaces (e.g. 'x . y') (http:  force the reverse rawEntry cache to be populated\r\n  1) look source attachment property (set iff attachSource(...) was called\r\n  no root path specified\r\n  2) look at classpath entry\r\n  3) look for a recommendation\r\n  1) look source attachment property (set iff attachSource(...) was called\r\n  2) look at classpath entry\r\n  3) look for a recomendation\r\n  no source can be attached\r\n  first call to this method\r\n  attach root to itself\r\n  a package fragment root always has the default package as a child\r\n  could not read classpath, then assume it is outside\r\n  check package fragment root on classpath of its project\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n * @see org.aspectj.org.eclipse.jdt.core.IPackageFragmentRoot#delete\r\n */\r\n /*\r\n * @see org.aspectj.org.eclipse.jdt.core.IPackageFragmentRoot#copy\r\n */\r\n /*\r\n * Returns the exclusion patterns from the classpath entry associated with this root.\r\n */\r\n /*\r\n * Returns the inclusion patterns from the classpath entry associated with this root.\r\n */\r\n /*\r\n * @see JavaElement\r\n */\r\n /*\r\n * @see IPackageFragmentRoot \r\n */\r\n /*\r\n * @see IJavaElement\r\n */\r\n /*\r\n * Validate whether this package fragment root is on the classpath of its project.\r\n */\r\n /*\r\n * @see org.aspectj.org.eclipse.jdt.core.IPackageFragmentRoot#move\r\n */\r\n","AjTypeImpl":"getName getPackage getInterfaces getModifiers getJavaClass getSupertype getGenericSupertype getEnclosingMethod getEnclosingConstructor getEnclosingType getDeclaringType getPerClause isAnnotationPresent getAnnotation getAnnotations getDeclaredAnnotations getAjTypes getDeclaredAjTypes getConstructor getConstructors getDeclaredConstructor getDeclaredConstructors getDeclaredField getDeclaredFields getField getFields getDeclaredMethod getMethod getDeclaredMethods getMethods isReallyAMethod getDeclaredPointcut getPointcut getDeclaredPointcuts getPointcuts asPointcut getDeclaredAdvice getAdvice getDeclaredAdvice initDeclaredAdvice getAdvice initAdvice getAdvice getDeclaredAdvice asAdvice getDeclaredITDMethod getDeclaredITDMethods getITDMethod getITDMethods addAnnotationStyleITDMethods addAnnotationStyleITDFields getDeclaredITDConstructor getDeclaredITDConstructors getITDConstructor getITDConstructors getDeclaredITDField getDeclaredITDFields getITDField getITDFields getDeclareErrorOrWarnings getDeclareParents addAnnotationStyleDeclareParents getDeclareSofts getDeclareAnnotations getDeclarePrecedence getEnumConstants getTypeParameters isEnum isInstance isInterface isLocalClass isMemberClass isArray isPrimitive isAspect isMemberAspect isPrivileged equals hashCode toAjTypeArray toClassArray toString getName getPackage getInterfaces getModifiers getJavaClass getSupertype getGenericSupertype getEnclosingMethod getEnclosingConstructor getEnclosingType getDeclaringType getPerClause isAnnotationPresent getAnnotation getAnnotations getDeclaredAnnotations getAjTypes getDeclaredAjTypes getConstructor getConstructors getDeclaredConstructor getDeclaredConstructors getDeclaredField getDeclaredFields getField getFields getDeclaredMethod getMethod getDeclaredMethods getMethods isReallyAMethod getDeclaredPointcut getPointcut getDeclaredPointcuts getPointcuts asPointcut getDeclaredAdvice getAdvice getDeclaredAdvice initDeclaredAdvice getAdvice initAdvice getAdvice getDeclaredAdvice asAdvice getDeclaredITDMethod getDeclaredITDMethods getITDMethod getITDMethods addAnnotationStyleITDMethods addAnnotationStyleITDFields getDeclaredITDConstructor getDeclaredITDConstructors getITDConstructor getITDConstructors getDeclaredITDField getDeclaredITDFields getITDField getITDFields getDeclareErrorOrWarnings getDeclareParents addAnnotationStyleDeclareParents getDeclareSofts getDeclareAnnotations getDeclarePrecedence getEnumConstants getTypeParameters isEnum isInstance isInterface isLocalClass isMemberClass isArray isPrimitive isAspect isMemberAspect isPrivileged equals hashCode toAjTypeArray toClassArray toString ajcMagic clazz declaredPointcuts pointcuts declaredAdvice advice declaredITDMethods itdMethods declaredITDFields itdFields itdCons declaredITDCons ajcMagic clazz declaredPointcuts pointcuts declaredAdvice advice declaredITDMethods itdMethods declaredITDFields itdFields itdCons declaredITDCons org.aspectj.internal.lang.reflect.AjTypeImpl org.aspectj.internal.lang.reflect.AjTypeImpl  extract real name\r\n  doesn't contribute members...\r\n  @AJ decp is interface driven ie no field\r\n  the target annotation is on this method...\r\n  this must be the one...\r\n  @AspectJ Style\r\n  annotated code-style\r\n  extract real name\r\n  doesn't contribute members...\r\n  @AJ decp is interface driven ie no field\r\n  the target annotation is on this method...\r\n  this must be the one...\r\n  @AspectJ Style\r\n  annotated code-style\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getName()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getPackage()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getInterfaces()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getModifiers()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getSupertype()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getGenericSupertype()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getEnclosingMethod()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getEnclosingConstructor()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getEnclosingType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaringType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#isAnnotationPresent(java.lang.Class)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getAnnotations()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredAnnotations()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getAspects()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredAspects()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getConstructor(java.lang.Class...)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getConstructors()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredConstructor(java.lang.Class...)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredConstructors()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredField(java.lang.String)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredFields()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getField(java.lang.String)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getFields()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredMethod(java.lang.String, java.lang.Class...)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getMethod(java.lang.String, java.lang.Class...)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredMethods()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getMethods()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredPointcut(java.lang.String)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getPointcut(java.lang.String)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredPointcuts()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getPointcuts()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredAdvice(org.aspectj.lang.reflect.AdviceType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredAdvice(org.aspectj.lang.reflect.AdviceType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredITDMethod(java.lang.String, java.lang.Class, java.lang.Class...)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredITDMethods()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getITDMethod(java.lang.String, java.lang.Class, java.lang.Class...)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getITDMethods()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredITDConstructor(java.lang.Class, java.lang.Class...)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredITDConstructors()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getITDConstructor(java.lang.Class, java.lang.Class...)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getITDConstructors()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredITDField(java.lang.String, java.lang.Class)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredITDFields()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getITDField(java.lang.String, java.lang.Class)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getITDFields()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclareErrorOrWarnings()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclareParents()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclareSofts()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclareAnnotations()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclarePrecedence()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getEnumConstants()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getTypeParameters()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#isEnum()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#isInstance(java.lang.Object)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#isInterface()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#isLocalClass()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#isMemberClass()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#isArray()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#isPrimitive()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#isAspect()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#isMemberAspect()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getName()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getPackage()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getInterfaces()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getModifiers()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getSupertype()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getGenericSupertype()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getEnclosingMethod()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getEnclosingConstructor()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getEnclosingType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaringType()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#isAnnotationPresent(java.lang.Class)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getAnnotations()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredAnnotations()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getAspects()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredAspects()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getConstructor(java.lang.Class...)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getConstructors()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredConstructor(java.lang.Class...)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredConstructors()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredField(java.lang.String)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredFields()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getField(java.lang.String)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getFields()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredMethod(java.lang.String, java.lang.Class...)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getMethod(java.lang.String, java.lang.Class...)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredMethods()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getMethods()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredPointcut(java.lang.String)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getPointcut(java.lang.String)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredPointcuts()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getPointcuts()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredAdvice(org.aspectj.lang.reflect.AdviceType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredAdvice(org.aspectj.lang.reflect.AdviceType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredITDMethod(java.lang.String, java.lang.Class, java.lang.Class...)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredITDMethods()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getITDMethod(java.lang.String, java.lang.Class, java.lang.Class...)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getITDMethods()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredITDConstructor(java.lang.Class, java.lang.Class...)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredITDConstructors()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getITDConstructor(java.lang.Class, java.lang.Class...)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getITDConstructors()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredITDField(java.lang.String, java.lang.Class)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclaredITDFields()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getITDField(java.lang.String, java.lang.Class)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getITDFields()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclareErrorOrWarnings()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclareParents()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclareSofts()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclareAnnotations()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getDeclarePrecedence()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getEnumConstants()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#getTypeParameters()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#isEnum()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#isInstance(java.lang.Object)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#isInterface()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#isLocalClass()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#isMemberClass()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#isArray()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#isPrimitive()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#isAspect()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.AjType#isMemberAspect()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","ParserBasicInformation":"ERROR_SYMBOL MAX_NAME_LENGTH NUM_STATES NT_OFFSET SCOPE_UBOUND SCOPE_SIZE LA_STATE_OFFSET MAX_LA NUM_RULES NUM_TERMINALS NUM_NON_TERMINALS NUM_SYMBOLS START_STATE EOFT_SYMBOL EOLT_SYMBOL ACCEPT_ACTION ERROR_ACTION org.aspectj.org.eclipse.jdt.internal.compiler.parser.ParserBasicInformation /*An interface that contains static declarations for some basic information\r\n about the parser such as the number of rules in the grammar, the starting state, etc...*/\r\n","EditorAdapter":"showSourceLine showSourceLine showSourceLine getCurrFile saveContents pasteToCaretPos showSourcelineAnnotation org.aspectj.ajde.EditorAdapter /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","ClasspathVariableInitializer":"initialize org.aspectj.org.eclipse.jdt.core.ClasspathVariableInitializer","ajcDeclarePrecedence":"/* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","AfterReturningAdviceDeclaration":"propertyDescriptors internalGetSetChildProperty getReturning setReturning clone0 treeSize accept0 returningJAVADOC_PROPERTY returningPARAMETERS_PROPERTY returningPOINTCUT_PROPERTY returningTHROWN_EXCEPTIONS_PROPERTY returningBODY_PROPERTY returningPROPERTY_DESCRIPTORS_2_0 returningPROPERTY_DESCRIPTORS_3_0 returningRETURNING_PROPERTY returning org.aspectj.org.eclipse.jdt.core.dom.AfterReturningAdviceDeclaration  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  visit children in normal left to right reading order\r\n","RecoveredBlock":"add add add add add add add add attach parseTree toString updatedBlock updatedStatement updateOnClosingBrace updateOnOpeningBrace updateParseTree updateStatement add blockDeclaration statements statementCount preserveContent pendingArgument org.aspectj.org.eclipse.jdt.internal.compiler.parser.RecoveredBlock  ignore this element\r\n  if we have a pending Argument, promote it into the new block\r\n  ignore\r\n  ignore\r\n  ignore\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  if block was not marked to be preserved or empty, then ignore it\r\n  may need to update the end of the last statement\r\n  only collect the non-null updated statements\r\n  not interesting block\r\n  resize statement collection if necessary\r\n  create a nested block\r\n  if block was closed or empty, then ignore it\r\n  only collect the non-null updated statements\r\n  not interesting block\r\n  resize statement collection if necessary\r\n  local var can only be final\r\n  initializer\r\n  non void\r\n  having reduced an assistNode to get the following context (see 1GEK7SG)\r\n /* do not consider a nested block starting passed the block end (if set)\r\n\t\tit must be belonging to an enclosing block */\r\n /*\r\n * Record a nested block declaration \r\n */\r\n /*\r\n * Record a local declaration \r\n */\r\n /* do not consider a local variable starting passed the block end (if set)\r\n\t\tit must be belonging to an enclosing block */\r\n /*\r\n * Record a local declaration \r\n */\r\n /*\r\n * Record a statement declaration \r\n */\r\n /* do not consider a nested block starting passed the block end (if set)\r\n\t\tit must be belonging to an enclosing block */\r\n /*\r\n * Record a statement declaration \r\n */\r\n /*\r\n * Addition of a type to an initializer (act like inside method body)\r\n */\r\n /* do not consider a type starting passed the block end (if set)\r\n\t\tit must be belonging to an enclosing block */\r\n /*\r\n * Addition of a type to an initializer (act like inside method body)\r\n */\r\n /*\r\n * Attach a recovered statement\r\n */\r\n /* \r\n * Answer the associated parsed structure\r\n */\r\n /*\r\n * Rebuild a block from the nested structure which is in scope\r\n */\r\n /*\r\n * Rebuild a statement from the nested structure which is in scope\r\n */\r\n /* if the block is the method body, then it closes the method too */\r\n /*\r\n * A closing brace got consumed, might have closed the current element,\r\n * in which case both the currentElement is exited\r\n */\r\n /*\r\n * An opening brace got consumed, might be the expected opening one of the current element,\r\n * in which case the bodyStart is updated.\r\n */\r\n /*\r\n * Final update the corresponding parse node\r\n */\r\n /*\r\n * Rebuild a flattened block from the nested structure which is in scope\r\n */\r\n /* local variables inside method can only be final and non void */\r\n /* do not consider a local variable starting passed the block end (if set)\r\n\t\tit must be belonging to an enclosing block */\r\n /*\r\n * Record a field declaration \r\n */\r\n","AnnotationAccessVar":"getKind toString createLoad createStore createCopyFrom appendLoad appendLoadAndConvert insertLoad createLoadInstructions buildArray getMember getAccessorForValue getKind toString createLoad createStore createCopyFrom appendLoad appendLoadAndConvert insertLoad createLoadInstructions buildArray getMember getAccessorForValue kind containingType member kind containingType member org.aspectj.weaver.bcel.AnnotationAccessVar org.aspectj.weaver.bcel.AnnotationAccessVar  What kind of shadow are we at?\r\n  The type upon which we want to ask for 'member'\r\n  Holds the member that has the annotations (for method  annotations for fieldset  Stick the target on the stack\r\n  Stick what we are after on the stack\r\n  annotations for fieldset  init  needs the same annotations?\r\n  the same annotations?\r\n  fact.createConstant(new ObjectType(toType.getName())));\r\n  FIXME should be getName() and not\r\n  getSignature()?\r\n  What kind of shadow are we at?\r\n  The type upon which we want to ask for 'member'\r\n  Holds the member that has the annotations (for method  annotations for fieldset  Stick the target on the stack\r\n  Stick what we are after on the stack\r\n  annotations for fieldset  init  needs the same annotations?\r\n  the same annotations?\r\n  fact.createConstant(new ObjectType(toType.getName())));\r\n  FIXME should be getName() and not\r\n  getSignature()?\r\n /* *******************************************************************\r\n * Copyright (c) 2005-2008 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005-2008 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement     initial implementation \r\n * ******************************************************************/\r\n","Annotation":"internalTypeNameProperty getTypeNameProperty internalTypeNamePropertyFactory isModifier isAnnotation getTypeName setTypeName isNormalAnnotation isMarkerAnnotation isSingleMemberAnnotation memSize resolveAnnotationBinding getRetentionPolicy getTargetElementType computeElementValuePairs detectStandardAnnotation getCompilerAnnotation memberValuePairs printExpression recordSuppressWarnings resolveType traverse getTypeIndex getComponentsNumber getComponents sizeInBytes getTypeName typeName NoValuePairs declarationSourceEnd recipient type compilerAnnotation NO_ENTRIES typeIndex typeName componentsNumber components readOffset org.aspectj.org.eclipse.jdt.core.dom.Annotation org.aspectj.org.eclipse.jdt.internal.compiler.ast.Annotation org.aspectj.org.eclipse.jdt.internal.core.util.Annotation  $NON-NLS-1$\r\n  lazy init must be thread-safe for readers\r\n  unknown\r\n  unknown\r\n  New AspectJ Extension (pr148537)\r\n  retention annotation\r\n  target specified (could be empty)\r\n  target annotation\r\n  marker annotations\r\n  ensure type refers to an annotation type\r\n  clone valuePairs to keep track of unused ones\r\n  remember the first 'value' pair\r\n  consumed\r\n  check duplicates\r\n  resilient\r\n  check unused pairs\r\n  if (scope.compilerOptions().storeAnnotations)\r\n  recognize standard annotations ?\r\n  record annotation positions in the compilation result\r\n  tag bits onto recipient\r\n  could be forward reference\r\n  does not specify any target restriction\r\n  check (meta)target compatibility\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IAnnotation#getTypeIndex()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IAnnotation#getComponentsNumber()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IAnnotation#getComponents()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.IAnnotation#getTypeName()\r\n\t */\r\n","ILineStartFinder":"getLineStart org.aspectj.org.eclipse.jdt.internal.core.jdom.ILineStartFinder","UtilClassLoader":"getResource getResourceAsStream loadClass readClass getClassData toString getResource getResourceAsStream loadClass readClass getClassData toString dirs urlsForDebugString dirs urlsForDebugString org.aspectj.util.UtilClassLoader org.aspectj.util.UtilClassLoader  and our dirs again (if not maybe test)\r\n  resolved by superclass\r\n  and our dirs again (if not maybe test)\r\n  resolved by superclass\r\n /*File*/\r\n /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Isberg        initial implementation \r\n * ******************************************************************/\r\n /*File*/\r\n /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Isberg        initial implementation \r\n * ******************************************************************/\r\n","ISearchRequestor":"acceptType acceptPackage org.aspectj.org.eclipse.jdt.internal.codeassist.ISearchRequestor","SelectionOnQualifiedTypeReference":"aboutToResolve getTypeBinding printExpression org.aspectj.org.eclipse.jdt.internal.codeassist.select.SelectionOnQualifiedTypeReference  step up from the ClassScope\r\n  it can be a package, type or member type\r\n  tolerate some error cases\r\n  $NON-NLS-1$\r\n","InstructionLV":"dump toString isALOAD isASTORE getBaseOpcode getIndex setIndex canSetIndex setIndexAndCopyIfNecessary getLength wide dump toString isALOAD isASTORE getBaseOpcode getIndex setIndex canSetIndex setIndexAndCopyIfNecessary getLength wide lvar lvar org.aspectj.apache.bcel.generic.InstructionLV org.aspectj.apache.bcel.generic.InstructionLV  not an optimized instruction\r\n  optimize!\r\n  means we need to should adjust to a normal aload  }\r\n  not an optimized instruction\r\n  optimize!\r\n  means we need to should adjust to a normal aload  }\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n","IAttribute":"getNameChars getAllBytes org.aspectj.org.eclipse.jdt.internal.compiler.IAttribute","SuperTypeReferenceLocator":"match matchContainer matchReportReference referenceType resolveLevel resolveLevel toString pattern org.aspectj.org.eclipse.jdt.internal.core.search.matching.SuperTypeReferenceLocator  QualifiedTypeReference\r\n  public int match(TypeDeclaration node, MatchingNodeSet nodeSet) - SKIP IT\r\n  do not report class if expected types are only interfaces\r\n  do not report interface if expected types are only classes\r\n  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.internal.core.search.matching.PatternLocator#matchReportReference(org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode, org.aspectj.org.eclipse.jdt.core.IJavaElement, org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Binding, int, org.aspectj.org.eclipse.jdt.internal.core.search.matching.MatchLocator)\r\n */\r\n","CompletionEngine":"createProblem startCheckingProblems stopCheckingProblems toString genericTypeArguments isSuperAccess isTypeAccess setActualReceiverType setDepth setFieldIndex sourceStart sourceEnd acceptType acceptTypes acceptUnresolvedName areParametersCompatibleWith proposeType acceptPackage buildContext complete complete parseSnippeInitializer complete computeTargetedElement computeTypes computeTypesIfCorrect findAnnotationAttributes findAnonymousType findClassField findEnumConstant findExceptionFromTryStatement findExceptionFromTryStatement findExplicitConstructors findConstructors findEnclosingTypeNames findFields findFields findFieldsAndMethods findFieldsAndMethodsFromFavorites findFieldsAndMethodsFromMissingFieldType findFieldsAndMethodsFromMissingReturnType findFieldsAndMethodsFromMissingType findFieldsFromFavorites findImports findImportsOfMemberTypes findImportsOfStaticFields findImportsOfStaticMethods findJavadocBlockTags findJavadocInlineTags findKeywords findTrueOrFalseKeywords findKeywordsForMember findMemberTypes findMemberTypes findMemberTypes findJavadocParamNames findSubMemberTypes findInterfacesMethods findImplicitMessageSends findLocalMethods findLocalMethodsFromFavorites createRequiredTypeProposal findLocalMethodsOfStaticImports computeRelevanceForCaseMatching computeRelevanceForAnnotation computeRelevanceForAnnotationTarget computeRelevanceForClass computeRelevanceForEnum computeRelevanceForInterface computeRelevanceForMissingElements computeRelevanceForQualification computeRelevanceForRestrictions computeRelevanceForStatic computeRelevanceForException computeRelevanceForException computeRelevanceForExpectingType computeRelevanceForExpectingType computeRelevanceForInheritance computeRelevanceForInterestingProposal computeRelevanceForInterestingProposal computeUninterestingBindings findLabels findLocalMethodDeclarations createTypeVariable createType createVargsType createImportCharArray createMethod isIgnored isIgnored isIgnored findMethods findMethodParameterNames findNestedTypes findPackages findParameterizedType findTypeParameters findTypesAndPackages findTypesAndSubpackages findTypesFromStaticImports findVariablesAndMethods findVariableFromUnresolvedReference findUnresolvedReferenceAfter findUnresolvedReference findUnresolvedReferenceBefore findVariableName findVariableNames getFavoriteReferenceBindings getParser hasPossibleAnnotationTarget reset setSourceRange setSourceRange computeAlreadyDefinedName computeAlreadyDefinedName computeAlreadyDefinedName computeBaseRelevance computeRelevanceForResolution computeRelevanceForResolution computeExpectedTypes computeExpectedTypesForAllocationExpression computeExpectedTypesForMessageSendForInterface computeExpectedTypesForMessageSend addExpectedType addForbiddenBindings addUninterestingBindings computeForbiddenBindings computePrefix proposeNewMethod isForbidden isValidParent createNonGenericTypeSignature createTypeSignature createMethodSignature createMethodSignature createProposal createTypeProposal createTypeProposal createTypeParameterProposal inlineTagCompletion printDebug printDebugTab printDebug printDebug substituteMethodTypeParameterNames substituteMethodTypeParameterName substituteMethodTypeParameterName lastErrorStart checkProblems hasForbiddenProblems hasAllowedProblems packageName simpleTypeName enclosingTypeNames modifiers accessibility mustBeQualified fullyQualifiedName qualifiedTypeName typeCache DEBUG PERF NO_TYPE_COMPLETION_ON_EMPTY_TOKEN ERROR_PATTERN EXCEPTION_PATTERN SEMICOLON CLASS VOID INT INT_SIGNATURE VALUE EXTENDS SUPER VARARGS IMPORT STATIC ON_DEMAND IMPORT_END JAVA_LANG_OBJECT_SIGNATURE JAVA_LANG_NAME NONE SUPERTYPE SUBTYPE FIELD LOCAL ARGUMENT expectedTypesPtr expectedTypes expectedTypesFilter hasJavaLangObjectAsExpectedType uninterestingBindingsPtr uninterestingBindings forbbidenBindingsPtr forbbidenBindings forbbidenBindingsFilter favoriteReferenceBindings assistNodeIsClass assistNodeIsEnum assistNodeIsException assistNodeIsInterface assistNodeIsAnnotation assistNodeIsConstructor assistNodeIsSuperType assistNodeInJavadoc assistNodeCanBeSingleMemberAnnotation targetedElement javaProject parser requestor problemFactory problemReporter source completionToken qualifiedCompletionToken resolvingImports resolvingStaticImports insideQualifiedReference noProposal problem fileName startPosition actualCompletionPosition endPosition offset javadocTagPosition knownPkgs knownTypes nameScanner BASE_TYPES BASE_TYPES_LENGTH BASE_TYPE_NAMES classField lengthField cloneMethod THIS THROWS FakeInvocationSite acceptedTypes org.aspectj.org.eclipse.jdt.internal.codeassist.CompletionEngine  temporary constants to quickly disabled polish features if necessary\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Position of previous tag while completing in javadoc\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  reset\r\n  no access restriction for local variable\r\n  can call foo(int i, X ... x) with foo(1) but NOT foo();\r\n  all remainig argument types must be compatible with the elementsType of varArgType\r\n  is an ArrayBinding by definition\r\n  this code is derived from MethodBinding#areParametersCompatibleWith(TypeBinding[])\r\n  ignore types from the default package from outside it\r\n  build expected types context\r\n  Set javadoc info\r\n  computeTypes(messageSend.arguments);\r\n  Set source range\r\n  replace to the end of the completion identifier\r\n  get the source positions of the completion identifier\r\n  can be the start of a qualified type name\r\n  So 'targetedElement' is not computed in this case.\r\n  replace to the end of the completion identifier\r\n  }\r\n  replace to the end of the completion identifier\r\n  get the source positions of the completion identifier\r\n  replace to the end of the completion identifier\r\n  no access restriction for keywords\r\n  }\r\n  }\r\n  can be the start of a qualified type name\r\n  can be the start of a qualified type name\r\n  $NON-NLS-1$\r\n  work-around internal failure - 1GEMF6D (added with fix of 99629)\r\n  $NON-NLS-1$\r\n  may eventually report a usefull error (added to fix 99629)\r\n  $NON-NLS-1$\r\n  ignore this exception for now since it typically means we cannot find java.lang.Object (added with fix of 99629)\r\n  $NON-NLS-1$\r\n  internal failure - bugs 5618 (added with fix of 99629)\r\n  to convert can be a binary type or a source type\r\n  sourceTypes[0] is always toplevel here\r\n  need field and methods\r\n  need member types\r\n  no need for field initialization\r\n  build AST from snippet\r\n  merge AST\r\n  $NON-NLS-1$\r\n  if null then we found a problem in the completion node\r\n  completionNodeFound = true;\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  work-around internal failure - 1GEMF6D\r\n  $NON-NLS-1$\r\n  may eventually report a usefull error\r\n  $NON-NLS-1$\r\n  ignore this exception for now since it typically means we cannot find java.lang.Object\r\n  $NON-NLS-1$\r\n  internal failure - bugs 5618\r\n  for now until we can change the UI.\r\n  $NON-NLS-1$\r\n  scan the package & import statements first\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  if null then we found a problem in the completion node\r\n  completionNodeFound = true;\r\n  $NON-NLS-1$\r\n  boolean completionNodeFound = false;\r\n  proposal.setUniqueKey(null);\r\n  proposal.setTypeName(null);\r\n  no access restriction for class field\r\n  proposal.setDeclarationSignature(null);\r\n  add type argument\r\n  proposal.setDeclarationTypeName(null);\r\n  ignore types from the default package from outside it\r\n  No visibility checks can be performed without the scope & invocationSite\r\n  proposal.setTypeName(null);\r\n  No visibility checks can be performed without the scope & invocationSite\r\n  can be null if it could not be resolved properly\r\n  Append parameters types\r\n  $NON-NLS-1$\r\n  Special case for completion in javadoc\r\n  Create standard proposal\r\n  proposal.setTypeName(null);\r\n  proposal.setTypeName(null);\r\n  proposal.setTypeName(null);\r\n  Special case for javadoc completion\r\n  Standard proposal\r\n  Javadoc value completion for static fields\r\n  Javadoc completions\r\n  Helper method for findFields(char[], ReferenceBinding, Scope, ObjectVector, boolean)\r\n  nothing else is possible with base types\r\n  no access restriction for length field\r\n  proposal.setPackageName(null);\r\n  no access restriction for clone() method\r\n  proposal.setParameterTypeNames(null);\r\n  handle the error case inside an explicit constructor call (see MethodScope>>findField)\r\n  handle the error case inside an explicit constructor call (see MethodScope>>findField)\r\n  only static fields must be proposed\r\n  want to replace the existing .*;\r\n  no access restriction for keywors\r\n  no access restriction for keywors\r\n  boolean inlineTagStarted = javadocTag.completeInlineTagStarted();\r\n  completion[tagLength+2] = ' ';\r\n  no access restriction for keywors\r\n  import p1.p2.A.*;\r\n  no access restriction for keywors\r\n  visibility\r\n  class\r\n  abtract\r\n  final\r\n  static\r\n  transient\r\n  volatile\r\n  native\r\n  strictfp\r\n  synchronized\r\n  No visibility checks can be performed without the scope & invocationSite\r\n  ignore types from the default package from outside it\r\n  This criterion doesn't concern types and is added to be balanced with field and method relevance.\r\n  Helper method for findMemberTypes(char[], ReferenceBinding, Scope)\r\n  we're trying to find a supertype\r\n  Get relevance\r\n  no access restriction for param name\r\n  Propose missing param\r\n  we're trying to find a supertype\r\n  need to know if we're in a static context (or inside a constructor)\r\n  handle the error case inside an explicit constructor call (see MethodScope>>findField)\r\n  can be null if it could not be resolved properly\r\n  nothing to insert - do not want to replace the existing selector & arguments\r\n  Append parameters types\r\n  $NON-NLS-1$\r\n  Special case for completion in javadoc\r\n  Standard proposal\r\n  Javadoc proposal\r\n  Helper method for findMethods(char[], TypeBinding[], ReferenceBinding, Scope, ObjectVector, boolean, boolean, boolean)\r\n  nothing to insert - do not want to replace the existing selector & arguments\r\n  Helper method for findMethods(char[], TypeBinding[], ReferenceBinding, Scope, ObjectVector, boolean, boolean, boolean)\r\n  no access restriction for keywors\r\n  No visibility checks can be performed without the scope & invocationSite\r\n  if (noVoidReturnType && method.returnType == BaseTypes.VoidBinding) continue next;\r\n  boolean noVoidReturnType, how do you know?\r\n  Helper method for findMethods(char[], MethodBinding[], Scope, ObjectVector, boolean, boolean, boolean, TypeBinding)\r\n  flush uninteresting modifiers\r\n          look into the corresponding unit if it is available\r\n  look into the model\r\n  no access restriction for nested type\r\n  do not search outside the class scope if no prefix was provided\r\n  no access restriction for type in the current unit\r\n  done when a COMPILATION_UNIT_SCOPE is found\r\n  no access restriction fot type parameter\r\n  do not propose type if completion token is empty\r\n  don't propose type parameters if the completion is a constructor ('new |')\r\n  no access restriction for type in the current unit\r\n  don't propose type variable if the completion is a constructor ('new |')\r\n  ignore types from the default package from outside it\r\n  top level types of the current unit are already proposed.\r\n  need to know if we're in a static context (or inside a constructor)\r\n  handle the error case inside an explicit constructor call (see MethodScope>>findField)\r\n  no access restriction for local variable\r\n  proposal.setPackageName(null);\r\n  handle the error case inside an explicit constructor call (see MethodScope>>findField)\r\n  }\r\n  search in static import\r\n  search in favorites import\r\n  no access restriction for variable name\r\n  accept result\r\n  proposal.setFlags(Flags.AccDefault);\r\n  compute variable name for non base type\r\n  no access restriction for variable name\r\n  accept result\r\n  proposal.setFlags(Flags.AccDefault);\r\n  Helper method for private void findVariableNames(char[] name, TypeReference type )\r\n  remove duplicate and conflicting\r\n  handle the error case inside an explicit constructor call (see MethodScope>>findField)\r\n  default filter\r\n  find types from parent\r\n  }\r\n  no access restriction for new method\r\n  proposal.setPackageName(null);\r\n  proposal.setPackageName(null);\r\n  Create standard type proposal\r\n  Create javadoc text proposal if necessary\r\n  Create standard type proposal\r\n  Create javadoc text proposal if necessary\r\n  Create standard type proposal\r\n  Create javadoc text proposal if necessary\r\n  inlineCompletion[inlineLength-2] = ' ';\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$\r\n /*\r\n\t\tstatic final char[][] mainDeclarations =\r\n\t\t\tnew char[][] {\r\n\t\t\t\t\"package\".toCharArray(),\r\n\t\t\t\t\"import\".toCharArray(),\r\n\t\t\t\t\"abstract\".toCharArray(),\r\n\t\t\t\t\"final\".toCharArray(),\r\n\t\t\t\t\"public\".toCharArray(),\r\n\t\t\t\t\"class\".toCharArray(),\r\n\t\t\t\t\"interface\".toCharArray()};\r\n\t\r\n\t\tstatic final char[][] modifiers = // may want field, method, type & member type modifiers\r\n\t\t\tnew char[][] {\r\n\t\t\t\t\"abstract\".toCharArray(),\r\n\t\t\t\t\"final\".toCharArray(),\r\n\t\t\t\t\"native\".toCharArray(),\r\n\t\t\t\t\"public\".toCharArray(),\r\n\t\t\t\t\"protected\".toCharArray(),\r\n\t\t\t\t\"private\".toCharArray(),\r\n\t\t\t\t\"static\".toCharArray(),\r\n\t\t\t\t\"strictfp\".toCharArray(),\r\n\t\t\t\t\"synchronized\".toCharArray(),\r\n\t\t\t\t\"transient\".toCharArray(),\r\n\t\t\t\t\"volatile\".toCharArray()};\r\n\t*/\r\n /*comment*/\r\n /*whitespace*/\r\n /*nls*/\r\n /*taskTags*/\r\n /*taskPriorities*/\r\n /* prefix match */\r\n /*not only static */\r\n /*not only static */\r\n /*\r\n\t * Find javadoc block tags for a given completion javadoc tag node\r\n\t */\r\n /*\r\n\t * Find javadoc inline tags for a given completion javadoc tag node\r\n\t */\r\n /*\r\n\t * Find javadoc parameter names.\r\n\t */\r\n /*\t\t\t\tif (tokenLength == 0) { // only search inside the type itself if no prefix was provided\r\n\t\t\t\t\t\t\t\t\t\t\tfindFields(token, enclosingType.fields(), classScope, fieldsFound, staticsOnly);\r\n\t\t\t\t\t\t\t\t\t\t\tfindMethods(token, enclosingType.methods(), classScope, methodsFound, staticsOnly, false);\r\n\t\t\t\t\t\t\t\t\t\t\tbreak done;\r\n\t\t\t\t\t\t\t\t\t\t} else { */\r\n /*\r\n\t * Create a completion proposal for a type.\r\n\t */\r\n /*\r\n\t * Create a completion proposal for a member type.\r\n\t */\r\n /*\r\n\t * Create a completion proposal for a member type.\r\n\t */\r\n","IPathRequestor":"acceptPath org.aspectj.org.eclipse.jdt.internal.core.IPathRequestor","ICodeAssist":"codeComplete codeComplete codeComplete codeComplete codeComplete codeSelect codeSelect org.aspectj.org.eclipse.jdt.core.ICodeAssist","SimpleScope":"lookupType getMessageHandler lookupFormal getFormal getFormalCount getImportedNames getImportedPrefixes setImportedNames setImportedPrefixes makeFormalBindings makeSourceLocation message message message getWorld getEnclosingType lookupType getMessageHandler lookupFormal getFormal getFormalCount getImportedNames getImportedPrefixes setImportedNames setImportedPrefixes makeFormalBindings makeSourceLocation message message message getWorld getEnclosingType world enclosingType bindings importedPrefixes importedNames ZERO_STRINGS javaLangPrefixArray world enclosingType bindings importedPrefixes importedNames ZERO_STRINGS javaLangPrefixArray org.aspectj.weaver.patterns.SimpleScope org.aspectj.weaver.patterns.SimpleScope  if (importedName.endsWith(\".\" + name)) {\r\n  XXX doesn't report any problems\r\n  if (importedName.endsWith(\".\" + name)) {\r\n  XXX doesn't report any problems\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","StubFileGenerator":"doFiles processFile processImportDeclaration processTypeDeclaration processMembers genSourceSignature addDeclID addToFormal declIDTable nextDeclID org.aspectj.tools.ajdoc.StubFileGenerator  if we got an error we don't want the contents of the file\r\n  StructureUtil.genSignature(classNode);\r\n  System.err.println(\"######\" + signature + \", \" + classNode.getName());\r\n  StructureUtil.genSignature(member);\r\n  if the next member is also an ENUM_VALUE:\r\n  System.err.println(\">>>>>>>>>>>>>\" + member.getName() + \"<<<<\" + member.getParent());\r\n  formalComment = \"  boolean appendPeriod = true;\r\n  !!! perhaps this error should not be silent\r\n  length of \" /*IProgramElement*/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n *     Mik Kersten\t  port to AspectJ 1.1+ code base\r\n * ******************************************************************/\r\n","TypeParameterReferenceMatch":"org.aspectj.org.eclipse.jdt.core.search.TypeParameterReferenceMatch","InvalidResourceException":"serialVersionUID org.aspectj.ajde.ui.InvalidResourceException /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","IDOMField":"getInitializer getName getType setInitializer setName setType org.aspectj.org.eclipse.jdt.core.jdom.IDOMField","AspectJCore":"getAspectJCore getCompilerOptions COMPILER_PB_INVALID_ABSOLUTE_TYPE_NAME COMPILER_PB_INVALID_WILDCARD_TYPE_NAME COMPILER_PB_UNRESOLVABLE_MEMBER COMPILER_PB_TYPE_NOT_EXPOSED_TO_WEAVER COMPILER_PB_SHADOW_NOT_IN_STRUCTURE COMPILER_PB_UNMATCHED_SUPERTYPE_IN_CALL COMPILER_PB_CANNOT_IMPLEMENT_LAZY_TJP COMPILER_PB_NEED_SERIAL_VERSION_UID COMPILER_PB_INCOMPATIBLE_SERIAL_VERSION COMPILER_TERMINATE_AFTER_COMPILATION COMPILER_SERIALIZABLE_ASPECTS COMPILER_LAZY_TJP COMPILER_NO_ADVICE_INLINE COMPILER_NOT_REWEAVABLE org.aspectj.ajdt.core.AspectJCore /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.core.JavaCore#getCompilerOptions()\r\n\t */\r\n","SuperTypeNamesCollector":"visit visit visit visit visit visit visit addToResult buildBindings collect collectSuperTypeNames getPathsOfDeclaringType matches matches pattern typeSimpleName typeQualification locator type progressMonitor result resultIndex org.aspectj.org.eclipse.jdt.internal.core.search.matching.SuperTypeNamesCollector  don't visit field declarations\r\n  don't visit initializers\r\n  don't visit constructor declarations\r\n  don't visit method declarations\r\n  already known\r\n  source unit\r\n  fault in fields & methods\r\n  Collect the paths of the cus that are in the hierarchy of the given type\r\n  problem with classpath: report inacurrate matches\r\n  Collect the paths of the cus that declare a type which matches declaringQualification + declaringSimpleName\r\n  sort by projects\r\n  outside classpath\r\n  use the qualification only if no simple name\r\n  do find member types\r\n  filter out local and anonymous classes\r\n  most frequent case: simple name equals last segment of compoundName\r\n  member type -> transform A.B.C$D into A.B.C.D\r\n /*\r\n * Parse the given compiation unit and build its type bindings.\r\n */\r\n","IHierarchy":"getElement getRoot setRoot addToFileMap removeFromFileMap setFileMap findInFileMap getFileMapEntrySet isValid findElementForHandle findElementForSignature findElementForLabel findElementForType findElementForSourceFile findElementForSourceLine findElementForSourceLine findElementForOffSet getConfigFile setConfigFile flushTypeMap flushHandleMap updateHandleMap getElement getRoot setRoot addToFileMap removeFromFileMap setFileMap findInFileMap getFileMapEntrySet isValid findElementForHandle findElementForSignature findElementForLabel findElementForType findElementForSourceFile findElementForSourceLine findElementForSourceLine findElementForOffSet getConfigFile setConfigFile flushTypeMap flushHandleMap updateHandleMap NO_STRUCTURE NO_STRUCTURE org.aspectj.asm.IHierarchy org.aspectj.asm.IHierarchy /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n * ******************************************************************/\r\n","BcelAccessForInlineMunger":"munge getMatchingSyntheticMember getSignature matches openAroundAdvice createOrGetInlineAccessorForMethod createOrGetInlineAccessorForSuperDispatch createOrGetInlineAccessorForFieldGet createOrGetInlineAccessorForFieldSet munge getMatchingSyntheticMember getSignature matches openAroundAdvice createOrGetInlineAccessorForMethod createOrGetInlineAccessorForSuperDispatch createOrGetInlineAccessorForFieldGet createOrGetInlineAccessorForFieldSet m_inlineAccessorBcelMethods m_aspectGen m_inlineAccessorMethodGens m_inlineAccessorBcelMethods m_aspectGen m_inlineAccessorMethodGens org.aspectj.weaver.bcel.BcelAccessForInlineMunger org.aspectj.weaver.bcel.BcelAccessForInlineMunger  look for all @Around advices\r\n  add the accessors\r\n  flush some\r\n  we know we cannot inline this advice so no need for futher handling\r\n  ok we found a matching callee member and swapped the instruction with the accessor\r\n  look in the whole method list and not just declared for super calls and alike\r\n  specific handling for super.foo() calls, where foo is non public\r\n  && aspectType.getSuperclass().getName().equals(resolvedMember.getDeclaringType().getName())) {\r\n  too complex to handle new + dup + .. + invokespecial here.\r\n  ok we found a matching callee member and swapped the instruction with the accessor\r\n  open-up method call\r\n  make sure we set inline to true since we have done this analysis\r\n  add static method to aspect\r\n  add new accessor method to aspect bytecode\r\n  flag it synthetic, AjSynthetic\r\n  flag the effective signature, so that we can deobfuscate the signature to apply method call pointcut\r\n  add static method to aspect\r\n  add new accessor method to aspect bytecode\r\n  flag it synthetic, AjSynthetic\r\n  flag the effective signature, so that we can deobfuscate the signature to apply method call pointcut\r\n  add static method to aspect\r\n  add new accessor method to aspect bytecode\r\n  flag it synthetic, AjSynthetic\r\n  flag the effective signature, so that we can deobfuscate the signature to apply method call pointcut\r\n  add static method to aspect\r\n  add new accessor method to aspect bytecode\r\n  flag it synthetic, AjSynthetic\r\n  flag the effective signature, so that we can deobfuscate the signature to apply method call pointcut\r\n  field accessed is static so sole parameter is field value to be set\r\n  look for all @Around advices\r\n  add the accessors\r\n  flush some\r\n  we know we cannot inline this advice so no need for futher handling\r\n  ok we found a matching callee member and swapped the instruction with the accessor\r\n  look in the whole method list and not just declared for super calls and alike\r\n  specific handling for super.foo() calls, where foo is non public\r\n  && aspectType.getSuperclass().getName().equals(resolvedMember.getDeclaringType().getName())) {\r\n  too complex to handle new + dup + .. + invokespecial here.\r\n  ok we found a matching callee member and swapped the instruction with the accessor\r\n  open-up method call\r\n  make sure we set inline to true since we have done this analysis\r\n  add static method to aspect\r\n  add new accessor method to aspect bytecode\r\n  flag it synthetic, AjSynthetic\r\n  flag the effective signature, so that we can deobfuscate the signature to apply method call pointcut\r\n  add static method to aspect\r\n  add new accessor method to aspect bytecode\r\n  flag it synthetic, AjSynthetic\r\n  flag the effective signature, so that we can deobfuscate the signature to apply method call pointcut\r\n  add static method to aspect\r\n  add new accessor method to aspect bytecode\r\n  flag it synthetic, AjSynthetic\r\n  flag the effective signature, so that we can deobfuscate the signature to apply method call pointcut\r\n  add static method to aspect\r\n  add new accessor method to aspect bytecode\r\n  flag it synthetic, AjSynthetic\r\n  flag the effective signature, so that we can deobfuscate the signature to apply method call pointcut\r\n  field accessed is static so sole parameter is field value to be set\r\n","Engine":"accept accept accept getParser initializeImportCaches mustQualifyType parseBlockStatements parseBlockStatements reset getTypeSignature getSignature getSignatures lookupEnvironment unitScope nameEnvironment options compilerOptions forbiddenReferenceIsError discouragedReferenceIsError importCachesInitialized importsCache onDemandImportsCache importCacheCount onDemandImportCacheCount currentPackageName org.aspectj.org.eclipse.jdt.internal.codeassist.impl.Engine  sourceTypes[0] is always toplevel here\r\n  need field and methods\r\n  need member types\r\n  no need for field initialization\r\n  If there are no types defined into the current CU yet.\r\n  resolvedImport is a ReferenceBindng or a PackageBinding\r\n  find potential conflict with another import\r\n  members\r\n  methods\r\n  initializers\r\n  TODO remove the next line when method from binary type will be able to generate generic siganute\r\n /*\r\n\t * Find the node (a field, a method or an initializer) at the given position\r\n\t * and parse its block statements if it is a method or an initializer.\r\n\t * Returns the node or null if not found\r\n\t */\r\n","AssistOptions":"set splitAndTrimOn OPTION_PerformVisibilityCheck OPTION_PerformDeprecationCheck OPTION_ForceImplicitQualification OPTION_FieldPrefixes OPTION_StaticFieldPrefixes OPTION_LocalPrefixes OPTION_ArgumentPrefixes OPTION_FieldSuffixes OPTION_StaticFieldSuffixes OPTION_LocalSuffixes OPTION_ArgumentSuffixes OPTION_PerformForbiddenReferenceCheck OPTION_PerformDiscouragedReferenceCheck OPTION_CamelCaseMatch OPTION_SuggestStaticImports ENABLED DISABLED checkVisibility checkDeprecation checkForbiddenReference checkDiscouragedReference forceImplicitQualification camelCaseMatch suggestStaticImport fieldPrefixes staticFieldPrefixes localPrefixes argumentPrefixes fieldSuffixes staticFieldSuffixes localSuffixes argumentSuffixes org.aspectj.org.eclipse.jdt.internal.codeassist.impl.AssistOptions  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","ShortConstant":"fromValue byteValue charValue doubleValue floatValue intValue longValue shortValue stringValue toString typeID value org.aspectj.org.eclipse.jdt.internal.compiler.impl.ShortConstant  implicit cast to return type\r\n  implicit cast to return type\r\n  implicit cast to return type\r\n  implicit cast to return type\r\n  spec 15.17.11\r\n  $NON-NLS-1$\r\n","GenericXMLWriter":"appendEscapedChar getEscaped getReplacement endTag printString printTabulation printTag startTag XML_VERSION lineSeparator tab org.aspectj.org.eclipse.jdt.internal.compiler.util.GenericXMLWriter  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  These five are defined by default for all XML documents.\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*no parameters*/\r\n /*\r\n\t * External API\r\n\t */\r\n /*no parameters*/\r\n /*insert new line*/\r\n","RuntimeVisibleAnnotations":"accept dump copy accept dump copy org.aspectj.apache.bcel.classfile.annotation.RuntimeVisibleAnnotations org.aspectj.apache.bcel.classfile.annotation.RuntimeVisibleAnnotations","Range":"getBody getStart getEnd isEmpty getRealStart getRealStart getRealEnd getRealEnd getRealNext insert insert append append setLineNumberFromNext genStart genEnd genStart genEnd containsTarget updateTarget updateTarget isRangeHandle getRange toString getBody getStart getEnd isEmpty getRealStart getRealStart getRealEnd getRealEnd getRealNext insert insert append append setLineNumberFromNext genStart genEnd genStart genEnd containsTarget updateTarget updateTarget isRangeHandle getRange toString body start end InsideBefore InsideAfter OutsideBefore OutsideAfter RANGEINSTRUCTION name body start end InsideBefore InsideAfter OutsideBefore OutsideAfter RANGEINSTRUCTION name org.aspectj.weaver.bcel.Range org.aspectj.weaver.bcel.Range  System.err.println(\"    ih \" + ih);\r\n  System.err.println(\"  looking for \" + end);\r\n  basically, we should never weave OutsideBefore.\r\n  assert isRangeHandle(ih)\r\n  System.err.println(\"    ih \" + ih);\r\n  System.err.println(\"  looking for \" + end);\r\n  basically, we should never weave OutsideBefore.\r\n  assert isRangeHandle(ih)\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","ASTConverter":"getASTConverter getASTConverter adjustSourcePositionsForParent buildBodyDeclarations buildBodyDeclarations buildBodyDeclarations buildCommentsTable checkAndAddMultipleFieldDeclaration checkAndAddMultipleLocalDeclaration checkCanceled completeRecord convert convert convert convertToAnnotationDeclaration convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convert convertImport convertPackage convertToEnumDeclaration convertToExpression convertToFieldDeclaration convertToParenthesizedExpression convertToType convertToVariableDeclarationExpression convertToSingleVariableDeclaration convertToVariableDeclarationFragment convertToVariableDeclarationFragment convertToVariableDeclarationStatement convertType createComment createFakeEmptyStatement createModifier getOperatorFor getPrimitiveTypeCode isPrimitiveType lookupForScopes lookupScope recordName recordNodes recordNodes recordPendingNameScopeResolution recordPendingThisExpressionScopeResolution trimWhiteSpacesAndComments removeLeadingAndTrailingCommentsFromLiteral removeTrailingCommentFromExpressionEndingWithAParen retrieveClosingAngleBracketPosition retrieveColonPosition retrieveEllipsisStartPosition retrieveEndBlockPosition retrieveSemiColonPosition retrieveEndOfDimensionsPosition retrieveEndOfElementTypeNamePosition retrieveEndOfRightParenthesisPosition retrieveExtraDimension retrieveIdentifierAndSetPositions retrieveIdentifierEndPosition retrievePositionBeforeNextCommaOrSemiColon retrieveProperRightBracketPosition retrieveRightBraceOrSemiColonPosition retrieveRightBrace retrieveRightBracketPosition retrieveStartBlockPosition retrieveStartingCatchPosition setAST setModifiers setModifiers setModifiers setModifiers setModifiers setModifiers setModifiers setModifiers setModifiers setModifiers setModifiers setModifiers setModifiers setQualifiedNameNameAndSourceRanges setQualifiedNameNameAndSourceRanges setTypeNameForAnnotation setTypeForField setTypeForMethodDeclaration setTypeForMethodDeclaration setTypeForSingleVariableDeclaration setTypeForVariableDeclarationExpression setTypeForVariableDeclarationStatement updateInnerPositions AJ_ASTCONVERTER_FACTORY astConverterFactory ast commentsTable compilationUnitSource compilationUnitSourceLength docParser insideComments monitor pendingNameScopeResolution pendingThisExpressionScopeResolution resolveBindings scanner commentMapper org.aspectj.org.eclipse.jdt.core.dom.ASTConverter  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  comments\r\n  AspectJ Extension - raised to protected\r\n  we found the matching parenthesis\r\n  add body declaration in the lexical order\r\n  FIELD\r\n  METHOD\r\n  MEMBER\r\n  Convert javadoc\r\n  add body declaration in the lexical order\r\n  FIELD\r\n  METHOD\r\n  MEMBER\r\n  add body declaration in the lexical order\r\n  FIELD\r\n  METHOD\r\n  MEMBER\r\n  Build comment table\r\n  Resize table if  necessary\r\n  The javadoc comment is now got from list store in compilation unit declaration\r\n  we can create a new FieldDeclaration\r\n  We retrieve the existing fieldDeclaration to add the new VariableDeclarationFragment\r\n  we can create a new FieldDeclaration\r\n  we can create a new FieldDeclaration\r\n  We retrieve the existing VariableDeclarationStatement to add the new VariableDeclarationFragment\r\n  get the positions of the right parenthesis\r\n  set the return type to VOID\r\n  try to get the best end position\r\n  syntax error in this method declaration\r\n  The javadoc comment is now got from list store in compilation unit declaration\r\n  create an extended string literal equivalent => use the extended operands list\r\n  The javadoc comment is now got from list store in compilation unit declaration\r\n  The javadoc comment is now got from list store in compilation unit declaration\r\n  remove the ellipsis from the type source end\r\n  new code:\r\n  End AspectJ Extension\r\n  we can create a new FieldDeclaration\r\n  We retrieve the existing fieldDeclaration to add the new VariableDeclarationFragment\r\n  initializer.setJavadoc(convert(oldInitializer.javadoc));\r\n  create an extended string literal equivalent => use the extended operands list\r\n  Parse comments\r\n  There is no node corresponding to the package declaration\r\n  field is an enum constant\r\n  this is an error\r\n  switch between all types of expression\r\n  we know that we have at least one initialization\r\n  resolve member and method references binding\r\n  resolve member and method references binding\r\n  will return a MethodInvocation or a SuperMethodInvocation or\r\n  returns a MethodInvocation\r\n  returns a SuperMethodInvocation\r\n  so the casting cannot fail\r\n  create an extended string literal equivalent => use the extended operands list\r\n  cannot be reached\r\n  There is no source associated with an implicit this\r\n  new code:\r\n  End AspectJ Extension\r\n  the type references level.\r\n  QualifiedName\r\n  Set javadoc\r\n  AspectJ Extension - raised to protected\r\n  decrement the number of parenthesis\r\n  previous comma or semicolon.\r\n  see https:  this is either an ArrayTypeReference or a SingleTypeReference\r\n  PR http:  need to find out if this is an array type of primitive types or not\r\n  store keys for inner types\r\n  Create comment node\r\n  Line comment have negative start and end position\r\n  Block comment have positive start position\r\n  we cannot know without testing chars again\r\n  Javadoc comments have positive end position\r\n  cannot be reached\r\n  resolve member and method references binding\r\n  get method name start position\r\n  get compiler node and record nodes\r\n  get type ref\r\n  TODO (frederic) remove following line to fix bug https:  record name and qualifier\r\n  record nodes\r\n  Resolve parameters\r\n  get compiler node and record nodes\r\n  Replace qualifier to have all nodes recorded\r\n  110\r\n  95\r\n  166\r\n  166\r\n  110\r\n  110\r\n  225\r\n  we have an annotation\r\n  we have an annotation\r\n  we have an annotation\r\n  remove AccInterface flags\r\n  we have an annotation\r\n  we have an annotation\r\n  QualifiedName\r\n  update positions of the component types of the array type\r\n  cut the child loose from its parent (without creating garbage)\r\n  the dimensions are after the name so the type of the fieldDeclaration is a simpleType\r\n  cut the child loose from its parent (without creating garbage)\r\n  cut the child loose from its parent (without creating garbage)\r\n  the dimensions are after the name so the type of the fieldDeclaration is a simpleType\r\n  cut the child loose from its parent (without creating garbage)\r\n  cut the child loose from its parent (without creating garbage)\r\n  the dimensions are after the name so the type of the fieldDeclaration is a simpleType\r\n  cut the child loose from its parent (without creating garbage)\r\n  cut the child loose from its parent (without creating garbage)\r\n  the dimensions are after the name so the type of the fieldDeclaration is a simpleType\r\n  cut the child loose from its parent (without creating garbage)\r\n  cut the child loose from its parent (without creating garbage)\r\n  the dimensions are after the name so the type of the fieldDeclaration is a simpleType\r\n  cut the child loose from its parent (without creating garbage)\r\n  need to set positions for intermediate array type see 42839\r\n  AspectJ extension - raised to public visibility\r\n /*comment*/\r\n /*whitespace*/\r\n /*nls*/\r\n /*sourceLevel*/\r\n /*taskTags*/\r\n /*taskPriorities*/\r\n /*\r\n\t\t\t\t\t * start or end can be equal to -1 if we have an interface's method.\r\n\t\t\t\t\t */\r\n /*\r\n\t\t\t\t * start or end can be equal to -1 if we have an interface's method.\r\n\t\t\t\t */\r\n /*\r\n\t\t * There is extra work to do to set the proper type positions\r\n\t\t * See PR http://bugs.eclipse.org/bugs/show_bug.cgi?id=23284\r\n\t\t */\r\n /*\r\n\t * Internal use only\r\n\t * Used to convert class body declarations\r\n\t */\r\n /*\r\n\t\t * There is extra work to do to set the proper type positions\r\n\t\t * See PR http://bugs.eclipse.org/bugs/show_bug.cgi?id=23284\r\n\t\t */\r\n /*\r\n\t\t\t\t\t\t * if we find something else than a whitespace or a comment,\r\n\t\t\t\t\t\t * then we reset the trimRigthPosition to the expression\r\n\t\t\t\t\t\t * source end.\r\n\t\t\t\t\t\t */\r\n","CompletionOnClassLiteralAccess":"printExpression resolveType completionIdentifier classStart org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnClassLiteralAccess  $NON-NLS-1$\r\n","StructureUtil":"getTargets getTargets getDeclareInterTypeTargets getDeclareTargets getPackageDeclarationFromFile genSignature isAnonymous translateAjPathName org.aspectj.tools.ajdoc.StructureUtil  correct relationships appear against the type in the ajdoc\r\n  !!! using exceptions for logic, fix\r\n  System.err.println(\">>>>>>>> \" + node.getName());\r\n /*String*/\r\n /*String*/\r\n /*IProgramElement */\r\n /*String*/\r\n /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n * ******************************************************************/\r\n","BcelTypeMunger":"toString munge getShortname mungeNewAnnotationOnType mungeNewParent enforceDecpRule1_abstractMethodsImplemented enforceDecpRule2_cantExtendFinalClass enforceDecpRule3_visibilityChanges enforceDecpRule4_compatibleReturnTypes enforceDecpRule5_cantChangeFromStaticToNonstatic error findMatchingMethod attemptToModifySuperCalls createReadableCtorSig getConstructorWithSignature mungePrivilegedAccess addFieldGetter addFieldSetter addMethodDispatch makeMethodGen makeFieldGen mungePerObjectInterface mungePerTypeWithinTransformer couldMatch mungeNewMethod createSignatureAttribute createAnyBridgeMethodsForCovariance createBridgeMethod stringifyMember mungeMethodDelegate mungeFieldHost getRealMemberForITDFromAspect addNeededSuperCallMethods signalError mungeNewConstructor makeDispatcher mungeNewField createBridgeMethodForITDF parameterizedFor parameterizeWith getTypeVariableAliases equals hashCode toString munge getShortname mungeNewAnnotationOnType mungeNewParent enforceDecpRule1_abstractMethodsImplemented enforceDecpRule2_cantExtendFinalClass enforceDecpRule3_visibilityChanges enforceDecpRule4_compatibleReturnTypes enforceDecpRule5_cantChangeFromStaticToNonstatic error findMatchingMethod attemptToModifySuperCalls createReadableCtorSig getConstructorWithSignature mungePrivilegedAccess addFieldGetter addFieldSetter addMethodDispatch makeMethodGen makeFieldGen mungePerObjectInterface mungePerTypeWithinTransformer couldMatch mungeNewMethod createSignatureAttribute createAnyBridgeMethodsForCovariance createBridgeMethod stringifyMember mungeMethodDelegate mungeFieldHost getRealMemberForITDFromAspect addNeededSuperCallMethods signalError mungeNewConstructor makeDispatcher mungeNewField createBridgeMethodForITDF parameterizedFor parameterizeWith getTypeVariableAliases equals hashCode hashCode hashCode org.aspectj.weaver.bcel.BcelTypeMunger org.aspectj.weaver.bcel.BcelTypeMunger  PTWIMPL Transform the target type (add the aspect instance field)\r\n  if (declaredSig==null) declaredSig= munger.getSignature();\r\n  munging at compile time only...\r\n  TAG: WeavingMessage\r\n  too?\r\n  Set to false when we error, so we don't actually\r\n  *do* the munge\r\n  accessors\r\n  ?\r\n  A rule was violated and an error message already\r\n  Adding a new interface\r\n  Changing the supertype\r\n  interfaces\r\n  methods\r\n  Found a valid\r\n  ITDs on this type to see if they satisfy it\r\n  AV - that should be\r\n  possible sig\r\n  type\r\n  eg. Pjava  Check for covariance\r\n  \" which returns '\"+superReturnTypeSig+\"'\",\r\n  target new super calls at\r\n  raw or parameterized\r\n  the same signature\r\n  is provided that way\r\n  Look for ctors to modify\r\n  m.getMemberView().equals(member)) {\r\n  System.out.println(\"matched: \" + gen);\r\n  System.out.println(\"munging: \" + gen + \" with \" + member);\r\n  Type fieldType = BcelWorld.makeBcelType(field.getType());\r\n  ret.makeSynthetic();\r\n  getLazyClassGen().getClassName());\r\n  e.g ajc$com_blah_SecurityAspect$ptwAspectInstance\r\n  \"public com_blah_SecurityAspect ajc$com_blah_SecurityAspect$localAspectOf()\"\r\n  NoAspectBoundException\r\n  PTWIMPL Add field to hold aspect instance and an accessor\r\n  matched or not\r\n  Resolving it will sort out the tvars\r\n  mangled method\r\n  Simple checks, can't ITD on annotations or enums\r\n  that the target has already declared\r\n  From 98901#29 - need to copy annotations across\r\n  must be public abstract\r\n  Add a signature attribute to it\r\n  munger.\r\n  method\r\n  paramType+\" to \"+bridgingToParms[i]);\r\n  to the topmostimplementor.\r\n  out that it was the top most implementor (see pr49657)\r\n  be public abstract\r\n  on an ITD it declared on itself.\r\n  which is holding them.\r\n  1.5 mode.\r\n  isnt abstract)\r\n  Add a signature attribute to it\r\n  guy.\r\n  interface)\r\n  ResolvedType superclass = onType.getSuperclass();\r\n  Compiler might have done it\r\n  Check the params\r\n  Step3\r\n  bridging method.\r\n  as necessary\r\n  Step2\r\n  The\r\n  supertype\r\n  munger.getSignature().getParameterTypes();\r\n  }\r\n  Unlike toString() on a member, this does not include the declaring type\r\n  pattern\r\n  supply a default impl class\r\n  already implemented the interface, let's check that now!\r\n  lookup the method\r\n  annotation copy from annotation on ITD interface\r\n  getfield\r\n  Create and store a new instance\r\n  if not null use the instance we've got\r\n  args\r\n  body.append(InstructionFactory.createThis());\r\n  pattern\r\n  why\r\n  this?\r\n  only the erasure.\r\n  superMethod.getDeclaringType() + \", \" + gen.getType());\r\n  newConstructorTypeMunger.getDeclaredParameterCount();\r\n  on an ITD it declared on itself.\r\n  which is holding them.\r\n  declared argcount + 1\r\n  do call to pre\r\n  create a local, and store return pre stuff into it.\r\n  put this on the stack\r\n  unpack pre args onto stack\r\n  unpack params onto stack\r\n  call post\r\n  don't forget to return!!\r\n  assert (!superMethod.isStatic())\r\n  aspectType.getDeclaredMethods();\r\n  which is holding them.\r\n  interfaces\r\n  original munger?\r\n  Check if we need bridge methods for the field getter and setter\r\n  Add a signature attribute to it\r\n  ((ResolvedMemberImpl)field).getSignatureForAttribute();\r\n  une cast est required\r\n  the duplication...\r\n  pr134471 - remove when handles are improved\r\n  XXX addLazyMethodGen is probably bad everywhere\r\n  PTWIMPL Transform the target type (add the aspect instance field)\r\n  if (declaredSig==null) declaredSig= munger.getSignature();\r\n  munging at compile time only...\r\n  TAG: WeavingMessage\r\n  too?\r\n  Set to false when we error, so we don't actually\r\n  *do* the munge\r\n  accessors\r\n  ?\r\n  A rule was violated and an error message already\r\n  Adding a new interface\r\n  Changing the supertype\r\n  interfaces\r\n  methods\r\n  Found a valid\r\n  ITDs on this type to see if they satisfy it\r\n  AV - that should be\r\n  possible sig\r\n  type\r\n  eg. Pjava  Check for covariance\r\n  \" which returns '\"+superReturnTypeSig+\"'\",\r\n  target new super calls at\r\n  raw or parameterized\r\n  the same signature\r\n  is provided that way\r\n  Look for ctors to modify\r\n  m.getMemberView().equals(member)) {\r\n  System.out.println(\"matched: \" + gen);\r\n  System.out.println(\"munging: \" + gen + \" with \" + member);\r\n  Type fieldType = BcelWorld.makeBcelType(field.getType());\r\n  ret.makeSynthetic();\r\n  getLazyClassGen().getClassName());\r\n  e.g ajc$com_blah_SecurityAspect$ptwAspectInstance\r\n  \"public com_blah_SecurityAspect ajc$com_blah_SecurityAspect$localAspectOf()\"\r\n  NoAspectBoundException\r\n  PTWIMPL Add field to hold aspect instance and an accessor\r\n  matched or not\r\n  Resolving it will sort out the tvars\r\n  mangled method\r\n  Simple checks, can't ITD on annotations or enums\r\n  that the target has already declared\r\n  From 98901#29 - need to copy annotations across\r\n  must be public abstract\r\n  Add a signature attribute to it\r\n  munger.\r\n  method\r\n  paramType+\" to \"+bridgingToParms[i]);\r\n  to the topmostimplementor.\r\n  out that it was the top most implementor (see pr49657)\r\n  be public abstract\r\n  on an ITD it declared on itself.\r\n  which is holding them.\r\n  1.5 mode.\r\n  isnt abstract)\r\n  Add a signature attribute to it\r\n  guy.\r\n  interface)\r\n  ResolvedType superclass = onType.getSuperclass();\r\n  Compiler might have done it\r\n  Check the params\r\n  Step3\r\n  bridging method.\r\n  as necessary\r\n  Step2\r\n  The\r\n  supertype\r\n  munger.getSignature().getParameterTypes();\r\n  }\r\n  Unlike toString() on a member, this does not include the declaring type\r\n  pattern\r\n  supply a default impl class\r\n  already implemented the interface, let's check that now!\r\n  lookup the method\r\n  annotation copy from annotation on ITD interface\r\n  getfield\r\n  Create and store a new instance\r\n  if not null use the instance we've got\r\n  args\r\n  body.append(InstructionFactory.createThis());\r\n  pattern\r\n  why\r\n  this?\r\n  only the erasure.\r\n  superMethod.getDeclaringType() + \", \" + gen.getType());\r\n  newConstructorTypeMunger.getDeclaredParameterCount();\r\n  on an ITD it declared on itself.\r\n  which is holding them.\r\n  declared argcount + 1\r\n  do call to pre\r\n  create a local, and store return pre stuff into it.\r\n  put this on the stack\r\n  unpack pre args onto stack\r\n  unpack params onto stack\r\n  call post\r\n  don't forget to return!!\r\n  assert (!superMethod.isStatic())\r\n  aspectType.getDeclaredMethods();\r\n  which is holding them.\r\n  interfaces\r\n  original munger?\r\n  Check if we need bridge methods for the field getter and setter\r\n  Add a signature attribute to it\r\n  ((ResolvedMemberImpl)field).getSignatureForAttribute();\r\n  une cast est required\r\n  the duplication...\r\n  pr134471 - remove when handles are improved\r\n  XXX addLazyMethodGen is probably bad everywhere\r\n /* LazyMethodGen */\r\n /* ResolvedMember initMethod = */\r\n /* onType */\r\n /* String */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation\r\n *     Alexandre Vasseur    @AspectJ ITDs\r\n * ******************************************************************/\r\n /* LazyMethodGen */\r\n /* ResolvedMember initMethod = */\r\n /* onType */\r\n /* String */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation\r\n *     Alexandre Vasseur    @AspectJ ITDs\r\n * ******************************************************************/\r\n","ISourceAttribute":"getSourceFileIndex getSourceFileName org.aspectj.org.eclipse.jdt.core.util.ISourceAttribute","LazyClassGen":"addInlinedSourceFileInfo calculateSourceDebugExtensionOffsets roundUpToHundreds getSourceDebugExtensionOffset disassemble getNewGeneratedNameTag hasSerialVersionUIDField getInternalClassName getInternalFileName getPackageName addMethodGen addMethodGen errorOnAddedField warnOnAddedInterface warnOnAddedMethod warnOnAddedStaticInitializer warnOnModifiedSerialVersionUID getWorld getMethodGens getFieldGens writeBack fixupGenericSignatureAttribute createSignatureAttribute reportClassTooBigProblem hasSourceDebugExtensionAttribute getJavaClass getJavaClassBytesIncludingReweavable addGeneratedInner addInterface setSuperClass getSuperClassname getSuperClass getInterfaceNames getClassGens getChildClasses toString toShortString toLongString print print printOne isEmptyClinit getConstantPool getName isWoven isReweavable getAspectsAffectingType getOrCreateWeaverStateInfo getFactory getStaticInitializer getAjcPreClinit getTjpField addAjcInitializers initializeAllTjps initializeTjp makeString makeString makeString makeString getType getBcelObjectType getFileName addField makeSyntheticAndTransientIfNeeded hasSyntheticAttribute addField getClassName isInterface isAbstract getLazyMethodGen getLazyMethodGen getLazyMethodGen forcePublic hasAnnotation addAnnotation implementsSerializable isAtLeastJava5 allocateField addInlinedSourceFileInfo calculateSourceDebugExtensionOffsets roundUpToHundreds getSourceDebugExtensionOffset disassemble getNewGeneratedNameTag hasSerialVersionUIDField getInternalClassName getInternalFileName getPackageName addMethodGen addMethodGen errorOnAddedField warnOnAddedInterface warnOnAddedMethod warnOnAddedStaticInitializer warnOnModifiedSerialVersionUID getWorld getMethodGens getFieldGens writeBack fixupGenericSignatureAttribute createSignatureAttribute reportClassTooBigProblem hasSourceDebugExtensionAttribute getJavaClass getJavaClassBytesIncludingReweavable addGeneratedInner addInterface setSuperClass getSuperClassname getSuperClass getInterfaceNames getClassGens getChildClasses toString toShortString toLongString print print printOne isEmptyClinit getConstantPool getName isWoven isReweavable getAspectsAffectingType getOrCreateWeaverStateInfo getFactory getStaticInitializer getAjcPreClinit getTjpField addAjcInitializers initializeAllTjps initializeTjp makeString makeString makeString makeString getType getBcelObjectType getFileName addField makeSyntheticAndTransientIfNeeded hasSyntheticAttribute addField getClassName isInterface isAbstract getLazyMethodGen getLazyMethodGen getLazyMethodGen forcePublic hasAnnotation addAnnotation implementsSerializable isAtLeastJava5 allocateField ACC_SYNTHETIC NO_STRINGS highestLineNumber inlinedFiles regenerateGenericSignatureAttribute myType myGen cp world packageName fields methodGens classGens annotations childCounter fact isSerializable hasSerialVersionUIDField serialVersionUIDRequiresInitialization calculatedSerialVersionUID hasClinit highestLineNumber offset tjpFields proceedingTjpType tjpType staticTjpType enclosingStaticTjpType sigType factoryType classType ACC_SYNTHETIC NO_STRINGS highestLineNumber inlinedFiles regenerateGenericSignatureAttribute myType myGen cp world packageName fields methodGens classGens annotations childCounter fact isSerializable hasSerialVersionUIDField serialVersionUIDRequiresInitialization calculatedSerialVersionUID hasClinit highestLineNumber offset tjpFields proceedingTjpType tjpType staticTjpType enclosingStaticTjpType sigType factoryType classType org.aspectj.weaver.bcel.LazyClassGen org.aspectj.weaver.bcel.LazyClassGen  ---- JSR 45 info\r\n  XXX is not set for types we create\r\n  calculated\r\n  }\r\n  warn about what we've done?\r\n  Do we need to calculate an SUID and add it?\r\n  Non child type, so it comes from a real type in the world.\r\n  strip off the generics guff\r\n  assert gen.getClassName() == super.getClassName();\r\n  ???Collections.unmodifiableList(methodGens);\r\n  Add a weaver version attribute to the file being produced (if necessary...)\r\n  of attribute are confirmed to be correct.\r\n  we skip empty clinits\r\n  revisiting no doubt...\r\n  1. Has anything changed that would require us to modify this attribute?\r\n  2. Find the old attribute\r\n  if null, this is a type built from scratch, it won't already have a sig attribute\r\n  3. Do we need an attribute?\r\n  If we had one before, we definetly still need one as types can't be 'removed' from the\r\n  check the supertype\r\n  check the interfaces\r\n  first, the type variables...\r\n  now the supertype\r\n  rest of the process.\r\n  raise an error against this compilation unit.\r\n  if is java 6 class file\r\n  getOrCreateWeaverStateInfo();\r\n  reweavableDataInserted = true;\r\n  used for the attribute\r\n  used in the real class data\r\n  FIXME asc not great that some of these ask the gen and some ask the type ! (see the related setters too)\r\n  non-recursive, may be a bug, ha ha.\r\n  XXX this could be bad, check use of dollar signs.\r\n  XXX make sure to pass types correctly around, so this doesn't happen.\r\n  we skip empty clinits\r\n  System.err.println(\"checking clinig: \" + gen);\r\n  OPTIMIZE persist kind of member into the gen object? for clinit\r\n  reflective thisJoinPoint support\r\n  new ObjectType(\"org.aspectj.lang.reflect.SourceLocation\");\r\n  advice is inlined. (PR71377)\r\n  TAG:SUPPORTING12: We didn't have different staticjp types in 1.2\r\n  make a new factory\r\n  XXX check that this works correctly for inners  a ClassNotFoundException\r\n  load the factory\r\n  load the kind\r\n  create the signature\r\n  see pr227401\r\n  its the magical new jp\r\n  makeString(\"\")));  makeString(\"\")));  For methods, push the parts of the signature on.\r\n  And generate a call to the variant of makeMethodSig() that takes 7 strings\r\n  TAG:SUPPORTING12: We didn't have optimized factory methods in 1.2\r\n  XXX should load source location from shadow\r\n  put it in the field\r\n  TAG:SUPPORTING12: We didn't have makeESJP() in 1.2\r\n  put it in the field\r\n  ??? expensive\r\n  this behavior matches the string used by the eclipse compiler for Foo.class literals\r\n  this is the inverse of the odd behavior for Class.forName w  for *new* fields\r\n  first do transient\r\n  add the synthetic modifier flag\r\n  then do synthetic\r\n  System.arraycopy(oldAttrs, 0, newAttrs, 0, oldAttrs.length);\r\n  annotations on the real thing\r\n  a warning message!\r\n  ---- JSR 45 info\r\n  XXX is not set for types we create\r\n  calculated\r\n  }\r\n  warn about what we've done?\r\n  Do we need to calculate an SUID and add it?\r\n  Non child type, so it comes from a real type in the world.\r\n  strip off the generics guff\r\n  assert gen.getClassName() == super.getClassName();\r\n  ???Collections.unmodifiableList(methodGens);\r\n  Add a weaver version attribute to the file being produced (if necessary...)\r\n  of attribute are confirmed to be correct.\r\n  we skip empty clinits\r\n  revisiting no doubt...\r\n  1. Has anything changed that would require us to modify this attribute?\r\n  2. Find the old attribute\r\n  if null, this is a type built from scratch, it won't already have a sig attribute\r\n  3. Do we need an attribute?\r\n  If we had one before, we definetly still need one as types can't be 'removed' from the\r\n  check the supertype\r\n  check the interfaces\r\n  first, the type variables...\r\n  now the supertype\r\n  rest of the process.\r\n  raise an error against this compilation unit.\r\n  if is java 6 class file\r\n  getOrCreateWeaverStateInfo();\r\n  reweavableDataInserted = true;\r\n  used for the attribute\r\n  used in the real class data\r\n  FIXME asc not great that some of these ask the gen and some ask the type ! (see the related setters too)\r\n  non-recursive, may be a bug, ha ha.\r\n  XXX this could be bad, check use of dollar signs.\r\n  XXX make sure to pass types correctly around, so this doesn't happen.\r\n  we skip empty clinits\r\n  System.err.println(\"checking clinig: \" + gen);\r\n  OPTIMIZE persist kind of member into the gen object? for clinit\r\n  reflective thisJoinPoint support\r\n  new ObjectType(\"org.aspectj.lang.reflect.SourceLocation\");\r\n  advice is inlined. (PR71377)\r\n  TAG:SUPPORTING12: We didn't have different staticjp types in 1.2\r\n  make a new factory\r\n  XXX check that this works correctly for inners  a ClassNotFoundException\r\n  load the factory\r\n  load the kind\r\n  create the signature\r\n  see pr227401\r\n  its the magical new jp\r\n  makeString(\"\")));  makeString(\"\")));  For methods, push the parts of the signature on.\r\n  And generate a call to the variant of makeMethodSig() that takes 7 strings\r\n  TAG:SUPPORTING12: We didn't have optimized factory methods in 1.2\r\n  XXX should load source location from shadow\r\n  put it in the field\r\n  TAG:SUPPORTING12: We didn't have makeESJP() in 1.2\r\n  put it in the field\r\n  ??? expensive\r\n  this behavior matches the string used by the eclipse compiler for Foo.class literals\r\n  this is the inverse of the odd behavior for Class.forName w  for *new* fields\r\n  first do transient\r\n  add the synthetic modifier flag\r\n  then do synthetic\r\n  System.arraycopy(oldAttrs, 0, newAttrs, 0, oldAttrs.length);\r\n  annotations on the real thing\r\n  a warning message!\r\n /* <String, InlinedSourceFileInfo> */\r\n /* BcelField */\r\n /* LazyMethodGen */\r\n /* LazyClassGen */\r\n /* AnnotationGen */\r\n /* Does this class support serialization */\r\n /* BcelField */\r\n /* BcelShadow, Field */\r\n /* BcelField */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC                 initial implementation \r\n *     Andy Clement  6Jul05 generics - signature attribute\r\n * ******************************************************************/\r\n /* <String, InlinedSourceFileInfo> */\r\n /* BcelField */\r\n /* LazyMethodGen */\r\n /* LazyClassGen */\r\n /* AnnotationGen */\r\n /* Does this class support serialization */\r\n /* BcelField */\r\n /* BcelShadow, Field */\r\n /* BcelField */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC                 initial implementation \r\n *     Andy Clement  6Jul05 generics - signature attribute\r\n * ******************************************************************/\r\n","SimpleSyntheticAccessMethodBinding":"org.aspectj.ajdt.internal.compiler.lookup.SimpleSyntheticAccessMethodBinding /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","ProblemFactory":"getProblemFactory factories org.aspectj.org.eclipse.jdt.internal.core.builder.ProblemFactory","PatternNodeVisitor":"visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit org.aspectj.weaver.patterns.PatternNodeVisitor org.aspectj.weaver.patterns.PatternNodeVisitor  Annotation type patterns\r\n  Regular type patterns\r\n  Pointcuts\r\n  Per-clauses\r\n  Declares\r\n  Miscellaneous patterns\r\n  Catch-all\r\n  Annotation type patterns\r\n  Regular type patterns\r\n  Pointcuts\r\n  Per-clauses\r\n  Declares\r\n  Miscellaneous patterns\r\n  Catch-all\r\n","InternalNamingConventions":"getNameScanner suggestArgumentNames suggestFieldNames suggestLocalVariableNames suggestNames acceptName computeBaseTypeNames computeNames excludeNames removePrefix prefixEquals DEFAULT_NAME org.aspectj.org.eclipse.jdt.internal.core.InternalNamingConventions  $NON-NLS-1$\r\n  compute variable name for base type\r\n  compute variable name for non base type\r\n  if no names were found\r\n  remove longer prefix\r\n  assumes the prefix is not larger than the name\r\n /*comment*/\r\n /*whitespace*/\r\n /*nls*/\r\n /*sourceLevel*/\r\n /*taskTags*/\r\n /*taskPriorities*/\r\n","InstanceOfExpression":"analyseCode generateCode printExpressionNoParenthesis resolveType tagAsUnnecessaryCast traverse expression type org.aspectj.org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression  no need to worry about raw type usage\r\n  no impact upon enclosing try context\r\n  $NON-NLS-1$\r\n  disallow autoboxing\r\n  null is not instanceof Type, recognize direct scenario\r\n","Advice":"getDeclaringType getKind getName getParameterTypes getGenericParameterTypes getExceptionTypes getPointcutExpression makeCflowEntry makePerCflowEntry makePerObjectEntry makePerTypeWithinEntry makeSoftener match maybeIssueUncheckedMatchWarning getKind getSignature hasExtraParameter getExtraParameterFlags getExtraParameterCount getBindingParameterTypes setBindingParameterTypes countOnes getBaseParameterCount getBaseParameterNames getExtraParameterType getDeclaringAspect getOriginalSignature extraParametersToString getPointcut concretize toString equals hashCode setLexicalPosition getConcreteAspect hasMatchedSomething setHasMatchedSomething hasDynamicTests getDeclaringType getKind getName getParameterTypes getGenericParameterTypes getExceptionTypes getPointcutExpression makeCflowEntry makePerCflowEntry makePerObjectEntry makePerTypeWithinEntry makeSoftener match maybeIssueUncheckedMatchWarning getKind getSignature hasExtraParameter getExtraParameterFlags getExtraParameterCount getBindingParameterTypes setBindingParameterTypes countOnes getBaseParameterCount getBaseParameterNames getExtraParameterType getDeclaringAspect getOriginalSignature extraParametersToString getPointcut concretize toString equals hashCode setLexicalPosition getConcreteAspect hasMatchedSomething setHasMatchedSomething hasDynamicTests attribute kind signature hasMatchedAtLeastOnce concreteAspect innerCflowEntries nFreeVars exceptionType bindingParameterTypes suppressedLintKinds lastReportedMonitorExitJoinpointLocation hashCode ExtraArgument ThisJoinPoint ThisJoinPointStaticPart ThisEnclosingJoinPointStaticPart ParameterMask CanInline attribute kind signature hasMatchedAtLeastOnce concreteAspect innerCflowEntries nFreeVars exceptionType bindingParameterTypes suppressedLintKinds lastReportedMonitorExitJoinpointLocation hashCode ExtraArgument ThisJoinPoint ThisJoinPointStaticPart ThisEnclosingJoinPointStaticPart ParameterMask CanInline org.aspectj.lang.reflect.Advice org.aspectj.weaver.Advice org.aspectj.lang.reflect.Advice org.aspectj.weaver.Advice  the pointcut field is ignored\r\n  alias of attribute.getKind()\r\n  null until after concretize\r\n  just for cflow*Entry kinds\r\n  just for cflow*Entry kinds\r\n  just for Softener kind\r\n  if we are parameterized, these type may be different to the advice signature types\r\n  based on annotations on this advice\r\n  0);\r\n  PTWIMPL per type within entry advice is what initializes the aspect instance in the matched type\r\n  System.out.println(\"made ret: \" + ret + \" with \" + exceptionType);\r\n  alias\r\n  && attribute.getProceedCallSignatures().length!=0\r\n  System.err.println(this + \", \" + sourceContext + \", \" + start);\r\n  Set\r\n  Set\r\n  System.err.println(getSignature().getReturnType() + \" from \" + shadow.getReturnType());\r\n  pr119749\r\n  to ignore\r\n  assert !fromType.isAbstract();\r\n  FIXME ? ATAJ copy unbound bindings to ignore\r\n  System.err.println(\"concretizing here \" + p + \" with clause \" + clause);\r\n  pr134471 - remove when handles are improved to be independent of location\r\n  XXX this perhaps ought to take account of the other fields in advice ...\r\n  for testing only\r\n  the pointcut field is ignored\r\n  alias of attribute.getKind()\r\n  null until after concretize\r\n  just for cflow*Entry kinds\r\n  just for cflow*Entry kinds\r\n  just for Softener kind\r\n  if we are parameterized, these type may be different to the advice signature types\r\n  based on annotations on this advice\r\n  0);\r\n  PTWIMPL per type within entry advice is what initializes the aspect instance in the matched type\r\n  System.out.println(\"made ret: \" + ret + \" with \" + exceptionType);\r\n  alias\r\n  && attribute.getProceedCallSignatures().length!=0\r\n  System.err.println(this + \", \" + sourceContext + \", \" + start);\r\n  Set\r\n  Set\r\n  System.err.println(getSignature().getReturnType() + \" from \" + shadow.getReturnType());\r\n  pr119749\r\n  to ignore\r\n  assert !fromType.isAbstract();\r\n  FIXME ? ATAJ copy unbound bindings to ignore\r\n  System.err.println(\"concretizing here \" + p + \" with clause \" + clause);\r\n  pr134471 - remove when handles are improved to be independent of location\r\n  XXX this perhaps ought to take account of the other fields in advice ...\r\n  for testing only\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* Lint.Kind */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* Lint.Kind */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","BasicToken":"makeOperator makeIdentifier makeLiteral getStart getEnd getFileName getString isIdentifier maybeGetParsedPointcut toString getLiteralKind makeOperator makeIdentifier makeLiteral getStart getEnd getFileName getString isIdentifier maybeGetParsedPointcut toString getLiteralKind value isIdentifier literalKind start end value isIdentifier literalKind start end org.aspectj.weaver.patterns.BasicToken org.aspectj.weaver.patterns.BasicToken /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","NullBuffer":"org.aspectj.org.eclipse.jdt.internal.core.NullBuffer","AbstractDOMBuilder":"acceptLineSeparatorPositions addChild createCompilationUnit createCompilationUnit enterCompilationUnit exitCompilationUnit exitType getLineStart initializeBuild fAbort fBuildingCU fBuildingType fDocument fLineStartPositions fStack fFieldCount fNode org.aspectj.org.eclipse.jdt.internal.core.jdom.AbstractDOMBuilder  no more separators\r\n  more separators\r\n  reverse traversal intentional.\r\n","AsmDetector":"isAsmAround isAsmAround org.aspectj.weaver.bcel.asm.AsmDetector org.aspectj.weaver.bcel.asm.AsmDetector /* *******************************************************************\r\n * Copyright (c) 2008 Contributors\r\n * All rights reserved.\r\n * This program and the accompanying materials are made available\r\n * under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *\t Andy Clement\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2008 Contributors\r\n * All rights reserved.\r\n * This program and the accompanying materials are made available\r\n * under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *\t Andy Clement\r\n * ******************************************************************/\r\n","DefaultTrace":"isTraceEnabled setTraceEnabled enter enter exit exit exit event event debug info warn error fatal println setPrintStream isTraceEnabled setTraceEnabled enter enter exit exit exit event event debug info warn error fatal println setPrintStream traceEnabled print traceEnabled print org.aspectj.weaver.tools.DefaultTrace org.aspectj.weaver.tools.DefaultTrace","MovePackageFragmentRootOperation":"renameEntryInClasspath renamePatterns executeOperation moveResource updateReferringProjectClasspaths removeEntryFromClasspath org.aspectj.org.eclipse.jdt.internal.core.MovePackageFragmentRootOperation  update exclusion  remove entry equals to destination\r\n  rename entry\r\n  move resource\r\n  update refering projects classpath excluding orignating project\r\n  update originating classpath\r\n  update destination classpath\r\n  subtree doesn't contain any nested source folders\r\n  folder containing nested source folder\r\n  nested source folder\r\n /*\r\n\t * Renames the classpath entries equal to the given path in the given project.\r\n\t * If an entry with the destination path already existed, remove it.\r\n\t */\r\n /*\r\n\t * Renames the classpath entries equal to the given path in all Java projects.\r\n\t */\r\n /*\r\n\t * Removes the classpath entry equal to the given path from the given project's classpath.\r\n\t */\r\n","EclipseAdapterUtils":"makeLocationContext makeSourceLocation makeMessage makeErrorMessage makeErrorMessage org.aspectj.ajdt.internal.core.builder.EclipseAdapterUtils  sanity .....\r\n  return Util.bind(\"problem.noSourceInformation\");   compute the how-much-char we are displaying around the inaccurate token\r\n  Dont like this - why does it occur? pr152835\r\n  extract the message form the source\r\n  remove all SPACE and TAB that begin the error message...\r\n  buffer spaces and tabs in order to reach the error position\r\n  can't be bigger\r\n  AMC if we took stuff off the start, take it into account!\r\n  mark the error position\r\n  resize underneathto remove 'null' chars\r\n  $NON-NLS-2$   XXX some cut-and-paste from eclipse sources\r\n  XXX 0 column is wrong but recoverable from makeLocationContext\r\n  about all secondary locations (pr209372)\r\n  in the extraDetails.\r\n  represents this so AJDT sees it correctly.\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","IExtendedModifier":"isModifier isAnnotation org.aspectj.org.eclipse.jdt.core.dom.IExtendedModifier","AbstractPatternNodeVisitor":"visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit visit org.aspectj.weaver.patterns.AbstractPatternNodeVisitor org.aspectj.weaver.patterns.AbstractPatternNodeVisitor /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.ArgsPointcut, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.BindingAnnotationTypePattern,\r\n\t * java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.BindingTypePattern, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.CflowPointcut, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.ConcreteCflowPointcut, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.DeclareAnnotation, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.DeclareErrorOrWarning, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.DeclareParents, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.DeclarePrecedence, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.DeclareSoft, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.ExactAnnotationTypePattern,\r\n\t * java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.ExactTypePattern, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.HandlerPointcut, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.IfPointcut, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.KindedPointcut, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.ModifiersPattern, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.NamePattern, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.NotAnnotationTypePattern,\r\n\t * java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.NotPointcut, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.NotTypePattern, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.OrAnnotationTypePattern, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.OrPointcut, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.OrTypePattern, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.PerCflow, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.PerFromSuper, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.PerObject, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.PerSingleton, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.PerTypeWithin, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.PatternNode, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.ReferencePointcut, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.SignaturePattern, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.ThisOrTargetAnnotationPointcut,\r\n\t * java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.ThisOrTargetPointcut, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.ThrowsPattern, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.TypePatternList, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.WildAnnotationTypePattern,\r\n\t * java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.WildTypePattern, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.WithinAnnotationPointcut,\r\n\t * java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.WithinCodeAnnotationPointcut,\r\n\t * java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.WithinPointcut, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.WithincodePointcut, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.Pointcut.MatchesNothingPointcut,\r\n\t * java.lang.Object)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.ArgsPointcut, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.BindingAnnotationTypePattern,\r\n\t * java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.BindingTypePattern, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.CflowPointcut, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.ConcreteCflowPointcut, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.DeclareAnnotation, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.DeclareErrorOrWarning, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.DeclareParents, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.DeclarePrecedence, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.DeclareSoft, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.ExactAnnotationTypePattern,\r\n\t * java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.ExactTypePattern, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.HandlerPointcut, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.IfPointcut, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.KindedPointcut, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.ModifiersPattern, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.NamePattern, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.NotAnnotationTypePattern,\r\n\t * java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.NotPointcut, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.NotTypePattern, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.OrAnnotationTypePattern, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.OrPointcut, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.OrTypePattern, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.PerCflow, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.PerFromSuper, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.PerObject, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.PerSingleton, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.PerTypeWithin, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.PatternNode, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.ReferencePointcut, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.SignaturePattern, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.ThisOrTargetAnnotationPointcut,\r\n\t * java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.ThisOrTargetPointcut, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.ThrowsPattern, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.TypePatternList, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.WildAnnotationTypePattern,\r\n\t * java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.WildTypePattern, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.WithinAnnotationPointcut,\r\n\t * java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.WithinCodeAnnotationPointcut,\r\n\t * java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.WithinPointcut, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.WithincodePointcut, java.lang.Object)\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.aspectj.weaver.patterns.PointcutVisitor#visit(org.aspectj.weaver.patterns.Pointcut.MatchesNothingPointcut,\r\n\t * java.lang.Object)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","CodeSnippetSuperReference":"genericTypeArguments resolveType isSuperAccess isTypeAccess setActualReceiverType setDepth setFieldIndex org.aspectj.org.eclipse.jdt.internal.eval.CodeSnippetSuperReference","LocalVariableTable":"accept dump getLocalVariableTable getLocalVariable setLocalVariableTable toString copy getTableLength unpack accept dump getLocalVariableTable getLocalVariable setLocalVariableTable toString copy getTableLength unpack isInPackedState data localVariableTableLength localVariableTable isInPackedState data localVariableTableLength localVariableTable org.aspectj.apache.bcel.classfile.LocalVariableTable org.aspectj.apache.bcel.classfile.LocalVariableTable  if 'isInPackedState' then this data needs unpacking\r\n  throw it away now\r\n  Unpacks the byte array into the table\r\n  if 'isInPackedState' then this data needs unpacking\r\n  throw it away now\r\n  Unpacks the byte array into the table\r\n","ConcreteAspectCodeGen":"validate getOutstandingAbstractMethods getOutstandingAbstractMethodsHelper stringify hasPointcutAnnotation getClassName getBytes reportError validate getOutstandingAbstractMethods getOutstandingAbstractMethodsHelper stringify hasPointcutAnnotation getClassName getBytes reportError EMPTY_STRINGS EMPTY_TYPES concreteAspect world isValid parent perclause EMPTY_STRINGS EMPTY_TYPES concreteAspect world isValid parent perclause org.aspectj.weaver.loadtime.ConcreteAspectCodeGen org.aspectj.weaver.loadtime.ConcreteAspectCodeGen  this\r\n  m_perClause = new PerSingleton();\r\n  no need to checks more in that special case\r\n  it can happen that extends is null, for precedence only declaration\r\n  fallback on inner class lookup mechanism\r\n  handle inner classes\r\n  extends must be abstract\r\n  m_parent must be aspect\r\n  must have all abstractions defined\r\n  error, an outstanding abstract method that can't be concretized in XML\r\n  it may be a pointcut but it doesn't meet the requirements for XML concretization\r\n  error, an outstanding abstract method that can't be concretized in XML\r\n  Allow for the abstract pointcut being from a code style aspect compiled with -1.5 (see test for 128744)\r\n  them if they get defined further down the hierarchy\r\n  Get to the top\r\n  concretized.\r\n  TODO AV - we could point\r\n  TODO AV - we could point\r\n  JSR-45\r\n  @Aspect public class ...\r\n  List elems = new ArrayList();\r\n  default constructor\r\n  TODO AV - respect visibility instead of opening up as public?\r\n  handle the perClause\r\n  exist on the classpath anywhere\r\n  this\r\n  m_perClause = new PerSingleton();\r\n  no need to checks more in that special case\r\n  it can happen that extends is null, for precedence only declaration\r\n  fallback on inner class lookup mechanism\r\n  handle inner classes\r\n  extends must be abstract\r\n  m_parent must be aspect\r\n  must have all abstractions defined\r\n  error, an outstanding abstract method that can't be concretized in XML\r\n  it may be a pointcut but it doesn't meet the requirements for XML concretization\r\n  error, an outstanding abstract method that can't be concretized in XML\r\n  Allow for the abstract pointcut being from a code style aspect compiled with -1.5 (see test for 128744)\r\n  them if they get defined further down the hierarchy\r\n  Get to the top\r\n  concretized.\r\n  TODO AV - we could point\r\n  TODO AV - we could point\r\n  JSR-45\r\n  @Aspect public class ...\r\n  List elems = new ArrayList();\r\n  default constructor\r\n  TODO AV - respect visibility instead of opening up as public?\r\n  handle the perClause\r\n  exist on the classpath anywhere\r\n","Comment":"isBlockComment isLineComment isDocComment getAlternateRoot setAlternateRoot memSize alternateRoot org.aspectj.org.eclipse.jdt.core.dom.Comment  but we protect them nevertheless\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","IJavaElement":"exists getAncestor getAttachedJavadoc getCorrespondingResource getElementName getElementType getHandleIdentifier getJavaModel getJavaProject getOpenable getParent getPath getPrimaryElement getResource getSchedulingRule getUnderlyingResource isReadOnly isStructureKnown JAVA_MODEL JAVA_PROJECT PACKAGE_FRAGMENT_ROOT PACKAGE_FRAGMENT COMPILATION_UNIT CLASS_FILE TYPE FIELD METHOD INITIALIZER PACKAGE_DECLARATION IMPORT_CONTAINER IMPORT_DECLARATION LOCAL_VARIABLE TYPE_PARAMETER org.aspectj.org.eclipse.jdt.core.IJavaElement  TODO (philippe) predicate shouldn't throw an exception\r\n","ClassFileBytesDisassembler":"disassemble disassemble getDescription DETAILED DEFAULT SYSTEM COMPACT WORKING_COPY org.aspectj.org.eclipse.jdt.core.util.ClassFileBytesDisassembler","EnumDeclaration":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty internalGetChildListProperty internalJavadocProperty internalModifiers2Property internalModifiersProperty internalNameProperty internalBodyDeclarationsProperty getNodeType0 clone0 subtreeMatch0 accept0 superInterfaceTypes enumConstants internalResolveBinding memSize treeSize JAVADOC_PROPERTY MODIFIERS2_PROPERTY NAME_PROPERTY SUPER_INTERFACE_TYPES_PROPERTY ENUM_CONSTANTS_PROPERTY BODY_DECLARATIONS_PROPERTY PROPERTY_DESCRIPTORS superInterfaceTypes enumConstants org.aspectj.org.eclipse.jdt.core.dom.EnumDeclaration  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  this property will not be asked for (node type did not exist in JLS2)\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on BodyDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on AbstractTypeDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on AbstractTypeDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on AsbtractTypeDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","BcelField":"unpackAttributes isAjSynthetic isSynthetic hasAnnotation getAnnotationTypes getAnnotations getAnnotationOfType ensureAnnotationTypesRetrieved addAnnotation getGenericReturnType getFieldAsIs getField unpackGenericSignature evictWeavingState unpackAttributes isAjSynthetic isSynthetic hasAnnotation getAnnotationTypes getAnnotations getAnnotationOfType ensureAnnotationTypesRetrieved addAnnotation getGenericReturnType getFieldAsIs getField unpackGenericSignature evictWeavingState AccSynthetic field isAjSynthetic isSynthetic annotations world bcelObjectType genericFieldType unpackedGenericSignature annotationsAdded AccSynthetic field isAjSynthetic isSynthetic annotations world bcelObjectType genericFieldType unpackedGenericSignature annotationsAdded org.aspectj.weaver.bcel.BcelField org.aspectj.weaver.bcel.BcelField  in 1.5, synthetic is a modifier, not an attribute\r\n  || getName().startsWith(NameMangler.PREFIX);\r\n  Add it to the set of annotations\r\n  Add it to the set of annotation types\r\n  we are now correct again\r\n  FIXME asc badly performing code ftw !\r\n  get from generic\r\n  lookup\r\n  development bug, fail fast with good info\r\n  this.sourceContext = SourceContextImpl.UNKNOWN_SOURCE_CONTEXT;\r\n  in 1.5, synthetic is a modifier, not an attribute\r\n  || getName().startsWith(NameMangler.PREFIX);\r\n  Add it to the set of annotations\r\n  Add it to the set of annotation types\r\n  we are now correct again\r\n  FIXME asc badly performing code ftw !\r\n  get from generic\r\n  lookup\r\n  development bug, fail fast with good info\r\n  this.sourceContext = SourceContextImpl.UNKNOWN_SOURCE_CONTEXT;\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","IClassFileReader":"getAccessFlags getFieldInfos getInterfaceNames getInterfaceIndexes getInnerClassesAttribute getMethodInfos getClassName getClassIndex getSuperclassName getSuperclassIndex isClass isInterface getSourceFileAttribute getConstantPool getMinorVersion getMajorVersion getAttributeCount getAttributes getMagic getFieldsCount getMethodsCount ALL CONSTANT_POOL METHOD_INFOS FIELD_INFOS SUPER_INTERFACES CLASSFILE_ATTRIBUTES METHOD_BODIES ALL_BUT_METHOD_BODIES org.aspectj.org.eclipse.jdt.core.util.IClassFileReader","InternalSearchPattern":"acceptMatch currentPattern documentPath findIndexMatches isPolymorphicSearch queryIn focus kind mustResolve org.aspectj.org.eclipse.jdt.internal.core.search.matching.InternalSearchPattern  Note that requestor has to verify if needed whether the document violates the access restriction or not\r\n  scope encloses the document path\r\n  $NON-NLS-1$\r\n  TODO (kent) some clients may not need the document names\r\n","SynchronizedStatement":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getExpression setExpression getBody setBody memSize treeSize analyseCode isSubRoutineEscaping generateCode generateSubRoutineInvocation resolve printStatement traverse EXPRESSION_PROPERTY BODY_PROPERTY PROPERTY_DESCRIPTORS expression body expression block scope synchroVariable SecretLocalDeclarationName preSynchronizedInitStateIndex mergedSynchronizedInitStateIndex org.aspectj.org.eclipse.jdt.core.dom.SynchronizedStatement org.aspectj.org.eclipse.jdt.internal.compiler.ast.SynchronizedStatement  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  lazy init must be thread-safe for readers\r\n  $NON-NLS-1$\r\n  for local variables table attributes\r\n  mark the synthetic variable as being used\r\n  simple propagation to subnodes\r\n  optimizing code gen\r\n  when the code generation is restarted in wide mode\r\n  generate the synchronization expression\r\n  enter the monitor\r\n  generate  the body of the synchronized block\r\n  close all locals defined in the synchronized block except the secret local\r\n  generate the body of the exception handler\r\n  May loose some local variable initializations : affecting the local variable attributes\r\n  only take the lock\r\n  special scope for secret locals optimization.\r\n  continue even on errors in order to have the TC done into the statements\r\n  not inlinable\r\n  $NON-NLS-1$\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","TypeVariableDeclaringElement":"getTypeVariableNamed getTypeVariableNamed org.aspectj.weaver.TypeVariableDeclaringElement org.aspectj.weaver.TypeVariableDeclaringElement /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Andy Clement\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Andy Clement\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","JarPackageFragmentRoot":"computeChildren createElementInfo determineKind equals getElementName getJar getKind getNonJavaResources getPackageFragment getPath getResource getUnderlyingResource hashCode initPackageFragToTypes isArchive isExternal isReadOnly resourceExists toStringAncestors EMPTY_LIST jarPath org.aspectj.org.eclipse.jdt.internal.core.JarPackageFragmentRoot  always create the default package\r\n  and cache the entry names in the infos created for those package fragments\r\n  We want to show non java resources of the default package at the root (see PR #1G58NB8)\r\n  external jar\r\n  non-Java resource folder\r\n  add classfile info amongst children\r\n  don't make the path relative as this is an external archive\r\n  also see https:","InvocationSite":"genericTypeArguments isSuperAccess isTypeAccess setDepth setFieldIndex setActualReceiverType sourceStart sourceEnd org.aspectj.org.eclipse.jdt.internal.compiler.lookup.InvocationSite  e.g2. in presence of implicit access to enclosing type\r\n","AjCompilerOptions":"getMap set setAspectJWarningDefaults toString OPTION_ReportInvalidAbsoluteTypeName OPTION_ReportInvalidWildcardTypeName OPTION_ReportUnresolvableMember OPTION_ReportTypeNotExposedToWeaver OPTION_ReportShadowNotInStructure OPTION_ReportUnmatchedSuperTypeInCall OPTION_ReportCannotImplementLazyTJP OPTION_ReportNeedSerialVersionUIDField OPTION_ReportIncompatibleSerialVersion OPTION_TerminateAfterCompilation OPTION_XSerializableAspects OPTION_XLazyThisJoinPoint OPTION_XNoInline OPTION_XNotReweavable OPTION_XHasMember OPTION_XdevPinpoint OPTION_XDevNoAtAspectJProcessing OPTION_GenerateModel OPTION_GenerateJavaDocsInModel OPTION_Emacssym InvalidAbsoluteTypeName InvalidWildCardTypeName UnresolvableMember TypeNotExposedToWeaver ShadowNotInStructure UnmatchedSuperTypeInCall CannotImplementLazyTJP NeedSerialVersionUIDField IncompatibleSerialVersion terminateAfterCompilation xSerializableAspects xLazyThisJoinPoint xNoInline xNotReweavable xHasMember xdevPinpoint showWeavingInformation xOptionalJoinpoints behaveInJava5Way targetAspectjRuntimeLevel xConfigurationInfo addSerialVerUID generateModel generateJavaDocsInModel generateEmacsSymFiles noAtAspectJProcessing generateCrossRefs checkRuntimeVersion proceedOnError org.aspectj.ajdt.internal.core.builder.AjCompilerOptions  AspectJ Lint options\r\n  General AspectJ Compiler options (excludes paths etc, these are handled separately)\r\n  these next four not exposed by IDEs\r\n  constants for irritant levels\r\n  If true - autoboxing behaves differently ...\r\n  Specifies the level of the aspectjrt.jar we are targetting\r\n  these next four not exposed by IDEs\r\n  Check aspectjrt*.jar exists and within it the version number is right (see AjBuildManager.checkRtJar())\r\n  now add AspectJ additional options\r\n  now add AspectJ additional options\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.impl.CompilerOptions#getMap()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.impl.CompilerOptions#set(java.util.Map)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#toString()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","AbstractIconRegistry":"getIcon getStructureIcon getIcon createIcon RESOURCE_PATH STRUCTURE_PATH PROJECT PACKAGE ASPECT INITIALIZER INTRODUCTION CONSTRUCTOR POINTCUT ADVICE DECLARE_PARENTS DECLARE_WARNING DECLARE_ERROR DECLARE_SOFT CODE ERROR FILE FILE_JAVA FILE_ASPECTJ FILE_LST METHOD FIELD ENUM_VALUE ENUM ANNOTATION CLASS INTERFACE RELATION_ADVICE_FORWARD RELATION_ADVICE_BACK RELATION_INHERITANCE_FORWARD RELATION_INHERITANCE_BACK RELATION_REFERENCE_FORWARD RELATION_REFERENCE_BACK org.aspectj.ajde.ui.AbstractIconRegistry  ??? should be enum value icon\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","DeltaProcessingState":"addElementChangedListener addPreResourceChangedListener getDeltaProcessor addClasspathValidation addProjectReferenceChange initializeRoots removeClasspathValidations removeProjectReferenceChanges removeElementChangedListener removePreResourceChangedListener resourceChanged getExternalLibTimeStamps findJavaProject getOldJavaProjecNames resetOldJavaProjectNames getTimeStampsFile saveExternalLibTimeStamps updateRoots elementChangedListeners elementChangedListenerMasks elementChangedListenerCount preResourceChangeListeners preResourceChangeEventMasks preResourceChangeListenerCount deltaProcessors roots otherRoots oldRoots oldOtherRoots sourceAttachments projectDependencies rootsAreStale initializingThreads externalTimeStamps classpathValidations projectReferenceChanges javaProjectNamesCache org.aspectj.org.eclipse.jdt.internal.core.DeltaProcessingState  any event mask of another listeners (yet not notified).\r\n  could be different\r\n  may need to grow, no need to clone, since iterators will have cached original arrays and max boundary and we only add to the end.\r\n  may need to grow, no need to clone, since iterators will have cached original arrays and max boundary and we only add to the end.\r\n  recompute root infos only if necessary\r\n  see https:  ensure that containers are initialized in one batch\r\n  nothing can be done\r\n  continue with next project\r\n  TODO (jerome) reuse handle\r\n  root path\r\n  source attachment path\r\n  double check again\r\n  need to clone defensively since we might be in the middle of listener notifications (#fire)\r\n  copy trailing listeners\r\n  the original ones)\r\n  need to clone defensively since we might be in the middle of listener notifications (#fire)\r\n  copy trailing listeners\r\n  the original ones)\r\n  wrap callbacks with Safe runnable for subsequent listeners to be called when some are causing grief\r\n  $NON-NLS-1$\r\n  TODO (jerome) see 47631, may want to get rid of following so as to reuse delta processor ?\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  only consider folder roots that are not included in the container\r\n  only consider folder roots that are not included in the container\r\n /*\r\n\t * Collection of listeners for Java element deltas\r\n\t */\r\n /*\r\n\t * Collection of pre Java resource change listeners\r\n\t */\r\n /*\r\n\t * The delta processor for the current thread.\r\n\t */\r\n /* A table from IPath (from a classpath entry) to DeltaProcessor.RootInfo */\r\n /* A table from IPath (from a classpath entry) to ArrayList of DeltaProcessor.RootInfo\r\n\t * Used when an IPath corresponds to more than one root */\r\n /* A table from IPath (from a classpath entry) to DeltaProcessor.RootInfo\r\n\t * from the last time the delta processor was invoked. */\r\n /* A table from IPath (from a classpath entry) to ArrayList of DeltaProcessor.RootInfo\r\n\t * from the last time the delta processor was invoked.\r\n\t * Used when an IPath corresponds to more than one root */\r\n /* A table from IPath (a source attachment path from a classpath entry) to IPath (a root path) */\r\n /* A table from IJavaProject to IJavaProject[] (the list of direct dependent of the key) */\r\n /* Whether the roots tables should be recomputed */\r\n /* Threads that are currently running initializeRoots() */\r\n /* A table from file system absoulte path (String) to timestamp (Long) */\r\n /* A table from JavaProject to ClasspathValidation */\r\n /* A table from JavaProject to ProjectReferenceChange */\r\n /*\r\n\t * Need to clone defensively the listener information, in case some listener is reacting to some notification iteration by adding/changing/removing\r\n\t * any of the other (for example, if it deregisters itself).\r\n\t */\r\n /*\r\n\t * Workaround for bug 15168 circular errors not reported \r\n\t * Returns the list of java projects before resource delta processing\r\n\t * has started.\r\n\t */\r\n /*\r\n\t * Update the roots that are affected by the addition or the removal of the given container resource.\r\n\t */\r\n","FloatLiteral":"computeConstant generateCode literalType traverse value Float_MIN_VALUE org.aspectj.org.eclipse.jdt.internal.compiler.ast.FloatLiteral  work-around VAJ problem 1F6IGUU\r\n  error: the number is too large to represent\r\n  error: the number is too small to represent\r\n  being rejected by 1.4 libraries where Float.valueOf(...) doesn't handle hex decimal floats\r\n  error: the number is too large to represent\r\n  1.0e-5000d is non-zero, but underflows to 0\r\n  no exponent - mantissa is all zero\r\n  error: the number is too small to represent\r\n  it is welled formated so just test against '0' and potential . D d\r\n","EclipseClassPathManager":"setNameEnvironment addPath find getAllClassFiles toString getInputStream close getPath nameEnv source is org.aspectj.ajdt.internal.core.builder.EclipseClassPathManager  whereas a name environment may be constructed per-compile.\r\n  XXX - but better than the alternative hacks\r\n  Should never happen !\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.bcel.ClassPathManager#addPath(java.lang.String, org.aspectj.bridge.IMessageHandler)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.bcel.ClassPathManager#find(org.aspectj.weaver.UnresolvedType)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.bcel.ClassPathManager#getAllClassFiles()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#toString()\r\n\t */\r\n /* (non-Javadoc)\r\n\t\t * @see org.aspectj.weaver.bcel.ClassPathManager.ClassFile#getInputStream()\r\n\t\t */\r\n /* (non-Javadoc)\r\n\t\t * @see org.aspectj.weaver.bcel.ClassPathManager.ClassFile#getPath()\r\n\t\t */\r\n","Java15GenericSignatureInformationProvider":"getGenericParameterTypes getGenericReturnType isBridge isVarArgs isSynthetic getGenericParameterTypes getGenericReturnType isBridge isVarArgs isSynthetic world world org.aspectj.weaver.reflect.Java15GenericSignatureInformationProvider org.aspectj.weaver.reflect.Java15GenericSignatureInformationProvider /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.reflect.GenericSignatureInformationProvider#getGenericParameterTypes(org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.reflect.GenericSignatureInformationProvider#getGenericReturnType(org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.reflect.GenericSignatureInformationProvider#isBridge()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.reflect.GenericSignatureInformationProvider#isVarArgs()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.reflect.GenericSignatureInformationProvider#isSynthetic()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.reflect.GenericSignatureInformationProvider#getGenericParameterTypes(org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.reflect.GenericSignatureInformationProvider#getGenericReturnType(org.aspectj.weaver.reflect.ReflectionBasedResolvedMemberImpl)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.reflect.GenericSignatureInformationProvider#isBridge()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.reflect.GenericSignatureInformationProvider#isVarArgs()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.reflect.GenericSignatureInformationProvider#isSynthetic()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","ModifiersPattern":"toString equals hashCode matches read write getModifierFlag accept toString equals hashCode matches read write getModifierFlag accept requiredModifiers forbiddenModifiers ANY modifierFlags requiredModifiers forbiddenModifiers ANY modifierFlags org.aspectj.weaver.patterns.ModifiersPattern org.aspectj.weaver.patterns.ModifiersPattern  s.writeByte(MODIFIERS_PATTERN);\r\n  s.writeByte(MODIFIERS_PATTERN);\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","AspectDeclaration":"isAbstract resolve checkSpec addAtAspectJAnnotations generateCode needClassInitMethod generateAttributes addVersionAttributeIfNecessary generateInlineAccessMembers generatePerSupportMembers generate generateMethod generateMethod makeEffectiveSignatureAttribute generateMethod generatePerCflowAspectOfMethod generatePerCflowHasAspectMethod generatePerCflowPushMethod generatePerCflowAjcClinitMethod generatePerObjectInterface generatePerTypeWithinAspectOfMethod generatePerObjectAspectOfMethod generatePerObjectHasAspectMethod generatePerTypeWithinHasAspectMethod generatePerObjectBindMethod generatePerTypeWithinGetWithinTypeNameMethod generatePerTypeWithinGetInstanceMethod generatePerTypeWithinCreateAspectInstanceMethod generatePerSingletonAspectOfMethod generatePerSingletonHasAspectMethod generatePerSingletonAjcClinitMethod generateSuperAccessMethod generateInlineAccessMethod generateInlineAccessors generateInlineAccessMethod lookupPerClauseKind buildPerClause resolvePerClause buildInterTypeAndPerClause printHeader getDeclaredModifiers clone0 accept0 internalGetSetBooleanProperty internalGetSetChildProperty propertyDescriptors getPerClause setPerClause isPrivileged setPrivileged getAdvice perClause aspectOfMethod ptwGetWithinTypeNameMethod hasAspectMethod accessForInline superAccessForInline isPrivileged declaredModifiers concreteName typeX factory adviceCounter declareCounter dominatesPattern initFailureField weaverVersionChars PERCLAUSE_PROPERTY PRIVILEGED_PROPERTY aspectPROPERTY_DESCRIPTORS_2_0 aspectPROPERTY_DESCRIPTORS_3_0 perClause isPrivileged org.aspectj.ajdt.internal.compiler.ast.AspectDeclaration org.aspectj.org.eclipse.jdt.core.dom.AspectDeclaration  private AjAttribute.Aspect aspectAttribute;\r\n  ??? should use this consistently\r\n  Used as a part of the generated name for advice methods\r\n  Used as a part of the generated name for methods representing declares\r\n  for better error messages in 1.0 to 1.1 transition\r\n  remember our modifiers, we're going to be public in generateCode\r\n  XXX this only works for aspects that come from source\r\n  check the aspect was not declared generic, only abstract aspects can have type params\r\n  if (myType == null) System.err.println(\"bad myType for: \" + this);\r\n  can't be Serializable  if super type is generic, check that we have fully parameterized it\r\n  make me and my binding public\r\n  CUSTARD binding.addField(factory.makeFieldBinding(AjcMemberMaker.perCflowField(typeX)));\r\n  CUSTARD\r\n  XXX need to get this attribute on anyone with a pointcut for good errors\r\n  XXX otherwise we need to have this (error handling?)\r\n  public static <aspecttype> aspectOf(java.lang.Class)\r\n  private static <aspecttype> ajc$getInstance(Class c) throws\r\n  Exception\r\n  generate public static X ajc$createAspectInstance(Class\r\n  forClass) {\r\n  EclipseFactory world = EclipseFactory.fromScopeLookupEnvironment(this.scope);\r\n  mini optimization\r\n  codeStream.initializeMaxLocals(methodBinding);\r\n  body starts here\r\n  body ends here\r\n  pr148693\r\n  body starts here\r\n  body starts here\r\n  body starts here\r\n  body starts here\r\n  Run the simple ctor for NABE\r\n  PTWIMPL Generate aspectOf() method\r\n  body starts here\r\n  body starts here\r\n  PTWIMPL Generate hasAspect() method\r\n  body starts here\r\n  XXX this case might call for screaming\r\n  XXX should do a check for null here and throw a NoAspectBound\r\n  return type\r\n  this just returns null now - the old version used to throw the caught exception!\r\n  PTWIMPL Generate getInstance method\r\n  body starts here (see end of each line for what it is doing!)\r\n  GETSTATIC\r\n  IFNONNULL\r\n  NEW\r\n  DUP\r\n  LDC\r\n  GETSTATIC\r\n  INVOKESPECIAL\r\n  ATHROW\r\n  GETSTATIC\r\n  ARETURN\r\n  body starts here\r\n  body starts here\r\n  body starts here\r\n  body starts here\r\n  body starts here\r\n  XXX need to handle this too\r\n  ???\r\n  PTWIMPL Use these variants of aspectOf()  XXX might be too soon for some error checking\r\n  modifiers that were supplied in the original source code\r\n  $NON-NLS-1$\r\n  $NON-NLS-2$   $NON-NLS-1$\r\n  switched from MemberTypeDeclaration to TypeDeclaration\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  stays null if the aspect is an _implicit_ persingleton()\r\n  visit children in normal left to right reading order\r\n  allow default implementation to flag the error\r\n  ajh02: method added\r\n /*\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * ResolvedMember\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * realMember\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t */\r\n /*\r\n\t * additionalAttributes allows us to pass some optional attributes we want to attach to the method we generate. Currently this\r\n\t * is used for inline accessor methods that have been generated to allow private field references or private method calls to be\r\n\t * inlined (PR71377). In these cases the optional attribute is an effective signature attribute which means calls to these\r\n\t * methods are able to masquerade as any join point (a field set, field get or method call). The effective signature attribute\r\n\t * is 'unwrapped' in BcelClassWeaver.matchInvokeInstruction()\r\n\t */\r\n /*\r\n\t\t * Code: Stack=1, Locals=1, Args_size=1 0: aload_0 1: getfield #14; //Field ajc$withinType:Ljava/lang/String; 4: areturn\r\n\t\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /*\r\n\t * (omit javadoc for this method) Method declared on ASTNode.\r\n\t */\r\n /*\r\n\t * (omit javadoc for this method) Method declared on ASTNode.\r\n\t */\r\n /*\r\n\t * (omit javadoc for this method) Method declared on ASTNode and AjTypeDeclaration.\r\n\t */\r\n /*\r\n\t * (omit javadoc for this method) Method declared on ASTNode.\r\n\t */\r\n","IndexingParser":"newImportReference newSingleNameReference newQualifiedNameReference singleNameReference qualifiedNameReference importReference org.aspectj.org.eclipse.jdt.internal.core.search.indexing.IndexingParser /*\r\n * A source element parser that avoids creating unnecessary nodes.\r\n */\r\n","Dump":"preserveOnNextReset reset dump dumpWithException dumpWithException dumpOnExit dumpOnExit shouldDumpOnExit setDumpOnException setDumpDirectory getDumpOnException setDumpOnExit setDumpOnExit getDumpOnExit getLastDumpFileName saveCommandLine saveFullClasspath saveMessageHolder registerNode getFileName dumpDefault dumpDefault dumpNodes dumpException dumpAspectJProperties dumpDumpConfiguration dumpFullClasspath dumpSytemProperties dumpCommandLine dumpCompilerMessages openDump close println println println println println println formatObj accept visitObject visitList preserveOnNextReset reset dump dumpWithException dumpWithException dumpOnExit dumpOnExit shouldDumpOnExit setDumpOnException setDumpDirectory getDumpOnException setDumpOnExit setDumpOnExit getDumpOnExit getLastDumpFileName saveCommandLine saveFullClasspath saveMessageHolder registerNode getFileName dumpDefault dumpDefault dumpNodes dumpException dumpAspectJProperties dumpDumpConfiguration dumpFullClasspath dumpSytemProperties dumpCommandLine dumpCompilerMessages openDump close println println println println println println formatObj accept visitObject visitList DUMP_CONDITION_PROPERTY DUMP_DIRECTORY_PROPERTY FILENAME_PREFIX FILENAME_SUFFIX UNKNOWN_FILENAME DUMP_EXCLUDED NULL_OR_EMPTY exceptionClass conditionKind directory reason fileName print savedCommandLine savedFullClasspath savedMessageHolder nodes lastDumpFileName preserveOnNextReset trace DUMP_CONDITION_PROPERTY DUMP_DIRECTORY_PROPERTY FILENAME_PREFIX FILENAME_SUFFIX UNKNOWN_FILENAME DUMP_EXCLUDED NULL_OR_EMPTY exceptionClass conditionKind directory reason fileName print savedCommandLine savedFullClasspath savedMessageHolder nodes lastDumpFileName preserveOnNextReset trace org.aspectj.weaver.Dump org.aspectj.weaver.Dump  private static final DateFormat timeFormat = new SimpleDateFormat(\"HHmmss.SSS\");\r\n  INode dumpNode = (INode)nodes.get(module);\r\n  private static final DateFormat timeFormat = new SimpleDateFormat(\"HHmmss.SSS\");\r\n  INode dumpNode = (INode)nodes.get(module);\r\n /* Format for unique filename based on date & time */\r\n /*\r\n\t * Dump methods\r\n\t */\r\n /*\r\n\t * Dump configuration\r\n\t */\r\n /*\r\n\t * Dump registration\r\n\t */\r\n /*\r\n\t * Dump methods\r\n\t */\r\n /*\r\n\t\t * Dump registered nodes\r\n\t\t */\r\n /*\r\n\t * Dump output\r\n\t */\r\n /* Use classname@hashcode */\r\n /* Classes can provide an alternative implementation of toString() */\r\n /* These classes have a safe implementation of toString() */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Matthew Webster \r\n * ******************************************************************/\r\n /* Format for unique filename based on date & time */\r\n /*\r\n\t * Dump methods\r\n\t */\r\n /*\r\n\t * Dump configuration\r\n\t */\r\n /*\r\n\t * Dump registration\r\n\t */\r\n /*\r\n\t * Dump methods\r\n\t */\r\n /*\r\n\t\t * Dump registered nodes\r\n\t\t */\r\n /*\r\n\t * Dump output\r\n\t */\r\n /* Use classname@hashcode */\r\n /* Classes can provide an alternative implementation of toString() */\r\n /* These classes have a safe implementation of toString() */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Matthew Webster \r\n * ******************************************************************/\r\n","BasicCompilationUnit":"initEncoding getContents getFileName getMainTypeName getPackageName toString contents fileName packageName mainTypeName encoding org.aspectj.org.eclipse.jdt.internal.core.BasicCompilationUnit  (e.g.   if no file, then get project encoding\r\n  answer the cached source\r\n  otherwise retrieve it\r\n  case of a .class file in a default package in a jar\r\n  $NON-NLS-1$\r\n /*\r\n * Initialize compilation unit encoding.\r\n * If we have a project, then get file name corresponding IFile and retrieve its encoding using\r\n * new API for encoding.\r\n * In case of a class file, then go through project in order to let the possibility to retrieve\r\n * a corresponding source file resource.\r\n * If we have a compilation unit, then get encoding from its resource directly...\r\n */\r\n","Expr":"accept getType makeCallExpr accept getType makeCallExpr NONE NONE org.aspectj.weaver.ast.Expr org.aspectj.weaver.ast.Expr /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","SimpleStructureViewToolPanel":"elementsUpdated updateCurrConfigLabel jbInit forward_button_actionPerformed back_button_actionPerformed structureView_button_actionPerformed hideNonAJ_button_actionPerformed hideAssociations_button_actionPerformed sort_button_actionPerformed serialVersionUID currentView separator_button hideNonAJEnabled hideAssociationsEnabled sortEnabled border1 border2 structureView_button label_panel currConfig_field spacer_panel jPanel2 forward_button navigation_panel back_button borderLayout1 buttons_panel borderLayout2 borderLayout3 borderLayout4 MODEL_LISTENER hideNonAJ_button navigation_panel1 hideAssociations_button borderLayout5 sort_button org.aspectj.ajde.ui.swing.SimpleStructureViewToolPanel  currConfig_field.setEditable(false);\r\n  label_panel.add(structureView_button,  BorderLayout.WEST);\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation\r\n *     Helen Hawkins  Converted to new interface (bug 148190)  \r\n * ******************************************************************/\r\n","NotTypePattern":"getNegatedPattern couldEverMatchSameTypesAs matchesInstanceof matchesExactly matchesExactly matchesStatically setAnnotationTypePattern setIsVarArgs write read resolveBindings parameterizeWith toString equals hashCode accept traverse getNegatedPattern couldEverMatchSameTypesAs matchesInstanceof matchesExactly matchesExactly matchesStatically setAnnotationTypePattern setIsVarArgs write read resolveBindings parameterizeWith toString equals hashCode accept traverse negatedPattern negatedPattern org.aspectj.weaver.patterns.NotTypePattern org.aspectj.weaver.patterns.NotTypePattern  ??? we override all methods that care about includeSubtypes\r\n  ??? we override all methods that care about includeSubtypes\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.TypePattern#couldEverMatchSameTypesAs(org.aspectj.weaver.patterns.TypePattern)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.weaver.patterns.TypePattern#couldEverMatchSameTypesAs(org.aspectj.weaver.patterns.TypePattern)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#equals(java.lang.Object)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","StandardAnnotation":"isRuntimeVisible stringify toString hasNamedValue hasNameValuePair getTargets getNameValuePairs hasNameValuePairs addNameValuePair getStringFormOfValue isRuntimeVisible stringify toString hasNamedValue hasNameValuePair getTargets getNameValuePairs hasNameValuePairs addNameValuePair getStringFormOfValue isRuntimeVisible nvPairs isRuntimeVisible nvPairs org.aspectj.weaver.StandardAnnotation org.aspectj.weaver.StandardAnnotation /* of AnnotationNVPair */\r\n /* <String> */\r\n /* *******************************************************************\r\n * Copyright (c) 2008 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /* of AnnotationNVPair */\r\n /* <String> */\r\n /* *******************************************************************\r\n * Copyright (c) 2008 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","KeyToSignature":"consumeArrayDimension consumeBaseType consumeCapture consumeLocalType consumeMethod consumeMemberType consumePackage consumeParameterizedGenericMethod substitute consumeParameterizedType consumeParser consumeField consumeException consumeFullyQualifiedName consumeSecondaryType consumeType consumeTypeParameter consumeTypeVariable consumeTypeWithCapture consumeWildCard getThrownExceptions getTypeArguments newParser toString SIGNATURE TYPE_ARGUMENTS DECLARING_TYPE THROWN_EXCEPTIONS signature kind arguments typeParameters thrownExceptions mainTypeStart mainTypeEnd typeSigStart org.aspectj.org.eclipse.jdt.internal.core.util.KeyToSignature  behave as if it was a wildcard\r\n  remove trailing semi-colon as it is added later in comsumeType()\r\n  type parameters\r\n  substitute parameters\r\n  substitute return type\r\n  substitute exceptions\r\n  handle array, wildcard and capture\r\n  member type\r\n  $NON-NLS-1$\r\n  default package\r\n  $NON-NLS-1$\r\n  remove main type if needed\r\n  parameter types\r\n  don't put generic type in signature\r\n  malformed\r\n /*\r\n\t * Substitutes the type variables referenced in the given parameter (a parameterized type signature) with the corresponding\r\n\t * type argument.\r\n\t * Appends the given parameter if it is not a parameterized type signature.\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#toString()\r\n\t */\r\n /*\r\n * Converts a binding key into a signature \r\n */\r\n","AnnotationAccessFieldVar":"appendLoadAndConvert toString appendLoadAndConvert toString annoAccessor annoFieldOfInterest annoAccessor annoFieldOfInterest org.aspectj.weaver.bcel.AnnotationAccessFieldVar org.aspectj.weaver.bcel.AnnotationAccessFieldVar  MethodExecution\r\n  value we want\r\n  within X\r\n  ResolvedMember[] fs = rt.getDeclaredFields();\r\n  MethodExecution\r\n  value we want\r\n  within X\r\n  ResolvedMember[] fs = rt.getDeclaredFields();\r\n /* *******************************************************************\r\n * Copyright (c) 2008 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2008 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement     initial implementation \r\n * ******************************************************************/\r\n","ILocalVariableTypeTableEntry":"getStartPC getLength getNameIndex getSignatureIndex getIndex getName getSignature org.aspectj.org.eclipse.jdt.core.util.ILocalVariableTypeTableEntry","AjdeCoreMessageHandlerAdapter":"dontIgnore handleMessage ignore isIgnoring handler org.aspectj.ajde.core.internal.AjdeCoreMessageHandlerAdapter","SortElementsOperation":"getMainAmountOfWork checkMalformedNodes isMalformed executeOperation calculateEdit processElement sortCompilationUnit verify insert covers CONTAINS_MALFORMED_NODES comparator positions apiLevel org.aspectj.org.eclipse.jdt.internal.core.SortElementsOperation  $NON-NLS-1$\r\n  abort sorting of current element\r\n  abort sorting of current element\r\n  abort sorting of current element\r\n  abort sorting of current element\r\n  abort sorting of current element\r\n  First dive down to find the right parent.\r\n  be moved under the new edit since it is covering it.\r\n","AsmRelationshipProvider":"checkerMunger addRelationship addDeclareAnnotationRelationship adviceMunger getNode sourceLinesMatch findOrCreateCodeNode lookupMember findMemberInClass getDefault addDeclareAnnotationMethodRelationship addDeclareAnnotationFieldRelationship checkerMunger addRelationship addDeclareAnnotationRelationship adviceMunger getNode sourceLinesMatch findOrCreateCodeNode lookupMember findMemberInClass getDefault addDeclareAnnotationMethodRelationship addDeclareAnnotationFieldRelationship INSTANCE ADVISES ADVISED_BY DECLARES_ON DECLAREDY_BY SOFTENS SOFTENED_BY MATCHED_BY MATCHES_DECLARE INTER_TYPE_DECLARES INTER_TYPE_DECLARED_BY ANNOTATES ANNOTATED_BY INSTANCE ADVISES ADVISED_BY DECLARES_ON DECLAREDY_BY SOFTENS SOFTENED_BY MATCHED_BY MATCHES_DECLARE INTER_TYPE_DECLARES INTER_TYPE_DECLARED_BY ANNOTATES ANNOTATED_BY org.aspectj.weaver.AsmRelationshipProvider org.aspectj.weaver.AsmRelationshipProvider  Ensure a node for the target exists\r\n  For ITDs\r\n  TODO: might want to show these in the future\r\n  Work out extra info to inform interested UIs !\r\n  get it into CVS !!!\r\n  foreward.getTargets().add\r\n  back.getTargets().add(\r\n  foreward.getTargets().add\r\n  back.getTargets().add(\r\n  pr235204\r\n  sl.getLine()),\r\n  we wont get unique handles\r\n  XXX remove this check\r\n  if we can't find the member, we'll just put it in the class\r\n  Utility.signatureToString(args[i].\r\n  getName()getSignature(), false);\r\n  Type[] args = method.getArgumentTypes();\r\n  its a method\r\n  its a ctor\r\n  assume default ctor\r\n  I know I know .. but I don't want to lose\r\n  Ensure a node for the target exists\r\n  For ITDs\r\n  TODO: might want to show these in the future\r\n  Work out extra info to inform interested UIs !\r\n  get it into CVS !!!\r\n  foreward.getTargets().add\r\n  back.getTargets().add(\r\n  foreward.getTargets().add\r\n  back.getTargets().add(\r\n  pr235204\r\n  sl.getLine()),\r\n  we wont get unique handles\r\n  XXX remove this check\r\n  if we can't find the member, we'll just put it in the class\r\n  Utility.signatureToString(args[i].\r\n  getName()getSignature(), false);\r\n  Type[] args = method.getArgumentTypes();\r\n  its a method\r\n  its a ctor\r\n  assume default ctor\r\n  I know I know .. but I don't want to lose\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","InstructionCP":"dump getLength toString toString getIndex setIndex getType getValue getExceptions dump getLength toString toString getIndex setIndex getType getValue getExceptions index index org.aspectj.apache.bcel.generic.InstructionCP org.aspectj.apache.bcel.generic.InstructionCP  index to constant pool\r\n  promote it\r\n  String name = cp.getConstantString(index, CONSTANT_Class);\r\n  Never reached\r\n  from ldc2_w:\r\n  Never reached\r\n  index to constant pool\r\n  promote it\r\n  String name = cp.getConstantString(index, CONSTANT_Class);\r\n  Never reached\r\n  from ldc2_w:\r\n  Never reached\r\n","IToken":"getString isIdentifier getLiteralKind maybeGetParsedPointcut getString isIdentifier getLiteralKind maybeGetParsedPointcut EOF EOF org.aspectj.weaver.patterns.IToken org.aspectj.weaver.patterns.IToken /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","JavaModelInfo":"computeNonJavaResources getNonJavaResources nonJavaResources org.aspectj.org.eclipse.jdt.internal.core.JavaModelInfo","SearchPattern":"camelCaseMatch camelCaseMatch createAndPattern createFieldPattern createMethodOrConstructorPattern createOrPattern createPackagePattern createPattern createPattern createPattern createTypePattern createTypePattern enclosingTypeNames decodeIndexKey getBlankPattern getIndexKey getIndexCategories getMatchRule matchesDecodedKey matchesName validateMatchRule toString R_EXACT_MATCH R_PREFIX_MATCH R_PATTERN_MATCH R_REGEXP_MATCH R_CASE_SENSITIVE R_ERASURE_MATCH R_EQUIVALENT_MATCH R_FULL_MATCH R_CAMELCASE_MATCH MODE_MASK matchRule org.aspectj.org.eclipse.jdt.core.search.SearchPattern  Set full match implicit mode\r\n  null pattern is equivalent to '*'\r\n  null name cannot match\r\n  null name cannot match\r\n  null pattern is equivalent to '*'\r\n  first char must strictly match (upper  check first pattern char\r\n  We have exhausted pattern, so it's a match\r\n  We have exhausted name (and not pattern), so it's not a match\r\n  For as long as we're exactly matching, bring it on (even if it's a lower case character)\r\n  If characters are not equals, then it's not a match if patternChar is lowercase\r\n  We have exhausted name (and not pattern), so it's not a match\r\n  .. and it matched patternChar. Back to the big loop\r\n  .. and it does not match patternChar, so it's not a match\r\n  nameChar is lowercase\r\n  .. and it matched patternChar. Back to the big loop\r\n  .. and it does not match patternChar, so it's not a match\r\n  nameChar is lowercase\r\n  patternChar is uppercase, so let's find the next uppercase in name\r\n  Main loop is on pattern characters\r\n  all other tokens are considered identifiers (see bug 21763 Problem in Java search [search])\r\n  read declaring type and fieldName\r\n  all other tokens are considered identifiers (see bug 21763 Problem in Java search [search])\r\n  read type\r\n  extract declaring type infos\r\n  prefix with a '*' as the full qualification could be bigger (because of an import)\r\n  extract type infos\r\n  Create field pattern\r\n  invalid syntax\r\n  invalid syntax\r\n  invalid syntax\r\n  invalid syntax\r\n  all other tokens are considered identifiers (see bug 21763 Problem in Java search [search])\r\n  read declaring type and selector\r\n  invalid syntax\r\n  $NON-NLS-1$\r\n  read type arguments\r\n  invalid syntax\r\n  invalid syntax\r\n  all other tokens are considered identifiers (see bug 21763 Problem in Java search [search])\r\n  fall through next case to add token\r\n  read parameter types\r\n  invalid syntax\r\n  invalid syntax\r\n  all other tokens are considered identifiers (see bug 21763 Problem in Java search [search])\r\n  fall through next case to add token\r\n  read return type\r\n  parenthesis mismatch\r\n  type arguments mismatch\r\n  get selector chars\r\n  retrieve type for constructor patterns\r\n  Signatures\r\n  get declaring type part and signature\r\n  declaring type is invalid\r\n  extract declaring type infos\r\n  get parameter type part and signature\r\n  string is not a valid type syntax\r\n  prefix with a '*' as the full qualification could be bigger (because of an import)\r\n  extract parameter types infos\r\n  get return type part and signature\r\n  declaring type is invalid\r\n  because of an import\r\n  extract return type infos\r\n  Create method  Ignore additional nature flags\r\n  prefix with a '*' as the full qualification could be bigger (because of an import)\r\n  Create field pattern\r\n  invalid import declaration\r\n  prefix with a '*' as the full qualification could be bigger (because of an import)\r\n  prefix with a '*' as the full qualification could be bigger (because of an import)\r\n  Create method  invalid syntax\r\n  all other tokens are considered identifiers (see bug 21763 Problem in Java search [search])\r\n  fall through default case to add token to type\r\n  get type part and signature\r\n  string is not a valid type syntax\r\n  get qualification name\r\n  cannot search for explicit member types\r\n  cannot search for explicit member types\r\n  (see bug 20532  Declaration of member binary type not found)\r\n  called from queryIn(), override as necessary\r\n  called from queryIn(), override as necessary\r\n  called from findIndexMatches(), override as necessary if index key is encoded\r\n  null is as if it was \"*\"\r\n  fall through next case to match as prefix if camel case failed\r\n  TODO (frederic) implement regular expression match\r\n  Verify Regexp match rule\r\n  Verify Pattern match rule\r\n  force Pattern rule\r\n  reset pattern match bit if any\r\n  remove Camel Case and Prefix match bits if any\r\n  Verify sting pattern validity\r\n  (see bug https:  This is equivalent to Camel Case match rule\r\n  Verify bits compatibility\r\n  Verify Camel Case match rule\r\n  $NON-NLS-1$\r\n /*comment*/\r\n /*whitespace*/\r\n /*nls*/\r\n /*sourceLevel*/\r\n /*taskTags*/\r\n /*taskPriorities*/\r\n /*comment*/\r\n /*whitespace*/\r\n /*nls*/\r\n /*sourceLevel*/\r\n /*taskTags*/\r\n /*taskPriorities*/\r\n /*comment*/\r\n /*whitespace*/\r\n /*nls*/\r\n /*sourceLevel*/\r\n /*taskTags*/\r\n /*taskPriorities*/\r\n","SwingTreeViewNodeFactory":"createDeclaration createLink createRelationship org.aspectj.ajde.ui.swing.SwingTreeViewNodeFactory /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n *     Helen Hawkins  Converted to new interface (bug 148190) \r\n * ******************************************************************/\r\n","ListRewriteEvent":"getEntries getChangeKind isListRewrite getChildren getOriginalValue getNewValue removeEntry replaceEntry revertChange getIndex insert setNewValue getChangeKind toString NEW OLD BOTH originalNodes listEntries org.aspectj.org.eclipse.jdt.internal.core.dom.rewrite.ListRewriteEvent  create if not yet existing\r\n  all nodes unchanged\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.dom.ASTRewriteChange#getChangeKind()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.dom.ASTRewriteChange#isListChange()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.dom.RewriteEvent#getChildren()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.dom.RewriteEvent#getOriginalNode()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.corext.dom.RewriteEvent#getNewValue()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see java.lang.Object#toString()\r\n\t */\r\n","Call":"accept getArgs getMethod accept getArgs getMethod method args method args org.aspectj.weaver.ast.Call org.aspectj.weaver.ast.Call  assert m.return value is boolean\r\n  assert m.return value is boolean\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","LocalDeclaration":"analyseCode checkModifiers generateCode getKind resolve traverse binding org.aspectj.org.eclipse.jdt.internal.compiler.ast.LocalDeclaration  only set if actually reached\r\n  record variable initialization if any\r\n  int i = (i = 0);\r\n  for local variable debug attributes\r\n  only potential valid modifier is <<final>>\r\n  even if not reachable, variable must be added to visible if allocated (28298)\r\n  if binding unused generate then discard the value\r\n  new code:\r\n  End AspectJ Extension\r\n  forget initializing unused or final locals set to constant value (final ones are inlined)\r\n  arrayLoc = null\r\n  arrayLoc = (type[])null\r\n  26903, need extra cast to store null in array local var\r\n  something to initialize?\r\n  create a binding and add it to the scope\r\n  want to report all possible errors\r\n  must call before computeConversion() and typeMismatchError()\r\n  narrowing then boxing ?\r\n  autoboxing\r\n  check for assignment with no effect\r\n  cast from constant actual type to variable type\r\n  store the constant for final locals\r\n  only resolve annotation at the end, for constant to be positionned before (96991)\r\n /* Variable may have been initialized during the code initializing it\r\n\t\t\t\t\te.g. int i = (i = 1);\r\n\t\t\t\t*/\r\n","DocumentParser":"parse getXMLReader resolveEntity startElement getWithinAttribute endElement warning error fatalError replaceXmlAnd isNull isTrue parse getXMLReader resolveEntity startElement getWithinAttribute endElement warning error fatalError replaceXmlAnd isNull isTrue DTD_PUBLIC_ID DTD_PUBLIC_ID_ALIAS DTD_STREAM ASPECTJ_ELEMENT WEAVER_ELEMENT DUMP_ELEMENT DUMP_BEFOREANDAFTER_ATTRIBUTE DUMP_PERCLASSLOADERDIR_ATTRIBUTE INCLUDE_ELEMENT EXCLUDE_ELEMENT OPTIONS_ATTRIBUTE ASPECTS_ELEMENT ASPECT_ELEMENT CONCRETE_ASPECT_ELEMENT NAME_ATTRIBUTE EXTEND_ATTRIBUTE PRECEDENCE_ATTRIBUTE PERCLAUSE_ATTRIBUTE POINTCUT_ELEMENT WITHIN_ATTRIBUTE EXPRESSION_ATTRIBUTE m_definition m_inAspectJ m_inWeaver m_inAspects m_lastConcreteAspect DTD_PUBLIC_ID DTD_PUBLIC_ID_ALIAS DTD_STREAM ASPECTJ_ELEMENT WEAVER_ELEMENT DUMP_ELEMENT DUMP_BEFOREANDAFTER_ATTRIBUTE DUMP_PERCLASSLOADERDIR_ATTRIBUTE INCLUDE_ELEMENT EXCLUDE_ELEMENT OPTIONS_ATTRIBUTE ASPECTS_ELEMENT ASPECT_ELEMENT CONCRETE_ASPECT_ELEMENT NAME_ATTRIBUTE EXTEND_ATTRIBUTE PRECEDENCE_ATTRIBUTE PERCLAUSE_ATTRIBUTE POINTCUT_ELEMENT WITHIN_ATTRIBUTE EXPRESSION_ATTRIBUTE m_definition m_inAspectJ m_inWeaver m_inAspects m_lastConcreteAspect org.aspectj.weaver.loadtime.definition.DocumentParser org.aspectj.weaver.loadtime.definition.DocumentParser  }\r\n  TODO AV - define what we want for XML parser error - for now stderr\r\n  TODO AV do we need to handle \"..)AND\" or \"AND(..\" ?\r\n  }\r\n  TODO AV - define what we want for XML parser error - for now stderr\r\n  TODO AV do we need to handle \"..)AND\" or \"AND(..\" ?\r\n /* .. and ignore \"System property ... not set\" and then try this instead */\r\n /* Try this first for Java 5 */\r\n /* .. and ignore \"System property ... not set\" and then try this instead */\r\n /* Try this first for Java 5 */\r\n","AST":"convertCompilationUnit newAST modificationCount apiLevel modifying disableEvents reenableEvents preRemoveChildEvent postRemoveChildEvent preReplaceChildEvent postReplaceChildEvent preAddChildEvent postAddChildEvent preValueChangeEvent postValueChangeEvent preCloneNodeEvent postCloneNodeEvent parseCompilationUnit parseCompilationUnit parseCompilationUnit parseCompilationUnit getBindingResolver getEventHandler setEventHandler getDefaultNodeFlag setDefaultNodeFlag setOriginalModificationCount resolveWellKnownType setBindingResolver unsupportedIn2 supportedOnlyIn2 createInstance createInstance newSimpleName newQualifiedName newName internalNewName newName newSimpleType newArrayType newArrayType newPrimitiveType newParameterizedType newQualifiedType newWildcardType newCompilationUnit newPackageDeclaration newImportDeclaration newTypeDeclaration newMethodDeclaration newSingleVariableDeclaration newVariableDeclarationFragment newInitializer newEnumConstantDeclaration newEnumDeclaration newTypeParameter newAnnotationTypeDeclaration newAnnotationTypeMemberDeclaration newModifier newModifiers newBlockComment newLineComment newJavadoc newTagElement newTextElement newMemberRef newMethodRef newMethodRefParameter newVariableDeclarationStatement newTypeDeclarationStatement newTypeDeclarationStatement newBlock newContinueStatement newBreakStatement newExpressionStatement newIfStatement newWhileStatement newDoStatement newTryStatement newCatchClause newReturnStatement newThrowStatement newAssertStatement newEmptyStatement newLabeledStatement newSwitchStatement newSwitchCase newSynchronizedStatement newForStatement newEnhancedForStatement newStringLiteral newCharacterLiteral newNumberLiteral newNumberLiteral newNullLiteral newBooleanLiteral newAssignment newMethodInvocation newSuperMethodInvocation newConstructorInvocation newSuperConstructorInvocation newVariableDeclarationExpression newFieldDeclaration newThisExpression newFieldAccess newSuperFieldAccess newTypeLiteral newCastExpression newParenthesizedExpression newInfixExpression newInstanceofExpression newPostfixExpression newPrefixExpression newArrayAccess newArrayCreation newClassInstanceCreation newAnonymousClassDeclaration newArrayInitializer newConditionalExpression newNormalAnnotation newMarkerAnnotation newSingleMemberAnnotation newMemberValuePair recordModifications rewrite hasResolvedBindings hasStatementsRecovery hasBindingsRecovery setFlag JLS2 JLS2_INTERNAL JLS3 resolver eventHandler apiLevel modificationCount originalModificationCount disableEvents internalASTLock scanner rewriter defaultNodeFlag AST_CLASS THIS_AST RESOLVED_BINDINGS bits org.aspectj.org.eclipse.jdt.core.dom.AST  AspectJ Extension - raised to protected\r\n  initialize a scanner\r\n  new code:\r\n  End AspectJ Extension\r\n  override scanner if 1.4 or 1.5 asked for\r\n  and the modification count will not be increased\r\n  increase the modification count\r\n  guard against concurrent access by another reader\r\n  guard against concurrent access by another reader\r\n  System.out.println(\"[BOUNCE DEL]\");\r\n  guard against concurrent access by a reader doing lazy init\r\n  IMPORTANT: this method is called by readers during lazy init\r\n  System.out.println(\"[BOUNCE DEL]\");\r\n  guard against concurrent access by a reader doing lazy init\r\n  IMPORTANT: this method is called by readers during lazy init\r\n  System.out.println(\"[BOUNCE REP]\");\r\n  guard against concurrent access by a reader doing lazy init\r\n  IMPORTANT: this method is called by readers during lazy init\r\n  System.out.println(\"[BOUNCE REP]\");\r\n  guard against concurrent access by a reader doing lazy init\r\n  IMPORTANT: this method is called by readers during lazy init\r\n  System.out.println(\"[BOUNCE ADD]\");\r\n  guard against concurrent access by a reader doing lazy init\r\n  IMPORTANT: this method is called by readers during lazy init\r\n  System.out.println(\"[BOUNCE ADD]\");\r\n  guard against concurrent access by a reader doing lazy init\r\n  IMPORTANT: this method is called by readers during lazy init\r\n  System.out.println(\"[BOUNCE CHANGE]\");\r\n  guard against concurrent access by a reader doing lazy init\r\n  IMPORTANT: this method is called by readers during lazy init\r\n  System.out.println(\"[BOUNCE CHANGE]\");\r\n  guard against concurrent access by a reader doing lazy init\r\n  IMPORTANT: this method is called by readers during lazy init\r\n  System.out.println(\"[BOUNCE CLONE]\");\r\n  guard against concurrent access by a reader doing lazy init\r\n  System.out.println(\"[BOUNCE CLONE]\");\r\n  guard against concurrent access by a reader doing lazy init\r\n  convert ASTParser's complaints into old form\r\n  convert ASTParser's complaints into old form\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  therefore nodeClass is not legit\r\n  therefore nodeClass is not legit\r\n  therefore nodeClass is not legit\r\n  therefore nodeClass is not legit\r\n  invoke constructor with signature Foo(AST)\r\n  nodeClassForType throws IllegalArgumentException if nodeType is bogus\r\n  update internalSetName(String[] if changed\r\n  $NON-NLS-1$\r\n  initially 0; finally 1; should never drop < 0 or > 1\r\n  this is an identifier segment\r\n  too many dots in a row\r\n  this is a delimiter\r\n  we would blow our stacks anyway with a 1000-D array\r\n  new code:\r\n  End AspectJ Extension\r\n  3 modifiers is more than average\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  AspectJ Extension - made non-final\r\n /*package*/\r\n /*comment*/\r\n /*whitespace*/\r\n /*nls*/\r\n /*sourceLevel*/\r\n /*complianceLevel*/\r\n /*taskTag*/\r\n /*taskPriorities*/\r\n /*comment*/\r\n /*whitespace*/\r\n /*nls*/\r\n /*sourceLevel*/\r\n /*complianceLevel*/\r\n /*taskTag*/\r\n /*taskPriorities*/\r\n /*\r\n\t * Must not collide with a value for ICompilationUnit constants\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * This method is a copy of setName(String[]) that doesn't do any validation.\r\n\t */\r\n","IProgramElement":"getChildren setChildren addChild removeChild setExtraAdviceInformation getExtraAdviceInformation toString setExtraInfo getExtraInfo getParent setParent getName setName getDetails setDetails getKind setKind getModifiers setModifiers getAccessibility getDeclaringType getPackageName setCorrespondingType getCorrespondingType getCorrespondingType toSignatureString toSignatureString setRunnable isRunnable isImplementor setImplementor isOverrider setOverrider getMessage setMessage getSourceLocation setSourceLocation toString getFormalComment setFormalComment toLinkLabelString toLinkLabelString toLabelString toLabelString getParameterNames setParameterNames getParameterSignatures setParameterSignatures getParameterTypes getHandleIdentifier getHandleIdentifier setHandleIdentifier toLongString getBytecodeName getBytecodeSignature setBytecodeName setBytecodeSignature getSourceSignature setSourceSignature walk toString getBit readResolve toString readResolve getKindForString toString getNonAJMemberKinds isMember isInterTypeMember isType isSourceFile isDeclare isDeclareAnnotation readResolve getChildren setChildren addChild removeChild setExtraAdviceInformation getExtraAdviceInformation toString setExtraInfo getExtraInfo getParent setParent getName setName getDetails setDetails getKind setKind getModifiers setModifiers getAccessibility getDeclaringType getPackageName setCorrespondingType getCorrespondingType getCorrespondingType toSignatureString toSignatureString setRunnable isRunnable isImplementor setImplementor isOverrider setOverrider getMessage setMessage getSourceLocation setSourceLocation toString getFormalComment setFormalComment toLinkLabelString toLinkLabelString toLabelString toLabelString getParameterNames setParameterNames getParameterSignatures setParameterSignatures getParameterTypes getHandleIdentifier getHandleIdentifier setHandleIdentifier toLongString getBytecodeName getBytecodeSignature setBytecodeName setBytecodeSignature getSourceSignature setSourceSignature walk toString getBit readResolve toString readResolve getKindForString toString getNonAJMemberKinds isMember isInterTypeMember isType isSourceFile isDeclare isDeclareAnnotation readResolve serialVersionUID extraInfo serialVersionUID STATIC FINAL ABSTRACT SYNCHRONIZED VOLATILE STRICTFP TRANSIENT NATIVE ALL name bit nextOrdinal ordinal serialVersionUID PUBLIC PACKAGE PROTECTED PRIVATE PRIVILEGED ALL name nextOrdinal ordinal serialVersionUID PROJECT PACKAGE FILE FILE_JAVA FILE_ASPECTJ FILE_LST IMPORT_REFERENCE CLASS INTERFACE ASPECT ENUM ENUM_VALUE ANNOTATION INITIALIZER INTER_TYPE_FIELD INTER_TYPE_METHOD INTER_TYPE_CONSTRUCTOR INTER_TYPE_PARENT CONSTRUCTOR METHOD FIELD POINTCUT ADVICE DECLARE_PARENTS DECLARE_WARNING DECLARE_ERROR DECLARE_SOFT DECLARE_PRECEDENCE CODE ERROR DECLARE_ANNOTATION_AT_CONSTRUCTOR DECLARE_ANNOTATION_AT_FIELD DECLARE_ANNOTATION_AT_METHOD DECLARE_ANNOTATION_AT_TYPE SOURCE_FOLDER ALL name nextOrdinal ordinal serialVersionUID extraInfo serialVersionUID STATIC FINAL ABSTRACT SYNCHRONIZED VOLATILE STRICTFP TRANSIENT NATIVE ALL name bit nextOrdinal ordinal serialVersionUID PUBLIC PACKAGE PROTECTED PRIVATE PRIVILEGED ALL name nextOrdinal ordinal serialVersionUID PROJECT PACKAGE FILE FILE_JAVA FILE_ASPECTJ FILE_LST IMPORT_REFERENCE CLASS INTERFACE ASPECT ENUM ENUM_VALUE ANNOTATION INITIALIZER INTER_TYPE_FIELD INTER_TYPE_METHOD INTER_TYPE_CONSTRUCTOR INTER_TYPE_PARENT CONSTRUCTOR METHOD FIELD POINTCUT ADVICE DECLARE_PARENTS DECLARE_WARNING DECLARE_ERROR DECLARE_SOFT DECLARE_PRECEDENCE CODE ERROR DECLARE_ANNOTATION_AT_CONSTRUCTOR DECLARE_ANNOTATION_AT_FIELD DECLARE_ANNOTATION_AT_METHOD DECLARE_ANNOTATION_AT_TYPE SOURCE_FOLDER ALL name nextOrdinal ordinal org.aspectj.asm.IProgramElement org.aspectj.asm.IProgramElement  run ...\r\n  TODO: remove (Emacs uses it)\r\n  The 4 declarations below are necessary for serialization\r\n  The 4 declarations below are necessary for serialization\r\n  The 4 declarations below are necessary for serialization\r\n  run ...\r\n  TODO: remove (Emacs uses it)\r\n  The 4 declarations below are necessary for serialization\r\n  The 4 declarations below are necessary for serialization\r\n  The 4 declarations below are necessary for serialization\r\n /* IProgramElement */\r\n /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n * ******************************************************************/\r\n /* IProgramElement */\r\n /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Mik Kersten     initial implementation \r\n * ******************************************************************/\r\n","UserPreferencesStore":"getProjectPreference getProjectMultivalPreference setProjectPreference setProjectMultivalPreference getPropertiesFilePath getGlobalPreference getGlobalMultivalPreference setGlobalPreference setGlobalMultivalPreference loadProperties saveProperties FILE_NAME VALUE_SEP properties persist org.aspectj.ajde.ui.internal.UserPreferencesStore /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation\r\n *     Helen Hawkins  Converted to new interface (bug 148190) \r\n * ******************************************************************/\r\n","SourceModifier":"copy getModifications destinationIndent sourceIndentLevel tabWidth indentWidth org.aspectj.org.eclipse.jdt.internal.core.dom.rewrite.SourceModifier  We are state less\r\n","MultiStructureViewPanel":"jbInit serialVersionUID views_splitPane borderLayout1 org.aspectj.ajde.ui.swing.MultiStructureViewPanel /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation\r\n *     Helen Hawkins  Converted to new interface (bug 148190)  \r\n * ******************************************************************/\r\n","ClassVector":"addElement elementAt removeElementAt toArray addElement elementAt removeElementAt toArray vec vec org.aspectj.apache.bcel.util.ClassVector org.aspectj.apache.bcel.util.ClassVector /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n","SignatureAttribute":"getSignatureIndex getSignature signatureIndex signature org.aspectj.org.eclipse.jdt.internal.core.util.SignatureAttribute /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.ISignatureAttribute#getSignatureIndex()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.util.ISignatureAttribute#getSignature()\r\n\t */\r\n","PointcutBasedPerClauseImpl":"getPointcutExpression toString getPointcutExpression toString pointcutExpression pointcutExpression org.aspectj.internal.lang.reflect.PointcutBasedPerClauseImpl org.aspectj.internal.lang.reflect.PointcutBasedPerClauseImpl /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","AndPointcut":"getLeft setLeft getRight setRight propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty clone0 subtreeMatch0 accept0 treeSize couldMatchKinds fastMatch matchInternal toString equals hashCode resolveBindings write read findResidueInternal concretize1 parameterizeWith getLeft getRight accept traverse couldMatchKinds fastMatch matchInternal toString equals hashCode resolveBindings write read findResidueInternal concretize1 parameterizeWith getLeft getRight accept traverse left LEFT_PROPERTY right RIGHT_PROPERTY left right couldMatchKinds left right couldMatchKinds org.aspectj.org.eclipse.jdt.core.dom.AndPointcut org.aspectj.weaver.patterns.AndPointcut org.aspectj.weaver.patterns.AndPointcut  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  exposed for testing\r\n  exposed for testing\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","PerClauseImpl":"getKind toString getKind toString kind kind org.aspectj.internal.lang.reflect.PerClauseImpl org.aspectj.internal.lang.reflect.PerClauseImpl /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.PerClause#getKind()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.lang.reflect.PerClause#getKind()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","Modifiers":"getModifiers setModifiers isPublic isPrivate isProtected isStatic isFinal isSynchronized isVolatile isTransient isNative isInterface isAbstract isStrictfp isVarargs isBridge getModifiers setModifiers isPublic isPrivate isProtected isStatic isFinal isSynchronized isVolatile isTransient isNative isInterface isAbstract isStrictfp isVarargs isBridge modifiers modifiers org.aspectj.apache.bcel.classfile.Modifiers org.aspectj.apache.bcel.classfile.Modifiers","FieldInfo":"createField decodeAnnotations compareTo getConstant getGenericSignature getModifiers getName getTagBits getTypeName getAnnotations getWrappedConstantValue hasConstant initialize isSynthetic readAttributes readConstantAttribute readModifierRelatedAttributes sizeInBytes throwFormatException toString toStringContent getAccessFlags getAttributeCount getAttributes getConstantValueAttribute getDescriptor getDescriptorIndex getName getNameIndex hasConstantValueAttribute isDeprecated isSynthetic sizeInBytes accessFlags attributeBytes constant descriptor name signature signatureUtf8Offset tagBits wrappedConstantValue accessFlags attributeBytes attributes attributesCount constantValueAttribute descriptor descriptorIndex isDeprecated isSynthetic name nameIndex org.aspectj.org.eclipse.jdt.internal.compiler.classfmt.FieldInfo org.aspectj.org.eclipse.jdt.internal.core.util.FieldInfo  With the last parameter being 'false', the data structure will not be flushed out\r\n  nothing to record\r\n  read constant\r\n  decode the signature\r\n  compute the accessflag. Don't forget the deprecated attribute\r\n  read the name\r\n  read the signature\r\n  check the name of each attribute\r\n  read the right constant\r\n  boolean constant\r\n  integer constant\r\n  char constant\r\n  byte constant\r\n  short constant\r\n  test added for obfuscated .class file. See 79772\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","TypeVariablePattern":"accept getName isAnythingPattern getRawTypePattern getUpperBound hasLowerBound getLowerBound hasAdditionalInterfaceBounds getAdditionalInterfaceBounds equals hashCode toString getExtendsClause write read accept getName isAnythingPattern getRawTypePattern getUpperBound hasLowerBound getLowerBound hasAdditionalInterfaceBounds getAdditionalInterfaceBounds equals hashCode toString getExtendsClause write read anything name upperBound interfaceBounds lowerBound anything name upperBound interfaceBounds lowerBound org.aspectj.weaver.patterns.TypeVariablePattern org.aspectj.weaver.patterns.TypeVariablePattern  eg. \"T\"\r\n  default is object unless of the form T extends Bar\r\n  additional upper bounds (must be interfaces) arising from\r\n  only set if type variable is of the form T super Bar\r\n  eg. \"T\"\r\n  default is object unless of the form T extends Bar\r\n  additional upper bounds (must be interfaces) arising from\r\n  only set if type variable is of the form T super Bar\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","ParameterizedTypeBinding":"actualType boundCheck canBeInstantiated capture collectSubstitutes computeId computeUniqueKey constantPoolName createParameterizedMethod debugName enclosingType environment erasure fieldCount fields genericType genericTypeSignature getAnnotationTagBits getExactConstructor getExactMethodBase getField getMemberType getMethodsBase hasMemberTypes implementsMethod initialize initializeArguments isEquivalentTo isIntersectingWith isParameterizedType isRawSubstitution kind memberTypes methods qualifiedPackageName qualifiedSourceName readableName resolve shortReadableName signature sourceName substitute superclass superInterfaces swapUnresolved syntheticEnclosingInstanceTypes syntheticOuterLocalVariables toString typeVariables getField getExactMethod getMethods type arguments environment genericTypeSignature superclass superInterfaces fields memberTypes methods enclosingType org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding  must ensure the type is resolved    never unresolved, never lazy per construction\r\n  }\r\n  cleared in resolve()\r\n  arguments may be null in error cases\r\n  no need to recheck it in the future\r\n  cannot instantiate param type with wildcard arguments\r\n  Retrieve the type context for capture bindingKey\r\n  maybe null when used programmatically by DOM\r\n  no capture for intersection types\r\n  collect through enclosing type\r\n  collect through type arguments\r\n  marker for impossible inference\r\n  marker for impossible inference\r\n  cannot infer anything further from wildcard\r\n  cannot infer anything further from unbound wildcard\r\n  JLS 15.12.7, p.459\r\n  by default, use EQUAL constraint\r\n  copy all but trailing semicolon\r\n  copy all but trailing semicolon\r\n  copy all but trailing semicolon\r\n  $NON-NLS-1$\r\n  erasure\r\n  erasure\r\n  same as erasure (lazy)\r\n  if the original fields cannot be retrieved (ex. AbortCompilation), then assume we do not have any fields\r\n  substitute all fields, so as to get updated declaring class at least\r\n  copy all but trailing semicolon\r\n  copy all but trailing semicolon\r\n  takes care of duplicates & default abstract methods\r\n  collision case\r\n  have resolved all arg types & return type of the methods\r\n  collision case\r\n  sender from refScope calls recordTypeReference(this)\r\n  takes care of duplicates & default abstract methods\r\n  collision case\r\n  have resolved all arg types & return type of the methods\r\n  inner type lookups must know that a method with this name exists\r\n  collision case\r\n  class B<TT> extends A<Integer> { public <ZZ> void id(Integer i) {} }\r\n  ensure fields have been initialized... must create all at once unlike methods\r\n  ensure memberTypes have been initialized... must create all at once unlike methods\r\n  return this.methods;   AspectJ Extension - added method name suffix 'Base'\r\n  have created all the methods and there are no matches\r\n  if the original methods cannot be retrieved (ex. AbortCompilation), then assume we do not have any methods\r\n  substitute methods, so as to get updated declaring class at least\r\n  resort to ensure order is good\r\n  must be a copy of parameterizedMethods since it will be returned below\r\n  erasure\r\n  discard generic signature, will compute later\r\n  only set AccGenericSignature if parameterized or have enclosing type required signature\r\n  static member types do not compare their enclosing\r\n  static member types do not compare their enclosing\r\n  static member types do not compare their enclosing\r\n  if the original fields cannot be retrieved (ex. AbortCompilation), then assume we do not have any fields\r\n  substitute all member types, so as to get updated enclosing types\r\n  boolean isRaw = this.isRawType();\r\n  if the original methods cannot be retrieved (ex. AbortCompilation), then assume we do not have any methods\r\n  substitute all methods, so as to get updated declaring class at least\r\n  can be recursive so only want to call once\r\n  still part of parameterized type ref\r\n  arity check\r\n  check arity\r\n  cannot reach here as AbortCompilation is thrown\r\n  check generic\r\n  cannot reach here as AbortCompilation is thrown\r\n  erasure\r\n  only for raw types\r\n  lazy init, since cannot do so during binding creation if during supertype connection\r\n  check this variable can be substituted given parameterized type\r\n  recurse on enclosing type, as it may hold more substitutions to perform\r\n  note: Object cannot be generic\r\n  e.g. interfaces\r\n  prevent superinterfaces from being assigned before they are connected\r\n  cannot be raw since being parameterized below\r\n  needed when binding unresolved member type\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  retain original type variables if not substituted (member type of parameterized type)\r\n  Check this parameterized type\r\n  Not found? then check the generic type, this may discover ITDs\r\n  AspectJ extension - delegate to the source type (the generic type) as it has a memberFinder for resolving ITDs\r\n  Also renamed getExactMethod() in the original PTB class to getExactMethodBase\r\n  ask the generic type which may return anything ITDd\r\n  MethodBinding[] originalMethods = this.type.getMethods(selector);\r\n  substitute methods, so as to get updated declaring class at least\r\n /*isRaw && originalMemberTypes[i].isGenericType()\r\n\t\t\t\t\t\t? this.environment.createRawType(originalMemberTypes[i], this)\r\n\t\t\t\t\t\t: */\r\n","ajcDeclareAnnotation":"/* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","GenericSignatureParser":"parseAsClassSignature parseAsMethodSignature parseAsFieldSignature parseFormalTypeParameter parseFieldTypeSignature parseArrayTypeSignature parseClassTypeSignature parseSimpleClassTypeSignature parseTypeArgument maybeParseTypeArguments parseTypeVariableSignature maybeEat eat eatIdentifier tokenize parseAsClassSignature parseAsMethodSignature parseAsFieldSignature parseFormalTypeParameter parseFieldTypeSignature parseArrayTypeSignature parseClassTypeSignature parseSimpleClassTypeSignature parseTypeArgument maybeParseTypeArguments parseTypeVariableSignature maybeEat eat eatIdentifier tokenize inputString tokenStream tokenIndex inputString tokenStream tokenIndex org.aspectj.apache.bcel.classfile.GenericSignatureParser org.aspectj.apache.bcel.classfile.GenericSignatureParser  for parse in flight\r\n  FormalTypeParameters-opt\r\n  FormalTypeParameters-opt\r\n  Parameters\r\n  return type\r\n  throws\r\n  Identifier\r\n  ClassBound\r\n  Optional InterfaceBounds\r\n  anything other than 'L', 'T' or '[' and we're out of here\r\n  opening [ already eaten\r\n  must be BaseType array\r\n  dont forget this...\r\n  now parse possible nesteds...\r\n  outer type completed\r\n  or a \"<\" indication type arguments, or \";\" and we are done.\r\n  L PackageSpecifier* SimpleClassTypeSignature ClassTypeSignature* ;\r\n  deliberate fall-through\r\n  for parse in flight\r\n  FormalTypeParameters-opt\r\n  FormalTypeParameters-opt\r\n  Parameters\r\n  return type\r\n  throws\r\n  Identifier\r\n  ClassBound\r\n  Optional InterfaceBounds\r\n  anything other than 'L', 'T' or '[' and we're out of here\r\n  opening [ already eaten\r\n  must be BaseType array\r\n  dont forget this...\r\n  now parse possible nesteds...\r\n  outer type completed\r\n  or a \"<\" indication type arguments, or \";\" and we are done.\r\n  L PackageSpecifier* SimpleClassTypeSignature ClassTypeSignature* ;\r\n  deliberate fall-through\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","PerCflow":"getBody setBody isBelow setIsBelow propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty clone0 subtreeMatch0 accept0 treeSize accept couldMatchKinds fastMatch matchInternal resolveBindings parameterizeWith findResidueInternal concretize write readPerClause getKind getEntry toString toDeclarationString equals hashCode accept couldMatchKinds fastMatch matchInternal resolveBindings parameterizeWith findResidueInternal concretize write readPerClause getKind getEntry toString toDeclarationString equals hashCode body BODY_PROPERTY isBelow isBelow entry isBelow entry org.aspectj.org.eclipse.jdt.core.dom.PerCflow org.aspectj.weaver.patterns.PerCflow org.aspectj.weaver.patterns.PerCflow  $NON-NLS-1$\r\n  percflow or percflowbelow\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  assert bindings == null;\r\n  IntMap.EMPTY);\r\n  ATAJ: add a munger to add the aspectOf(..) to the @AJ aspects\r\n  ATAJ inline around advice support - don't use a late munger to allow around inling for itself\r\n  assert bindings == null;\r\n  IntMap.EMPTY);\r\n  ATAJ: add a munger to add the aspectOf(..) to the @AJ aspects\r\n  ATAJ inline around advice support - don't use a late munger to allow around inling for itself\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","IndexBasedHierarchyBuilder":"add retrieve toString build buildForProject buildFromPotentialSubtypes createCompilationUnitFromPath createInfoFromClassFile createInfoFromClassFileInJar determinePossibleSubTypes searchAllPossibleSubTypes MAXTICKS cuToHandle scope binariesFromIndexMatches names start end paths org.aspectj.org.eclipse.jdt.internal.core.hierarchy.IndexBasedHierarchyBuilder  heuristic so that there still progress for deep hierachies\r\n  none\r\n  $NON-NLS-1$\r\n  optimize access to zip files while building hierarchy\r\n  Note by construction there always is a focus type here\r\n  percentage of work needed to get possible subtypes\r\n  contains the paths that have potential subtypes that are local  local or anonymous type\r\n  top level or member type\r\n  resolve\r\n  copy vectors into arrays\r\n  not supported by the lookup environment\r\n  $NON-NLS-1$\r\n  local or anonymous type\r\n  focus type is not visible in this project: no need to go further\r\n  top level or member type\r\n  a map from path to working copies\r\n  when the cu is a working copy)\r\n  create element infos for subtypes\r\n  $NON-NLS-1$\r\n  skip duplicate paths (e.g. if focus path was injected when it was already a potential subtype)\r\n  match is outside classpath\r\n  build current project\r\n  case of no potential subtypes\r\n  build last project\r\n  Compute hierarchy of focus type if not already done (case of a type with potential subtypes that are not real subtypes)\r\n  Add focus if not already in (case of a type with no explicit super type)\r\n  take the OS path for external jars, and the forward slash path for internal jars\r\n  $NON-NLS-1$\r\n  treat it as a top level type\r\n  local or anonymous types cannot have subtypes outside the cu that define them\r\n  java search only\r\n  all subclasses of OBJECT are actually all types\r\n  search all index references to a given supertype\r\n  just handle isCanceled() (seehttps:  in case, we search all subtypes, no need to search further\r\n  WaitUntilReadyToSearch | ForceImmediateSearch | CancelIfNotReadyToSearch\r\n /*\r\n\t * Sort in alphabetical order so that potential subtypes are grouped per project\r\n\t */\r\n /* embed constructs inside arrays so as to pass them to (inner) collector */\r\n /* use a special collector to collect paths and queue new subtype names */\r\n","ReferenceBinding":"compare compare binarySearch binarySearch compare sortFields sortMethods availableFields availableMethods canBeInstantiated canBeSeenBy canBeSeenBy innerCanBeSeenBy canBeSeenBy innerCanBeSeenBy closestMatch computeGenericTypeSignature computeId computeUniqueKey constantPoolName debugName depth detectAnnotationCycle enclosingTypeAt enumConstantCount fieldCount fields getAccessFlags getAnnotations getAnnotationTagBits getExactConstructor getExactMethod getField getField getFileName getMemberType getMethods getPackage getTypeVariable hashCode hasIncompatibleSuperType hasMemberTypes hasRestrictedAccess implementsInterface implementsMethod isAbstract isAnnotationType isBinaryBinding isClass isCompatibleWith isCompatibleWith0 isDefault isDeprecated isEnum isFinal isHierarchyBeingConnected isInterface isPrivate isProtected isPublic isStatic isStrictfp isSuperclassOf isThrowable isUncheckedException isUsed isViewedAsDeprecated memberTypes methods outermostEnclosingType qualifiedSourceName readableName retrieveAnnotationHolder retrieveAnnotations setAnnotations shortReadableName signature sourceName storeAnnotationHolder storeAnnotations storedAnnotations superclass superInterfaces syntheticEnclosingInstanceTypes syntheticOuterLocalVariables unResolvedMethods compoundName sourceName modifiers fPackage fileName constantPoolName signature compatibleCache LUB_GENERIC FIELD_COMPARATOR METHOD_COMPARATOR org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding  find first method with same selector\r\n  find last method with same selector\r\n  isProtected() or isDefault()\r\n  AspectJ Extension - replace original impl with this one\r\n  End AspectJ Extension - this is the original implementation\r\n  OR previous assertions are true for one of the enclosing type\r\n  protected types always have an enclosing one\r\n  could be null if incorrect top-level protected type\r\n  depth++;\r\n  int depth = 0;\r\n  special tolerance for type variable direct bounds\r\n  AND the invocationType and the receiver have a common enclosingType\r\n  isDefault()\r\n  package could be null for wildcards  System.err.println(\"    is privileged!\");\r\n  End AspectJ Extension\r\n  AspectJ Extension - use invocationType() rather than enclosingSourceType()\r\n  static import call\r\n  OR previous assertions are true for one of the enclosing type\r\n  protected types always have an enclosing one\r\n  could be null if incorrect top-level protected type\r\n  depth++;\r\n  int depth = 0;\r\n  already know they are not the identical type\r\n  isDefault()\r\n  by default, the closest match is the binding itself\r\n  copy all but trailing semicolon\r\n  copy all but trailing semicolon\r\n  NOTE: cannot override trailing ';' with '.' in enclosing signature, since shared char[]\r\n  $NON-NLS-1$\r\n  remaining types MUST be in java.*.*\r\n  remaining types MUST be in java.lang.*\r\n  just to be safe\r\n  just to be safe\r\n  just to be safe\r\n  $NON-NLS-1$\r\n  already checked\r\n  in the middle of checking its methods\r\n  check each method before failing\r\n  ALL ReferenceBindings are unique when created so equals() is the same as ==\r\n  in code assist cases when source types are added late, may not be finished connecting hierarchy\r\n  in code assist cases when source types are added late, may not be finished connecting hierarchy\r\n  Internal method... assume its only sent to classes NOT interfaces\r\n  protect from recursive call\r\n  bound\r\n  should have passed equivalence check above if\r\n  check compatibility with capture of ? super X\r\n  wildcard\r\n  should have passed equivalence check\r\n  could be annotation type\r\n  Explicit conversion from an interface\r\n  to a class is not allowed\r\n  consider strict interfaces and annotation types\r\n  not supported\r\n  nothing to delete\r\n  overrride if interested in storing annotations for the receiver, its fields and methods\r\n  is null if no enclosing instances are required\r\n  for the MethodVerifier so it doesn't resolve types\r\n  AspectJ Extension - added hooks for more sophisticated field lookup\r\n /* Answer true if the receiver can be instantiated\r\n*/\r\n /* Answer true if the receiver is visible to the invocationPackage.\r\n*/\r\n /*\r\n * Answer true if the receiver is visible to the type provided by the scope.\r\n */\r\n /*\r\n * p.X<T extends Y & I, U extends Y> {} -> Lp/X<TT;TU;>;\r\n */\r\n /* java/lang/Object */\r\n /* Answer the receiver's constant pool name.\r\n*\r\n* NOTE: This method should only be used during/after code gen.\r\n*/\r\n /* Answer true if the receiver is deprecated (or any of its enclosing types)\r\n*/\r\n /*java.lang.Object,  p.X<T> */\r\n /*Object*/\r\n /* Ljava/lang/Object; */\r\n","JavaWorkspaceScope":"encloses encloses enclosingProjectsAndJars equals getAccessRuleSet hashCode initialize processDelta toString needsInitialize org.aspectj.org.eclipse.jdt.internal.core.search.JavaWorkspaceScope  $NON-NLS-1$\r\n /*A workspace scope encloses all java elements (this assumes that the index selector\r\n\t * and thus enclosingProjectAndJars() returns indexes on the classpath only and that these\r\n\t * indexes are consistent.)\r\n\t * NOTE: Returning true gains 20% of a hierarchy build on Object\r\n\t */\r\n /*A workspace scope encloses all resources (this assumes that the index selector\r\n\t * and thus enclosingProjectAndJars() returns indexes on the classpath only and that these\r\n\t * indexes are consistent.)\r\n\t * NOTE: Returning true gains 20% of a hierarchy build on Object\r\n\t */\r\n","Name":"isSimpleName isQualifiedName resolveBinding getFullyQualifiedName appendName BASE_NAME_NODE_SIZE index org.aspectj.org.eclipse.jdt.core.dom.Name  avoid creating garbage for common case\r\n","IPackageFragmentRoot":"attachSource copy createPackageFragment delete getKind getNonJavaResources getPackageFragment getRawClasspathEntry getSourceAttachmentPath getSourceAttachmentRootPath isArchive isExternal move K_SOURCE K_BINARY DEFAULT_PACKAGEROOT_PATH NO_RESOURCE_MODIFICATION ORIGINATING_PROJECT_CLASSPATH OTHER_REFERRING_PROJECTS_CLASSPATH DESTINATION_PROJECT_CLASSPATH REPLACE org.aspectj.org.eclipse.jdt.core.IPackageFragmentRoot  $NON-NLS-1$\r\n","ILocalVariable":"getElementName getNameRange getTypeSignature org.aspectj.org.eclipse.jdt.core.ILocalVariable","IReflectionWorld":"getAnnotationFinder resolve getAnnotationFinder resolve org.aspectj.weaver.reflect.IReflectionWorld org.aspectj.weaver.reflect.IReflectionWorld /* *******************************************************************\r\n * Copyright (c) 2005 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Ron Bodkin     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Ron Bodkin     initial implementation \r\n * ******************************************************************/\r\n","CompletionOnPackageReference":"print org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnPackageReference  $NON-NLS-1$\r\n","ConstantFieldref":"accept accept org.aspectj.apache.bcel.classfile.ConstantFieldref org.aspectj.apache.bcel.classfile.ConstantFieldref","ExceptionRange":"associateWithTargets getHandler getCatchType getPriority toString equals hashCode updateTarget isExceptionStart isExceptionEnd associateWithTargets getHandler getCatchType getPriority toString equals hashCode updateTarget isExceptionStart isExceptionEnd handler exceptionType priority hashCode handler exceptionType priority hashCode org.aspectj.weaver.bcel.ExceptionRange org.aspectj.weaver.bcel.ExceptionRange  assert body.contains(start) && body.contains(end) && body.contains(handler)\r\n  }\r\n  we're guaranteed that start, end, and handler are distinct instruction handles.\r\n  assert body.contains(start) && body.contains(end) && body.contains(handler)\r\n  }\r\n  we're guaranteed that start, end, and handler are distinct instruction handles.\r\n /* we're actually using the fact that we're an instruction targeter, for the\r\n * handler */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* we're actually using the fact that we're an instruction targeter, for the\r\n * handler */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","CompletionOnMessageSendName":"resolveType printExpression org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnMessageSendName  resolve type arguments\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","InlineAccessFieldBinding":"canBeSeenBy getAccessMethod alwaysNeedsAccessMethod getFieldBindingForLookup toString reader writer baseField org.aspectj.ajdt.internal.compiler.lookup.InlineAccessFieldBinding /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","BufferChangedEvent":"getBuffer getLength getOffset getText length offset text serialVersionUID org.aspectj.org.eclipse.jdt.core.BufferChangedEvent  backward compatible\r\n","JavaComplianceOptionsPanel":"loadOptions saveOptions jbInit createComplianceContents createComplianceEntry createBorders addBordersToPanel complianceLevels serialVersionUID parentPanel complianceEtchedBorder complianceTitleBorder complianceCompoundBorder compliancePanel complianceBox javaBuildOptions complianceComboBoxes org.aspectj.ajde.ui.javaoptions.JavaComplianceOptionsPanel  default to 1.5\r\n /*String --> JComboBox*/\r\n","CompletionOnMarkerAnnotationName":"resolveType org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnMarkerAnnotationName  step up from the ClassScope\r\n","FieldDeclarationMatch":"org.aspectj.org.eclipse.jdt.core.search.FieldDeclarationMatch","PackageFragment":"buildStructure containsJavaResources copy createCompilationUnit createElementInfo delete equals exists getClassFile getClassFiles getCompilationUnit getCompilationUnits getCompilationUnits getElementName getElementType getHandleFromMemento getHandleMementoDelimiter getKind getNonJavaResources getPath getResource getUnderlyingResource hashCode hasChildren hasSubpackages isDefaultPackage move rename toStringChildren toStringInfo getAttachedJavadoc NO_CLASSFILES NO_COMPILATION_UNITS names org.aspectj.org.eclipse.jdt.internal.core.PackageFragment  check whether this pkg can be opened\r\n  check that it is not excluded (https:  add compilation units  add primary compilation units\r\n  so also ensure that the package is not exceluded (see https:  also make sure to not use substring as the resulting String may hold on the underlying char[] which might be much bigger than necessary\r\n  59933 - excluded wc shouldn't be answered back\r\n  We don't want to show non java resources of the default package (see PR #1G58NB8)\r\n  jar package fragment root that has no associated resource\r\n  is atually the package fragment root)\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n * @see JavaElement\r\n */\r\n /*\r\n * @see IJavaElement#getAttachedJavadoc(IProgressMonitor)\r\n */\r\n","GeneratedReferenceTypeDelegate":"addAnnotation isAspect isAnnotationStyleAspect isInterface isEnum isAnnotation isAnnotationWithRuntimeRetention isAnonymous isNested getOuterClass getRetentionPolicy canAnnotationTargetType getAnnotationTargetKinds isGeneric getDeclaredGenericSignature hasAnnotation getAnnotations getAnnotationTypes getDeclaredFields getDeclaredInterfaces getDeclaredMethods getDeclaredPointcuts getPerClause getDeclares getTypeMungers getPrivilegedAccesses getModifiers setSuperclass getSuperclass getWeaverState getTypeVariables ensureDelegateConsistent addAnnotation isAspect isAnnotationStyleAspect isInterface isEnum isAnnotation isAnnotationWithRuntimeRetention isAnonymous isNested getOuterClass getRetentionPolicy canAnnotationTargetType getAnnotationTargetKinds isGeneric getDeclaredGenericSignature hasAnnotation getAnnotations getAnnotationTypes getDeclaredFields getDeclaredInterfaces getDeclaredMethods getDeclaredPointcuts getPerClause getDeclares getTypeMungers getPrivilegedAccesses getModifiers setSuperclass getSuperclass getWeaverState getTypeVariables ensureDelegateConsistent superclass superclass org.aspectj.weaver.GeneratedReferenceTypeDelegate org.aspectj.weaver.GeneratedReferenceTypeDelegate /* *******************************************************************\r\n * Copyright (c) 2008 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2008 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *\r\n * ******************************************************************/\r\n","IDOMInitializer":"getBody getName setBody setName org.aspectj.org.eclipse.jdt.core.jdom.IDOMInitializer","BinaryLocalVariableBinding":"getAnnotations annotationBindings org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BinaryLocalVariableBinding","ShadowRange":"associateWithTargets associateWithShadow getKind toString extractInstructionsInto getShadow associateWithTargets associateWithShadow getKind toString extractInstructionsInto getShadow shadow shadow org.aspectj.weaver.bcel.ShadowRange org.aspectj.weaver.bcel.ShadowRange  assert body.contains(start) && body.contains(end);\r\n  first we copy the instruction itself.\r\n  Now we add it to the new instruction list.\r\n  update the target(s) to point to the new copy instead of the old copy.\r\n  delete it.\r\n  branches will be copied along with us.\r\n  exceptions and shadows are just moved\r\n  but only for a call or get join point, so no big deal\r\n  if we're extracting a whole block we can do this...\r\n  IndexedInstruction indexedI = (IndexedInstruction) freshI;\r\n  as double-wides, in case the location is found to hold a double-wide later.\r\n  of remapping...\r\n  targets, but since TargetLostException is checked, we have to do this stuff.\r\n  now add the return, if one is warranted.\r\n  we really should pull this out somewhere...\r\n  and remap all the old targeters of the end handle of the range to the return.\r\n  shouldn't be the case, but let's test for paranoia\r\n  assert body.contains(start) && body.contains(end);\r\n  first we copy the instruction itself.\r\n  Now we add it to the new instruction list.\r\n  update the target(s) to point to the new copy instead of the old copy.\r\n  delete it.\r\n  branches will be copied along with us.\r\n  exceptions and shadows are just moved\r\n  but only for a call or get join point, so no big deal\r\n  if we're extracting a whole block we can do this...\r\n  IndexedInstruction indexedI = (IndexedInstruction) freshI;\r\n  as double-wides, in case the location is found to hold a double-wide later.\r\n  of remapping...\r\n  targets, but since TargetLostException is checked, we have to do this stuff.\r\n  now add the return, if one is warranted.\r\n  we really should pull this out somewhere...\r\n  and remap all the old targeters of the end handle of the range to the return.\r\n  shouldn't be the case, but let's test for paranoia\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","ErrorDialog":"jbInit close_button_actionPerformed serialVersionUID top_panel borderLayout2 button_panel close_button jScrollPane1 stackTrace_textArea jPanel1 error_label1 error_label2 borderLayout1 border1 borderLayout3 org.aspectj.ajde.ui.swing.ErrorDialog /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","HasThisTypePatternTriedToSneakInSomeGenericOrParameterizedTypePatternMatchingStuffAnywhereVisitor":"visit visit wellHasItThen visit visit wellHasItThen ohYesItHas ohYesItHas org.aspectj.weaver.patterns.HasThisTypePatternTriedToSneakInSomeGenericOrParameterizedTypePatternMatchingStuffAnywhereVisitor org.aspectj.weaver.patterns.HasThisTypePatternTriedToSneakInSomeGenericOrParameterizedTypePatternMatchingStuffAnywhereVisitor  if (theExactType.isGenericType()) ohYesItHas = true;\r\n  if (theExactType.isGenericType()) ohYesItHas = true;\r\n /*?*/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /*?*/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","IProgressListener":"setText setProgress setCancelledRequested isCancelledRequested setText setProgress setCancelledRequested isCancelledRequested org.aspectj.bridge.IProgressListener org.aspectj.bridge.IProgressListener /* *******************************************************************\r\n * Copyright (c) 2003 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2003 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","JoinPointMatch":"matches getParameterBindings matches getParameterBindings org.aspectj.weaver.tools.JoinPointMatch org.aspectj.weaver.tools.JoinPointMatch /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","NotPointcut":"getBody setBody propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty clone0 subtreeMatch0 accept0 treeSize couldMatchKinds getNegatedPointcut fastMatch matchInternal toString equals hashCode resolveBindings write read findResidueInternal concretize1 parameterizeWith accept traverse couldMatchKinds getNegatedPointcut fastMatch matchInternal toString equals hashCode resolveBindings write read findResidueInternal concretize1 parameterizeWith accept traverse body BODY_PROPERTY body body org.aspectj.org.eclipse.jdt.core.dom.NotPointcut org.aspectj.weaver.patterns.NotPointcut org.aspectj.weaver.patterns.NotPointcut  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  should that be at least start-1?\r\n  should that be at least start-1?\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","InterTypeFieldBinding":"canBeSeenBy getAccessMethod alwaysNeedsAccessMethod getTargetType getOwningClass targetType reader writer sourceMethod org.aspectj.ajdt.internal.compiler.lookup.InterTypeFieldBinding  OPTIMIZE dont makeFieldBinding twice, HORRIBLE\r\n  System.err.println(\"canBeSeenBy: \" + this + \", \" + isPublic());\r\n  System.out.println(\"receiver: \" + receiverType + \", \" + invocationType);\r\n  Don't work with a raw type, work with the generic type\r\n  XXX make sure this walks correctly\r\n  isDefault()\r\n  overrides ITD'd method in FieldBinding...\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","MissingTypesGuesser":"accept cleanUp cleanUp cleanUp cleanUp cleanUp visit visit visit visit visit visit visit visit visit visit visit visit visit visit computeMissingElements convert convert convert convert convert convert convert convert findTypeNames getOriginal getSubstituedTypes getSubstitution guess nextSubstitution bitsMap firstCall problemFactory nameEnvironment substituedTypes originalTypes combinationsCount org.aspectj.org.eclipse.jdt.internal.codeassist.MissingTypesGuesser  only the first token must be resolved\r\n  only the first token must be resolved\r\n  only the first token must be resolved\r\n","JarPackageFragmentRootInfo":"getNonJavaResources org.aspectj.org.eclipse.jdt.internal.core.JarPackageFragmentRootInfo","IJavaProject":"decodeClasspathEntry encodeClasspathEntry findElement findElement findPackageFragment findPackageFragmentRoot findPackageFragmentRoots findType findType findType findType findType findType findType findType getAllPackageFragmentRoots getNonJavaResources getOption getOptions getOutputLocation getPackageFragmentRoot getPackageFragmentRoot getPackageFragmentRoots getPackageFragmentRoots getPackageFragments getProject getRawClasspath getRequiredProjectNames getResolvedClasspath hasBuildState hasClasspathCycle isOnClasspath isOnClasspath newEvaluationContext newTypeHierarchy newTypeHierarchy newTypeHierarchy newTypeHierarchy readOutputLocation readRawClasspath setOption setOptions setOutputLocation setRawClasspath setRawClasspath setRawClasspath setRawClasspath org.aspectj.org.eclipse.jdt.core.IJavaProject","DOMField":"appendMemberBodyContents appendMemberDeclarationContents appendMemberHeaderFragment appendSimpleContents becomeDetailed clone expand getDetailedNode getFirstFieldDeclaration getInitializer getJavaElement getLastFieldDeclaration getMemberDeclarationStartPosition getNodeType getSingleVariableDeclaratorContents getType getTypeContents hasInitializer hasMultipleVariableDeclarators insertSibling isTypeAltered isVariableDeclarator newDOMNode normalizeEndPosition normalizeStartPosition offset remove setComment setFlags setHasInitializer setInitializer setInitializerRange setIsVariableDeclarator setName setType setTypeAltered shareContents toString fType fTypeRange fInitializer fInitializerRange org.aspectj.org.eclipse.jdt.internal.core.jdom.DOMField  append eveything before my name\r\n  append my name\r\n  append everything after my name\r\n  unless the next node is a field that is declared along with this one\r\n  to the end of the enclosing node\r\n  parent is a type\r\n  start position is end of last element\r\n  $NON-NLS-1$\r\n","CompletionOnSingleNameReference":"printExpression resolveType possibleKeywords canBeExplicitConstructor isInsideAnnotationAttribute org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnSingleNameReference  $NON-NLS-1$\r\n","DOMPackage":"appendFragmentedContents getContents getDetailedNode getJavaElement getNodeType newDOMNode setName toString org.aspectj.org.eclipse.jdt.internal.core.jdom.DOMPackage  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","ConstantValue":"accept dump getConstantValueIndex setConstantValueIndex toString copy accept dump getConstantValueIndex setConstantValueIndex toString copy constantvalue_index constantvalue_index org.aspectj.apache.bcel.classfile.ConstantValue org.aspectj.apache.bcel.classfile.ConstantValue  Print constant to string depending on its type\r\n  Print constant to string depending on its type\r\n","TypeReferenceMatch":"getLocalElement getOtherElements setLocalElement setOtherElements localElement otherElements org.aspectj.org.eclipse.jdt.core.search.TypeReferenceMatch","SelectionOnQualifiedNameReference":"printExpression resolveType org.aspectj.org.eclipse.jdt.internal.codeassist.select.SelectionOnQualifiedNameReference  $NON-NLS-1$\r\n  it can be a package, type, member type, local variable or field\r\n  tolerate some error cases\r\n  tolerate some error cases\r\n","ConstructorSignatureImpl":"getName createToString getConstructor getName createToString getConstructor getName createToString getConstructor constructor constructor constructor org.aspectj.runtime.reflect.ConstructorSignatureImpl org.aspectj.runtime.reflect.ConstructorSignatureImpl org.aspectj.runtime.reflect.ConstructorSignatureImpl  nothing we can do, caller will see null\r\n  nothing we can do, caller will see null\r\n  nothing we can do, caller will see null\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.runtime.reflect.MemberSignatureImpl#createAccessibleObject()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.runtime.reflect.MemberSignatureImpl#createAccessibleObject()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.runtime.reflect.MemberSignatureImpl#createAccessibleObject()\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","IMessageHolder":"hasAnyMessage numMessages getMessages getUnmodifiableListView clearMessages hasAnyMessage numMessages getMessages getUnmodifiableListView clearMessages ORGREATER EQUAL ORGREATER EQUAL org.aspectj.bridge.IMessageHolder org.aspectj.bridge.IMessageHolder  XXX do not extend - mix instead\r\n  XXX do not extend - mix instead\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","ProjectReferenceChange":"updateProjectReferencesIfNecessary toString project oldResolvedClasspath org.aspectj.org.eclipse.jdt.internal.core.ProjectReferenceChange  ensure that if changed, the order is consistent\r\n  $NON-NLS-1$\r\n /*\r\n\t * Update projects references so that the build order is consistent with the classpath\r\n\t */\r\n","ExceptionConstants":"THROWABLE RUNTIME_EXCEPTION LINKING_EXCEPTION CLASS_CIRCULARITY_ERROR CLASS_FORMAT_ERROR EXCEPTION_IN_INITIALIZER_ERROR INCOMPATIBLE_CLASS_CHANGE_ERROR ABSTRACT_METHOD_ERROR ILLEGAL_ACCESS_ERROR INSTANTIATION_ERROR NO_SUCH_FIELD_ERROR NO_SUCH_METHOD_ERROR NO_CLASS_DEF_FOUND_ERROR UNSATISFIED_LINK_ERROR VERIFY_ERROR NULL_POINTER_EXCEPTION ARRAY_INDEX_OUT_OF_BOUNDS_EXCEPTION ARITHMETIC_EXCEPTION NEGATIVE_ARRAY_SIZE_EXCEPTION CLASS_CAST_EXCEPTION ILLEGAL_MONITOR_STATE EXCS_CLASS_AND_INTERFACE_RESOLUTION EXCS_CLASS_AND_INTERFACE_RESOLUTION_MULTIANEWARRAY EXCS_CLASS_AND_INTERFACE_RESOLUTION_ANEWARRAY EXCS_CLASS_AND_INTERFACE_RESOLUTION_CHECKCAST EXCS_CLASS_AND_INTERFACE_RESOLUTION_FOR_ALLOCATIONS EXCS_FIELD_AND_METHOD_RESOLUTION EXCS_FIELD_AND_METHOD_RESOLUTION_GETFIELD_PUTFIELD EXCS_FIELD_AND_METHOD_RESOLUTION_GETSTATIC_PUTSTATIC EXCS_INTERFACE_METHOD_RESOLUTION_INVOKEINTERFACE EXCS_INTERFACE_METHOD_RESOLUTION_INVOKESPECIAL_INVOKEVIRTUAL EXCS_INTERFACE_METHOD_RESOLUTION_INVOKESTATIC EXCS_INTERFACE_METHOD_RESOLUTION EXCS_STRING_RESOLUTION EXCS_ARRAY_EXCEPTION THROWABLE RUNTIME_EXCEPTION LINKING_EXCEPTION CLASS_CIRCULARITY_ERROR CLASS_FORMAT_ERROR EXCEPTION_IN_INITIALIZER_ERROR INCOMPATIBLE_CLASS_CHANGE_ERROR ABSTRACT_METHOD_ERROR ILLEGAL_ACCESS_ERROR INSTANTIATION_ERROR NO_SUCH_FIELD_ERROR NO_SUCH_METHOD_ERROR NO_CLASS_DEF_FOUND_ERROR UNSATISFIED_LINK_ERROR VERIFY_ERROR NULL_POINTER_EXCEPTION ARRAY_INDEX_OUT_OF_BOUNDS_EXCEPTION ARITHMETIC_EXCEPTION NEGATIVE_ARRAY_SIZE_EXCEPTION CLASS_CAST_EXCEPTION ILLEGAL_MONITOR_STATE EXCS_CLASS_AND_INTERFACE_RESOLUTION EXCS_CLASS_AND_INTERFACE_RESOLUTION_MULTIANEWARRAY EXCS_CLASS_AND_INTERFACE_RESOLUTION_ANEWARRAY EXCS_CLASS_AND_INTERFACE_RESOLUTION_CHECKCAST EXCS_CLASS_AND_INTERFACE_RESOLUTION_FOR_ALLOCATIONS EXCS_FIELD_AND_METHOD_RESOLUTION EXCS_FIELD_AND_METHOD_RESOLUTION_GETFIELD_PUTFIELD EXCS_FIELD_AND_METHOD_RESOLUTION_GETSTATIC_PUTSTATIC EXCS_INTERFACE_METHOD_RESOLUTION_INVOKEINTERFACE EXCS_INTERFACE_METHOD_RESOLUTION_INVOKESPECIAL_INVOKEVIRTUAL EXCS_INTERFACE_METHOD_RESOLUTION_INVOKESTATIC EXCS_INTERFACE_METHOD_RESOLUTION EXCS_STRING_RESOLUTION EXCS_ARRAY_EXCEPTION org.aspectj.apache.bcel.ExceptionConstants org.aspectj.apache.bcel.ExceptionConstants  Chapter 5.1\r\n  Chapter 5.1\r\n  Chapter 5.1\r\n  Chapter 5.3 (as below)\r\n  Chapter 5.1\r\n  Chapter 5.1\r\n  Chapter 5.1\r\n  Chapter 5.3 (as below)\r\n","FalseLiteral":"computeConstant generateCode generateOptimizedBoolean literalType source traverse source org.aspectj.org.eclipse.jdt.internal.compiler.ast.FalseLiteral  implicit falling through the TRUE case\r\n","DiskIndex":"add asArray addDocumentNames addQueryResult addQueryResults cacheDocumentNames computeDocumentNames copyQueryResults initialize initializeFrom mergeCategories mergeCategory mergeWith readAllDocumentNames readCategoryTable readChunk readDocumentName readDocumentNumbers readHeaderInfo startQuery stopQuery readStreamBuffer readStreamChars readStreamDocumentArray readStreamInt writeAllDocumentNames writeCategories writeCategoryTable writeDocumentNumbers writeHeaderInfo writeOffsetToHeader writeStreamChars writeStreamChars writeStreamInt indexFile headerInfoOffset numberOfChunks sizeOfLastChunk chunkOffsets documentReferenceSize startOfCategoryTables categoryOffsets categoryEnds cacheUserCount cachedChunks categoryTables cachedCategoryName DEFAULT_BUFFER_SIZE BUFFER_READ_SIZE BUFFER_WRITE_SIZE streamBuffer bufferIndex bufferEnd streamEnd SIGNATURE SIGNATURE_CHARS DEBUG RE_INDEXED DELETED CHUNK_SIZE INTERNED_CATEGORY_NAMES size elements org.aspectj.org.eclipse.jdt.internal.core.index.DiskIndex  1, 2 or more bytes... depends on # of document names\r\n  decompressed chunks of document names\r\n  category name -> HashtableOfObject(words -> int[] of document #'s) or offset if not read yet\r\n  used when reading from the file into the streamBuffer\r\n  used when writing data from the streamBuffer to the file\r\n  $NON-NLS-1$\r\n  clear cached items\r\n  must skip over documents which have been added  must skip over documents which have been added  file is empty\r\n  initialized if needed\r\n  cache if key is null since its a definite match\r\n  will need all document names so get them now\r\n  remember each new document\r\n  disk index was empty, so add every indexed document\r\n  initialize positions as if each document will remain in the same position\r\n  find out if the memory index has any new or deleted documents, if not then the names & positions are the same\r\n  remember each new document, skip deleted documents which were never saved\r\n  some new documents have been added or some old ones deleted\r\n  keep each unchanged document\r\n  add each new document\r\n  remember the position for each new document\r\n  if its old position == ReINDEXED then its also forgotten but its new position is needed to map references\r\n  skip over deleted... references are forgotten\r\n  the reindexed docName that was at position i is now at position count\r\n  the unchanged docName that was at position i is now at position count\r\n  $NON-NLS-1$\r\n  file is empty if its not set\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  file is empty\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  delete the temporary index file\r\n  at this point, this.categoryTables contains the names -> wordsToDocs added in copyQueryResults()\r\n  forget any reference to a document which was deleted or re_indexed\r\n  skip words which no longer have any references\r\n  flush cached table\r\n  compute & write out new docNames\r\n  keeps track of the position of each document in the new sorted docNames\r\n  for each new  nothing to do... memory index contained deleted documents that had never been saved\r\n  index is now empty since all the saved documents were removed\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  free up the space\r\n  add each new  free up the space\r\n  merge each category table with the new ones & write them out\r\n  free up the space\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  rename file by deleting previous index file & renaming temp one\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  result will be null if categoryName is unknown\r\n  must cache remaining document number arrays\r\n  DEBUG\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  read actual offset\r\n  offset to array in the file\r\n  read in-lined array providing size\r\n  store 1 element array by negating documentNumber\r\n  256 if the array size >= 256 followed by another int which is the offset to the array (written prior to the table)\r\n  in practice, some tables can be greater than 500K when they contain more than 10K elements\r\n  each array follows the previous one\r\n  arrayOffset is either a cached array of docNumbers or an Integer offset in the file\r\n  must be same order as writeHeaderInfo()\r\n  cache offset to category table\r\n  cache end of the category table\r\n  cache end of the category table\r\n  clear cached items\r\n  we're at the end of the stream - nothing left to read\r\n  so we need to shift the remaining bytes to be read, and fill the buffer from the stream\r\n  read chars array length\r\n  fill the chars from bytes buffer\r\n  how many characters can be decoded without refilling the buffer?\r\n  all the characters must already be in the buffer if we're at the end of the stream\r\n  how many bytes without refilling the buffer?\r\n  how many shorts without refilling the buffer?\r\n  assume the file was just created by initializeFrom()\r\n  in order, write: SIGNATURE & headerInfoOffset place holder, then each compressed chunk of document names\r\n  will overwrite with correct value later\r\n  number of bytes used to encode a reference\r\n  number of identical characters at the beginning (also the index of first character that is different)\r\n  current is 'abba', next is 'abbab'\r\n  number of identical characters at the end\r\n  current is 'abbba', next is 'abba'\r\n  current is 'xabc', next is 'xyabc'\r\n  remember the offset to the start of the table\r\n  flush cached table\r\n  mark to identify that an offset follows\r\n  offset in the file of the array of document numbers\r\n  store an array of 1 element by negating the documentNumber (can be zero)\r\n  must store length as a positive int to detect in-lined array of 1 element\r\n  when documentNumbers is large, write BUFFER_WRITE_SIZE parts & fall thru to write the last part\r\n  when documentNumbers is large, write BUFFER_WRITE_SIZE parts & fall thru to write the last part\r\n  apend the file with chunk offsets\r\n  append the file with the category offsets... # of name -> offset pairs, followed by each name & an offset to its word->doc# table\r\n  ensure buffer is written to the stream\r\n  $NON-NLS-1$\r\n  offset to position in header\r\n  update to reflect the correct offset\r\n  store chars array length instead of bytes\r\n  this will allow to read it faster\r\n  we're assuming that very few char[] are so large that we need to flush the buffer more than once, if at all\r\n  flush the buffer now to make sure there is room for the array\r\n  first four bits are stored in first byte\r\n  six following bits are stored in second byte\r\n  last six bits are stored in third byte\r\n  first two bits are stored in first byte\r\n  last six bits are stored in second byte\r\n","CompletionOnLocalName":"resolve printAsExpression printStatement FAKENAMESUFFIX realName org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnLocalName  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","ICompletionRequestor":"acceptAnonymousType acceptClass acceptError acceptField acceptInterface acceptKeyword acceptLabel acceptLocalVariable acceptMethod acceptMethodDeclaration acceptModifier acceptPackage acceptType acceptVariableName org.aspectj.org.eclipse.jdt.core.ICompletionRequestor","CompletionOnKeyword":"getToken getPossibleKeywords canCompleteEmptyToken org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnKeyword","CompletionOnKeyword3":"canCompleteEmptyToken getToken getPossibleKeywords printExpression resolveType possibleKeywords org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnKeyword3  $NON-NLS-1$\r\n","CompletionOnKeyword2":"canCompleteEmptyToken getToken getPossibleKeywords print token possibleKeywords org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnKeyword2  $NON-NLS-1$\r\n","CompletionOnKeyword1":"canCompleteEmptyToken getToken getPossibleKeywords aboutToResolve getTypeBinding printExpression possibleKeywords canCompleteEmptyToken org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnKeyword1  $NON-NLS-1$\r\n","StructureViewRenderer":"updateView setActiveNode setActiveNode org.aspectj.ajde.ui.StructureViewRenderer /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","LabelFlowContext":"checkLabelValidity individualToString labelName labelName org.aspectj.org.eclipse.jdt.internal.compiler.flow.LabelFlowContext  check if label was already defined above\r\n  $NON-NLS-2$ ","MethodPattern":"createIndexKey decodeIndexKey getBlankPattern getIndexCategories hasMethodArguments hasMethodParameters isPolymorphicSearch matchesDecodedKey mustResolve queryIn print findDeclarations findReferences selector declaringQualification declaringSimpleName returnQualification returnSimpleName parameterQualifications parameterSimpleNames parameterCount varargs declaringType returnTypeSignatures returnTypeArguments parametersTypeSignatures parametersTypeArguments methodParameters methodArguments REF_CATEGORIES REF_AND_DECL_CATEGORIES DECL_CATEGORIES org.aspectj.org.eclipse.jdt.internal.core.search.matching.MethodPattern  extra reference info\r\n  Signatures and arguments for generic search\r\n  $NON-NLS-1$\r\n  Set flags\r\n  Get unique key for parameterized constructors\r\n  String genericSignature = null;\r\n  Store type signature and arguments for declaring type\r\n  Store type signatures and arguments for return type\r\n  Store type signatures and arguments for method parameters type\r\n  Store type signatures and arguments for method\r\n  Store type signature and arguments for declaring type\r\n  Store type signatures and arguments for return type\r\n  Store type signatures and arguments for method parameters type\r\n  Store type signatures and arguments for method\r\n  If declaring type is specified - even with simple name - always resolves\r\n  If return type is specified - even with simple name - always resolves\r\n  parameter types\r\n  can be null\r\n  do a prefix query with the selector\r\n  do a prefix query with the selector\r\n  else do a pattern query with just the selector\r\n  TODO (frederic) implement regular expression match\r\n  match rule is irrelevant when the key is null\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n * Instanciate a method pattern with signatures for generics search\r\n */\r\n /*\r\n * Instanciate a method pattern with signatures for generics search\r\n */\r\n","IRestrictedAccessTypeRequestor":"acceptType org.aspectj.org.eclipse.jdt.internal.core.search.IRestrictedAccessTypeRequestor","DeltaProcessor":"toString getPackageFragmentRoot isRootOfProject toString getTimeStamp addClasspathChange addDependentProjects addForRefresh addToParentInfo addToRootsToRefreshWithDependents checkExternalArchiveChanges checkProjectsBeingAddedOrRemoved checkProjectReferenceChange readRawClasspath checkSourceAttachmentChange close contentChanged createElement createExternalArchiveDelta currentDelta deleting elementAdded elementRemoved elementType flush getSourceElementParser enclosingRootInfo fire firePostChangeDelta fireReconcileDelta isAffectedBy isPrimaryWorkingCopy isResFilteredFromOutput mergeDeltas notifyListeners notifyTypeHierarchies nonJavaResourcesChanged otherRootsInfo outputsInfo popUntilPrefixOf processResourceDelta resetProjectCaches refreshPackageFragmentRoots registerJavaModelDelta removeFromParentInfo resourceChanged rootInfo startDeltas stopDeltas traverseDelta validateClasspaths validateClasspaths updateCurrentDeltaAndIndex updateIndex updateJavaModel updateRootIndex outputCount paths traverseModes inclusionPatterns exclusionPatterns project rootPath entryKind root IGNORE SOURCE BINARY EXTERNAL_JAR_ADDED EXTERNAL_JAR_CHANGED EXTERNAL_JAR_REMOVED EXTERNAL_JAR_UNCHANGED INTERNAL_JAR_IGNORE NON_JAVA_RESOURCE DEBUG VERBOSE PERF DEFAULT_CHANGE_EVENT state manager currentDelta currentElement javaModelDeltas reconcileDeltas isFiring modelUpdater projectCachesToReset refreshedElements oldRoots rootsToRefresh overridenEventType sourceElementParserCache classpathChanges serialVersionUID org.aspectj.org.eclipse.jdt.internal.core.DeltaProcessor  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  must not collide with ElementChangedEvent event masks\r\n  no need to go further as the project is already known\r\n  $NON-NLS-1$\r\n  force classpath marker refresh of affected projects\r\n  flush jar type cache\r\n  $NON-NLS-1$   touch to force a build of this project\r\n  see https:  if delta has not been fired while creating markers\r\n  force list to be computed\r\n  - if the project is closed, it has already lost its java nature\r\n  remember project and its dependents\r\n  ensure project references are updated (see https:  workaround for bug 15168 circular errors not reported\r\n  need nature check - 18698\r\n  in case the project was removed then added then changed\r\n  need nature check - 18698\r\n  in case the project was removed then added then changed (see bug 19799)\r\n  java nature added or removed: remember  project and its dependents\r\n  remove classpath cache so that initializeRoots() will not consider the project has a classpath\r\n  remove container cache for this project\r\n  close project\r\n  ensure project references are updated (see https:  workaround for bug 15168 circular errors not reported\r\n  project opened or closed: remember  project and its dependents\r\n  ensure project references are updated\r\n  workaround for bug 15168 circular errors not reported\r\n  remove classpath cache so that initializeRoots() will not consider the project has a classpath\r\n  remove container cache for this project\r\n  in all cases, refresh the external jars for this project\r\n  only consider content change\r\n  and encoding change\r\n  and also move and overide scenario (see http:  project doesn't exist\r\n  force to (re)read the .classpath file\r\n  fall through\r\n  force to (re)read the .classpath file\r\n  close the root so that source attachement cache is flushed\r\n  see bug https:  just report a change to the resource (see https:  element amongst old java project s list).\r\n  an elementType JAVA_PROJECT (see #elementType(...)).\r\n  find the element that encloses the resource\r\n  find the root\r\n  create package handle\r\n  create package handle\r\n  find the element that encloses the resource\r\n  find the package\r\n  else case of package x which is a prefix of x.y\r\n  fileName validation has been done in elementType(IResourceDelta, int, boolean)\r\n  fileName validation has been done in elementType(IResourceDelta, int, boolean)\r\n  find JARs to refresh\r\n  null out early to avoid concurrent modification exception (see https:  project is not accessible or has lost its Java nature\r\n  project is not accessible or has lost its Java nature\r\n  project doesn't exist -> ignore\r\n  perform refresh\r\n  project is not accessible or has lost its Java nature\r\n  project does not exist -> ignore\r\n  not supposed to be refreshed\r\n  compute shared status\r\n  internal JAR\r\n  check timestamp to figure if JAR has changed in some way\r\n  index the new jar\r\n  jar still doesn't exist\r\n  first remove the index so that it is forced to be re-indexed\r\n  then index the jar\r\n  file doesn't exist\r\n  remove the index\r\n  the jar was physically removed: remove the index\r\n  missing JAR\r\n  according to computed status, generate a delta\r\n  $NON-NLS-1$\r\n  see https:  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  see https:  deleted without interferences from the index manager\r\n  remember roots of this project\r\n  compute roots without opening project\r\n  foce list to be computed\r\n  remove preferences from per project info\r\n  element is moved\r\n  find the element type of the moved from element\r\n  reset current element as it might be inside a nested root (popUntilPrefixOf() may use the outer root)\r\n  outside classpath\r\n  create the moved from element\r\n  moved from outside classpath\r\n  and it appears empty.\r\n  just report a change to the resource (see https:  regular element addition\r\n  when a root is added, and is on the classpath, the project must be updated\r\n  refresh pkg fragment roots and caches of the project (and its dependents)\r\n  reset project's package fragment cache\r\n  and it appears to contain only the default package.\r\n  refresh pkg fragment roots and caches of the project (and its dependents)\r\n  when a project is created, it does not yet have a java nature\r\n  element is moved\r\n  find the element type of the moved from element\r\n  reset current element as it might be inside a nested root (popUntilPrefixOf() may use the outer root)\r\n  outside classpath\r\n  create the moved To element\r\n  moved outside classpath\r\n  just report a change to the resource (see https:  regular element removal\r\n  refresh pkg fragment roots and caches of the project (and its dependents)\r\n  refresh pkg fragment roots and caches of the project (and its dependents)\r\n  reset package fragment cache\r\n  case of a movedTo or movedFrom project (other cases are handled in processResourceDelta(...)\r\n  parent is a non-Java resource because it doesn't have a valid package name (see https:  case of proj=src=bin and resource is a jar file on the classpath\r\n  $NON-NLS-1$\r\n  Refresh internal scopes\r\n  be duplicated, so it is necessary to remember original lists in a variable (since field values may change under us)\r\n  $NON-NLS-1$  $NON-NLS-1$\r\n  post change deltas\r\n  flush now so as to keep listener reactions to post their own deltas for subsequent iteration\r\n  mark the operation stack has not modifying resources since resource deltas are being fired\r\n  $NON-NLS-1$  $NON-NLS-1$\r\n  flush now so as to keep listener reactions to post their own deltas for subsequent iteration\r\n  backward compatible\r\n  use local exception to quickly escape from delta traversal\r\n  System.out.println(\"RELEVANT DELTA detected in: \"+ (System.currentTimeMillis() - start));\r\n  only check leaf delta nodes\r\n  if any flag is set but SYNC or MARKER, this delta should be considered\r\n  long start = System.currentTimeMillis();\r\n  System.out.println(\"IGNORE SYNC DELTA took: \"+ (System.currentTimeMillis() - start));\r\n  case of bin=src\r\n  Get java project to use its source and compliance levels\r\n  proj=bin\r\n  $NON-NLS-1$   $NON-NLS-1$  $NON-NLS-1$\r\n  wrap callbacks with Safe runnable for subsequent listeners to be called when some are causing grief\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  case of changes in primary working copies\r\n  wrap callbacks with Safe runnable for subsequent listeners to be called when some are causing grief\r\n  if a package fragment root is the project, clear it too\r\n  reset non-java resources if element was open\r\n  don't use find after creating the delta as it can be null (see https:  case of proj==bin==src\r\n  check case of src==bin\r\n  check case of src==bin\r\n  default package and path is not a direct child\r\n  force opening of java model so that java element delta are reported\r\n  get the workspace delta, and start processing there.\r\n  find out the element type\r\n  traverse delta\r\n  add child as non java resource\r\n  project has changed nature (description or open  reset caches of dependent projects\r\n  workaround for bug 15168 circular errors not reported\r\n  don't hold onto parser longer than necessary\r\n  generate classpath change deltas\r\n  generate external archive change deltas\r\n  generate Java deltas from resource changes\r\n  avoid populating for SYNC or MARKER deltas\r\n  avoid populating for SYNC or MARKER deltas\r\n  create classpath markers if necessary\r\n  update project references if necessary\r\n  update all cycle markers since the project references changes may have affected cycles\r\n  does not fire any deltas\r\n  set stack of elements\r\n  process current delta\r\n  not yet inside a package fragment root\r\n  reset source element parser cache\r\n  case of prj=src\r\n  get the project's output locations and traverse mode\r\n  check source attachment change\r\n  find out whether the child is a package fragment root of the current project\r\n  package fragment root of another project (dealt with later)\r\n  compute child type\r\n  is childRes in the output folder and is it filtered out ?\r\n  to avoid reporting child delta as non-java resource delta\r\n  traverse delta for child in the same project\r\n  the non-java resource (or its parent folder) will be attached to the java project\r\n  the non-java resource (or its parent folder) will be attached to the java project\r\n  if inside a package fragment root\r\n  force the currentProject to be used\r\n  find the parent of the non-java resource to attach to\r\n  NB: attach non-java resource to project (not to its package fragment root)\r\n  add child as non java resource\r\n  binary output of childRootInfo.project cannot be this root\r\n  but it is a package fragment root of another project, traverse delta too\r\n  if the child is a package fragment root of one or several other projects\r\n  binary output of childRootInfo.project cannot be this root\r\n  orphan children are siblings of a package fragment root\r\n  attach orphan children\r\n  delta iff Java project (18698)\r\n  process children if needed\r\n  project gained or lost Java nature\r\n  add  in case .classpath got modified while closed\r\n  project opened or closed\r\n  allowed to reuse model cache\r\n  if library contained in another project\r\n  or projects that reference a library in one of the projects that have changed)\r\n  resource might be containing shared roots (see bug 19058)\r\n  resource might be containing shared roots (see bug 19058)\r\n  $NON-NLS-1$\r\n  reset the corresponding project built state, since cannot reuse if added back\r\n  clean up previous session containers (see https:  project has been opened or closed\r\n  resource might be containing shared roots (see bug 19058)\r\n  refresh pkg fragment roots and caches of the project (and its dependents)\r\n  when a project is open  project's nature has been added or removed\r\n  note its resources are still visible as roots to other projects\r\n  $NON-NLS-1$\r\n  reset the corresponding project built state, since cannot reuse if added back\r\n  when a project's nature is added  content or encoding has changed\r\n  NB: Discarding index jobs belonging to this project was done during PRE_DELETE\r\n  index jar file only once (if the root is in its declaring project)\r\n  index the new jar\r\n  first remove the index so that it is forced to be re-indexed\r\n  then index the jar\r\n  the jar was physically removed: remove the index\r\n  if null, defaults to source\r\n  TODO (philippe) Why do this? Every child is added anyway as the delta is walked\r\n  don't break as packages of the package fragment root can be indexed below\r\n  the java builder -> ignore\r\n  no need to index if the content has not changed\r\n  no need to index if the content has not changed\r\n  Clean file from secondary types cache but do not update indexing secondary type cache as it will be updated through indexing itself\r\n  Clean file from secondary types cache and update indexing secondary type cache as indexing cannot remove secondary types from cache\r\n /*\r\n\t * Answer a combination of the lastModified stamp and the size.\r\n\t * Used for detecting external JAR changes\r\n\t */\r\n /*\r\n\t * The global state of delta processing.\r\n\t */\r\n /*\r\n\t * The Java model manager\r\n\t */\r\n /*\r\n\t * The <code>JavaElementDelta</code> corresponding to the <code>IResourceDelta</code> being translated.\r\n\t */\r\n /* The java element that was last created (see createElement(IResource)). \r\n\t * This is used as a stack of java elements (using getParent() to pop it, and \r\n\t * using the various get*(...) to push it. */\r\n /*\r\n\t * Queue of deltas created explicily by the Java Model that\r\n\t * have yet to be fired.\r\n\t */\r\n /*\r\n\t * Queue of reconcile deltas on working copies that have yet to be fired.\r\n\t * This is a table form IWorkingCopy to IJavaElementDelta\r\n\t */\r\n /*\r\n\t * Turns delta firing on/off. By default it is on.\r\n\t */\r\n /*\r\n\t * Used to update the JavaModel for <code>IJavaElementDelta</code>s.\r\n\t */\r\n /* A set of IJavaProject whose caches need to be reset */\r\n /*\r\n\t * A list of IJavaElement used as a scope for external archives refresh during POST_CHANGE.\r\n\t * This is null if no refresh is needed.\r\n\t */\r\n /* A table from IJavaProject to an array of IPackageFragmentRoot.\r\n\t * This table contains the pkg fragment roots of the project that are being deleted.\r\n\t */\r\n /* A set of IJavaProject whose package fragment roots need to be refreshed */\r\n /*\r\n\t * Type of event that should be processed no matter what the real event type is.\r\n\t */\r\n /*\r\n\t * Cache SourceElementParser for the project being visited\r\n\t */\r\n /*\r\n\t * Map from IProject to ClasspathChange\r\n\t */\r\n /*\r\n\t * Adds the dependents of the given project to the list of the projects\r\n\t * to update.\r\n\t */\r\n /*\r\n\t * Adds the given element to the list of elements used as a scope for external jars refresh.\r\n\t */\r\n /*\r\n\t * Adds the given child handle to its parent's cache of children. \r\n\t */\r\n /*\r\n\t * Adds the given project and its dependents to the list of the roots to refresh.\r\n\t */\r\n /*\r\n\t * Check all external archive (referenced by given roots, projects or model) status and issue a corresponding root delta.\r\n\t * Also triggers index updates\r\n\t */\r\n /* classpath file change */\r\n /*\r\n\t * Process the given delta and look for projects being added, opened, closed or\r\n\t * with a java nature being added or removed.\r\n\t * Note that projects being deleted are checked in deleting(IProject).\r\n\t * In all cases, add the project's dependents to the list of projects to update\r\n\t * so that the classpath related markers can be updated.\r\n\t */\r\n /*\r\n\t * Closes the given element, which removes it from the cache of open elements.\r\n\t */\r\n /*\r\n\t * Generic processing for elements with changed contents:<ul>\r\n\t * <li>The element is closed such that any subsequent accesses will re-open\r\n\t * the element reflecting its new structure.\r\n\t * <li>An entry is made in the delta reporting a content change (K_CHANGE with F_CONTENT flag set).\r\n\t * </ul>\r\n\t * Delta argument could be null if processing an external JAR change\r\n\t */\r\n /*\r\n\t * Creates the openables corresponding to this resource.\r\n\t * Returns null if none was found.\r\n\t */\r\n /*\r\n\t * Check if external archives have changed and create the corresponding deltas.\r\n\t * Returns whether at least on delta was created.\r\n\t */\r\n /*\r\n\t * Note that the project is about to be deleted.\r\n\t */\r\n /*\r\n\t * Processing for an element that has been added:<ul>\r\n\t * <li>If the element is a project, do nothing, and do not process\r\n\t * children, as when a project is created it does not yet have any\r\n\t * natures - specifically a java nature.\r\n\t * <li>If the elemet is not a project, process it as added (see\r\n\t * <code>basicElementAdded</code>.\r\n\t * </ul>\r\n\t * Delta argument could be null if processing an external JAR change\r\n\t */\r\n /*\r\n\t * Generic processing for a removed element:<ul>\r\n\t * <li>Close the element, removing its structure from the cache\r\n\t * <li>Remove the element from its parent's cache of children\r\n\t * <li>Add a REMOVED entry in the delta\r\n\t * </ul>\r\n\t * Delta argument could be null if processing an external JAR change\r\n\t */\r\n /*ensure root is a root of its project (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=185310) */\r\n /*\r\n\t * Returns the type of the java element the given delta matches to.\r\n\t * Returns NON_JAVA_RESOURCE if unknown (e.g. a non-java resource or excluded .java file)\r\n\t */\r\n /*\r\n\t * Flushes all deltas without firing them.\r\n\t */\r\n /*\r\n\t * Finds the root info this path is included in.\r\n\t * Returns null if not found.\r\n\t */\r\n /*\r\n\t * Fire Java Model delta, flushing them after the fact after post_change notification.\r\n\t * If the firing mode has been turned off, this has no effect. \r\n\t */\r\n /* throws CoreException */\r\n /*\r\n\t * Returns whether a given delta contains some information relevant to the JavaModel,\r\n\t * in particular it will not consider SYNC or MARKER only deltas.\r\n\t */\r\n /*\r\n\t * Returns whether the given element is a primary compilation unit in working copy mode.\r\n\t */\r\n /*\r\n\t * Returns whether the given resource is in one of the given output folders and if\r\n\t * it is filtered out from this output folder.\r\n\t */\r\n /*\r\n\t * Merges all awaiting deltas.\r\n\t */\r\n /*\r\n\t * Generic processing for elements with changed contents:<ul>\r\n\t * <li>The element is closed such that any subsequent accesses will re-open\r\n\t * the element reflecting its new structure.\r\n\t * <li>An entry is made in the delta reporting a content change (K_CHANGE with F_CONTENT flag set).\r\n\t * </ul>\r\n\t */\r\n /*\r\n\t * Returns the other root infos for the given path. Look in the old other roots table if kind is REMOVED.\r\n\t */\r\n /*\r\n\t * Converts a <code>IResourceDelta</code> rooted in a <code>Workspace</code> into\r\n\t * the corresponding set of <code>IJavaElementDelta</code>, rooted in the\r\n\t * relevant <code>JavaModel</code>s.\r\n\t */\r\n /*\r\n\t * Traverse the set of projects which have changed namespace, and reset their \r\n\t * caches and their dependents\r\n\t */\r\n /* \r\n\t * Refresh package fragment roots of projects that were affected\r\n\t */\r\n /*\r\n\t * Registers the given delta with this delta processor.\r\n\t */\r\n /*\r\n\t * Removes the given element from its parents cache of children. If the\r\n\t * element does not have a parent, or the parent is not currently open,\r\n\t * this has no effect. \r\n\t */\r\n /*\r\n\t * Notification that some resource changes have happened\r\n\t * on the platform, and that the Java Model should update any required\r\n\t * internal structures such that its elements remain consistent.\r\n\t * Translates <code>IResourceDeltas</code> into <code>IJavaElementDeltas</code>.\r\n\t *\r\n\t * @see IResourceDelta\r\n\t * @see IResource \r\n\t */\r\n /*\r\n\t * Returns the root info for the given path. Look in the old roots table if kind is REMOVED.\r\n\t */\r\n /*\r\n\t * Turns the firing mode to on. That is, deltas that are/have been\r\n\t * registered will be fired.\r\n\t */\r\n /*\r\n\t * Turns the firing mode to off. That is, deltas that are/have been\r\n\t * registered will not be fired until deltas are started again.\r\n\t */\r\n /*\r\n\t * Converts an <code>IResourceDelta</code> and its children into\r\n\t * the corresponding <code>IJavaElementDelta</code>s.\r\n\t */\r\n /* check classpath or prefs files change */\r\n /*\r\n\t * Validate the classpaths of the projects affected by the given delta.\r\n\t * Create markers if necessary.\r\n\t * Returns whether cycle markers should be recomputed.\r\n\t */\r\n /*\r\n\t * Update the current delta (ie. add/remove/change the given element) and update the correponding index.\r\n\t * Returns whether the children of the given delta must be processed.\r\n\t * @throws a JavaModelException if the delta doesn't correspond to a java element of the given type.\r\n\t */\r\n /*\r\n\t * Update Java Model given some delta\r\n\t */\r\n /*\r\n\t * Updates the index of the given root (assuming it's an addition or a removal).\r\n\t * This is done recusively, pkg being the current package.\r\n\t */\r\n","PointcutDesignator":"postParse finishResolveTypes getPointcut getPointcutDeclarationText isError print getNodeType0 memSize pointcut tokens isError org.aspectj.ajdt.internal.compiler.ast.PointcutDesignator org.aspectj.org.eclipse.jdt.core.dom.PointcutDesignator  ??? is this a good signal\r\n  called by AtAspectJVisitor\r\n  shadow mungers early.\r\n  ajh02: hmmmmmmm.. should make a POINTCUT_DESIGNATOR thing\r\n  ajh02: stub method\r\n /*\r\n\t * (non-Javadoc)\r\n\t * \r\n\t * @see org.eclipse.jdt.internal.compiler.ast.ASTNode#print(int, java.lang.StringBuffer)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","IImportDeclaration":"getElementName getFlags isOnDemand org.aspectj.org.eclipse.jdt.core.IImportDeclaration","CommentRecorderScanner":"recordComment org.aspectj.org.eclipse.jdt.internal.core.util.CommentRecorderScanner  for comment line both positions are negative\r\n","ClassAnnotationValue":"stringify toString stringify toString signature signature org.aspectj.weaver.ClassAnnotationValue org.aspectj.weaver.ClassAnnotationValue /* *******************************************************************\r\n * Copyright (c) 2006 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement IBM     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2006 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement IBM     initial implementation \r\n * ******************************************************************/\r\n","IAnnotation":"getTypeIndex getTypeName getComponentsNumber getComponents org.aspectj.org.eclipse.jdt.core.util.IAnnotation","InterTypeMethodBinding":"canBeSeenBy isFinal getAccessMethod alwaysNeedsAccessMethod sourceMethod getTargetType getOwningClass toString targetType syntheticMethod postDispatchMethod sourceMethod org.aspectj.ajdt.internal.compiler.lookup.InterTypeMethodBinding  If the typevariable is one declared on the source method, then we know we are the declaring element\r\n  }\r\n  System.err.println(\"outer dec: \" +\r\n  XXX make sure this walks correctly\r\n  isDefault()\r\n  XXX this is identical to InterTypeFieldBinding\r\n  override method in MethodBinding to ensure correct behaviour in some of JDTs generics checks.\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","Var":"getType toString accept getType toString accept variableType variableType org.aspectj.weaver.ast.Var org.aspectj.weaver.ast.Var /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","SourceMethodInfo":"isAnnotationMethod isConstructor getReturnTypeName setReturnType returnType org.aspectj.org.eclipse.jdt.internal.core.SourceMethodInfo /*\r\n\t * Return type name for this method. The return type of\r\n\t * constructors is equivalent to void.\r\n\t */\r\n /*\r\n * Element info for method from source.\r\n */\r\n","CompilationUnitProblemFinder":"accept getCompilerOptions getHandlingPolicy getRequestor process process initializeParser org.aspectj.org.eclipse.jdt.internal.core.CompilationUnitProblemFinder  sourceTypes[0] is always toplevel here\r\n  need field and methods\r\n  need member types\r\n  need field initialization\r\n  need to hold onto this\r\n  avoid breaking other tools due to internal compiler failure (40334)\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  don't hold a reference to this external object\r\n  don't hold a reference to this external object\r\n  NB: unit.cleanUp() is done by caller\r\n  no need for source\r\n  verify methods\r\n  analyze code\r\n  generate code\r\n  verify methods\r\n  analyze code\r\n  generate code\r\n  $NON-NLS-1$   $NON-NLS-1$  /*parse literal expressions as constants only if not creating a DOM AST*/\r\n /*store annotations in the bindings if creating a DOM AST*/\r\n /*\r\n\t *  Low-level API performing the actual compilation\r\n\t */\r\n /*\r\n\t * Answer the component to which will be handed back compilation results from the compiler\r\n\t */\r\n /*no CompilationUnitDeclaration*/\r\n /*use default Parser*/\r\n /* (non-Javadoc)\r\n\t * Fix for bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=60689.\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.Compiler#initializeParser()\r\n\t */\r\n","Openable":"bufferChanged buildStructure canBeRemovedFromCache canBufferBeRemovedFromCache closeBuffer closing codeComplete codeSelect createElementInfo exists findRecommendedLineSeparator generateInfos getBuffer getBufferFactory getBufferManager getCorrespondingResource getOpenable getUnderlyingResource hasBuffer hasUnsavedChanges isConsistent isOpen isSourceElement isStructureKnown makeConsistent open openBuffer openParent parentExists resourceExists save getPackageFragmentRoot org.aspectj.org.eclipse.jdt.internal.core.Openable  nothing to do\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  set unit to skip\r\n  code complete\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   fix for 1FVXGDK\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$  open the parent if necessary\r\n  (case of compilation units becoming working copies)\r\n  build the structure of the openable (this will open the buffer if needed)\r\n  remove out of sync buffer for this element\r\n  $NON-NLS-1$\r\n  ensure element is open\r\n  try to (re)open a buffer\r\n  to see if they have an child with unsaved changes\r\n  fix for 1FWNMHH\r\n  workaround for http:  ensure path is relative (see http:  some Openables (like a JavaProject) don't have a buffer\r\n  update the element info of this element\r\n /*\r\n * Returns whether this element can be removed from the Java model cache to make space.\r\n */\r\n /*\r\n * Returns whether the buffer of this element can be removed from the Java model cache to make space.\r\n */\r\n /*\r\n * Returns a new element info for this element.\r\n */\r\n /*\r\n * @see IJavaElement\r\n */\r\n","ClassScope":"buildAnonymousTypeBinding buildFields buildFieldsAndMethods postParse buildLocalType buildLocalTypeBinding buildMemberTypes buildMethods buildType buildTypeVariables checkAndSetModifiers checkAndSetModifiersForField checkParameterizedSuperTypeCollisions checkForInheritedMemberTypes checkParameterizedTypeBounds connectMemberTypes connectSuperclass connectEnumSuperclass connectSuperInterfaces connectTypeHierarchy connectTypeHierarchyWithoutMembers detectHierarchyCycle detectHierarchyCycle findSupertype problemReporter referenceType toString addDepth invocationType referenceContext superTypeReference org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ClassScope  count the number of fields vs. initializers\r\n  iterate the field declarations to create the bindings, lose all duplicates\r\n  field's type will be resolved when needed for top level types\r\n  remember that we have seen a field with this name\r\n  ensure that the duplicate field is found & removed\r\n  we know we'll be removing at least 1 duplicate name\r\n  remove duplicate fields\r\n  in case some static imports reached already into this type\r\n  AspectJ Extension\r\n  AspectJ Extension\r\n  build the binding or the local type\r\n  Look at member types\r\n  check that the member does not conflict with an enclosing type\r\n  check the member type does not conflict with another sibling member type\r\n  no need to check for enum, since implicitly static\r\n  check that the member does not conflict with an enclosing type\r\n  check that the member type does not conflict with another sibling member type\r\n  iterate the method declarations to create the bindings\r\n  look for <clinit> method\r\n  reserve 2 slots for special enum methods: #values() and #valueOf(String)\r\n  create special methods for enums\r\n  add <EnumType>[] values()\r\n  add <EnumType> valueOf()\r\n  is null if binding could not be created\r\n  create bindings for source methods\r\n  in case some static imports reached already into this type\r\n  provide the typeDeclaration with needed scopes\r\n  report the error against the parent - its still safe to answer the member type\r\n  do not construct type variables if source < 1.5\r\n  safety\r\n  handle the case of redefining java.lang.Object up front\r\n  set AccEnum flag for anonymous body of enum constants\r\n  currently inside this field initialization\r\n  inside field declaration ? check field modifier to see if deprecated\r\n  local member\r\n  checks for member types before local types to catch local members\r\n  after this point, tests on the 16 bits reserved.\r\n  includes member types defined inside local types\r\n  detect abnormal cases for classes\r\n  check that Final and Abstract are not set together\r\n  add final since implicitly set for anonymous type\r\n  includes member types defined inside local types\r\n  detect abnormal cases for enums\r\n  does define abstract methods ?\r\n  enum type needs to implement abstract methods if one of its constants does not supply a body\r\n  has no constants so must implement the method itself\r\n  TODO (kent) cannot tell that the superinterfaces are empty or that their methods are implemented\r\n  all methods have bodies\r\n  as a result, each of its anonymous constants will see it as abstract and must implement each inherited abstract method\r\n  final if no enum constant with anonymous body\r\n  detect abnormal cases for interfaces\r\n  need to keep the less restrictive so disable Protected  need to keep the less restrictive\r\n  test visibility modifiers inconsistency, isolate the accessors bits\r\n  error the enclosing type of a static field must be static or a top-level type\r\n  static modifier test\r\n  check that they are not modifiers in source\r\n  set the modifiers\r\n  set the modifiers\r\n  and then check that they are the only ones\r\n  after this point, tests on the 16 bits reserved.\r\n  need to keep the less restrictive so disable Protected  check for parameterized interface collisions (when different parameterizations occur)\r\n  check against superclass\r\n  check against superinterfaces\r\n  assumes super types have already been checked & tagged\r\n  avoid resolving member types eagerly\r\n  in code assist cases when source types are added late, may not be finished connecting hierarchy\r\n  contains the interfaces between the sourceType and any superclass, which was tagged as having no member types\r\n  avoid resolving member types eagerly\r\n  skip interface if it already knows it has no member types\r\n  tag the sourceType and all of its superclasses, unless they have already been tagged\r\n  Perform deferred bound checks for parameterized type references (only done after hierarchy is connected)\r\n  handle the case of redefining java.lang.Object up front\r\n  do not propagate Object's hierarchy problems down to every subtype\r\n  do not connect if source < 1.5 as enum already got flagged as syntax error\r\n  only want to reach here when no errors are reported\r\n  is null if a cycle was detected cycle or a problem\r\n  reported some error against the source type\r\n  arity check for well-known Enum<E>\r\n  check arity\r\n  cannot reach here as AbortCompilation is thrown\r\n  check generic\r\n  cannot reach here as AbortCompilation is thrown\r\n  check argument type compatibility\r\n  bound check (in case of bogus definition of Enum type)\r\n  do not connect if source < 1.5 as annotation already got flagged as syntax error) {\r\n  already handled the case of redefining java.lang.Object\r\n  detected cycle\r\n  hold onto the problem type\r\n  Check for a duplicate interface once the name is resolved, otherwise we may be confused (ie : a.b.I and c.d.I)\r\n  only want to reach here when no errors are reported\r\n  hold onto all correctly resolved superinterfaces\r\n  ensure that the enclosing type has already been checked\r\n  must ensure the imports are resolved\r\n  double check that the hierarchy search has not already begun...\r\n  error case caught in resolveSuperType()\r\n  see findSuperType()\r\n  static abstract class M<K,V> implements Entry<K,V>\r\n  to record supertypes\r\n  ensure if this is a source superclass that it has already been checked\r\n  AspectJ Extension, we hacked the hierarchy of BinaryTypeBinding and here we pay the price\r\n  - another source type... this case is reported against the other source type\r\n  propagate down the hierarchy\r\n  https:  ensure if this is a source superclass that it has already been checked\r\n  Answer whether a cycle was found between the sourceType & the superType\r\n  be more resilient for hierarchies (144976)\r\n  allows us to trap completion & selection nodes\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  AspectJ Extension - hooks for subclasses to override\r\n /* This method checks the modifiers of a field.\r\n\t*\r\n\t* 9.3 & 8.3\r\n\t* Need to integrate the check for the final modifiers for nested types\r\n\t*\r\n\t* Note : A scope is accessible by : fieldBinding.declaringClass.scope\r\n\t*/\r\n /*\r\n\t\tOur current belief based on available JCK tests is:\r\n\t\t\tinherited member types are visible as a potential superclass.\r\n\t\t\tinherited interfaces are not visible when defining a superinterface.\r\n\t\r\n\t\tError recovery story:\r\n\t\t\tensure the superclass is set to java.lang.Object if a problem is detected\r\n\t\t\tresolving the superclass.\r\n\t\r\n\t\tAnswer false if an error was reported against the sourceType.\r\n\t*/\r\n /*\r\n\t\tOur current belief based on available JCK 1.3 tests is:\r\n\t\t\tinherited member types are visible as a potential superclass.\r\n\t\t\tinherited interfaces are visible when defining a superinterface.\r\n\t\r\n\t\tError recovery story:\r\n\t\t\tensure the superinterfaces contain only valid visible interfaces.\r\n\t\r\n\t\tAnswer false if an error was reported against the sourceType.\r\n\t*/\r\n /* Answer the problem reporter to use for raising new problems.\r\n\t*\r\n\t* Note that as a side-effect, this updates the current reference context\r\n\t* (unit, type or method) in case the problem handler decides it is necessary\r\n\t* to abort.\r\n\t*/\r\n /* Answer the reference type of this scope.\r\n\t* It is the nearest enclosing type of this scope.\r\n\t*/\r\n","SignatureUtils":"getSignatureString getSignatureMakerName getSignatureType getHandlerSignatureString getStaticInitializationSignatureString getAdviceSignatureString getMethodSignatureString getMonitorSignatureString getConstructorSignatureString getFieldSignatureString makeString makeString makeString makeString getSignatureString getSignatureMakerName getSignatureType getHandlerSignatureString getStaticInitializationSignatureString getAdviceSignatureString getMethodSignatureString getMonitorSignatureString getConstructorSignatureString getFieldSignatureString makeString makeString makeString makeString org.aspectj.weaver.SignatureUtils org.aspectj.weaver.SignatureUtils  buf.append(getName());\r\n  buf.append(getName());\r\n  modifiers\r\n  name\r\n  Declaring Type\r\n  Parameter Types\r\n  Parameter names\r\n  this behavior matches the string used by the eclipse compiler for Foo.class literals\r\n  this is the inverse of the odd behavior for Class.forName w  buf.append(getName());\r\n  buf.append(getName());\r\n  modifiers\r\n  name\r\n  Declaring Type\r\n  Parameter Types\r\n  Parameter names\r\n  this behavior matches the string used by the eclipse compiler for Foo.class literals\r\n  this is the inverse of the odd behavior for Class.forName w /* *******************************************************************\r\n * Copyright (c) 2008 Contributors\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Andy Clement - refactored out of MemberImpl\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2008 Contributors\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Andy Clement - refactored out of MemberImpl\r\n * ******************************************************************/\r\n","JoinPointSignature":"getDeclaringType getModifiers getModifiers getExceptions getExceptions getAssociatedShadowMunger isAjSynthetic hasAnnotations hasAnnotation getAnnotationTypes getAnnotationOfType setAnnotationTypes addAnnotation isBridgeMethod isVarargsMethod isSynthetic write getSourceContext getParameterNames setParameterNames getParameterNames getEffectiveSignature getSourceLocation getEnd getSourceContext getStart setPosition setSourceContext isAbstract isPublic isProtected isNative isDefault isVisible setCheckedExceptions setAnnotatedElsewhere isAnnotatedElsewhere getGenericReturnType getGenericParameterTypes parameterizedWith parameterizedWith setTypeVariables getTypeVariables getTypeVariableNamed matches resolve compareTo getKind getReturnType getType getName getParameterTypes getParameterAnnotations getParameterAnnotationTypes getSignature getArity getParameterSignature isCompatibleWith isStatic isInterface isPrivate canBeParameterized getAnnotations getDeclaringTypes getJoinPointSignatures toString toGenericString toDebugString resetName resetKind resetModifiers resetReturnTypeToObjectArray equals hashCode hasBackingGenericMember getBackingGenericMember evictWeavingState parameterizedWith getAnnotationDefaultValue getParameterSignatureErased getSignatureErased getDeclaringType getModifiers getModifiers getExceptions getExceptions getAssociatedShadowMunger isAjSynthetic hasAnnotations hasAnnotation getAnnotationTypes getAnnotationOfType setAnnotationTypes addAnnotation isBridgeMethod isVarargsMethod isSynthetic write getSourceContext getParameterNames setParameterNames getParameterNames getEffectiveSignature getSourceLocation getEnd getSourceContext getStart setPosition setSourceContext isAbstract isPublic isProtected isNative isDefault isVisible setCheckedExceptions setAnnotatedElsewhere isAnnotatedElsewhere getGenericReturnType getGenericParameterTypes parameterizedWith parameterizedWith setTypeVariables getTypeVariables getTypeVariableNamed matches resolve compareTo getKind getReturnType getType getName getParameterTypes getParameterAnnotations getParameterAnnotationTypes getSignature getArity getParameterSignature isCompatibleWith isStatic isInterface isPrivate canBeParameterized getAnnotations getDeclaringTypes getJoinPointSignatures toString toGenericString toDebugString resetName resetKind resetModifiers resetReturnTypeToObjectArray equals hashCode hasBackingGenericMember getBackingGenericMember evictWeavingState parameterizedWith getAnnotationDefaultValue getParameterSignatureErased getSignatureErased realMember substituteDeclaringType realMember substituteDeclaringType org.aspectj.weaver.JoinPointSignature org.aspectj.weaver.JoinPointSignature /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","BuildConfigPopupMenu":"actionPerformed serialVersionUID org.aspectj.ajde.ui.swing.BuildConfigPopupMenu  to that which is doing the build (swing threading issues)\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation\r\n *     Helen Hawkins  Converted to new interface (bug 148190)  \r\n * ******************************************************************/\r\n","LocalVariableTypeTable":"accept dump getLocalVariableTypeTable getLocalVariable setLocalVariableTable toString copy getTableLength accept dump getLocalVariableTypeTable getLocalVariable setLocalVariableTable toString copy getTableLength local_variable_type_table_length local_variable_type_table local_variable_type_table_length local_variable_type_table org.aspectj.apache.bcel.classfile.LocalVariableTypeTable org.aspectj.apache.bcel.classfile.LocalVariableTypeTable  Table of local\r\n  variables\r\n  J5TODO: Needs some testing !\r\n  Table of local\r\n  variables\r\n  J5TODO: Needs some testing !\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n *    Heavily based on LocalVariableTable\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *    Andy Clement     initial implementation \r\n *    Heavily based on LocalVariableTable\r\n * ******************************************************************/\r\n","IBuildMessageHandler":"handleMessage isIgnoring dontIgnore ignore org.aspectj.ajde.core.IBuildMessageHandler","SelectionOnNameOfMemberValuePair":"print resolveTypeExpecting org.aspectj.org.eclipse.jdt.internal.codeassist.select.SelectionOnNameOfMemberValuePair  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","CompletionOnJavadocTag":"addCompletionFlags getCompletionFlags printExpression filterPossibleTags getPossibleBlockTags getPossibleInlineTags completionFlags NO_CHAR_CHAR_CHAR possibleTags org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnJavadocTag  $NON-NLS-1$\r\n  Print block tags\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Print inline tags\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.AllocationExpression#printExpression(int, java.lang.StringBuffer)\r\n\t */\r\n","MULTIANEWARRAY":"dump getDimensions toString toString consumeStack getExceptions getLoadClassType dump getDimensions toString toString consumeStack getExceptions getLoadClassType dimensions dimensions org.aspectj.apache.bcel.generic.MULTIANEWARRAY org.aspectj.apache.bcel.generic.MULTIANEWARRAY /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n /* ====================================================================\r\n * The Apache Software License, Version 1.1\r\n *\r\n * Copyright (c) 2001 The Apache Software Foundation.  All rights\r\n * reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions\r\n * are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright\r\n *    notice, this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in\r\n *    the documentation and/or other materials provided with the\r\n *    distribution.\r\n *\r\n * 3. The end-user documentation included with the redistribution,\r\n *    if any, must include the following acknowledgment:\r\n *       \"This product includes software developed by the\r\n *        Apache Software Foundation (http://www.apache.org/).\"\r\n *    Alternately, this acknowledgment may appear in the software itself,\r\n *    if and wherever such third-party acknowledgments normally appear.\r\n *\r\n * 4. The names \"Apache\" and \"Apache Software Foundation\" and\r\n *    \"Apache BCEL\" must not be used to endorse or promote products\r\n *    derived from this software without prior written permission. For\r\n *    written permission, please contact apache@apache.org.\r\n *\r\n * 5. Products derived from this software may not be called \"Apache\",\r\n *    \"Apache BCEL\", nor may \"Apache\" appear in their name, without\r\n *    prior written permission of the Apache Software Foundation.\r\n *\r\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\r\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\r\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\r\n * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\r\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n * ====================================================================\r\n *\r\n * This software consists of voluntary contributions made by many\r\n * individuals on behalf of the Apache Software Foundation.  For more\r\n * information on the Apache Software Foundation, please see\r\n * <http://www.apache.org/>.\r\n */\r\n","CatchClause":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getException setException getBody setBody memSize treeSize EXCEPTION_PROPERTY BODY_PROPERTY PROPERTY_DESCRIPTORS body exceptionDecl org.aspectj.org.eclipse.jdt.core.dom.CatchClause  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  lazy init must be thread-safe for readers\r\n  treat Code as free\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","IBinaryAnnotation":"getTypeName getElementValuePairs org.aspectj.org.eclipse.jdt.internal.compiler.env.IBinaryAnnotation","CopyElementsOperation":"getMainTaskName getNestedOperation getSourceFor isRenamingMainType processElement resolveRenameAnchor verify verify sources org.aspectj.org.eclipse.jdt.internal.core.CopyElementsOperation  insert after so that the anchor is found before when deleted below\r\n","PseudoToken":"toString getString isIdentifier getLiteralKind maybeGetParsedPointcut getStart getEnd getFileName postParse print value isIdentifier literalKind parser org.aspectj.ajdt.internal.compiler.ast.PseudoToken /* (non-Javadoc)\r\n\t * @see org.eclipse.jdt.internal.compiler.ast.ASTNode#print(int, java.lang.StringBuffer)\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","IGenericType":"getModifiers isBinaryType org.aspectj.org.eclipse.jdt.internal.compiler.env.IGenericType","ISourceField":"getDeclarationSourceEnd getDeclarationSourceStart getInitializationSource getNameSourceEnd getNameSourceStart getTypeName org.aspectj.org.eclipse.jdt.internal.compiler.env.ISourceField","Ajc11CompilerAdapter":"initialValue setJavac execute afterCleaningDirs CLEAN inSelfCall javac org.aspectj.tools.ant.taskdefs.Ajc11CompilerAdapter  then re-call javac to get the list of all source files.\r\n /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved.\r\n * This program and the accompanying materials are made available\r\n * under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *     Wes Isberg     initial implementation\r\n * ******************************************************************/\r\n","RenameElementsOperation":"getMainTaskName isRename verify verify org.aspectj.org.eclipse.jdt.internal.core.RenameElementsOperation  these elements are from different parents\r\n","IOpenable":"close findRecommendedLineSeparator getBuffer hasUnsavedChanges isConsistent isOpen makeConsistent open save org.aspectj.org.eclipse.jdt.core.IOpenable","AnnotationTargetKind":"read read ANNOTATION_TYPE CONSTRUCTOR FIELD LOCAL_VARIABLE METHOD PACKAGE PARAMETER TYPE ANNOTATION_TYPE CONSTRUCTOR FIELD LOCAL_VARIABLE METHOD PACKAGE PARAMETER TYPE org.aspectj.weaver.AnnotationTargetKind org.aspectj.weaver.AnnotationTargetKind","INamingRequestor":"acceptNameWithPrefixAndSuffix acceptNameWithPrefix acceptNameWithSuffix acceptNameWithoutPrefixAndSuffix org.aspectj.org.eclipse.jdt.internal.core.INamingRequestor","AbstractIcon":"getIconResource iconResource org.aspectj.ajde.ui.AbstractIcon /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","FieldInfoWithAnnotation":"getAnnotations initialize reset toString annotations org.aspectj.org.eclipse.jdt.internal.compiler.classfmt.FieldInfoWithAnnotation","EqualExpression":"checkNullComparison checkVariableComparison analyseCode computeConstant generateCode generateOptimizedBoolean generateBooleanEqual generateOptimizedBooleanEqual generateNonBooleanEqual generateOptimizedNonBooleanEqual isCompactableOperation resolveType traverse org.aspectj.org.eclipse.jdt.internal.compiler.ast.EqualExpression  from thereon it is set\r\n  from thereon it is set\r\n  from thereon it is set\r\n  from thereon it is set\r\n  from thereon it is set\r\n  this is equivalent to the right argument inits negated\r\n  this is equivalent to the right argument inits\r\n  this is equivalent to the right argument inits negated\r\n  this is equivalent to the right argument inits\r\n  NOT_EQUAL :\r\n  this is equivalent to the right argument inits negated\r\n  this is equivalent to the left argument inits\r\n  this is equivalent to the right argument inits negated\r\n  this is equivalent to the right argument inits\r\n  the flow info is flat\r\n  optimized cases: <something equivalent to false> != x, <something equivalent to true> != x,\r\n  comparison is TRUE\r\n  comparison is FALSE\r\n  comparison is FALSE\r\n  <something equivalent to false> == x, <something equivalent to true> != x\r\n  <something equivalent to true> == x, <something equivalent to false> != x\r\n  <something equivalent to true> == <something equivalent to false>, <something equivalent to false> != <something equivalent to false>\r\n  comparison is TRUE\r\n  comparison is FALSE\r\n  comparison is FALSE\r\n  x == <something equivalent to false>, x != <something equivalent to true>\r\n  x == <something equivalent to true>, x != <something equivalent to false>\r\n  default case\r\n  comparison is TRUE\r\n  comparison is FALSE\r\n  comparison is FALSE\r\n  optimized cases: true == x, false == x\r\n  optimized cases: x == true, x == false\r\n  default case\r\n  implicit falling through the TRUE case\r\n  implicit falling through the FALSE case\r\n  reposition the endPC\r\n  optimized case: 0 == x, 0 != x\r\n  comparison is TRUE\r\n  comparison is FALSE\r\n  comparison is FALSE\r\n  optimized case: x == 0, x != 0\r\n  comparison is TRUE\r\n  comparison is FALSE\r\n  comparison is FALSE\r\n  null = x, null != x\r\n  comparison is TRUE\r\n  comparison is FALSE\r\n  comparison is FALSE\r\n  x == null, x != null\r\n  comparison is TRUE\r\n  comparison is FALSE\r\n  comparison is FALSE\r\n  null == null, null != null\r\n  null cases\r\n  default case\r\n  operand runtime type\r\n  operand runtime type\r\n  comparison is TRUE\r\n  comparison is FALSE\r\n  comparison is FALSE\r\n  implicit falling through the TRUE case\r\n  implicit falling through the FALSE case\r\n  optimized case: x == 0\r\n  implicit falling through the TRUE case\r\n  implicit falling through the FALSE case\r\n  optimized case: 0 == x\r\n  optimized case: null == x\r\n  implicit falling through the TRUE case\r\n  implicit falling through the FALSE case\r\n  implicit falling through the TRUE case\r\n  implicit falling through the FALSE case\r\n  implicit falling through the FALSE case\r\n  null == null\r\n  optimized case: x == null\r\n  default case\r\n  operand runtime type\r\n  implicit falling through the TRUE case\r\n  operand runtime type\r\n  implicit falling through the FALSE case\r\n  will check later on\r\n  will check later on\r\n  always return BooleanBinding\r\n  autoboxing support\r\n  <<16   <<12       <<8    <<4       <<0\r\n  check need for operand cast\r\n  both base type\r\n  cannot compare: Object == (int)0\r\n  (special case for String)\r\n  check need for operand cast\r\n  spec 15.20.3\r\n /* unneeded since we flatten it: asNegatedCondition(). */\r\n /*compile-time*/\r\n /*compile-time*/\r\n /*compile-time*/\r\n","UserLibraryClasspathContainer":"getClasspathEntries getDescription getKind getPath getUserLibrary verbose_no_user_library_found name org.aspectj.org.eclipse.jdt.internal.core.UserLibraryClasspathContainer  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.IClasspathContainer#getClasspathEntries()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.IClasspathContainer#getDescription()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.IClasspathContainer#getKind()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.IClasspathContainer#getPath()\r\n\t */\r\n","BatchOperation":"canModifyRoots executeOperation verify runnable org.aspectj.org.eclipse.jdt.internal.core.BatchOperation  anything in the workspace runnable can modify the roots\r\n  cannot verify user defined operation\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.core.JavaModelOperation#executeOperation()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.core.JavaModelOperation#verify()\r\n\t */\r\n","LineNumber":"accept dump getLineNumber getStartPC setLineNumber setStartPC toString copy accept dump getLineNumber getStartPC setLineNumber setStartPC toString copy start_pc line_number start_pc line_number org.aspectj.apache.bcel.classfile.LineNumber org.aspectj.apache.bcel.classfile.LineNumber  Program Counter (PC) corresponds to line\r\n  number in source file\r\n  Program Counter (PC) corresponds to line\r\n  number in source file\r\n","SourceJavadocParser":"checkDeprecation parseIdentifierTag parseSimpleTag categoriesPtr categories org.aspectj.org.eclipse.jdt.internal.compiler.SourceJavadocParser  Store categories identifiers parsed in javadoc\r\n  AspectJ Extension - made public\r\n  Store first category id\r\n  Store optional additional category identifiers\r\n  TODO (frederic) raise warning for invalid syntax when javadoc spec will be finalized...\r\n  valid additional identifier\r\n  Reset position to end of line\r\n  readChar() code is inlined to balance additional method call in checkDeprectation(int)\r\n  perhaps @deprecated tag?\r\n  ensure the tag is properly ended: either followed by a space, a tab, line end or asterisk.\r\n  perhaps @category tag?\r\n  ensure the tag is properly ended: either followed by a space, a tab, line end or asterisk.\r\n  Do not report missing identifier\r\n  switch on first tag char\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.AbstractCommentParser#parseIdentifierTag()\r\n */\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.JavadocParser#parseSimpleTag()\r\n */\r\n","MessageSend":"analyseCode computeConversion generateCode genericTypeArguments isSuperAccess isTypeAccess manageSyntheticAccessIfNecessary nullStatus postConversionType printExpression resolveType setActualReceiverType setDepth setExpectedType setFieldIndex traverse resolveMethodBinding receiver selector arguments binding codegenBinding syntheticAccessor expectedType nameSourcePosition actualReceiverType receiverGenericCast valueCast typeArguments genericTypeArguments org.aspectj.org.eclipse.jdt.internal.compiler.ast.MessageSend  exact binding resulting from lookup\r\n  AspectJ Extension - raise visibility\t\t  AspectJ Extension - raise visibility\t\t\t\t\t\t  for generic method invocation (return type inference)\r\n  (start<<32)+end\r\n  extra reference type cast to perform on generic receiver\r\n  extra reference type cast to perform on method returned value\r\n  must verify that exceptions potentially thrown by this expression are caught in the method\r\n  from 1.5 compliant mode on, array#clone() resolves to array type, but codegen to #clone()Object - thus require extra inserted cast\r\n  unboxing: checkcast before conversion\r\n  extra cast needed if method return type is type variable\r\n  set the generic cast after the fact, once the type expectation is fully known (no need for strict cast)\r\n  generate receiver  outer method can be reached through emulation if implicit access\r\n  generate arguments\r\n  methods on types from a privileged aspect.\r\n  interface or annotation type\r\n  actual message invocation\r\n  required cast must occur even if no value is required\r\n  conversion only generated if unboxing\r\n  implicit conversion if necessary\r\n  highlight selector\r\n  .original();\r\n  AspectJ Extension\r\n  if method from parameterized type got found, use the original method at codegen time\r\n  qualified super need emulation always\r\n  the compiler because of privilege?\r\n  one already exists?\r\n  depth is set for both implicit and explicit access (see MethodBinding#canBeSeenBy)\r\n  no change for Object methods\r\n  and not from Object or implicit static method call.\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  will check later on\r\n  due to change of declaring class with receiver type, only identity cast should be notified\r\n  typeChecks all arguments\r\n  resolve type arguments (for generic constructor call)\r\n  will check for null after args are resolved\r\n  typeChecks all arguments\r\n  will check later on\r\n  record a best guess, for clients who need hint about possible method match\r\n  replace args with errors with null type\r\n  shouldn't return generic method outside its context, rather convert it to raw method (175409)\r\n  ignore cases where method is used from within inside itself (e.g. direct recursions)\r\n  record the closest match, for clients who may still need hint about possible method match\r\n  base type cannot receive any message\r\n  AspectJ Extension - moved to helper method\r\n  no resilience on ambiguous\r\n  only steal returnType in cases listed above\r\n  ignore cases where method is used from within inside itself (e.g. direct recursions)\r\n  record the closest match, for clients who may still need hint about possible method match\r\n  static message invoked through receiver? legal but unoptimal (optional warning).\r\n  compute generic cast if necessary\r\n  handle indirect inheritance thru variable secondary bound\r\n  the \"receiver\" must not be a type, in other words, a NameReference that the TC has bound to a Type\r\n  -------message send that are known to fail at compile time-----------\r\n  from 1.5 compliance on, array#clone() returns the array type (but binding still shows Object)\r\n  error scenario only\r\n  flush previous depth if any\r\n  encoded on 8 bits\r\n  AspectJ Extension\r\n /*only exact match*/\r\n","CompletionOnQualifiedAllocationExpression":"resolveType printExpression org.aspectj.org.eclipse.jdt.internal.codeassist.complete.CompletionOnQualifiedAllocationExpression  no need to continue if its an array or base type\r\n  no need to continue if its an array or base type\r\n  handle the anonymous class definition case\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","IBinaryElementValuePair":"getName getValue org.aspectj.org.eclipse.jdt.internal.compiler.env.IBinaryElementValuePair","ASTNode":"nodeClassForType hasNext next remove update size get set add remove newCursor releaseCursor updateCursors memSize listSize getAST getParent getLocationInParent getRoot getStructuralProperty setStructuralProperty internalGetSetIntProperty internalGetSetBooleanProperty internalGetSetObjectProperty internalGetSetChildProperty internalGetChildListProperty structuralPropertiesForType internalStructuralPropertiesForType createPropertyList addProperty reapPropertyList unsupportedIn2 supportedOnlyIn2 setParent delete checkNewChild preReplaceChild postReplaceChild preValueChange postValueChange checkModifiable preLazyInit postLazyInit getProperty setProperty properties getFlags setFlags getNodeType setNodeType getNodeType0 equals hashCode subtreeMatch subtreeMatch0 copySubtree copySubtrees clone clone0 accept accept0 acceptChild acceptChildren getStartPosition getLength setSourceRange toString standardToString appendDebugString appendPrintString stringSize subtreeBytes treeSize memSize checkInvocationArgument checkInvocationArguments concreteStatement isFieldUseDeprecated isImplicitThis isMethodUseDeprecated isSuper isThis isTypeUseDeprecated print printAnnotations printIndent printModifiers resolveAnnotations resolveDeprecatedAnnotations sourceStart sourceEnd toString traverse ANONYMOUS_CLASS_DECLARATION ARRAY_ACCESS ARRAY_CREATION ARRAY_INITIALIZER ARRAY_TYPE ASSERT_STATEMENT ASSIGNMENT BLOCK BOOLEAN_LITERAL BREAK_STATEMENT CAST_EXPRESSION CATCH_CLAUSE CHARACTER_LITERAL CLASS_INSTANCE_CREATION COMPILATION_UNIT CONDITIONAL_EXPRESSION CONSTRUCTOR_INVOCATION CONTINUE_STATEMENT DO_STATEMENT EMPTY_STATEMENT EXPRESSION_STATEMENT FIELD_ACCESS FIELD_DECLARATION FOR_STATEMENT IF_STATEMENT IMPORT_DECLARATION INFIX_EXPRESSION INITIALIZER JAVADOC LABELED_STATEMENT METHOD_DECLARATION METHOD_INVOCATION NULL_LITERAL NUMBER_LITERAL PACKAGE_DECLARATION PARENTHESIZED_EXPRESSION POSTFIX_EXPRESSION PREFIX_EXPRESSION PRIMITIVE_TYPE QUALIFIED_NAME RETURN_STATEMENT SIMPLE_NAME SIMPLE_TYPE SINGLE_VARIABLE_DECLARATION STRING_LITERAL SUPER_CONSTRUCTOR_INVOCATION SUPER_FIELD_ACCESS SUPER_METHOD_INVOCATION SWITCH_CASE SWITCH_STATEMENT SYNCHRONIZED_STATEMENT THIS_EXPRESSION THROW_STATEMENT TRY_STATEMENT TYPE_DECLARATION TYPE_DECLARATION_STATEMENT TYPE_LITERAL VARIABLE_DECLARATION_EXPRESSION VARIABLE_DECLARATION_FRAGMENT VARIABLE_DECLARATION_STATEMENT WHILE_STATEMENT INSTANCEOF_EXPRESSION LINE_COMMENT BLOCK_COMMENT TAG_ELEMENT TEXT_ELEMENT MEMBER_REF METHOD_REF METHOD_REF_PARAMETER ENHANCED_FOR_STATEMENT ENUM_DECLARATION ENUM_CONSTANT_DECLARATION TYPE_PARAMETER PARAMETERIZED_TYPE QUALIFIED_TYPE WILDCARD_TYPE NORMAL_ANNOTATION MARKER_ANNOTATION SINGLE_MEMBER_ANNOTATION MEMBER_VALUE_PAIR ANNOTATION_TYPE_DECLARATION ANNOTATION_TYPE_MEMBER_DECLARATION MODIFIER ast parent UNMODIFIABLE_EMPTY_MAP property1 property2 startPosition length MALFORMED ORIGINAL PROTECT RECOVERED typeAndFlags location CYCLE_RISK NO_CYCLE_RISK MANDATORY OPTIONAL store propertyDescriptor position cursors HEADERS BASE_NODE_SIZE sourceStart sourceEnd Bit1 Bit2 Bit3 Bit4 Bit5 Bit6 Bit7 Bit8 Bit9 Bit10 Bit11 Bit12 Bit13 Bit14 Bit15 Bit16 Bit17 Bit18 Bit19 Bit20 Bit21 Bit22 Bit23 Bit24 Bit25 Bit26 Bit27 Bit28 Bit29 Bit30 Bit31 Bit32 Bit32L Bit33L Bit34L Bit35L Bit36L Bit37L Bit38L Bit39L Bit40L Bit41L Bit42L Bit43L Bit44L Bit45L Bit46L Bit47L Bit48L Bit49L Bit50L Bit51L Bit52L Bit53L Bit54L Bit55L Bit56L Bit57L Bit58L Bit59L Bit60L Bit61L Bit62L Bit63L Bit64L bits ReturnTypeIDMASK OperatorSHIFT OperatorMASK IsReturnedValue UnnecessaryCast DisableUnnecessaryCastCheck GenerateCheckcast UnsafeCast RestrictiveFlagMASK FirstAssignmentToLocal IsImplicitThis DepthSHIFT DepthMASK IsReachable LabelUsed DocumentedFallthrough IsLocalDeclarationReachable IsSubRoutineEscaping IsTryBlockExiting ContainsAssertion IsLocalType IsAnonymousType IsMemberType HasAbstractMethods IsSecondaryType HasBeenGenerated HasLocalType HasBeenResolved ParenthesizedSHIFT ParenthesizedMASK IgnoreNoEffectAssignCheck IsStrictlyAssigned IsCompoundAssigned DiscardEnclosingInstance IsUsefulEmptyStatement UndocumentedEmptyBlock OverridingMethodWithSupercall ErrorInSignature NeedFreeReturn IsDefaultConstructor HasAllMethodBodies IsImplicitUnit InsideJavadoc SuperAccess Empty IsElseIfStatement ThenExit IsSuperType IsVarArgs IgnoreRawTypeCheck IsAnnotationDefaultValue IsNonNull NeededScope OnDemand Used DidResolve IsAnySubRoutineEscaping IsSynchronized BlockExit INVOCATION_ARGUMENT_OK INVOCATION_ARGUMENT_UNCHECKED INVOCATION_ARGUMENT_WILDCARD org.aspectj.org.eclipse.jdt.core.dom.ASTNode org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode org.aspectj.weaver.ast.ASTNode org.aspectj.weaver.ast.ASTNode  the cursor has passed the added or removed element\r\n  $NON-NLS-1$\r\n  delink old child from parent, and link new child to parent\r\n  $NON-NLS-1$\r\n  n.b. setParent will call ast.modifying()\r\n  $NON-NLS-1$\r\n  link new child to parent\r\n  n.b. setParent will call ast.modifying()\r\n  $NON-NLS-1$\r\n  delink old child from parent\r\n  $NON-NLS-1$\r\n  n.b. setParent will call ast.modifying()\r\n  convert null to empty list\r\n  serialize cursor management on this NodeList\r\n  serialize cursor management on this NodeList\r\n  otherwise the node will hang on to needless junk\r\n  there are no cursors to worry about\r\n  candidate has no parent - that's the guy\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  stuff nodeClass at head of list for future ref\r\n  $NON-NLS-1$\r\n  remove nodeClass\r\n  compact\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  node is unparented\r\n  new child is from a different AST\r\n  new child currently has a different parent\r\n  inserting new child would create a cycle\r\n  new child is not of the right type\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  delink old child from parent\r\n  link new child to parent\r\n  link new child to parent\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  ASTNode.this is locked at this point\r\n  newChild is brand new (so no chance of concurrent access)\r\n  turn events back on (they were turned off in corresponding preLazyInit)\r\n  node has no properties at all\r\n  node has only a single property\r\n  otherwise node has table of properties\r\n  we already know this\r\n  node has no properties at all\r\n  node gets its fist property\r\n  we're in luck\r\n  just deleted last property\r\n  node has only a single property\r\n  we already know this\r\n  convert to more flexible representation\r\n  node has two or more properties\r\n  still has two or more properties\r\n  convert to more efficient representation\r\n  check for just one property left\r\n  node has no properties at all\r\n  node has a single property\r\n  node has two or more properties\r\n  property2 is unmodifiable wrapper for map in property1\r\n  equivalent to Object.equals\r\n  begin with the generic pre-visit\r\n  dynamic dispatch to internal method for type-specific visit  end with the generic post-visit\r\n  (the list may be changing under foot)\r\n  but we protect them nevertheless\r\n  toString is called on an instance that is being initialized\r\n  $NON-NLS-1$\r\n  print the subtree by default\r\n  Strings usually have 4 instance fields, one of which is a char[]\r\n  char[] has 2 bytes per character\r\n  return type (operator) | name reference kind (name ref) | add assertion (type decl) | useful empty statement (empty statement)\r\n  return type (operator) | name reference kind (name ref) | has local type (type, method, field decl)\r\n  return type (operator) | name reference kind (name ref) | implicit this (this ref)\r\n  return type (operator) | first assignment to local (name ref,local decl) | undocumented empty block (block, type and method decl)\r\n  value for return (expression) | has all method bodies (unit) | supertype ref (type ref) | resolved (field decl)\r\n  depth (name ref, msg) | ignore need cast check (cast expression) | error in signature (method declaration  depth (name ref, msg) | operator (operator) | need runtime checkcast (cast expression) | label used (labelStatement) | needFreeReturn (AbstractMethodDeclaration)\r\n  depth (name ref, msg) | operator (operator) | unsafe cast (cast expression) | is default constructor (constructor declaration)\r\n  depth (name ref, msg) | operator (operator) | is local type (type decl)\r\n  depth (name ref, msg) | operator (operator) | is anonymous type (type decl)\r\n  depth (name ref, msg) | operator (operator) | is member type (type decl)\r\n  depth (name ref, msg) | operator (operator) | has abstract methods (type decl)\r\n  depth (name ref, msg) | is secondary type (type decl)\r\n  strictly assigned (reference lhs) | discard enclosing instance (explicit constr call) | hasBeenGenerated (type decl)\r\n  is unnecessary cast (expression) | is varargs (type ref) | isSubRoutineEscaping (try statement) | superAccess (javadoc allocation expression  in javadoc comment (name ref, type ref, msg)\r\n  compound assigned (reference lhs)\r\n  non null (expression) | onDemand (import reference)\r\n  didResolve (parameterized qualified type ref  parenthesis count (expression) | used (import reference)\r\n  parenthesis count (expression)\r\n  parenthesis count (expression)\r\n  parenthesis count (expression)\r\n  parenthesis count (expression)\r\n  parenthesis count (expression)\r\n  parenthesis count (expression)\r\n  parenthesis count (expression)\r\n  elseif (if statement) | try block exit (try statement) | fall-through (case statement) | ignore no effect assign (expression ref) | needScope (for statement) | isAnySubRoutineEscaping (return statement) | blockExit (synchronized statement)\r\n  local declaration reachable (local decl) | ignore raw type check (type ref) | discard entire assignment (assignment) | isSynchronized (return statement) | thenExit (if statement)\r\n  reachable (statement)\r\n  reachable by default\r\n  for operators\r\n  Bit7 -> Bit12\r\n  6 bits for operator ID\r\n  for binary expressions\r\n  for cast expressions\r\n  for name references\r\n  for name refs or local decls\r\n  for this reference\r\n  Bit6 -> Bit13\r\n  8 bits for actual depth value (max. 255)\r\n  for statements\r\n  local decls\r\n  try statements\r\n  for type declaration\r\n  used to test for anonymous\r\n  local member do not know it is local at parse time (need to look at binding)\r\n  used to promote abstract enums\r\n  used to test for secondary\r\n  cannot conflict with AddAssertionMASK\r\n  field decl only (to handle forward references)\r\n  Bit22 -> Bit29\r\n  8 bits for parenthesis count value (max. 255)\r\n  set only for true assignments, as opposed to compound ones\r\n  set only for compound assignments, as opposed to other ones\r\n  used for codegen\r\n  for empty statement\r\n  for block and method declaration\r\n  for initializer and method declaration\r\n  abstract method declaration\r\n  for constructor declaration\r\n  for compilation unit\r\n  for references in Javadoc comments\r\n  for javadoc allocation expression  for javadoc return statement\r\n  for if statement\r\n  for type reference\r\n  for array initializer\r\n  for null reference analysis\r\n  for for statement\r\n  for import reference\r\n  for parameterized qualified  for return statement\r\n  for synchronized statement\r\n  constants used when checking invocation arguments\r\n  lub wildcards are tolerated\r\n  4 possibilities exist for a call to the vararg method foo(int i, long ... value) : foo(1), foo(1, 2), foo(1, 2, 3, 4) & foo(1, new long[] {1, 2})\r\n  vararg argument was provided\r\n  single element was provided for vararg parameter\r\n  70056\r\n  no element was supplied for vararg parameter\r\n  ignore cases where field is used from within inside itself\r\n  inside same unit - no report\r\n  if context is deprecated, may avoid reporting\r\n  ignore cases where method is used from within inside itself (e.g. direct recursions)\r\n  warnings, one on type, the other on constructor), because of the 'super()' case.\r\n  Caveat: this was not the case when access restriction funtion was added.\r\n  inside same unit - no report\r\n  non explicit use and non explicitly deprecated - no report\r\n  if context is deprecated, may avoid reporting\r\n  ignore cases where type is used from within inside itself\r\n  force annotations resolution before deciding whether the type may be deprecated\r\n  inside same unit - no report\r\n  if context is deprecated, may avoid reporting\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  new code:\r\n  null if receiver is a package binding\r\n  only local and field can share annnotations\r\n  need to fill the instances array\r\n  report it only once\r\n  check duplicate annotations\r\n  only resolve type name if 'Deprecated' last token\r\n /* (non-Javadoc)\r\n\t\t\t * Method declared on <code>Iterator</code>.\r\n\t\t\t */\r\n /* (non-Javadoc)\r\n\t\t\t * Method declared on <code>Iterator</code>.\r\n\t\t\t */\r\n /* (non-Javadoc)\r\n\t\t\t * Method declared on <code>Iterator</code>.\r\n\t\t\t */\r\n /* (non-javadoc)\r\n\t\t * @see java.util.AbstractCollection#size()\r\n\t\t */\r\n /* (non-javadoc)\r\n\t\t * @see AbstractList#get(int)\r\n\t\t */\r\n /* (non-javadoc)\r\n\t\t * @see List#set(int, java.lang.Object)\r\n\t\t */\r\n /* (non-javadoc)\r\n\t\t * @see List#add(int, java.lang.Object)\r\n\t\t */\r\n /* (non-javadoc)\r\n\t\t * @see List#remove(int)\r\n\t\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * This makes it consistent with the fact that a equals methods has been provided.\r\n\t * @see java.lang.Object#hashCode()\r\n\t */\r\n /* Answer true if the method use is considered deprecated.\r\n\t* An access in the same compilation unit is allowed.\r\n\t*/\r\n /* Answer true if the type use is considered deprecated.\r\n\t* An access in the same compilation unit is allowed.\r\n\t*/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","CodeSnippetParser":"classInstanceCreation consumeClassDeclaration consumeClassHeaderName1 consumeEmptyStatement consumeEnhancedForStatement consumeExpressionStatement consumeFieldAccess consumeInterfaceHeaderName1 consumeInternalCompilationUnit consumeInternalCompilationUnitWithTypes consumeLocalVariableDeclarationStatement consumeMethodDeclaration consumeMethodInvocationName consumeMethodInvocationSuper consumePrimaryNoNewArrayThis consumeStatementBreak consumeStatementBreakWithLabel consumeStatementCatch consumeStatementContinue consumeStatementContinueWithLabel consumeStatementDo consumeStatementFor consumeStatementIfNoElse consumeStatementIfWithElse consumeStatementLabel consumeStatementReturn consumeStatementSwitch consumeStatementSynchronized consumeStatementThrow consumeStatementTry consumeStatementWhile endParse getUnspecifiedReference getUnspecifiedReferenceOptimized ignoreExpressionAssignment isTopLevelType newMessageSend recordLastStatementIfNeeded reportSyntaxErrors resumeOnSyntaxError codeSnippetStart codeSnippetEnd evaluationContext hasRecoveredOnExpression lastStatement lineSeparatorLength problemCountBeforeRecovery org.aspectj.org.eclipse.jdt.internal.eval.CodeSnippetParser  end of last top level statement\r\n  mark initializers with local type mark if needed\r\n  NO ClassBody\r\n  the position has been stored explicitly\r\n  will be created and added by the TC (see createsInternalConstructorWithBinding)\r\n  ClassHeaderName ::= Modifiersopt 'class' 'Identifier'\r\n  Record that the block has a declaration for local types\r\n  highlight the name of the type\r\n  compute the declaration source too\r\n  'class' and 'interface' push an int position\r\n  will be updated when reading super-interfaces\r\n  recovery\r\n  javadoc\r\n  fieldreference begins at the this\r\n  optimize push  considerates the fieldReference beginning at the 'super' ....\r\n  InterfaceHeaderName ::= Modifiersopt 'interface' 'Identifier'\r\n  Record that the block has a declaration for local types\r\n  highlight the name of the type\r\n  compute the declaration source too\r\n  'class' and 'interface' push an int position\r\n  will be updated when reading super-interfaces\r\n  is recovering\r\n  recovery\r\n  javadoc\r\n  consume type declarations\r\n  now we know that we have a method declaration at the top of the ast stack\r\n  support have to be defined at toplevel only\r\n  n local decls+ try statement\r\n  generate n local variable declarations: [type] [name] = val$[name];\r\n  try block\r\n  snippet statements\r\n  finally block\r\n  14838\r\n  14838\r\n  support have to be defined at toplevel only\r\n  -> must filter out one of them, the earliest one is less accurate\r\n  skip unmatched bracket problems\r\n  skip unmatched bracket problems\r\n  discard problem\r\n  discard problem\r\n  flush previously recorded problems\r\n  consume expresion as a return statement\r\n  the generated field for 'this' and the method\r\n  Qualified variable reference\r\n  sourceStart\r\n  sourceEnd\r\n  single variable reference\r\n  single variable reference\r\n  sourceStart\r\n  sourceEnd\r\n  stop after expression\r\n  TokenNameREMAINDER;   no reentering inside expression recovery\r\n  e.g. \"return foo(a a); 1+3\"\r\n  no statement reduced prior to error point\r\n  reposition for expression parsing\r\n  stop after expression\r\n  reset stacks in consistent state\r\n  go for the expression\r\n /* recovery */\r\n /* recovery */\r\n /* recovery */\r\n /* recovery */\r\n /* recovery */\r\n /* recovery */\r\n /* recovery */\r\n /* recovery */\r\n /* recovery */\r\n /* recovery */\r\n /* recovery */\r\n /* recovery */\r\n /* recovery */\r\n /* recovery */\r\n /* recovery */\r\n /* recovery */\r\n /* recovery */\r\n /* recovery */\r\n /* recovery */\r\n /* recovery */\r\n /* recovery */\r\n /*14838*/\r\n /*14838*/\r\n /* recovery */\r\n /*\r\n * A syntax error was detected. If a method is being parsed, records the number of errors and\r\n * attempts to restart from the last statement by going for an expression.\r\n */\r\n","ForStatement":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty internalGetChildListProperty getNodeType0 clone0 subtreeMatch0 accept0 initializers getExpression setExpression updaters getBody setBody memSize treeSize analyseCode generateCode printStatement resolve traverse INITIALIZERS_PROPERTY EXPRESSION_PROPERTY UPDATERS_PROPERTY BODY_PROPERTY PROPERTY_DESCRIPTORS initializers optionalConditionExpression updaters body initializations condition increments action scope breakLabel continueLabel preCondInitStateIndex preIncrementsInitStateIndex condIfTrueInitStateIndex mergedInitStateIndex org.aspectj.org.eclipse.jdt.core.dom.ForStatement org.aspectj.org.eclipse.jdt.internal.compiler.ast.ForStatement  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  scope is positioned either to a new scope, or to the \"upper\"scope (see resolveType)\r\n  for local variables table attributes\r\n  remember useful empty statement\r\n  process the initializations\r\n  process the condition\r\n  process the action\r\n  code generation can be optimized when no need to continue in the loop\r\n  for(;false;p());\r\n  for increments\r\n  recover null inits from before condition analysis\r\n  nulls checks\r\n  recover upstream null info\r\n  end of loop\r\n  generate the initializations\r\n  May loose some local variable initializations : affecting the local variable attributes\r\n  label management\r\n  jump over the actionBlock\r\n  insert all locals initialized inside the condition into the action generated prior to the condition\r\n  Required to fix 1PR0XVS: LFRE:WINNT - Compiler: variable table for method appears incorrect\r\n  generate the loop action\r\n  May loose some local variable initializations : affecting the local variable attributes\r\n  generate the increments for next iteration\r\n  May loose some local variable initializations : affecting the local variable attributes\r\n  generate the condition\r\n  continuation point\r\n  May loose some local variable initializations : affecting the local variable attributes\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  inits\r\n  $NON-NLS-1$\r\n  cond\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  updates\r\n  $NON-NLS-1$\r\n  block\r\n  use the scope that will hold the init declarations\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","ParenthesizedExpression":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getExpression setExpression memSize treeSize EXPRESSION_PROPERTY PROPERTY_DESCRIPTORS expression org.aspectj.org.eclipse.jdt.core.dom.ParenthesizedExpression  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  lazy init must be thread-safe for readers\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","LongConstant":"fromValue byteValue charValue doubleValue floatValue intValue longValue shortValue stringValue toString typeID ZERO value org.aspectj.org.eclipse.jdt.internal.compiler.impl.LongConstant  implicit cast to return type\r\n  implicit cast to return type\r\n  spec 15.17.11\r\n  $NON-NLS-1$\r\n","FieldReference":"analyseAssignment analyseCode analyseCode computeConversion fieldBinding generateAssignment generateCode generateCompoundAssignment generatePostIncrement genericTypeArguments isSuperAccess isTypeAccess manageSyntheticAccessIfNecessary nullStatus optimizedBooleanConstant postConversionType printExpression resolveType setActualReceiverType setDepth setFieldIndex traverse READ WRITE receiver token binding codegenBinding syntheticAccessors nameSourcePosition receiverType genericCast org.aspectj.org.eclipse.jdt.internal.compiler.ast.FieldReference  exact binding resulting from lookup\r\n  actual binding used for code generation (if no synthetic accessor)\r\n  [0]=read accessor [1]=write accessor\r\n  (start<<32)+end\r\n  by default the position are the one of the field (not true for super access)\r\n  check the variable part is initialized if blank final\r\n  compound assignment extra work\r\n  (this).x is forbidden\r\n  assigning a final field outside an initializer or constructor or wrong reference\r\n  in a context where it can be assigned?\r\n  check if assigning a final field\r\n  unboxing: checkcast before conversion\r\n  extra cast needed if method return type is type variable\r\n  set the generic cast after the fact, once the type expectation is fully known (no need for strict cast)\r\n  perform null check\r\n  if no valueRequired, still need possible side-effects of <clinit> invocation, if field belongs to different class\r\n  required cast must occur even if no value is required\r\n  conversion only generated if unboxing\r\n  array length\r\n  could occur if !valueRequired but compliance >= 1.4\r\n  promote the array reference to the suitable operation type\r\n  prefix operation\r\n  generate the increment value (will by itself  be promoted to the operation value)\r\n  perform the operation\r\n  cast the value back to the array reference type\r\n  Stack:  [owner][old field value]  ---> [old field value][owner][old field value]\r\n  System.err.println(\"manage synthetic: \" + this + \" with \" + binding + \", \" + binding.getClass());\r\n  End AspectJ Extension\r\n  if field from parameterized type got found, use the original field at codegen time\r\n  qualified super need emulation always\r\n  array.length\r\n  no change for Object fields\r\n  and not from Object or implicit static field access.\r\n  always ignore receiver cast, since may affect constant pool reference\r\n  will check later on\r\n  due to change of declaring class with receiver type, only identity cast should be notified\r\n  the case receiverType.isArrayType and token = 'length' is handled by the scope API\r\n  handle indirect inheritance thru variable secondary bound\r\n  static field accessed through receiver? legal but unoptimal (optional warning)\r\n  perform capture conversion if read access\r\n  flush previous depth if any\r\n  encoded on 8 bits\r\n /*\r\n * No need to emulate access to protected fields since not implicitly accessed\r\n */\r\n","JavaDebugOptionsPanel":"loadOptions saveOptions jbInit createDebugContents createDebugEntry createBorders addBordersToPanel debugOptions preserveOptions serialVersionUID parentPanel debugEtchedBorder debugTitleBorder debugCompoundBorder debugPanel debugBox javaBuildOptions debugComboBoxes org.aspectj.ajde.ui.javaoptions.JavaDebugOptionsPanel /*String --> JComboBox*/\r\n","InferenceContext":"checkRawSubstitution getSubstitutes hasUnresolvedTypeArgument recordSubstitute toString collectedSubstitutes genericMethod depth status expectedType hasExplicitExpectedType substitutes FAILED RAW_SUBSTITUTION org.aspectj.org.eclipse.jdt.internal.compiler.lookup.InferenceContext  indicates whether the expectedType (if set) was explicit in code, or set by default\r\n  only at first level, during inference from arguments\r\n  }\r\n  already there\r\n  no free spot found, need to grow by one\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","Reference":"analyseAssignment analyseCode fieldBinding fieldStore generateAssignment generateCompoundAssignment generatePostIncrement org.aspectj.org.eclipse.jdt.internal.compiler.ast.Reference  (ref.bits & BindingIds.FIELD != 0)()\r\n  Stack:  [owner][new field value]  ---> [new field value][owner][new field value]\r\n","Constants":"MAJOR_1_1 MINOR_1_1 MAJOR_1_2 MINOR_1_2 MAJOR_1_3 MINOR_1_3 MAJOR_1_4 MINOR_1_4 MAJOR_1_5 MINOR_1_5 MAJOR_1_6 MINOR_1_6 MAJOR MINOR MAX_SHORT MAX_BYTE ACC_PUBLIC ACC_PRIVATE ACC_PROTECTED ACC_STATIC ACC_FINAL ACC_SYNCHRONIZED ACC_VOLATILE ACC_TRANSIENT ACC_NATIVE ACC_INTERFACE ACC_ABSTRACT ACC_STRICT ACC_ANNOTATION ACC_ENUM ACC_BRIDGE ACC_VARARGS ACC_SUPER MAX_ACC_FLAG ACCESS_NAMES CONSTANT_Utf8 CONSTANT_Integer CONSTANT_Float CONSTANT_Long CONSTANT_Double CONSTANT_Class CONSTANT_Fieldref CONSTANT_String CONSTANT_Methodref CONSTANT_InterfaceMethodref CONSTANT_NameAndType CONSTANT_NAMES STATIC_INITIALIZER_NAME CONSTRUCTOR_NAME INTERFACES_IMPLEMENTED_BY_ARRAYS MAX_CP_ENTRIES MAX_CODE_SIZE NOP ACONST_NULL ICONST_M1 ICONST_0 ICONST_1 ICONST_2 ICONST_3 ICONST_4 ICONST_5 LCONST_0 LCONST_1 FCONST_0 FCONST_1 FCONST_2 DCONST_0 DCONST_1 BIPUSH SIPUSH LDC LDC_W LDC2_W ILOAD LLOAD FLOAD DLOAD ALOAD ILOAD_0 ILOAD_1 ILOAD_2 ILOAD_3 LLOAD_0 LLOAD_1 LLOAD_2 LLOAD_3 FLOAD_0 FLOAD_1 FLOAD_2 FLOAD_3 DLOAD_0 DLOAD_1 DLOAD_2 DLOAD_3 ALOAD_0 ALOAD_1 ALOAD_2 ALOAD_3 IALOAD LALOAD FALOAD DALOAD AALOAD BALOAD CALOAD SALOAD ISTORE LSTORE FSTORE DSTORE ASTORE ISTORE_0 ISTORE_1 ISTORE_2 ISTORE_3 LSTORE_0 LSTORE_1 LSTORE_2 LSTORE_3 FSTORE_0 FSTORE_1 FSTORE_2 FSTORE_3 DSTORE_0 DSTORE_1 DSTORE_2 DSTORE_3 ASTORE_0 ASTORE_1 ASTORE_2 ASTORE_3 IASTORE LASTORE FASTORE DASTORE AASTORE BASTORE CASTORE SASTORE POP POP2 DUP DUP_X1 DUP_X2 DUP2 DUP2_X1 DUP2_X2 SWAP IADD LADD FADD DADD ISUB LSUB FSUB DSUB IMUL LMUL FMUL DMUL IDIV LDIV FDIV DDIV IREM LREM FREM DREM INEG LNEG FNEG DNEG ISHL LSHL ISHR LSHR IUSHR LUSHR IAND LAND IOR LOR IXOR LXOR IINC I2L I2F I2D L2I L2F L2D F2I F2L F2D D2I D2L D2F I2B INT2BYTE I2C INT2CHAR I2S INT2SHORT LCMP FCMPL FCMPG DCMPL DCMPG IFEQ IFNE IFLT IFGE IFGT IFLE IF_ICMPEQ IF_ICMPNE IF_ICMPLT IF_ICMPGE IF_ICMPGT IF_ICMPLE IF_ACMPEQ IF_ACMPNE GOTO JSR RET TABLESWITCH LOOKUPSWITCH IRETURN LRETURN FRETURN DRETURN ARETURN RETURN GETSTATIC PUTSTATIC GETFIELD PUTFIELD INVOKEVIRTUAL INVOKESPECIAL INVOKENONVIRTUAL INVOKESTATIC INVOKEINTERFACE NEW NEWARRAY ANEWARRAY ARRAYLENGTH ATHROW CHECKCAST INSTANCEOF MONITORENTER MONITOREXIT WIDE MULTIANEWARRAY IFNULL IFNONNULL GOTO_W JSR_W BREAKPOINT LDC_QUICK LDC_W_QUICK LDC2_W_QUICK GETFIELD_QUICK PUTFIELD_QUICK GETFIELD2_QUICK PUTFIELD2_QUICK GETSTATIC_QUICK PUTSTATIC_QUICK GETSTATIC2_QUICK PUTSTATIC2_QUICK INVOKEVIRTUAL_QUICK INVOKENONVIRTUAL_QUICK INVOKESUPER_QUICK INVOKESTATIC_QUICK INVOKEINTERFACE_QUICK INVOKEVIRTUALOBJECT_QUICK NEW_QUICK ANEWARRAY_QUICK MULTIANEWARRAY_QUICK CHECKCAST_QUICK INSTANCEOF_QUICK INVOKEVIRTUAL_QUICK_W GETFIELD_QUICK_W PUTFIELD_QUICK_W IMPDEP1 IMPDEP2 PUSH SWITCH UNDEFINED UNPREDICTABLE RESERVED ILLEGAL_OPCODE ILLEGAL_TYPE T_BOOLEAN T_CHAR T_FLOAT T_DOUBLE T_BYTE T_SHORT T_INT T_LONG T_VOID T_ARRAY T_OBJECT T_REFERENCE T_UNKNOWN T_ADDRESS TYPE_NAMES CLASS_TYPE_NAMES SHORT_TYPE_NAMES PUSH_INST CONSTANT_INST LOADCLASS_INST CP_INST INDEXED LOAD_INST LV_INST POP_INST STORE_INST STACK_INST BRANCH_INSTRUCTION TARGETER_INSTRUCTION NEGATABLE IF_INST JSR_INSTRUCTION RET_INST EXCEPTION_THROWER iLen UNDEFINED_LENGTH VARIABLE_LENGTH stackEntriesProduced types instFlags instExcs _unused TYPE_OF_OPERANDS OPCODE_NAMES CONSUME_STACK ATTR_UNKNOWN ATTR_SOURCE_FILE ATTR_CONSTANT_VALUE ATTR_CODE ATTR_EXCEPTIONS ATTR_LINE_NUMBER_TABLE ATTR_LOCAL_VARIABLE_TABLE ATTR_INNER_CLASSES ATTR_SYNTHETIC ATTR_DEPRECATED ATTR_PMG ATTR_SIGNATURE ATTR_STACK_MAP ATTR_RUNTIME_VISIBLE_ANNOTATIONS ATTR_RUNTIME_INVISIBLE_ANNOTATIONS ATTR_RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS ATTR_RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS ATTR_LOCAL_VARIABLE_TYPE_TABLE ATTR_ENCLOSING_METHOD ATTR_ANNOTATION_DEFAULT KNOWN_ATTRIBUTES ATTRIBUTE_NAMES ITEM_Bogus ITEM_Integer ITEM_Float ITEM_Double ITEM_Long ITEM_Null ITEM_InitObject ITEM_Object ITEM_NewObject ITEM_NAMES AOP_USER_XML AOP_AJC_XML AOP_OSGI_XML ACC_BRIDGE ACC_VARARGS RUNTIME_LEVEL_12 RUNTIME_LEVEL_15 RUNTIME_LEVEL_DEFAULT MAJOR_1_1 MINOR_1_1 MAJOR_1_2 MINOR_1_2 MAJOR_1_3 MINOR_1_3 MAJOR_1_4 MINOR_1_4 MAJOR_1_5 MINOR_1_5 MAJOR_1_6 MINOR_1_6 MAJOR MINOR MAX_SHORT MAX_BYTE ACC_PUBLIC ACC_PRIVATE ACC_PROTECTED ACC_STATIC ACC_FINAL ACC_SYNCHRONIZED ACC_VOLATILE ACC_TRANSIENT ACC_NATIVE ACC_INTERFACE ACC_ABSTRACT ACC_STRICT ACC_ANNOTATION ACC_ENUM ACC_BRIDGE ACC_VARARGS ACC_SUPER MAX_ACC_FLAG ACCESS_NAMES CONSTANT_Utf8 CONSTANT_Integer CONSTANT_Float CONSTANT_Long CONSTANT_Double CONSTANT_Class CONSTANT_Fieldref CONSTANT_String CONSTANT_Methodref CONSTANT_InterfaceMethodref CONSTANT_NameAndType CONSTANT_NAMES STATIC_INITIALIZER_NAME CONSTRUCTOR_NAME INTERFACES_IMPLEMENTED_BY_ARRAYS MAX_CP_ENTRIES MAX_CODE_SIZE NOP ACONST_NULL ICONST_M1 ICONST_0 ICONST_1 ICONST_2 ICONST_3 ICONST_4 ICONST_5 LCONST_0 LCONST_1 FCONST_0 FCONST_1 FCONST_2 DCONST_0 DCONST_1 BIPUSH SIPUSH LDC LDC_W LDC2_W ILOAD LLOAD FLOAD DLOAD ALOAD ILOAD_0 ILOAD_1 ILOAD_2 ILOAD_3 LLOAD_0 LLOAD_1 LLOAD_2 LLOAD_3 FLOAD_0 FLOAD_1 FLOAD_2 FLOAD_3 DLOAD_0 DLOAD_1 DLOAD_2 DLOAD_3 ALOAD_0 ALOAD_1 ALOAD_2 ALOAD_3 IALOAD LALOAD FALOAD DALOAD AALOAD BALOAD CALOAD SALOAD ISTORE LSTORE FSTORE DSTORE ASTORE ISTORE_0 ISTORE_1 ISTORE_2 ISTORE_3 LSTORE_0 LSTORE_1 LSTORE_2 LSTORE_3 FSTORE_0 FSTORE_1 FSTORE_2 FSTORE_3 DSTORE_0 DSTORE_1 DSTORE_2 DSTORE_3 ASTORE_0 ASTORE_1 ASTORE_2 ASTORE_3 IASTORE LASTORE FASTORE DASTORE AASTORE BASTORE CASTORE SASTORE POP POP2 DUP DUP_X1 DUP_X2 DUP2 DUP2_X1 DUP2_X2 SWAP IADD LADD FADD DADD ISUB LSUB FSUB DSUB IMUL LMUL FMUL DMUL IDIV LDIV FDIV DDIV IREM LREM FREM DREM INEG LNEG FNEG DNEG ISHL LSHL ISHR LSHR IUSHR LUSHR IAND LAND IOR LOR IXOR LXOR IINC I2L I2F I2D L2I L2F L2D F2I F2L F2D D2I D2L D2F I2B INT2BYTE I2C INT2CHAR I2S INT2SHORT LCMP FCMPL FCMPG DCMPL DCMPG IFEQ IFNE IFLT IFGE IFGT IFLE IF_ICMPEQ IF_ICMPNE IF_ICMPLT IF_ICMPGE IF_ICMPGT IF_ICMPLE IF_ACMPEQ IF_ACMPNE GOTO JSR RET TABLESWITCH LOOKUPSWITCH IRETURN LRETURN FRETURN DRETURN ARETURN RETURN GETSTATIC PUTSTATIC GETFIELD PUTFIELD INVOKEVIRTUAL INVOKESPECIAL INVOKENONVIRTUAL INVOKESTATIC INVOKEINTERFACE NEW NEWARRAY ANEWARRAY ARRAYLENGTH ATHROW CHECKCAST INSTANCEOF MONITORENTER MONITOREXIT WIDE MULTIANEWARRAY IFNULL IFNONNULL GOTO_W JSR_W BREAKPOINT LDC_QUICK LDC_W_QUICK LDC2_W_QUICK GETFIELD_QUICK PUTFIELD_QUICK GETFIELD2_QUICK PUTFIELD2_QUICK GETSTATIC_QUICK PUTSTATIC_QUICK GETSTATIC2_QUICK PUTSTATIC2_QUICK INVOKEVIRTUAL_QUICK INVOKENONVIRTUAL_QUICK INVOKESUPER_QUICK INVOKESTATIC_QUICK INVOKEINTERFACE_QUICK INVOKEVIRTUALOBJECT_QUICK NEW_QUICK ANEWARRAY_QUICK MULTIANEWARRAY_QUICK CHECKCAST_QUICK INSTANCEOF_QUICK INVOKEVIRTUAL_QUICK_W GETFIELD_QUICK_W PUTFIELD_QUICK_W IMPDEP1 IMPDEP2 PUSH SWITCH UNDEFINED UNPREDICTABLE RESERVED ILLEGAL_OPCODE ILLEGAL_TYPE T_BOOLEAN T_CHAR T_FLOAT T_DOUBLE T_BYTE T_SHORT T_INT T_LONG T_VOID T_ARRAY T_OBJECT T_REFERENCE T_UNKNOWN T_ADDRESS TYPE_NAMES CLASS_TYPE_NAMES SHORT_TYPE_NAMES PUSH_INST CONSTANT_INST LOADCLASS_INST CP_INST INDEXED LOAD_INST LV_INST POP_INST STORE_INST STACK_INST BRANCH_INSTRUCTION TARGETER_INSTRUCTION NEGATABLE IF_INST JSR_INSTRUCTION RET_INST EXCEPTION_THROWER iLen UNDEFINED_LENGTH VARIABLE_LENGTH stackEntriesProduced types instFlags instExcs _unused TYPE_OF_OPERANDS OPCODE_NAMES CONSUME_STACK ATTR_UNKNOWN ATTR_SOURCE_FILE ATTR_CONSTANT_VALUE ATTR_CODE ATTR_EXCEPTIONS ATTR_LINE_NUMBER_TABLE ATTR_LOCAL_VARIABLE_TABLE ATTR_INNER_CLASSES ATTR_SYNTHETIC ATTR_DEPRECATED ATTR_PMG ATTR_SIGNATURE ATTR_STACK_MAP ATTR_RUNTIME_VISIBLE_ANNOTATIONS ATTR_RUNTIME_INVISIBLE_ANNOTATIONS ATTR_RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS ATTR_RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS ATTR_LOCAL_VARIABLE_TYPE_TABLE ATTR_ENCLOSING_METHOD ATTR_ANNOTATION_DEFAULT KNOWN_ATTRIBUTES ATTRIBUTE_NAMES ITEM_Bogus ITEM_Integer ITEM_Float ITEM_Double ITEM_Long ITEM_Null ITEM_InitObject ITEM_Object ITEM_NewObject ITEM_NAMES AOP_USER_XML AOP_AJC_XML AOP_OSGI_XML ACC_BRIDGE ACC_VARARGS RUNTIME_LEVEL_12 RUNTIME_LEVEL_15 RUNTIME_LEVEL_DEFAULT org.aspectj.apache.bcel.Constants org.aspectj.bridge.Constants org.aspectj.weaver.Constants org.aspectj.apache.bcel.Constants org.aspectj.bridge.Constants org.aspectj.weaver.Constants  Major and minor version of the code\r\n  Defaults\r\n  2^16 - 1\r\n  2^8 - 1\r\n  Applies to classes compiled by new compilers only\r\n  bytes\r\n  Old notion\r\n  Old notion\r\n  Old notion\r\n  Old name in JDK 1.0\r\n  -1;\r\n  -2;\r\n  Non-standard\r\n  Deprecated\r\n  Non-standard\r\n  Non-standard\r\n  Non-standard\r\n  Non-standard\r\n  Non-standard\r\n  Non-standard\r\n  Non-standard\r\n  Non-standard\r\n  Non-standard\r\n  load instruction\r\n  local variable instruction\r\n  INSTRUCTION_FLAGS - set for all\r\n  the next five could be 'wide' prefixed and so have longer lengths\r\n  the next five could be 'wide' prefixed and so have longer lengths\r\n  stack instructions\r\n  TODO fixme - aren't these two push  TODO fixme - aren't these two push  branching instructions\r\n  fixme these class arrays should be constants\r\n  fixme i think this is a\r\n  checkcast >\r\n  nop > dconst_1\r\n  bipush > lload_1\r\n  lload_2 > laload\r\n  faload > lstore_0\r\n  lstore_1 > iastore\r\n  lastore > swap\r\n  iadd > ddiv\r\n  irem > land\r\n  ior > d2l\r\n  d2f > if_icmpeq\r\n  if_icmpne > dreturn\r\n  areturn > athrow\r\n  . = varies in length,   . = varies in length,   checkcast >\r\n  nop > dconst_1\r\n  bipush > lload_1\r\n  lload_2 > laload\r\n  faload > lstore_0\r\n  lstore_1 > iastore\r\n  lastore > swap\r\n  iadd > ddiv\r\n  irem > land\r\n  ior > d2l\r\n  d2f > if_icmpeq\r\n  if_icmpne > dreturn\r\n  areturn > athrow\r\n  Attributes and their corresponding names.\r\n  Default for 1.5.0\r\n  Major and minor version of the code\r\n  Defaults\r\n  2^16 - 1\r\n  2^8 - 1\r\n  Applies to classes compiled by new compilers only\r\n  bytes\r\n  Old notion\r\n  Old notion\r\n  Old notion\r\n  Old name in JDK 1.0\r\n  -1;\r\n  -2;\r\n  Non-standard\r\n  Deprecated\r\n  Non-standard\r\n  Non-standard\r\n  Non-standard\r\n  Non-standard\r\n  Non-standard\r\n  Non-standard\r\n  Non-standard\r\n  Non-standard\r\n  Non-standard\r\n  load instruction\r\n  local variable instruction\r\n  INSTRUCTION_FLAGS - set for all\r\n  the next five could be 'wide' prefixed and so have longer lengths\r\n  the next five could be 'wide' prefixed and so have longer lengths\r\n  stack instructions\r\n  TODO fixme - aren't these two push  TODO fixme - aren't these two push  branching instructions\r\n  fixme these class arrays should be constants\r\n  fixme i think this is a\r\n  checkcast >\r\n  nop > dconst_1\r\n  bipush > lload_1\r\n  lload_2 > laload\r\n  faload > lstore_0\r\n  lstore_1 > iastore\r\n  lastore > swap\r\n  iadd > ddiv\r\n  irem > land\r\n  ior > d2l\r\n  d2f > if_icmpeq\r\n  if_icmpne > dreturn\r\n  areturn > athrow\r\n  . = varies in length,   . = varies in length,   checkcast >\r\n  nop > dconst_1\r\n  bipush > lload_1\r\n  lload_2 > laload\r\n  faload > lstore_0\r\n  lstore_1 > iastore\r\n  lastore > swap\r\n  iadd > ddiv\r\n  irem > land\r\n  ior > d2l\r\n  d2f > if_icmpeq\r\n  if_icmpne > dreturn\r\n  areturn > athrow\r\n  Attributes and their corresponding names.\r\n  Default for 1.5.0\r\n /* nop */\r\n /* aconst_null */\r\n /* iconst_m1 */\r\n /* iconst_0 */\r\n /* iconst_1 */\r\n /* iconst_2 */\r\n /* iconst_3 */\r\n /* iconst_4 */\r\n /* iconst_5 */\r\n /* lconst_0 */\r\n /* lconst_1 */\r\n /* fconst_0 */\r\n /* fconst_1 */\r\n /* fconst_2 */\r\n /* dconst_0 */\r\n /* dconst_1 */\r\n /* bipush */\r\n /* sipush */\r\n /* ldc */\r\n /* ldc_w */\r\n /* ldc2_w */\r\n /* iload */\r\n /* lload */\r\n /* fload */\r\n /* dload */\r\n /* aload */\r\n /* iload_0 */\r\n /* iload_1 */\r\n /* iload_2 */\r\n /* iload_3 */\r\n /* lload_0 */\r\n /* lload_1 */\r\n /* lload_2 */\r\n /* lload_3 */\r\n /* fload_0 */\r\n /* fload_1 */\r\n /* fload_2 */\r\n /* fload_3 */\r\n /* dload_0 */\r\n /* dload_1 */\r\n /* dload_2 */\r\n /* dload_3 */\r\n /* aload_0 */\r\n /* aload_1 */\r\n /* aload_2 */\r\n /* aload_3 */\r\n /* iaload */\r\n /* laload */\r\n /* faload */\r\n /* daload */\r\n /* aaload */\r\n /* baload */\r\n /* caload */\r\n /* saload */\r\n /* istore */\r\n /* lstore */\r\n /* fstore */\r\n /* dstore */\r\n /* astore */\r\n /* istore_0 */\r\n /* istore_1 */\r\n /* istore_2 */\r\n /* istore_3 */\r\n /* lstore_0 */\r\n /* lstore_1 */\r\n /* lstore_2 */\r\n /* lstore_3 */\r\n /* fstore_0 */\r\n /* fstore_1 */\r\n /* fstore_2 */\r\n /* fstore_3 */\r\n /* dstore_0 */\r\n /* dstore_1 */\r\n /* dstore_2 */\r\n /* dstore_3 */\r\n /* astore_0 */\r\n /* astore_1 */\r\n /* astore_2 */\r\n /* astore_3 */\r\n /* iastore */\r\n /* lastore */\r\n /* fastore */\r\n /* dastore */\r\n /* aastore */\r\n /* bastore */\r\n /* castore */\r\n /* sastore */\r\n /* pop */\r\n /* pop2 */\r\n /* dup */\r\n /* dup_x1 */\r\n /* dup_x2 */\r\n /* dup2 */\r\n /* dup2_x1 */\r\n /* dup2_x2 */\r\n /* swap */\r\n /* iadd */\r\n /* ladd */\r\n /* fadd */\r\n /* dadd */\r\n /* isub */\r\n /* lsub */\r\n /* fsub */\r\n /* dsub */\r\n /* imul */\r\n /* lmul */\r\n /* fmul */\r\n /* dmul */\r\n /* idiv */\r\n /* ldiv */\r\n /* fdiv */\r\n /* ddiv */\r\n /* irem */\r\n /* lrem */\r\n /* frem */\r\n /* drem */\r\n /* ineg */\r\n /* lneg */\r\n /* fneg */\r\n /* dneg */\r\n /* ishl */\r\n /* lshl */\r\n /* ishr */\r\n /* lshr */\r\n /* iushr */\r\n /* lushr */\r\n /* iand */\r\n /* land */\r\n /* ior */\r\n /* lor */\r\n /* ixor */\r\n /* lxor */\r\n /* iinc */\r\n /* i2l */\r\n /* i2f */\r\n /* i2d */\r\n /* l2i */\r\n /* l2f */\r\n /* l2d */\r\n /* f2i */\r\n /* f2l */\r\n /* f2d */\r\n /* d2i */\r\n /* d2l */\r\n /* d2f */\r\n /* i2b */\r\n /* i2c */\r\n /* i2s */\r\n /* lcmp */\r\n /* fcmpl */\r\n /* fcmpg */\r\n /* dcmpl */\r\n /* dcmpg */\r\n /* ifeq */\r\n /* ifne */\r\n /* iflt */\r\n /* ifge */\r\n /* ifgt */\r\n /* ifle */\r\n /* if_icmpeq */\r\n /* if_icmpne */\r\n /* if_icmplt */\r\n /* if_icmpge */\r\n /* if_icmpgt */\r\n /* if_icmple */\r\n /* if_acmpeq */\r\n /* if_acmpne */\r\n /* goto */\r\n /* jsr */\r\n /* ret */\r\n /* tableswitch */\r\n /* lookupswitch */\r\n /* ireturn */\r\n /* lreturn */\r\n /* freturn */\r\n /* dreturn */\r\n /* areturn */\r\n /* return */\r\n /* getstatic */\r\n /* putstatic */\r\n /* getfield */\r\n /* putfield */\r\n /* invokevirtual */\r\n /* invokespecial */\r\n /* invokestatic */\r\n /* invokeinterface */\r\n /* new */\r\n /* newarray */\r\n /* anewarray */\r\n /* arraylength */\r\n /* athrow */\r\n /* checkcast */\r\n /* instanceof */\r\n /* monitorenter */\r\n /* monitorexit */\r\n /* wide */\r\n /* multianewarray */\r\n /* ifnull */\r\n /* ifnonnull */\r\n /* goto_w */\r\n /* jsr_w */\r\n /* breakpoint */\r\n /* impdep1 */\r\n /* nop */\r\n /* aconst_null */\r\n /* iconst_m1 */\r\n /* iconst_0 */\r\n /* iconst_1 */\r\n /* iconst_2 */\r\n /* iconst_3 */\r\n /* iconst_4 */\r\n /* iconst_5 */\r\n /* lconst_0 */\r\n /* lconst_1 */\r\n /* fconst_0 */\r\n /* fconst_1 */\r\n /* fconst_2 */\r\n /* dconst_0 */\r\n /* dconst_1 */\r\n /* bipush */\r\n /* sipush */\r\n /* ldc */\r\n /* ldc_w */\r\n /* ldc2_w */\r\n /* iload */\r\n /* lload */\r\n /* fload */\r\n /* dload */\r\n /* aload */\r\n /* iload_0 */\r\n /* iload_1 */\r\n /* iload_2 */\r\n /* iload_3 */\r\n /* lload_0 */\r\n /* lload_1 */\r\n /* lload_2 */\r\n /* lload_3 */\r\n /* fload_0 */\r\n /* fload_1 */\r\n /* fload_2 */\r\n /* fload_3 */\r\n /* dload_0 */\r\n /* dload_1 */\r\n /* dload_2 */\r\n /* dload_3 */\r\n /* aload_0 */\r\n /* aload_1 */\r\n /* aload_2 */\r\n /* aload_3 */\r\n /* iaload */\r\n /* laload */\r\n /* faload */\r\n /* daload */\r\n /* aaload */\r\n /* baload */\r\n /* caload */\r\n /* saload */\r\n /* istore */\r\n /* lstore */\r\n /* fstore */\r\n /* dstore */\r\n /* astore */\r\n /* istore_0 */\r\n /* istore_1 */\r\n /* istore_2 */\r\n /* istore_3 */\r\n /* lstore_0 */\r\n /* lstore_1 */\r\n /* lstore_2 */\r\n /* lstore_3 */\r\n /* fstore_0 */\r\n /* fstore_1 */\r\n /* fstore_2 */\r\n /* fstore_3 */\r\n /* dstore_0 */\r\n /* dstore_1 */\r\n /* dstore_2 */\r\n /* dstore_3 */\r\n /* astore_0 */\r\n /* astore_1 */\r\n /* astore_2 */\r\n /* astore_3 */\r\n /* iastore */\r\n /* lastore */\r\n /* fastore */\r\n /* dastore */\r\n /* aastore */\r\n /* bastore */\r\n /* castore */\r\n /* sastore */\r\n /* pop */\r\n /* pop2 */\r\n /* dup */\r\n /* dup_x1 */\r\n /* dup_x2 */\r\n /* dup2 */\r\n /* dup2_x1 */\r\n /* dup2_x2 */\r\n /* swap */\r\n /* iadd */\r\n /* ladd */\r\n /* fadd */\r\n /* dadd */\r\n /* isub */\r\n /* lsub */\r\n /* fsub */\r\n /* dsub */\r\n /* imul */\r\n /* lmul */\r\n /* fmul */\r\n /* dmul */\r\n /* idiv */\r\n /* ldiv */\r\n /* fdiv */\r\n /* ddiv */\r\n /* irem */\r\n /* lrem */\r\n /* frem */\r\n /* drem */\r\n /* ineg */\r\n /* lneg */\r\n /* fneg */\r\n /* dneg */\r\n /* ishl */\r\n /* lshl */\r\n /* ishr */\r\n /* lshr */\r\n /* iushr */\r\n /* lushr */\r\n /* iand */\r\n /* land */\r\n /* ior */\r\n /* lor */\r\n /* ixor */\r\n /* lxor */\r\n /* iinc */\r\n /* i2l */\r\n /* i2f */\r\n /* i2d */\r\n /* l2i */\r\n /* l2f */\r\n /* l2d */\r\n /* f2i */\r\n /* f2l */\r\n /* f2d */\r\n /* d2i */\r\n /* d2l */\r\n /* d2f */\r\n /* i2b */\r\n /* i2c */\r\n /* i2s */\r\n /* lcmp */\r\n /* fcmpl */\r\n /* fcmpg */\r\n /* dcmpl */\r\n /* dcmpg */\r\n /* ifeq */\r\n /* ifne */\r\n /* iflt */\r\n /* ifge */\r\n /* ifgt */\r\n /* ifle */\r\n /* if_icmpeq */\r\n /* if_icmpne */\r\n /* if_icmplt */\r\n /* if_icmpge */\r\n /* if_icmpgt */\r\n /* if_icmple */\r\n /* if_acmpeq */\r\n /* if_acmpne */\r\n /* goto */\r\n /* jsr */\r\n /* ret */\r\n /* tableswitch */\r\n /* lookupswitch */\r\n /* ireturn */\r\n /* lreturn */\r\n /* freturn */\r\n /* dreturn */\r\n /* areturn */\r\n /* return */\r\n /* getstatic */\r\n /* putstatic */\r\n /* getfield */\r\n /* putfield */\r\n /* invokevirtual */\r\n /* invokespecial */\r\n /* invokestatic */\r\n /* invokeinterface */\r\n /* new */\r\n /* newarray */\r\n /* anewarray */\r\n /* arraylength */\r\n /* athrow */\r\n /* checkcast */\r\n /* instanceof */\r\n /* monitorenter */\r\n /* monitorexit */\r\n /* wide */\r\n /* multianewarray */\r\n /* ifnull */\r\n /* ifnonnull */\r\n /* goto_w */\r\n /* jsr_w */\r\n /* breakpoint */\r\n /* impdep1 */\r\n /* Default resource names for user and generate aop.xml file */\r\n /* Resource name for OSGi */\r\n /* nop */\r\n /* aconst_null */\r\n /* iconst_m1 */\r\n /* iconst_0 */\r\n /* iconst_1 */\r\n /* iconst_2 */\r\n /* iconst_3 */\r\n /* iconst_4 */\r\n /* iconst_5 */\r\n /* lconst_0 */\r\n /* lconst_1 */\r\n /* fconst_0 */\r\n /* fconst_1 */\r\n /* fconst_2 */\r\n /* dconst_0 */\r\n /* dconst_1 */\r\n /* bipush */\r\n /* sipush */\r\n /* ldc */\r\n /* ldc_w */\r\n /* ldc2_w */\r\n /* iload */\r\n /* lload */\r\n /* fload */\r\n /* dload */\r\n /* aload */\r\n /* iload_0 */\r\n /* iload_1 */\r\n /* iload_2 */\r\n /* iload_3 */\r\n /* lload_0 */\r\n /* lload_1 */\r\n /* lload_2 */\r\n /* lload_3 */\r\n /* fload_0 */\r\n /* fload_1 */\r\n /* fload_2 */\r\n /* fload_3 */\r\n /* dload_0 */\r\n /* dload_1 */\r\n /* dload_2 */\r\n /* dload_3 */\r\n /* aload_0 */\r\n /* aload_1 */\r\n /* aload_2 */\r\n /* aload_3 */\r\n /* iaload */\r\n /* laload */\r\n /* faload */\r\n /* daload */\r\n /* aaload */\r\n /* baload */\r\n /* caload */\r\n /* saload */\r\n /* istore */\r\n /* lstore */\r\n /* fstore */\r\n /* dstore */\r\n /* astore */\r\n /* istore_0 */\r\n /* istore_1 */\r\n /* istore_2 */\r\n /* istore_3 */\r\n /* lstore_0 */\r\n /* lstore_1 */\r\n /* lstore_2 */\r\n /* lstore_3 */\r\n /* fstore_0 */\r\n /* fstore_1 */\r\n /* fstore_2 */\r\n /* fstore_3 */\r\n /* dstore_0 */\r\n /* dstore_1 */\r\n /* dstore_2 */\r\n /* dstore_3 */\r\n /* astore_0 */\r\n /* astore_1 */\r\n /* astore_2 */\r\n /* astore_3 */\r\n /* iastore */\r\n /* lastore */\r\n /* fastore */\r\n /* dastore */\r\n /* aastore */\r\n /* bastore */\r\n /* castore */\r\n /* sastore */\r\n /* pop */\r\n /* pop2 */\r\n /* dup */\r\n /* dup_x1 */\r\n /* dup_x2 */\r\n /* dup2 */\r\n /* dup2_x1 */\r\n /* dup2_x2 */\r\n /* swap */\r\n /* iadd */\r\n /* ladd */\r\n /* fadd */\r\n /* dadd */\r\n /* isub */\r\n /* lsub */\r\n /* fsub */\r\n /* dsub */\r\n /* imul */\r\n /* lmul */\r\n /* fmul */\r\n /* dmul */\r\n /* idiv */\r\n /* ldiv */\r\n /* fdiv */\r\n /* ddiv */\r\n /* irem */\r\n /* lrem */\r\n /* frem */\r\n /* drem */\r\n /* ineg */\r\n /* lneg */\r\n /* fneg */\r\n /* dneg */\r\n /* ishl */\r\n /* lshl */\r\n /* ishr */\r\n /* lshr */\r\n /* iushr */\r\n /* lushr */\r\n /* iand */\r\n /* land */\r\n /* ior */\r\n /* lor */\r\n /* ixor */\r\n /* lxor */\r\n /* iinc */\r\n /* i2l */\r\n /* i2f */\r\n /* i2d */\r\n /* l2i */\r\n /* l2f */\r\n /* l2d */\r\n /* f2i */\r\n /* f2l */\r\n /* f2d */\r\n /* d2i */\r\n /* d2l */\r\n /* d2f */\r\n /* i2b */\r\n /* i2c */\r\n /* i2s */\r\n /* lcmp */\r\n /* fcmpl */\r\n /* fcmpg */\r\n /* dcmpl */\r\n /* dcmpg */\r\n /* ifeq */\r\n /* ifne */\r\n /* iflt */\r\n /* ifge */\r\n /* ifgt */\r\n /* ifle */\r\n /* if_icmpeq */\r\n /* if_icmpne */\r\n /* if_icmplt */\r\n /* if_icmpge */\r\n /* if_icmpgt */\r\n /* if_icmple */\r\n /* if_acmpeq */\r\n /* if_acmpne */\r\n /* goto */\r\n /* jsr */\r\n /* ret */\r\n /* tableswitch */\r\n /* lookupswitch */\r\n /* ireturn */\r\n /* lreturn */\r\n /* freturn */\r\n /* dreturn */\r\n /* areturn */\r\n /* return */\r\n /* getstatic */\r\n /* putstatic */\r\n /* getfield */\r\n /* putfield */\r\n /* invokevirtual */\r\n /* invokespecial */\r\n /* invokestatic */\r\n /* invokeinterface */\r\n /* new */\r\n /* newarray */\r\n /* anewarray */\r\n /* arraylength */\r\n /* athrow */\r\n /* checkcast */\r\n /* instanceof */\r\n /* monitorenter */\r\n /* monitorexit */\r\n /* wide */\r\n /* multianewarray */\r\n /* ifnull */\r\n /* ifnonnull */\r\n /* goto_w */\r\n /* jsr_w */\r\n /* breakpoint */\r\n /* impdep1 */\r\n /* nop */\r\n /* aconst_null */\r\n /* iconst_m1 */\r\n /* iconst_0 */\r\n /* iconst_1 */\r\n /* iconst_2 */\r\n /* iconst_3 */\r\n /* iconst_4 */\r\n /* iconst_5 */\r\n /* lconst_0 */\r\n /* lconst_1 */\r\n /* fconst_0 */\r\n /* fconst_1 */\r\n /* fconst_2 */\r\n /* dconst_0 */\r\n /* dconst_1 */\r\n /* bipush */\r\n /* sipush */\r\n /* ldc */\r\n /* ldc_w */\r\n /* ldc2_w */\r\n /* iload */\r\n /* lload */\r\n /* fload */\r\n /* dload */\r\n /* aload */\r\n /* iload_0 */\r\n /* iload_1 */\r\n /* iload_2 */\r\n /* iload_3 */\r\n /* lload_0 */\r\n /* lload_1 */\r\n /* lload_2 */\r\n /* lload_3 */\r\n /* fload_0 */\r\n /* fload_1 */\r\n /* fload_2 */\r\n /* fload_3 */\r\n /* dload_0 */\r\n /* dload_1 */\r\n /* dload_2 */\r\n /* dload_3 */\r\n /* aload_0 */\r\n /* aload_1 */\r\n /* aload_2 */\r\n /* aload_3 */\r\n /* iaload */\r\n /* laload */\r\n /* faload */\r\n /* daload */\r\n /* aaload */\r\n /* baload */\r\n /* caload */\r\n /* saload */\r\n /* istore */\r\n /* lstore */\r\n /* fstore */\r\n /* dstore */\r\n /* astore */\r\n /* istore_0 */\r\n /* istore_1 */\r\n /* istore_2 */\r\n /* istore_3 */\r\n /* lstore_0 */\r\n /* lstore_1 */\r\n /* lstore_2 */\r\n /* lstore_3 */\r\n /* fstore_0 */\r\n /* fstore_1 */\r\n /* fstore_2 */\r\n /* fstore_3 */\r\n /* dstore_0 */\r\n /* dstore_1 */\r\n /* dstore_2 */\r\n /* dstore_3 */\r\n /* astore_0 */\r\n /* astore_1 */\r\n /* astore_2 */\r\n /* astore_3 */\r\n /* iastore */\r\n /* lastore */\r\n /* fastore */\r\n /* dastore */\r\n /* aastore */\r\n /* bastore */\r\n /* castore */\r\n /* sastore */\r\n /* pop */\r\n /* pop2 */\r\n /* dup */\r\n /* dup_x1 */\r\n /* dup_x2 */\r\n /* dup2 */\r\n /* dup2_x1 */\r\n /* dup2_x2 */\r\n /* swap */\r\n /* iadd */\r\n /* ladd */\r\n /* fadd */\r\n /* dadd */\r\n /* isub */\r\n /* lsub */\r\n /* fsub */\r\n /* dsub */\r\n /* imul */\r\n /* lmul */\r\n /* fmul */\r\n /* dmul */\r\n /* idiv */\r\n /* ldiv */\r\n /* fdiv */\r\n /* ddiv */\r\n /* irem */\r\n /* lrem */\r\n /* frem */\r\n /* drem */\r\n /* ineg */\r\n /* lneg */\r\n /* fneg */\r\n /* dneg */\r\n /* ishl */\r\n /* lshl */\r\n /* ishr */\r\n /* lshr */\r\n /* iushr */\r\n /* lushr */\r\n /* iand */\r\n /* land */\r\n /* ior */\r\n /* lor */\r\n /* ixor */\r\n /* lxor */\r\n /* iinc */\r\n /* i2l */\r\n /* i2f */\r\n /* i2d */\r\n /* l2i */\r\n /* l2f */\r\n /* l2d */\r\n /* f2i */\r\n /* f2l */\r\n /* f2d */\r\n /* d2i */\r\n /* d2l */\r\n /* d2f */\r\n /* i2b */\r\n /* i2c */\r\n /* i2s */\r\n /* lcmp */\r\n /* fcmpl */\r\n /* fcmpg */\r\n /* dcmpl */\r\n /* dcmpg */\r\n /* ifeq */\r\n /* ifne */\r\n /* iflt */\r\n /* ifge */\r\n /* ifgt */\r\n /* ifle */\r\n /* if_icmpeq */\r\n /* if_icmpne */\r\n /* if_icmplt */\r\n /* if_icmpge */\r\n /* if_icmpgt */\r\n /* if_icmple */\r\n /* if_acmpeq */\r\n /* if_acmpne */\r\n /* goto */\r\n /* jsr */\r\n /* ret */\r\n /* tableswitch */\r\n /* lookupswitch */\r\n /* ireturn */\r\n /* lreturn */\r\n /* freturn */\r\n /* dreturn */\r\n /* areturn */\r\n /* return */\r\n /* getstatic */\r\n /* putstatic */\r\n /* getfield */\r\n /* putfield */\r\n /* invokevirtual */\r\n /* invokespecial */\r\n /* invokestatic */\r\n /* invokeinterface */\r\n /* new */\r\n /* newarray */\r\n /* anewarray */\r\n /* arraylength */\r\n /* athrow */\r\n /* checkcast */\r\n /* instanceof */\r\n /* monitorenter */\r\n /* monitorexit */\r\n /* wide */\r\n /* multianewarray */\r\n /* ifnull */\r\n /* ifnonnull */\r\n /* goto_w */\r\n /* jsr_w */\r\n /* breakpoint */\r\n /* impdep1 */\r\n /* Default resource names for user and generate aop.xml file */\r\n /* Resource name for OSGi */\r\n","CompilationUnitScope":"buildFieldsAndMethods buildTypeBindings checkAndSetImports checkParameterizedTypes computeConstantPoolName connectTypeHierarchy faultInImports faultInTypes findImport findImport findSingleImport findSingleStaticImport findStaticMethod getDefaultImports getImport nextCaptureID problemReporter recordQualifiedReference recordReference recordReference recordSimpleReference recordSuperTypeReference recordTypeConversion recordTypeReference recordTypeReferences resolveSingleImport storeDependencyInfo toString typeToRecord verifyMethods environment referenceContext currentPackageName fPackage imports typeOrPackageCache topLevelTypes qualifiedReferences simpleNameReferences referencedTypes referencedSuperTypes constantPoolNameUsage captureID org.aspectj.org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope  used in Scope.getTypeOrPackage()\r\n  used to test if dependencies should be recorded\r\n  AspectJ Extension - raised to public\r\n  want it initialized if the package cannot be resolved\r\n  only report if the unit isn't structurally empty\r\n  resolve package annotations now if this is \"package-info.java\".\r\n  always dependent on your own package\r\n  Skip typeDeclarations which know of previously reported errors\r\n  needed to detect collision cases\r\n  and it can be an unresolved type which is now being defined\r\n  this is now a warning since a package does not really 'exist' until it contains a type, see JLS v2, 7.4.3\r\n  mainTypeName == null means that implementor of ICompilationUnit decided to return null\r\n  shrink topLevelTypes... only happens if an error was reported\r\n  AspectJ Extension - raised to public\r\n  allocate the import array, add java.lang.* by default\r\n  skip duplicates or imports of the current package\r\n  resolve single imports only when the last name matches\r\n  we report all problems in faultInImports()\r\n  shrink resolvedImports... only happens if an error was reported\r\n  AspectJ Extension - raised to public\r\n  ensure there is not already such a local type name defined by the user\r\n  local type\r\n  from 1.5 on, use immediately enclosing type name\r\n  e.g. class X { { class L{} new X(){ class L{} } } }\r\n  AspectJ Extension - raised to public\r\n  can be called when a field constant is resolved before static imports\r\n  collect the top level type names if a single type import exists\r\n  allocate the import array, add java.lang.* by default\r\n  since skipped, must be reported now\r\n  skip duplicates or imports of the current package\r\n  find other static fields with the same name\r\n  duplicate test above should have caught this case, but make sure\r\n  either the type collides with a top level type or another imported type\r\n  collisions between an imported static field & a type should be checked according to spec... but currently not by javac\r\n  since skipped, must be reported now\r\n  single imports change from being just types to types or fields\r\n  shrink resolvedImports... only happens if an error was reported\r\n  this API is for code assist purpose\r\n  reset to look for member types inside the default package type\r\n  type imports are necessarily raw for all except last\r\n  does not look for inherited member types on purpose, only immediate members\r\n  the name cannot be a package\r\n  must resolve to a member type or field, not a top level type\r\n  cannot be a package, error is caught in sender\r\n  look to see if its a static field first\r\n  look to see if there is a static method with the same selector\r\n  needed for statically imported types which don't know their hierarchy yet\r\n  initialize the default imports if necessary... share the default java.lang.* import\r\n  create a proxy for the missing BinaryType\r\n  NOT Public API\r\n  not recording dependencies\r\n  not recording dependencies\r\n  not recording dependencies\r\n  must record the hierarchy of the subType that is converted to the superType\r\n  not recording dependencies\r\n  not recording dependencies\r\n  If a field  grows as more types are added\r\n  cannot do early since the hierarchy may not be fully resolved\r\n  $NON-NLS-1$\r\n  AspectJ Extension - made several methods public for use in other packages\r\n /*\r\n * INTERNAL USE-ONLY\r\n * Innerclasses get their name computed as they are generated, since some may not\r\n * be actually outputed if sitting inside unreachable code.\r\n */\r\n /* Answer the problem reporter to use for raising new problems.\r\n*\r\n* Note that as a side-effect, this updates the current reference context\r\n* (unit, type or method) in case the problem handler decides it is necessary\r\n* to abort.\r\n*/\r\n /*\r\nWhat do we hold onto:\r\n\r\n1. when we resolve 'a.b.c', say we keep only 'a.b.c'\r\n & when we fail to resolve 'c' in 'a.b', lets keep 'a.b.c'\r\nTHEN when we come across a new/changed/removed item named 'a.b.c',\r\n we would find all references to 'a.b.c'\r\n-> This approach fails because every type is resolved in every onDemand import to\r\n detect collision cases... so the references could be 10 times bigger than necessary.\r\n\r\n2. when we resolve 'a.b.c', lets keep 'a.b' & 'c'\r\n & when we fail to resolve 'c' in 'a.b', lets keep 'a.b' & 'c'\r\nTHEN when we come across a new/changed/removed item named 'a.b.c',\r\n we would find all references to 'a.b' & 'c'\r\n-> This approach does not have a space problem but fails to handle collision cases.\r\n What happens if a type is added named 'a.b'? We would search for 'a' & 'b' but\r\n would not find a match.\r\n\r\n3. when we resolve 'a.b.c', lets keep 'a', 'a.b' & 'a', 'b', 'c'\r\n & when we fail to resolve 'c' in 'a.b', lets keep 'a', 'a.b' & 'a', 'b', 'c'\r\nTHEN when we come across a new/changed/removed item named 'a.b.c',\r\n we would find all references to 'a.b' & 'c'\r\nOR 'a.b' -> 'a' & 'b'\r\nOR 'a' -> '' & 'a'\r\n-> As long as each single char[] is interned, we should not have a space problem\r\n and can handle collision cases.\r\n\r\n4. when we resolve 'a.b.c', lets keep 'a.b' & 'a', 'b', 'c'\r\n & when we fail to resolve 'c' in 'a.b', lets keep 'a.b' & 'a', 'b', 'c'\r\nTHEN when we come across a new/changed/removed item named 'a.b.c',\r\n we would find all references to 'a.b' & 'c'\r\nOR 'a.b' -> 'a' & 'b' in the simple name collection\r\nOR 'a' -> 'a' in the simple name collection\r\n-> As long as each single char[] is interned, we should not have a space problem\r\n and can handle collision cases.\r\n*/\r\n","IJavaElementRequestor":"acceptField acceptInitializer acceptMemberType acceptMethod acceptPackageFragment acceptType isCanceled org.aspectj.org.eclipse.jdt.internal.core.IJavaElementRequestor","AjdtCommand":"runCommand repeatCommand doCommand genBuildConfig inferKind ABORT_MESSAGE buildManager savedArgs org.aspectj.ajdt.ajc.AjdtCommand  should be info, but handler usually suppresses\r\n  } else\r\n  buildManager.setMessageHandler(handler);\r\n  regenerate configuration b  print usage for config errors\r\n  System.err.println(\"errs: \" + counter.hasErrors());\r\n  }\r\n  XXX dubious\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","OutputLocationAdapter":"getOutputLocationForClass getSourceFolderForFile getOutputLocationForResource getAllOutputLocations getDefaultOutputLocation locationManager org.aspectj.ajde.core.internal.OutputLocationAdapter","WeaverMessages":"format format format format format format format format format format bundle ARGS_IN_DECLARE CFLOW_IN_DECLARE IF_IN_DECLARE THIS_OR_TARGET_IN_DECLARE ABSTRACT_POINTCUT POINCUT_NOT_CONCRETE POINTCUT_NOT_VISIBLE CONFLICTING_INHERITED_POINTCUTS CIRCULAR_POINTCUT CANT_FIND_POINTCUT EXACT_TYPE_PATTERN_REQD CANT_BIND_TYPE WILDCARD_NOT_ALLOWED FIELDS_CANT_HAVE_VOID_TYPE NO_NEWARRAY_JOINPOINTS_BY_DEFAULT UNSUPPORTED_POINTCUT_PRIMITIVE MISSING_TYPE_PREVENTS_MATCH DECP_OBJECT CANT_EXTEND_SELF INTERFACE_CANT_EXTEND_CLASS DECP_HIERARCHY_ERROR MULTIPLE_MATCHES_IN_PRECEDENCE TWO_STARS_IN_PRECEDENCE CLASSES_IN_PRECEDENCE TWO_PATTERN_MATCHES_IN_PRECEDENCE NOT_THROWABLE ITD_CONS_ON_ASPECT ITD_RETURN_TYPE_MISMATCH ITD_PARAM_TYPE_MISMATCH ITD_VISIBILITY_REDUCTION ITD_DOESNT_THROW ITD_OVERRIDDEN_STATIC ITD_OVERIDDING_STATIC ITD_CONFLICT ITD_MEMBER_CONFLICT ITD_NON_EXPOSED_IMPLEMENTOR ITD_ABSTRACT_MUST_BE_PUBLIC_ON_INTERFACE CANT_OVERRIDE_FINAL_MEMBER NON_VOID_RETURN INCOMPATIBLE_RETURN_TYPE CANT_THROW_CHECKED CIRCULAR_DEPENDENCY MISSING_PER_CLAUSE WRONG_PER_CLAUSE ALREADY_WOVEN REWEAVABLE_MODE PROCESSING_REWEAVABLE MISSING_REWEAVABLE_TYPE VERIFIED_REWEAVABLE_TYPE ASPECT_NEEDED REWEAVABLE_ASPECT_NOT_REGISTERED CANT_FIND_TYPE CANT_FIND_CORE_TYPE CANT_FIND_TYPE_WITHINPCD CANT_FIND_TYPE_DURING_AROUND_WEAVE CANT_FIND_TYPE_DURING_AROUND_WEAVE_PREINIT CANT_FIND_TYPE_EXCEPTION_TYPE CANT_FIND_TYPE_ARG_TYPE CANT_FIND_PARENT_TYPE CANT_FIND_PARENT_TYPE_NO_SUB CANT_FIND_TYPE_FIELDS CANT_FIND_TYPE_SUPERCLASS CANT_FIND_TYPE_INTERFACES CANT_FIND_TYPE_METHODS CANT_FIND_TYPE_POINTCUTS CANT_FIND_TYPE_MODIFIERS CANT_FIND_TYPE_ANNOTATION CANT_FIND_TYPE_ASSIGNABLE CANT_FIND_TYPE_COERCEABLE CANT_FIND_TYPE_JOINPOINT CANT_FIND_TYPE_INTERFACE_METHODS DECP_BINARY_LIMITATION OVERWRITE_JSR45 IF_IN_PERCLAUSE IF_LEXICALLY_IN_CFLOW ONLY_BEFORE_ON_HANDLER NO_AROUND_ON_SYNCHRONIZATION AROUND_ON_PREINIT AROUND_ON_INIT AROUND_ON_INTERFACE_STATICINIT PROBLEM_GENERATING_METHOD CLASS_TOO_BIG ZIPFILE_ENTRY_MISSING ZIPFILE_ENTRY_INVALID DIRECTORY_ENTRY_MISSING OUTJAR_IN_INPUT_PATH XLINT_LOAD_ERROR XLINTDEFAULT_LOAD_ERROR XLINTDEFAULT_LOAD_PROBLEM XLINT_KEY_ERROR XLINT_VALUE_ERROR UNBOUND_FORMAL AMBIGUOUS_BINDING AMBIGUOUS_BINDING_IN_OR NEGATION_DOESNT_ALLOW_BINDING ITDC_ON_ENUM_NOT_ALLOWED ITDM_ON_ENUM_NOT_ALLOWED ITDF_ON_ENUM_NOT_ALLOWED CANT_DECP_ON_ENUM_TO_IMPL_INTERFACE CANT_DECP_ON_ENUM_TO_EXTEND_CLASS CANT_DECP_TO_MAKE_ENUM_SUPERTYPE ITDC_ON_ANNOTATION_NOT_ALLOWED ITDM_ON_ANNOTATION_NOT_ALLOWED ITDF_ON_ANNOTATION_NOT_ALLOWED CANT_DECP_ON_ANNOTATION_TO_IMPL_INTERFACE CANT_DECP_ON_ANNOTATION_TO_EXTEND_CLASS CANT_DECP_TO_MAKE_ANNOTATION_SUPERTYPE REFERENCE_TO_NON_ANNOTATION_TYPE BINDING_NON_RUNTIME_RETENTION_ANNOTATION INCORRECT_TARGET_FOR_DECLARE_ANNOTATION NO_MATCH_BECAUSE_SOURCE_RETENTION INVALID_ANNOTATION_VALUE UNKNOWN_ANNOTATION_VALUE ATANNOTATION_ONLY_SUPPORTED_AT_JAVA5_LEVEL ATWITHIN_ONLY_SUPPORTED_AT_JAVA5_LEVEL ATWITHINCODE_ONLY_SUPPORTED_AT_JAVA5_LEVEL ATTHIS_ONLY_SUPPORTED_AT_JAVA5_LEVEL ATTARGET_ONLY_SUPPORTED_AT_JAVA5_LEVEL ATARGS_ONLY_SUPPORTED_AT_JAVA5_LEVEL DECLARE_ATTYPE_ONLY_SUPPORTED_AT_JAVA5_LEVEL DECLARE_ATMETHOD_ONLY_SUPPORTED_AT_JAVA5_LEVEL DECLARE_ATFIELD_ONLY_SUPPORTED_AT_JAVA5_LEVEL DECLARE_ATCONS_ONLY_SUPPORTED_AT_JAVA5_LEVEL ANNOTATIONS_NEED_JAVA5 CANT_DECP_MULTIPLE_PARAMETERIZATIONS HANDLER_PCD_DOESNT_SUPPORT_PARAMETERS INCORRECT_NUMBER_OF_TYPE_ARGUMENTS VIOLATES_TYPE_VARIABLE_BOUNDS NO_STATIC_INIT_JPS_FOR_PARAMETERIZED_TYPES NOT_A_GENERIC_TYPE WITHIN_PCD_DOESNT_SUPPORT_PARAMETERS THIS_AND_TARGET_DONT_SUPPORT_PARAMETERS GET_AND_SET_DONT_SUPPORT_DEC_TYPE_PARAMETERS NO_INIT_JPS_FOR_PARAMETERIZED_TYPES NO_GENERIC_THROWABLES WITHINCODE_DOESNT_SUPPORT_PARAMETERIZED_DECLARING_TYPES EXECUTION_DOESNT_SUPPORT_PARAMETERIZED_DECLARING_TYPES CALL_DOESNT_SUPPORT_PARAMETERIZED_DECLARING_TYPES CANT_REFERENCE_POINTCUT_IN_RAW_TYPE HAS_MEMBER_NOT_ENABLED RETURNING_FORMAL_NOT_DECLARED_IN_ADVICE THROWN_FORMAL_NOT_DECLARED_IN_ADVICE bundle ARGS_IN_DECLARE CFLOW_IN_DECLARE IF_IN_DECLARE THIS_OR_TARGET_IN_DECLARE ABSTRACT_POINTCUT POINCUT_NOT_CONCRETE POINTCUT_NOT_VISIBLE CONFLICTING_INHERITED_POINTCUTS CIRCULAR_POINTCUT CANT_FIND_POINTCUT EXACT_TYPE_PATTERN_REQD CANT_BIND_TYPE WILDCARD_NOT_ALLOWED FIELDS_CANT_HAVE_VOID_TYPE NO_NEWARRAY_JOINPOINTS_BY_DEFAULT UNSUPPORTED_POINTCUT_PRIMITIVE MISSING_TYPE_PREVENTS_MATCH DECP_OBJECT CANT_EXTEND_SELF INTERFACE_CANT_EXTEND_CLASS DECP_HIERARCHY_ERROR MULTIPLE_MATCHES_IN_PRECEDENCE TWO_STARS_IN_PRECEDENCE CLASSES_IN_PRECEDENCE TWO_PATTERN_MATCHES_IN_PRECEDENCE NOT_THROWABLE ITD_CONS_ON_ASPECT ITD_RETURN_TYPE_MISMATCH ITD_PARAM_TYPE_MISMATCH ITD_VISIBILITY_REDUCTION ITD_DOESNT_THROW ITD_OVERRIDDEN_STATIC ITD_OVERIDDING_STATIC ITD_CONFLICT ITD_MEMBER_CONFLICT ITD_NON_EXPOSED_IMPLEMENTOR ITD_ABSTRACT_MUST_BE_PUBLIC_ON_INTERFACE CANT_OVERRIDE_FINAL_MEMBER NON_VOID_RETURN INCOMPATIBLE_RETURN_TYPE CANT_THROW_CHECKED CIRCULAR_DEPENDENCY MISSING_PER_CLAUSE WRONG_PER_CLAUSE ALREADY_WOVEN REWEAVABLE_MODE PROCESSING_REWEAVABLE MISSING_REWEAVABLE_TYPE VERIFIED_REWEAVABLE_TYPE ASPECT_NEEDED REWEAVABLE_ASPECT_NOT_REGISTERED CANT_FIND_TYPE CANT_FIND_CORE_TYPE CANT_FIND_TYPE_WITHINPCD CANT_FIND_TYPE_DURING_AROUND_WEAVE CANT_FIND_TYPE_DURING_AROUND_WEAVE_PREINIT CANT_FIND_TYPE_EXCEPTION_TYPE CANT_FIND_TYPE_ARG_TYPE CANT_FIND_PARENT_TYPE CANT_FIND_PARENT_TYPE_NO_SUB CANT_FIND_TYPE_FIELDS CANT_FIND_TYPE_SUPERCLASS CANT_FIND_TYPE_INTERFACES CANT_FIND_TYPE_METHODS CANT_FIND_TYPE_POINTCUTS CANT_FIND_TYPE_MODIFIERS CANT_FIND_TYPE_ANNOTATION CANT_FIND_TYPE_ASSIGNABLE CANT_FIND_TYPE_COERCEABLE CANT_FIND_TYPE_JOINPOINT CANT_FIND_TYPE_INTERFACE_METHODS DECP_BINARY_LIMITATION OVERWRITE_JSR45 IF_IN_PERCLAUSE IF_LEXICALLY_IN_CFLOW ONLY_BEFORE_ON_HANDLER NO_AROUND_ON_SYNCHRONIZATION AROUND_ON_PREINIT AROUND_ON_INIT AROUND_ON_INTERFACE_STATICINIT PROBLEM_GENERATING_METHOD CLASS_TOO_BIG ZIPFILE_ENTRY_MISSING ZIPFILE_ENTRY_INVALID DIRECTORY_ENTRY_MISSING OUTJAR_IN_INPUT_PATH XLINT_LOAD_ERROR XLINTDEFAULT_LOAD_ERROR XLINTDEFAULT_LOAD_PROBLEM XLINT_KEY_ERROR XLINT_VALUE_ERROR UNBOUND_FORMAL AMBIGUOUS_BINDING AMBIGUOUS_BINDING_IN_OR NEGATION_DOESNT_ALLOW_BINDING ITDC_ON_ENUM_NOT_ALLOWED ITDM_ON_ENUM_NOT_ALLOWED ITDF_ON_ENUM_NOT_ALLOWED CANT_DECP_ON_ENUM_TO_IMPL_INTERFACE CANT_DECP_ON_ENUM_TO_EXTEND_CLASS CANT_DECP_TO_MAKE_ENUM_SUPERTYPE ITDC_ON_ANNOTATION_NOT_ALLOWED ITDM_ON_ANNOTATION_NOT_ALLOWED ITDF_ON_ANNOTATION_NOT_ALLOWED CANT_DECP_ON_ANNOTATION_TO_IMPL_INTERFACE CANT_DECP_ON_ANNOTATION_TO_EXTEND_CLASS CANT_DECP_TO_MAKE_ANNOTATION_SUPERTYPE REFERENCE_TO_NON_ANNOTATION_TYPE BINDING_NON_RUNTIME_RETENTION_ANNOTATION INCORRECT_TARGET_FOR_DECLARE_ANNOTATION NO_MATCH_BECAUSE_SOURCE_RETENTION INVALID_ANNOTATION_VALUE UNKNOWN_ANNOTATION_VALUE ATANNOTATION_ONLY_SUPPORTED_AT_JAVA5_LEVEL ATWITHIN_ONLY_SUPPORTED_AT_JAVA5_LEVEL ATWITHINCODE_ONLY_SUPPORTED_AT_JAVA5_LEVEL ATTHIS_ONLY_SUPPORTED_AT_JAVA5_LEVEL ATTARGET_ONLY_SUPPORTED_AT_JAVA5_LEVEL ATARGS_ONLY_SUPPORTED_AT_JAVA5_LEVEL DECLARE_ATTYPE_ONLY_SUPPORTED_AT_JAVA5_LEVEL DECLARE_ATMETHOD_ONLY_SUPPORTED_AT_JAVA5_LEVEL DECLARE_ATFIELD_ONLY_SUPPORTED_AT_JAVA5_LEVEL DECLARE_ATCONS_ONLY_SUPPORTED_AT_JAVA5_LEVEL ANNOTATIONS_NEED_JAVA5 CANT_DECP_MULTIPLE_PARAMETERIZATIONS HANDLER_PCD_DOESNT_SUPPORT_PARAMETERS INCORRECT_NUMBER_OF_TYPE_ARGUMENTS VIOLATES_TYPE_VARIABLE_BOUNDS NO_STATIC_INIT_JPS_FOR_PARAMETERIZED_TYPES NOT_A_GENERIC_TYPE WITHIN_PCD_DOESNT_SUPPORT_PARAMETERS THIS_AND_TARGET_DONT_SUPPORT_PARAMETERS GET_AND_SET_DONT_SUPPORT_DEC_TYPE_PARAMETERS NO_INIT_JPS_FOR_PARAMETERIZED_TYPES NO_GENERIC_THROWABLES WITHINCODE_DOESNT_SUPPORT_PARAMETERIZED_DECLARING_TYPES EXECUTION_DOESNT_SUPPORT_PARAMETERIZED_DECLARING_TYPES CALL_DOESNT_SUPPORT_PARAMETERIZED_DECLARING_TYPES CANT_REFERENCE_POINTCUT_IN_RAW_TYPE HAS_MEMBER_NOT_ENABLED RETURNING_FORMAL_NOT_DECLARED_IN_ADVICE THROWN_FORMAL_NOT_DECLARED_IN_ADVICE org.aspectj.weaver.WeaverMessages org.aspectj.weaver.WeaverMessages  Java5 messages\r\n  Annotation Value messages\r\n  < Java5 messages\r\n  Generics\r\n  @AspectJ\r\n  Java5 messages\r\n  Annotation Value messages\r\n  < Java5 messages\r\n  Generics\r\n  @AspectJ\r\n","CompletionRequestorAdapter":"acceptAnonymousType acceptClass acceptError acceptField acceptInterface acceptKeyword acceptLabel acceptLocalVariable acceptMethod acceptMethodDeclaration acceptModifier acceptPackage acceptType acceptVariableName org.aspectj.org.eclipse.jdt.core.CompletionRequestorAdapter /*\r\n\t * @see ICompletionRequestor#acceptAnonymousType(char[], char[], char[][], char[][], char[][], char[], int, int, int)\r\n\t */\r\n /*\r\n\t * @see ICompletionRequestor#acceptClass(char[], char[], char[], int, int, int)\r\n\t */\r\n /*\r\n\t * @see ICompletionRequestor#acceptError(IProblem)\r\n\t */\r\n /*\r\n\t * @see ICompletionRequestor#acceptField(char[], char[], char[], char[], char[], char[], int, int, int)\r\n\t */\r\n /*\r\n\t * @see ICompletionRequestor#acceptInterface(char[], char[], char[], int, int, int)\r\n\t */\r\n /*\r\n\t * @see ICompletionRequestor#acceptKeyword(char[], int, int)\r\n\t */\r\n /*\r\n\t * @see ICompletionRequestor#acceptLabel(char[], int, int)\r\n\t */\r\n /*\r\n\t * @see ICompletionRequestor#acceptLocalVariable(char[], char[], char[], int, int, int)\r\n\t */\r\n /*\r\n\t * @see ICompletionRequestor#acceptMethod(char[], char[], char[], char[][], char[][], char[][], char[], char[], char[], int, int, int)\r\n\t */\r\n /*\r\n\t * @see ICompletionRequestor#acceptMethodDeclaration(char[], char[], char[], char[][], char[][], char[][], char[], char[], char[], int, int, int)\r\n\t */\r\n /*\r\n\t * @see ICompletionRequestor#acceptModifier(char[], int, int)\r\n\t */\r\n /*\r\n\t * @see ICompletionRequestor#acceptPackage(char[], char[], int, int)\r\n\t */\r\n /*\r\n\t * @see ICompletionRequestor#acceptType(char[], char[], char[], int, int)\r\n\t */\r\n /*\r\n\t * @see ICompletionRequestor#acceptVariableName(char[], char[], char[], char[], int, int)\r\n\t */\r\n","AnnotationAJ":"getTypeSignature getTypeName getType allowedOnAnnotationType allowedOnField allowedOnRegularType getTargets hasNamedValue hasNameValuePair getValidTargets stringify specifiesTarget isRuntimeVisible getStringFormOfValue getTypeSignature getTypeName getType allowedOnAnnotationType allowedOnField allowedOnRegularType getTargets hasNamedValue hasNameValuePair getValidTargets stringify specifiesTarget isRuntimeVisible getStringFormOfValue EMPTY_ARRAY EMPTY_ARRAY org.aspectj.weaver.AnnotationAJ org.aspectj.weaver.AnnotationAJ /* *******************************************************************\r\n * Copyright (c) 2006-2008 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2006-2008 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","IRuntimeInvisibleAnnotationsAttribute":"getAnnotationsNumber getAnnotations org.aspectj.org.eclipse.jdt.core.util.IRuntimeInvisibleAnnotationsAttribute","InstallException":"serialVersionUID org.aspectj.org.eclipse.jdt.internal.eval.InstallException  backward compatible\r\n","VariableBinding":"getAnnotations getConstantValue getDeclaringClass getDeclaringMethod getJavaElement getKey getKind getModifiers getName getType getUnresolvedJavaElement getVariableDeclaration getVariableId isParameter isDeprecated isEnumConstant isEqualTo isField isSynthetic isRecovered toString constant getAnnotations isBlankFinal isFinal readableName setConstant toString VALID_MODIFIERS binding declaringClass key name resolver type modifiers type name constant id tagBits org.aspectj.org.eclipse.jdt.core.dom.VariableBinding org.aspectj.org.eclipse.jdt.internal.compiler.lookup.VariableBinding  the variable is not an enum constant nor a field nor an argument.\r\n  not resolving binding\r\n  field\r\n  arraylength\r\n  local variable\r\n  identical binding - equal (key or no key)\r\n  other binding missing\r\n  AspectJ Extension, raise visibility\r\n  for flow-analysis (position in flowInfo bit vector)\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (non-Javadoc)\r\n\t * @see IVariableBinding#getConstantValue()\r\n\t * @since 3.0\r\n\t */\r\n /*\r\n\t * @see IVariableBinding#getDeclaringClass()\r\n\t */\r\n /*\r\n\t * @see IVariableBinding#getDeclaringMethod()\r\n\t */\r\n /*\r\n\t * @see IBinding#getJavaElement()\r\n\t */\r\n /*\r\n\t * @see IBinding#getKey()\r\n\t */\r\n /*\r\n\t * @see IBinding#getKind()\r\n\t */\r\n /*\r\n\t * @see IBinding#getModifiers()\r\n\t */\r\n /*\r\n\t * @see IBinding#getName()\r\n\t */\r\n /*\r\n\t * @see IVariableBinding#getType()\r\n\t */\r\n /*\r\n\t * @see IVariableBinding#getVariableDeclaration()\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see IVariableBinding#getVariableId()\r\n\t */\r\n /*\r\n\t * @see IVariableBinding#isParameter()\r\n\t */\r\n /*\r\n\t * @see IBinding#isDeprecated()\r\n\t */\r\n /*\r\n\t * @see IVariableBinding#isEnumConstant()\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see IBinding#isEqualTo(Binding)\r\n\t * @since 3.1\r\n\t */\r\n /*\r\n\t * @see IVariableBinding#isField()\r\n\t */\r\n /*\r\n\t * @see IBinding#isSynthetic()\r\n\t */\r\n /*\r\n\t * (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.dom.IBinding#isRecovered()\r\n\t */\r\n /*\r\n\t * For debugging purpose only.\r\n\t * @see java.lang.Object#toString()\r\n\t */\r\n","JavadocSingleNameReference":"resolve resolve traverse traverse tagSourceStart tagSourceEnd org.aspectj.org.eclipse.jdt.internal.compiler.ast.JavadocSingleNameReference /* (non-Javadoc)\r\n\t * Redefine to capture javadoc specific signatures\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode#traverse(org.aspectj.org.eclipse.jdt.internal.compiler.ASTVisitor, org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BlockScope)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * Redefine to capture javadoc specific signatures\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.ast.ASTNode#traverse(org.aspectj.org.eclipse.jdt.internal.compiler.ASTVisitor, org.aspectj.org.eclipse.jdt.internal.compiler.lookup.BlockScope)\r\n\t */\r\n","PerFromSuper":"accept couldMatchKinds fastMatch matchInternal resolveBindings findResidueInternal concretize parameterizeWith lookupConcretePerClause write readPerClause toString toDeclarationString getKind equals hashCode accept couldMatchKinds fastMatch matchInternal resolveBindings findResidueInternal concretize parameterizeWith lookupConcretePerClause write readPerClause toString toDeclarationString getKind equals hashCode kind kind org.aspectj.weaver.patterns.PerFromSuper org.aspectj.weaver.patterns.PerFromSuper  AV: fallback on something else NPE in AJDT\r\n  AV: fallback on something else NPE in AJDT\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","JavaBuildOptions":"getJavaBuildOptionsMap setOption setComplianceLevel setSourceCompatibilityLevel setTargetLevel setWarnMethodWithConstructorName setWarnOverridingPackageDefaultMethod setWarnDeprecation setWarnHiddenCatchBlocks setWarnUnusedLocals setWarnUnusedParameters setWarnUnusedImports setWarnSyntheticAccess setWarnAssertIdentifier setWarnNonNLS setDebugSource setDebugLines setDebugVariables setPreserveAllLocals setCharacterEncoding javaBuildOptions org.aspectj.ajde.ui.javaoptions.JavaBuildOptions  compliance\r\n  source\r\n  target\r\n  warn method with constructor name\r\n  warn overriding package default method\r\n  warn deprecation\r\n  warn hidden catch blocks\r\n  warn unused locals\r\n  warn unused parameters\r\n  warn unused imports\r\n  warn synthetic access\r\n  warn assert identifier\r\n  warn non nls\r\n  debug source\r\n  debug lines\r\n  debug vars\r\n  preserve all locals\r\n  character encoding\r\n","InterTypeFieldDeclaration":"getName getType getGenericType parseStatements getPrefix resolveOnType resolve setInitialization build makeAttribute generateCode generateDispatchMethods generateDispatchMethod generateInterfaceReadBody generateInterfaceWriteBody generateClassReadBody generateClassWriteBody getShadowKindForBody getOnType setOnType clone0 accept0 getName getType getGenericType initialization realFieldType onType org.aspectj.lang.reflect.InterTypeFieldDeclaration org.aspectj.ajdt.internal.compiler.ast.InterTypeFieldDeclaration org.aspectj.org.eclipse.jdt.core.dom.InterTypeFieldDeclaration org.aspectj.lang.reflect.InterTypeFieldDeclaration  System.err.println(\"got initializer: \" + initialization);\r\n  XXX something is broken about this logic.  Can we write to static interface fields?\r\n  method as that casts the shadow of a field set join point.\r\n  Error message output in isTargetAnnotation\r\n  Error message output in isTargetEnum\r\n  System.err.println(\"type: \" + binding.returnType + \", \" + returnType);\r\n  We encountered a problem building the scope, don't continue - error already reported\r\n  Build a half correct resolvedmember (makeResolvedMember understands tvars) then build a fully correct sig from it\r\n  if (returnType.isParameterizedType() || returnType.isGenericType()) returnType = returnType.getRawType();\r\n  visit children in normal left to right reading order\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /*\r\n\tpublic void resolveStatements() {\r\n\t\tsuper.resolveStatements();\r\n\t\r\n//\tif (initialization!=null) {\r\n//\t\tMethodScope initializationScope = this.scope;\r\n//\t\tTypeBinding fieldType = realFieldType;\r\n//\t\tTypeBinding initializationType;\r\n//\t\tthis.initialization.setExpectedType(fieldType); // needed in case of generic method invocation\r\n//\t\tif (this.initialization instanceof ArrayInitializer) {\r\n//\t\r\n//\t\t\tif ((initializationType = this.initialization.resolveTypeExpecting(initializationScope, fieldType)) != null) {\r\n//\t\t\t\t((ArrayInitializer) this.initialization).binding = (ArrayBinding) initializationType;\r\n//\t\t\t\tthis.initialization.computeConversion(initializationScope, fieldType, initializationType);\r\n//\t\t\t}\r\n//\t\t}\r\n////\t\tSystem.err.println(\"i=>\"+initialization);\r\n////\t\tSystem.err.println(\"sasuages=>\"+initialization.resolvedType);\r\n////\t\t//initializationType = initialization.resolveType(initializationScope);\r\n////\t\tSystem.err.println(\"scope=>\"+initializationScope);\r\n//\r\n//\t\telse if ((initializationType = this.initialization.resolveType(initializationScope)) != null) {\r\n//\t\r\n//\t\t\tif (fieldType != initializationType) // must call before computeConversion() and typeMismatchError()\r\n//\t\t\t\tinitializationScope.compilationUnitScope().recordTypeConversion(fieldType, initializationType);\r\n//\t\t\tif (this.initialization.isConstantValueOfTypeAssignableToType(initializationType, fieldType)\r\n//\t\t\t\t\t|| (fieldType.isBaseType() && BaseTypeBinding.isWidening(fieldType.id, initializationType.id))\r\n//\t\t\t\t\t|| initializationType.isCompatibleWith(fieldType)) {\r\n//\t\t\t\tinitialization.computeConversion(initializationScope, fieldType, initializationType);\r\n//\t\t\t\tif (initializationType.needsUncheckedConversion(fieldType)) {\r\n//\t\t\t\t\t    initializationScope.problemReporter().unsafeTypeConversion(this.initialization, initializationType, fieldType);\r\n//\t\t\t\t}\t\t\t\t\t\t\t\t\t\r\n//\t\t\t} else if (initializationScope.isBoxingCompatibleWith(initializationType, fieldType) \r\n//\t\t\t\t\t\t\t\t|| (initializationType.isBaseType()  // narrowing then boxing ?\r\n//\t\t\t\t\t\t\t\t\t\t&& initializationScope.compilerOptions().sourceLevel >= JDK1_5 // autoboxing\r\n//\t\t\t\t\t\t\t\t\t\t&& !fieldType.isBaseType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000()\r\n//\t\t\t\t\t\t\t\t\t\t&& initialization.isConstantValueOfTypeAssignableToType(initializationType, initializationScope.environment().computeBoxingType(fieldType)))) {\r\n//\t\t\t\tthis.initialization.computeConversion(initializationScope, fieldType, initializationType);\r\n//\t\t\t} else {\r\n//\t\t\t\tinitializationScope.problemReporter().typeMismatchError(initializationType, fieldType, this);\r\n//\t\t\t}\r\n//\t//\t\t\tif (this.binding.isFinal()){ // cast from constant actual type to variable type\r\n//\t//\t\t\t\tthis.binding.setConstant(this.initialization.constant.castTo((this.binding.returnType.id << 4) + this.initialization.constant.typeID()));\r\n//\t//\t\t\t}\r\n//\t//\t\t} else {\r\n//\t//\t\t\tthis.binding.setConstant(NotAConstant);\r\n//\t\t}}\r\n\t\t\r\n\t}*/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","SelectionOnLocalName":"resolve printAsExpression printStatement org.aspectj.org.eclipse.jdt.internal.codeassist.select.SelectionOnLocalName  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","SimpleDocument":"getChar getLength get get set replace addDocumentListener removeDocumentListener addPrenotifiedDocumentListener removePrenotifiedDocumentListener addPositionCategory removePositionCategory getPositionCategories containsPositionCategory addPosition removePosition addPosition removePosition getPositions containsPosition computeIndexInCategory addPositionUpdater removePositionUpdater insertPositionUpdater getPositionUpdaters getLegalContentTypes getContentType getPartition computePartitioning addDocumentPartitioningListener removeDocumentPartitioningListener setDocumentPartitioner getDocumentPartitioner getLineLength getLineOfOffset getLineOffset getLineInformation getLineInformationOfOffset getNumberOfLines getNumberOfLines computeNumberOfLines getLegalLineDelimiters getLineDelimiter search buffer org.aspectj.org.eclipse.jdt.internal.core.util.SimpleDocument  defining interface method\r\n  defining interface method\r\n  defining interface method\r\n  defining interface method\r\n  defining interface method\r\n  defining interface method\r\n  defining interface method\r\n  defining interface method\r\n  defining interface method\r\n  defining interface method\r\n  defining interface method\r\n  defining interface method\r\n  defining interface method\r\n  defining interface method\r\n  defining interface method\r\n  defining interface method\r\n  defining interface method\r\n  defining interface method\r\n  defining interface method\r\n  defining interface method\r\n  defining interface method\r\n  defining interface method\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#getChar(int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#getLength()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#get()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#get(int, int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#set(java.lang.String)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#replace(int, int, java.lang.String)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#addDocumentListener(org.eclipse.jface.text.IDocumentListener)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#removeDocumentListener(org.eclipse.jface.text.IDocumentListener)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#addPrenotifiedDocumentListener(org.eclipse.jface.text.IDocumentListener)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#removePrenotifiedDocumentListener(org.eclipse.jface.text.IDocumentListener)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#addPositionCategory(java.lang.String)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#removePositionCategory(java.lang.String)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#getPositionCategories()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#containsPositionCategory(java.lang.String)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#addPosition(org.eclipse.jface.text.Position)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#removePosition(org.eclipse.jface.text.Position)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#addPosition(java.lang.String, org.eclipse.jface.text.Position)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#removePosition(java.lang.String, org.eclipse.jface.text.Position)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#getPositions(java.lang.String)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#containsPosition(java.lang.String, int, int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#computeIndexInCategory(java.lang.String, int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#addPositionUpdater(org.eclipse.jface.text.IPositionUpdater)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#removePositionUpdater(org.eclipse.jface.text.IPositionUpdater)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#insertPositionUpdater(org.eclipse.jface.text.IPositionUpdater, int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#getPositionUpdaters()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#getLegalContentTypes()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#getContentType(int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#getPartition(int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#computePartitioning(int, int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#addDocumentPartitioningListener(org.eclipse.jface.text.IDocumentPartitioningListener)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#removeDocumentPartitioningListener(org.eclipse.jface.text.IDocumentPartitioningListener)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#setDocumentPartitioner(org.eclipse.jface.text.IDocumentPartitioner)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#getDocumentPartitioner()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#getLineLength(int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#getLineOfOffset(int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#getLineOffset(int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#getLineInformation(int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#getLineInformationOfOffset(int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#getNumberOfLines()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#getNumberOfLines(int, int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#computeNumberOfLines(java.lang.String)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#getLegalLineDelimiters()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.eclipse.jface.text.IDocument#getLineDelimiter(int)\r\n\t */\r\n","Ajdoc":"reset setif setfile set setif setSource setSourcepath createSourcepath setSourcepathRef setSrcdir createSrcdir setSrcdirRef setDestdir setSourcefiles addFileset addFileSets setPackagenames setAccess setPackageList setClasspath createClasspath setClasspathref setBootclasspath createBootclasspath setBootclasspathref setInternalclasspath createInternalclasspath setInternalclasspathref setExtdirs createArgfiles setArgfile setArgfiles setOverview setPublic setPackage setProtected setPrivate setOld setAuthor setSplitindex setWindowtitle setDoctitle setHeader setFooter setBottom addBottom setVerbose setVersion setUse setStandard setHref setOffline setPackagelistLoc setLink createLink setLinkoffline setTitle setPackages setPackagenames setGroup createGroup setNodeprecated setNodeprecatedlist setNotree setNoindex setNohelp setNonavbar setSerialwarn setHelpfile setStylesheetfile setCharset setDocencoding setDoclet setName setValue setName setPath createPath createParam createDoclet setDocletpath createDocletpath setDocletpathRef setAdditionalparam setFailonerror setFork createJvmarg setMaxmemory execute compile map list files strings strings filterSlashes check AJDOC_CLASSNAME FORCE_FORK FORCE_FORK_VALUE cmd vmcmd sourcepath destdir sourcefiles packagenames packageList bootclasspath extdirs classpath internalclasspath argfiles docletpath links groups doclet failonerror fork source bottom fileSets href offline packagelistLoc title packages name value name path params org.aspectj.tools.ant.taskdefs.Ajdoc  todo: unsupported\r\n  todo: unsupported\r\n  todo: unsupported\r\n  support for include parameter as a MatchingTask\r\n  let ajdoc resolve sourcefiles relative to sourcepath,\r\n  XXX PR682 weak way to report errors - need to refactor\r\n  todo: doc that fork is ignored\r\n /* *******************************************************************\r\n * Copyright (c) 2000-2001 Xerox Corporation. \r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n *     2006, Arno Schmidmeier, (reactivated the source and removed deprecated calls)\r\n * ******************************************************************/\r\n","ICommandEditor":"editCommand org.aspectj.tools.ant.taskdefs.ICommandEditor /* *******************************************************************\r\n * Copyright (c) 2003 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Wes Isberg     initial implementation \r\n * ******************************************************************/\r\n","World":"accept resolve resolve resolve resolve completeBinaryType isLocallyDefined handleRequiredMissingTypeDuringResolution resolve resolve resolve resolveToReferenceType resolveGenericTypeFor makeGenericTypeFrom resolveGenericWildcardFor resolveDelegate getCoreType lookupOrCreateName lookupBySignature resolve createAdviceMunger createAdviceMunger makeCflowStackFieldAdder makeCflowCounterFieldAdder makePerClauseAspect concreteTypeMunger compareByPrecedence getPrecedenceIfAny compareByPrecedenceAndHierarchy getMessageHandler setMessageHandler showMessage setCrossReferenceHandler getCrossReferenceHandler setTypeVariableLookupScope getTypeVariableLookupScope getDeclareParents getDeclareAnnotationOnTypes getDeclareAnnotationOnFields getDeclareAnnotationOnMethods getDeclareSoft getCrosscuttingMembersSet getModel setModel getLint setLint isXnoInline setXnoInline isXlazyTjp setXlazyTjp isHasMemberSupportEnabled setXHasMemberSupportEnabled isInPinpointMode setPinpointMode setBehaveInJava5Way setErrorAndWarningThreshold isIgnoringUnusedDeclaredThrownException performExtraConfiguration getExtraConfiguration isInJava5Mode setTargetAspectjRuntimeLevel setOptionalJoinpoints isJoinpointArrayConstructionEnabled isJoinpointSynchronizationEnabled getTargetAspectjRuntimeLevel isTargettingAspectJRuntime12 put report checkq get remove isExpendable compareByPrecedence getPrecedenceIfAny compareByPrecedenceAndHierarchy equals hashCode validateType getTypeVariablesCurrentlyBeingProcessed recordTypeVariablesCurrentlyBeingProcessed forgetTypeVariablesCurrentlyBeingProcessed setAddSerialVerUID isAddSerialVerUID flush ensureAdvancedConfigurationProcessed isRunMinimalMemory shouldFastPackMethods shouldPipelineCompilation shouldGenerateStackMaps setIncrementalCompileCouldFollow couldIncrementalCompileFollow setSynchronizationPointcutsInUse areSynchronizationPointcutsInUse registerPointcutHandler getRegisteredPointcutHandlers accept resolve resolve resolve resolve completeBinaryType isLocallyDefined handleRequiredMissingTypeDuringResolution resolve resolve resolve resolveToReferenceType resolveGenericTypeFor makeGenericTypeFrom resolveGenericWildcardFor resolveDelegate getCoreType lookupOrCreateName lookupBySignature resolve createAdviceMunger createAdviceMunger makeCflowStackFieldAdder makeCflowCounterFieldAdder makePerClauseAspect concreteTypeMunger compareByPrecedence getPrecedenceIfAny compareByPrecedenceAndHierarchy getMessageHandler setMessageHandler showMessage setCrossReferenceHandler getCrossReferenceHandler setTypeVariableLookupScope getTypeVariableLookupScope getDeclareParents getDeclareAnnotationOnTypes getDeclareAnnotationOnFields getDeclareAnnotationOnMethods getDeclareSoft getCrosscuttingMembersSet getModel setModel getLint setLint isXnoInline setXnoInline isXlazyTjp setXlazyTjp isHasMemberSupportEnabled setXHasMemberSupportEnabled isInPinpointMode setPinpointMode setBehaveInJava5Way setErrorAndWarningThreshold isIgnoringUnusedDeclaredThrownException performExtraConfiguration getExtraConfiguration isInJava5Mode setTargetAspectjRuntimeLevel setOptionalJoinpoints isJoinpointArrayConstructionEnabled isJoinpointSynchronizationEnabled getTargetAspectjRuntimeLevel isTargettingAspectJRuntime12 put report checkq get remove isExpendable compareByPrecedence getPrecedenceIfAny compareByPrecedenceAndHierarchy equals hashCode validateType getTypeVariablesCurrentlyBeingProcessed recordTypeVariablesCurrentlyBeingProcessed forgetTypeVariablesCurrentlyBeingProcessed setAddSerialVerUID isAddSerialVerUID flush ensureAdvancedConfigurationProcessed isRunMinimalMemory shouldFastPackMethods shouldPipelineCompilation shouldGenerateStackMaps setIncrementalCompileCouldFollow couldIncrementalCompileFollow setSynchronizationPointcutsInUse areSynchronizationPointcutsInUse registerPointcutHandler getRegisteredPointcutHandlers messageHandler xrefHandler typeVariableLookupScope typeMap pointcutDesignators createInjarHierarchy precedenceCalculator crosscuttingMembersSet model lint XnoInline XlazyTjp XhasMember Xpinpoint behaveInJava5Way incrementalCompileCouldFollow targetAspectjRuntimeLevel optionalJoinpoint_ArrayConstruction optionalJoinpoint_Synchronization addSerialVerUID extraConfiguration checkedAdvancedConfiguration synchronizationPointcutsInUse runMinimalMemory shouldPipelineCompilation shouldGenerateStackMaps bcelRepositoryCaching fastMethodPacking completeBinaryTypes forDEBUG_structuralChangesCode forDEBUG_bridgingCode trace errorThreshold warningThreshold dumpState_cantFindTypeExceptions xsetWEAVE_JAVA_PACKAGES xsetWEAVE_JAVAX_PACKAGES xsetCAPTURE_ALL_CONTEXT xsetRUN_MINIMAL_MEMORY xsetDEBUG_STRUCTURAL_CHANGES_CODE xsetDEBUG_BRIDGING xsetBCEL_REPOSITORY_CACHING xsetPIPELINE_COMPILATION xsetGENERATE_STACKMAPS xsetPIPELINE_COMPILATION_DEFAULT xsetCOMPLETE_BINARY_TYPES xsetCOMPLETE_BINARY_TYPES_DEFAULT xsetBCEL_REPOSITORY_CACHING_DEFAULT xsetFAST_PACK_METHODS debug DONT_USE_REFS USE_WEAK_REFS USE_SOFT_REFS policy tMap expendableMap w memoryProfiling maxExpendableMapSize collectedTypes rq trace world cachedResults aspect1 aspect2 workInProgress1 messageHandler xrefHandler typeVariableLookupScope typeMap pointcutDesignators createInjarHierarchy precedenceCalculator crosscuttingMembersSet model lint XnoInline XlazyTjp XhasMember Xpinpoint behaveInJava5Way incrementalCompileCouldFollow targetAspectjRuntimeLevel optionalJoinpoint_ArrayConstruction optionalJoinpoint_Synchronization addSerialVerUID extraConfiguration checkedAdvancedConfiguration synchronizationPointcutsInUse runMinimalMemory shouldPipelineCompilation shouldGenerateStackMaps bcelRepositoryCaching fastMethodPacking completeBinaryTypes forDEBUG_structuralChangesCode forDEBUG_bridgingCode trace errorThreshold warningThreshold dumpState_cantFindTypeExceptions xsetWEAVE_JAVA_PACKAGES xsetWEAVE_JAVAX_PACKAGES xsetCAPTURE_ALL_CONTEXT xsetRUN_MINIMAL_MEMORY xsetDEBUG_STRUCTURAL_CHANGES_CODE xsetDEBUG_BRIDGING xsetBCEL_REPOSITORY_CACHING xsetPIPELINE_COMPILATION xsetGENERATE_STACKMAPS xsetPIPELINE_COMPILATION_DEFAULT xsetCOMPLETE_BINARY_TYPES xsetCOMPLETE_BINARY_TYPES_DEFAULT xsetBCEL_REPOSITORY_CACHING_DEFAULT xsetFAST_PACK_METHODS debug DONT_USE_REFS USE_WEAK_REFS USE_SOFT_REFS policy tMap expendableMap w memoryProfiling maxExpendableMapSize collectedTypes rq trace world cachedResults aspect1 aspect2 workInProgress1 org.aspectj.weaver.World org.aspectj.weaver.World  Signature to ResolvedType\r\n  Command line flag: \"-Xjoinpoints:arrayconstruction\"\r\n  Command line flag: \"-Xjoinpoints:synchronization\"\r\n  Xset'table options\r\n  visitor.visitList(extraConfiguration.);\r\n  IMessage msg = null;\r\n  special resolution processing for already resolved types.\r\n  don't do this for other unresolved types otherwise you'll end up in a loop\r\n  after updating the world\r\n  TODO ought to be shared single instance representing this\r\n  Set the world for the RTX\r\n  String brackets = signature.substring(0,signature.lastIndexOf(\"[\")+1);\r\n  no existing resolved type, create one\r\n  Pulling in the type may have already put the right entry in the map\r\n  WeaverMessages.format(WeaverMessages.CANT_FIND_TYPE,ty.getName()));\r\n  limit growth\r\n  until type variables have proper sigs...\r\n  trace.enter(\"resolve\", this, new Object[] {name});\r\n  trace.exit(\"resolve\", ret);\r\n  ======= simple and raw types ===============\r\n  ResolvedType.MISSING;\r\n  if (delegate == null) return ResolvedType.MISSING;\r\n  ======== simple type =========\r\n  ======== raw type ===========\r\n  name = ReferenceType.fromTypeX(UnresolvedType.forRawTypeNames(ty.getName()),this);\r\n  ======= generic wildcard types =============\r\n  ======= generic types ======================\r\n  ======= parameterized types ================\r\n  Look up the raw type by signature\r\n  being referenced, e.g. java.util.List\r\n  type variables.\r\n  Fault in the generic that underpins the raw type ;)\r\n  must be ? on its own!\r\n  FIXME asc doesnt take account of additional interface bounds (e.g. ? super R & Serializable - can you do that?)\r\n  OPTIMIZE streamline path for core types? They are just simple types, could look straight in the typemap?\r\n  which is ASTNode.bit24\r\n  Bunch of name value pairs to split\r\n  default false - controls LTW\r\n  default false - controls LTW\r\n  default false\r\n  default true\r\n  default false\r\n  default false\r\n  default TRUE\r\n  pr116679\r\n  System.err.println(\"Asked if targetting runtime 1.2 , returning: \"+b);\r\n  OPTIMIZE are users falling foul of not supplying -1.5 and so targetting the old runtime?\r\n  Hang around forever\r\n  Collected asap\r\n  Collected when short on memory\r\n  SECRETAPI - Can switch to a policy of choice ;)\r\n  Map of types that never get thrown away\r\n  Map of types that may be ejected from the cache if we need space\r\n  profiling tools...\r\n  !w.getMessageHandler().isIgnoring(Message.INFO);\r\n  bounds is a member type variable\r\n  Dont use reference queue for tracking if not profiling...\r\n  Records the declare precedence statement that gives the first ordering\r\n  so we can't :(\r\n  Check *once* whether the user has switched asm support off\r\n  Signature to ResolvedType\r\n  Command line flag: \"-Xjoinpoints:arrayconstruction\"\r\n  Command line flag: \"-Xjoinpoints:synchronization\"\r\n  Xset'table options\r\n  visitor.visitList(extraConfiguration.);\r\n  IMessage msg = null;\r\n  special resolution processing for already resolved types.\r\n  don't do this for other unresolved types otherwise you'll end up in a loop\r\n  after updating the world\r\n  TODO ought to be shared single instance representing this\r\n  Set the world for the RTX\r\n  String brackets = signature.substring(0,signature.lastIndexOf(\"[\")+1);\r\n  no existing resolved type, create one\r\n  Pulling in the type may have already put the right entry in the map\r\n  WeaverMessages.format(WeaverMessages.CANT_FIND_TYPE,ty.getName()));\r\n  limit growth\r\n  until type variables have proper sigs...\r\n  trace.enter(\"resolve\", this, new Object[] {name});\r\n  trace.exit(\"resolve\", ret);\r\n  ======= simple and raw types ===============\r\n  ResolvedType.MISSING;\r\n  if (delegate == null) return ResolvedType.MISSING;\r\n  ======== simple type =========\r\n  ======== raw type ===========\r\n  name = ReferenceType.fromTypeX(UnresolvedType.forRawTypeNames(ty.getName()),this);\r\n  ======= generic wildcard types =============\r\n  ======= generic types ======================\r\n  ======= parameterized types ================\r\n  Look up the raw type by signature\r\n  being referenced, e.g. java.util.List\r\n  type variables.\r\n  Fault in the generic that underpins the raw type ;)\r\n  must be ? on its own!\r\n  FIXME asc doesnt take account of additional interface bounds (e.g. ? super R & Serializable - can you do that?)\r\n  OPTIMIZE streamline path for core types? They are just simple types, could look straight in the typemap?\r\n  which is ASTNode.bit24\r\n  Bunch of name value pairs to split\r\n  default false - controls LTW\r\n  default false - controls LTW\r\n  default false\r\n  default true\r\n  default false\r\n  default false\r\n  default TRUE\r\n  pr116679\r\n  System.err.println(\"Asked if targetting runtime 1.2 , returning: \"+b);\r\n  OPTIMIZE are users falling foul of not supplying -1.5 and so targetting the old runtime?\r\n  Hang around forever\r\n  Collected asap\r\n  Collected when short on memory\r\n  SECRETAPI - Can switch to a policy of choice ;)\r\n  Map of types that never get thrown away\r\n  Map of types that may be ejected from the cache if we need space\r\n  profiling tools...\r\n  !w.getMessageHandler().isIgnoring(Message.INFO);\r\n  bounds is a member type variable\r\n  Dont use reference queue for tracking if not profiling...\r\n  Records the declare precedence statement that gives the first ordering\r\n  so we can't :(\r\n  Check *once* whether the user has switched asm support off\r\n /* String -> ResolvedType */\r\n /*\r\n\t * Map of types in the world, can have 'references' to expendable ones which can be garbage collected to recover memory. An\r\n\t * expendable type is a reference type that is not exposed to the weaver (ie just pulled in for type resolution purposes).\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n *               2005 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation\r\n *     Adrian Colyer, Andy Clement, overhaul for generics \r\n * ******************************************************************/\r\n /* String -> ResolvedType */\r\n /*\r\n\t * Map of types in the world, can have 'references' to expendable ones which can be garbage collected to recover memory. An\r\n\t * expendable type is a reference type that is not exposed to the weaver (ie just pulled in for type resolution purposes).\r\n\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n *               2005 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation\r\n *     Adrian Colyer, Andy Clement, overhaul for generics \r\n * ******************************************************************/\r\n","ClassSignature":"getTypeName toString className org.aspectj.org.eclipse.jdt.internal.compiler.env.ClassSignature  $NON-NLS-1$\r\n","DeclareAtConstructorDeclaration":"clone0 subtreeMatch0 accept0 internalModifiersProperty internalModifiers2Property internalJavadocProperty propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty internalPatternNodeProperty internalAnnotationNameProperty JAVADOC_PROPERTY PATTERN_PROPERTY ANNOTATION_NAME_PROPERTY PROPERTY_DESCRIPTORS org.aspectj.org.eclipse.jdt.core.dom.DeclareAtConstructorDeclaration  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  allow default implementation to flag the error\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /*\r\n\t * (omit javadoc for this method) Method declared on BodyDeclaration.\r\n\t * \r\n\t * There are no modifiers declared for DeclareErrorDeclaration - therefore\r\n\t * we don't do anything with this\r\n\t */\r\n /*\r\n\t * (omit javadoc for this method) Method declared on BodyDeclaration.\r\n\t * \r\n\t * There are no modifiers declared for DeclareErrorDeclaration - therefore\r\n\t * we don't do anything with this\r\n\t */\r\n /*\r\n\t * (omit javadoc for this method) Method declared on BodyDeclaration.\r\n\t */\r\n /*\r\n\t * (omit javadoc for this method) Method declared on ASTNode.\r\n\t */\r\n /*\r\n\t * (omit javadoc for this method) Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on DeclareAnnotationDeclaration.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on DeclareAnnotationDeclaration.\r\n\t */\r\n","IntLiteral":"computeConstant generateCode literalType mayRepresentMIN_VALUE resolveType printExpression traverse value One FORMAT_ERROR org.aspectj.org.eclipse.jdt.internal.compiler.ast.IntLiteral  used for ++ and --\r\n  NaN;\r\n  sourceEnd = 0;\r\n  -----------regular case : radix = 10-----------\r\n  a long in order to be positive !\r\n  jump over redondant zero\r\n  watch for 000000000000000000\r\n /* special optimized IntLiteral that are created by the compiler */\r\n","Member":"areSimilarMethods convertConstant findMethods getCategories getClassFile getDeclaringType getFlags getHandleFromMemento getHandleMementoDelimiter getOuterMostLocalContext getJavadocRange getNameRange getType getTypeRoot isBinary isMainMethod isReadOnly readableName updateNameRange getKind resolve compareTo getDeclaringType getReturnType getGenericReturnType getGenericParameterTypes getType getName getParameterTypes getSignature getJoinPointSignatures getArity getParameterSignature getModifiers getModifiers isStatic isInterface isPrivate canBeParameterized getAnnotations getDeclaringTypes getParameterNames getExceptions getKind resolve compareTo getDeclaringType getReturnType getGenericReturnType getGenericParameterTypes getType getName getParameterTypes getSignature getJoinPointSignatures getArity getParameterSignature getModifiers getModifiers isStatic isInterface isPrivate canBeParameterized getAnnotations getDeclaringTypes getParameterNames getExceptions NONE METHOD FIELD CONSTRUCTOR STATIC_INITIALIZATION POINTCUT ADVICE HANDLER MONITORENTER MONITOREXIT NO_PARAMETER_ANNOTATIONXS NO_PARAMETER_ANNOTATION_TYPES NONE METHOD FIELD CONSTRUCTOR STATIC_INITIALIZATION POINTCUT ADVICE HANDLER MONITORENTER MONITOREXIT NO_PARAMETER_ANNOTATIONXS NO_PARAMETER_ANNOTATION_TYPES org.aspectj.org.eclipse.jdt.internal.core.Member org.aspectj.weaver.Member org.aspectj.weaver.Member  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  JEM_COUNT\r\n  JEM_COUNT\r\n  JEM_COUNT\r\n  JEM_COUNT\r\n  JEM_COUNT\r\n  done recursing\r\n  cannot be a local context\r\n  these elements can define local members\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n * Helper method for SourceType.findMethods and BinaryType.findMethods\r\n */\r\n /*\r\n * @see JavaElement\r\n */\r\n /*\r\n * Returns the outermost context defining a local element. Per construction, it can only be a\r\n * method/field/initializarer member; thus, returns null if this member is already a top-level type or member type.\r\n * e.g for X.java/X/Y/foo()/Z/bar()/T, it will return X.java/X/Y/foo()\r\n */\r\n /* ResolvedType */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n *               2005 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation\r\n *     AMC      extracted as interface \r\n * ******************************************************************/\r\n /* ResolvedType */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n *               2005 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation\r\n *     AMC      extracted as interface \r\n * ******************************************************************/\r\n","LoopingFlowContext":"complainOnDeferredFinalChecks complainOnDeferredNullChecks continueLabel individualToString isContinuable isContinuedTo recordBreakTo recordContinueFrom recordFinalAssignment recordNullReference recordUsingNullReference removeFinalAssignmentIfAny continueLabel initsOnContinue upstreamNullFlowInfo innerFlowContexts innerFlowInfos innerFlowContextsCount breakTargetContexts breakTargetsCount finalAssignments finalVariables assignCount nullLocals nullReferences nullCheckTypes nullCount associatedScope org.aspectj.org.eclipse.jdt.internal.compiler.flow.LoopingFlowContext  children will defer to this, which may defer to its own parent\r\n  remember if have complained on this final assignment\r\n  could also be reported again\r\n  complain on final assignments in loops\r\n  final local variable\r\n  check inconsistent null checks on outermost looping context\r\n  final local variable\r\n  check only immutable null checks on innermost looping context\r\n  propagate breaks\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  do not consider variables which are defined inside this loop\r\n","AnnotationNameValuePair":"getName getValue toString stringify getName getValue toString stringify name val name val org.aspectj.weaver.AnnotationNameValuePair org.aspectj.weaver.AnnotationNameValuePair /* *******************************************************************\r\n * Copyright (c) 2006 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement IBM     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2006 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Andy Clement IBM     initial implementation \r\n * ******************************************************************/\r\n","StructureTreeManager":"highlightNode getSelectedIProgramElement scrollToHighlightedNode highlightNode updateTree getStructureTree expandTreeToFiles expandTree valueForPathChanged structureTree cellRenderer treeListener NO_STRUCTURE_MODEL serialVersionUID org.aspectj.ajde.ui.swing.StructureTreeManager  if (fileView) {\r\n  }\r\n  SwingTreeViewNode currNode;\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation\r\n *     Helen Hawkins  Converted to new interface (bug 148190)  \r\n * ******************************************************************/\r\n","ICompilerRequestor":"acceptResult org.aspectj.org.eclipse.jdt.internal.compiler.ICompilerRequestor","AjASTMatcher":"match match match match match match match match match match match match match match match match match match org.aspectj.org.eclipse.jdt.core.dom.AjASTMatcher  ajh02: method added\r\n  int level = node.getAST().apiLevel;\r\n  ajh02: stub, should look at the type pattern\r\n  ajh02: method added\r\n  afterReturning and afterThrowing\r\n  ajh02: method added\r\n  int level = node.getAST().apiLevel;\r\n  ajh02: method added\r\n  ajh02: method added\r\n  n.b. compare type parameters even for constructors\r\n  n.b. compare return type even for constructors\r\n","StructureViewTreeListener":"valueChanged mouseEntered mouseExited mousePressed mouseReleased mouseClicked navigate tree lastSelectedNode org.aspectj.ajde.ui.swing.StructureViewTreeListener  if (e.getClickCount() == 2) {\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","VerificationTypeInfo":"setBinding id toString clone equals constantPoolName readableName replaceWithElementType ITEM_TOP ITEM_INTEGER ITEM_FLOAT ITEM_DOUBLE ITEM_LONG ITEM_NULL ITEM_UNINITIALIZED_THIS ITEM_OBJECT ITEM_UNINITIALIZED tag id constantPoolName offset org.aspectj.org.eclipse.jdt.internal.compiler.codegen.VerificationTypeInfo  $NON-NLS-1$  $NON-NLS-1$","MemberKind":"read read org.aspectj.weaver.MemberKind org.aspectj.weaver.MemberKind /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","WeavingAdaptor":"getFullClassPath getFullAspectPath getVerbose init createMessageHandler getMessageHandler getMessageHolder setMessageHandler disable enable isEnabled addURL weaveClass weaveClass couldWeave accept shouldDump shouldWeaveName shouldWeaveAnnotationStyleAspect ensureDelegateInitialized getWovenBytes getAtAspectJAspectBytes registerAspectLibraries addAspectLibrary makeClasspath debug info warn warn error error getContextId dump getDumpDir traceMessage render flushMessages setDelegate handleMessage isIgnoring dontIgnore ignore getUnmodifiableListView handleMessage isIgnoring ignore dontIgnore render setApplyAtAspectJMungersOnly isApplyAtAspectJMungersOnly getBytes getClassFileIterator getRequestor getFullClassPath getFullAspectPath getVerbose init createMessageHandler getMessageHandler getMessageHolder setMessageHandler disable enable isEnabled addURL weaveClass weaveClass couldWeave accept shouldDump shouldWeaveName shouldWeaveAnnotationStyleAspect ensureDelegateInitialized getWovenBytes getAtAspectJAspectBytes registerAspectLibraries addAspectLibrary makeClasspath debug info warn warn error error getContextId dump getDumpDir traceMessage render flushMessages setDelegate handleMessage isIgnoring dontIgnore ignore getUnmodifiableListView handleMessage isIgnoring ignore dontIgnore render setApplyAtAspectJMungersOnly isApplyAtAspectJMungersOnly getBytes getClassFileIterator getRequestor WEAVING_ADAPTOR_VERBOSE SHOW_WEAVE_INFO_PROPERTY TRACE_MESSAGES_PROPERTY enabled verbose bcelWorld weaver messageHandler messageHolder abortOnError generatedClassHandler generatedClasses delegateForCurrentClass weavingSpecialTypes INITIALIZED WEAVE_JAVA_PACKAGE WEAVE_JAVAX_PACKAGE trace delegate savedMessages traceMessages ignoring failKind unwovenClass unwovenClasses wovenClass isApplyAtAspectJMungersOnly WEAVING_ADAPTOR_VERBOSE SHOW_WEAVE_INFO_PROPERTY TRACE_MESSAGES_PROPERTY enabled verbose bcelWorld weaver messageHandler messageHolder abortOnError generatedClassHandler generatedClasses delegateForCurrentClass weavingSpecialTypes INITIALIZED WEAVE_JAVA_PACKAGE WEAVE_JAVAX_PACKAGE trace delegate savedMessages traceMessages ignoring failKind unwovenClass unwovenClasses wovenClass isApplyAtAspectJMungersOnly org.aspectj.weaver.tools.WeavingAdaptor org.aspectj.weaver.tools.WeavingAdaptor  lazily initialized, should be used to prevent parsing bytecode multiple times\r\n  System.err.println(\"? WeavingAdaptor.<init>(\" + loader +\",\" + aspectURLs.length + \")\");\r\n  System.err.println(\"? WeavingAdaptor.<init>()\");\r\n  $NON-NLS-1$\r\n  an @AspectJ aspect needs to be at least munged by the aspectOf munger\r\n  and not be included in the full set of aspects being applied by 'this' weaver\r\n  ATAJ\r\n  initialize it\r\n  JDK reflect\r\n  || name.startsWith(\"$Proxy\")  else\r\n  System.err.println(\"? WeavingAdaptor.registerAspectLibraries(\" + aspectPath + \")\");\r\n  System.out.println(\"WeavingAdaptor.dump() fileName=\" + new File(fileName).getAbsolutePath());\r\n  System.err.println(\"? WeavingAdaptorMessageHolder.getUnmodifiableListView() savedMessages=\" + savedMessages);\r\n  boolean result =\r\n  lazily initialized, should be used to prevent parsing bytecode multiple times\r\n  System.err.println(\"? WeavingAdaptor.<init>(\" + loader +\",\" + aspectURLs.length + \")\");\r\n  System.err.println(\"? WeavingAdaptor.<init>()\");\r\n  $NON-NLS-1$\r\n  an @AspectJ aspect needs to be at least munged by the aspectOf munger\r\n  and not be included in the full set of aspects being applied by 'this' weaver\r\n  ATAJ\r\n  initialize it\r\n  JDK reflect\r\n  || name.startsWith(\"$Proxy\")  else\r\n  System.err.println(\"? WeavingAdaptor.registerAspectLibraries(\" + aspectPath + \")\");\r\n  System.out.println(\"WeavingAdaptor.dump() fileName=\" + new File(fileName).getAbsolutePath());\r\n  System.err.println(\"? WeavingAdaptorMessageHolder.getUnmodifiableListView() savedMessages=\" + savedMessages);\r\n  boolean result =\r\n /*\r\n\t * Register an aspect library with this classloader for use during\r\n\t * weaving. This class loader will also return (unmodified) any of the\r\n\t * classes in the library in response to a <code>findClass()</code> request.\r\n\t * The library is not required to be on the weavingClasspath given when this\r\n\t * classloader was constructed. \r\n\t * @param aspectLibraryJarFile a jar file representing an aspect library\r\n\t * @throws IOException\r\n\t */\r\n /* List<UnovenClassFile> */\r\n /* Classes generated by weaver e.g. around closure advice */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Matthew Webster, Adrian Colyer, \r\n *     Martin Lippert     initial implementation \r\n * ******************************************************************/\r\n /*\r\n\t * Register an aspect library with this classloader for use during\r\n\t * weaving. This class loader will also return (unmodified) any of the\r\n\t * classes in the library in response to a <code>findClass()</code> request.\r\n\t * The library is not required to be on the weavingClasspath given when this\r\n\t * classloader was constructed. \r\n\t * @param aspectLibraryJarFile a jar file representing an aspect library\r\n\t * @throws IOException\r\n\t */\r\n /* List<UnovenClassFile> */\r\n /* Classes generated by weaver e.g. around closure advice */\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Matthew Webster, Adrian Colyer, \r\n *     Martin Lippert     initial implementation \r\n * ******************************************************************/\r\n","QualifiedAllocationExpression":"analyseCode enclosingInstance generateCode isSuperAccess manageEnclosingInstanceAccessIfNecessary printExpression resolveType traverse enclosingInstance anonymousType superTypeBinding org.aspectj.org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression  qualification may be on both side\r\n  analyse the enclosing instance\r\n  check captured variables are initialized in current context (26134)\r\n  process arguments\r\n  analyse the anonymous nested type\r\n  record some dependency information for exception types\r\n  check exception handling\r\n  push enum constant name and ordinal\r\n  null for enum constant body\r\n  better highlight for allocation: display the type individually\r\n  handling innerclass instance allocation - enclosing instance arguments\r\n  generate the arguments for constructor\r\n  handling innerclass instance allocation - outer local arguments\r\n  synthetic accessor got some extra arguments appended to its signature, which need values\r\n  invoke constructor\r\n  conversion only generated if unboxing\r\n  necessary to lookup super constructor of anonymous type\r\n  locally propagate, since we already now the desired shape for sure\r\n  perform some extra emulation work in case there is some and we are inside a local type only\r\n  added for code assist...cannot occur with 'normal' code\r\n  disallow new X<String>.Y<Integer>()\r\n  isStatic() is answering true for toplevel types\r\n  initialization of an enum constant\r\n  will check later on\r\n  error already reported\r\n  resolve type arguments (for generic constructor call)\r\n  will check for null after args are resolved\r\n  will check later on\r\n  record a best guess, for clients who need hint about possible contructor match\r\n  replace args with errors with null type\r\n  shouldn't return generic method outside its context, rather convert it to raw method (175409)\r\n  ignore cases where method is used from within inside itself (e.g. direct recursions)\r\n  record the closest match, for clients who may still need hint about possible method match\r\n  limit of fault-tolerance\r\n  qualified allocation with no anonymous type\r\n  The enclosing instance must be compatible with the innermost enclosing type\r\n  must call before computeConversion() and typeMismatchError()\r\n  tolerate enum constant body\r\n  an anonymous class inherits from java.lang.Object when declared \"after\" an interface\r\n  insert anonymous type in scope\r\n  find anonymous super constructor\r\n  Update the anonymous inner class : superclass, interface\r\n  1.2 change\r\n  case of enum constant\r\n /* Inner emulation consists in either recording a dependency \r\n\t * link only, or performing one level of propagation.\r\n\t *\r\n\t * Dependency mechanism is used whenever dealing with source target\r\n\t * types, since by the time we reach them, we might not yet know their\r\n\t * exact need.\r\n\t */\r\n","AjBuildConfig":"toString equals hashCode getFiles getBinaryFiles getOutputDir getCompilationResultDestinationManager setCompilationResultDestinationManager setFiles setOutputDir getOptions getClasspath setClasspath getBootclasspath setBootclasspath getOutputJar getOutxmlName getInpath getInJars getSourcePathResources setOutputJar setOutxmlName setInJars setInPath getSourceRoots setSourceRoots getConfigFile setConfigFile setIncrementalMode isIncrementalMode setIncrementalFile isIncrementalFileMode getFullClasspath getLintSpecFile setLintSpecFile getAspectpath setAspectpath hasSources installGlobals join join setSourcePathResources shouldProceed doNotProceed getLintMode setLintMode isTerminateAfterCompilation setTerminateAfterCompilation isXserializableAspects setXserializableAspects setXJoinpoints getXJoinpoints isXnoInline setXnoInline isXlazyTjp setXlazyTjp setXnotReweavable setXconfigurationInfo getXconfigurationInfo setXHasMemberSupport isXHasMemberEnabled setXdevPinpointMode isXdevPinpoint setAddSerialVerUID isAddSerialVerUID isXNotReweavable isGenerateJavadocsInModelMode setGenerateJavadocsInModelMode isGenerateCrossRefsMode setGenerateCrossRefsMode isCheckRuntimeVersion setCheckRuntimeVersion isEmacsSymMode setEmacsSymMode isGenerateModelMode setGenerateModelMode isNoAtAspectJAnnotationProcessing setNoAtAspectJAnnotationProcessing setShowWeavingInformation getShowWeavingInformation setProceedOnError getProceedOnError setBehaveInJava5Way getBehaveInJava5Way setTargetAspectjRuntimeLevel getTargetAspectjRuntimeLevel setChanged getChanged setModifiedFiles getModifiedFiles setClasspathElementsWithModifiedContents getClasspathElementsWithModifiedContents shouldProceed AJLINT_IGNORE AJLINT_WARN AJLINT_ERROR AJLINT_DEFAULT outputDir outputJar outxmlName compilationResultDestinationManager sourceRoots changedFiles files binaryFiles inJars inPath sourcePathResources aspectpath classpath bootclasspath cpElementsWithModifiedContents configFile lintMode lintSpecFile changes options incrementalMode incrementalFile fromInPathDirectory binSrc org.aspectj.ajdt.internal.core.builder.AjBuildConfig  .class files in indirs...\r\n  bitflags, see CompilerConfigurationChangeFlags\r\n  incremental variants handled by the compiler client, but parsed here\r\n  XXX setters don't respect javadoc contract...\r\n  Elements of the list are either archives (jars  remember all the class files in directories on the inpath\r\n  XXX Is it OK that boot classpath overrides inpath  }\r\n  pr244321\r\n  XXX correct?\r\n  if (override || (null == local.get(key))) {  /* File */\r\n /* File */\r\n /* File */\r\n /* File */\r\n /* File */\r\n /* File */\r\n /* String->File */\r\n /* File */\r\n /* String */\r\n /* String */\r\n /* String */\r\n /* File */\r\n /* BinarySourceFile */\r\n /* File */\r\n /* File */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n *     Adrian Colyer  added constructor to populate javaOptions with\r\n * \t\t\t\t\t  default settings - 01.20.2003\r\n * \t\t\t\t\t  Bugzilla #29768, 29769\r\n * ******************************************************************/\r\n","PostfixExpression":"toString toOperator propertyDescriptors internalStructuralPropertiesForType internalGetSetObjectProperty internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getOperator setOperator getOperand setOperand memSize treeSize generateCode operatorToString printExpressionNoParenthesis restrainUsageToNumericTypes traverse token INCREMENT DECREMENT CODES OPERATOR_PROPERTY OPERAND_PROPERTY PROPERTY_DESCRIPTORS operator operand org.aspectj.org.eclipse.jdt.core.dom.PostfixExpression org.aspectj.org.eclipse.jdt.internal.compiler.ast.PostfixExpression  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  lazy init must be thread-safe for readers\r\n  treat Operator as free\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","BufferCache":"close closeBuffers newInstance buffersToClose org.aspectj.org.eclipse.jdt.internal.core.BufferCache  see https:","CFlow":"getAspect setAspect get getAspect setAspect get getAspect setAspect get _aspect _aspect _aspect org.aspectj.runtime.CFlow org.aspectj.runtime.CFlow org.aspectj.runtime.CFlow /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","PublicScanner":"atEnd checkTaskTag getCurrentIdentifierSource getCurrentTokenEndPosition getCurrentTokenSource getCurrentTokenString getCurrentTokenSourceString getCurrentStringLiteral getRawTokenSource getRawTokenSourceEnd getCurrentTokenStartPosition getLineEnd getLineEnds getLineStart getNextChar getNextCharWithBoundChecks getNextChar getNextChar getNextCharAsDigit getNextCharAsDigit getNextCharAsJavaIdentifierPartWithBoundCheck getNextCharAsJavaIdentifierPart scanIdentifier getNextToken getNextUnicodeChar getNLSTags getSource jumpOverMethodBody jumpOverUnicodeWhiteSpace optimizedCurrentTokenSource1 optimizedCurrentTokenSource2 optimizedCurrentTokenSource3 optimizedCurrentTokenSource4 optimizedCurrentTokenSource5 optimizedCurrentTokenSource6 parseTags extractInt pushLineSeparator pushUnicodeLineSeparator recordComment resetTo scanEscapeCharacter scanIdentifierOrKeywordWithBoundCheck scanIdentifierOrKeyword internalScanIdentifierOrKeyword scanNumber getLineNumber setSource setSource setSource toString toStringAction unicodeInitializeBuffer unicodeStore sourceLevel complianceLevel useAssertAsAnIndentifier containsAssertKeyword useEnumAsAnIndentifier recordLineSeparator currentCharacter startPosition currentPosition initialPosition eofPosition tokenizeComments tokenizeWhiteSpace source withoutUnicodeBuffer withoutUnicodePtr unicodeAsBackSlash scanningFloatLiteral COMMENT_ARRAYS_SIZE commentStops commentStarts commentTagStarts commentPtr lastCommentLinePosition foundTaskTags foundTaskMessages foundTaskPriorities foundTaskPositions foundTaskCount taskTags taskPriorities isTaskCaseSensitive diet lineEnds linePtr wasAcr END_OF_SOURCE INVALID_HEXA INVALID_OCTAL INVALID_CHARACTER_CONSTANT INVALID_ESCAPE INVALID_INPUT INVALID_UNICODE_ESCAPE INVALID_FLOAT INVALID_LOW_SURROGATE INVALID_HIGH_SURROGATE NULL_SOURCE_STRING UNTERMINATED_STRING UNTERMINATED_COMMENT INVALID_CHAR_IN_STRING INVALID_DIGIT EMPTY_LINE_ENDS charArray_a charArray_b charArray_c charArray_d charArray_e charArray_f charArray_g charArray_h charArray_i charArray_j charArray_k charArray_l charArray_m charArray_n charArray_o charArray_p charArray_q charArray_r charArray_s charArray_t charArray_u charArray_v charArray_w charArray_x charArray_y charArray_z initCharArray TableSize InternalTableSize OptimizedLength charArray_length TAG_PREFIX TAG_PREFIX_LENGTH TAG_POSTFIX TAG_POSTFIX_LENGTH nlsTags nlsTagsPtr checkNonExternalizedStringLiterals returnOnlyGreater newEntry2 newEntry3 newEntry4 newEntry5 newEntry6 insideRecovery RoundBracket SquareBracket CurlyBracket BracketKinds LOW_SURROGATE_MIN_VALUE HIGH_SURROGATE_MIN_VALUE HIGH_SURROGATE_MAX_VALUE LOW_SURROGATE_MAX_VALUE org.aspectj.org.eclipse.jdt.internal.core.util.PublicScanner  1.4 feature\r\n  flag indicating if processed source contains occurrences of keyword assert\r\n  1.5 feature\r\n  of a entire very large stream\r\n  unicode support\r\n  when == 0 ==> no unicode in the current token\r\n  support for   no comment test with commentPtr value -1\r\n  task tag support\r\n  diet parsing support - jump over some method body when requested\r\n  remember the position of the cr  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  ----------------optimized identifier managment------------------\r\n  30*6 =210 entries\r\n  $NON-NLS-1$\r\n  generic support\r\n  extended unicode support\r\n  only look for newer task: tags\r\n  should be '*' or '  ensure tag is not leaded with letter if tag starts with a letter\r\n  case insensitive check\r\n  case sensitive check\r\n  ensure tag is not followed with letter if tag finishes with a letter\r\n  will be incremented when looping\r\n  check for tag occurrence only if not ambiguous with javadoc tag\r\n  retrieve message start and end positions\r\n  would only occur if tag is before EOF.\r\n  at most beginning of next task\r\n  see https:  trim the message\r\n  update the end position of the task\r\n  get the message source\r\n  TODO (frederic) see if we need to take unicode characters into account...\r\n  see OptimizedLength\r\n  no optimization\r\n  0 is used as a fast test flag so the real first char is in position 1\r\n  newIdentCount++;\r\n  0 is used as a fast test flag so the real first char is in position 1\r\n  0 is used as a fast test flag so the real first char is in position 1\r\n  2 is 1 (real start) + 1 (to jump over the \")\r\n  0 is used as a fast test flag so the real first char is in position 1\r\n  2 is 1 (real start) + 1 (to jump over the \")\r\n  next line start one character behind the lineEnd of the previous line\r\n  return a bounded copy of this.lineEnds\r\n  next line start one character behind the lineEnd of the previous line\r\n  handle the obvious case upfront\r\n  -------------end unicode traitement--------------\r\n  handle the obvious case upfront\r\n  ALL getNextChar.... ARE OPTIMIZED COPIES\r\n  handle the obvious case upfront\r\n  ALL getNextChar.... ARE OPTIMIZED COPIES\r\n  handle the obvious case upfront\r\n  ALL getNextChar.... ARE OPTIMIZED COPIES\r\n  ALL getNextChar.... ARE OPTIMIZED COPIES\r\n  handle the obvious case upfront\r\n  Unicode 4 detection\r\n  illegal low surrogate\r\n  ALL getNextChar.... ARE OPTIMIZED COPIES\r\n  handle the obvious case upfront\r\n  Unicode 4 detection\r\n  illegal low surrogate\r\n  loop for jumping over comments\r\n  ---------Consume white space and handles startPosition---------\r\n  reposition scanner in case we are interested by spaces as tokens\r\n  (this.currentCharacter == ' ') || ScannerHelper.isWhitespace(this.currentCharacter);\r\n  reposition scanner in case we are interested by spaces as tokens\r\n  optimized case already checked\r\n  Unicode 4 detection\r\n  illegal low surrogate\r\n  reposition scanner in case we are interested by spaces as tokens\r\n  -----------------end switch while try--------------------\r\n  loop for jumping over comments\r\n  ---------Consume white space and handles startPosition---------\r\n  reposition scanner in case we are interested by spaces as tokens\r\n  (this.currentCharacter == ' ') || ScannerHelper.isWhitespace(this.currentCharacter);\r\n  reposition scanner in case we are interested by spaces as tokens\r\n  relocate if finding another quote fairly close: thus unicode '  relocate if finding another quote fairly close: thus unicode '  consume next character\r\n  consume next character\r\n  relocate if finding another quote fairly close: thus unicode '  relocate if finding another quote fairly close: thus unicode '  rethrow\r\n  consume next character\r\n  set current position on new line character\r\n  set current position on new line character\r\n  relocate if finding another quote fairly close: thus unicode '  consume next character\r\n  we need to compute the escape character in a separate buffer\r\n  consume next character\r\n  line comment\r\n  get the next char\r\n  handle the \\\\u case manually into comment\r\n  jump over the \\\\\r\n  get the next char\r\n  handle the \\\\u case manually into comment\r\n  get the next char\r\n  consume next character\r\n  -------------unicode traitement ------------\r\n  jump over the \\\\\r\n  handle the \\\\u case manually into comment\r\n  empty comment is not a javadoc   loop until end of comment *  fall through default case to set star to false\r\n  get next char\r\n  -------------unicode traitement ------------\r\n  handle the \\\\u case manually into comment\r\n  traditional and javadoc comment\r\n  $NON-NLS-1$\r\n  the atEnd may not be <currentPosition == source.length> if source is only some part of a real (external) stream\r\n  optimized case already checked\r\n  Unicode 4 detection\r\n  illegal low surrogate\r\n  ---------Identify the next token-------------\r\n  ALL getNextChar.... ARE OPTIMIZED COPIES\r\n  buffer all the entries that have been left aside....\r\n  need the unicode buffer\r\n  fill the buffer with the char\r\n  loop for jumping over comments\r\n  ---------Consume white space and handles startPosition---------\r\n  consume next character\r\n  consume next character\r\n  consume next character\r\n  the string cannot go further that the line\r\n  the string cannot go further that the line\r\n  consume next character\r\n  consume next character\r\n  an eof will then be generated\r\n  get the next char\r\n  handle the \\\\u case manually into comment\r\n  jump over the \\\\\r\n  get the next char\r\n  handle the \\\\u case manually into comment\r\n  line comment\r\n  traditional and javadoc comment\r\n  get the next char\r\n  consume next character\r\n  jump over the \\\\\r\n  handle the \\\\u case manually into comment\r\n  empty comment is not a javadoc   loop until end of comment *  fall through default case to set star to false\r\n  get next char\r\n  handle the \\\\u case manually into comment\r\n  optimized case already checked\r\n  Unicode 4 detection\r\n  illegal low surrogate\r\n  -------consume token until } is found---------\r\n  optimization at no speed cost of 99.5 % of the singleCharIdentifier\r\n  ---------other side---------\r\n  --------add the entry-------\r\n  (r = new char[] {c0, c1});\r\n  int hash = ((c0 << 12) + (c1<< 6) + c2) % TableSize;\r\n  ---------other side---------\r\n  --------add the entry-------\r\n  (r = new char[] {c0, c1, c2});\r\n  int hash = (int) (((((long) c0) << 18) + (c1 << 12) + (c2 << 6) + c3) % TableSize);\r\n  ---------other side---------\r\n  --------add the entry-------\r\n  (r = new char[] {c0, c1, c2, c3});\r\n  int hash = (int) (((((long) c0) << 24) + (((long) c1) << 18) + (c2 << 12) + (c3 << 6) + c4) % TableSize);\r\n  ---------other side---------\r\n  --------add the entry-------\r\n  (r = new char[] {c0, c1, c2, c3, c4});\r\n  int hash = (int)(((((long) c0) << 32) + (((long) c1) << 24) + (((long) c2) << 18) + (c3 << 12) + (c4 << 6) + c5) % TableSize);\r\n  ---------other side---------\r\n  --------add the entry-------\r\n  (r = new char[] {c0, c1, c2, c3, c4, c5});\r\n  the whole line is commented out\r\n  0 is used as a fast test flag so the real first char is in position 1\r\n  resize\r\n  see comment on isLineDelimiter(char) for the use of '\\n' and '\\r'\r\n  System.out.println(\"merge LF-\" + (this.currentPosition - 1));\r\n  must merge eventual cr followed by lf\r\n  lf 000A\r\n  System.out.println(\"look-ahead LF-\" + this.currentPosition);\r\n  look-ahead for merged cr+lf\r\n  cr 000D\r\n  must merge eventual cr followed by lf\r\n  lf 000A\r\n  cr 000D\r\n  compute position\r\n  a new comment is recorded\r\n  reset comment stack\r\n  has read \\OctalDigit --> ignore last character\r\n  has read \\OctalDigit NonOctalDigit--> ignore last character\r\n  has read \\OctalDigit NonDigit--> ignore last character\r\n  has read \\ZeroToThree OctalDigit NonOctalDigit --> ignore last character\r\n  has read \\ZeroToThree OctalDigit OctalDigit\r\n  has read \\NotZeroToThree OctalDigit Digit --> ignore last character\r\n  thus we use a direct access to the source (for regular cases).\r\n  dispatch on the second char\r\n  handle the obvious case upfront\r\n  System.out.println(\"slow>>128:  \"+ c);\r\n  System.out.println(\"slow<=128:  \"+ c);\r\n  only one char....\r\n  dispatch on the second char\r\n  handle the obvious case upfront\r\n  System.out.println(\"slow>>128:  \"+ c);\r\n  System.out.println(\"slow<=128:  \"+ c);\r\n  only one char....\r\n  abstract\r\n  assert\r\n  boolean break byte\r\n  case char catch const class continue\r\n  const is not used in java ???????\r\n  default do double\r\n  else extends\r\n  final finally float for false\r\n  goto\r\n  no goto in java are allowed, so why java removes this keyword ???\r\n  if implements import instanceof int interface\r\n  long\r\n  native new null\r\n  package private protected public\r\n  return\r\n  short static super switch synchronized strictfp\r\n  try throw throws transient this true\r\n  void volatile\r\n  while widefp\r\n  return TokenNameIdentifier;\r\n  ----------hexa-----------------\r\n  if we are in source level < 1.5 we report an integer literal\r\n  consume next character\r\n  consume next character\r\n  read decimal part\r\n  consume next character\r\n  consume next character\r\n  -------------potential octal-----------------\r\n  make the distinction between octal and float ....\r\n  consume next character\r\n  consume next character\r\n  potential octal ! ... some one may write 000099.0 ! thus 00100 < 00078.0 is true !!!!! crazy language\r\n  decimal part that can be empty\r\n  consume next character\r\n  consume next character\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$   $NON-NLS-1$\r\n /* APIs ares\r\n\t - getNextToken() which return the current type of the token\r\n\t   (this value is not memorized by the scanner)\r\n\t - getCurrentTokenSource() which provides with the token \"REAL\" source\r\n\t   (aka all unicode have been transformed into a correct char)\r\n\t - sourceStart gives the position into the stream\r\n\t - currentPosition-1 gives the sourceEnd position into the stream \r\n\t*/\r\n /*static*/\r\n /*static*/\r\n /*static*/\r\n /*comment*/\r\n /*whitespace*/\r\n /*nls*/\r\n /*sourceLevel*/\r\n /*taskTag*/\r\n /*taskPriorities*/\r\n /*\r\n * Search the source position corresponding to the end of a given line number\r\n *\r\n * Line numbers are 1-based, and relative to the scanner initialPosition. \r\n * Character positions are 0-based.\r\n *\r\n * In case the given line number is inconsistent, answers -1.\r\n */\r\n /* \\ u000a: LINE FEED               */\r\n /* \\ u000c: FORM FEED               */\r\n /* \\ u000d: CARRIAGE RETURN         */\r\n /* \\ u0009: HORIZONTAL TABULATION   */\r\n /* \\ u0020: SPACE                   */\r\n /*\r\n * External API in JavaConventions.\r\n * This is used to optimize the case where the scanner is used to scan a single identifier.\r\n * In this case, the AIOOBE is slower to handle than a bound check\r\n */\r\n /* \\ u000a: LINE FEED               */\r\n /* \\ u000c: FORM FEED               */\r\n /* \\ u000d: CARRIAGE RETURN         */\r\n /* \\ u0009: HORIZONTAL TABULATION   */\r\n /* \\ u0020: SPACE                   */\r\n /*\t\t\t\t\tif (this.sourceLevel >= ClassFileConstants.JDK1_5) {\r\n\t\t\t\t\t\treturn TokenNameAT;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn TokenNameERROR;\r\n\t\t\t\t\t}*/\r\n /*\r\n\t\t\t\t\t\t\t\t * We need to completely consume the line break\r\n\t\t\t\t\t\t\t\t */\r\n /*\r\n\t\t\t\t\t\t\t\t\tif (isJavadoc)\r\n\t\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_JAVADOC;\r\n\t\t\t\t\t\t\t\t\treturn TokenNameCOMMENT_BLOCK;\r\n\t\t\t\t\t\t\t\t\t*/\r\n /*\r\n\t\t\t\t\t\t\t\t * We need to completely consume the line break\r\n\t\t\t\t\t\t\t\t */\r\n /*\r\n * Should be used if a parse (usually a diet parse) has already been performed on the unit, \r\n * so as to get the already computed line end positions.\r\n */\r\n /*\r\n * Should be used if a parse (usually a diet parse) has already been performed on the unit, \r\n * so as to get the already computed line end positions.\r\n */\r\n","ReferenceTypeDelegate":"addAnnotation ensureDelegateConsistent isAspect isAnnotationStyleAspect isInterface isEnum isAnnotation getRetentionPolicy canAnnotationTargetType getAnnotationTargetKinds isAnnotationWithRuntimeRetention isClass isGeneric isAnonymous isNested isExposedToWeaver hasAnnotation getAnnotations getAnnotationTypes getDeclaredFields getDeclaredInterfaces getDeclaredMethods getDeclaredPointcuts getTypeVariables getPerClause getDeclares getTypeMungers getPrivilegedAccesses getModifiers getSuperclass getWeaverState getResolvedTypeX doesNotExposeShadowMungers getSourceContext getSourcefilename getDeclaredGenericSignature getOuterClass addAnnotation ensureDelegateConsistent isAspect isAnnotationStyleAspect isInterface isEnum isAnnotation getRetentionPolicy canAnnotationTargetType getAnnotationTargetKinds isAnnotationWithRuntimeRetention isClass isGeneric isAnonymous isNested isExposedToWeaver hasAnnotation getAnnotations getAnnotationTypes getDeclaredFields getDeclaredInterfaces getDeclaredMethods getDeclaredPointcuts getTypeVariables getPerClause getDeclares getTypeMungers getPrivilegedAccesses getModifiers getSuperclass getWeaverState getResolvedTypeX doesNotExposeShadowMungers getSourceContext getSourcefilename getDeclaredGenericSignature getOuterClass org.aspectj.weaver.ReferenceTypeDelegate org.aspectj.weaver.ReferenceTypeDelegate  TODO asc move to proxy\r\n  Required evil because of mutator\r\n  TODO asc move to proxy\r\n  Required evil because of mutator\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n *     Andy Clement - June 2005 - separated out from ResolvedType\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n *     Andy Clement - June 2005 - separated out from ResolvedType\r\n * ******************************************************************/\r\n","ProblemFieldBinding":"problemId problemId closestMatch org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ProblemFieldBinding","ICodeSnippetRequestor":"acceptClassFiles acceptProblem LOCAL_VAR_PREFIX DELEGATE_THIS RUN_METHOD RESULT_VALUE_FIELD RESULT_TYPE_FIELD VARIABLE CODE_SNIPPET IMPORT PACKAGE INTERNAL org.aspectj.org.eclipse.jdt.core.eval.ICodeSnippetRequestor","IRegion":"add contains getElements remove org.aspectj.org.eclipse.jdt.core.IRegion","FieldLocator":"match match matchContainer matchField matchLevelAndReportImportRef matchReference matchReportReference updateMatch reportDeclaration referenceType resolveLevel resolveLevel resolveLevel resolveLevelForType isDeclarationOfAccessedFieldsPattern org.aspectj.org.eclipse.jdt.internal.core.search.matching.FieldLocator  With static import, we can have static field reference in import reference\r\n  must be a write only access with an initializer\r\n  use the stronger match\r\n  public int match(ConstructorDeclaration node, MatchingNodeSet nodeSet) - SKIP IT\r\n  need to look everywhere to find in javadocs and static import\r\n  optimized case for length field of an array\r\n  Note there is no dynamic lookup for field access\r\n  look at field type only if declaring type is not specified\r\n  get real field binding\r\n  return the weaker match\r\n  first token\r\n  other tokens\r\n  need exact match to be able to open on type ref\r\n  element that references the field must be included in the enclosing element\r\n  We can only refine if locator has an unit scope.\r\n  cannot accept neither erasure nor compatible match\r\n  ignore length field\r\n  case of a secondary type\r\n /* (non-Javadoc)\r\n * @see org.aspectj.org.eclipse.jdt.internal.core.search.matching.PatternLocator#matchLevelAndReportImportRef(org.aspectj.org.eclipse.jdt.internal.compiler.ast.ImportReference, org.aspectj.org.eclipse.jdt.internal.compiler.lookup.Binding, org.aspectj.org.eclipse.jdt.internal.core.search.matching.MatchLocator)\r\n * Accept to report match of static field on static import\r\n */\r\n /* (non-Javadoc)\r\n * Overridden to reject unexact matches.\r\n * @see org.aspectj.org.eclipse.jdt.internal.core.search.matching.PatternLocator#updateMatch(org.aspectj.org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding, char[][][], org.aspectj.org.eclipse.jdt.internal.core.search.matching.MatchLocator)\r\n *\r\n */\r\n /* (non-Javadoc)\r\n * Resolve level for type with a given binding.\r\n */\r\n","RequestorWrapper":"acceptClassFiles acceptProblem requestor org.aspectj.org.eclipse.jdt.internal.core.eval.RequestorWrapper  marker.setAttribute(IMarker.LOCATION, \"#\" + problem.getSourceLineNumber());\r\n","EvaluationConstants":"CODE_SNIPPET_CLASS_NAME_PREFIX GLOBAL_VARS_CLASS_NAME_PREFIX PACKAGE_NAME CODE_SNIPPET_NAME ROOT_CLASS_NAME ROOT_FULL_CLASS_NAME SETRESULT_SELECTOR SETRESULT_ARGUMENTS ROOT_COMPOUND_NAME RUN_METHOD RESULT_VALUE_FIELD RESULT_TYPE_FIELD LOCAL_VAR_PREFIX DELEGATE_THIS org.aspectj.org.eclipse.jdt.internal.eval.EvaluationConstants  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n","ClassFileBasedByteCodeProvider":"getBytes unwovenClassFilesFor cf org.aspectj.ajdt.internal.compiler.ClassFileBasedByteCodeProvider  OPTIMIZE use char[] for classname\r\n","TrueLiteral":"computeConstant generateCode generateOptimizedBoolean literalType source traverse source org.aspectj.org.eclipse.jdt.internal.compiler.ast.TrueLiteral  implicit falling through the FALSE case\r\n  constant == true\r\n","CodeSignatureImpl":"getParameterTypes getParameterNames getExceptionTypes getParameterTypes getParameterNames getExceptionTypes getParameterTypes getParameterNames getExceptionTypes parameterTypes parameterNames exceptionTypes parameterTypes parameterNames exceptionTypes parameterTypes parameterNames exceptionTypes org.aspectj.runtime.reflect.CodeSignatureImpl org.aspectj.runtime.reflect.CodeSignatureImpl org.aspectj.runtime.reflect.CodeSignatureImpl /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","BoundedReferenceType":"getUpperBound getLowerBound getAdditionalBounds parameterize getInterfaceBounds hasLowerBound isExtends isSuper alwaysMatches canBeCoercedTo getSimpleName getDeclaredInterfaces isGenericWildcard addAnnotation isAspect isAnnotationStyleAspect isInterface isEnum isAnnotation isAnnotationWithRuntimeRetention isAnonymous isNested getOuterClass getRetentionPolicy canAnnotationTargetType getAnnotationTargetKinds isGeneric getDeclaredGenericSignature hasAnnotation getAnnotations getAnnotationTypes getDeclaredFields getDeclaredInterfaces getDeclaredMethods getDeclaredPointcuts getPerClause getDeclares getTypeMungers getPrivilegedAccesses getModifiers getSuperclass getWeaverState getTypeVariables ensureDelegateConsistent getUpperBound getLowerBound getAdditionalBounds parameterize getInterfaceBounds hasLowerBound isExtends isSuper alwaysMatches canBeCoercedTo getSimpleName getDeclaredInterfaces isGenericWildcard addAnnotation isAspect isAnnotationStyleAspect isInterface isEnum isAnnotation isAnnotationWithRuntimeRetention isAnonymous isNested getOuterClass getRetentionPolicy canAnnotationTargetType getAnnotationTargetKinds isGeneric getDeclaredGenericSignature hasAnnotation getAnnotations getAnnotationTypes getDeclaredFields getDeclaredInterfaces getDeclaredMethods getDeclaredPointcuts getPerClause getDeclares getTypeMungers getPrivilegedAccesses getModifiers getSuperclass getWeaverState getTypeVariables ensureDelegateConsistent lowerBound upperBound additionalInterfaceBounds isExtends isSuper lowerBound upperBound additionalInterfaceBounds isExtends isSuper org.aspectj.weaver.BoundedReferenceType org.aspectj.weaver.BoundedReferenceType  straight '?'\r\n  aCandidateType must be a supertype of lowerBound\r\n  aCandidateType must be a subtype of upperBound\r\n  it's '?'\r\n  this \"maybe matches\" that\r\n  override to include additional interface bounds...\r\n  straight '?'\r\n  aCandidateType must be a supertype of lowerBound\r\n  aCandidateType must be a subtype of upperBound\r\n  it's '?'\r\n  this \"maybe matches\" that\r\n  override to include additional interface bounds...\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2005 Contributors.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *   Adrian Colyer\t\t\tInitial implementation\r\n * ******************************************************************/\r\n","MessageUtil":"abort abort fail fail error warn debug info abort abort fail fail error warn error warn debug info printMessageCounts printMessageCounts print print print print print toShortString numMessages getMessagesExcept getMessages getMessages getKind visitMessages visitMessages visitMessages makeSelector handleMessage isIgnoring dontIgnore textIn ignore renderToString toString renderToString toString renderToString toString renderToString toString renderToString toString renderToString toString renderToString toString renderToString toString renderToString toString renderToString toString renderToString renderMessage renderMessage addExtraSourceLocations renderSourceLocation renderMessageLine renderCounts handlerPrintStream handleAll handleAll handleAllExcept handleAll abort abort fail fail error warn debug info abort abort fail fail error warn error warn debug info printMessageCounts printMessageCounts print print print print print toShortString numMessages getMessagesExcept getMessages getMessages getKind visitMessages visitMessages visitMessages makeSelector handleMessage isIgnoring dontIgnore textIn ignore renderToString toString renderToString toString renderToString toString renderToString toString renderToString toString renderToString toString renderToString toString renderToString toString renderToString toString renderToString toString renderToString renderMessage renderMessage addExtraSourceLocations renderSourceLocation renderMessageLine renderCounts handlerPrintStream handleAll handleAll handleAllExcept handleAll ABORT_NOTHING_TO_RUN FAIL_INCOMPLETE ABORT_NOMESSAGE FAIL_NOMESSAGE ERROR_NOMESSAGE WARNING_NOMESSAGE PICK_ALL PICK_ABORT PICK_DEBUG PICK_ERROR PICK_FAIL PICK_INFO PICK_WARNING PICK_ABORT_PLUS PICK_DEBUG_PLUS PICK_ERROR_PLUS PICK_FAIL_PLUS PICK_INFO_PLUS PICK_WARNING_PLUS sought floor infix MESSAGE_SCALED MESSAGE_LABEL MESSAGE_LABEL_NOLOC MESSAGE_LINE MESSAGE_LINE_FORCE_LOC MESSAGE_ALL MESSAGE_MOST MESSAGE_WIDELINE MESSAGE_TOSTRING MESSAGE_SHORT ABORT_NOTHING_TO_RUN FAIL_INCOMPLETE ABORT_NOMESSAGE FAIL_NOMESSAGE ERROR_NOMESSAGE WARNING_NOMESSAGE PICK_ALL PICK_ABORT PICK_DEBUG PICK_ERROR PICK_FAIL PICK_INFO PICK_WARNING PICK_ABORT_PLUS PICK_DEBUG_PLUS PICK_ERROR_PLUS PICK_FAIL_PLUS PICK_INFO_PLUS PICK_WARNING_PLUS sought floor infix MESSAGE_SCALED MESSAGE_LABEL MESSAGE_LABEL_NOLOC MESSAGE_LINE MESSAGE_LINE_FORCE_LOC MESSAGE_ALL MESSAGE_MOST MESSAGE_WIDELINE MESSAGE_TOSTRING MESSAGE_SHORT org.aspectj.bridge.MessageUtil org.aspectj.bridge.MessageUtil  no variants for \"info\" or \"debug\", which should always have content\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  XXX untested\r\n  ------------------ visitors to select messages\r\n  XXX revert to 256\r\n  decide between message and exception text?\r\n  XXX consider suppressing nonstandard...\r\n  matching \"]\" added below after clipping\r\n  now budget between text and loc\r\n  adjust for underutilization\r\n  no variants for \"info\" or \"debug\", which should always have content\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  XXX untested\r\n  ------------------ visitors to select messages\r\n  XXX revert to 256\r\n  decide between message and exception text?\r\n  XXX consider suppressing nonstandard...\r\n  matching \"]\" added below after clipping\r\n  now budget between text and loc\r\n  adjust for underutilization\r\n /*IMessage*/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /*IMessage*/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","InstanceofExpression":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getLeftOperand setLeftOperand getRightOperand setRightOperand memSize treeSize LEFT_OPERAND_PROPERTY RIGHT_OPERAND_PROPERTY PROPERTY_DESCRIPTORS leftOperand rightOperand org.aspectj.org.eclipse.jdt.core.dom.InstanceofExpression  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  lazy init must be thread-safe for readers\r\n  treat Operator as free\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","CaseLabel":"branch branchWide isCaseLabel isStandardLabel place placeInstruction instructionPosition org.aspectj.org.eclipse.jdt.internal.compiler.codegen.CaseLabel  Leave 4 bytes free to generate the jump offset afterwards\r\n  case label branch is already wide\r\n  add the label int the codeStream labels collection\r\n /*\r\n\t\t * Position is set. Write it if it is not a wide branch.\r\n\t\t */\r\n /*\r\n* Put down  a reference to the array at the location in the codestream.\r\n* #placeInstruction() must be performed prior to any #branch()\r\n*/\r\n /*\r\n* No support for wide branches yet\r\n*/\r\n /*\r\n* Put down  a reference to the array at the location in the codestream.\r\n*/\r\n /*\r\n* Put down  a reference to the array at the location in the codestream.\r\n*/\r\n","FormalBinding":"toString getEnd getStart getIndex getName getType toString getEnd getStart getIndex getName getType type name index start end NONE type name index start end NONE org.aspectj.weaver.patterns.FormalBinding org.aspectj.weaver.patterns.FormalBinding /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n * ******************************************************************/\r\n","SwingTreeViewNodeRenderer":"getTreeCellRendererComponent serialVersionUID org.aspectj.ajde.ui.swing.SwingTreeViewNodeRenderer /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation\r\n *     Helen Hawkins  Converted to new interface (bug 148190)  \r\n * ******************************************************************/\r\n","SetContainerOperation":"executeOperation verbose_failure verbose_update_project verbose_set_container verbose_set_container_invocation_trace containerPath affectedProjects respectiveContainers org.aspectj.org.eclipse.jdt.internal.core.SetContainerOperation  $NON-NLS-1$\r\n  filter out unmodified project containers\r\n  30920 - prevent infinite loop\r\n  filter out this project - does not reference the container path, or isnt't yet Java project\r\n  filter out this project - container did not change\r\n  reset init in progress marker\r\n  was filtered out\r\n  force resolved classpath to be recomputed\r\n  if needed, generate delta, update project ref, create markers, ...\r\n  see https:  touch project to force a build if needed\r\n  trigger model refresh\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n\t * Creates a new SetContainerOperation.\r\n\t */\r\n /*handle case where old and new containers are null (see bug 149043*/\r\n","MemberElementInfo":"getModifiers getNameSourceEnd getNameSourceStart setFlags setNameSourceEnd setNameSourceStart flags nameStart nameEnd org.aspectj.org.eclipse.jdt.internal.core.MemberElementInfo /* package */\r\n","ExtensibleURLClassLoader":"addURL findClass defineClass getBytes defineClass getPackageName addURL findClass defineClass getBytes defineClass getPackageName classPath classPath org.aspectj.weaver.bcel.ExtensibleURLClassLoader org.aspectj.weaver.bcel.ExtensibleURLClassLoader  System.err.println(\"? ExtensibleURLClassLoader.<init>() path=\" + WeavingAdaptor.makeClasspath(urls));\r\n  amc - this call was missing and is needed in\r\n  WeavingURLClassLoader chains\r\n  System.err.println(\"? ExtensibleURLClassLoader.findClass(\" + name + \")\");\r\n  System.err.println(\"? ExtensibleURLClassLoader.defineClass(\" + name + \",[\" + b.length + \"])\");\r\n  System.err.println(\"? ExtensibleURLClassLoader.<init>() path=\" + WeavingAdaptor.makeClasspath(urls));\r\n  amc - this call was missing and is needed in\r\n  WeavingURLClassLoader chains\r\n  System.err.println(\"? ExtensibleURLClassLoader.findClass(\" + name + \")\");\r\n  System.err.println(\"? ExtensibleURLClassLoader.defineClass(\" + name + \",[\" + b.length + \"])\");\r\n /*ClassPathManager.ClassFile classFile*/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Matthew Webster, Adrian Colyer, \r\n *     Martin Lippert     initial implementation \r\n * ******************************************************************/\r\n /*ClassPathManager.ClassFile classFile*/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Matthew Webster, Adrian Colyer, \r\n *     Martin Lippert     initial implementation \r\n * ******************************************************************/\r\n","EclipseFactory":"fromLookupEnvironment fromScopeLookupEnvironment getWorld showMessage fromEclipse fromTypeBindingToRTX fromEclipse getName fromBinding fromTypeVariableBinding fromBindings astForLocation getDeclareParents getDeclareAnnotationOnTypes getDeclareAnnotationOnFields getDeclareAnnotationOnMethods areTypeMungersFinished finishTypeMungers makeEclipseTypeMunger getTypeMungers makeResolvedMember makeResolvedMember makeResolvedMemberForITD makeResolvedMember makeResolvedMember makeResolvedMember makeResolvedMember makeTypeBinding isParameterizedWithTypeVariables makeTypeBinding1 lookupBinding makeTypeBindings makeReferenceBindings makeFieldBinding makeFieldBinding makeFieldBinding createSyntheticFieldBinding internalMakeFieldBinding makeMethodBinding makeMethodBinding makeMethodBinding makeMethodBinding internalMakeMethodBinding internalMakeMethodBinding makeTypeVariableBindingsFromAJTypeVariables makeTypeVariableBindingFromAJTypeVariable makeMethodBindingForCall finishedCompilationUnit addTypeBinding addTypeBindingAndStoreInWorld makeShadow makeShadow addSourceTypeBinding isXSerializableAspects fromBinding fromBinding cleanup minicleanup DEBUG debug_mungerCount buildManager lookupEnvironment xSerializableAspects world finishedTypeMungers typexToBinding rawTypeXToBinding typeVariableBindingsInProgress typeVariablesForThisMember typeVariablesForAliasRecovery baseTypeForParameterizedType indexOfTypeParameterBeingConverted currentType typeVariableToTypeBinding org.aspectj.ajdt.internal.compiler.lookup.EclipseFactory  up a raw and getting the generic type (pr115788)\r\n  System.err.println(\"resolving: \" + binding.getClass() + \", name = \" + getName(binding));\r\n  System.err.println(\"      got: \" + ret);\r\n  The first bound may be null - so default to object?\r\n  XXX doesn't handle arrays correctly (or primitives?)\r\n  first piece of generics support!\r\n  handle arrays since the component type may need special treatment too...\r\n  case let's set it correctly based on the one in the eclipse WildcardBinding\r\n  }\r\n  if (theType.isGenericWildcard() && theType.isExtends()) theType.setUpperBound(theBound);\r\n  special case where no parameters are specified!\r\n  (pr100227)\r\n  if (!baseType.isGenericType() && arguments!=null) baseType = baseType.getGenericType();\r\n  be type variables that we haven't fixed up yet.\r\n  return TypeFactory.createUnresolvedParameterizedType(parameterizedSig,baseTypeSignature,arguments);\r\n  TODO asc generics - temporary guard....\r\n  to the forGenericType() method.\r\n  anonymous local type yet, report the issue on the enclosing type\r\n  LocalTypeBinding have a name $Local$, we can get the real name by using the signature....\r\n  was: UnresolvedType.forName(getName(binding));\r\n  ??? going back and forth between strings and bindings is a waste of cycles\r\n  first, check for recursive call to this method for the same tvBinding\r\n  Check if its a type variable binding that we need to recover to an alias...\r\n  Create the UnresolvedTypeVariableReferenceType for the type variable\r\n  TODO -- what about lower bounds??\r\n  make sure that type mungers are\r\n  baseTypeMungers.addAll(getWorld().getCrosscuttingMembersSet().getLateTypeMungers());\r\n  ??? assert finishedTypeMungers != null\r\n  Convert the type variables and store them\r\n  This is the set of type variables available whilst building the resolved member...\r\n  AMC these next two lines shouldn't be needed once we sort out generic types properly in the world map\r\n  AMC these next two lines shouldn't be needed once we sort out generic types properly in the world map\r\n  looking up type variables can get us into trouble\r\n  return true if this is type variables are in the type arguments\r\n  resolution of the type parameters may known in what context it is occurring (pr114744)\r\n  translate from boundedreferencetype to WildcardBinding\r\n  Work out 'kind' for the WildcardBinding\r\n  makeTypeBindings(wut.getAdditionalBounds());\r\n  return makeTypeVariableBinding((TypeVariableReference)typeX);\r\n  Converting back to a binding from a UnresolvedType\r\n  just like the code above except it returns an array of ReferenceBindings\r\n  index\r\n  later\r\n  If there are aliases, place them in the map\r\n  index filled in later\r\n  there are no aliases\r\n  If there are aliases, place them in the map\r\n  }\r\n  key is currently the name of the type variable...is that ok?\r\n  }\r\n  Deal with the raw  pr125405\r\n  fully aware of any generics info\r\n  give it the same delegate and link it to the raw type\r\n  exposing AjBuildManager (needed by AspectDeclaration).\r\n /* UnresolvedType, TypeBinding */\r\n /* UnresolvedType, TypeBinding */\r\n /*\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * TypeVariableBinding >\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * original alias name\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t */\r\n /*\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * new\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * Integer(binding.typeVariables[\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * i].rank),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t */\r\n /* *******************************************************************\r\n * Copyright (c) 2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation\r\n *     Mik Kersten\t2004-07-26 extended to allow overloading of \r\n * \t\t\t\t\thierarchy builder\r\n * ******************************************************************/\r\n","StructureUtilities":"org.aspectj.ajde.internal.StructureUtilities /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","CommentRecorderParser":"checkComment consumeClassHeader consumeEmptyTypeDeclaration consumeInterfaceHeader containsComment endParse flushCommentsDefinedPriorTo getCommentsPositions initialize initialize initializeScanner pushOnCommentsStack resetModifiers consumeToken commentStops commentStarts commentPtr CommentIncrement org.aspectj.org.eclipse.jdt.internal.core.util.CommentRecorderParser  support for comments\r\n  no comment test with commentPtr value -1\r\n  discard obsolete comments while inside methods or fields initializer (see bug 74369)\r\n  look for @deprecated into the first javadoc comment preceeding the declaration\r\n  javadoc only (non javadoc comment have negative end positions.)\r\n  stop is one over\r\n  do not report problem before last parsed comment while recovering code...\r\n  since jdk1.2 look only in the last java doc comment...\r\n  modify the modifier source start to point at the first comment\r\n  for backward compatibility with 2.1 DOM\r\n  ignore comments before start\r\n  ignore comments after end\r\n  no comment\r\n  compute the index of the first obsolete comment\r\n  negative end position for non-javadoc comments\r\n  comment end in one char too far\r\n  flush this comment\r\n  flush this comment and shift <position> to the comment end.\r\n  no obsolete comment\r\n  store comment before flushing them\r\n  do nothing\r\n  move valid comment infos, overriding obsolete comment infos\r\n  First see if comment hasn't been already stored\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.Parser#consumeClassHeader()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.Parser#consumeEmptyTypeDeclaration()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.Parser#consumeInterfaceHeader()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.Parser#endParse(int)\r\n\t */\r\n /* (non-Javadoc)\r\n\t * Save all source comments currently stored before flushing them.\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.Parser#flushCommentsDefinedPriorTo(int)\r\n\t */\r\n /*\r\n\t * Build a n*2 matrix of comments positions.\r\n\t * For each position, 0 is for start position and 1 for end position of the comment.\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.Parser#initialize()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.Parser#initialize()\r\n\t */\r\n /*comment*/\r\n /*whitespace*/\r\n /*nls*/\r\n /*sourceLevel*/\r\n /*taskTags*/\r\n /*taskPriorities*/\r\n /* (non-Javadoc)\r\n\t * Create and store a specific comment recorder scanner.\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.Parser#initializeScanner()\r\n\t */\r\n /*\r\n\t * Push all stored comments in stack.\r\n\t */\r\n /* (non-Javadoc)\r\n\t * Save all source comments currently stored before flushing them.\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.compiler.parser.Parser#resetModifiers()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * bug 150467 - save all source comments currently stored for declare \r\n\t * statements since they haven't been saved yet and they are lost after \r\n\t * calling super.consumeToken(type) \r\n\t * @see org.aspectj.org.aspectj.org.eclipse.jdt.internal.compiler.parser.Parser#consumeToken(int)\r\n\t */\r\n","ResolvedSourceField":"getKey isResolved toStringInfo unresolved uniqueKey org.aspectj.org.eclipse.jdt.internal.core.ResolvedSourceField  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n /*\r\n\t * See class comments.\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.internal.core.SourceField#getKey()\r\n\t */\r\n /* (non-Javadoc)\r\n\t * @see org.aspectj.org.eclipse.jdt.core.IField#isResolved()\r\n\t */\r\n","LocalVariableBinding":"kind computeUniqueKey getAnnotations getScopeKey isSecret recordInitializationEndPC recordInitializationStartPC setAnnotations toString resolvedPosition UNUSED USED FAKE_USED useFlag declaringScope declaration initializationPCs initializationCount org.aspectj.org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding  for code generation (position in method context)\r\n  for flow analysis (default is UNUSED)\r\n  back-pointer to its declaring scope\r\n  for source-positions\r\n  note that the name of a variable should be chosen so as not to conflict with user ones (usually starting with a space char is all needed)\r\n  regular local variable or argument\r\n  declaring method or type\r\n  the scope can be null. See https:  scope index\r\n  variable name\r\n  annotation are already resolved\r\n  Answer whether the variable binding is a secret variable added for code gen purposes\r\n  interval still open, keep using it (108180)\r\n  reuse previous interval (its range will be augmented)\r\n  optimize cases where reopening a contiguous interval\r\n  $NON-NLS-2$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-2$   $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-2$   $NON-NLS-1$\r\n /* API\r\n\t* Answer the receiver's binding type from Binding.BindingID.\r\n\t*/\r\n /*\r\n\t * declaringUniqueKey # scopeIndex / varName\r\n\t * p.X { void foo() { int local; } } --> Lp/X;.foo()V#1/local\r\n\t */\r\n","BindingKeyParser":"getTokenSource isAtCaptureStart isAtFieldOrMethodStart isAtLocalVariableStart isAtMemberTypeStart isAtParametersEnd isAtParametersStart isAtRawTypeEnd isAtSecondaryTypeStart isAtWildcardStart isAtTypeParameterStart isAtTypeArgumentStart isAtThrownStart isAtTypeVariableStart isAtTypeWithCaptureStart nextToken skipMethodSignature skipThrownStart skipParametersStart skipParametersEnd skipTypeEnd toString consumeArrayDimension consumeBaseType consumeCapture consumeException consumeField consumeParameterizedGenericMethod consumeLocalType consumeLocalVar consumeMethod consumeModifiers consumeNonGenericType consumeMemberType consumePackage consumeParameterizedType consumeParser consumeRawType consumeScope consumeSecondaryType consumeFullyQualifiedName consumeKey consumeTopLevelType consumeType consumeTypeParameter consumeTypeVariable consumeTypeWithCapture consumeWildCard getKey hasTypeName malformedKey newParser parse parse parseFullyQualifiedName parseParameterizedMethod parseGenericType parseInnerType parseLocalVariable parseMethod parseCapture parseCaptureWildcard parseField parseThrownExceptions parseParameterizedType parseRawType parseReturnType parseSecondaryType parseTypeArgument parseTypeWithCapture parseTypeVariable parseWildcard parseWildcardBound keyStart C_THROWN PACKAGE TYPE FIELD METHOD ARRAY LOCAL_VAR FLAGS WILDCARD CAPTURE BASE_TYPE END START index start source token parsingPaused scanner hasTypeName org.aspectj.org.eclipse.jdt.internal.core.util.BindingKeyParser  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  case of field or method starting with one of the character above\r\n  base type\r\n  case of field or method starting with one of the character above\r\n  case of member type where enclosing type is parameterized\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  fully qualified name\r\n  non-generic type\r\n  raw type\r\n  parameterized type\r\n  generic type\r\n  skip \";>\"\r\n  local type in generic type\r\n  anonymous or local type\r\n  skip \";>\"\r\n /*\r\n\t * Returns the string that this binding key wraps.\r\n\t */\r\n /*top level type or member type with raw enclosing type*/\r\n","SyntheticArgumentBinding":"actualOuterLocalVariable matchingField org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SyntheticArgumentBinding  if the argument is mapping to an outer local variable, this denotes the outer actual variable\r\n  if the argument has a matching synthetic field\r\n","ConstantMethodref":"accept accept org.aspectj.apache.bcel.classfile.ConstantMethodref org.aspectj.apache.bcel.classfile.ConstantMethodref","IMessageContext":"getContextId getContextId org.aspectj.bridge.IMessageContext org.aspectj.bridge.IMessageContext","Signature":"toString toShortString toLongString getName getModifiers getDeclaringType getDeclaringTypeName accept dump getSignatureIndex setSignatureIndex getSignature mark getData reset unread identStart matchIdent matchGJIdent translate isFormalParameterList isActualParameterList toString copy asClassSignature asMethodTypeSignature asFieldTypeSignature toString toString toString isBaseType isBaseType toString isClassTypeSignature isTypeVariableSignature isArrayTypeSignature isClassTypeSignature toString isTypeVariableSignature toString isArrayTypeSignature toString toString toString toString toShortString toLongString getName getModifiers getDeclaringType getDeclaringTypeName checkName createArraySignature createArraySignature createMethodSignature createMethodSignature createTypeParameterSignature createTypeParameterSignature createTypeSignature createCharArrayTypeSignature consumeWhitespace encodeQualifiedName encodeArrayDimension checkArrayDimension checkNextChar encodeTypeSignature createTypeSignature getArrayCount getArrayCount getElementType getElementType getParameterCount getTypeSignatureKind getTypeSignatureKind getParameterCount getParameterTypes getParameterTypes getThrownExceptionTypes getThrownExceptionTypes getTypeArguments getTypeArguments getTypeErasure getTypeErasure getTypeParameters getTypeParameters getTypeVariable getTypeVariable getTypeParameterBounds getTypeParameterBounds getQualifier getQualifier getReturnType getReturnType getSignatureQualifier getSignatureQualifier getSignatureSimpleName getSignatureSimpleName getSimpleName getSimpleName appendSimpleName appendArgumentSimpleNames getSimpleNames getSimpleNames removeCapture removeCapture toCharArray toCharArray toCharArray appendTypeSignature appendTypeSignature appendArrayTypeSignature appendCaptureTypeSignature appendArrayTypeSignature appendClassTypeSignature appendTypeArgumentSignatures appendTypeArgumentSignature toQualifiedName toQualifiedName toString toString toString accept dump getSignatureIndex setSignatureIndex getSignature mark getData reset unread identStart matchIdent matchGJIdent translate isFormalParameterList isActualParameterList toString copy asClassSignature asMethodTypeSignature asFieldTypeSignature toString toString toString isBaseType isBaseType toString isClassTypeSignature isTypeVariableSignature isArrayTypeSignature isClassTypeSignature toString isTypeVariableSignature toString isArrayTypeSignature toString toString toString toString toShortString toLongString getName getModifiers getDeclaringType getDeclaringTypeName signature_index classSig methodSig fieldSig formalTypeParameters superclassSignature superInterfaceSignatures formalTypeParameters parameters returnType throwsSignatures identifier classBound interfaceBounds sig classSignature outerType nestedTypes typeVariableName typeSig identifier typeArguments isWildcard isPlus isMinus signature C_BOOLEAN C_BYTE C_CHAR C_DOUBLE C_FLOAT C_INT C_SEMICOLON C_COLON C_LONG C_SHORT C_VOID C_TYPE_VARIABLE C_STAR C_EXCEPTION_START C_EXTENDS C_SUPER C_DOT C_DOLLAR C_ARRAY C_RESOLVED C_UNRESOLVED C_NAME_END C_PARAM_START C_PARAM_END C_GENERIC_START C_GENERIC_END C_CAPTURE SIG_BOOLEAN SIG_BYTE SIG_CHAR SIG_DOUBLE SIG_FLOAT SIG_INT SIG_LONG SIG_SHORT SIG_VOID CLASS_TYPE_SIGNATURE BASE_TYPE_SIGNATURE TYPE_VARIABLE_SIGNATURE ARRAY_TYPE_SIGNATURE WILDCARD_TYPE_SIGNATURE CAPTURE_TYPE_SIGNATURE BOOLEAN BYTE CHAR DOUBLE FLOAT INT LONG SHORT VOID EXTENDS SUPER CAPTURE signature_index classSig methodSig fieldSig formalTypeParameters superclassSignature superInterfaceSignatures formalTypeParameters parameters returnType throwsSignatures identifier classBound interfaceBounds sig classSignature outerType nestedTypes typeVariableName typeSig identifier typeArguments isWildcard isPlus isMinus signature org.aspectj.lang.Signature org.aspectj.apache.bcel.classfile.Signature org.aspectj.lang.Signature org.aspectj.org.eclipse.jdt.core.Signature org.aspectj.apache.bcel.classfile.Signature org.aspectj.lang.Signature  Ok, formal parameter\r\n  System.out.println(\"Enter <\");\r\n  List of parameters\r\n  System.out.println(\"Still no >\");\r\n  Recursive call\r\n  System.out.println(\"Sig:\" + s);\r\n  null if isWildcard\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  param signature with no bounds still gets trailing colon\r\n  $NON-NLS-1$\r\n  will be incremented\r\n  allow spaces before a dot\r\n  process dot immediately to avoid one iteration\r\n  primitive type?\r\n  wildcard\r\n  fall-thru for wildcard part of capture typecheckPos\r\n  non primitive type\r\n  loop on qualifiedName[<args>][.qualifiedName[<args>]*\r\n  skip array dimension which were preprocessed\r\n  signature is syntactically incorrect if last character is C_ARRAY\r\n  need a minimum 1 char\r\n  need a minimum 1 char\r\n  skip type parameters\r\n  ignore return type\r\n  cannot have type arguments otherwise signature would end by \">;\"\r\n  start to count generic end  invalid number of generic start  start after leading '<'\r\n  skip colon\r\n  no class bound\r\n  position at start of next param if any\r\n  position at start of next param if any\r\n  position at start of next param if any\r\n  iterate over bounds\r\n  next param start from here\r\n  no \":\" means can't be a formal type parameter signature\r\n  no \":\" means can't be a formal type parameter signature\r\n  no class or interface bounds\r\n  no interface bounds\r\n  no class bound, but 1 or more interface bounds\r\n  skip type parameters\r\n  there could be thrown exceptions behind, thus scan one type exactly\r\n  copy trailing portion, may contain dimensions\r\n  copy trailing portion, may contain dimensions\r\n  $NON-NLS-1$\r\n  leading segment got processed\r\n  copy trailing portion, may contain dimensions\r\n  <x.y.z, a.b<c>.d<e.f>> --> <z,d<f>>\r\n  return type\r\n  selector\r\n  parameters\r\n  need a minimum 1 char\r\n  a var args is an array type\r\n  need a minimum 2 char\r\n  need a minimum 2 char\r\n  need a minimum 2 char\r\n  need a minimum 3 chars \"Lx;\"\r\n  must start in \"L\" or \"Q\"\r\n  keep everything in an unresolved name\r\n  all done\r\n  once we hit type arguments there are no more package prefixes\r\n  erase package prefix\r\n  erase package prefix\r\n  once we hit \"$\" there are no more package prefixes\r\n  remove '.'\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  need a minimum 2 char \"<>\"\r\n  need a minimum 1 char\r\n  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  Ok, formal parameter\r\n  System.out.println(\"Enter <\");\r\n  List of parameters\r\n  System.out.println(\"Still no >\");\r\n  Recursive call\r\n  System.out.println(\"Sig:\" + s);\r\n  null if isWildcard\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","SourceAnnotationMethodInfo":"isAnnotationMethod defaultValueStart defaultValueEnd org.aspectj.org.eclipse.jdt.internal.core.SourceAnnotationMethodInfo /*\r\n\t * The positions of a default member value of an annotation method.\r\n\t * These are {-1, -1} if the method is an annotation method with no default value.\r\n\t * Otherwise these are the start and end (inclusive) of the expression representing the default value.\r\n\t */\r\n /*\r\n * Element info for annotation method from source.\r\n */\r\n","AjdeCoreBuildManager":"performBuild reportProgressBegin getFormattedOptionsString formatCollection formatMap formatOptionalString generateAjBuildConfig mergeInto configureNonStandardOptions tokenizeString handleMessage setCustomMungerFactory getCustomMungerFactory cleanupEnvironment compiler buildEventNotifier ajBuildManager msgHandlerAdapter org.aspectj.ajde.core.internal.AjdeCoreBuildManager  incremental compilation works correctly\r\n  No existing state so we must do a full build\r\n  If an incremental build is requested, check that we can\r\n  record the options passed to the compiler if INFO turned on\r\n  Only rebuild the config object if the configuration has changed\r\n  pass it through for the state to use it when making decisions\r\n  FULL BUILD\r\n  Retrieve the set of files from either an arg file (@filename) or the compiler configuration\r\n  Process the CLASSPATH\r\n  Process the OUTJAR\r\n  Process the OUTPUT LOCATION MANAGER\r\n  Process the INPATH\r\n  are used to see if there have been changes in classes on the inpath\r\n  Process the SOURCE PATH RESOURCES\r\n  Process the ASPECTPATH\r\n  Process the JAVA OPTIONS MAP\r\n  Process the NON-STANDARD COMPILER OPTIONS\r\n  always force model generation in AJDE\r\n  always be in incremental mode in AJDE\r\n  always force proceedOnError in AJDE\r\n  won't accidentally get treated as a pair of options (can be needed for xlint props file option)\r\n  dont tokenize within double quotes\r\n  (we don't want to lose the settings we already have)\r\n  copy globals where local is not set\r\n /*\r\n\t\t\t * if (buildFresh) { AjBuildConfig buildConfig = genAjBuildConfig(); if (buildConfig == null) return;\r\n\t\t\t * ajBuildManager.batchBuild(buildConfig,msgHandlerAdapter); } else { AjBuildConfig buildConfig =\r\n\t\t\t * ajBuildManager.getState().getBuildConfig();\r\n\t\t\t * \r\n\t\t\t * ajBuildManager.incrementalBuild(buildConfig,msgHandlerAdapter); }\r\n\t\t\t */\r\n","AnnotationPatternList":"getAnnotationPatterns parameterizeWith resolve matches size get resolveBindings resolveReferences toString equals hashCode read write accept traverse getAnnotationPatterns parameterizeWith resolve matches size get resolveBindings resolveReferences toString equals hashCode read write accept traverse typePatterns ellipsisCount EMPTY ANY typePatterns ellipsisCount EMPTY ANY org.aspectj.weaver.patterns.AnnotationPatternList org.aspectj.weaver.patterns.AnnotationPatternList  do some quick length tests first\r\n  now work through the args and the patterns, skipping at ellipsis\r\n  can never match\r\n  could still match at runtime\r\n  match ellipsisMatchCount args\r\n  do some quick length tests first\r\n  now work through the args and the patterns, skipping at ellipsis\r\n  can never match\r\n  could still match at runtime\r\n  match ellipsisMatchCount args\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2004 IBM Corporation.\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * ******************************************************************/\r\n","LintMessage":"getLintKind getLintKind lintKind lintKind org.aspectj.weaver.LintMessage org.aspectj.weaver.LintMessage  private Lint.Kind lintKind;\r\n  private Lint.Kind lintKind;\r\n /* *******************************************************************\r\n * Copyright (c) 2002-2006 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n *     AndyClement extracted as self contained type from Lint type (4-Aug-06)\r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 2002-2006 Contributors\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     PARC     initial implementation \r\n *     AndyClement extracted as self contained type from Lint type (4-Aug-06)\r\n * ******************************************************************/\r\n","FieldAccess":"propertyDescriptors internalStructuralPropertiesForType internalGetSetChildProperty getNodeType0 clone0 subtreeMatch0 accept0 getExpression setExpression getName setName memSize resolveFieldBinding treeSize EXPRESSION_PROPERTY NAME_PROPERTY PROPERTY_DESCRIPTORS expression fieldName org.aspectj.org.eclipse.jdt.core.dom.FieldAccess  $NON-NLS-1$\r\n  $NON-NLS-1$\r\n  allow default implementation to flag the error\r\n  dispatch to correct overloaded match method\r\n  visit children in normal left to right reading order\r\n  lazy init must be thread-safe for readers\r\n  lazy init must be thread-safe for readers\r\n  treat Code as free\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n /* (omit javadoc for this method)\r\n\t * Method declared on ASTNode.\r\n\t */\r\n","MemberSignatureImpl":"org.aspectj.runtime.reflect.MemberSignatureImpl org.aspectj.runtime.reflect.MemberSignatureImpl org.aspectj.runtime.reflect.MemberSignatureImpl /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n /* *******************************************************************\r\n * Copyright (c) 1999-2001 Xerox Corporation, \r\n *               2002 Palo Alto Research Center, Incorporated (PARC).\r\n * All rights reserved. \r\n * This program and the accompanying materials are made available \r\n * under the terms of the Eclipse Public License v1.0 \r\n * which accompanies this distribution and is available at \r\n * http://www.eclipse.org/legal/epl-v10.html \r\n *  \r\n * Contributors: \r\n *     Xerox/PARC     initial implementation \r\n * ******************************************************************/\r\n","ClassParser":"parse readAttributes readClassInfo readConstantPool readFields readID readInterfaces readMethods readVersion parse readAttributes readClassInfo readConstantPool readFields readID readInterfaces readMethods readVersion file filename classnameIndex superclassnameIndex major minor accessflags interfaceIndices cpool fields methods attributes BUFSIZE NO_INTERFACES file filename classnameIndex superclassnameIndex major minor accessflags interfaceIndices cpool fields methods attributes BUFSIZE NO_INTERFACES org.aspectj.apache.bcel.classfile.ClassParser org.aspectj.apache.bcel.classfile.ClassParser  Check magic tag of class file\r\n  Get compiler version\r\n  Read constant pool entries\r\n  Get class information\r\n  Get interface information, i.e., implemented interfaces\r\n  Read class fields, i.e., the variables of the class\r\n  Read class methods, i.e., the functions in the class\r\n  Read class attributes\r\n  Read everything of interest, so close the file\r\n  Return the information we have gathered in a new object\r\n  add some context if we can\r\n  this loses the old stack trace but I dont think that matters!\r\n  Check magic tag of class file\r\n  Get compiler version\r\n  Read constant pool entries\r\n  Get class information\r\n  Get interface information, i.e., implemented interfaces\r\n  Read class fields, i.e., the variables of the class\r\n  Read class methods, i.e., the functions in the class\r\n  Read class attributes\r\n  Read everything of interest, so close the file\r\n  Return the information we have gathered in a new object\r\n  add some context if we can\r\n  this loses the old stack trace but I dont think that matters!\r\n /* Interfaces are implicitely abstract, the flag should be set\r\n     * according to the JVM specification */\r\n /* Interfaces are implicitely abstract, the flag should be set\r\n     * according to the JVM specification */\r\n"}